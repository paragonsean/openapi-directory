/*
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Abschlussbelegdaten;
import org.openapitools.client.model.Beleg;
import org.openapitools.client.model.Belegdaten;
import org.openapitools.client.model.Belege;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BelegApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BelegApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BelegApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addBeleg
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to use for signing data. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to store. (required)
     * @param belegdaten An object that contains all data for a particular &#x60;Beleg&#x60; and is formatted according to RKSV \&quot;Signaturformat\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Beleg&#x60; has been signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
        <tr><td> 400 </td><td> The provided request payload is invalid i.e. not conform the the JSON schema. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access token is either missing or invalid. Be sure to include the Authorization HTTP header. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A &#x60;Beleg&#x60; with this particular &#x60;belegUuid&#x60; already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The provided request payload is not JSON encoded. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The receipt could not be signed either because the HSM delivered invalid data or the request signing request timed out (currently after 10 seconds). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBelegCall(String registrierkasseUuid, String belegUuid, Belegdaten belegdaten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = belegdaten;

        // create path and map variables
        String localVarPath = "/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()))
            .replace("{" + "belegUuid" + "}", localVarApiClient.escapeString(belegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBelegValidateBeforeCall(String registrierkasseUuid, String belegUuid, Belegdaten belegdaten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling addBeleg(Async)");
        }

        // verify the required parameter 'belegUuid' is set
        if (belegUuid == null) {
            throw new ApiException("Missing the required parameter 'belegUuid' when calling addBeleg(Async)");
        }

        // verify the required parameter 'belegdaten' is set
        if (belegdaten == null) {
            throw new ApiException("Missing the required parameter 'belegdaten' when calling addBeleg(Async)");
        }

        return addBelegCall(registrierkasseUuid, belegUuid, belegdaten, _callback);

    }

    /**
     * 
     * Signs a receipt and stores it in the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to use for signing data. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to store. (required)
     * @param belegdaten An object that contains all data for a particular &#x60;Beleg&#x60; and is formatted according to RKSV \&quot;Signaturformat\&quot;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Beleg&#x60; has been signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
        <tr><td> 400 </td><td> The provided request payload is invalid i.e. not conform the the JSON schema. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access token is either missing or invalid. Be sure to include the Authorization HTTP header. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A &#x60;Beleg&#x60; with this particular &#x60;belegUuid&#x60; already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The provided request payload is not JSON encoded. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The receipt could not be signed either because the HSM delivered invalid data or the request signing request timed out (currently after 10 seconds). </td><td>  -  </td></tr>
     </table>
     */
    public void addBeleg(String registrierkasseUuid, String belegUuid, Belegdaten belegdaten) throws ApiException {
        addBelegWithHttpInfo(registrierkasseUuid, belegUuid, belegdaten);
    }

    /**
     * 
     * Signs a receipt and stores it in the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to use for signing data. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to store. (required)
     * @param belegdaten An object that contains all data for a particular &#x60;Beleg&#x60; and is formatted according to RKSV \&quot;Signaturformat\&quot;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Beleg&#x60; has been signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
        <tr><td> 400 </td><td> The provided request payload is invalid i.e. not conform the the JSON schema. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access token is either missing or invalid. Be sure to include the Authorization HTTP header. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A &#x60;Beleg&#x60; with this particular &#x60;belegUuid&#x60; already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The provided request payload is not JSON encoded. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The receipt could not be signed either because the HSM delivered invalid data or the request signing request timed out (currently after 10 seconds). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addBelegWithHttpInfo(String registrierkasseUuid, String belegUuid, Belegdaten belegdaten) throws ApiException {
        okhttp3.Call localVarCall = addBelegValidateBeforeCall(registrierkasseUuid, belegUuid, belegdaten, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Signs a receipt and stores it in the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to use for signing data. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to store. (required)
     * @param belegdaten An object that contains all data for a particular &#x60;Beleg&#x60; and is formatted according to RKSV \&quot;Signaturformat\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Beleg&#x60; has been signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
        <tr><td> 400 </td><td> The provided request payload is invalid i.e. not conform the the JSON schema. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access token is either missing or invalid. Be sure to include the Authorization HTTP header. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A &#x60;Beleg&#x60; with this particular &#x60;belegUuid&#x60; already exists. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> The provided request payload is not JSON encoded. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The receipt could not be signed either because the HSM delivered invalid data or the request signing request timed out (currently after 10 seconds). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBelegAsync(String registrierkasseUuid, String belegUuid, Belegdaten belegdaten, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBelegValidateBeforeCall(registrierkasseUuid, belegUuid, belegdaten, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for belegeBelegUuidGet
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call belegeBelegUuidGetCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/belege/{belegUuid}"
            .replace("{" + "belegUuid" + "}", localVarApiClient.escapeString(belegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call belegeBelegUuidGetValidateBeforeCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'belegUuid' is set
        if (belegUuid == null) {
            throw new ApiException("Missing the required parameter 'belegUuid' when calling belegeBelegUuidGet(Async)");
        }

        return belegeBelegUuidGetCall(belegUuid, _callback);

    }

    /**
     * 
     * Retrieves a particular &#x60;Beleg&#x60; from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @return Beleg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public Beleg belegeBelegUuidGet(String belegUuid) throws ApiException {
        ApiResponse<Beleg> localVarResp = belegeBelegUuidGetWithHttpInfo(belegUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a particular &#x60;Beleg&#x60; from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @return ApiResponse&lt;Beleg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Beleg> belegeBelegUuidGetWithHttpInfo(String belegUuid) throws ApiException {
        okhttp3.Call localVarCall = belegeBelegUuidGetValidateBeforeCall(belegUuid, null);
        Type localVarReturnType = new TypeToken<Beleg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a particular &#x60;Beleg&#x60; from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call belegeBelegUuidGetAsync(String belegUuid, final ApiCallback<Beleg> _callback) throws ApiException {

        okhttp3.Call localVarCall = belegeBelegUuidGetValidateBeforeCall(belegUuid, _callback);
        Type localVarReturnType = new TypeToken<Beleg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAbschluss
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param abschlussbelegdaten An object that contains all data for a particular &#x60;Abschlussbeleg&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Abschlussbeleg&#x60; has been created, signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createAbschlussCall(String registrierkasseUuid, Abschlussbelegdaten abschlussbelegdaten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = abschlussbelegdaten;

        // create path and map variables
        String localVarPath = "/registrierkassen/{registrierkasseUuid}/abschluss"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAbschlussValidateBeforeCall(String registrierkasseUuid, Abschlussbelegdaten abschlussbelegdaten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling createAbschluss(Async)");
        }

        // verify the required parameter 'abschlussbelegdaten' is set
        if (abschlussbelegdaten == null) {
            throw new ApiException("Missing the required parameter 'abschlussbelegdaten' when calling createAbschluss(Async)");
        }

        return createAbschlussCall(registrierkasseUuid, abschlussbelegdaten, _callback);

    }

    /**
     * 
     * Generates an &#x60;Abschlussbeleg&#x60;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param abschlussbelegdaten An object that contains all data for a particular &#x60;Abschlussbeleg&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Abschlussbeleg&#x60; has been created, signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
     </table>
     */
    public void createAbschluss(String registrierkasseUuid, Abschlussbelegdaten abschlussbelegdaten) throws ApiException {
        createAbschlussWithHttpInfo(registrierkasseUuid, abschlussbelegdaten);
    }

    /**
     * 
     * Generates an &#x60;Abschlussbeleg&#x60;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param abschlussbelegdaten An object that contains all data for a particular &#x60;Abschlussbeleg&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Abschlussbeleg&#x60; has been created, signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> createAbschlussWithHttpInfo(String registrierkasseUuid, Abschlussbelegdaten abschlussbelegdaten) throws ApiException {
        okhttp3.Call localVarCall = createAbschlussValidateBeforeCall(registrierkasseUuid, abschlussbelegdaten, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Generates an &#x60;Abschlussbeleg&#x60;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param abschlussbelegdaten An object that contains all data for a particular &#x60;Abschlussbeleg&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The &#x60;Abschlussbeleg&#x60; has been created, signed and added to the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  * Location - The URL (&#x60;_href&#x60;) of the newly created &#x60;Beleg&#x60; resource. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createAbschlussAsync(String registrierkasseUuid, Abschlussbelegdaten abschlussbelegdaten, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAbschlussValidateBeforeCall(registrierkasseUuid, abschlussbelegdaten, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBeleg
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; that contains the requested &#x60;Beleg&#x60;. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBelegCall(String registrierkasseUuid, String belegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()))
            .replace("{" + "belegUuid" + "}", localVarApiClient.escapeString(belegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBelegValidateBeforeCall(String registrierkasseUuid, String belegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling getBeleg(Async)");
        }

        // verify the required parameter 'belegUuid' is set
        if (belegUuid == null) {
            throw new ApiException("Missing the required parameter 'belegUuid' when calling getBeleg(Async)");
        }

        return getBelegCall(registrierkasseUuid, belegUuid, _callback);

    }

    /**
     * 
     * Retrieves a particular &#x60;Beleg&#x60; from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; that contains the requested &#x60;Beleg&#x60;. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @return Beleg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public Beleg getBeleg(String registrierkasseUuid, String belegUuid) throws ApiException {
        ApiResponse<Beleg> localVarResp = getBelegWithHttpInfo(registrierkasseUuid, belegUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a particular &#x60;Beleg&#x60; from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; that contains the requested &#x60;Beleg&#x60;. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @return ApiResponse&lt;Beleg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Beleg> getBelegWithHttpInfo(String registrierkasseUuid, String belegUuid) throws ApiException {
        okhttp3.Call localVarCall = getBelegValidateBeforeCall(registrierkasseUuid, belegUuid, null);
        Type localVarReturnType = new TypeToken<Beleg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a particular &#x60;Beleg&#x60; from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; that contains the requested &#x60;Beleg&#x60;. (required)
     * @param belegUuid The &#x60;_uuid&#x60; of the &#x60;Beleg&#x60; to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested &#x60;Beleg&#x60; resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested &#x60;Beleg&#x60; resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBelegAsync(String registrierkasseUuid, String belegUuid, final ApiCallback<Beleg> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBelegValidateBeforeCall(registrierkasseUuid, belegUuid, _callback);
        Type localVarReturnType = new TypeToken<Beleg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBelege
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param format Determines the format of the &#x60;Beleg&#x60; collection. (required)
     * @param order Determines the sorting order. (optional, default to asc)
     * @param limit Limits the number of returned results. (optional)
     * @param offset Skips the specified number of results from the result set. (optional, default to 0)
     * @param before Only return results that where saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that where saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param gte Only return results that have at least a particular &#x60;Belegnummer&#x60;. (optional)
     * @param lte Only return results that have at most a particular &#x60;Belegnummer&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The &#x60;Beleg&#x60; collection from the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBelegeCall(String registrierkasseUuid, String format, String order, Integer limit, Integer offset, String before, String after, Integer gte, Integer lte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrierkassen/{registrierkasseUuid}/belege"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (gte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gte", gte));
        }

        if (lte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lte", lte));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBelegeValidateBeforeCall(String registrierkasseUuid, String format, String order, Integer limit, Integer offset, String before, String after, Integer gte, Integer lte, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling getBelege(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getBelege(Async)");
        }

        return getBelegeCall(registrierkasseUuid, format, order, limit, offset, before, after, gte, lte, _callback);

    }

    /**
     * 
     * Retrieves the &#x60;Beleg&#x60; collection from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param format Determines the format of the &#x60;Beleg&#x60; collection. (required)
     * @param order Determines the sorting order. (optional, default to asc)
     * @param limit Limits the number of returned results. (optional)
     * @param offset Skips the specified number of results from the result set. (optional, default to 0)
     * @param before Only return results that where saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that where saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param gte Only return results that have at least a particular &#x60;Belegnummer&#x60;. (optional)
     * @param lte Only return results that have at most a particular &#x60;Belegnummer&#x60;. (optional)
     * @return Belege
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The &#x60;Beleg&#x60; collection from the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  -  </td></tr>
     </table>
     */
    public Belege getBelege(String registrierkasseUuid, String format, String order, Integer limit, Integer offset, String before, String after, Integer gte, Integer lte) throws ApiException {
        ApiResponse<Belege> localVarResp = getBelegeWithHttpInfo(registrierkasseUuid, format, order, limit, offset, before, after, gte, lte);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the &#x60;Beleg&#x60; collection from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param format Determines the format of the &#x60;Beleg&#x60; collection. (required)
     * @param order Determines the sorting order. (optional, default to asc)
     * @param limit Limits the number of returned results. (optional)
     * @param offset Skips the specified number of results from the result set. (optional, default to 0)
     * @param before Only return results that where saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that where saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param gte Only return results that have at least a particular &#x60;Belegnummer&#x60;. (optional)
     * @param lte Only return results that have at most a particular &#x60;Belegnummer&#x60;. (optional)
     * @return ApiResponse&lt;Belege&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The &#x60;Beleg&#x60; collection from the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Belege> getBelegeWithHttpInfo(String registrierkasseUuid, String format, String order, Integer limit, Integer offset, String before, String after, Integer gte, Integer lte) throws ApiException {
        okhttp3.Call localVarCall = getBelegeValidateBeforeCall(registrierkasseUuid, format, order, limit, offset, before, after, gte, lte, null);
        Type localVarReturnType = new TypeToken<Belege>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the &#x60;Beleg&#x60; collection from the \&quot;Datenerfassungsprotokoll\&quot;.
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to retrieve the &#x60;Beleg&#x60; collection. (required)
     * @param format Determines the format of the &#x60;Beleg&#x60; collection. (required)
     * @param order Determines the sorting order. (optional, default to asc)
     * @param limit Limits the number of returned results. (optional)
     * @param offset Skips the specified number of results from the result set. (optional, default to 0)
     * @param before Only return results that where saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that where saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param gte Only return results that have at least a particular &#x60;Belegnummer&#x60;. (optional)
     * @param lte Only return results that have at most a particular &#x60;Belegnummer&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The &#x60;Beleg&#x60; collection from the \&quot;Datenerfassungsprotokoll\&quot;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBelegeAsync(String registrierkasseUuid, String format, String order, Integer limit, Integer offset, String before, String after, Integer gte, Integer lte, final ApiCallback<Belege> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBelegeValidateBeforeCall(registrierkasseUuid, format, order, limit, offset, before, after, gte, lte, _callback);
        Type localVarReturnType = new TypeToken<Belege>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
