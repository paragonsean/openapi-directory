/*
 * obono RKSV API
 * Provides a RESTful API for interacting with virtual cash registers and creating receipts that are conform with the Registrierkassensicherheitsverordnung (RKSV).  You may find our [automatically generated clients](./clients) for various programming languages and environments helpful... 
 *
 * The version of the OpenAPI document: 1.4.0.0
 * Contact: info@obono.at
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param posten Export &#x60;Posten&#x60; instead of &#x60;Belegdaten&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetCall(String registrierkasseUuid, String before, String after, Boolean posten, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/csv/registrierkassen/{registrierkasseUuid}/belege"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (posten != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("posten", posten));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(String registrierkasseUuid, String before, String after, Boolean posten, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet(Async)");
        }

        return exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetCall(registrierkasseUuid, before, after, posten, _callback);

    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param posten Export &#x60;Posten&#x60; instead of &#x60;Belegdaten&#x60;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportCsvRegistrierkassenRegistrierkasseUuidBelegeGet(String registrierkasseUuid, String before, String after, Boolean posten) throws ApiException {
        exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(registrierkasseUuid, before, after, posten);
    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param posten Export &#x60;Posten&#x60; instead of &#x60;Belegdaten&#x60;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(String registrierkasseUuid, String before, String after, Boolean posten) throws ApiException {
        okhttp3.Call localVarCall = exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, posten, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param posten Export &#x60;Posten&#x60; instead of &#x60;Belegdaten&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetAsync(String registrierkasseUuid, String before, String after, Boolean posten, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportCsvRegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, posten, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP131 / CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/dep131/registrierkassen/{registrierkasseUuid}/belege"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet(Async)");
        }

        return exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetCall(registrierkasseUuid, before, after, _callback);

    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP131 / CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportDep131RegistrierkassenRegistrierkasseUuidBelegeGet(String registrierkasseUuid, String before, String after) throws ApiException {
        exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(registrierkasseUuid, before, after);
    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP131 / CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(String registrierkasseUuid, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP131 / CSV representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetAsync(String registrierkasseUuid, String before, String after, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDep131RegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP7 representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/dep7/registrierkassen/{registrierkasseUuid}/belege"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet(Async)");
        }

        return exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetCall(registrierkasseUuid, before, after, _callback);

    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP7 representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportDep7RegistrierkassenRegistrierkasseUuidBelegeGet(String registrierkasseUuid, String before, String after) throws ApiException {
        exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(registrierkasseUuid, before, after);
    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP7 representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(String registrierkasseUuid, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its DEP7 representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetAsync(String registrierkasseUuid, String before, String after, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDep7RegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportGobdRegistrierkassenRegistrierkasseUuidGet
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its GoBD representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportGobdRegistrierkassenRegistrierkasseUuidGetCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/gobd/registrierkassen/{registrierkasseUuid}"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportGobdRegistrierkassenRegistrierkasseUuidGetValidateBeforeCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling exportGobdRegistrierkassenRegistrierkasseUuidGet(Async)");
        }

        return exportGobdRegistrierkassenRegistrierkasseUuidGetCall(registrierkasseUuid, before, after, _callback);

    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its GoBD representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportGobdRegistrierkassenRegistrierkasseUuidGet(String registrierkasseUuid, String before, String after) throws ApiException {
        exportGobdRegistrierkassenRegistrierkasseUuidGetWithHttpInfo(registrierkasseUuid, before, after);
    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its GoBD representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportGobdRegistrierkassenRegistrierkasseUuidGetWithHttpInfo(String registrierkasseUuid, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = exportGobdRegistrierkassenRegistrierkasseUuidGetValidateBeforeCall(registrierkasseUuid, before, after, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its GoBD representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportGobdRegistrierkassenRegistrierkasseUuidGetAsync(String registrierkasseUuid, String before, String after, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportGobdRegistrierkassenRegistrierkasseUuidGetValidateBeforeCall(registrierkasseUuid, before, after, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportHtmlBelegeBelegUuidGet
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its HTML representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportHtmlBelegeBelegUuidGetCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/html/belege/{belegUuid}"
            .replace("{" + "belegUuid" + "}", localVarApiClient.escapeString(belegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportHtmlBelegeBelegUuidGetValidateBeforeCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'belegUuid' is set
        if (belegUuid == null) {
            throw new ApiException("Missing the required parameter 'belegUuid' when calling exportHtmlBelegeBelegUuidGet(Async)");
        }

        return exportHtmlBelegeBelegUuidGetCall(belegUuid, _callback);

    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its HTML representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportHtmlBelegeBelegUuidGet(String belegUuid) throws ApiException {
        exportHtmlBelegeBelegUuidGetWithHttpInfo(belegUuid);
    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its HTML representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportHtmlBelegeBelegUuidGetWithHttpInfo(String belegUuid) throws ApiException {
        okhttp3.Call localVarCall = exportHtmlBelegeBelegUuidGetValidateBeforeCall(belegUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its HTML representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportHtmlBelegeBelegUuidGetAsync(String belegUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportHtmlBelegeBelegUuidGetValidateBeforeCall(belegUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportPdfBelegeBelegUuidGet
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its PDF representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPdfBelegeBelegUuidGetCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/pdf/belege/{belegUuid}"
            .replace("{" + "belegUuid" + "}", localVarApiClient.escapeString(belegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportPdfBelegeBelegUuidGetValidateBeforeCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'belegUuid' is set
        if (belegUuid == null) {
            throw new ApiException("Missing the required parameter 'belegUuid' when calling exportPdfBelegeBelegUuidGet(Async)");
        }

        return exportPdfBelegeBelegUuidGetCall(belegUuid, _callback);

    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its PDF representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportPdfBelegeBelegUuidGet(String belegUuid) throws ApiException {
        exportPdfBelegeBelegUuidGetWithHttpInfo(belegUuid);
    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its PDF representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportPdfBelegeBelegUuidGetWithHttpInfo(String belegUuid) throws ApiException {
        okhttp3.Call localVarCall = exportPdfBelegeBelegUuidGetValidateBeforeCall(belegUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its PDF representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportPdfBelegeBelegUuidGetAsync(String belegUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportPdfBelegeBelegUuidGetValidateBeforeCall(belegUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportQrBelegeBelegUuidGet
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RKSV QR-Code as PNG file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportQrBelegeBelegUuidGetCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/qr/belege/{belegUuid}"
            .replace("{" + "belegUuid" + "}", localVarApiClient.escapeString(belegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportQrBelegeBelegUuidGetValidateBeforeCall(String belegUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'belegUuid' is set
        if (belegUuid == null) {
            throw new ApiException("Missing the required parameter 'belegUuid' when calling exportQrBelegeBelegUuidGet(Async)");
        }

        return exportQrBelegeBelegUuidGetCall(belegUuid, _callback);

    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RKSV QR-Code as PNG file. </td><td>  -  </td></tr>
     </table>
     */
    public void exportQrBelegeBelegUuidGet(String belegUuid) throws ApiException {
        exportQrBelegeBelegUuidGetWithHttpInfo(belegUuid);
    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RKSV QR-Code as PNG file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportQrBelegeBelegUuidGetWithHttpInfo(String belegUuid) throws ApiException {
        okhttp3.Call localVarCall = exportQrBelegeBelegUuidGetValidateBeforeCall(belegUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The RKSV QR-Code as PNG file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportQrBelegeBelegUuidGetAsync(String belegUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportQrBelegeBelegUuidGetValidateBeforeCall(belegUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportThermalPrintBelegeBelegUuidGet
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param qr Should the RKSV QR code should be rendered? (optional, default to true)
     * @param width Number of characters per line. (optional, default to 42)
     * @param dialect The thermal printer dialect. (optional, default to escpos)
     * @param encoding The encoding of the binary data. (optional, default to raw)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its ESC/POS or STAR representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportThermalPrintBelegeBelegUuidGetCall(String belegUuid, Boolean qr, Integer width, String dialect, String encoding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/thermal-print/belege/{belegUuid}"
            .replace("{" + "belegUuid" + "}", localVarApiClient.escapeString(belegUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (qr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qr", qr));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (dialect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dialect", dialect));
        }

        if (encoding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("encoding", encoding));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportThermalPrintBelegeBelegUuidGetValidateBeforeCall(String belegUuid, Boolean qr, Integer width, String dialect, String encoding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'belegUuid' is set
        if (belegUuid == null) {
            throw new ApiException("Missing the required parameter 'belegUuid' when calling exportThermalPrintBelegeBelegUuidGet(Async)");
        }

        return exportThermalPrintBelegeBelegUuidGetCall(belegUuid, qr, width, dialect, encoding, _callback);

    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param qr Should the RKSV QR code should be rendered? (optional, default to true)
     * @param width Number of characters per line. (optional, default to 42)
     * @param dialect The thermal printer dialect. (optional, default to escpos)
     * @param encoding The encoding of the binary data. (optional, default to raw)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its ESC/POS or STAR representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportThermalPrintBelegeBelegUuidGet(String belegUuid, Boolean qr, Integer width, String dialect, String encoding) throws ApiException {
        exportThermalPrintBelegeBelegUuidGetWithHttpInfo(belegUuid, qr, width, dialect, encoding);
    }

    /**
     * 
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param qr Should the RKSV QR code should be rendered? (optional, default to true)
     * @param width Number of characters per line. (optional, default to 42)
     * @param dialect The thermal printer dialect. (optional, default to escpos)
     * @param encoding The encoding of the binary data. (optional, default to raw)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its ESC/POS or STAR representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportThermalPrintBelegeBelegUuidGetWithHttpInfo(String belegUuid, Boolean qr, Integer width, String dialect, String encoding) throws ApiException {
        okhttp3.Call localVarCall = exportThermalPrintBelegeBelegUuidGetValidateBeforeCall(belegUuid, qr, width, dialect, encoding, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param belegUuid The &#x60;_uuid&#x60; of a particular &#x60;Beleg&#x60; to export. (required)
     * @param qr Should the RKSV QR code should be rendered? (optional, default to true)
     * @param width Number of characters per line. (optional, default to 42)
     * @param dialect The thermal printer dialect. (optional, default to escpos)
     * @param encoding The encoding of the binary data. (optional, default to raw)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A particular &#x60;Beleg&#x60; in its ESC/POS or STAR representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportThermalPrintBelegeBelegUuidGetAsync(String belegUuid, Boolean qr, Integer width, String dialect, String encoding, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportThermalPrintBelegeBelegUuidGetValidateBeforeCall(belegUuid, qr, width, dialect, encoding, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its Microsoft Excel representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export/xls/registrierkassen/{registrierkasseUuid}/belege"
            .replace("{" + "registrierkasseUuid" + "}", localVarApiClient.escapeString(registrierkasseUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(String registrierkasseUuid, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrierkasseUuid' is set
        if (registrierkasseUuid == null) {
            throw new ApiException("Missing the required parameter 'registrierkasseUuid' when calling exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet(Async)");
        }

        return exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetCall(registrierkasseUuid, before, after, _callback);

    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its Microsoft Excel representation. </td><td>  -  </td></tr>
     </table>
     */
    public void exportXlsRegistrierkassenRegistrierkasseUuidBelegeGet(String registrierkasseUuid, String before, String after) throws ApiException {
        exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(registrierkasseUuid, before, after);
    }

    /**
     * 
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its Microsoft Excel representation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetWithHttpInfo(String registrierkasseUuid, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param registrierkasseUuid The &#x60;_uuid&#x60; of the &#x60;Registrierkasse&#x60; to export. (required)
     * @param before Only return results that were saved before the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param after Only return results that were saved after the specified date-time string (i.e., anything that &#x60;Date.parse()&#x60; can parse). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exported data of a particular &#x60;Registrierkasse&#x60; in its Microsoft Excel representation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetAsync(String registrierkasseUuid, String before, String after, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportXlsRegistrierkassenRegistrierkasseUuidBelegeGetValidateBeforeCall(registrierkasseUuid, before, after, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
