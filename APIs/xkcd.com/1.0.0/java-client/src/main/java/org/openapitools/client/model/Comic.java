/*
 * XKCD
 * Webcomic of romance, sarcasm, math, and language.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Comic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:21:01.771243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Comic {
  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private String alt;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_IMG = "img";
  @SerializedName(SERIALIZED_NAME_IMG)
  private String img;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_NEWS = "news";
  @SerializedName(SERIALIZED_NAME_NEWS)
  private String news;

  public static final String SERIALIZED_NAME_NUM = "num";
  @SerializedName(SERIALIZED_NAME_NUM)
  private BigDecimal num;

  public static final String SERIALIZED_NAME_SAFE_TITLE = "safe_title";
  @SerializedName(SERIALIZED_NAME_SAFE_TITLE)
  private String safeTitle;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private String transcript;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public Comic() {
  }

  public Comic alt(String alt) {
    this.alt = alt;
    return this;
  }

  /**
   * Get alt
   * @return alt
   */
  @javax.annotation.Nullable
  public String getAlt() {
    return alt;
  }

  public void setAlt(String alt) {
    this.alt = alt;
  }


  public Comic day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Comic img(String img) {
    this.img = img;
    return this;
  }

  /**
   * Get img
   * @return img
   */
  @javax.annotation.Nullable
  public String getImg() {
    return img;
  }

  public void setImg(String img) {
    this.img = img;
  }


  public Comic link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Comic month(String month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @javax.annotation.Nullable
  public String getMonth() {
    return month;
  }

  public void setMonth(String month) {
    this.month = month;
  }


  public Comic news(String news) {
    this.news = news;
    return this;
  }

  /**
   * Get news
   * @return news
   */
  @javax.annotation.Nullable
  public String getNews() {
    return news;
  }

  public void setNews(String news) {
    this.news = news;
  }


  public Comic num(BigDecimal num) {
    this.num = num;
    return this;
  }

  /**
   * Get num
   * @return num
   */
  @javax.annotation.Nullable
  public BigDecimal getNum() {
    return num;
  }

  public void setNum(BigDecimal num) {
    this.num = num;
  }


  public Comic safeTitle(String safeTitle) {
    this.safeTitle = safeTitle;
    return this;
  }

  /**
   * Get safeTitle
   * @return safeTitle
   */
  @javax.annotation.Nullable
  public String getSafeTitle() {
    return safeTitle;
  }

  public void setSafeTitle(String safeTitle) {
    this.safeTitle = safeTitle;
  }


  public Comic title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Comic transcript(String transcript) {
    this.transcript = transcript;
    return this;
  }

  /**
   * Get transcript
   * @return transcript
   */
  @javax.annotation.Nullable
  public String getTranscript() {
    return transcript;
  }

  public void setTranscript(String transcript) {
    this.transcript = transcript;
  }


  public Comic year(String year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comic comic = (Comic) o;
    return Objects.equals(this.alt, comic.alt) &&
        Objects.equals(this.day, comic.day) &&
        Objects.equals(this.img, comic.img) &&
        Objects.equals(this.link, comic.link) &&
        Objects.equals(this.month, comic.month) &&
        Objects.equals(this.news, comic.news) &&
        Objects.equals(this.num, comic.num) &&
        Objects.equals(this.safeTitle, comic.safeTitle) &&
        Objects.equals(this.title, comic.title) &&
        Objects.equals(this.transcript, comic.transcript) &&
        Objects.equals(this.year, comic.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alt, day, img, link, month, news, num, safeTitle, title, transcript, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comic {\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    img: ").append(toIndentedString(img)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    news: ").append(toIndentedString(news)).append("\n");
    sb.append("    num: ").append(toIndentedString(num)).append("\n");
    sb.append("    safeTitle: ").append(toIndentedString(safeTitle)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alt");
    openapiFields.add("day");
    openapiFields.add("img");
    openapiFields.add("link");
    openapiFields.add("month");
    openapiFields.add("news");
    openapiFields.add("num");
    openapiFields.add("safe_title");
    openapiFields.add("title");
    openapiFields.add("transcript");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Comic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Comic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Comic is not found in the empty JSON string", Comic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Comic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Comic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alt") != null && !jsonObj.get("alt").isJsonNull()) && !jsonObj.get("alt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt").toString()));
      }
      if ((jsonObj.get("day") != null && !jsonObj.get("day").isJsonNull()) && !jsonObj.get("day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day").toString()));
      }
      if ((jsonObj.get("img") != null && !jsonObj.get("img").isJsonNull()) && !jsonObj.get("img").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `img` to be a primitive type in the JSON string but got `%s`", jsonObj.get("img").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("month") != null && !jsonObj.get("month").isJsonNull()) && !jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      if ((jsonObj.get("news") != null && !jsonObj.get("news").isJsonNull()) && !jsonObj.get("news").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `news` to be a primitive type in the JSON string but got `%s`", jsonObj.get("news").toString()));
      }
      if ((jsonObj.get("safe_title") != null && !jsonObj.get("safe_title").isJsonNull()) && !jsonObj.get("safe_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safe_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safe_title").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("transcript") != null && !jsonObj.get("transcript").isJsonNull()) && !jsonObj.get("transcript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcript").toString()));
      }
      if ((jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) && !jsonObj.get("year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Comic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Comic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Comic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Comic.class));

       return (TypeAdapter<T>) new TypeAdapter<Comic>() {
           @Override
           public void write(JsonWriter out, Comic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Comic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Comic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Comic
   * @throws IOException if the JSON string is invalid with respect to Comic
   */
  public static Comic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Comic.class);
  }

  /**
   * Convert an instance of Comic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

