/**
 * XKCD
 * Webcomic of romance, sarcasm, math, and language.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComic::OAIComic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComic::OAIComic() {
    this->initializeModel();
}

OAIComic::~OAIComic() {}

void OAIComic::initializeModel() {

    m_alt_isSet = false;
    m_alt_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_img_isSet = false;
    m_img_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_news_isSet = false;
    m_news_isValid = false;

    m_num_isSet = false;
    m_num_isValid = false;

    m_safe_title_isSet = false;
    m_safe_title_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIComic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComic::fromJsonObject(QJsonObject json) {

    m_alt_isValid = ::OpenAPI::fromJsonValue(m_alt, json[QString("alt")]);
    m_alt_isSet = !json[QString("alt")].isNull() && m_alt_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_img_isValid = ::OpenAPI::fromJsonValue(m_img, json[QString("img")]);
    m_img_isSet = !json[QString("img")].isNull() && m_img_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_news_isValid = ::OpenAPI::fromJsonValue(m_news, json[QString("news")]);
    m_news_isSet = !json[QString("news")].isNull() && m_news_isValid;

    m_num_isValid = ::OpenAPI::fromJsonValue(m_num, json[QString("num")]);
    m_num_isSet = !json[QString("num")].isNull() && m_num_isValid;

    m_safe_title_isValid = ::OpenAPI::fromJsonValue(m_safe_title, json[QString("safe_title")]);
    m_safe_title_isSet = !json[QString("safe_title")].isNull() && m_safe_title_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("transcript")]);
    m_transcript_isSet = !json[QString("transcript")].isNull() && m_transcript_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIComic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComic::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_isSet) {
        obj.insert(QString("alt"), ::OpenAPI::toJsonValue(m_alt));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_img_isSet) {
        obj.insert(QString("img"), ::OpenAPI::toJsonValue(m_img));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_news_isSet) {
        obj.insert(QString("news"), ::OpenAPI::toJsonValue(m_news));
    }
    if (m_num_isSet) {
        obj.insert(QString("num"), ::OpenAPI::toJsonValue(m_num));
    }
    if (m_safe_title_isSet) {
        obj.insert(QString("safe_title"), ::OpenAPI::toJsonValue(m_safe_title));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_transcript_isSet) {
        obj.insert(QString("transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIComic::getAlt() const {
    return m_alt;
}
void OAIComic::setAlt(const QString &alt) {
    m_alt = alt;
    m_alt_isSet = true;
}

bool OAIComic::is_alt_Set() const{
    return m_alt_isSet;
}

bool OAIComic::is_alt_Valid() const{
    return m_alt_isValid;
}

QString OAIComic::getDay() const {
    return m_day;
}
void OAIComic::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIComic::is_day_Set() const{
    return m_day_isSet;
}

bool OAIComic::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIComic::getImg() const {
    return m_img;
}
void OAIComic::setImg(const QString &img) {
    m_img = img;
    m_img_isSet = true;
}

bool OAIComic::is_img_Set() const{
    return m_img_isSet;
}

bool OAIComic::is_img_Valid() const{
    return m_img_isValid;
}

QString OAIComic::getLink() const {
    return m_link;
}
void OAIComic::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIComic::is_link_Set() const{
    return m_link_isSet;
}

bool OAIComic::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIComic::getMonth() const {
    return m_month;
}
void OAIComic::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIComic::is_month_Set() const{
    return m_month_isSet;
}

bool OAIComic::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIComic::getNews() const {
    return m_news;
}
void OAIComic::setNews(const QString &news) {
    m_news = news;
    m_news_isSet = true;
}

bool OAIComic::is_news_Set() const{
    return m_news_isSet;
}

bool OAIComic::is_news_Valid() const{
    return m_news_isValid;
}

double OAIComic::getNum() const {
    return m_num;
}
void OAIComic::setNum(const double &num) {
    m_num = num;
    m_num_isSet = true;
}

bool OAIComic::is_num_Set() const{
    return m_num_isSet;
}

bool OAIComic::is_num_Valid() const{
    return m_num_isValid;
}

QString OAIComic::getSafeTitle() const {
    return m_safe_title;
}
void OAIComic::setSafeTitle(const QString &safe_title) {
    m_safe_title = safe_title;
    m_safe_title_isSet = true;
}

bool OAIComic::is_safe_title_Set() const{
    return m_safe_title_isSet;
}

bool OAIComic::is_safe_title_Valid() const{
    return m_safe_title_isValid;
}

QString OAIComic::getTitle() const {
    return m_title;
}
void OAIComic::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIComic::is_title_Set() const{
    return m_title_isSet;
}

bool OAIComic::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIComic::getTranscript() const {
    return m_transcript;
}
void OAIComic::setTranscript(const QString &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIComic::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIComic::is_transcript_Valid() const{
    return m_transcript_isValid;
}

QString OAIComic::getYear() const {
    return m_year;
}
void OAIComic::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIComic::is_year_Set() const{
    return m_year_isSet;
}

bool OAIComic::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIComic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_img_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
