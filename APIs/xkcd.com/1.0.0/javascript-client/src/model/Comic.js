/**
 * XKCD
 * Webcomic of romance, sarcasm, math, and language.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Comic model module.
 * @module model/Comic
 * @version 1.0.0
 */
class Comic {
    /**
     * Constructs a new <code>Comic</code>.
     * @alias module:model/Comic
     */
    constructor() { 
        
        Comic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Comic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comic} obj Optional instance to populate.
     * @return {module:model/Comic} The populated <code>Comic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comic();

            if (data.hasOwnProperty('alt')) {
                obj['alt'] = ApiClient.convertToType(data['alt'], 'String');
            }
            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'String');
            }
            if (data.hasOwnProperty('img')) {
                obj['img'] = ApiClient.convertToType(data['img'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'String');
            }
            if (data.hasOwnProperty('news')) {
                obj['news'] = ApiClient.convertToType(data['news'], 'String');
            }
            if (data.hasOwnProperty('num')) {
                obj['num'] = ApiClient.convertToType(data['num'], 'Number');
            }
            if (data.hasOwnProperty('safe_title')) {
                obj['safe_title'] = ApiClient.convertToType(data['safe_title'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('transcript')) {
                obj['transcript'] = ApiClient.convertToType(data['transcript'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comic</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alt'] && !(typeof data['alt'] === 'string' || data['alt'] instanceof String)) {
            throw new Error("Expected the field `alt` to be a primitive type in the JSON string but got " + data['alt']);
        }
        // ensure the json data is a string
        if (data['day'] && !(typeof data['day'] === 'string' || data['day'] instanceof String)) {
            throw new Error("Expected the field `day` to be a primitive type in the JSON string but got " + data['day']);
        }
        // ensure the json data is a string
        if (data['img'] && !(typeof data['img'] === 'string' || data['img'] instanceof String)) {
            throw new Error("Expected the field `img` to be a primitive type in the JSON string but got " + data['img']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['month'] && !(typeof data['month'] === 'string' || data['month'] instanceof String)) {
            throw new Error("Expected the field `month` to be a primitive type in the JSON string but got " + data['month']);
        }
        // ensure the json data is a string
        if (data['news'] && !(typeof data['news'] === 'string' || data['news'] instanceof String)) {
            throw new Error("Expected the field `news` to be a primitive type in the JSON string but got " + data['news']);
        }
        // ensure the json data is a string
        if (data['safe_title'] && !(typeof data['safe_title'] === 'string' || data['safe_title'] instanceof String)) {
            throw new Error("Expected the field `safe_title` to be a primitive type in the JSON string but got " + data['safe_title']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['transcript'] && !(typeof data['transcript'] === 'string' || data['transcript'] instanceof String)) {
            throw new Error("Expected the field `transcript` to be a primitive type in the JSON string but got " + data['transcript']);
        }
        // ensure the json data is a string
        if (data['year'] && !(typeof data['year'] === 'string' || data['year'] instanceof String)) {
            throw new Error("Expected the field `year` to be a primitive type in the JSON string but got " + data['year']);
        }

        return true;
    }


}



/**
 * @member {String} alt
 */
Comic.prototype['alt'] = undefined;

/**
 * @member {String} day
 */
Comic.prototype['day'] = undefined;

/**
 * @member {String} img
 */
Comic.prototype['img'] = undefined;

/**
 * @member {String} link
 */
Comic.prototype['link'] = undefined;

/**
 * @member {String} month
 */
Comic.prototype['month'] = undefined;

/**
 * @member {String} news
 */
Comic.prototype['news'] = undefined;

/**
 * @member {Number} num
 */
Comic.prototype['num'] = undefined;

/**
 * @member {String} safe_title
 */
Comic.prototype['safe_title'] = undefined;

/**
 * @member {String} title
 */
Comic.prototype['title'] = undefined;

/**
 * @member {String} transcript
 */
Comic.prototype['transcript'] = undefined;

/**
 * @member {String} year
 */
Comic.prototype['year'] = undefined;






export default Comic;

