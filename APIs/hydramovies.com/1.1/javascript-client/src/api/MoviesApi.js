/**
 * Hydra Movies
 * Hydra Movies is a streaming service that holds information on thousands of popular movies.   The Hydra Movies API gives you access to [their entire collection of full movies.](https://hydramovies.com)  Each film returned provides you with the following data:  - Movie Title - Movie Release Year - Genre - Movie Summary - Movie Poster - IMDB ID - IMDB Rating - Runtime - Language - YouTube trailer
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Movies service.
* @module api/MoviesApi
* @version 1.1
*/
export default class MoviesApi {

    /**
    * Constructs a new MoviesApi. 
    * @alias module:api/MoviesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the currentMovieDataCsvGet operation.
     * @callback module:api/MoviesApi~currentMovieDataCsvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMovieByIMDBid
     * Returns a movie using the films unique IMDB identifier
     * @param {String} iMDBid IMDB ID of the movie to return
     * @param {module:api/MoviesApi~currentMovieDataCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    currentMovieDataCsvGet(iMDBid, callback) {
      let postBody = null;
      // verify the required parameter 'iMDBid' is set
      if (iMDBid === undefined || iMDBid === null) {
        throw new Error("Missing the required parameter 'iMDBid' when calling currentMovieDataCsvGet");
      }

      let pathParams = {
        'IMDBid': iMDBid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/current-Movie-Data.csv&imdb_id={IMDBid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentMovieDataCsvGet2 operation.
     * @callback module:api/MoviesApi~currentMovieDataCsvGet2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMovieByYear
     * Returns a movie based on the year of its release
     * @param {String} movieYear Release year of the movies to return
     * @param {module:api/MoviesApi~currentMovieDataCsvGet2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    currentMovieDataCsvGet2(movieYear, callback) {
      let postBody = null;
      // verify the required parameter 'movieYear' is set
      if (movieYear === undefined || movieYear === null) {
        throw new Error("Missing the required parameter 'movieYear' when calling currentMovieDataCsvGet2");
      }

      let pathParams = {
        'MovieYear': movieYear
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/current-Movie-Data.csv&movie_year={MovieYear}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
