/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetFavoritesForUser200Response from '../model/GetFavoritesForUser200Response';
import GetUser200Response from '../model/GetUser200Response';
import GetUsersForTeam200Response from '../model/GetUsersForTeam200Response';

/**
* Users service.
* @module api/UsersApi
* @version 1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFavoritesForUser operation.
     * @callback module:api/UsersApi~getFavoritesForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFavoritesForUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's favorites
     * Returns all of a user's favorites in the given workspace, of the given type. Results are given in order (The same order as Asana's sidebar).
     * @param {String} userGid A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
     * @param {module:model/String} resourceType The resource type of favorites to be returned.
     * @param {String} workspace The workspace in which to get favorites.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/UsersApi~getFavoritesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFavoritesForUser200Response}
     */
    getFavoritesForUser(userGid, resourceType, workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGid' is set
      if (userGid === undefined || userGid === null) {
        throw new Error("Missing the required parameter 'userGid' when calling getFavoritesForUser");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getFavoritesForUser");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getFavoritesForUser");
      }

      let pathParams = {
        'user_gid': userGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'resource_type': resourceType,
        'workspace': workspace
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFavoritesForUser200Response;
      return this.apiClient.callApi(
        '/users/{user_gid}/favorites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * Returns the full user record for the single user with the provided ID.
     * @param {String} userGid A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUser200Response}
     */
    getUser(userGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userGid' is set
      if (userGid === undefined || userGid === null) {
        throw new Error("Missing the required parameter 'userGid' when calling getUser");
      }

      let pathParams = {
        'user_gid': userGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUser200Response;
      return this.apiClient.callApi(
        '/users/{user_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UsersApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUsersForTeam200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple users
     * Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
     * @param {Object} opts Optional parameters
     * @param {String} [workspace] The workspace or organization ID to filter users on.
     * @param {String} [team] The team ID to filter users on.
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/UsersApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUsersForTeam200Response}
     */
    getUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'workspace': opts['workspace'],
        'team': opts['team'],
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUsersForTeam200Response;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersForTeam operation.
     * @callback module:api/UsersApi~getUsersForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUsersForTeam200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users in a team
     * Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
     * @param {String} teamGid Globally unique identifier for the team.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/UsersApi~getUsersForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUsersForTeam200Response}
     */
    getUsersForTeam(teamGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamGid' is set
      if (teamGid === undefined || teamGid === null) {
        throw new Error("Missing the required parameter 'teamGid' when calling getUsersForTeam");
      }

      let pathParams = {
        'team_gid': teamGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUsersForTeam200Response;
      return this.apiClient.callApi(
        '/teams/{team_gid}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersForWorkspace operation.
     * @callback module:api/UsersApi~getUsersForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUsersForTeam200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users in a workspace or organization
     * Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
     * @param {String} workspaceGid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/UsersApi~getUsersForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUsersForTeam200Response}
     */
    getUsersForWorkspace(workspaceGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceGid' is set
      if (workspaceGid === undefined || workspaceGid === null) {
        throw new Error("Missing the required parameter 'workspaceGid' when calling getUsersForWorkspace");
      }

      let pathParams = {
        'workspace_gid': workspaceGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUsersForTeam200Response;
      return this.apiClient.callApi(
        '/workspaces/{workspace_gid}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
