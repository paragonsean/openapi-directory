/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddDependenciesForTaskRequest from '../model/AddDependenciesForTaskRequest';
import AddDependentsForTaskRequest from '../model/AddDependentsForTaskRequest';
import AddFollowersRequest from '../model/AddFollowersRequest';
import AddProjectForTaskRequest from '../model/AddProjectForTaskRequest';
import AddTagForTaskRequest from '../model/AddTagForTaskRequest';
import CreateTask201Response from '../model/CreateTask201Response';
import CreateTaskRequest from '../model/CreateTaskRequest';
import DeleteAttachment200Response from '../model/DeleteAttachment200Response';
import DuplicateTaskRequest from '../model/DuplicateTaskRequest';
import ErrorResponse from '../model/ErrorResponse';
import GetJob200Response from '../model/GetJob200Response';
import GetTasksForProject200Response from '../model/GetTasksForProject200Response';
import RemoveFollowerForTaskRequest from '../model/RemoveFollowerForTaskRequest';
import RemoveProjectForTaskRequest from '../model/RemoveProjectForTaskRequest';
import RemoveTagForTaskRequest from '../model/RemoveTagForTaskRequest';
import SetParentForTaskRequest from '../model/SetParentForTaskRequest';

/**
* Tasks service.
* @module api/TasksApi
* @version 1.0
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDependenciesForTask operation.
     * @callback module:api/TasksApi~addDependenciesForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set dependencies for a task
     * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/AddDependenciesForTaskRequest} addDependenciesForTaskRequest The list of tasks to set as dependencies.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~addDependenciesForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    addDependenciesForTask(taskGid, addDependenciesForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = addDependenciesForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling addDependenciesForTask");
      }
      // verify the required parameter 'addDependenciesForTaskRequest' is set
      if (addDependenciesForTaskRequest === undefined || addDependenciesForTaskRequest === null) {
        throw new Error("Missing the required parameter 'addDependenciesForTaskRequest' when calling addDependenciesForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/addDependencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDependentsForTask operation.
     * @callback module:api/TasksApi~addDependentsForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set dependents for a task
     * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/AddDependentsForTaskRequest} addDependentsForTaskRequest The list of tasks to add as dependents.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~addDependentsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    addDependentsForTask(taskGid, addDependentsForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = addDependentsForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling addDependentsForTask");
      }
      // verify the required parameter 'addDependentsForTaskRequest' is set
      if (addDependentsForTaskRequest === undefined || addDependentsForTaskRequest === null) {
        throw new Error("Missing the required parameter 'addDependentsForTaskRequest' when calling addDependentsForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/addDependents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFollowersForTask operation.
     * @callback module:api/TasksApi~addFollowersForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add followers to a task
     * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/AddFollowersRequest} addFollowersRequest The followers to add to the task.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~addFollowersForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    addFollowersForTask(taskGid, addFollowersRequest, opts, callback) {
      opts = opts || {};
      let postBody = addFollowersRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling addFollowersForTask");
      }
      // verify the required parameter 'addFollowersRequest' is set
      if (addFollowersRequest === undefined || addFollowersRequest === null) {
        throw new Error("Missing the required parameter 'addFollowersRequest' when calling addFollowersForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/addFollowers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addProjectForTask operation.
     * @callback module:api/TasksApi~addProjectForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a project to a task
     * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  Returns an empty data block.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/AddProjectForTaskRequest} addProjectForTaskRequest The project to add the task to.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~addProjectForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    addProjectForTask(taskGid, addProjectForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = addProjectForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling addProjectForTask");
      }
      // verify the required parameter 'addProjectForTaskRequest' is set
      if (addProjectForTaskRequest === undefined || addProjectForTaskRequest === null) {
        throw new Error("Missing the required parameter 'addProjectForTaskRequest' when calling addProjectForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/addProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTagForTask operation.
     * @callback module:api/TasksApi~addTagForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a task
     * Adds a tag to a task. Returns an empty data block.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/AddTagForTaskRequest} addTagForTaskRequest The tag to add to the task.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~addTagForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    addTagForTask(taskGid, addTagForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = addTagForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling addTagForTask");
      }
      // verify the required parameter 'addTagForTaskRequest' is set
      if (addTagForTaskRequest === undefined || addTagForTaskRequest === null) {
        throw new Error("Missing the required parameter 'addTagForTaskRequest' when calling addTagForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/addTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubtaskForTask operation.
     * @callback module:api/TasksApi~createSubtaskForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a subtask
     * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/CreateTaskRequest} createTaskRequest The new subtask to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~createSubtaskForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    createSubtaskForTask(taskGid, createTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling createSubtaskForTask");
      }
      // verify the required parameter 'createTaskRequest' is set
      if (createTaskRequest === undefined || createTaskRequest === null) {
        throw new Error("Missing the required parameter 'createTaskRequest' when calling createSubtaskForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/subtasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTask operation.
     * @callback module:api/TasksApi~createTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a task
     * Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.
     * @param {module:model/CreateTaskRequest} createTaskRequest The task to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    createTask(createTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTaskRequest;
      // verify the required parameter 'createTaskRequest' is set
      if (createTaskRequest === undefined || createTaskRequest === null) {
        throw new Error("Missing the required parameter 'createTaskRequest' when calling createTask");
      }

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:api/TasksApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a task
     * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    deleteTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling deleteTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateTask operation.
     * @callback module:api/TasksApi~duplicateTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJob200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate a task
     * Creates and returns a job that will asynchronously handle the duplication.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/DuplicateTaskRequest} duplicateTaskRequest Describes the duplicate's name and the fields that will be duplicated.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~duplicateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJob200Response}
     */
    duplicateTask(taskGid, duplicateTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = duplicateTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling duplicateTask");
      }
      // verify the required parameter 'duplicateTaskRequest' is set
      if (duplicateTaskRequest === undefined || duplicateTaskRequest === null) {
        throw new Error("Missing the required parameter 'duplicateTaskRequest' when calling duplicateTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetJob200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDependenciesForTask operation.
     * @callback module:api/TasksApi~getDependenciesForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dependencies from a task
     * Returns the compact representations of all of the dependencies of a task.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/TasksApi~getDependenciesForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getDependenciesForTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling getDependenciesForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDependentsForTask operation.
     * @callback module:api/TasksApi~getDependentsForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dependents from a task
     * Returns the compact representations of all of the dependents of a task.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/TasksApi~getDependentsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getDependentsForTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling getDependentsForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/dependents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubtasksForTask operation.
     * @callback module:api/TasksApi~getSubtasksForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subtasks from a task
     * Returns a compact representation of all of the subtasks of a task.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/TasksApi~getSubtasksForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getSubtasksForTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling getSubtasksForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/subtasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTask operation.
     * @callback module:api/TasksApi~getTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a task
     * Returns the complete task record for a single task.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~getTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    getTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling getTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasks operation.
     * @callback module:api/TasksApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple tasks
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {String} [assignee] The assignee to filter tasks on. If searching for unassigned tasks, assignee.any = null can be specified. *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*
     * @param {String} [project] The project to filter tasks on.
     * @param {String} [section] The section to filter tasks on. *Note: Currently, this is only supported in board views.*
     * @param {String} [workspace] The workspace to filter tasks on. *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*
     * @param {Date} [completedSince] Only return tasks that are either incomplete or that have been completed since this time.
     * @param {Date} [modifiedSince] Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*
     * @param {module:api/TasksApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'assignee': opts['assignee'],
        'project': opts['project'],
        'section': opts['section'],
        'workspace': opts['workspace'],
        'completed_since': opts['completedSince'],
        'modified_since': opts['modifiedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksForProject operation.
     * @callback module:api/TasksApi~getTasksForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks from a project
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {Object} opts Optional parameters
     * @param {String} [completedSince] Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/TasksApi~getTasksForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getTasksForProject(projectGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling getTasksForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'completed_since': opts['completedSince'],
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksForSection operation.
     * @callback module:api/TasksApi~getTasksForSectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks from a section
     * *Board view only*: Returns the compact section records for all tasks within the given section.
     * @param {String} sectionGid The globally unique identifier for the section.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/TasksApi~getTasksForSectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getTasksForSection(sectionGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sectionGid' is set
      if (sectionGid === undefined || sectionGid === null) {
        throw new Error("Missing the required parameter 'sectionGid' when calling getTasksForSection");
      }

      let pathParams = {
        'section_gid': sectionGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/sections/{section_gid}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksForTag operation.
     * @callback module:api/TasksApi~getTasksForTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks from a tag
     * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * @param {String} tagGid Globally unique identifier for the tag.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/TasksApi~getTasksForTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getTasksForTag(tagGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagGid' is set
      if (tagGid === undefined || tagGid === null) {
        throw new Error("Missing the required parameter 'tagGid' when calling getTasksForTag");
      }

      let pathParams = {
        'tag_gid': tagGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/tags/{tag_gid}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasksForUserTaskList operation.
     * @callback module:api/TasksApi~getTasksForUserTaskListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks from a user task list
     * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * @param {String} userTaskListGid Globally unique identifier for the user task list.
     * @param {Object} opts Optional parameters
     * @param {String} [completedSince] Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/TasksApi~getTasksForUserTaskListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    getTasksForUserTaskList(userTaskListGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userTaskListGid' is set
      if (userTaskListGid === undefined || userTaskListGid === null) {
        throw new Error("Missing the required parameter 'userTaskListGid' when calling getTasksForUserTaskList");
      }

      let pathParams = {
        'user_task_list_gid': userTaskListGid
      };
      let queryParams = {
        'completed_since': opts['completedSince'],
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/user_task_lists/{user_task_list_gid}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDependenciesForTask operation.
     * @callback module:api/TasksApi~removeDependenciesForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlink dependencies from a task
     * Unlinks a set of dependencies from this task.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/AddDependenciesForTaskRequest} addDependenciesForTaskRequest The list of tasks to unlink as dependencies.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~removeDependenciesForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    removeDependenciesForTask(taskGid, addDependenciesForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = addDependenciesForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling removeDependenciesForTask");
      }
      // verify the required parameter 'addDependenciesForTaskRequest' is set
      if (addDependenciesForTaskRequest === undefined || addDependenciesForTaskRequest === null) {
        throw new Error("Missing the required parameter 'addDependenciesForTaskRequest' when calling removeDependenciesForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/removeDependencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDependentsForTask operation.
     * @callback module:api/TasksApi~removeDependentsForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlink dependents from a task
     * Unlinks a set of dependents from this task.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/AddDependentsForTaskRequest} addDependentsForTaskRequest The list of tasks to remove as dependents.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~removeDependentsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    removeDependentsForTask(taskGid, addDependentsForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = addDependentsForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling removeDependentsForTask");
      }
      // verify the required parameter 'addDependentsForTaskRequest' is set
      if (addDependentsForTaskRequest === undefined || addDependentsForTaskRequest === null) {
        throw new Error("Missing the required parameter 'addDependentsForTaskRequest' when calling removeDependentsForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/removeDependents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFollowerForTask operation.
     * @callback module:api/TasksApi~removeFollowerForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove followers from a task
     * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/RemoveFollowerForTaskRequest} removeFollowerForTaskRequest The followers to remove from the task.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~removeFollowerForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    removeFollowerForTask(taskGid, removeFollowerForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeFollowerForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling removeFollowerForTask");
      }
      // verify the required parameter 'removeFollowerForTaskRequest' is set
      if (removeFollowerForTaskRequest === undefined || removeFollowerForTaskRequest === null) {
        throw new Error("Missing the required parameter 'removeFollowerForTaskRequest' when calling removeFollowerForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/removeFollowers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProjectForTask operation.
     * @callback module:api/TasksApi~removeProjectForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a project from a task
     * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/RemoveProjectForTaskRequest} removeProjectForTaskRequest The project to remove the task from.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~removeProjectForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    removeProjectForTask(taskGid, removeProjectForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeProjectForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling removeProjectForTask");
      }
      // verify the required parameter 'removeProjectForTaskRequest' is set
      if (removeProjectForTaskRequest === undefined || removeProjectForTaskRequest === null) {
        throw new Error("Missing the required parameter 'removeProjectForTaskRequest' when calling removeProjectForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/removeProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTagForTask operation.
     * @callback module:api/TasksApi~removeTagForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a task
     * Removes a tag from a task. Returns an empty data block.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/RemoveTagForTaskRequest} removeTagForTaskRequest The tag to remove from the task.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~removeTagForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    removeTagForTask(taskGid, removeTagForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeTagForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling removeTagForTask");
      }
      // verify the required parameter 'removeTagForTaskRequest' is set
      if (removeTagForTaskRequest === undefined || removeTagForTaskRequest === null) {
        throw new Error("Missing the required parameter 'removeTagForTaskRequest' when calling removeTagForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/removeTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTasksForWorkspace operation.
     * @callback module:api/TasksApi~searchTasksForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTasksForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search tasks in a workspace
     * To mirror the functionality of the Asana web app's advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product's advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you're looking for only tasks in a section, omit the `projects.any` from the request.*
     * @param {String} workspaceGid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {String} [text] Performs full-text search on both task name and description
     * @param {module:model/String} [resourceSubtype = 'milestone')] Filters results by the task's resource_subtype
     * @param {String} [assigneeAny] Comma-separated list of user identifiers
     * @param {String} [assigneeNot] Comma-separated list of user identifiers
     * @param {String} [portfoliosAny] Comma-separated list of portfolio IDs
     * @param {String} [projectsAny] Comma-separated list of project IDs
     * @param {String} [projectsNot] Comma-separated list of project IDs
     * @param {String} [projectsAll] Comma-separated list of project IDs
     * @param {String} [sectionsAny] Comma-separated list of section or column IDs
     * @param {String} [sectionsNot] Comma-separated list of section or column IDs
     * @param {String} [sectionsAll] Comma-separated list of section or column IDs
     * @param {String} [tagsAny] Comma-separated list of tag IDs
     * @param {String} [tagsNot] Comma-separated list of tag IDs
     * @param {String} [tagsAll] Comma-separated list of tag IDs
     * @param {String} [teamsAny] Comma-separated list of team IDs
     * @param {String} [followersNot] Comma-separated list of user identifiers
     * @param {String} [createdByAny] Comma-separated list of user identifiers
     * @param {String} [createdByNot] Comma-separated list of user identifiers
     * @param {String} [assignedByAny] Comma-separated list of user identifiers
     * @param {String} [assignedByNot] Comma-separated list of user identifiers
     * @param {String} [likedByNot] Comma-separated list of user identifiers
     * @param {String} [commentedOnByNot] Comma-separated list of user identifiers
     * @param {Date} [dueOnBefore] ISO 8601 date string
     * @param {Date} [dueOnAfter] ISO 8601 date string
     * @param {Date} [dueOn] ISO 8601 date string or `null`
     * @param {Date} [dueAtBefore] ISO 8601 datetime string
     * @param {Date} [dueAtAfter] ISO 8601 datetime string
     * @param {Date} [startOnBefore] ISO 8601 date string
     * @param {Date} [startOnAfter] ISO 8601 date string
     * @param {Date} [startOn] ISO 8601 date string or `null`
     * @param {Date} [createdOnBefore] ISO 8601 date string
     * @param {Date} [createdOnAfter] ISO 8601 date string
     * @param {Date} [createdOn] ISO 8601 date string or `null`
     * @param {Date} [createdAtBefore] ISO 8601 datetime string
     * @param {Date} [createdAtAfter] ISO 8601 datetime string
     * @param {Date} [completedOnBefore] ISO 8601 date string
     * @param {Date} [completedOnAfter] ISO 8601 date string
     * @param {Date} [completedOn] ISO 8601 date string or `null`
     * @param {Date} [completedAtBefore] ISO 8601 datetime string
     * @param {Date} [completedAtAfter] ISO 8601 datetime string
     * @param {Date} [modifiedOnBefore] ISO 8601 date string
     * @param {Date} [modifiedOnAfter] ISO 8601 date string
     * @param {Date} [modifiedOn] ISO 8601 date string or `null`
     * @param {Date} [modifiedAtBefore] ISO 8601 datetime string
     * @param {Date} [modifiedAtAfter] ISO 8601 datetime string
     * @param {Boolean} [isBlocking] Filter to incomplete tasks with dependents
     * @param {Boolean} [isBlocked] Filter to tasks with incomplete dependencies
     * @param {Boolean} [hasAttachment] Filter to tasks with attachments
     * @param {Boolean} [completed] Filter to completed tasks
     * @param {Boolean} [isSubtask] Filter to subtasks
     * @param {module:model/String} [sortBy = 'modified_at')] One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`
     * @param {Boolean} [sortAscending = false)] Default `false`
     * @param {module:api/TasksApi~searchTasksForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTasksForProject200Response}
     */
    searchTasksForWorkspace(workspaceGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceGid' is set
      if (workspaceGid === undefined || workspaceGid === null) {
        throw new Error("Missing the required parameter 'workspaceGid' when calling searchTasksForWorkspace");
      }

      let pathParams = {
        'workspace_gid': workspaceGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'text': opts['text'],
        'resource_subtype': opts['resourceSubtype'],
        'assignee.any': opts['assigneeAny'],
        'assignee.not': opts['assigneeNot'],
        'portfolios.any': opts['portfoliosAny'],
        'projects.any': opts['projectsAny'],
        'projects.not': opts['projectsNot'],
        'projects.all': opts['projectsAll'],
        'sections.any': opts['sectionsAny'],
        'sections.not': opts['sectionsNot'],
        'sections.all': opts['sectionsAll'],
        'tags.any': opts['tagsAny'],
        'tags.not': opts['tagsNot'],
        'tags.all': opts['tagsAll'],
        'teams.any': opts['teamsAny'],
        'followers.not': opts['followersNot'],
        'created_by.any': opts['createdByAny'],
        'created_by.not': opts['createdByNot'],
        'assigned_by.any': opts['assignedByAny'],
        'assigned_by.not': opts['assignedByNot'],
        'liked_by.not': opts['likedByNot'],
        'commented_on_by.not': opts['commentedOnByNot'],
        'due_on.before': opts['dueOnBefore'],
        'due_on.after': opts['dueOnAfter'],
        'due_on': opts['dueOn'],
        'due_at.before': opts['dueAtBefore'],
        'due_at.after': opts['dueAtAfter'],
        'start_on.before': opts['startOnBefore'],
        'start_on.after': opts['startOnAfter'],
        'start_on': opts['startOn'],
        'created_on.before': opts['createdOnBefore'],
        'created_on.after': opts['createdOnAfter'],
        'created_on': opts['createdOn'],
        'created_at.before': opts['createdAtBefore'],
        'created_at.after': opts['createdAtAfter'],
        'completed_on.before': opts['completedOnBefore'],
        'completed_on.after': opts['completedOnAfter'],
        'completed_on': opts['completedOn'],
        'completed_at.before': opts['completedAtBefore'],
        'completed_at.after': opts['completedAtAfter'],
        'modified_on.before': opts['modifiedOnBefore'],
        'modified_on.after': opts['modifiedOnAfter'],
        'modified_on': opts['modifiedOn'],
        'modified_at.before': opts['modifiedAtBefore'],
        'modified_at.after': opts['modifiedAtAfter'],
        'is_blocking': opts['isBlocking'],
        'is_blocked': opts['isBlocked'],
        'has_attachment': opts['hasAttachment'],
        'completed': opts['completed'],
        'is_subtask': opts['isSubtask'],
        'sort_by': opts['sortBy'],
        'sort_ascending': opts['sortAscending']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTasksForProject200Response;
      return this.apiClient.callApi(
        '/workspaces/{workspace_gid}/tasks/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setParentForTask operation.
     * @callback module:api/TasksApi~setParentForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the parent of a task
     * parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/SetParentForTaskRequest} setParentForTaskRequest The new parent of the subtask.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~setParentForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    setParentForTask(taskGid, setParentForTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = setParentForTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling setParentForTask");
      }
      // verify the required parameter 'setParentForTaskRequest' is set
      if (setParentForTaskRequest === undefined || setParentForTaskRequest === null) {
        throw new Error("Missing the required parameter 'setParentForTaskRequest' when calling setParentForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/setParent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/TasksApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTask201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a task
     * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * @param {String} taskGid The task to operate on.
     * @param {module:model/CreateTaskRequest} createTaskRequest The task to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/TasksApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTask201Response}
     */
    updateTask(taskGid, createTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTaskRequest;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling updateTask");
      }
      // verify the required parameter 'createTaskRequest' is set
      if (createTaskRequest === undefined || createTaskRequest === null) {
        throw new Error("Missing the required parameter 'createTaskRequest' when calling updateTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTask201Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
