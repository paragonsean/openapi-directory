/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateStatusForObject201Response from '../model/CreateStatusForObject201Response';
import CreateStatusForObjectRequest from '../model/CreateStatusForObjectRequest';
import DeleteAttachment200Response from '../model/DeleteAttachment200Response';
import ErrorResponse from '../model/ErrorResponse';
import GetStatusesForObject200Response from '../model/GetStatusesForObject200Response';

/**
* StatusUpdates service.
* @module api/StatusUpdatesApi
* @version 1.0
*/
export default class StatusUpdatesApi {

    /**
    * Constructs a new StatusUpdatesApi. 
    * @alias module:api/StatusUpdatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createStatusForObject operation.
     * @callback module:api/StatusUpdatesApi~createStatusForObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStatusForObject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a status update
     * Creates a new status update on an object. Returns the full record of the newly created status update.
     * @param {module:model/CreateStatusForObjectRequest} createStatusForObjectRequest The status update to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/StatusUpdatesApi~createStatusForObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStatusForObject201Response}
     */
    createStatusForObject(createStatusForObjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStatusForObjectRequest;
      // verify the required parameter 'createStatusForObjectRequest' is set
      if (createStatusForObjectRequest === undefined || createStatusForObjectRequest === null) {
        throw new Error("Missing the required parameter 'createStatusForObjectRequest' when calling createStatusForObject");
      }

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStatusForObject201Response;
      return this.apiClient.callApi(
        '/status_updates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStatus operation.
     * @callback module:api/StatusUpdatesApi~deleteStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a status update
     * Deletes a specific, existing status update.  Returns an empty data record.
     * @param {String} statusGid The status update to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/StatusUpdatesApi~deleteStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    deleteStatus(statusGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statusGid' is set
      if (statusGid === undefined || statusGid === null) {
        throw new Error("Missing the required parameter 'statusGid' when calling deleteStatus");
      }

      let pathParams = {
        'status_gid': statusGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/status_updates/{status_gid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/StatusUpdatesApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStatusForObject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a status update
     * Returns the complete record for a single status update.
     * @param {String} statusGid The status update to get.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/StatusUpdatesApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStatusForObject201Response}
     */
    getStatus(statusGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statusGid' is set
      if (statusGid === undefined || statusGid === null) {
        throw new Error("Missing the required parameter 'statusGid' when calling getStatus");
      }

      let pathParams = {
        'status_gid': statusGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateStatusForObject201Response;
      return this.apiClient.callApi(
        '/status_updates/{status_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatusesForObject operation.
     * @callback module:api/StatusUpdatesApi~getStatusesForObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStatusesForObject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status updates from an object
     * Returns the compact status update records for all updates on the object.
     * @param {String} parent Globally unique identifier for object to fetch statuses from. Must be a GID for a project, portfolio, or goal.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {Date} [createdSince] Only return statuses that have been created since the given time.
     * @param {module:api/StatusUpdatesApi~getStatusesForObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStatusesForObject200Response}
     */
    getStatusesForObject(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling getStatusesForObject");
      }

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'parent': parent,
        'created_since': opts['createdSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStatusesForObject200Response;
      return this.apiClient.callApi(
        '/status_updates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
