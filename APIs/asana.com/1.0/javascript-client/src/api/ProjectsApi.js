/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddCustomFieldSettingForPortfolio200Response from '../model/AddCustomFieldSettingForPortfolio200Response';
import AddCustomFieldSettingForPortfolioRequest from '../model/AddCustomFieldSettingForPortfolioRequest';
import AddFollowersForProjectRequest from '../model/AddFollowersForProjectRequest';
import AddMembersForPortfolioRequest from '../model/AddMembersForPortfolioRequest';
import CreateProject201Response from '../model/CreateProject201Response';
import CreateProjectRequest from '../model/CreateProjectRequest';
import DeleteAttachment200Response from '../model/DeleteAttachment200Response';
import DuplicateProjectRequest from '../model/DuplicateProjectRequest';
import ErrorResponse from '../model/ErrorResponse';
import GetItemsForPortfolio200Response from '../model/GetItemsForPortfolio200Response';
import GetJob200Response from '../model/GetJob200Response';
import GetTaskCountsForProject200Response from '../model/GetTaskCountsForProject200Response';
import ProjectSaveAsTemplateRequest from '../model/ProjectSaveAsTemplateRequest';
import RemoveCustomFieldSettingForPortfolioRequest from '../model/RemoveCustomFieldSettingForPortfolioRequest';
import RemoveFollowersForProjectRequest from '../model/RemoveFollowersForProjectRequest';
import RemoveMembersForPortfolioRequest from '../model/RemoveMembersForPortfolioRequest';

/**
* Projects service.
* @module api/ProjectsApi
* @version 1.0
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCustomFieldSettingForProject operation.
     * @callback module:api/ProjectsApi~addCustomFieldSettingForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddCustomFieldSettingForPortfolio200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom field to a project
     * Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/AddCustomFieldSettingForPortfolioRequest} addCustomFieldSettingForPortfolioRequest Information about the custom field setting.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {module:api/ProjectsApi~addCustomFieldSettingForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddCustomFieldSettingForPortfolio200Response}
     */
    addCustomFieldSettingForProject(projectGid, addCustomFieldSettingForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = addCustomFieldSettingForPortfolioRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling addCustomFieldSettingForProject");
      }
      // verify the required parameter 'addCustomFieldSettingForPortfolioRequest' is set
      if (addCustomFieldSettingForPortfolioRequest === undefined || addCustomFieldSettingForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'addCustomFieldSettingForPortfolioRequest' when calling addCustomFieldSettingForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddCustomFieldSettingForPortfolio200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/addCustomFieldSetting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFollowersForProject operation.
     * @callback module:api/ProjectsApi~addFollowersForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add followers to a project
     * Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation. Returns the updated project record.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/AddFollowersForProjectRequest} addFollowersForProjectRequest Information about the followers being added.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~addFollowersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    addFollowersForProject(projectGid, addFollowersForProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = addFollowersForProjectRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling addFollowersForProject");
      }
      // verify the required parameter 'addFollowersForProjectRequest' is set
      if (addFollowersForProjectRequest === undefined || addFollowersForProjectRequest === null) {
        throw new Error("Missing the required parameter 'addFollowersForProjectRequest' when calling addFollowersForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/addFollowers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersForProject operation.
     * @callback module:api/ProjectsApi~addMembersForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to a project
     * Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user's default notification settings (i.e., in the \"Notifcations\" tab of \"My Profile Settings\") will override this endpoint's default behavior of setting \"Tasks added\" notifications to `false`. Returns the updated project record.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/AddMembersForPortfolioRequest} addMembersForPortfolioRequest Information about the members being added.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~addMembersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    addMembersForProject(projectGid, addMembersForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = addMembersForPortfolioRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling addMembersForProject");
      }
      // verify the required parameter 'addMembersForPortfolioRequest' is set
      if (addMembersForPortfolioRequest === undefined || addMembersForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'addMembersForPortfolioRequest' when calling addMembersForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/addMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectsApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project
     * Create a new project in a workspace or team.  Every project is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the `workspace` parameter regardless of whether or not it is an organization.  If the workspace for your project is an organization, you must also supply a `team` to share the project with.  Returns the full record of the newly created project.
     * @param {module:model/CreateProjectRequest} createProjectRequest The project to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    createProject(createProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProjectRequest;
      // verify the required parameter 'createProjectRequest' is set
      if (createProjectRequest === undefined || createProjectRequest === null) {
        throw new Error("Missing the required parameter 'createProjectRequest' when calling createProject");
      }

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectForTeam operation.
     * @callback module:api/ProjectsApi~createProjectForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project in a team
     * Creates a project shared with the given team.  Returns the full record of the newly created project.
     * @param {String} teamGid Globally unique identifier for the team.
     * @param {module:model/CreateProjectRequest} createProjectRequest The new project to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~createProjectForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    createProjectForTeam(teamGid, createProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProjectRequest;
      // verify the required parameter 'teamGid' is set
      if (teamGid === undefined || teamGid === null) {
        throw new Error("Missing the required parameter 'teamGid' when calling createProjectForTeam");
      }
      // verify the required parameter 'createProjectRequest' is set
      if (createProjectRequest === undefined || createProjectRequest === null) {
        throw new Error("Missing the required parameter 'createProjectRequest' when calling createProjectForTeam");
      }

      let pathParams = {
        'team_gid': teamGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/teams/{team_gid}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectForWorkspace operation.
     * @callback module:api/ProjectsApi~createProjectForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project in a workspace
     * Returns the compact project records for all projects in the workspace.  If the workspace for your project is an organization, you must also supply a team to share the project with.  Returns the full record of the newly created project.
     * @param {String} workspaceGid Globally unique identifier for the workspace or organization.
     * @param {module:model/CreateProjectRequest} createProjectRequest The new project to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~createProjectForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    createProjectForWorkspace(workspaceGid, createProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProjectRequest;
      // verify the required parameter 'workspaceGid' is set
      if (workspaceGid === undefined || workspaceGid === null) {
        throw new Error("Missing the required parameter 'workspaceGid' when calling createProjectForWorkspace");
      }
      // verify the required parameter 'createProjectRequest' is set
      if (createProjectRequest === undefined || createProjectRequest === null) {
        throw new Error("Missing the required parameter 'createProjectRequest' when calling createProjectForWorkspace");
      }

      let pathParams = {
        'workspace_gid': workspaceGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/workspaces/{workspace_gid}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectsApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * A specific, existing project can be deleted by making a DELETE request on the URL for that project.  Returns an empty data record.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    deleteProject(projectGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling deleteProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateProject operation.
     * @callback module:api/ProjectsApi~duplicateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJob200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate a project
     * Creates and returns a job that will asynchronously handle the duplication.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:model/DuplicateProjectRequest} [duplicateProjectRequest] Describes the duplicate's name and the elements that will be duplicated.
     * @param {module:api/ProjectsApi~duplicateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJob200Response}
     */
    duplicateProject(projectGid, opts, callback) {
      opts = opts || {};
      let postBody = opts['duplicateProjectRequest'];
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling duplicateProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetJob200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectsApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project
     * Returns the complete project record for a single project.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    getProject(projectGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling getProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectsApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetItemsForPortfolio200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple projects
     * Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. *Note: This endpoint may timeout for large domains. Try filtering by team!*
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {String} [workspace] The workspace or organization to filter projects on.
     * @param {String} [team] The team to filter projects on.
     * @param {Boolean} [archived] Only return projects whose `archived` field takes on the value of this parameter.
     * @param {module:api/ProjectsApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetItemsForPortfolio200Response}
     */
    getProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'workspace': opts['workspace'],
        'team': opts['team'],
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetItemsForPortfolio200Response;
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsForTask operation.
     * @callback module:api/ProjectsApi~getProjectsForTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetItemsForPortfolio200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects a task is in
     * Returns a compact representation of all of the projects the task is in.
     * @param {String} taskGid The task to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/ProjectsApi~getProjectsForTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetItemsForPortfolio200Response}
     */
    getProjectsForTask(taskGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskGid' is set
      if (taskGid === undefined || taskGid === null) {
        throw new Error("Missing the required parameter 'taskGid' when calling getProjectsForTask");
      }

      let pathParams = {
        'task_gid': taskGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetItemsForPortfolio200Response;
      return this.apiClient.callApi(
        '/tasks/{task_gid}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsForTeam operation.
     * @callback module:api/ProjectsApi~getProjectsForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetItemsForPortfolio200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team's projects
     * Returns the compact project records for all projects in the team.
     * @param {String} teamGid Globally unique identifier for the team.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {Boolean} [archived] Only return projects whose `archived` field takes on the value of this parameter.
     * @param {module:api/ProjectsApi~getProjectsForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetItemsForPortfolio200Response}
     */
    getProjectsForTeam(teamGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamGid' is set
      if (teamGid === undefined || teamGid === null) {
        throw new Error("Missing the required parameter 'teamGid' when calling getProjectsForTeam");
      }

      let pathParams = {
        'team_gid': teamGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetItemsForPortfolio200Response;
      return this.apiClient.callApi(
        '/teams/{team_gid}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsForWorkspace operation.
     * @callback module:api/ProjectsApi~getProjectsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetItemsForPortfolio200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all projects in a workspace
     * Returns the compact project records for all projects in the workspace. *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*
     * @param {String} workspaceGid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {Boolean} [archived] Only return projects whose `archived` field takes on the value of this parameter.
     * @param {module:api/ProjectsApi~getProjectsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetItemsForPortfolio200Response}
     */
    getProjectsForWorkspace(workspaceGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceGid' is set
      if (workspaceGid === undefined || workspaceGid === null) {
        throw new Error("Missing the required parameter 'workspaceGid' when calling getProjectsForWorkspace");
      }

      let pathParams = {
        'workspace_gid': workspaceGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetItemsForPortfolio200Response;
      return this.apiClient.callApi(
        '/workspaces/{workspace_gid}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskCountsForProject operation.
     * @callback module:api/ProjectsApi~getTaskCountsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTaskCountsForProject200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task count of a project
     * Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/input-output-options) using `opt_fields` to get any information from this endpoint.  This endpoint has an additional [rate limit](/docs/standard-rate-limits) and each field counts especially high against our [cost limits](/docs/cost-limits).  Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/ProjectsApi~getTaskCountsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTaskCountsForProject200Response}
     */
    getTaskCountsForProject(projectGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling getTaskCountsForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTaskCountsForProject200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/task_counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSaveAsTemplate operation.
     * @callback module:api/ProjectsApi~projectSaveAsTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJob200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project template from a project
     * Creates and returns a job that will asynchronously handle the project template creation. Note that while the resulting project template can be accessed with the API, it won't be visible in the Asana UI until Project Templates 2.0 is launched in the app. See more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/ProjectSaveAsTemplateRequest} projectSaveAsTemplateRequest Describes the inputs used for creating a project template, such as the resulting project template's name, which team it should be created in.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~projectSaveAsTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJob200Response}
     */
    projectSaveAsTemplate(projectGid, projectSaveAsTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = projectSaveAsTemplateRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling projectSaveAsTemplate");
      }
      // verify the required parameter 'projectSaveAsTemplateRequest' is set
      if (projectSaveAsTemplateRequest === undefined || projectSaveAsTemplateRequest === null) {
        throw new Error("Missing the required parameter 'projectSaveAsTemplateRequest' when calling projectSaveAsTemplate");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetJob200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/saveAsTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCustomFieldSettingForProject operation.
     * @callback module:api/ProjectsApi~removeCustomFieldSettingForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom field from a project
     * Removes a custom field setting from a project.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/RemoveCustomFieldSettingForPortfolioRequest} removeCustomFieldSettingForPortfolioRequest Information about the custom field setting being removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {module:api/ProjectsApi~removeCustomFieldSettingForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    removeCustomFieldSettingForProject(projectGid, removeCustomFieldSettingForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeCustomFieldSettingForPortfolioRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling removeCustomFieldSettingForProject");
      }
      // verify the required parameter 'removeCustomFieldSettingForPortfolioRequest' is set
      if (removeCustomFieldSettingForPortfolioRequest === undefined || removeCustomFieldSettingForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'removeCustomFieldSettingForPortfolioRequest' when calling removeCustomFieldSettingForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/removeCustomFieldSetting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFollowersForProject operation.
     * @callback module:api/ProjectsApi~removeFollowersForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove followers from a project
     * Removes the specified list of users from following the project, this will not affect project membership status. Returns the updated project record.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/RemoveFollowersForProjectRequest} removeFollowersForProjectRequest Information about the followers being removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~removeFollowersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    removeFollowersForProject(projectGid, removeFollowersForProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeFollowersForProjectRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling removeFollowersForProject");
      }
      // verify the required parameter 'removeFollowersForProjectRequest' is set
      if (removeFollowersForProjectRequest === undefined || removeFollowersForProjectRequest === null) {
        throw new Error("Missing the required parameter 'removeFollowersForProjectRequest' when calling removeFollowersForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/removeFollowers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMembersForProject operation.
     * @callback module:api/ProjectsApi~removeMembersForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove users from a project
     * Removes the specified list of users from members of the project. Returns the updated project record.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/RemoveMembersForPortfolioRequest} removeMembersForPortfolioRequest Information about the members being removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~removeMembersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    removeMembersForProject(projectGid, removeMembersForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeMembersForPortfolioRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling removeMembersForProject");
      }
      // verify the required parameter 'removeMembersForPortfolioRequest' is set
      if (removeMembersForPortfolioRequest === undefined || removeMembersForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'removeMembersForPortfolioRequest' when calling removeMembersForProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/removeMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectsApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProject201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project
     * A specific, existing project can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated project record.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/CreateProjectRequest} createProjectRequest The updated fields for the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectsApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProject201Response}
     */
    updateProject(projectGid, createProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProjectRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling updateProject");
      }
      // verify the required parameter 'createProjectRequest' is set
      if (createProjectRequest === undefined || createProjectRequest === null) {
        throw new Error("Missing the required parameter 'createProjectRequest' when calling updateProject");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProject201Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
