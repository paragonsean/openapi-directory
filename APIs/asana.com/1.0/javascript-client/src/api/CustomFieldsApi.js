/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCustomField201Response from '../model/CreateCustomField201Response';
import CreateCustomFieldRequest from '../model/CreateCustomFieldRequest';
import CreateEnumOptionForCustomField201Response from '../model/CreateEnumOptionForCustomField201Response';
import CreateEnumOptionForCustomFieldRequest from '../model/CreateEnumOptionForCustomFieldRequest';
import DeleteAttachment200Response from '../model/DeleteAttachment200Response';
import ErrorResponse from '../model/ErrorResponse';
import GetCustomFieldsForWorkspace200Response from '../model/GetCustomFieldsForWorkspace200Response';
import InsertEnumOptionForCustomFieldRequest from '../model/InsertEnumOptionForCustomFieldRequest';

/**
* CustomFields service.
* @module api/CustomFieldsApi
* @version 1.0
*/
export default class CustomFieldsApi {

    /**
    * Constructs a new CustomFieldsApi. 
    * @alias module:api/CustomFieldsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomField operation.
     * @callback module:api/CustomFieldsApi~createCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomField201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom field
     * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:model/CreateCustomFieldRequest} [createCustomFieldRequest] The custom field object to create.
     * @param {module:api/CustomFieldsApi~createCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomField201Response}
     */
    createCustomField(opts, callback) {
      opts = opts || {};
      let postBody = opts['createCustomFieldRequest'];

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCustomField201Response;
      return this.apiClient.callApi(
        '/custom_fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEnumOptionForCustomField operation.
     * @callback module:api/CustomFieldsApi~createEnumOptionForCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEnumOptionForCustomField201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an enum option
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * @param {String} customFieldGid Globally unique identifier for the custom field.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:model/CreateEnumOptionForCustomFieldRequest} [createEnumOptionForCustomFieldRequest] The enum option object to create.
     * @param {module:api/CustomFieldsApi~createEnumOptionForCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEnumOptionForCustomField201Response}
     */
    createEnumOptionForCustomField(customFieldGid, opts, callback) {
      opts = opts || {};
      let postBody = opts['createEnumOptionForCustomFieldRequest'];
      // verify the required parameter 'customFieldGid' is set
      if (customFieldGid === undefined || customFieldGid === null) {
        throw new Error("Missing the required parameter 'customFieldGid' when calling createEnumOptionForCustomField");
      }

      let pathParams = {
        'custom_field_gid': customFieldGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEnumOptionForCustomField201Response;
      return this.apiClient.callApi(
        '/custom_fields/{custom_field_gid}/enum_options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomField operation.
     * @callback module:api/CustomFieldsApi~deleteCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom field
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * @param {String} customFieldGid Globally unique identifier for the custom field.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/CustomFieldsApi~deleteCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    deleteCustomField(customFieldGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customFieldGid' is set
      if (customFieldGid === undefined || customFieldGid === null) {
        throw new Error("Missing the required parameter 'customFieldGid' when calling deleteCustomField");
      }

      let pathParams = {
        'custom_field_gid': customFieldGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/custom_fields/{custom_field_gid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomField operation.
     * @callback module:api/CustomFieldsApi~getCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomField201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a custom field
     * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * @param {String} customFieldGid Globally unique identifier for the custom field.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/CustomFieldsApi~getCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomField201Response}
     */
    getCustomField(customFieldGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customFieldGid' is set
      if (customFieldGid === undefined || customFieldGid === null) {
        throw new Error("Missing the required parameter 'customFieldGid' when calling getCustomField");
      }

      let pathParams = {
        'custom_field_gid': customFieldGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateCustomField201Response;
      return this.apiClient.callApi(
        '/custom_fields/{custom_field_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFieldsForWorkspace operation.
     * @callback module:api/CustomFieldsApi~getCustomFieldsForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomFieldsForWorkspace200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workspace's custom fields
     * Returns a list of the compact representation of all of the custom fields in a workspace.
     * @param {String} workspaceGid Globally unique identifier for the workspace or organization.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/CustomFieldsApi~getCustomFieldsForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomFieldsForWorkspace200Response}
     */
    getCustomFieldsForWorkspace(workspaceGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceGid' is set
      if (workspaceGid === undefined || workspaceGid === null) {
        throw new Error("Missing the required parameter 'workspaceGid' when calling getCustomFieldsForWorkspace");
      }

      let pathParams = {
        'workspace_gid': workspaceGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomFieldsForWorkspace200Response;
      return this.apiClient.callApi(
        '/workspaces/{workspace_gid}/custom_fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEnumOptionForCustomField operation.
     * @callback module:api/CustomFieldsApi~insertEnumOptionForCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEnumOptionForCustomField201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorder a custom field's enum
     * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * @param {String} customFieldGid Globally unique identifier for the custom field.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:model/InsertEnumOptionForCustomFieldRequest} [insertEnumOptionForCustomFieldRequest] The enum option object to create.
     * @param {module:api/CustomFieldsApi~insertEnumOptionForCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEnumOptionForCustomField201Response}
     */
    insertEnumOptionForCustomField(customFieldGid, opts, callback) {
      opts = opts || {};
      let postBody = opts['insertEnumOptionForCustomFieldRequest'];
      // verify the required parameter 'customFieldGid' is set
      if (customFieldGid === undefined || customFieldGid === null) {
        throw new Error("Missing the required parameter 'customFieldGid' when calling insertEnumOptionForCustomField");
      }

      let pathParams = {
        'custom_field_gid': customFieldGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEnumOptionForCustomField201Response;
      return this.apiClient.callApi(
        '/custom_fields/{custom_field_gid}/enum_options/insert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomField operation.
     * @callback module:api/CustomFieldsApi~updateCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomField201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom field
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * @param {String} customFieldGid Globally unique identifier for the custom field.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:model/CreateCustomFieldRequest} [createCustomFieldRequest] The custom field object with all updated properties.
     * @param {module:api/CustomFieldsApi~updateCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomField201Response}
     */
    updateCustomField(customFieldGid, opts, callback) {
      opts = opts || {};
      let postBody = opts['createCustomFieldRequest'];
      // verify the required parameter 'customFieldGid' is set
      if (customFieldGid === undefined || customFieldGid === null) {
        throw new Error("Missing the required parameter 'customFieldGid' when calling updateCustomField");
      }

      let pathParams = {
        'custom_field_gid': customFieldGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCustomField201Response;
      return this.apiClient.callApi(
        '/custom_fields/{custom_field_gid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEnumOption operation.
     * @callback module:api/CustomFieldsApi~updateEnumOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEnumOptionForCustomField201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an enum option
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * @param {String} enumOptionGid Globally unique identifier for the enum option.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:model/CreateEnumOptionForCustomFieldRequest} [createEnumOptionForCustomFieldRequest] The enum option object to update
     * @param {module:api/CustomFieldsApi~updateEnumOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEnumOptionForCustomField201Response}
     */
    updateEnumOption(enumOptionGid, opts, callback) {
      opts = opts || {};
      let postBody = opts['createEnumOptionForCustomFieldRequest'];
      // verify the required parameter 'enumOptionGid' is set
      if (enumOptionGid === undefined || enumOptionGid === null) {
        throw new Error("Missing the required parameter 'enumOptionGid' when calling updateEnumOption");
      }

      let pathParams = {
        'enum_option_gid': enumOptionGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEnumOptionForCustomField201Response;
      return this.apiClient.callApi(
        '/enum_options/{enum_option_gid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
