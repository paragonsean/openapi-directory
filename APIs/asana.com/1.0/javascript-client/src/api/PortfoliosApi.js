/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddCustomFieldSettingForPortfolio200Response from '../model/AddCustomFieldSettingForPortfolio200Response';
import AddCustomFieldSettingForPortfolioRequest from '../model/AddCustomFieldSettingForPortfolioRequest';
import AddItemForPortfolioRequest from '../model/AddItemForPortfolioRequest';
import AddMembersForPortfolioRequest from '../model/AddMembersForPortfolioRequest';
import CreatePortfolio201Response from '../model/CreatePortfolio201Response';
import CreatePortfolioRequest from '../model/CreatePortfolioRequest';
import DeleteAttachment200Response from '../model/DeleteAttachment200Response';
import ErrorResponse from '../model/ErrorResponse';
import GetItemsForPortfolio200Response from '../model/GetItemsForPortfolio200Response';
import GetPortfolios200Response from '../model/GetPortfolios200Response';
import RemoveCustomFieldSettingForPortfolioRequest from '../model/RemoveCustomFieldSettingForPortfolioRequest';
import RemoveItemForPortfolioRequest from '../model/RemoveItemForPortfolioRequest';
import RemoveMembersForPortfolioRequest from '../model/RemoveMembersForPortfolioRequest';

/**
* Portfolios service.
* @module api/PortfoliosApi
* @version 1.0
*/
export default class PortfoliosApi {

    /**
    * Constructs a new PortfoliosApi. 
    * @alias module:api/PortfoliosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCustomFieldSettingForPortfolio operation.
     * @callback module:api/PortfoliosApi~addCustomFieldSettingForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddCustomFieldSettingForPortfolio200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom field to a portfolio
     * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {module:model/AddCustomFieldSettingForPortfolioRequest} addCustomFieldSettingForPortfolioRequest Information about the custom field setting.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {module:api/PortfoliosApi~addCustomFieldSettingForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddCustomFieldSettingForPortfolio200Response}
     */
    addCustomFieldSettingForPortfolio(portfolioGid, addCustomFieldSettingForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = addCustomFieldSettingForPortfolioRequest;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling addCustomFieldSettingForPortfolio");
      }
      // verify the required parameter 'addCustomFieldSettingForPortfolioRequest' is set
      if (addCustomFieldSettingForPortfolioRequest === undefined || addCustomFieldSettingForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'addCustomFieldSettingForPortfolioRequest' when calling addCustomFieldSettingForPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddCustomFieldSettingForPortfolio200Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}/addCustomFieldSetting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addItemForPortfolio operation.
     * @callback module:api/PortfoliosApi~addItemForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a portfolio item
     * Add an item to a portfolio. Returns an empty data block.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {module:model/AddItemForPortfolioRequest} addItemForPortfolioRequest Information about the item being inserted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~addItemForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    addItemForPortfolio(portfolioGid, addItemForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = addItemForPortfolioRequest;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling addItemForPortfolio");
      }
      // verify the required parameter 'addItemForPortfolioRequest' is set
      if (addItemForPortfolioRequest === undefined || addItemForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'addItemForPortfolioRequest' when calling addItemForPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}/addItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersForPortfolio operation.
     * @callback module:api/PortfoliosApi~addMembersForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolio201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to a portfolio
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {module:model/AddMembersForPortfolioRequest} addMembersForPortfolioRequest Information about the members being added.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~addMembersForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolio201Response}
     */
    addMembersForPortfolio(portfolioGid, addMembersForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = addMembersForPortfolioRequest;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling addMembersForPortfolio");
      }
      // verify the required parameter 'addMembersForPortfolioRequest' is set
      if (addMembersForPortfolioRequest === undefined || addMembersForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'addMembersForPortfolioRequest' when calling addMembersForPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePortfolio201Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}/addMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolio operation.
     * @callback module:api/PortfoliosApi~createPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolio201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio
     * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     * @param {module:model/CreatePortfolioRequest} createPortfolioRequest The portfolio to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~createPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolio201Response}
     */
    createPortfolio(createPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPortfolioRequest;
      // verify the required parameter 'createPortfolioRequest' is set
      if (createPortfolioRequest === undefined || createPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'createPortfolioRequest' when calling createPortfolio");
      }

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePortfolio201Response;
      return this.apiClient.callApi(
        '/portfolios', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolio operation.
     * @callback module:api/PortfoliosApi~deletePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~deletePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    deletePortfolio(portfolioGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling deletePortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemsForPortfolio operation.
     * @callback module:api/PortfoliosApi~getItemsForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetItemsForPortfolio200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get portfolio items
     * Get a list of the items in compact form in a portfolio.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/PortfoliosApi~getItemsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetItemsForPortfolio200Response}
     */
    getItemsForPortfolio(portfolioGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling getItemsForPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetItemsForPortfolio200Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolio operation.
     * @callback module:api/PortfoliosApi~getPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolio201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a portfolio
     * Returns the complete portfolio record for a single portfolio.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~getPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolio201Response}
     */
    getPortfolio(portfolioGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling getPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreatePortfolio201Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolios operation.
     * @callback module:api/PortfoliosApi~getPortfoliosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolios200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multiple portfolios
     * Returns a list of the portfolios in compact representation that are owned by the current API user.
     * @param {String} workspace The workspace or organization to filter portfolios on.
     * @param {String} owner The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {Number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'
     * @param {module:api/PortfoliosApi~getPortfoliosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolios200Response}
     */
    getPortfolios(workspace, owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPortfolios");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getPortfolios");
      }

      let pathParams = {
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'workspace': workspace,
        'owner': owner
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPortfolios200Response;
      return this.apiClient.callApi(
        '/portfolios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCustomFieldSettingForPortfolio operation.
     * @callback module:api/PortfoliosApi~removeCustomFieldSettingForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom field from a portfolio
     * Removes a custom field setting from a portfolio.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {module:model/RemoveCustomFieldSettingForPortfolioRequest} removeCustomFieldSettingForPortfolioRequest Information about the custom field setting being removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {module:api/PortfoliosApi~removeCustomFieldSettingForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    removeCustomFieldSettingForPortfolio(portfolioGid, removeCustomFieldSettingForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeCustomFieldSettingForPortfolioRequest;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling removeCustomFieldSettingForPortfolio");
      }
      // verify the required parameter 'removeCustomFieldSettingForPortfolioRequest' is set
      if (removeCustomFieldSettingForPortfolioRequest === undefined || removeCustomFieldSettingForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'removeCustomFieldSettingForPortfolioRequest' when calling removeCustomFieldSettingForPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}/removeCustomFieldSetting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeItemForPortfolio operation.
     * @callback module:api/PortfoliosApi~removeItemForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a portfolio item
     * Remove an item from a portfolio. Returns an empty data block.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {module:model/RemoveItemForPortfolioRequest} removeItemForPortfolioRequest Information about the item being removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~removeItemForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    removeItemForPortfolio(portfolioGid, removeItemForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeItemForPortfolioRequest;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling removeItemForPortfolio");
      }
      // verify the required parameter 'removeItemForPortfolioRequest' is set
      if (removeItemForPortfolioRequest === undefined || removeItemForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'removeItemForPortfolioRequest' when calling removeItemForPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}/removeItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMembersForPortfolio operation.
     * @callback module:api/PortfoliosApi~removeMembersForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolio201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove users from a portfolio
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {module:model/RemoveMembersForPortfolioRequest} removeMembersForPortfolioRequest Information about the members being removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~removeMembersForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolio201Response}
     */
    removeMembersForPortfolio(portfolioGid, removeMembersForPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeMembersForPortfolioRequest;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling removeMembersForPortfolio");
      }
      // verify the required parameter 'removeMembersForPortfolioRequest' is set
      if (removeMembersForPortfolioRequest === undefined || removeMembersForPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'removeMembersForPortfolioRequest' when calling removeMembersForPortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePortfolio201Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}/removeMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolio operation.
     * @callback module:api/PortfoliosApi~updatePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolio201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio
     * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     * @param {String} portfolioGid Globally unique identifier for the portfolio.
     * @param {module:model/CreatePortfolioRequest} createPortfolioRequest The updated fields for the portfolio.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/PortfoliosApi~updatePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolio201Response}
     */
    updatePortfolio(portfolioGid, createPortfolioRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPortfolioRequest;
      // verify the required parameter 'portfolioGid' is set
      if (portfolioGid === undefined || portfolioGid === null) {
        throw new Error("Missing the required parameter 'portfolioGid' when calling updatePortfolio");
      }
      // verify the required parameter 'createPortfolioRequest' is set
      if (createPortfolioRequest === undefined || createPortfolioRequest === null) {
        throw new Error("Missing the required parameter 'createPortfolioRequest' when calling updatePortfolio");
      }

      let pathParams = {
        'portfolio_gid': portfolioGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePortfolio201Response;
      return this.apiClient.callApi(
        '/portfolios/{portfolio_gid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
