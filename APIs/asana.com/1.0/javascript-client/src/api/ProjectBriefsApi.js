/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteAttachment200Response from '../model/DeleteAttachment200Response';
import ErrorResponse from '../model/ErrorResponse';
import GetProjectBrief200Response from '../model/GetProjectBrief200Response';
import UpdateProjectBriefRequest from '../model/UpdateProjectBriefRequest';

/**
* ProjectBriefs service.
* @module api/ProjectBriefsApi
* @version 1.0
*/
export default class ProjectBriefsApi {

    /**
    * Constructs a new ProjectBriefsApi. 
    * @alias module:api/ProjectBriefsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProjectBrief operation.
     * @callback module:api/ProjectBriefsApi~createProjectBriefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProjectBrief200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project brief
     * Creates a new project brief.  Returns the full record of the newly created project brief.
     * @param {String} projectGid Globally unique identifier for the project.
     * @param {module:model/UpdateProjectBriefRequest} updateProjectBriefRequest The project brief to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectBriefsApi~createProjectBriefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProjectBrief200Response}
     */
    createProjectBrief(projectGid, updateProjectBriefRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectBriefRequest;
      // verify the required parameter 'projectGid' is set
      if (projectGid === undefined || projectGid === null) {
        throw new Error("Missing the required parameter 'projectGid' when calling createProjectBrief");
      }
      // verify the required parameter 'updateProjectBriefRequest' is set
      if (updateProjectBriefRequest === undefined || updateProjectBriefRequest === null) {
        throw new Error("Missing the required parameter 'updateProjectBriefRequest' when calling createProjectBrief");
      }

      let pathParams = {
        'project_gid': projectGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProjectBrief200Response;
      return this.apiClient.callApi(
        '/projects/{project_gid}/project_briefs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectBrief operation.
     * @callback module:api/ProjectBriefsApi~deleteProjectBriefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAttachment200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project brief
     * Deletes a specific, existing project brief.  Returns an empty data record.
     * @param {String} projectBriefGid Globally unique identifier for the project brief.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectBriefsApi~deleteProjectBriefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAttachment200Response}
     */
    deleteProjectBrief(projectBriefGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectBriefGid' is set
      if (projectBriefGid === undefined || projectBriefGid === null) {
        throw new Error("Missing the required parameter 'projectBriefGid' when calling deleteProjectBrief");
      }

      let pathParams = {
        'project_brief_gid': projectBriefGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAttachment200Response;
      return this.apiClient.callApi(
        '/project_briefs/{project_brief_gid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectBrief operation.
     * @callback module:api/ProjectBriefsApi~getProjectBriefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProjectBrief200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project brief
     * Get the full record for a project brief.
     * @param {String} projectBriefGid Globally unique identifier for the project brief.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectBriefsApi~getProjectBriefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProjectBrief200Response}
     */
    getProjectBrief(projectBriefGid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectBriefGid' is set
      if (projectBriefGid === undefined || projectBriefGid === null) {
        throw new Error("Missing the required parameter 'projectBriefGid' when calling getProjectBrief");
      }

      let pathParams = {
        'project_brief_gid': projectBriefGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProjectBrief200Response;
      return this.apiClient.callApi(
        '/project_briefs/{project_brief_gid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectBrief operation.
     * @callback module:api/ProjectBriefsApi~updateProjectBriefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProjectBrief200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project brief
     * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
     * @param {String} projectBriefGid Globally unique identifier for the project brief.
     * @param {module:model/UpdateProjectBriefRequest} updateProjectBriefRequest The updated fields for the project brief.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
     * @param {Array.<String>} [optFields] Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options.
     * @param {module:api/ProjectBriefsApi~updateProjectBriefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProjectBrief200Response}
     */
    updateProjectBrief(projectBriefGid, updateProjectBriefRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectBriefRequest;
      // verify the required parameter 'projectBriefGid' is set
      if (projectBriefGid === undefined || projectBriefGid === null) {
        throw new Error("Missing the required parameter 'projectBriefGid' when calling updateProjectBrief");
      }
      // verify the required parameter 'updateProjectBriefRequest' is set
      if (updateProjectBriefRequest === undefined || updateProjectBriefRequest === null) {
        throw new Error("Missing the required parameter 'updateProjectBriefRequest' when calling updateProjectBrief");
      }

      let pathParams = {
        'project_brief_gid': projectBriefGid
      };
      let queryParams = {
        'opt_pretty': opts['optPretty'],
        'opt_fields': this.apiClient.buildCollectionParam(opts['optFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['personalAccessToken', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProjectBrief200Response;
      return this.apiClient.callApi(
        '/project_briefs/{project_brief_gid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
