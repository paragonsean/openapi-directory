/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuditLogEventContext model module.
 * @module model/AuditLogEventContext
 * @version 1.0
 */
class AuditLogEventContext {
    /**
     * Constructs a new <code>AuditLogEventContext</code>.
     * The context from which this event originated.
     * @alias module:model/AuditLogEventContext
     */
    constructor() { 
        
        AuditLogEventContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuditLogEventContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditLogEventContext} obj Optional instance to populate.
     * @return {module:model/AuditLogEventContext} The populated <code>AuditLogEventContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditLogEventContext();

            if (data.hasOwnProperty('api_authentication_method')) {
                obj['api_authentication_method'] = ApiClient.convertToType(data['api_authentication_method'], 'String');
            }
            if (data.hasOwnProperty('client_ip_address')) {
                obj['client_ip_address'] = ApiClient.convertToType(data['client_ip_address'], 'String');
            }
            if (data.hasOwnProperty('context_type')) {
                obj['context_type'] = ApiClient.convertToType(data['context_type'], 'String');
            }
            if (data.hasOwnProperty('oauth_app_name')) {
                obj['oauth_app_name'] = ApiClient.convertToType(data['oauth_app_name'], 'String');
            }
            if (data.hasOwnProperty('user_agent')) {
                obj['user_agent'] = ApiClient.convertToType(data['user_agent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditLogEventContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditLogEventContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['api_authentication_method'] && !(typeof data['api_authentication_method'] === 'string' || data['api_authentication_method'] instanceof String)) {
            throw new Error("Expected the field `api_authentication_method` to be a primitive type in the JSON string but got " + data['api_authentication_method']);
        }
        // ensure the json data is a string
        if (data['client_ip_address'] && !(typeof data['client_ip_address'] === 'string' || data['client_ip_address'] instanceof String)) {
            throw new Error("Expected the field `client_ip_address` to be a primitive type in the JSON string but got " + data['client_ip_address']);
        }
        // ensure the json data is a string
        if (data['context_type'] && !(typeof data['context_type'] === 'string' || data['context_type'] instanceof String)) {
            throw new Error("Expected the field `context_type` to be a primitive type in the JSON string but got " + data['context_type']);
        }
        // ensure the json data is a string
        if (data['oauth_app_name'] && !(typeof data['oauth_app_name'] === 'string' || data['oauth_app_name'] instanceof String)) {
            throw new Error("Expected the field `oauth_app_name` to be a primitive type in the JSON string but got " + data['oauth_app_name']);
        }
        // ensure the json data is a string
        if (data['user_agent'] && !(typeof data['user_agent'] === 'string' || data['user_agent'] instanceof String)) {
            throw new Error("Expected the field `user_agent` to be a primitive type in the JSON string but got " + data['user_agent']);
        }

        return true;
    }


}



/**
 * The authentication method used in the context of an API request. Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
 * @member {module:model/AuditLogEventContext.ApiAuthenticationMethodEnum} api_authentication_method
 */
AuditLogEventContext.prototype['api_authentication_method'] = undefined;

/**
 * The IP address of the client that initiated the event, if applicable.
 * @member {String} client_ip_address
 */
AuditLogEventContext.prototype['client_ip_address'] = undefined;

/**
 * The type of context. Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
 * @member {module:model/AuditLogEventContext.ContextTypeEnum} context_type
 */
AuditLogEventContext.prototype['context_type'] = undefined;

/**
 * The name of the OAuth App that initiated the event. Only present if the `api_authentication_method` is `oauth`.
 * @member {String} oauth_app_name
 */
AuditLogEventContext.prototype['oauth_app_name'] = undefined;

/**
 * The user agent of the client that initiated the event, if applicable.
 * @member {String} user_agent
 */
AuditLogEventContext.prototype['user_agent'] = undefined;





/**
 * Allowed values for the <code>api_authentication_method</code> property.
 * @enum {String}
 * @readonly
 */
AuditLogEventContext['ApiAuthenticationMethodEnum'] = {

    /**
     * value: "cookie"
     * @const
     */
    "cookie": "cookie",

    /**
     * value: "oauth"
     * @const
     */
    "oauth": "oauth",

    /**
     * value: "personal_access_token"
     * @const
     */
    "personal_access_token": "personal_access_token",

    /**
     * value: "service_account"
     * @const
     */
    "service_account": "service_account"
};


/**
 * Allowed values for the <code>context_type</code> property.
 * @enum {String}
 * @readonly
 */
AuditLogEventContext['ContextTypeEnum'] = {

    /**
     * value: "web"
     * @const
     */
    "web": "web",

    /**
     * value: "desktop"
     * @const
     */
    "desktop": "desktop",

    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",

    /**
     * value: "asana_support"
     * @const
     */
    "asana_support": "asana_support",

    /**
     * value: "asana"
     * @const
     */
    "asana": "asana",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "api"
     * @const
     */
    "api": "api"
};



export default AuditLogEventContext;

