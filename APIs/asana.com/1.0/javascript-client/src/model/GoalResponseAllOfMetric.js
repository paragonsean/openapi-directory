/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoalMetricBase from './GoalMetricBase';

/**
 * The GoalResponseAllOfMetric model module.
 * @module model/GoalResponseAllOfMetric
 * @version 1.0
 */
class GoalResponseAllOfMetric {
    /**
     * Constructs a new <code>GoalResponseAllOfMetric</code>.
     * @alias module:model/GoalResponseAllOfMetric
     * @implements module:model/GoalMetricBase
     */
    constructor() { 
        GoalMetricBase.initialize(this);
        GoalResponseAllOfMetric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoalResponseAllOfMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoalResponseAllOfMetric} obj Optional instance to populate.
     * @return {module:model/GoalResponseAllOfMetric} The populated <code>GoalResponseAllOfMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoalResponseAllOfMetric();
            GoalMetricBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('current_display_value')) {
                obj['current_display_value'] = ApiClient.convertToType(data['current_display_value'], 'String');
            }
            if (data.hasOwnProperty('current_number_value')) {
                obj['current_number_value'] = ApiClient.convertToType(data['current_number_value'], 'Number');
            }
            if (data.hasOwnProperty('initial_number_value')) {
                obj['initial_number_value'] = ApiClient.convertToType(data['initial_number_value'], 'Number');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
            if (data.hasOwnProperty('progress_source')) {
                obj['progress_source'] = ApiClient.convertToType(data['progress_source'], 'String');
            }
            if (data.hasOwnProperty('resource_subtype')) {
                obj['resource_subtype'] = ApiClient.convertToType(data['resource_subtype'], 'String');
            }
            if (data.hasOwnProperty('target_number_value')) {
                obj['target_number_value'] = ApiClient.convertToType(data['target_number_value'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('can_manage')) {
                obj['can_manage'] = ApiClient.convertToType(data['can_manage'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoalResponseAllOfMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoalResponseAllOfMetric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['current_display_value'] && !(typeof data['current_display_value'] === 'string' || data['current_display_value'] instanceof String)) {
            throw new Error("Expected the field `current_display_value` to be a primitive type in the JSON string but got " + data['current_display_value']);
        }
        // ensure the json data is a string
        if (data['progress_source'] && !(typeof data['progress_source'] === 'string' || data['progress_source'] instanceof String)) {
            throw new Error("Expected the field `progress_source` to be a primitive type in the JSON string but got " + data['progress_source']);
        }
        // ensure the json data is a string
        if (data['resource_subtype'] && !(typeof data['resource_subtype'] === 'string' || data['resource_subtype'] instanceof String)) {
            throw new Error("Expected the field `resource_subtype` to be a primitive type in the JSON string but got " + data['resource_subtype']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
GoalResponseAllOfMetric.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
GoalResponseAllOfMetric.prototype['resource_type'] = undefined;

/**
 * ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.
 * @member {String} currency_code
 */
GoalResponseAllOfMetric.prototype['currency_code'] = undefined;

/**
 * This string is the current value of a goal metric of type string.
 * @member {String} current_display_value
 */
GoalResponseAllOfMetric.prototype['current_display_value'] = undefined;

/**
 * This number is the current value of a goal metric of type number.
 * @member {Number} current_number_value
 */
GoalResponseAllOfMetric.prototype['current_number_value'] = undefined;

/**
 * This number is the start value of a goal metric of type number.
 * @member {Number} initial_number_value
 */
GoalResponseAllOfMetric.prototype['initial_number_value'] = undefined;

/**
 * *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
 * @member {Number} precision
 */
GoalResponseAllOfMetric.prototype['precision'] = undefined;

/**
 * This field defines how the progress value of a goal metric is being calculated. A goal's progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.
 * @member {module:model/GoalResponseAllOfMetric.ProgressSourceEnum} progress_source
 */
GoalResponseAllOfMetric.prototype['progress_source'] = undefined;

/**
 * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
 * @member {module:model/GoalResponseAllOfMetric.ResourceSubtypeEnum} resource_subtype
 */
GoalResponseAllOfMetric.prototype['resource_subtype'] = undefined;

/**
 * This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.
 * @member {Number} target_number_value
 */
GoalResponseAllOfMetric.prototype['target_number_value'] = undefined;

/**
 * A supported unit of measure for the goal metric, or none.
 * @member {module:model/GoalResponseAllOfMetric.UnitEnum} unit
 */
GoalResponseAllOfMetric.prototype['unit'] = undefined;

/**
 * *Conditional*. Only relevant for `progress_source` of type `external`. This boolean indicates whether the requester has the ability to update the current value of this metric. This returns `true` if the external metric was created by the requester, `false` otherwise.
 * @member {Boolean} can_manage
 */
GoalResponseAllOfMetric.prototype['can_manage'] = undefined;


// Implement GoalMetricBase interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
GoalMetricBase.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
GoalMetricBase.prototype['resource_type'] = undefined;
/**
 * ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.
 * @member {String} currency_code
 */
GoalMetricBase.prototype['currency_code'] = undefined;
/**
 * This string is the current value of a goal metric of type string.
 * @member {String} current_display_value
 */
GoalMetricBase.prototype['current_display_value'] = undefined;
/**
 * This number is the current value of a goal metric of type number.
 * @member {Number} current_number_value
 */
GoalMetricBase.prototype['current_number_value'] = undefined;
/**
 * This number is the start value of a goal metric of type number.
 * @member {Number} initial_number_value
 */
GoalMetricBase.prototype['initial_number_value'] = undefined;
/**
 * *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
 * @member {Number} precision
 */
GoalMetricBase.prototype['precision'] = undefined;
/**
 * This field defines how the progress value of a goal metric is being calculated. A goal's progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.
 * @member {module:model/GoalMetricBase.ProgressSourceEnum} progress_source
 */
GoalMetricBase.prototype['progress_source'] = undefined;
/**
 * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
 * @member {module:model/GoalMetricBase.ResourceSubtypeEnum} resource_subtype
 */
GoalMetricBase.prototype['resource_subtype'] = undefined;
/**
 * This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.
 * @member {Number} target_number_value
 */
GoalMetricBase.prototype['target_number_value'] = undefined;
/**
 * A supported unit of measure for the goal metric, or none.
 * @member {module:model/GoalMetricBase.UnitEnum} unit
 */
GoalMetricBase.prototype['unit'] = undefined;



/**
 * Allowed values for the <code>progress_source</code> property.
 * @enum {String}
 * @readonly
 */
GoalResponseAllOfMetric['ProgressSourceEnum'] = {

    /**
     * value: "manual"
     * @const
     */
    "manual": "manual",

    /**
     * value: "subgoal_progress"
     * @const
     */
    "subgoal_progress": "subgoal_progress",

    /**
     * value: "project_task_completion"
     * @const
     */
    "project_task_completion": "project_task_completion",

    /**
     * value: "project_milestone_completion"
     * @const
     */
    "project_milestone_completion": "project_milestone_completion",

    /**
     * value: "external"
     * @const
     */
    "external": "external"
};


/**
 * Allowed values for the <code>resource_subtype</code> property.
 * @enum {String}
 * @readonly
 */
GoalResponseAllOfMetric['ResourceSubtypeEnum'] = {

    /**
     * value: "number"
     * @const
     */
    "number": "number"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
GoalResponseAllOfMetric['UnitEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "currency"
     * @const
     */
    "currency": "currency",

    /**
     * value: "percentage"
     * @const
     */
    "percentage": "percentage"
};



export default GoalResponseAllOfMetric;

