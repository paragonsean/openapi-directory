/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchRequestActionOptions from './BatchRequestActionOptions';

/**
 * The BatchRequestAction model module.
 * @module model/BatchRequestAction
 * @version 1.0
 */
class BatchRequestAction {
    /**
     * Constructs a new <code>BatchRequestAction</code>.
     * An action object for use in a batch request.
     * @alias module:model/BatchRequestAction
     * @param method {module:model/BatchRequestAction.MethodEnum} The HTTP method you wish to emulate for the action.
     * @param relativePath {String} The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.
     */
    constructor(method, relativePath) { 
        
        BatchRequestAction.initialize(this, method, relativePath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, relativePath) { 
        obj['method'] = method;
        obj['relative_path'] = relativePath;
    }

    /**
     * Constructs a <code>BatchRequestAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchRequestAction} obj Optional instance to populate.
     * @return {module:model/BatchRequestAction} The populated <code>BatchRequestAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchRequestAction();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = BatchRequestActionOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('relative_path')) {
                obj['relative_path'] = ApiClient.convertToType(data['relative_path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchRequestAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchRequestAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchRequestAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          BatchRequestActionOptions.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['relative_path'] && !(typeof data['relative_path'] === 'string' || data['relative_path'] instanceof String)) {
            throw new Error("Expected the field `relative_path` to be a primitive type in the JSON string but got " + data['relative_path']);
        }

        return true;
    }


}

BatchRequestAction.RequiredProperties = ["method", "relative_path"];

/**
 * For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.
 * @member {Object} data
 */
BatchRequestAction.prototype['data'] = undefined;

/**
 * The HTTP method you wish to emulate for the action.
 * @member {module:model/BatchRequestAction.MethodEnum} method
 */
BatchRequestAction.prototype['method'] = undefined;

/**
 * @member {module:model/BatchRequestActionOptions} options
 */
BatchRequestAction.prototype['options'] = undefined;

/**
 * The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.
 * @member {String} relative_path
 */
BatchRequestAction.prototype['relative_path'] = undefined;





/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
BatchRequestAction['MethodEnum'] = {

    /**
     * value: "get"
     * @const
     */
    "get": "get",

    /**
     * value: "post"
     * @const
     */
    "post": "post",

    /**
     * value: "put"
     * @const
     */
    "put": "put",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "patch"
     * @const
     */
    "patch": "patch",

    /**
     * value: "head"
     * @const
     */
    "head": "head"
};



export default BatchRequestAction;

