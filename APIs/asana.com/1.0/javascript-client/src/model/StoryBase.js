/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsanaResource from './AsanaResource';

/**
 * The StoryBase model module.
 * @module model/StoryBase
 * @version 1.0
 */
class StoryBase {
    /**
     * Constructs a new <code>StoryBase</code>.
     * @alias module:model/StoryBase
     * @implements module:model/AsanaResource
     */
    constructor() { 
        AsanaResource.initialize(this);
        StoryBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoryBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoryBase} obj Optional instance to populate.
     * @return {module:model/StoryBase} The populated <code>StoryBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoryBase();
            AsanaResource.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('html_text')) {
                obj['html_text'] = ApiClient.convertToType(data['html_text'], 'String');
            }
            if (data.hasOwnProperty('is_pinned')) {
                obj['is_pinned'] = ApiClient.convertToType(data['is_pinned'], 'Boolean');
            }
            if (data.hasOwnProperty('resource_subtype')) {
                obj['resource_subtype'] = ApiClient.convertToType(data['resource_subtype'], 'String');
            }
            if (data.hasOwnProperty('sticker_name')) {
                obj['sticker_name'] = ApiClient.convertToType(data['sticker_name'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoryBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoryBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['html_text'] && !(typeof data['html_text'] === 'string' || data['html_text'] instanceof String)) {
            throw new Error("Expected the field `html_text` to be a primitive type in the JSON string but got " + data['html_text']);
        }
        // ensure the json data is a string
        if (data['resource_subtype'] && !(typeof data['resource_subtype'] === 'string' || data['resource_subtype'] instanceof String)) {
            throw new Error("Expected the field `resource_subtype` to be a primitive type in the JSON string but got " + data['resource_subtype']);
        }
        // ensure the json data is a string
        if (data['sticker_name'] && !(typeof data['sticker_name'] === 'string' || data['sticker_name'] instanceof String)) {
            throw new Error("Expected the field `sticker_name` to be a primitive type in the JSON string but got " + data['sticker_name']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
StoryBase.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
StoryBase.prototype['resource_type'] = undefined;

/**
 * The time at which this resource was created.
 * @member {Date} created_at
 */
StoryBase.prototype['created_at'] = undefined;

/**
 * [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
 * @member {String} html_text
 */
StoryBase.prototype['html_text'] = undefined;

/**
 * *Conditional*. Whether the story should be pinned on the resource.
 * @member {Boolean} is_pinned
 */
StoryBase.prototype['is_pinned'] = undefined;

/**
 * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
 * @member {String} resource_subtype
 */
StoryBase.prototype['resource_subtype'] = undefined;

/**
 * The name of the sticker in this story. `null` if there is no sticker.
 * @member {module:model/StoryBase.StickerNameEnum} sticker_name
 */
StoryBase.prototype['sticker_name'] = undefined;

/**
 * The plain text of the comment to add. Cannot be used with html_text.
 * @member {String} text
 */
StoryBase.prototype['text'] = undefined;


// Implement AsanaResource interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
AsanaResource.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
AsanaResource.prototype['resource_type'] = undefined;



/**
 * Allowed values for the <code>sticker_name</code> property.
 * @enum {String}
 * @readonly
 */
StoryBase['StickerNameEnum'] = {

    /**
     * value: "green_checkmark"
     * @const
     */
    "green_checkmark": "green_checkmark",

    /**
     * value: "people_dancing"
     * @const
     */
    "people_dancing": "people_dancing",

    /**
     * value: "dancing_unicorn"
     * @const
     */
    "dancing_unicorn": "dancing_unicorn",

    /**
     * value: "heart"
     * @const
     */
    "heart": "heart",

    /**
     * value: "party_popper"
     * @const
     */
    "party_popper": "party_popper",

    /**
     * value: "people_waving_flags"
     * @const
     */
    "people_waving_flags": "people_waving_flags",

    /**
     * value: "splashing_narwhal"
     * @const
     */
    "splashing_narwhal": "splashing_narwhal",

    /**
     * value: "trophy"
     * @const
     */
    "trophy": "trophy",

    /**
     * value: "yeti_riding_unicorn"
     * @const
     */
    "yeti_riding_unicorn": "yeti_riding_unicorn",

    /**
     * value: "celebrating_people"
     * @const
     */
    "celebrating_people": "celebrating_people",

    /**
     * value: "determined_climbers"
     * @const
     */
    "determined_climbers": "determined_climbers",

    /**
     * value: "phoenix_spreading_love"
     * @const
     */
    "phoenix_spreading_love": "phoenix_spreading_love"
};



export default StoryBase;

