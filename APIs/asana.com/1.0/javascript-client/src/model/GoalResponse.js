/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoalBase from './GoalBase';
import GoalResponseAllOfMetric from './GoalResponseAllOfMetric';
import GoalResponseAllOfOwner from './GoalResponseAllOfOwner';
import GoalResponseAllOfTeam from './GoalResponseAllOfTeam';
import GoalResponseAllOfTimePeriod from './GoalResponseAllOfTimePeriod';
import GoalResponseAllOfWorkspace from './GoalResponseAllOfWorkspace';
import Like from './Like';
import StatusUpdateCompact from './StatusUpdateCompact';
import UserCompact from './UserCompact';

/**
 * The GoalResponse model module.
 * @module model/GoalResponse
 * @version 1.0
 */
class GoalResponse {
    /**
     * Constructs a new <code>GoalResponse</code>.
     * @alias module:model/GoalResponse
     * @implements module:model/GoalBase
     */
    constructor() { 
        GoalBase.initialize(this);
        GoalResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoalResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoalResponse} obj Optional instance to populate.
     * @return {module:model/GoalResponse} The populated <code>GoalResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoalResponse();
            GoalBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('due_on')) {
                obj['due_on'] = ApiClient.convertToType(data['due_on'], 'String');
            }
            if (data.hasOwnProperty('html_notes')) {
                obj['html_notes'] = ApiClient.convertToType(data['html_notes'], 'String');
            }
            if (data.hasOwnProperty('is_workspace_level')) {
                obj['is_workspace_level'] = ApiClient.convertToType(data['is_workspace_level'], 'Boolean');
            }
            if (data.hasOwnProperty('liked')) {
                obj['liked'] = ApiClient.convertToType(data['liked'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('start_on')) {
                obj['start_on'] = ApiClient.convertToType(data['start_on'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('current_status_update')) {
                obj['current_status_update'] = ApiClient.convertToType(data['current_status_update'], StatusUpdateCompact);
            }
            if (data.hasOwnProperty('followers')) {
                obj['followers'] = ApiClient.convertToType(data['followers'], [UserCompact]);
            }
            if (data.hasOwnProperty('likes')) {
                obj['likes'] = ApiClient.convertToType(data['likes'], [Like]);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = GoalResponseAllOfMetric.constructFromObject(data['metric']);
            }
            if (data.hasOwnProperty('num_likes')) {
                obj['num_likes'] = ApiClient.convertToType(data['num_likes'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = GoalResponseAllOfOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = GoalResponseAllOfTeam.constructFromObject(data['team']);
            }
            if (data.hasOwnProperty('time_period')) {
                obj['time_period'] = GoalResponseAllOfTimePeriod.constructFromObject(data['time_period']);
            }
            if (data.hasOwnProperty('workspace')) {
                obj['workspace'] = GoalResponseAllOfWorkspace.constructFromObject(data['workspace']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoalResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoalResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['due_on'] && !(typeof data['due_on'] === 'string' || data['due_on'] instanceof String)) {
            throw new Error("Expected the field `due_on` to be a primitive type in the JSON string but got " + data['due_on']);
        }
        // ensure the json data is a string
        if (data['html_notes'] && !(typeof data['html_notes'] === 'string' || data['html_notes'] instanceof String)) {
            throw new Error("Expected the field `html_notes` to be a primitive type in the JSON string but got " + data['html_notes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['start_on'] && !(typeof data['start_on'] === 'string' || data['start_on'] instanceof String)) {
            throw new Error("Expected the field `start_on` to be a primitive type in the JSON string but got " + data['start_on']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `current_status_update`
        if (data['current_status_update']) { // data not null
          StatusUpdateCompact.validateJSON(data['current_status_update']);
        }
        if (data['followers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['followers'])) {
                throw new Error("Expected the field `followers` to be an array in the JSON data but got " + data['followers']);
            }
            // validate the optional field `followers` (array)
            for (const item of data['followers']) {
                UserCompact.validateJSON(item);
            };
        }
        if (data['likes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['likes'])) {
                throw new Error("Expected the field `likes` to be an array in the JSON data but got " + data['likes']);
            }
            // validate the optional field `likes` (array)
            for (const item of data['likes']) {
                Like.validateJSON(item);
            };
        }
        // validate the optional field `metric`
        if (data['metric']) { // data not null
          GoalResponseAllOfMetric.validateJSON(data['metric']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          GoalResponseAllOfOwner.validateJSON(data['owner']);
        }
        // validate the optional field `team`
        if (data['team']) { // data not null
          GoalResponseAllOfTeam.validateJSON(data['team']);
        }
        // validate the optional field `time_period`
        if (data['time_period']) { // data not null
          GoalResponseAllOfTimePeriod.validateJSON(data['time_period']);
        }
        // validate the optional field `workspace`
        if (data['workspace']) { // data not null
          GoalResponseAllOfWorkspace.validateJSON(data['workspace']);
        }

        return true;
    }


}



/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
GoalResponse.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
GoalResponse.prototype['resource_type'] = undefined;

/**
 * The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
 * @member {String} due_on
 */
GoalResponse.prototype['due_on'] = undefined;

/**
 * The notes of the goal with formatting as HTML.
 * @member {String} html_notes
 */
GoalResponse.prototype['html_notes'] = undefined;

/**
 * *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
 * @member {Boolean} is_workspace_level
 */
GoalResponse.prototype['is_workspace_level'] = undefined;

/**
 * True if the goal is liked by the authorized user, false if not.
 * @member {Boolean} liked
 */
GoalResponse.prototype['liked'] = undefined;

/**
 * The name of the goal.
 * @member {String} name
 */
GoalResponse.prototype['name'] = undefined;

/**
 * Free-form textual information associated with the goal (i.e. its description).
 * @member {String} notes
 */
GoalResponse.prototype['notes'] = undefined;

/**
 * The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
 * @member {String} start_on
 */
GoalResponse.prototype['start_on'] = undefined;

/**
 * The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect \"On Track\", \"At Risk\", and \"Off Track\", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`. *Note* you can only write to this property if `metric` is set.
 * @member {String} status
 */
GoalResponse.prototype['status'] = undefined;

/**
 * The latest `status_update` posted to this goal.
 * @member {module:model/StatusUpdateCompact} current_status_update
 */
GoalResponse.prototype['current_status_update'] = undefined;

/**
 * Array of users who are members of this goal.
 * @member {Array.<module:model/UserCompact>} followers
 */
GoalResponse.prototype['followers'] = undefined;

/**
 * Array of likes for users who have liked this goal.
 * @member {Array.<module:model/Like>} likes
 */
GoalResponse.prototype['likes'] = undefined;

/**
 * @member {module:model/GoalResponseAllOfMetric} metric
 */
GoalResponse.prototype['metric'] = undefined;

/**
 * The number of users who have liked this goal.
 * @member {Number} num_likes
 */
GoalResponse.prototype['num_likes'] = undefined;

/**
 * @member {module:model/GoalResponseAllOfOwner} owner
 */
GoalResponse.prototype['owner'] = undefined;

/**
 * @member {module:model/GoalResponseAllOfTeam} team
 */
GoalResponse.prototype['team'] = undefined;

/**
 * @member {module:model/GoalResponseAllOfTimePeriod} time_period
 */
GoalResponse.prototype['time_period'] = undefined;

/**
 * @member {module:model/GoalResponseAllOfWorkspace} workspace
 */
GoalResponse.prototype['workspace'] = undefined;


// Implement GoalBase interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
GoalBase.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
GoalBase.prototype['resource_type'] = undefined;
/**
 * The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
 * @member {String} due_on
 */
GoalBase.prototype['due_on'] = undefined;
/**
 * The notes of the goal with formatting as HTML.
 * @member {String} html_notes
 */
GoalBase.prototype['html_notes'] = undefined;
/**
 * *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
 * @member {Boolean} is_workspace_level
 */
GoalBase.prototype['is_workspace_level'] = undefined;
/**
 * True if the goal is liked by the authorized user, false if not.
 * @member {Boolean} liked
 */
GoalBase.prototype['liked'] = undefined;
/**
 * The name of the goal.
 * @member {String} name
 */
GoalBase.prototype['name'] = undefined;
/**
 * Free-form textual information associated with the goal (i.e. its description).
 * @member {String} notes
 */
GoalBase.prototype['notes'] = undefined;
/**
 * The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
 * @member {String} start_on
 */
GoalBase.prototype['start_on'] = undefined;
/**
 * The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect \"On Track\", \"At Risk\", and \"Off Track\", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`. *Note* you can only write to this property if `metric` is set.
 * @member {String} status
 */
GoalBase.prototype['status'] = undefined;




export default GoalResponse;

