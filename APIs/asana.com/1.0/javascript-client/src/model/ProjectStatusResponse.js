/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectStatusBase from './ProjectStatusBase';
import UserCompact from './UserCompact';

/**
 * The ProjectStatusResponse model module.
 * @module model/ProjectStatusResponse
 * @version 1.0
 */
class ProjectStatusResponse {
    /**
     * Constructs a new <code>ProjectStatusResponse</code>.
     * @alias module:model/ProjectStatusResponse
     * @implements module:model/ProjectStatusBase
     * @param color {module:model/ProjectStatusResponse.ColorEnum} The color associated with the status update.
     * @param text {String} The text content of the status update.
     */
    constructor(color, text) { 
        ProjectStatusBase.initialize(this, color, text);
        ProjectStatusResponse.initialize(this, color, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, color, text) { 
        obj['color'] = color;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>ProjectStatusResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectStatusResponse} obj Optional instance to populate.
     * @return {module:model/ProjectStatusResponse} The populated <code>ProjectStatusResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectStatusResponse();
            ProjectStatusBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('html_text')) {
                obj['html_text'] = ApiClient.convertToType(data['html_text'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = UserCompact.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = UserCompact.constructFromObject(data['created_by']);
            }
            if (data.hasOwnProperty('modified_at')) {
                obj['modified_at'] = ApiClient.convertToType(data['modified_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectStatusResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectStatusResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectStatusResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['html_text'] && !(typeof data['html_text'] === 'string' || data['html_text'] instanceof String)) {
            throw new Error("Expected the field `html_text` to be a primitive type in the JSON string but got " + data['html_text']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          UserCompact.validateJSON(data['author']);
        }
        // validate the optional field `created_by`
        if (data['created_by']) { // data not null
          UserCompact.validateJSON(data['created_by']);
        }

        return true;
    }


}

ProjectStatusResponse.RequiredProperties = ["color", "text"];

/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
ProjectStatusResponse.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
ProjectStatusResponse.prototype['resource_type'] = undefined;

/**
 * The title of the project status update.
 * @member {String} title
 */
ProjectStatusResponse.prototype['title'] = undefined;

/**
 * The color associated with the status update.
 * @member {module:model/ProjectStatusResponse.ColorEnum} color
 */
ProjectStatusResponse.prototype['color'] = undefined;

/**
 * [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
 * @member {String} html_text
 */
ProjectStatusResponse.prototype['html_text'] = undefined;

/**
 * The text content of the status update.
 * @member {String} text
 */
ProjectStatusResponse.prototype['text'] = undefined;

/**
 * @member {module:model/UserCompact} author
 */
ProjectStatusResponse.prototype['author'] = undefined;

/**
 * The time at which this resource was created.
 * @member {Date} created_at
 */
ProjectStatusResponse.prototype['created_at'] = undefined;

/**
 * @member {module:model/UserCompact} created_by
 */
ProjectStatusResponse.prototype['created_by'] = undefined;

/**
 * The time at which this project status was last modified. *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
 * @member {Date} modified_at
 */
ProjectStatusResponse.prototype['modified_at'] = undefined;


// Implement ProjectStatusBase interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
ProjectStatusBase.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
ProjectStatusBase.prototype['resource_type'] = undefined;
/**
 * The title of the project status update.
 * @member {String} title
 */
ProjectStatusBase.prototype['title'] = undefined;
/**
 * The color associated with the status update.
 * @member {module:model/ProjectStatusBase.ColorEnum} color
 */
ProjectStatusBase.prototype['color'] = undefined;
/**
 * [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
 * @member {String} html_text
 */
ProjectStatusBase.prototype['html_text'] = undefined;
/**
 * The text content of the status update.
 * @member {String} text
 */
ProjectStatusBase.prototype['text'] = undefined;



/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
ProjectStatusResponse['ColorEnum'] = {

    /**
     * value: "green"
     * @const
     */
    "green": "green",

    /**
     * value: "yellow"
     * @const
     */
    "yellow": "yellow",

    /**
     * value: "red"
     * @const
     */
    "red": "red",

    /**
     * value: "blue"
     * @const
     */
    "blue": "blue"
};



export default ProjectStatusResponse;

