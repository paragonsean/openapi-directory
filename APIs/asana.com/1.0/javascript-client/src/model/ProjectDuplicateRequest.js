/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectDuplicateRequestScheduleDates from './ProjectDuplicateRequestScheduleDates';

/**
 * The ProjectDuplicateRequest model module.
 * @module model/ProjectDuplicateRequest
 * @version 1.0
 */
class ProjectDuplicateRequest {
    /**
     * Constructs a new <code>ProjectDuplicateRequest</code>.
     * @alias module:model/ProjectDuplicateRequest
     * @param name {String} The name of the new project.
     */
    constructor(name) { 
        
        ProjectDuplicateRequest.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ProjectDuplicateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectDuplicateRequest} obj Optional instance to populate.
     * @return {module:model/ProjectDuplicateRequest} The populated <code>ProjectDuplicateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectDuplicateRequest();

            if (data.hasOwnProperty('include')) {
                obj['include'] = ApiClient.convertToType(data['include'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('schedule_dates')) {
                obj['schedule_dates'] = ProjectDuplicateRequestScheduleDates.constructFromObject(data['schedule_dates']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectDuplicateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectDuplicateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectDuplicateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['include'] && !(typeof data['include'] === 'string' || data['include'] instanceof String)) {
            throw new Error("Expected the field `include` to be a primitive type in the JSON string but got " + data['include']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `schedule_dates`
        if (data['schedule_dates']) { // data not null
          ProjectDuplicateRequestScheduleDates.validateJSON(data['schedule_dates']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }

        return true;
    }


}

ProjectDuplicateRequest.RequiredProperties = ["name"];

/**
 * The elements that will be duplicated to the new project. Tasks are always included.
 * @member {module:model/ProjectDuplicateRequest.IncludeEnum} include
 */
ProjectDuplicateRequest.prototype['include'] = undefined;

/**
 * The name of the new project.
 * @member {String} name
 */
ProjectDuplicateRequest.prototype['name'] = undefined;

/**
 * @member {module:model/ProjectDuplicateRequestScheduleDates} schedule_dates
 */
ProjectDuplicateRequest.prototype['schedule_dates'] = undefined;

/**
 * Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
 * @member {String} team
 */
ProjectDuplicateRequest.prototype['team'] = undefined;





/**
 * Allowed values for the <code>include</code> property.
 * @enum {String}
 * @readonly
 */
ProjectDuplicateRequest['IncludeEnum'] = {

    /**
     * value: "members"
     * @const
     */
    "members": "members",

    /**
     * value: "notes"
     * @const
     */
    "notes": "notes",

    /**
     * value: "forms"
     * @const
     */
    "forms": "forms",

    /**
     * value: "task_notes"
     * @const
     */
    "task_notes": "task_notes",

    /**
     * value: "task_assignee"
     * @const
     */
    "task_assignee": "task_assignee",

    /**
     * value: "task_subtasks"
     * @const
     */
    "task_subtasks": "task_subtasks",

    /**
     * value: "task_attachments"
     * @const
     */
    "task_attachments": "task_attachments",

    /**
     * value: "task_dates"
     * @const
     */
    "task_dates": "task_dates",

    /**
     * value: "task_dependencies"
     * @const
     */
    "task_dependencies": "task_dependencies",

    /**
     * value: "task_followers"
     * @const
     */
    "task_followers": "task_followers",

    /**
     * value: "task_tags"
     * @const
     */
    "task_tags": "task_tags",

    /**
     * value: "task_projects"
     * @const
     */
    "task_projects": "task_projects"
};



export default ProjectDuplicateRequest;

