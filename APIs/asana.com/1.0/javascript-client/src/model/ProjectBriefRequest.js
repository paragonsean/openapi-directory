/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectBriefBase from './ProjectBriefBase';

/**
 * The ProjectBriefRequest model module.
 * @module model/ProjectBriefRequest
 * @version 1.0
 */
class ProjectBriefRequest {
    /**
     * Constructs a new <code>ProjectBriefRequest</code>.
     * @alias module:model/ProjectBriefRequest
     * @implements module:model/ProjectBriefBase
     */
    constructor() { 
        ProjectBriefBase.initialize(this);
        ProjectBriefRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectBriefRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectBriefRequest} obj Optional instance to populate.
     * @return {module:model/ProjectBriefRequest} The populated <code>ProjectBriefRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectBriefRequest();
            ProjectBriefBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('html_text')) {
                obj['html_text'] = ApiClient.convertToType(data['html_text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectBriefRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectBriefRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['html_text'] && !(typeof data['html_text'] === 'string' || data['html_text'] instanceof String)) {
            throw new Error("Expected the field `html_text` to be a primitive type in the JSON string but got " + data['html_text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
ProjectBriefRequest.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
ProjectBriefRequest.prototype['resource_type'] = undefined;

/**
 * HTML formatted text for the project brief.
 * @member {String} html_text
 */
ProjectBriefRequest.prototype['html_text'] = undefined;

/**
 * The title of the project brief.
 * @member {String} title
 */
ProjectBriefRequest.prototype['title'] = undefined;

/**
 * The plain text of the project brief. When writing to a project brief, you can specify either `html_text` (preferred) or `text`, but not both.
 * @member {String} text
 */
ProjectBriefRequest.prototype['text'] = undefined;


// Implement ProjectBriefBase interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
ProjectBriefBase.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
ProjectBriefBase.prototype['resource_type'] = undefined;
/**
 * HTML formatted text for the project brief.
 * @member {String} html_text
 */
ProjectBriefBase.prototype['html_text'] = undefined;
/**
 * The title of the project brief.
 * @member {String} title
 */
ProjectBriefBase.prototype['title'] = undefined;




export default ProjectBriefRequest;

