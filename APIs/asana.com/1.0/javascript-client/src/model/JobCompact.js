/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsanaResource from './AsanaResource';
import ProjectCompact from './ProjectCompact';
import ProjectTemplateCompact from './ProjectTemplateCompact';
import TaskCompact from './TaskCompact';

/**
 * The JobCompact model module.
 * @module model/JobCompact
 * @version 1.0
 */
class JobCompact {
    /**
     * Constructs a new <code>JobCompact</code>.
     * @alias module:model/JobCompact
     * @implements module:model/AsanaResource
     */
    constructor() { 
        AsanaResource.initialize(this);
        JobCompact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobCompact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobCompact} obj Optional instance to populate.
     * @return {module:model/JobCompact} The populated <code>JobCompact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobCompact();
            AsanaResource.constructFromObject(data, obj);

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('new_project')) {
                obj['new_project'] = ProjectCompact.constructFromObject(data['new_project']);
            }
            if (data.hasOwnProperty('new_project_template')) {
                obj['new_project_template'] = ProjectTemplateCompact.constructFromObject(data['new_project_template']);
            }
            if (data.hasOwnProperty('new_task')) {
                obj['new_task'] = TaskCompact.constructFromObject(data['new_task']);
            }
            if (data.hasOwnProperty('resource_subtype')) {
                obj['resource_subtype'] = ApiClient.convertToType(data['resource_subtype'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobCompact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobCompact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // validate the optional field `new_project`
        if (data['new_project']) { // data not null
          ProjectCompact.validateJSON(data['new_project']);
        }
        // validate the optional field `new_project_template`
        if (data['new_project_template']) { // data not null
          ProjectTemplateCompact.validateJSON(data['new_project_template']);
        }
        // validate the optional field `new_task`
        if (data['new_task']) { // data not null
          TaskCompact.validateJSON(data['new_task']);
        }
        // ensure the json data is a string
        if (data['resource_subtype'] && !(typeof data['resource_subtype'] === 'string' || data['resource_subtype'] instanceof String)) {
            throw new Error("Expected the field `resource_subtype` to be a primitive type in the JSON string but got " + data['resource_subtype']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
JobCompact.prototype['gid'] = undefined;

/**
 * The base type of this resource.
 * @member {String} resource_type
 */
JobCompact.prototype['resource_type'] = undefined;

/**
 * @member {module:model/ProjectCompact} new_project
 */
JobCompact.prototype['new_project'] = undefined;

/**
 * @member {module:model/ProjectTemplateCompact} new_project_template
 */
JobCompact.prototype['new_project_template'] = undefined;

/**
 * @member {module:model/TaskCompact} new_task
 */
JobCompact.prototype['new_task'] = undefined;

/**
 * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
 * @member {String} resource_subtype
 */
JobCompact.prototype['resource_subtype'] = undefined;

/**
 * The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`.
 * @member {module:model/JobCompact.StatusEnum} status
 */
JobCompact.prototype['status'] = undefined;


// Implement AsanaResource interface:
/**
 * Globally unique identifier of the resource, as a string.
 * @member {String} gid
 */
AsanaResource.prototype['gid'] = undefined;
/**
 * The base type of this resource.
 * @member {String} resource_type
 */
AsanaResource.prototype['resource_type'] = undefined;



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
JobCompact['StatusEnum'] = {

    /**
     * value: "not_started"
     * @const
     */
    "not_started": "not_started",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default JobCompact;

