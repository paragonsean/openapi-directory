/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.TaskResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaskResponse', function() {
    it('should create an instance of TaskResponse', function() {
      // uncomment below and update the code to test TaskResponse
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be.a(Asana.TaskResponse);
    });

    it('should have the property gid (base name: "gid")', function() {
      // uncomment below and update the code to test the property gid
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property resourceType (base name: "resource_type")', function() {
      // uncomment below and update the code to test the property resourceType
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property resourceSubtype (base name: "resource_subtype")', function() {
      // uncomment below and update the code to test the property resourceSubtype
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property actualTimeMinutes (base name: "actual_time_minutes")', function() {
      // uncomment below and update the code to test the property actualTimeMinutes
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property approvalStatus (base name: "approval_status")', function() {
      // uncomment below and update the code to test the property approvalStatus
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property assigneeStatus (base name: "assignee_status")', function() {
      // uncomment below and update the code to test the property assigneeStatus
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property completed (base name: "completed")', function() {
      // uncomment below and update the code to test the property completed
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property completedAt (base name: "completed_at")', function() {
      // uncomment below and update the code to test the property completedAt
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property completedBy (base name: "completed_by")', function() {
      // uncomment below and update the code to test the property completedBy
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property dependencies (base name: "dependencies")', function() {
      // uncomment below and update the code to test the property dependencies
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property dependents (base name: "dependents")', function() {
      // uncomment below and update the code to test the property dependents
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property dueAt (base name: "due_at")', function() {
      // uncomment below and update the code to test the property dueAt
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property dueOn (base name: "due_on")', function() {
      // uncomment below and update the code to test the property dueOn
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property external (base name: "external")', function() {
      // uncomment below and update the code to test the property external
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property hearted (base name: "hearted")', function() {
      // uncomment below and update the code to test the property hearted
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property hearts (base name: "hearts")', function() {
      // uncomment below and update the code to test the property hearts
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property htmlNotes (base name: "html_notes")', function() {
      // uncomment below and update the code to test the property htmlNotes
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property isRenderedAsSeparator (base name: "is_rendered_as_separator")', function() {
      // uncomment below and update the code to test the property isRenderedAsSeparator
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property liked (base name: "liked")', function() {
      // uncomment below and update the code to test the property liked
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property likes (base name: "likes")', function() {
      // uncomment below and update the code to test the property likes
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property memberships (base name: "memberships")', function() {
      // uncomment below and update the code to test the property memberships
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property modifiedAt (base name: "modified_at")', function() {
      // uncomment below and update the code to test the property modifiedAt
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property numHearts (base name: "num_hearts")', function() {
      // uncomment below and update the code to test the property numHearts
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property numLikes (base name: "num_likes")', function() {
      // uncomment below and update the code to test the property numLikes
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property numSubtasks (base name: "num_subtasks")', function() {
      // uncomment below and update the code to test the property numSubtasks
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property startAt (base name: "start_at")', function() {
      // uncomment below and update the code to test the property startAt
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property startOn (base name: "start_on")', function() {
      // uncomment below and update the code to test the property startOn
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property assignee (base name: "assignee")', function() {
      // uncomment below and update the code to test the property assignee
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property assigneeSection (base name: "assignee_section")', function() {
      // uncomment below and update the code to test the property assigneeSection
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "custom_fields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property followers (base name: "followers")', function() {
      // uncomment below and update the code to test the property followers
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property permalinkUrl (base name: "permalink_url")', function() {
      // uncomment below and update the code to test the property permalinkUrl
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property projects (base name: "projects")', function() {
      // uncomment below and update the code to test the property projects
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

    it('should have the property workspace (base name: "workspace")', function() {
      // uncomment below and update the code to test the property workspace
      //var instance = new Asana.TaskResponse();
      //expect(instance).to.be();
    });

  });

}));
