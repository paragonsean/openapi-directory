/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.StoryResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StoryResponse', function() {
    it('should create an instance of StoryResponse', function() {
      // uncomment below and update the code to test StoryResponse
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be.a(Asana.StoryResponse);
    });

    it('should have the property gid (base name: "gid")', function() {
      // uncomment below and update the code to test the property gid
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property resourceType (base name: "resource_type")', function() {
      // uncomment below and update the code to test the property resourceType
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property htmlText (base name: "html_text")', function() {
      // uncomment below and update the code to test the property htmlText
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property isPinned (base name: "is_pinned")', function() {
      // uncomment below and update the code to test the property isPinned
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property resourceSubtype (base name: "resource_subtype")', function() {
      // uncomment below and update the code to test the property resourceSubtype
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property stickerName (base name: "sticker_name")', function() {
      // uncomment below and update the code to test the property stickerName
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property assignee (base name: "assignee")', function() {
      // uncomment below and update the code to test the property assignee
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "created_by")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property customField (base name: "custom_field")', function() {
      // uncomment below and update the code to test the property customField
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property dependency (base name: "dependency")', function() {
      // uncomment below and update the code to test the property dependency
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property duplicateOf (base name: "duplicate_of")', function() {
      // uncomment below and update the code to test the property duplicateOf
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property duplicatedFrom (base name: "duplicated_from")', function() {
      // uncomment below and update the code to test the property duplicatedFrom
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property follower (base name: "follower")', function() {
      // uncomment below and update the code to test the property follower
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property hearted (base name: "hearted")', function() {
      // uncomment below and update the code to test the property hearted
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property hearts (base name: "hearts")', function() {
      // uncomment below and update the code to test the property hearts
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property isEditable (base name: "is_editable")', function() {
      // uncomment below and update the code to test the property isEditable
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property isEdited (base name: "is_edited")', function() {
      // uncomment below and update the code to test the property isEdited
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property liked (base name: "liked")', function() {
      // uncomment below and update the code to test the property liked
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property likes (base name: "likes")', function() {
      // uncomment below and update the code to test the property likes
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newApprovalStatus (base name: "new_approval_status")', function() {
      // uncomment below and update the code to test the property newApprovalStatus
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newDateValue (base name: "new_date_value")', function() {
      // uncomment below and update the code to test the property newDateValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newDates (base name: "new_dates")', function() {
      // uncomment below and update the code to test the property newDates
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newEnumValue (base name: "new_enum_value")', function() {
      // uncomment below and update the code to test the property newEnumValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newMultiEnumValues (base name: "new_multi_enum_values")', function() {
      // uncomment below and update the code to test the property newMultiEnumValues
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newName (base name: "new_name")', function() {
      // uncomment below and update the code to test the property newName
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newNumberValue (base name: "new_number_value")', function() {
      // uncomment below and update the code to test the property newNumberValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newPeopleValue (base name: "new_people_value")', function() {
      // uncomment below and update the code to test the property newPeopleValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newResourceSubtype (base name: "new_resource_subtype")', function() {
      // uncomment below and update the code to test the property newResourceSubtype
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newSection (base name: "new_section")', function() {
      // uncomment below and update the code to test the property newSection
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property newTextValue (base name: "new_text_value")', function() {
      // uncomment below and update the code to test the property newTextValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property numHearts (base name: "num_hearts")', function() {
      // uncomment below and update the code to test the property numHearts
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property numLikes (base name: "num_likes")', function() {
      // uncomment below and update the code to test the property numLikes
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldApprovalStatus (base name: "old_approval_status")', function() {
      // uncomment below and update the code to test the property oldApprovalStatus
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldDateValue (base name: "old_date_value")', function() {
      // uncomment below and update the code to test the property oldDateValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldDates (base name: "old_dates")', function() {
      // uncomment below and update the code to test the property oldDates
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldEnumValue (base name: "old_enum_value")', function() {
      // uncomment below and update the code to test the property oldEnumValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldMultiEnumValues (base name: "old_multi_enum_values")', function() {
      // uncomment below and update the code to test the property oldMultiEnumValues
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldName (base name: "old_name")', function() {
      // uncomment below and update the code to test the property oldName
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldNumberValue (base name: "old_number_value")', function() {
      // uncomment below and update the code to test the property oldNumberValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldPeopleValue (base name: "old_people_value")', function() {
      // uncomment below and update the code to test the property oldPeopleValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldResourceSubtype (base name: "old_resource_subtype")', function() {
      // uncomment below and update the code to test the property oldResourceSubtype
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldSection (base name: "old_section")', function() {
      // uncomment below and update the code to test the property oldSection
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property oldTextValue (base name: "old_text_value")', function() {
      // uncomment below and update the code to test the property oldTextValue
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property previews (base name: "previews")', function() {
      // uncomment below and update the code to test the property previews
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property project (base name: "project")', function() {
      // uncomment below and update the code to test the property project
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property story (base name: "story")', function() {
      // uncomment below and update the code to test the property story
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property tag (base name: "tag")', function() {
      // uncomment below and update the code to test the property tag
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "target")', function() {
      // uncomment below and update the code to test the property target
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property task (base name: "task")', function() {
      // uncomment below and update the code to test the property task
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new Asana.StoryResponse();
      //expect(instance).to.be();
    });

  });

}));
