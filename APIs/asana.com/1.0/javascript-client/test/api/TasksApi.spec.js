/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.TasksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TasksApi', function() {
    describe('addDependenciesForTask', function() {
      it('should call addDependenciesForTask successfully', function(done) {
        //uncomment below and update the code to test addDependenciesForTask
        //instance.addDependenciesForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addDependentsForTask', function() {
      it('should call addDependentsForTask successfully', function(done) {
        //uncomment below and update the code to test addDependentsForTask
        //instance.addDependentsForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFollowersForTask', function() {
      it('should call addFollowersForTask successfully', function(done) {
        //uncomment below and update the code to test addFollowersForTask
        //instance.addFollowersForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addProjectForTask', function() {
      it('should call addProjectForTask successfully', function(done) {
        //uncomment below and update the code to test addProjectForTask
        //instance.addProjectForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTagForTask', function() {
      it('should call addTagForTask successfully', function(done) {
        //uncomment below and update the code to test addTagForTask
        //instance.addTagForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSubtaskForTask', function() {
      it('should call createSubtaskForTask successfully', function(done) {
        //uncomment below and update the code to test createSubtaskForTask
        //instance.createSubtaskForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTask', function() {
      it('should call createTask successfully', function(done) {
        //uncomment below and update the code to test createTask
        //instance.createTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTask', function() {
      it('should call deleteTask successfully', function(done) {
        //uncomment below and update the code to test deleteTask
        //instance.deleteTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('duplicateTask', function() {
      it('should call duplicateTask successfully', function(done) {
        //uncomment below and update the code to test duplicateTask
        //instance.duplicateTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDependenciesForTask', function() {
      it('should call getDependenciesForTask successfully', function(done) {
        //uncomment below and update the code to test getDependenciesForTask
        //instance.getDependenciesForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDependentsForTask', function() {
      it('should call getDependentsForTask successfully', function(done) {
        //uncomment below and update the code to test getDependentsForTask
        //instance.getDependentsForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubtasksForTask', function() {
      it('should call getSubtasksForTask successfully', function(done) {
        //uncomment below and update the code to test getSubtasksForTask
        //instance.getSubtasksForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTask', function() {
      it('should call getTask successfully', function(done) {
        //uncomment below and update the code to test getTask
        //instance.getTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTasks', function() {
      it('should call getTasks successfully', function(done) {
        //uncomment below and update the code to test getTasks
        //instance.getTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTasksForProject', function() {
      it('should call getTasksForProject successfully', function(done) {
        //uncomment below and update the code to test getTasksForProject
        //instance.getTasksForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTasksForSection', function() {
      it('should call getTasksForSection successfully', function(done) {
        //uncomment below and update the code to test getTasksForSection
        //instance.getTasksForSection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTasksForTag', function() {
      it('should call getTasksForTag successfully', function(done) {
        //uncomment below and update the code to test getTasksForTag
        //instance.getTasksForTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTasksForUserTaskList', function() {
      it('should call getTasksForUserTaskList successfully', function(done) {
        //uncomment below and update the code to test getTasksForUserTaskList
        //instance.getTasksForUserTaskList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeDependenciesForTask', function() {
      it('should call removeDependenciesForTask successfully', function(done) {
        //uncomment below and update the code to test removeDependenciesForTask
        //instance.removeDependenciesForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeDependentsForTask', function() {
      it('should call removeDependentsForTask successfully', function(done) {
        //uncomment below and update the code to test removeDependentsForTask
        //instance.removeDependentsForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFollowerForTask', function() {
      it('should call removeFollowerForTask successfully', function(done) {
        //uncomment below and update the code to test removeFollowerForTask
        //instance.removeFollowerForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeProjectForTask', function() {
      it('should call removeProjectForTask successfully', function(done) {
        //uncomment below and update the code to test removeProjectForTask
        //instance.removeProjectForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTagForTask', function() {
      it('should call removeTagForTask successfully', function(done) {
        //uncomment below and update the code to test removeTagForTask
        //instance.removeTagForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchTasksForWorkspace', function() {
      it('should call searchTasksForWorkspace successfully', function(done) {
        //uncomment below and update the code to test searchTasksForWorkspace
        //instance.searchTasksForWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setParentForTask', function() {
      it('should call setParentForTask successfully', function(done) {
        //uncomment below and update the code to test setParentForTask
        //instance.setParentForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTask', function() {
      it('should call updateTask successfully', function(done) {
        //uncomment below and update the code to test updateTask
        //instance.updateTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
