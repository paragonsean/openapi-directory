/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Asana);
  }
}(this, function(expect, Asana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Asana.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('addCustomFieldSettingForProject', function() {
      it('should call addCustomFieldSettingForProject successfully', function(done) {
        //uncomment below and update the code to test addCustomFieldSettingForProject
        //instance.addCustomFieldSettingForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFollowersForProject', function() {
      it('should call addFollowersForProject successfully', function(done) {
        //uncomment below and update the code to test addFollowersForProject
        //instance.addFollowersForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addMembersForProject', function() {
      it('should call addMembersForProject successfully', function(done) {
        //uncomment below and update the code to test addMembersForProject
        //instance.addMembersForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProjectForTeam', function() {
      it('should call createProjectForTeam successfully', function(done) {
        //uncomment below and update the code to test createProjectForTeam
        //instance.createProjectForTeam(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProjectForWorkspace', function() {
      it('should call createProjectForWorkspace successfully', function(done) {
        //uncomment below and update the code to test createProjectForWorkspace
        //instance.createProjectForWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('duplicateProject', function() {
      it('should call duplicateProject successfully', function(done) {
        //uncomment below and update the code to test duplicateProject
        //instance.duplicateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProject', function() {
      it('should call getProject successfully', function(done) {
        //uncomment below and update the code to test getProject
        //instance.getProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjects', function() {
      it('should call getProjects successfully', function(done) {
        //uncomment below and update the code to test getProjects
        //instance.getProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectsForTask', function() {
      it('should call getProjectsForTask successfully', function(done) {
        //uncomment below and update the code to test getProjectsForTask
        //instance.getProjectsForTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectsForTeam', function() {
      it('should call getProjectsForTeam successfully', function(done) {
        //uncomment below and update the code to test getProjectsForTeam
        //instance.getProjectsForTeam(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProjectsForWorkspace', function() {
      it('should call getProjectsForWorkspace successfully', function(done) {
        //uncomment below and update the code to test getProjectsForWorkspace
        //instance.getProjectsForWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaskCountsForProject', function() {
      it('should call getTaskCountsForProject successfully', function(done) {
        //uncomment below and update the code to test getTaskCountsForProject
        //instance.getTaskCountsForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSaveAsTemplate', function() {
      it('should call projectSaveAsTemplate successfully', function(done) {
        //uncomment below and update the code to test projectSaveAsTemplate
        //instance.projectSaveAsTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeCustomFieldSettingForProject', function() {
      it('should call removeCustomFieldSettingForProject successfully', function(done) {
        //uncomment below and update the code to test removeCustomFieldSettingForProject
        //instance.removeCustomFieldSettingForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFollowersForProject', function() {
      it('should call removeFollowersForProject successfully', function(done) {
        //uncomment below and update the code to test removeFollowersForProject
        //instance.removeFollowersForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeMembersForProject', function() {
      it('should call removeMembersForProject successfully', function(done) {
        //uncomment below and update the code to test removeMembersForProject
        //instance.removeMembersForProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
