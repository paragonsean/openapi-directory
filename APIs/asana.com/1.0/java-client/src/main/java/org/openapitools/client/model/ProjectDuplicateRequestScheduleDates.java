/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A dictionary of options to auto-shift dates. &#x60;task_dates&#x60; must be included to use this option. Requires either &#x60;start_on&#x60; or &#x60;due_on&#x60;, but not both.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectDuplicateRequestScheduleDates {
  public static final String SERIALIZED_NAME_DUE_ON = "due_on";
  @SerializedName(SERIALIZED_NAME_DUE_ON)
  private String dueOn;

  public static final String SERIALIZED_NAME_SHOULD_SKIP_WEEKENDS = "should_skip_weekends";
  @SerializedName(SERIALIZED_NAME_SHOULD_SKIP_WEEKENDS)
  private Boolean shouldSkipWeekends;

  public static final String SERIALIZED_NAME_START_ON = "start_on";
  @SerializedName(SERIALIZED_NAME_START_ON)
  private String startOn;

  public ProjectDuplicateRequestScheduleDates() {
  }

  public ProjectDuplicateRequestScheduleDates dueOn(String dueOn) {
    this.dueOn = dueOn;
    return this;
  }

  /**
   * Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.
   * @return dueOn
   */
  @javax.annotation.Nullable
  public String getDueOn() {
    return dueOn;
  }

  public void setDueOn(String dueOn) {
    this.dueOn = dueOn;
  }


  public ProjectDuplicateRequestScheduleDates shouldSkipWeekends(Boolean shouldSkipWeekends) {
    this.shouldSkipWeekends = shouldSkipWeekends;
    return this;
  }

  /**
   * Determines if the auto-shifted dates should skip weekends.
   * @return shouldSkipWeekends
   */
  @javax.annotation.Nonnull
  public Boolean getShouldSkipWeekends() {
    return shouldSkipWeekends;
  }

  public void setShouldSkipWeekends(Boolean shouldSkipWeekends) {
    this.shouldSkipWeekends = shouldSkipWeekends;
  }


  public ProjectDuplicateRequestScheduleDates startOn(String startOn) {
    this.startOn = startOn;
    return this;
  }

  /**
   * Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.
   * @return startOn
   */
  @javax.annotation.Nullable
  public String getStartOn() {
    return startOn;
  }

  public void setStartOn(String startOn) {
    this.startOn = startOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectDuplicateRequestScheduleDates projectDuplicateRequestScheduleDates = (ProjectDuplicateRequestScheduleDates) o;
    return Objects.equals(this.dueOn, projectDuplicateRequestScheduleDates.dueOn) &&
        Objects.equals(this.shouldSkipWeekends, projectDuplicateRequestScheduleDates.shouldSkipWeekends) &&
        Objects.equals(this.startOn, projectDuplicateRequestScheduleDates.startOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dueOn, shouldSkipWeekends, startOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectDuplicateRequestScheduleDates {\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    shouldSkipWeekends: ").append(toIndentedString(shouldSkipWeekends)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("due_on");
    openapiFields.add("should_skip_weekends");
    openapiFields.add("start_on");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("should_skip_weekends");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectDuplicateRequestScheduleDates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectDuplicateRequestScheduleDates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectDuplicateRequestScheduleDates is not found in the empty JSON string", ProjectDuplicateRequestScheduleDates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectDuplicateRequestScheduleDates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectDuplicateRequestScheduleDates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectDuplicateRequestScheduleDates.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("due_on") != null && !jsonObj.get("due_on").isJsonNull()) && !jsonObj.get("due_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_on").toString()));
      }
      if ((jsonObj.get("start_on") != null && !jsonObj.get("start_on").isJsonNull()) && !jsonObj.get("start_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_on").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectDuplicateRequestScheduleDates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectDuplicateRequestScheduleDates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectDuplicateRequestScheduleDates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectDuplicateRequestScheduleDates.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectDuplicateRequestScheduleDates>() {
           @Override
           public void write(JsonWriter out, ProjectDuplicateRequestScheduleDates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectDuplicateRequestScheduleDates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectDuplicateRequestScheduleDates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectDuplicateRequestScheduleDates
   * @throws IOException if the JSON string is invalid with respect to ProjectDuplicateRequestScheduleDates
   */
  public static ProjectDuplicateRequestScheduleDates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectDuplicateRequestScheduleDates.class);
  }

  /**
   * Convert an instance of ProjectDuplicateRequestScheduleDates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

