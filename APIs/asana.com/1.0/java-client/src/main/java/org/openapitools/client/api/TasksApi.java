/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddDependenciesForTaskRequest;
import org.openapitools.client.model.AddDependentsForTaskRequest;
import org.openapitools.client.model.AddFollowersRequest;
import org.openapitools.client.model.AddProjectForTaskRequest;
import org.openapitools.client.model.AddTagForTaskRequest;
import org.openapitools.client.model.CreateTask201Response;
import org.openapitools.client.model.CreateTaskRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.DuplicateTaskRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetJob200Response;
import org.openapitools.client.model.GetTasksForProject200Response;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RemoveFollowerForTaskRequest;
import org.openapitools.client.model.RemoveProjectForTaskRequest;
import org.openapitools.client.model.RemoveTagForTaskRequest;
import org.openapitools.client.model.SetParentForTaskRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addDependenciesForTask
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to set as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDependenciesForTaskCall(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDependenciesForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addDependencies"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDependenciesForTaskValidateBeforeCall(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addDependenciesForTask(Async)");
        }

        // verify the required parameter 'addDependenciesForTaskRequest' is set
        if (addDependenciesForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'addDependenciesForTaskRequest' when calling addDependenciesForTask(Async)");
        }

        return addDependenciesForTaskCall(taskGid, addDependenciesForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Set dependencies for a task
     * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to set as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response addDependenciesForTask(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = addDependenciesForTaskWithHttpInfo(taskGid, addDependenciesForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Set dependencies for a task
     * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to set as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> addDependenciesForTaskWithHttpInfo(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addDependenciesForTaskValidateBeforeCall(taskGid, addDependenciesForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set dependencies for a task (asynchronously)
     * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to set as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependencies on the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDependenciesForTaskAsync(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDependenciesForTaskValidateBeforeCall(taskGid, addDependenciesForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addDependentsForTask
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to add as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDependentsForTaskCall(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDependentsForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addDependents"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDependentsForTaskValidateBeforeCall(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addDependentsForTask(Async)");
        }

        // verify the required parameter 'addDependentsForTaskRequest' is set
        if (addDependentsForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'addDependentsForTaskRequest' when calling addDependentsForTask(Async)");
        }

        return addDependentsForTaskCall(taskGid, addDependentsForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Set dependents for a task
     * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to add as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response addDependentsForTask(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = addDependentsForTaskWithHttpInfo(taskGid, addDependentsForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Set dependents for a task
     * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to add as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> addDependentsForTaskWithHttpInfo(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addDependentsForTaskValidateBeforeCall(taskGid, addDependentsForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set dependents for a task (asynchronously)
     * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to add as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully set the specified dependents on the given task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDependentsForTaskAsync(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDependentsForTaskValidateBeforeCall(taskGid, addDependentsForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addFollowersForTask
     * @param taskGid The task to operate on. (required)
     * @param addFollowersRequest The followers to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFollowersForTaskCall(String taskGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFollowersRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addFollowers"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFollowersForTaskValidateBeforeCall(String taskGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addFollowersForTask(Async)");
        }

        // verify the required parameter 'addFollowersRequest' is set
        if (addFollowersRequest == null) {
            throw new ApiException("Missing the required parameter 'addFollowersRequest' when calling addFollowersForTask(Async)");
        }

        return addFollowersForTaskCall(taskGid, addFollowersRequest, optPretty, optFields, _callback);

    }

    /**
     * Add followers to a task
     * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * @param taskGid The task to operate on. (required)
     * @param addFollowersRequest The followers to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response addFollowersForTask(String taskGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = addFollowersForTaskWithHttpInfo(taskGid, addFollowersRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Add followers to a task
     * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * @param taskGid The task to operate on. (required)
     * @param addFollowersRequest The followers to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> addFollowersForTaskWithHttpInfo(String taskGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addFollowersForTaskValidateBeforeCall(taskGid, addFollowersRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add followers to a task (asynchronously)
     * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * @param taskGid The task to operate on. (required)
     * @param addFollowersRequest The followers to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified followers to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFollowersForTaskAsync(String taskGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFollowersForTaskValidateBeforeCall(taskGid, addFollowersRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addProjectForTask
     * @param taskGid The task to operate on. (required)
     * @param addProjectForTaskRequest The project to add the task to. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectForTaskCall(String taskGid, AddProjectForTaskRequest addProjectForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addProjectForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addProject"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectForTaskValidateBeforeCall(String taskGid, AddProjectForTaskRequest addProjectForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addProjectForTask(Async)");
        }

        // verify the required parameter 'addProjectForTaskRequest' is set
        if (addProjectForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'addProjectForTaskRequest' when calling addProjectForTask(Async)");
        }

        return addProjectForTaskCall(taskGid, addProjectForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Add a project to a task
     * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  &#x60;addProject&#x60; can also be used to reorder a task within a project or section that already contains it.  At most one of &#x60;insert_before&#x60;, &#x60;insert_after&#x60;, or &#x60;section&#x60; should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify &#x60;insert_before&#x60; or &#x60;insert_after&#x60; and a task within the section to anchor the position of this task.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param addProjectForTaskRequest The project to add the task to. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response addProjectForTask(String taskGid, AddProjectForTaskRequest addProjectForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = addProjectForTaskWithHttpInfo(taskGid, addProjectForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Add a project to a task
     * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  &#x60;addProject&#x60; can also be used to reorder a task within a project or section that already contains it.  At most one of &#x60;insert_before&#x60;, &#x60;insert_after&#x60;, or &#x60;section&#x60; should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify &#x60;insert_before&#x60; or &#x60;insert_after&#x60; and a task within the section to anchor the position of this task.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param addProjectForTaskRequest The project to add the task to. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> addProjectForTaskWithHttpInfo(String taskGid, AddProjectForTaskRequest addProjectForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addProjectForTaskValidateBeforeCall(taskGid, addProjectForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a project to a task (asynchronously)
     * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  &#x60;addProject&#x60; can also be used to reorder a task within a project or section that already contains it.  At most one of &#x60;insert_before&#x60;, &#x60;insert_after&#x60;, or &#x60;section&#x60; should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify &#x60;insert_before&#x60; or &#x60;insert_after&#x60; and a task within the section to anchor the position of this task.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param addProjectForTaskRequest The project to add the task to. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified project to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectForTaskAsync(String taskGid, AddProjectForTaskRequest addProjectForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectForTaskValidateBeforeCall(taskGid, addProjectForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTagForTask
     * @param taskGid The task to operate on. (required)
     * @param addTagForTaskRequest The tag to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagForTaskCall(String taskGid, AddTagForTaskRequest addTagForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/addTag"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagForTaskValidateBeforeCall(String taskGid, AddTagForTaskRequest addTagForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling addTagForTask(Async)");
        }

        // verify the required parameter 'addTagForTaskRequest' is set
        if (addTagForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'addTagForTaskRequest' when calling addTagForTask(Async)");
        }

        return addTagForTaskCall(taskGid, addTagForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Add a tag to a task
     * Adds a tag to a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param addTagForTaskRequest The tag to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response addTagForTask(String taskGid, AddTagForTaskRequest addTagForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = addTagForTaskWithHttpInfo(taskGid, addTagForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Add a tag to a task
     * Adds a tag to a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param addTagForTaskRequest The tag to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> addTagForTaskWithHttpInfo(String taskGid, AddTagForTaskRequest addTagForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addTagForTaskValidateBeforeCall(taskGid, addTagForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a tag to a task (asynchronously)
     * Adds a tag to a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param addTagForTaskRequest The tag to add to the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the specified tag to the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagForTaskAsync(String taskGid, AddTagForTaskRequest addTagForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagForTaskValidateBeforeCall(taskGid, addTagForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubtaskForTask
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The new subtask to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubtaskForTaskCall(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/subtasks"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubtaskForTaskValidateBeforeCall(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling createSubtaskForTask(Async)");
        }

        // verify the required parameter 'createTaskRequest' is set
        if (createTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskRequest' when calling createSubtaskForTask(Async)");
        }

        return createSubtaskForTaskCall(taskGid, createTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Create a subtask
     * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The new subtask to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response createSubtaskForTask(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = createSubtaskForTaskWithHttpInfo(taskGid, createTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Create a subtask
     * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The new subtask to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> createSubtaskForTaskWithHttpInfo(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createSubtaskForTaskValidateBeforeCall(taskGid, createTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a subtask (asynchronously)
     * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The new subtask to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubtaskForTaskAsync(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubtaskForTaskValidateBeforeCall(taskGid, createTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTask
     * @param createTaskRequest The task to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskCall(CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskValidateBeforeCall(CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTaskRequest' is set
        if (createTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskRequest' when calling createTask(Async)");
        }

        return createTaskCall(createTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Create a task
     * Creating a new task is as easy as POSTing to the &#x60;/tasks&#x60; endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify &#x60;projects&#x60; or a &#x60;parent&#x60; task instead.
     * @param createTaskRequest The task to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response createTask(CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = createTaskWithHttpInfo(createTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Create a task
     * Creating a new task is as easy as POSTing to the &#x60;/tasks&#x60; endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify &#x60;projects&#x60; or a &#x60;parent&#x60; task instead.
     * @param createTaskRequest The task to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> createTaskWithHttpInfo(CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createTaskValidateBeforeCall(createTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a task (asynchronously)
     * Creating a new task is as easy as POSTing to the &#x60;/tasks&#x60; endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify &#x60;projects&#x60; or a &#x60;parent&#x60; task instead.
     * @param createTaskRequest The task to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskAsync(CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskValidateBeforeCall(createTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTask
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskCall(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskValidateBeforeCall(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling deleteTask(Async)");
        }

        return deleteTaskCall(taskGid, optPretty, optFields, _callback);

    }

    /**
     * Delete a task
     * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response deleteTask(String taskGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = deleteTaskWithHttpInfo(taskGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Delete a task
     * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> deleteTaskWithHttpInfo(String taskGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(taskGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a task (asynchronously)
     * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTaskAsync(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(taskGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for duplicateTask
     * @param taskGid The task to operate on. (required)
     * @param duplicateTaskRequest Describes the duplicate&#39;s name and the fields that will be duplicated. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateTaskCall(String taskGid, DuplicateTaskRequest duplicateTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = duplicateTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/duplicate"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateTaskValidateBeforeCall(String taskGid, DuplicateTaskRequest duplicateTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling duplicateTask(Async)");
        }

        // verify the required parameter 'duplicateTaskRequest' is set
        if (duplicateTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'duplicateTaskRequest' when calling duplicateTask(Async)");
        }

        return duplicateTaskCall(taskGid, duplicateTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Duplicate a task
     * Creates and returns a job that will asynchronously handle the duplication.
     * @param taskGid The task to operate on. (required)
     * @param duplicateTaskRequest Describes the duplicate&#39;s name and the fields that will be duplicated. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return GetJob200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetJob200Response duplicateTask(String taskGid, DuplicateTaskRequest duplicateTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<GetJob200Response> localVarResp = duplicateTaskWithHttpInfo(taskGid, duplicateTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Duplicate a task
     * Creates and returns a job that will asynchronously handle the duplication.
     * @param taskGid The task to operate on. (required)
     * @param duplicateTaskRequest Describes the duplicate&#39;s name and the fields that will be duplicated. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;GetJob200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJob200Response> duplicateTaskWithHttpInfo(String taskGid, DuplicateTaskRequest duplicateTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = duplicateTaskValidateBeforeCall(taskGid, duplicateTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GetJob200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Duplicate a task (asynchronously)
     * Creates and returns a job that will asynchronously handle the duplication.
     * @param taskGid The task to operate on. (required)
     * @param duplicateTaskRequest Describes the duplicate&#39;s name and the fields that will be duplicated. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created the job to handle duplication. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateTaskAsync(String taskGid, DuplicateTaskRequest duplicateTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GetJob200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateTaskValidateBeforeCall(taskGid, duplicateTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GetJob200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDependenciesForTask
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDependenciesForTaskCall(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/dependencies"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDependenciesForTaskValidateBeforeCall(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getDependenciesForTask(Async)");
        }

        return getDependenciesForTaskCall(taskGid, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get dependencies from a task
     * Returns the compact representations of all of the dependencies of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getDependenciesForTask(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getDependenciesForTaskWithHttpInfo(taskGid, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get dependencies from a task
     * Returns the compact representations of all of the dependencies of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getDependenciesForTaskWithHttpInfo(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getDependenciesForTaskValidateBeforeCall(taskGid, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dependencies from a task (asynchronously)
     * Returns the compact representations of all of the dependencies of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s dependencies. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDependenciesForTaskAsync(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDependenciesForTaskValidateBeforeCall(taskGid, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDependentsForTask
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDependentsForTaskCall(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/dependents"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDependentsForTaskValidateBeforeCall(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getDependentsForTask(Async)");
        }

        return getDependentsForTaskCall(taskGid, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get dependents from a task
     * Returns the compact representations of all of the dependents of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getDependentsForTask(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getDependentsForTaskWithHttpInfo(taskGid, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get dependents from a task
     * Returns the compact representations of all of the dependents of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getDependentsForTaskWithHttpInfo(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getDependentsForTaskValidateBeforeCall(taskGid, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get dependents from a task (asynchronously)
     * Returns the compact representations of all of the dependents of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified dependents of the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDependentsForTaskAsync(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDependentsForTaskValidateBeforeCall(taskGid, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubtasksForTask
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubtasksForTaskCall(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/subtasks"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubtasksForTaskValidateBeforeCall(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getSubtasksForTask(Async)");
        }

        return getSubtasksForTaskCall(taskGid, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get subtasks from a task
     * Returns a compact representation of all of the subtasks of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getSubtasksForTask(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getSubtasksForTaskWithHttpInfo(taskGid, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get subtasks from a task
     * Returns a compact representation of all of the subtasks of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getSubtasksForTaskWithHttpInfo(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getSubtasksForTaskValidateBeforeCall(taskGid, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subtasks from a task (asynchronously)
     * Returns a compact representation of all of the subtasks of a task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task&#39;s subtasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubtasksForTaskAsync(String taskGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubtasksForTaskValidateBeforeCall(taskGid, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTask
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskCall(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskValidateBeforeCall(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling getTask(Async)");
        }

        return getTaskCall(taskGid, optPretty, optFields, _callback);

    }

    /**
     * Get a task
     * Returns the complete task record for a single task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response getTask(String taskGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = getTaskWithHttpInfo(taskGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Get a task
     * Returns the complete task record for a single task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> getTaskWithHttpInfo(String taskGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getTaskValidateBeforeCall(taskGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a task (asynchronously)
     * Returns the complete task record for a single task.
     * @param taskGid The task to operate on. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskAsync(String taskGid, Boolean optPretty, List<String> optFields, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskValidateBeforeCall(taskGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasks
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param assignee The assignee to filter tasks on. If searching for unassigned tasks, assignee.any &#x3D; null can be specified. *Note: If you specify &#x60;assignee&#x60;, you must also specify the &#x60;workspace&#x60; to filter on.* (optional)
     * @param project The project to filter tasks on. (optional)
     * @param section The section to filter tasks on. *Note: Currently, this is only supported in board views.* (optional)
     * @param workspace The workspace to filter tasks on. *Note: If you specify &#x60;workspace&#x60;, you must also specify the &#x60;assignee&#x60; to filter on.* (optional)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. (optional)
     * @param modifiedSince Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksCall(Boolean optPretty, List<String> optFields, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (section != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("section", section));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (completedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_since", completedSince));
        }

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksValidateBeforeCall(Boolean optPretty, List<String> optFields, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince, final ApiCallback _callback) throws ApiException {
        return getTasksCall(optPretty, optFields, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, _callback);

    }

    /**
     * Get multiple tasks
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a &#x60;project&#x60; or &#x60;tag&#x60; if you do not specify &#x60;assignee&#x60; and &#x60;workspace&#x60;.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param assignee The assignee to filter tasks on. If searching for unassigned tasks, assignee.any &#x3D; null can be specified. *Note: If you specify &#x60;assignee&#x60;, you must also specify the &#x60;workspace&#x60; to filter on.* (optional)
     * @param project The project to filter tasks on. (optional)
     * @param section The section to filter tasks on. *Note: Currently, this is only supported in board views.* (optional)
     * @param workspace The workspace to filter tasks on. *Note: If you specify &#x60;workspace&#x60;, you must also specify the &#x60;assignee&#x60; to filter on.* (optional)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. (optional)
     * @param modifiedSince Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.* (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getTasks(Boolean optPretty, List<String> optFields, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getTasksWithHttpInfo(optPretty, optFields, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince);
        return localVarResp.getData();
    }

    /**
     * Get multiple tasks
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a &#x60;project&#x60; or &#x60;tag&#x60; if you do not specify &#x60;assignee&#x60; and &#x60;workspace&#x60;.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param assignee The assignee to filter tasks on. If searching for unassigned tasks, assignee.any &#x3D; null can be specified. *Note: If you specify &#x60;assignee&#x60;, you must also specify the &#x60;workspace&#x60; to filter on.* (optional)
     * @param project The project to filter tasks on. (optional)
     * @param section The section to filter tasks on. *Note: Currently, this is only supported in board views.* (optional)
     * @param workspace The workspace to filter tasks on. *Note: If you specify &#x60;workspace&#x60;, you must also specify the &#x60;assignee&#x60; to filter on.* (optional)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. (optional)
     * @param modifiedSince Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.* (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getTasksWithHttpInfo(Boolean optPretty, List<String> optFields, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince) throws ApiException {
        okhttp3.Call localVarCall = getTasksValidateBeforeCall(optPretty, optFields, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multiple tasks (asynchronously)
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a &#x60;project&#x60; or &#x60;tag&#x60; if you do not specify &#x60;assignee&#x60; and &#x60;workspace&#x60;.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param assignee The assignee to filter tasks on. If searching for unassigned tasks, assignee.any &#x3D; null can be specified. *Note: If you specify &#x60;assignee&#x60;, you must also specify the &#x60;workspace&#x60; to filter on.* (optional)
     * @param project The project to filter tasks on. (optional)
     * @param section The section to filter tasks on. *Note: Currently, this is only supported in board views.* (optional)
     * @param workspace The workspace to filter tasks on. *Note: If you specify &#x60;workspace&#x60;, you must also specify the &#x60;assignee&#x60; to filter on.* (optional)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. (optional)
     * @param modifiedSince Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved requested tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksAsync(Boolean optPretty, List<String> optFields, Integer limit, String offset, String assignee, String project, String section, String workspace, OffsetDateTime completedSince, OffsetDateTime modifiedSince, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksValidateBeforeCall(optPretty, optFields, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksForProject
     * @param projectGid Globally unique identifier for the project. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForProjectCall(String projectGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_gid}/tasks"
            .replace("{" + "project_gid" + "}", localVarApiClient.escapeString(projectGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (completedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_since", completedSince));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksForProjectValidateBeforeCall(String projectGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectGid' is set
        if (projectGid == null) {
            throw new ApiException("Missing the required parameter 'projectGid' when calling getTasksForProject(Async)");
        }

        return getTasksForProjectCall(projectGid, completedSince, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get tasks from a project
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getTasksForProject(String projectGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getTasksForProjectWithHttpInfo(projectGid, completedSince, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get tasks from a project
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getTasksForProjectWithHttpInfo(String projectGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getTasksForProjectValidateBeforeCall(projectGid, completedSince, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks from a project (asynchronously)
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * @param projectGid Globally unique identifier for the project. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested project&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForProjectAsync(String projectGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksForProjectValidateBeforeCall(projectGid, completedSince, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksForSection
     * @param sectionGid The globally unique identifier for the section. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForSectionCall(String sectionGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sections/{section_gid}/tasks"
            .replace("{" + "section_gid" + "}", localVarApiClient.escapeString(sectionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksForSectionValidateBeforeCall(String sectionGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sectionGid' is set
        if (sectionGid == null) {
            throw new ApiException("Missing the required parameter 'sectionGid' when calling getTasksForSection(Async)");
        }

        return getTasksForSectionCall(sectionGid, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get tasks from a section
     * *Board view only*: Returns the compact section records for all tasks within the given section.
     * @param sectionGid The globally unique identifier for the section. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getTasksForSection(String sectionGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getTasksForSectionWithHttpInfo(sectionGid, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get tasks from a section
     * *Board view only*: Returns the compact section records for all tasks within the given section.
     * @param sectionGid The globally unique identifier for the section. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getTasksForSectionWithHttpInfo(String sectionGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getTasksForSectionValidateBeforeCall(sectionGid, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks from a section (asynchronously)
     * *Board view only*: Returns the compact section records for all tasks within the given section.
     * @param sectionGid The globally unique identifier for the section. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForSectionAsync(String sectionGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksForSectionValidateBeforeCall(sectionGid, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksForTag
     * @param tagGid Globally unique identifier for the tag. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForTagCall(String tagGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_gid}/tasks"
            .replace("{" + "tag_gid" + "}", localVarApiClient.escapeString(tagGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksForTagValidateBeforeCall(String tagGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagGid' is set
        if (tagGid == null) {
            throw new ApiException("Missing the required parameter 'tagGid' when calling getTasksForTag(Async)");
        }

        return getTasksForTagCall(tagGid, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get tasks from a tag
     * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * @param tagGid Globally unique identifier for the tag. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getTasksForTag(String tagGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getTasksForTagWithHttpInfo(tagGid, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get tasks from a tag
     * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * @param tagGid Globally unique identifier for the tag. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getTasksForTagWithHttpInfo(String tagGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getTasksForTagValidateBeforeCall(tagGid, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks from a tag (asynchronously)
     * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * @param tagGid Globally unique identifier for the tag. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the tasks associated with the specified tag. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForTagAsync(String tagGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksForTagValidateBeforeCall(tagGid, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTasksForUserTaskList
     * @param userTaskListGid Globally unique identifier for the user task list. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForUserTaskListCall(String userTaskListGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_task_lists/{user_task_list_gid}/tasks"
            .replace("{" + "user_task_list_gid" + "}", localVarApiClient.escapeString(userTaskListGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (completedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_since", completedSince));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksForUserTaskListValidateBeforeCall(String userTaskListGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userTaskListGid' is set
        if (userTaskListGid == null) {
            throw new ApiException("Missing the required parameter 'userTaskListGid' when calling getTasksForUserTaskList(Async)");
        }

        return getTasksForUserTaskListCall(userTaskListGid, completedSince, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get tasks from a user task list
     * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting &#x60;completed_since&#x3D;now&#x60; will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * @param userTaskListGid Globally unique identifier for the user task list. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response getTasksForUserTaskList(String userTaskListGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = getTasksForUserTaskListWithHttpInfo(userTaskListGid, completedSince, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get tasks from a user task list
     * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting &#x60;completed_since&#x3D;now&#x60; will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * @param userTaskListGid Globally unique identifier for the user task list. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> getTasksForUserTaskListWithHttpInfo(String userTaskListGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getTasksForUserTaskListValidateBeforeCall(userTaskListGid, completedSince, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks from a user task list (asynchronously)
     * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting &#x60;completed_since&#x3D;now&#x60; will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * @param userTaskListGid Globally unique identifier for the user task list. (required)
     * @param completedSince Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*.  (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the user task list&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTasksForUserTaskListAsync(String userTaskListGid, String completedSince, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksForUserTaskListValidateBeforeCall(userTaskListGid, completedSince, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeDependenciesForTask
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to unlink as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDependenciesForTaskCall(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDependenciesForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeDependencies"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDependenciesForTaskValidateBeforeCall(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeDependenciesForTask(Async)");
        }

        // verify the required parameter 'addDependenciesForTaskRequest' is set
        if (addDependenciesForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'addDependenciesForTaskRequest' when calling removeDependenciesForTask(Async)");
        }

        return removeDependenciesForTaskCall(taskGid, addDependenciesForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Unlink dependencies from a task
     * Unlinks a set of dependencies from this task.
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to unlink as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response removeDependenciesForTask(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = removeDependenciesForTaskWithHttpInfo(taskGid, addDependenciesForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Unlink dependencies from a task
     * Unlinks a set of dependencies from this task.
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to unlink as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> removeDependenciesForTaskWithHttpInfo(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeDependenciesForTaskValidateBeforeCall(taskGid, addDependenciesForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlink dependencies from a task (asynchronously)
     * Unlinks a set of dependencies from this task.
     * @param taskGid The task to operate on. (required)
     * @param addDependenciesForTaskRequest The list of tasks to unlink as dependencies. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the dependencies from the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDependenciesForTaskAsync(String taskGid, AddDependenciesForTaskRequest addDependenciesForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDependenciesForTaskValidateBeforeCall(taskGid, addDependenciesForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeDependentsForTask
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to remove as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDependentsForTaskCall(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDependentsForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeDependents"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDependentsForTaskValidateBeforeCall(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeDependentsForTask(Async)");
        }

        // verify the required parameter 'addDependentsForTaskRequest' is set
        if (addDependentsForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'addDependentsForTaskRequest' when calling removeDependentsForTask(Async)");
        }

        return removeDependentsForTaskCall(taskGid, addDependentsForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Unlink dependents from a task
     * Unlinks a set of dependents from this task.
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to remove as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response removeDependentsForTask(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = removeDependentsForTaskWithHttpInfo(taskGid, addDependentsForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Unlink dependents from a task
     * Unlinks a set of dependents from this task.
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to remove as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> removeDependentsForTaskWithHttpInfo(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeDependentsForTaskValidateBeforeCall(taskGid, addDependentsForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlink dependents from a task (asynchronously)
     * Unlinks a set of dependents from this task.
     * @param taskGid The task to operate on. (required)
     * @param addDependentsForTaskRequest The list of tasks to remove as dependents. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unlinked the specified tasks as dependents. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDependentsForTaskAsync(String taskGid, AddDependentsForTaskRequest addDependentsForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDependentsForTaskValidateBeforeCall(taskGid, addDependentsForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFollowerForTask
     * @param taskGid The task to operate on. (required)
     * @param removeFollowerForTaskRequest The followers to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFollowerForTaskCall(String taskGid, RemoveFollowerForTaskRequest removeFollowerForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeFollowerForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeFollowers"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFollowerForTaskValidateBeforeCall(String taskGid, RemoveFollowerForTaskRequest removeFollowerForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeFollowerForTask(Async)");
        }

        // verify the required parameter 'removeFollowerForTaskRequest' is set
        if (removeFollowerForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'removeFollowerForTaskRequest' when calling removeFollowerForTask(Async)");
        }

        return removeFollowerForTaskCall(taskGid, removeFollowerForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Remove followers from a task
     * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * @param taskGid The task to operate on. (required)
     * @param removeFollowerForTaskRequest The followers to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response removeFollowerForTask(String taskGid, RemoveFollowerForTaskRequest removeFollowerForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = removeFollowerForTaskWithHttpInfo(taskGid, removeFollowerForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Remove followers from a task
     * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * @param taskGid The task to operate on. (required)
     * @param removeFollowerForTaskRequest The followers to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> removeFollowerForTaskWithHttpInfo(String taskGid, RemoveFollowerForTaskRequest removeFollowerForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeFollowerForTaskValidateBeforeCall(taskGid, removeFollowerForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove followers from a task (asynchronously)
     * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * @param taskGid The task to operate on. (required)
     * @param removeFollowerForTaskRequest The followers to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified followers from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFollowerForTaskAsync(String taskGid, RemoveFollowerForTaskRequest removeFollowerForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFollowerForTaskValidateBeforeCall(taskGid, removeFollowerForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeProjectForTask
     * @param taskGid The task to operate on. (required)
     * @param removeProjectForTaskRequest The project to remove the task from. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProjectForTaskCall(String taskGid, RemoveProjectForTaskRequest removeProjectForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeProjectForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeProject"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProjectForTaskValidateBeforeCall(String taskGid, RemoveProjectForTaskRequest removeProjectForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeProjectForTask(Async)");
        }

        // verify the required parameter 'removeProjectForTaskRequest' is set
        if (removeProjectForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'removeProjectForTaskRequest' when calling removeProjectForTask(Async)");
        }

        return removeProjectForTaskCall(taskGid, removeProjectForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Remove a project from a task
     * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param removeProjectForTaskRequest The project to remove the task from. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response removeProjectForTask(String taskGid, RemoveProjectForTaskRequest removeProjectForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = removeProjectForTaskWithHttpInfo(taskGid, removeProjectForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Remove a project from a task
     * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param removeProjectForTaskRequest The project to remove the task from. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> removeProjectForTaskWithHttpInfo(String taskGid, RemoveProjectForTaskRequest removeProjectForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeProjectForTaskValidateBeforeCall(taskGid, removeProjectForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a project from a task (asynchronously)
     * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param removeProjectForTaskRequest The project to remove the task from. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified project from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProjectForTaskAsync(String taskGid, RemoveProjectForTaskRequest removeProjectForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProjectForTaskValidateBeforeCall(taskGid, removeProjectForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTagForTask
     * @param taskGid The task to operate on. (required)
     * @param removeTagForTaskRequest The tag to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTagForTaskCall(String taskGid, RemoveTagForTaskRequest removeTagForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/removeTag"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagForTaskValidateBeforeCall(String taskGid, RemoveTagForTaskRequest removeTagForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling removeTagForTask(Async)");
        }

        // verify the required parameter 'removeTagForTaskRequest' is set
        if (removeTagForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'removeTagForTaskRequest' when calling removeTagForTask(Async)");
        }

        return removeTagForTaskCall(taskGid, removeTagForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Remove a tag from a task
     * Removes a tag from a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param removeTagForTaskRequest The tag to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response removeTagForTask(String taskGid, RemoveTagForTaskRequest removeTagForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = removeTagForTaskWithHttpInfo(taskGid, removeTagForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Remove a tag from a task
     * Removes a tag from a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param removeTagForTaskRequest The tag to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> removeTagForTaskWithHttpInfo(String taskGid, RemoveTagForTaskRequest removeTagForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeTagForTaskValidateBeforeCall(taskGid, removeTagForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a tag from a task (asynchronously)
     * Removes a tag from a task. Returns an empty data block.
     * @param taskGid The task to operate on. (required)
     * @param removeTagForTaskRequest The tag to remove from the task. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the specified tag from the task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTagForTaskAsync(String taskGid, RemoveTagForTaskRequest removeTagForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagForTaskValidateBeforeCall(taskGid, removeTagForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTasksForWorkspace
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param text Performs full-text search on both task name and description (optional)
     * @param resourceSubtype Filters results by the task&#39;s resource_subtype (optional, default to milestone)
     * @param assigneeAny Comma-separated list of user identifiers (optional)
     * @param assigneeNot Comma-separated list of user identifiers (optional)
     * @param portfoliosAny Comma-separated list of portfolio IDs (optional)
     * @param projectsAny Comma-separated list of project IDs (optional)
     * @param projectsNot Comma-separated list of project IDs (optional)
     * @param projectsAll Comma-separated list of project IDs (optional)
     * @param sectionsAny Comma-separated list of section or column IDs (optional)
     * @param sectionsNot Comma-separated list of section or column IDs (optional)
     * @param sectionsAll Comma-separated list of section or column IDs (optional)
     * @param tagsAny Comma-separated list of tag IDs (optional)
     * @param tagsNot Comma-separated list of tag IDs (optional)
     * @param tagsAll Comma-separated list of tag IDs (optional)
     * @param teamsAny Comma-separated list of team IDs (optional)
     * @param followersNot Comma-separated list of user identifiers (optional)
     * @param createdByAny Comma-separated list of user identifiers (optional)
     * @param createdByNot Comma-separated list of user identifiers (optional)
     * @param assignedByAny Comma-separated list of user identifiers (optional)
     * @param assignedByNot Comma-separated list of user identifiers (optional)
     * @param likedByNot Comma-separated list of user identifiers (optional)
     * @param commentedOnByNot Comma-separated list of user identifiers (optional)
     * @param dueOnBefore ISO 8601 date string (optional)
     * @param dueOnAfter ISO 8601 date string (optional)
     * @param dueOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param dueAtBefore ISO 8601 datetime string (optional)
     * @param dueAtAfter ISO 8601 datetime string (optional)
     * @param startOnBefore ISO 8601 date string (optional)
     * @param startOnAfter ISO 8601 date string (optional)
     * @param startOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdOnBefore ISO 8601 date string (optional)
     * @param createdOnAfter ISO 8601 date string (optional)
     * @param createdOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdAtBefore ISO 8601 datetime string (optional)
     * @param createdAtAfter ISO 8601 datetime string (optional)
     * @param completedOnBefore ISO 8601 date string (optional)
     * @param completedOnAfter ISO 8601 date string (optional)
     * @param completedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param completedAtBefore ISO 8601 datetime string (optional)
     * @param completedAtAfter ISO 8601 datetime string (optional)
     * @param modifiedOnBefore ISO 8601 date string (optional)
     * @param modifiedOnAfter ISO 8601 date string (optional)
     * @param modifiedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param modifiedAtBefore ISO 8601 datetime string (optional)
     * @param modifiedAtAfter ISO 8601 datetime string (optional)
     * @param isBlocking Filter to incomplete tasks with dependents (optional)
     * @param isBlocked Filter to tasks with incomplete dependencies (optional)
     * @param hasAttachment Filter to tasks with attachments (optional)
     * @param completed Filter to completed tasks (optional)
     * @param isSubtask Filter to subtasks (optional)
     * @param sortBy One of &#x60;due_date&#x60;, &#x60;created_at&#x60;, &#x60;completed_at&#x60;, &#x60;likes&#x60;, or &#x60;modified_at&#x60;, defaults to &#x60;modified_at&#x60; (optional, default to modified_at)
     * @param sortAscending Default &#x60;false&#x60; (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTasksForWorkspaceCall(String workspaceGid, Boolean optPretty, List<String> optFields, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/tasks/search"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (resourceSubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_subtype", resourceSubtype));
        }

        if (assigneeAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee.any", assigneeAny));
        }

        if (assigneeNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee.not", assigneeNot));
        }

        if (portfoliosAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolios.any", portfoliosAny));
        }

        if (projectsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projects.any", projectsAny));
        }

        if (projectsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projects.not", projectsNot));
        }

        if (projectsAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projects.all", projectsAll));
        }

        if (sectionsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sections.any", sectionsAny));
        }

        if (sectionsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sections.not", sectionsNot));
        }

        if (sectionsAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sections.all", sectionsAll));
        }

        if (tagsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags.any", tagsAny));
        }

        if (tagsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags.not", tagsNot));
        }

        if (tagsAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags.all", tagsAll));
        }

        if (teamsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teams.any", teamsAny));
        }

        if (followersNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("followers.not", followersNot));
        }

        if (createdByAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by.any", createdByAny));
        }

        if (createdByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by.not", createdByNot));
        }

        if (assignedByAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_by.any", assignedByAny));
        }

        if (assignedByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned_by.not", assignedByNot));
        }

        if (likedByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("liked_by.not", likedByNot));
        }

        if (commentedOnByNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commented_on_by.not", commentedOnByNot));
        }

        if (dueOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_on.before", dueOnBefore));
        }

        if (dueOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_on.after", dueOnAfter));
        }

        if (dueOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_on", dueOn));
        }

        if (dueAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_at.before", dueAtBefore));
        }

        if (dueAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_at.after", dueAtAfter));
        }

        if (startOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_on.before", startOnBefore));
        }

        if (startOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_on.after", startOnAfter));
        }

        if (startOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_on", startOn));
        }

        if (createdOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_on.before", createdOnBefore));
        }

        if (createdOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_on.after", createdOnAfter));
        }

        if (createdOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_on", createdOn));
        }

        if (createdAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.before", createdAtBefore));
        }

        if (createdAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at.after", createdAtAfter));
        }

        if (completedOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_on.before", completedOnBefore));
        }

        if (completedOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_on.after", completedOnAfter));
        }

        if (completedOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_on", completedOn));
        }

        if (completedAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_at.before", completedAtBefore));
        }

        if (completedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_at.after", completedAtAfter));
        }

        if (modifiedOnBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_on.before", modifiedOnBefore));
        }

        if (modifiedOnAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_on.after", modifiedOnAfter));
        }

        if (modifiedOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_on", modifiedOn));
        }

        if (modifiedAtBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at.before", modifiedAtBefore));
        }

        if (modifiedAtAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at.after", modifiedAtAfter));
        }

        if (isBlocking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_blocking", isBlocking));
        }

        if (isBlocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_blocked", isBlocked));
        }

        if (hasAttachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_attachment", hasAttachment));
        }

        if (completed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed", completed));
        }

        if (isSubtask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_subtask", isSubtask));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortAscending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_ascending", sortAscending));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTasksForWorkspaceValidateBeforeCall(String workspaceGid, Boolean optPretty, List<String> optFields, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling searchTasksForWorkspace(Async)");
        }

        return searchTasksForWorkspaceCall(workspaceGid, optPretty, optFields, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, _callback);

    }

    /**
     * Search tasks in a workspace
     * To mirror the functionality of the Asana web app&#39;s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product&#39;s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a &#x60;402 Payment Required&#x60; error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the &#x60;limit&#x60; query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a &#x60;429 Too Many Requests&#x60; response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be &#x60;custom_fields.12345.is_set&#x3D;true&#x60;. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: &#x60;custom_fields.12345.value&#x3D;67890&#x60;.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify &#x60;projects.any&#x60; and &#x60;sections.any&#x60;, you will receive tasks for the project **and** tasks for the section. If you&#39;re looking for only tasks in a section, omit the &#x60;projects.any&#x60; from the request.*
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param text Performs full-text search on both task name and description (optional)
     * @param resourceSubtype Filters results by the task&#39;s resource_subtype (optional, default to milestone)
     * @param assigneeAny Comma-separated list of user identifiers (optional)
     * @param assigneeNot Comma-separated list of user identifiers (optional)
     * @param portfoliosAny Comma-separated list of portfolio IDs (optional)
     * @param projectsAny Comma-separated list of project IDs (optional)
     * @param projectsNot Comma-separated list of project IDs (optional)
     * @param projectsAll Comma-separated list of project IDs (optional)
     * @param sectionsAny Comma-separated list of section or column IDs (optional)
     * @param sectionsNot Comma-separated list of section or column IDs (optional)
     * @param sectionsAll Comma-separated list of section or column IDs (optional)
     * @param tagsAny Comma-separated list of tag IDs (optional)
     * @param tagsNot Comma-separated list of tag IDs (optional)
     * @param tagsAll Comma-separated list of tag IDs (optional)
     * @param teamsAny Comma-separated list of team IDs (optional)
     * @param followersNot Comma-separated list of user identifiers (optional)
     * @param createdByAny Comma-separated list of user identifiers (optional)
     * @param createdByNot Comma-separated list of user identifiers (optional)
     * @param assignedByAny Comma-separated list of user identifiers (optional)
     * @param assignedByNot Comma-separated list of user identifiers (optional)
     * @param likedByNot Comma-separated list of user identifiers (optional)
     * @param commentedOnByNot Comma-separated list of user identifiers (optional)
     * @param dueOnBefore ISO 8601 date string (optional)
     * @param dueOnAfter ISO 8601 date string (optional)
     * @param dueOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param dueAtBefore ISO 8601 datetime string (optional)
     * @param dueAtAfter ISO 8601 datetime string (optional)
     * @param startOnBefore ISO 8601 date string (optional)
     * @param startOnAfter ISO 8601 date string (optional)
     * @param startOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdOnBefore ISO 8601 date string (optional)
     * @param createdOnAfter ISO 8601 date string (optional)
     * @param createdOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdAtBefore ISO 8601 datetime string (optional)
     * @param createdAtAfter ISO 8601 datetime string (optional)
     * @param completedOnBefore ISO 8601 date string (optional)
     * @param completedOnAfter ISO 8601 date string (optional)
     * @param completedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param completedAtBefore ISO 8601 datetime string (optional)
     * @param completedAtAfter ISO 8601 datetime string (optional)
     * @param modifiedOnBefore ISO 8601 date string (optional)
     * @param modifiedOnAfter ISO 8601 date string (optional)
     * @param modifiedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param modifiedAtBefore ISO 8601 datetime string (optional)
     * @param modifiedAtAfter ISO 8601 datetime string (optional)
     * @param isBlocking Filter to incomplete tasks with dependents (optional)
     * @param isBlocked Filter to tasks with incomplete dependencies (optional)
     * @param hasAttachment Filter to tasks with attachments (optional)
     * @param completed Filter to completed tasks (optional)
     * @param isSubtask Filter to subtasks (optional)
     * @param sortBy One of &#x60;due_date&#x60;, &#x60;created_at&#x60;, &#x60;completed_at&#x60;, &#x60;likes&#x60;, or &#x60;modified_at&#x60;, defaults to &#x60;modified_at&#x60; (optional, default to modified_at)
     * @param sortAscending Default &#x60;false&#x60; (optional, default to false)
     * @return GetTasksForProject200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksForProject200Response searchTasksForWorkspace(String workspaceGid, Boolean optPretty, List<String> optFields, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending) throws ApiException {
        ApiResponse<GetTasksForProject200Response> localVarResp = searchTasksForWorkspaceWithHttpInfo(workspaceGid, optPretty, optFields, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending);
        return localVarResp.getData();
    }

    /**
     * Search tasks in a workspace
     * To mirror the functionality of the Asana web app&#39;s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product&#39;s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a &#x60;402 Payment Required&#x60; error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the &#x60;limit&#x60; query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a &#x60;429 Too Many Requests&#x60; response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be &#x60;custom_fields.12345.is_set&#x3D;true&#x60;. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: &#x60;custom_fields.12345.value&#x3D;67890&#x60;.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify &#x60;projects.any&#x60; and &#x60;sections.any&#x60;, you will receive tasks for the project **and** tasks for the section. If you&#39;re looking for only tasks in a section, omit the &#x60;projects.any&#x60; from the request.*
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param text Performs full-text search on both task name and description (optional)
     * @param resourceSubtype Filters results by the task&#39;s resource_subtype (optional, default to milestone)
     * @param assigneeAny Comma-separated list of user identifiers (optional)
     * @param assigneeNot Comma-separated list of user identifiers (optional)
     * @param portfoliosAny Comma-separated list of portfolio IDs (optional)
     * @param projectsAny Comma-separated list of project IDs (optional)
     * @param projectsNot Comma-separated list of project IDs (optional)
     * @param projectsAll Comma-separated list of project IDs (optional)
     * @param sectionsAny Comma-separated list of section or column IDs (optional)
     * @param sectionsNot Comma-separated list of section or column IDs (optional)
     * @param sectionsAll Comma-separated list of section or column IDs (optional)
     * @param tagsAny Comma-separated list of tag IDs (optional)
     * @param tagsNot Comma-separated list of tag IDs (optional)
     * @param tagsAll Comma-separated list of tag IDs (optional)
     * @param teamsAny Comma-separated list of team IDs (optional)
     * @param followersNot Comma-separated list of user identifiers (optional)
     * @param createdByAny Comma-separated list of user identifiers (optional)
     * @param createdByNot Comma-separated list of user identifiers (optional)
     * @param assignedByAny Comma-separated list of user identifiers (optional)
     * @param assignedByNot Comma-separated list of user identifiers (optional)
     * @param likedByNot Comma-separated list of user identifiers (optional)
     * @param commentedOnByNot Comma-separated list of user identifiers (optional)
     * @param dueOnBefore ISO 8601 date string (optional)
     * @param dueOnAfter ISO 8601 date string (optional)
     * @param dueOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param dueAtBefore ISO 8601 datetime string (optional)
     * @param dueAtAfter ISO 8601 datetime string (optional)
     * @param startOnBefore ISO 8601 date string (optional)
     * @param startOnAfter ISO 8601 date string (optional)
     * @param startOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdOnBefore ISO 8601 date string (optional)
     * @param createdOnAfter ISO 8601 date string (optional)
     * @param createdOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdAtBefore ISO 8601 datetime string (optional)
     * @param createdAtAfter ISO 8601 datetime string (optional)
     * @param completedOnBefore ISO 8601 date string (optional)
     * @param completedOnAfter ISO 8601 date string (optional)
     * @param completedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param completedAtBefore ISO 8601 datetime string (optional)
     * @param completedAtAfter ISO 8601 datetime string (optional)
     * @param modifiedOnBefore ISO 8601 date string (optional)
     * @param modifiedOnAfter ISO 8601 date string (optional)
     * @param modifiedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param modifiedAtBefore ISO 8601 datetime string (optional)
     * @param modifiedAtAfter ISO 8601 datetime string (optional)
     * @param isBlocking Filter to incomplete tasks with dependents (optional)
     * @param isBlocked Filter to tasks with incomplete dependencies (optional)
     * @param hasAttachment Filter to tasks with attachments (optional)
     * @param completed Filter to completed tasks (optional)
     * @param isSubtask Filter to subtasks (optional)
     * @param sortBy One of &#x60;due_date&#x60;, &#x60;created_at&#x60;, &#x60;completed_at&#x60;, &#x60;likes&#x60;, or &#x60;modified_at&#x60;, defaults to &#x60;modified_at&#x60; (optional, default to modified_at)
     * @param sortAscending Default &#x60;false&#x60; (optional, default to false)
     * @return ApiResponse&lt;GetTasksForProject200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTasksForProject200Response> searchTasksForWorkspaceWithHttpInfo(String workspaceGid, Boolean optPretty, List<String> optFields, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending) throws ApiException {
        okhttp3.Call localVarCall = searchTasksForWorkspaceValidateBeforeCall(workspaceGid, optPretty, optFields, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, null);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search tasks in a workspace (asynchronously)
     * To mirror the functionality of the Asana web app&#39;s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product&#39;s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a &#x60;402 Payment Required&#x60; error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the &#x60;limit&#x60; query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a &#x60;429 Too Many Requests&#x60; response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be &#x60;custom_fields.12345.is_set&#x3D;true&#x60;. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: &#x60;custom_fields.12345.value&#x3D;67890&#x60;.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify &#x60;projects.any&#x60; and &#x60;sections.any&#x60;, you will receive tasks for the project **and** tasks for the section. If you&#39;re looking for only tasks in a section, omit the &#x60;projects.any&#x60; from the request.*
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param text Performs full-text search on both task name and description (optional)
     * @param resourceSubtype Filters results by the task&#39;s resource_subtype (optional, default to milestone)
     * @param assigneeAny Comma-separated list of user identifiers (optional)
     * @param assigneeNot Comma-separated list of user identifiers (optional)
     * @param portfoliosAny Comma-separated list of portfolio IDs (optional)
     * @param projectsAny Comma-separated list of project IDs (optional)
     * @param projectsNot Comma-separated list of project IDs (optional)
     * @param projectsAll Comma-separated list of project IDs (optional)
     * @param sectionsAny Comma-separated list of section or column IDs (optional)
     * @param sectionsNot Comma-separated list of section or column IDs (optional)
     * @param sectionsAll Comma-separated list of section or column IDs (optional)
     * @param tagsAny Comma-separated list of tag IDs (optional)
     * @param tagsNot Comma-separated list of tag IDs (optional)
     * @param tagsAll Comma-separated list of tag IDs (optional)
     * @param teamsAny Comma-separated list of team IDs (optional)
     * @param followersNot Comma-separated list of user identifiers (optional)
     * @param createdByAny Comma-separated list of user identifiers (optional)
     * @param createdByNot Comma-separated list of user identifiers (optional)
     * @param assignedByAny Comma-separated list of user identifiers (optional)
     * @param assignedByNot Comma-separated list of user identifiers (optional)
     * @param likedByNot Comma-separated list of user identifiers (optional)
     * @param commentedOnByNot Comma-separated list of user identifiers (optional)
     * @param dueOnBefore ISO 8601 date string (optional)
     * @param dueOnAfter ISO 8601 date string (optional)
     * @param dueOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param dueAtBefore ISO 8601 datetime string (optional)
     * @param dueAtAfter ISO 8601 datetime string (optional)
     * @param startOnBefore ISO 8601 date string (optional)
     * @param startOnAfter ISO 8601 date string (optional)
     * @param startOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdOnBefore ISO 8601 date string (optional)
     * @param createdOnAfter ISO 8601 date string (optional)
     * @param createdOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param createdAtBefore ISO 8601 datetime string (optional)
     * @param createdAtAfter ISO 8601 datetime string (optional)
     * @param completedOnBefore ISO 8601 date string (optional)
     * @param completedOnAfter ISO 8601 date string (optional)
     * @param completedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param completedAtBefore ISO 8601 datetime string (optional)
     * @param completedAtAfter ISO 8601 datetime string (optional)
     * @param modifiedOnBefore ISO 8601 date string (optional)
     * @param modifiedOnAfter ISO 8601 date string (optional)
     * @param modifiedOn ISO 8601 date string or &#x60;null&#x60; (optional)
     * @param modifiedAtBefore ISO 8601 datetime string (optional)
     * @param modifiedAtAfter ISO 8601 datetime string (optional)
     * @param isBlocking Filter to incomplete tasks with dependents (optional)
     * @param isBlocked Filter to tasks with incomplete dependencies (optional)
     * @param hasAttachment Filter to tasks with attachments (optional)
     * @param completed Filter to completed tasks (optional)
     * @param isSubtask Filter to subtasks (optional)
     * @param sortBy One of &#x60;due_date&#x60;, &#x60;created_at&#x60;, &#x60;completed_at&#x60;, &#x60;likes&#x60;, or &#x60;modified_at&#x60;, defaults to &#x60;modified_at&#x60; (optional, default to modified_at)
     * @param sortAscending Default &#x60;false&#x60; (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the section&#39;s tasks. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTasksForWorkspaceAsync(String workspaceGid, Boolean optPretty, List<String> optFields, String text, String resourceSubtype, String assigneeAny, String assigneeNot, String portfoliosAny, String projectsAny, String projectsNot, String projectsAll, String sectionsAny, String sectionsNot, String sectionsAll, String tagsAny, String tagsNot, String tagsAll, String teamsAny, String followersNot, String createdByAny, String createdByNot, String assignedByAny, String assignedByNot, String likedByNot, String commentedOnByNot, LocalDate dueOnBefore, LocalDate dueOnAfter, LocalDate dueOn, OffsetDateTime dueAtBefore, OffsetDateTime dueAtAfter, LocalDate startOnBefore, LocalDate startOnAfter, LocalDate startOn, LocalDate createdOnBefore, LocalDate createdOnAfter, LocalDate createdOn, OffsetDateTime createdAtBefore, OffsetDateTime createdAtAfter, LocalDate completedOnBefore, LocalDate completedOnAfter, LocalDate completedOn, OffsetDateTime completedAtBefore, OffsetDateTime completedAtAfter, LocalDate modifiedOnBefore, LocalDate modifiedOnAfter, LocalDate modifiedOn, OffsetDateTime modifiedAtBefore, OffsetDateTime modifiedAtAfter, Boolean isBlocking, Boolean isBlocked, Boolean hasAttachment, Boolean completed, Boolean isSubtask, String sortBy, Boolean sortAscending, final ApiCallback<GetTasksForProject200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTasksForWorkspaceValidateBeforeCall(workspaceGid, optPretty, optFields, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending, _callback);
        Type localVarReturnType = new TypeToken<GetTasksForProject200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setParentForTask
     * @param taskGid The task to operate on. (required)
     * @param setParentForTaskRequest The new parent of the subtask. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setParentForTaskCall(String taskGid, SetParentForTaskRequest setParentForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setParentForTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}/setParent"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setParentForTaskValidateBeforeCall(String taskGid, SetParentForTaskRequest setParentForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling setParentForTask(Async)");
        }

        // verify the required parameter 'setParentForTaskRequest' is set
        if (setParentForTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'setParentForTaskRequest' when calling setParentForTask(Async)");
        }

        return setParentForTaskCall(taskGid, setParentForTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Set the parent of a task
     * parent, or no parent task at all. Returns an empty data block. When using &#x60;insert_before&#x60; and &#x60;insert_after&#x60;, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * @param taskGid The task to operate on. (required)
     * @param setParentForTaskRequest The new parent of the subtask. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response setParentForTask(String taskGid, SetParentForTaskRequest setParentForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = setParentForTaskWithHttpInfo(taskGid, setParentForTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Set the parent of a task
     * parent, or no parent task at all. Returns an empty data block. When using &#x60;insert_before&#x60; and &#x60;insert_after&#x60;, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * @param taskGid The task to operate on. (required)
     * @param setParentForTaskRequest The new parent of the subtask. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> setParentForTaskWithHttpInfo(String taskGid, SetParentForTaskRequest setParentForTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = setParentForTaskValidateBeforeCall(taskGid, setParentForTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the parent of a task (asynchronously)
     * parent, or no parent task at all. Returns an empty data block. When using &#x60;insert_before&#x60; and &#x60;insert_after&#x60;, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * @param taskGid The task to operate on. (required)
     * @param setParentForTaskRequest The new parent of the subtask. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully changed the parent of the specified subtask. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setParentForTaskAsync(String taskGid, SetParentForTaskRequest setParentForTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = setParentForTaskValidateBeforeCall(taskGid, setParentForTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTask
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The task to update. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskCall(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{task_gid}"
            .replace("{" + "task_gid" + "}", localVarApiClient.escapeString(taskGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskValidateBeforeCall(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskGid' is set
        if (taskGid == null) {
            throw new ApiException("Missing the required parameter 'taskGid' when calling updateTask(Async)");
        }

        // verify the required parameter 'createTaskRequest' is set
        if (createTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskRequest' when calling updateTask(Async)");
        }

        return updateTaskCall(taskGid, createTaskRequest, optPretty, optFields, _callback);

    }

    /**
     * Update a task
     * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The task to update. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateTask201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTask201Response updateTask(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateTask201Response> localVarResp = updateTaskWithHttpInfo(taskGid, createTaskRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Update a task
     * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The task to update. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateTask201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTask201Response> updateTaskWithHttpInfo(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(taskGid, createTaskRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a task (asynchronously)
     * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * @param taskGid The task to operate on. (required)
     * @param createTaskRequest The task to update. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified task. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTaskAsync(String taskGid, CreateTaskRequest createTaskRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateTask201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskValidateBeforeCall(taskGid, createTaskRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateTask201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
