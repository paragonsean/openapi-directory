/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoalResponseAllOfMetric;
import org.openapitools.client.model.GoalResponseAllOfOwner;
import org.openapitools.client.model.GoalResponseAllOfTeam;
import org.openapitools.client.model.GoalResponseAllOfTimePeriod;
import org.openapitools.client.model.GoalResponseAllOfWorkspace;
import org.openapitools.client.model.Like;
import org.openapitools.client.model.StatusUpdateCompact;
import org.openapitools.client.model.UserCompact;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoalResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoalResponse {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_DUE_ON = "due_on";
  @SerializedName(SERIALIZED_NAME_DUE_ON)
  private String dueOn;

  public static final String SERIALIZED_NAME_HTML_NOTES = "html_notes";
  @SerializedName(SERIALIZED_NAME_HTML_NOTES)
  private String htmlNotes;

  public static final String SERIALIZED_NAME_IS_WORKSPACE_LEVEL = "is_workspace_level";
  @SerializedName(SERIALIZED_NAME_IS_WORKSPACE_LEVEL)
  private Boolean isWorkspaceLevel;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Boolean liked;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_START_ON = "start_on";
  @SerializedName(SERIALIZED_NAME_START_ON)
  private String startOn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CURRENT_STATUS_UPDATE = "current_status_update";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS_UPDATE)
  private StatusUpdateCompact currentStatusUpdate;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private List<UserCompact> followers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private List<Like> likes = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private GoalResponseAllOfMetric metric;

  public static final String SERIALIZED_NAME_NUM_LIKES = "num_likes";
  @SerializedName(SERIALIZED_NAME_NUM_LIKES)
  private Integer numLikes;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private GoalResponseAllOfOwner owner;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private GoalResponseAllOfTeam team;

  public static final String SERIALIZED_NAME_TIME_PERIOD = "time_period";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private GoalResponseAllOfTimePeriod timePeriod;

  public static final String SERIALIZED_NAME_WORKSPACE = "workspace";
  @SerializedName(SERIALIZED_NAME_WORKSPACE)
  private GoalResponseAllOfWorkspace workspace;

  public GoalResponse() {
  }

  public GoalResponse(
     String gid, 
     String resourceType, 
     List<Like> likes, 
     Integer numLikes
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.likes = likes;
    this.numLikes = numLikes;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public GoalResponse dueOn(String dueOn) {
    this.dueOn = dueOn;
    return this;
  }

  /**
   * The localized day on which this goal is due. This takes a date with format &#x60;YYYY-MM-DD&#x60;.
   * @return dueOn
   */
  @javax.annotation.Nullable
  public String getDueOn() {
    return dueOn;
  }

  public void setDueOn(String dueOn) {
    this.dueOn = dueOn;
  }


  public GoalResponse htmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
    return this;
  }

  /**
   * The notes of the goal with formatting as HTML.
   * @return htmlNotes
   */
  @javax.annotation.Nullable
  public String getHtmlNotes() {
    return htmlNotes;
  }

  public void setHtmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
  }


  public GoalResponse isWorkspaceLevel(Boolean isWorkspaceLevel) {
    this.isWorkspaceLevel = isWorkspaceLevel;
    return this;
  }

  /**
   * *Conditional*. This property is only present when the &#x60;workspace&#x60; provided is an organization. Whether the goal belongs to the &#x60;workspace&#x60; (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
   * @return isWorkspaceLevel
   */
  @javax.annotation.Nullable
  public Boolean getIsWorkspaceLevel() {
    return isWorkspaceLevel;
  }

  public void setIsWorkspaceLevel(Boolean isWorkspaceLevel) {
    this.isWorkspaceLevel = isWorkspaceLevel;
  }


  public GoalResponse liked(Boolean liked) {
    this.liked = liked;
    return this;
  }

  /**
   * True if the goal is liked by the authorized user, false if not.
   * @return liked
   */
  @javax.annotation.Nullable
  public Boolean getLiked() {
    return liked;
  }

  public void setLiked(Boolean liked) {
    this.liked = liked;
  }


  public GoalResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the goal.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoalResponse notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Free-form textual information associated with the goal (i.e. its description).
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public GoalResponse startOn(String startOn) {
    this.startOn = startOn;
    return this;
  }

  /**
   * The day on which work for this goal begins, or null if the goal has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format, and cannot be set unless there is an accompanying due date.
   * @return startOn
   */
  @javax.annotation.Nullable
  public String getStartOn() {
    return startOn;
  }

  public void setStartOn(String startOn) {
    this.startOn = startOn;
  }


  public GoalResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of this goal. When the goal is open, its status can be &#x60;green&#x60;, &#x60;yellow&#x60;, and &#x60;red&#x60; to reflect \&quot;On Track\&quot;, \&quot;At Risk\&quot;, and \&quot;Off Track\&quot;, respectively. When the goal is closed, the value can be &#x60;missed&#x60;, &#x60;achieved&#x60;, &#x60;partial&#x60;, or &#x60;dropped&#x60;. *Note* you can only write to this property if &#x60;metric&#x60; is set.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public GoalResponse currentStatusUpdate(StatusUpdateCompact currentStatusUpdate) {
    this.currentStatusUpdate = currentStatusUpdate;
    return this;
  }

  /**
   * The latest &#x60;status_update&#x60; posted to this goal.
   * @return currentStatusUpdate
   */
  @javax.annotation.Nullable
  public StatusUpdateCompact getCurrentStatusUpdate() {
    return currentStatusUpdate;
  }

  public void setCurrentStatusUpdate(StatusUpdateCompact currentStatusUpdate) {
    this.currentStatusUpdate = currentStatusUpdate;
  }


  public GoalResponse followers(List<UserCompact> followers) {
    this.followers = followers;
    return this;
  }

  public GoalResponse addFollowersItem(UserCompact followersItem) {
    if (this.followers == null) {
      this.followers = new ArrayList<>();
    }
    this.followers.add(followersItem);
    return this;
  }

  /**
   * Array of users who are members of this goal.
   * @return followers
   */
  @javax.annotation.Nullable
  public List<UserCompact> getFollowers() {
    return followers;
  }

  public void setFollowers(List<UserCompact> followers) {
    this.followers = followers;
  }


  /**
   * Array of likes for users who have liked this goal.
   * @return likes
   */
  @javax.annotation.Nullable
  public List<Like> getLikes() {
    return likes;
  }



  public GoalResponse metric(GoalResponseAllOfMetric metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nullable
  public GoalResponseAllOfMetric getMetric() {
    return metric;
  }

  public void setMetric(GoalResponseAllOfMetric metric) {
    this.metric = metric;
  }


  /**
   * The number of users who have liked this goal.
   * @return numLikes
   */
  @javax.annotation.Nullable
  public Integer getNumLikes() {
    return numLikes;
  }



  public GoalResponse owner(GoalResponseAllOfOwner owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public GoalResponseAllOfOwner getOwner() {
    return owner;
  }

  public void setOwner(GoalResponseAllOfOwner owner) {
    this.owner = owner;
  }


  public GoalResponse team(GoalResponseAllOfTeam team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public GoalResponseAllOfTeam getTeam() {
    return team;
  }

  public void setTeam(GoalResponseAllOfTeam team) {
    this.team = team;
  }


  public GoalResponse timePeriod(GoalResponseAllOfTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nullable
  public GoalResponseAllOfTimePeriod getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(GoalResponseAllOfTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
  }


  public GoalResponse workspace(GoalResponseAllOfWorkspace workspace) {
    this.workspace = workspace;
    return this;
  }

  /**
   * Get workspace
   * @return workspace
   */
  @javax.annotation.Nullable
  public GoalResponseAllOfWorkspace getWorkspace() {
    return workspace;
  }

  public void setWorkspace(GoalResponseAllOfWorkspace workspace) {
    this.workspace = workspace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoalResponse goalResponse = (GoalResponse) o;
    return Objects.equals(this.gid, goalResponse.gid) &&
        Objects.equals(this.resourceType, goalResponse.resourceType) &&
        Objects.equals(this.dueOn, goalResponse.dueOn) &&
        Objects.equals(this.htmlNotes, goalResponse.htmlNotes) &&
        Objects.equals(this.isWorkspaceLevel, goalResponse.isWorkspaceLevel) &&
        Objects.equals(this.liked, goalResponse.liked) &&
        Objects.equals(this.name, goalResponse.name) &&
        Objects.equals(this.notes, goalResponse.notes) &&
        Objects.equals(this.startOn, goalResponse.startOn) &&
        Objects.equals(this.status, goalResponse.status) &&
        Objects.equals(this.currentStatusUpdate, goalResponse.currentStatusUpdate) &&
        Objects.equals(this.followers, goalResponse.followers) &&
        Objects.equals(this.likes, goalResponse.likes) &&
        Objects.equals(this.metric, goalResponse.metric) &&
        Objects.equals(this.numLikes, goalResponse.numLikes) &&
        Objects.equals(this.owner, goalResponse.owner) &&
        Objects.equals(this.team, goalResponse.team) &&
        Objects.equals(this.timePeriod, goalResponse.timePeriod) &&
        Objects.equals(this.workspace, goalResponse.workspace);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, dueOn, htmlNotes, isWorkspaceLevel, liked, name, notes, startOn, status, currentStatusUpdate, followers, likes, metric, numLikes, owner, team, timePeriod, workspace);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoalResponse {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    htmlNotes: ").append(toIndentedString(htmlNotes)).append("\n");
    sb.append("    isWorkspaceLevel: ").append(toIndentedString(isWorkspaceLevel)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currentStatusUpdate: ").append(toIndentedString(currentStatusUpdate)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("due_on");
    openapiFields.add("html_notes");
    openapiFields.add("is_workspace_level");
    openapiFields.add("liked");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("start_on");
    openapiFields.add("status");
    openapiFields.add("current_status_update");
    openapiFields.add("followers");
    openapiFields.add("likes");
    openapiFields.add("metric");
    openapiFields.add("num_likes");
    openapiFields.add("owner");
    openapiFields.add("team");
    openapiFields.add("time_period");
    openapiFields.add("workspace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoalResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoalResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoalResponse is not found in the empty JSON string", GoalResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoalResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoalResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("due_on") != null && !jsonObj.get("due_on").isJsonNull()) && !jsonObj.get("due_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_on").toString()));
      }
      if ((jsonObj.get("html_notes") != null && !jsonObj.get("html_notes").isJsonNull()) && !jsonObj.get("html_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_notes").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("start_on") != null && !jsonObj.get("start_on").isJsonNull()) && !jsonObj.get("start_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_on").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `current_status_update`
      if (jsonObj.get("current_status_update") != null && !jsonObj.get("current_status_update").isJsonNull()) {
        StatusUpdateCompact.validateJsonElement(jsonObj.get("current_status_update"));
      }
      if (jsonObj.get("followers") != null && !jsonObj.get("followers").isJsonNull()) {
        JsonArray jsonArrayfollowers = jsonObj.getAsJsonArray("followers");
        if (jsonArrayfollowers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("followers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `followers` to be an array in the JSON string but got `%s`", jsonObj.get("followers").toString()));
          }

          // validate the optional field `followers` (array)
          for (int i = 0; i < jsonArrayfollowers.size(); i++) {
            UserCompact.validateJsonElement(jsonArrayfollowers.get(i));
          };
        }
      }
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        JsonArray jsonArraylikes = jsonObj.getAsJsonArray("likes");
        if (jsonArraylikes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("likes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `likes` to be an array in the JSON string but got `%s`", jsonObj.get("likes").toString()));
          }

          // validate the optional field `likes` (array)
          for (int i = 0; i < jsonArraylikes.size(); i++) {
            Like.validateJsonElement(jsonArraylikes.get(i));
          };
        }
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        GoalResponseAllOfMetric.validateJsonElement(jsonObj.get("metric"));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        GoalResponseAllOfOwner.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `team`
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        GoalResponseAllOfTeam.validateJsonElement(jsonObj.get("team"));
      }
      // validate the optional field `time_period`
      if (jsonObj.get("time_period") != null && !jsonObj.get("time_period").isJsonNull()) {
        GoalResponseAllOfTimePeriod.validateJsonElement(jsonObj.get("time_period"));
      }
      // validate the optional field `workspace`
      if (jsonObj.get("workspace") != null && !jsonObj.get("workspace").isJsonNull()) {
        GoalResponseAllOfWorkspace.validateJsonElement(jsonObj.get("workspace"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoalResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoalResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoalResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoalResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoalResponse>() {
           @Override
           public void write(JsonWriter out, GoalResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoalResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoalResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoalResponse
   * @throws IOException if the JSON string is invalid with respect to GoalResponse
   */
  public static GoalResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoalResponse.class);
  }

  /**
   * Convert an instance of GoalResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

