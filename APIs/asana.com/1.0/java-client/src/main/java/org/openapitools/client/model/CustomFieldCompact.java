/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomFieldCompactAllOfDateValue;
import org.openapitools.client.model.CustomFieldCompactAllOfEnumValue;
import org.openapitools.client.model.EnumOption;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomFieldCompact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomFieldCompact {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_DATE_VALUE = "date_value";
  @SerializedName(SERIALIZED_NAME_DATE_VALUE)
  private CustomFieldCompactAllOfDateValue dateValue;

  public static final String SERIALIZED_NAME_DISPLAY_VALUE = "display_value";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VALUE)
  private String displayValue;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENUM_OPTIONS = "enum_options";
  @SerializedName(SERIALIZED_NAME_ENUM_OPTIONS)
  private List<EnumOption> enumOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENUM_VALUE = "enum_value";
  @SerializedName(SERIALIZED_NAME_ENUM_VALUE)
  private CustomFieldCompactAllOfEnumValue enumValue;

  public static final String SERIALIZED_NAME_MULTI_ENUM_VALUES = "multi_enum_values";
  @SerializedName(SERIALIZED_NAME_MULTI_ENUM_VALUES)
  private List<EnumOption> multiEnumValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_VALUE = "number_value";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALUE)
  private BigDecimal numberValue;

  /**
   * The type of the custom field. Must be one of the given values. 
   */
  @JsonAdapter(ResourceSubtypeEnum.Adapter.class)
  public enum ResourceSubtypeEnum {
    TEXT("text"),
    
    ENUM("enum"),
    
    MULTI_ENUM("multi_enum"),
    
    NUMBER("number"),
    
    DATE("date"),
    
    PEOPLE("people");

    private String value;

    ResourceSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceSubtypeEnum fromValue(String value) {
      for (ResourceSubtypeEnum b : ResourceSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceSubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceSubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private ResourceSubtypeEnum resourceSubtype;

  public static final String SERIALIZED_NAME_TEXT_VALUE = "text_value";
  @SerializedName(SERIALIZED_NAME_TEXT_VALUE)
  private String textValue;

  /**
   * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("text"),
    
    ENUM("enum"),
    
    MULTI_ENUM("multi_enum"),
    
    NUMBER("number");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CustomFieldCompact() {
  }

  public CustomFieldCompact(
     String gid, 
     String resourceType, 
     String displayValue, 
     TypeEnum type
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.displayValue = displayValue;
    this.type = type;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public CustomFieldCompact dateValue(CustomFieldCompactAllOfDateValue dateValue) {
    this.dateValue = dateValue;
    return this;
  }

  /**
   * Get dateValue
   * @return dateValue
   */
  @javax.annotation.Nullable
  public CustomFieldCompactAllOfDateValue getDateValue() {
    return dateValue;
  }

  public void setDateValue(CustomFieldCompactAllOfDateValue dateValue) {
    this.dateValue = dateValue;
  }


  /**
   * A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
   * @return displayValue
   */
  @javax.annotation.Nullable
  public String getDisplayValue() {
    return displayValue;
  }



  public CustomFieldCompact enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * *Conditional*. Determines if the custom field is enabled or not.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CustomFieldCompact enumOptions(List<EnumOption> enumOptions) {
    this.enumOptions = enumOptions;
    return this;
  }

  public CustomFieldCompact addEnumOptionsItem(EnumOption enumOptionsItem) {
    if (this.enumOptions == null) {
      this.enumOptions = new ArrayList<>();
    }
    this.enumOptions.add(enumOptionsItem);
    return this;
  }

  /**
   * *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
   * @return enumOptions
   */
  @javax.annotation.Nullable
  public List<EnumOption> getEnumOptions() {
    return enumOptions;
  }

  public void setEnumOptions(List<EnumOption> enumOptions) {
    this.enumOptions = enumOptions;
  }


  public CustomFieldCompact enumValue(CustomFieldCompactAllOfEnumValue enumValue) {
    this.enumValue = enumValue;
    return this;
  }

  /**
   * Get enumValue
   * @return enumValue
   */
  @javax.annotation.Nullable
  public CustomFieldCompactAllOfEnumValue getEnumValue() {
    return enumValue;
  }

  public void setEnumValue(CustomFieldCompactAllOfEnumValue enumValue) {
    this.enumValue = enumValue;
  }


  public CustomFieldCompact multiEnumValues(List<EnumOption> multiEnumValues) {
    this.multiEnumValues = multiEnumValues;
    return this;
  }

  public CustomFieldCompact addMultiEnumValuesItem(EnumOption multiEnumValuesItem) {
    if (this.multiEnumValues == null) {
      this.multiEnumValues = new ArrayList<>();
    }
    this.multiEnumValues.add(multiEnumValuesItem);
    return this;
  }

  /**
   * *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
   * @return multiEnumValues
   */
  @javax.annotation.Nullable
  public List<EnumOption> getMultiEnumValues() {
    return multiEnumValues;
  }

  public void setMultiEnumValues(List<EnumOption> multiEnumValues) {
    this.multiEnumValues = multiEnumValues;
  }


  public CustomFieldCompact name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the custom field.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CustomFieldCompact numberValue(BigDecimal numberValue) {
    this.numberValue = numberValue;
    return this;
  }

  /**
   * *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
   * @return numberValue
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberValue() {
    return numberValue;
  }

  public void setNumberValue(BigDecimal numberValue) {
    this.numberValue = numberValue;
  }


  public CustomFieldCompact resourceSubtype(ResourceSubtypeEnum resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
    return this;
  }

  /**
   * The type of the custom field. Must be one of the given values. 
   * @return resourceSubtype
   */
  @javax.annotation.Nullable
  public ResourceSubtypeEnum getResourceSubtype() {
    return resourceSubtype;
  }

  public void setResourceSubtype(ResourceSubtypeEnum resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
  }


  public CustomFieldCompact textValue(String textValue) {
    this.textValue = textValue;
    return this;
  }

  /**
   * *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
   * @return textValue
   */
  @javax.annotation.Nullable
  public String getTextValue() {
    return textValue;
  }

  public void setTextValue(String textValue) {
    this.textValue = textValue;
  }


  /**
   * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFieldCompact customFieldCompact = (CustomFieldCompact) o;
    return Objects.equals(this.gid, customFieldCompact.gid) &&
        Objects.equals(this.resourceType, customFieldCompact.resourceType) &&
        Objects.equals(this.dateValue, customFieldCompact.dateValue) &&
        Objects.equals(this.displayValue, customFieldCompact.displayValue) &&
        Objects.equals(this.enabled, customFieldCompact.enabled) &&
        Objects.equals(this.enumOptions, customFieldCompact.enumOptions) &&
        Objects.equals(this.enumValue, customFieldCompact.enumValue) &&
        Objects.equals(this.multiEnumValues, customFieldCompact.multiEnumValues) &&
        Objects.equals(this.name, customFieldCompact.name) &&
        Objects.equals(this.numberValue, customFieldCompact.numberValue) &&
        Objects.equals(this.resourceSubtype, customFieldCompact.resourceSubtype) &&
        Objects.equals(this.textValue, customFieldCompact.textValue) &&
        Objects.equals(this.type, customFieldCompact.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, dateValue, displayValue, enabled, enumOptions, enumValue, multiEnumValues, name, numberValue, resourceSubtype, textValue, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFieldCompact {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    dateValue: ").append(toIndentedString(dateValue)).append("\n");
    sb.append("    displayValue: ").append(toIndentedString(displayValue)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enumOptions: ").append(toIndentedString(enumOptions)).append("\n");
    sb.append("    enumValue: ").append(toIndentedString(enumValue)).append("\n");
    sb.append("    multiEnumValues: ").append(toIndentedString(multiEnumValues)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberValue: ").append(toIndentedString(numberValue)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    textValue: ").append(toIndentedString(textValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("date_value");
    openapiFields.add("display_value");
    openapiFields.add("enabled");
    openapiFields.add("enum_options");
    openapiFields.add("enum_value");
    openapiFields.add("multi_enum_values");
    openapiFields.add("name");
    openapiFields.add("number_value");
    openapiFields.add("resource_subtype");
    openapiFields.add("text_value");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomFieldCompact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomFieldCompact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomFieldCompact is not found in the empty JSON string", CustomFieldCompact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomFieldCompact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomFieldCompact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      // validate the optional field `date_value`
      if (jsonObj.get("date_value") != null && !jsonObj.get("date_value").isJsonNull()) {
        CustomFieldCompactAllOfDateValue.validateJsonElement(jsonObj.get("date_value"));
      }
      if ((jsonObj.get("display_value") != null && !jsonObj.get("display_value").isJsonNull()) && !jsonObj.get("display_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_value").toString()));
      }
      if (jsonObj.get("enum_options") != null && !jsonObj.get("enum_options").isJsonNull()) {
        JsonArray jsonArrayenumOptions = jsonObj.getAsJsonArray("enum_options");
        if (jsonArrayenumOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enum_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enum_options` to be an array in the JSON string but got `%s`", jsonObj.get("enum_options").toString()));
          }

          // validate the optional field `enum_options` (array)
          for (int i = 0; i < jsonArrayenumOptions.size(); i++) {
            EnumOption.validateJsonElement(jsonArrayenumOptions.get(i));
          };
        }
      }
      // validate the optional field `enum_value`
      if (jsonObj.get("enum_value") != null && !jsonObj.get("enum_value").isJsonNull()) {
        CustomFieldCompactAllOfEnumValue.validateJsonElement(jsonObj.get("enum_value"));
      }
      if (jsonObj.get("multi_enum_values") != null && !jsonObj.get("multi_enum_values").isJsonNull()) {
        JsonArray jsonArraymultiEnumValues = jsonObj.getAsJsonArray("multi_enum_values");
        if (jsonArraymultiEnumValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multi_enum_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multi_enum_values` to be an array in the JSON string but got `%s`", jsonObj.get("multi_enum_values").toString()));
          }

          // validate the optional field `multi_enum_values` (array)
          for (int i = 0; i < jsonArraymultiEnumValues.size(); i++) {
            EnumOption.validateJsonElement(jsonArraymultiEnumValues.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      // validate the optional field `resource_subtype`
      if (jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) {
        ResourceSubtypeEnum.validateJsonElement(jsonObj.get("resource_subtype"));
      }
      if ((jsonObj.get("text_value") != null && !jsonObj.get("text_value").isJsonNull()) && !jsonObj.get("text_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_value").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomFieldCompact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomFieldCompact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomFieldCompact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomFieldCompact.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomFieldCompact>() {
           @Override
           public void write(JsonWriter out, CustomFieldCompact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomFieldCompact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomFieldCompact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomFieldCompact
   * @throws IOException if the JSON string is invalid with respect to CustomFieldCompact
   */
  public static CustomFieldCompact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomFieldCompact.class);
  }

  /**
   * Convert an instance of CustomFieldCompact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

