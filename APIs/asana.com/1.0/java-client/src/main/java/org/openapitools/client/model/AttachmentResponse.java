/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AttachmentResponseAllOfParent;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttachmentResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttachmentResponse {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private String resourceSubtype;

  public static final String SERIALIZED_NAME_CONNECTED_TO_APP = "connected_to_app";
  @SerializedName(SERIALIZED_NAME_CONNECTED_TO_APP)
  private Boolean connectedToApp;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private URI downloadUrl;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private AttachmentResponseAllOfParent parent;

  public static final String SERIALIZED_NAME_PERMANENT_URL = "permanent_url";
  @SerializedName(SERIALIZED_NAME_PERMANENT_URL)
  private URI permanentUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_VIEW_URL = "view_url";
  @SerializedName(SERIALIZED_NAME_VIEW_URL)
  private URI viewUrl;

  public AttachmentResponse() {
  }

  public AttachmentResponse(
     String gid, 
     String resourceType, 
     String name, 
     Boolean connectedToApp, 
     OffsetDateTime createdAt, 
     URI downloadUrl, 
     String host, 
     URI permanentUrl, 
     Integer size, 
     URI viewUrl
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.name = name;
    this.connectedToApp = connectedToApp;
    this.createdAt = createdAt;
    this.downloadUrl = downloadUrl;
    this.host = host;
    this.permanentUrl = permanentUrl;
    this.size = size;
    this.viewUrl = viewUrl;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  /**
   * The name of the file.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public AttachmentResponse resourceSubtype(String resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
    return this;
  }

  /**
   * The service hosting the attachment. Valid values are &#x60;asana&#x60;, &#x60;dropbox&#x60;, &#x60;gdrive&#x60;, &#x60;onedrive&#x60;, &#x60;box&#x60;, &#x60;vimeo&#x60;, and &#x60;external&#x60;.
   * @return resourceSubtype
   */
  @javax.annotation.Nullable
  public String getResourceSubtype() {
    return resourceSubtype;
  }

  public void setResourceSubtype(String resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
  }


  /**
   * Whether the attachment is connected to the app making the request for the purposes of showing an app components widget. Only present when the &#x60;resource_subtype&#x60; is &#x60;external&#x60; or &#x60;gdrive&#x60;.
   * @return connectedToApp
   */
  @javax.annotation.Nullable
  public Boolean getConnectedToApp() {
    return connectedToApp;
  }



  /**
   * The time at which this resource was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * The URL containing the content of the attachment. *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public URI getDownloadUrl() {
    return downloadUrl;
  }



  /**
   * The service hosting the attachment. Valid values are &#x60;asana&#x60;, &#x60;dropbox&#x60;, &#x60;gdrive&#x60;, &#x60;box&#x60;, and &#x60;vimeo&#x60;.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }



  public AttachmentResponse parent(AttachmentResponseAllOfParent parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public AttachmentResponseAllOfParent getParent() {
    return parent;
  }

  public void setParent(AttachmentResponseAllOfParent parent) {
    this.parent = parent;
  }


  /**
   * 
   * @return permanentUrl
   */
  @javax.annotation.Nullable
  public URI getPermanentUrl() {
    return permanentUrl;
  }



  /**
   * The size of the attachment in bytes. Only present when the &#x60;resource_subtype&#x60; is &#x60;asana&#x60;.
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }



  /**
   * The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.
   * @return viewUrl
   */
  @javax.annotation.Nullable
  public URI getViewUrl() {
    return viewUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentResponse attachmentResponse = (AttachmentResponse) o;
    return Objects.equals(this.gid, attachmentResponse.gid) &&
        Objects.equals(this.resourceType, attachmentResponse.resourceType) &&
        Objects.equals(this.name, attachmentResponse.name) &&
        Objects.equals(this.resourceSubtype, attachmentResponse.resourceSubtype) &&
        Objects.equals(this.connectedToApp, attachmentResponse.connectedToApp) &&
        Objects.equals(this.createdAt, attachmentResponse.createdAt) &&
        Objects.equals(this.downloadUrl, attachmentResponse.downloadUrl) &&
        Objects.equals(this.host, attachmentResponse.host) &&
        Objects.equals(this.parent, attachmentResponse.parent) &&
        Objects.equals(this.permanentUrl, attachmentResponse.permanentUrl) &&
        Objects.equals(this.size, attachmentResponse.size) &&
        Objects.equals(this.viewUrl, attachmentResponse.viewUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, name, resourceSubtype, connectedToApp, createdAt, downloadUrl, host, parent, permanentUrl, size, viewUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentResponse {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    connectedToApp: ").append(toIndentedString(connectedToApp)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    permanentUrl: ").append(toIndentedString(permanentUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    viewUrl: ").append(toIndentedString(viewUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("name");
    openapiFields.add("resource_subtype");
    openapiFields.add("connected_to_app");
    openapiFields.add("created_at");
    openapiFields.add("download_url");
    openapiFields.add("host");
    openapiFields.add("parent");
    openapiFields.add("permanent_url");
    openapiFields.add("size");
    openapiFields.add("view_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachmentResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachmentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachmentResponse is not found in the empty JSON string", AttachmentResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttachmentResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttachmentResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        AttachmentResponseAllOfParent.validateJsonElement(jsonObj.get("parent"));
      }
      if ((jsonObj.get("permanent_url") != null && !jsonObj.get("permanent_url").isJsonNull()) && !jsonObj.get("permanent_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanent_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permanent_url").toString()));
      }
      if ((jsonObj.get("view_url") != null && !jsonObj.get("view_url").isJsonNull()) && !jsonObj.get("view_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachmentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachmentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachmentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachmentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachmentResponse>() {
           @Override
           public void write(JsonWriter out, AttachmentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachmentResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachmentResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachmentResponse
   * @throws IOException if the JSON string is invalid with respect to AttachmentResponse
   */
  public static AttachmentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachmentResponse.class);
  }

  /**
   * Convert an instance of AttachmentResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

