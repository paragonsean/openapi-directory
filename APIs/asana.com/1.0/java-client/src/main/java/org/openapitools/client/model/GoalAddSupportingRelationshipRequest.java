/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoalAddSupportingRelationshipRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoalAddSupportingRelationshipRequest {
  public static final String SERIALIZED_NAME_CONTRIBUTION_WEIGHT = "contribution_weight";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION_WEIGHT)
  private BigDecimal contributionWeight;

  public static final String SERIALIZED_NAME_INSERT_AFTER = "insert_after";
  @SerializedName(SERIALIZED_NAME_INSERT_AFTER)
  private String insertAfter;

  public static final String SERIALIZED_NAME_INSERT_BEFORE = "insert_before";
  @SerializedName(SERIALIZED_NAME_INSERT_BEFORE)
  private String insertBefore;

  public static final String SERIALIZED_NAME_SUPPORTING_RESOURCE = "supporting_resource";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_RESOURCE)
  private String supportingResource;

  public GoalAddSupportingRelationshipRequest() {
  }

  public GoalAddSupportingRelationshipRequest contributionWeight(BigDecimal contributionWeight) {
    this.contributionWeight = contributionWeight;
    return this;
  }

  /**
   * The weight that the supporting resource&#39;s progress will contribute to the supported goal&#39;s progress. This can only be 0 or 1.
   * @return contributionWeight
   */
  @javax.annotation.Nullable
  public BigDecimal getContributionWeight() {
    return contributionWeight;
  }

  public void setContributionWeight(BigDecimal contributionWeight) {
    this.contributionWeight = contributionWeight;
  }


  public GoalAddSupportingRelationshipRequest insertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
    return this;
  }

  /**
   * An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. &#x60;insert_before&#x60; and &#x60;insert_after&#x60; parameters cannot both be specified. Currently only supported when adding a subgoal.
   * @return insertAfter
   */
  @javax.annotation.Nullable
  public String getInsertAfter() {
    return insertAfter;
  }

  public void setInsertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
  }


  public GoalAddSupportingRelationshipRequest insertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
    return this;
  }

  /**
   * An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. &#x60;insert_before&#x60; and &#x60;insert_after&#x60; parameters cannot both be specified. Currently only supported when adding a subgoal.
   * @return insertBefore
   */
  @javax.annotation.Nullable
  public String getInsertBefore() {
    return insertBefore;
  }

  public void setInsertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
  }


  public GoalAddSupportingRelationshipRequest supportingResource(String supportingResource) {
    this.supportingResource = supportingResource;
    return this;
  }

  /**
   * The gid of the supporting resource to add to the parent goal. Must be the gid of a goal, project, or portfolio.
   * @return supportingResource
   */
  @javax.annotation.Nonnull
  public String getSupportingResource() {
    return supportingResource;
  }

  public void setSupportingResource(String supportingResource) {
    this.supportingResource = supportingResource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoalAddSupportingRelationshipRequest goalAddSupportingRelationshipRequest = (GoalAddSupportingRelationshipRequest) o;
    return Objects.equals(this.contributionWeight, goalAddSupportingRelationshipRequest.contributionWeight) &&
        Objects.equals(this.insertAfter, goalAddSupportingRelationshipRequest.insertAfter) &&
        Objects.equals(this.insertBefore, goalAddSupportingRelationshipRequest.insertBefore) &&
        Objects.equals(this.supportingResource, goalAddSupportingRelationshipRequest.supportingResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contributionWeight, insertAfter, insertBefore, supportingResource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoalAddSupportingRelationshipRequest {\n");
    sb.append("    contributionWeight: ").append(toIndentedString(contributionWeight)).append("\n");
    sb.append("    insertAfter: ").append(toIndentedString(insertAfter)).append("\n");
    sb.append("    insertBefore: ").append(toIndentedString(insertBefore)).append("\n");
    sb.append("    supportingResource: ").append(toIndentedString(supportingResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contribution_weight");
    openapiFields.add("insert_after");
    openapiFields.add("insert_before");
    openapiFields.add("supporting_resource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("supporting_resource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoalAddSupportingRelationshipRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoalAddSupportingRelationshipRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoalAddSupportingRelationshipRequest is not found in the empty JSON string", GoalAddSupportingRelationshipRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoalAddSupportingRelationshipRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoalAddSupportingRelationshipRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GoalAddSupportingRelationshipRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("insert_after") != null && !jsonObj.get("insert_after").isJsonNull()) && !jsonObj.get("insert_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insert_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insert_after").toString()));
      }
      if ((jsonObj.get("insert_before") != null && !jsonObj.get("insert_before").isJsonNull()) && !jsonObj.get("insert_before").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insert_before` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insert_before").toString()));
      }
      if (!jsonObj.get("supporting_resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supporting_resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supporting_resource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoalAddSupportingRelationshipRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoalAddSupportingRelationshipRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoalAddSupportingRelationshipRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoalAddSupportingRelationshipRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoalAddSupportingRelationshipRequest>() {
           @Override
           public void write(JsonWriter out, GoalAddSupportingRelationshipRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoalAddSupportingRelationshipRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoalAddSupportingRelationshipRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoalAddSupportingRelationshipRequest
   * @throws IOException if the JSON string is invalid with respect to GoalAddSupportingRelationshipRequest
   */
  public static GoalAddSupportingRelationshipRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoalAddSupportingRelationshipRequest.class);
  }

  /**
   * Convert an instance of GoalAddSupportingRelationshipRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

