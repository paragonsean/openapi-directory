/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomFieldSettingResponse;
import org.openapitools.client.model.ProjectBaseAllOfWorkspace;
import org.openapitools.client.model.ProjectStatusResponse;
import org.openapitools.client.model.StatusUpdateCompact;
import org.openapitools.client.model.UserCompact;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectBase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectBase {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  /**
   * Color of the project.
   */
  @JsonAdapter(ColorEnum.Adapter.class)
  public enum ColorEnum {
    DARK_PINK("dark-pink"),
    
    DARK_GREEN("dark-green"),
    
    DARK_BLUE("dark-blue"),
    
    DARK_RED("dark-red"),
    
    DARK_TEAL("dark-teal"),
    
    DARK_BROWN("dark-brown"),
    
    DARK_ORANGE("dark-orange"),
    
    DARK_PURPLE("dark-purple"),
    
    DARK_WARM_GRAY("dark-warm-gray"),
    
    LIGHT_PINK("light-pink"),
    
    LIGHT_GREEN("light-green"),
    
    LIGHT_BLUE("light-blue"),
    
    LIGHT_RED("light-red"),
    
    LIGHT_TEAL("light-teal"),
    
    LIGHT_BROWN("light-brown"),
    
    LIGHT_ORANGE("light-orange"),
    
    LIGHT_PURPLE("light-purple"),
    
    LIGHT_WARM_GRAY("light-warm-gray");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorEnum fromValue(String value) {
      for (ColorEnum b : ColorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private ColorEnum color;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "current_status";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private ProjectStatusResponse currentStatus;

  public static final String SERIALIZED_NAME_CURRENT_STATUS_UPDATE = "current_status_update";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS_UPDATE)
  private StatusUpdateCompact currentStatusUpdate;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD_SETTINGS = "custom_field_settings";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD_SETTINGS)
  private List<CustomFieldSettingResponse> customFieldSettings = new ArrayList<>();

  /**
   * The default view (list, board, calendar, or timeline) of a project.
   */
  @JsonAdapter(DefaultViewEnum.Adapter.class)
  public enum DefaultViewEnum {
    LIST("list"),
    
    BOARD("board"),
    
    CALENDAR("calendar"),
    
    TIMELINE("timeline");

    private String value;

    DefaultViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultViewEnum fromValue(String value) {
      for (DefaultViewEnum b : DefaultViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_VIEW = "default_view";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VIEW)
  private DefaultViewEnum defaultView;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_DUE_ON = "due_on";
  @SerializedName(SERIALIZED_NAME_DUE_ON)
  private OffsetDateTime dueOn;

  public static final String SERIALIZED_NAME_HTML_NOTES = "html_notes";
  @SerializedName(SERIALIZED_NAME_HTML_NOTES)
  private String htmlNotes;

  public static final String SERIALIZED_NAME_IS_TEMPLATE = "is_template";
  @SerializedName(SERIALIZED_NAME_IS_TEMPLATE)
  private Boolean isTemplate;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<UserCompact> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_START_ON = "start_on";
  @SerializedName(SERIALIZED_NAME_START_ON)
  private LocalDate startOn;

  public static final String SERIALIZED_NAME_WORKSPACE = "workspace";
  @SerializedName(SERIALIZED_NAME_WORKSPACE)
  private ProjectBaseAllOfWorkspace workspace;

  public ProjectBase() {
  }

  public ProjectBase(
     String gid, 
     String resourceType, 
     OffsetDateTime createdAt, 
     List<CustomFieldSettingResponse> customFieldSettings, 
     List<UserCompact> members, 
     OffsetDateTime modifiedAt
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.createdAt = createdAt;
    this.customFieldSettings = customFieldSettings;
    this.members = members;
    this.modifiedAt = modifiedAt;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public ProjectBase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectBase archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public ProjectBase color(ColorEnum color) {
    this.color = color;
    return this;
  }

  /**
   * Color of the project.
   * @return color
   */
  @javax.annotation.Nullable
  public ColorEnum getColor() {
    return color;
  }

  public void setColor(ColorEnum color) {
    this.color = color;
  }


  /**
   * The time at which this resource was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public ProjectBase currentStatus(ProjectStatusResponse currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  /**
   * *Deprecated: new integrations should prefer the &#x60;current_status_update&#x60; resource.*
   * @return currentStatus
   */
  @javax.annotation.Nullable
  public ProjectStatusResponse getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(ProjectStatusResponse currentStatus) {
    this.currentStatus = currentStatus;
  }


  public ProjectBase currentStatusUpdate(StatusUpdateCompact currentStatusUpdate) {
    this.currentStatusUpdate = currentStatusUpdate;
    return this;
  }

  /**
   * The latest &#x60;status_update&#x60; posted to this project.
   * @return currentStatusUpdate
   */
  @javax.annotation.Nullable
  public StatusUpdateCompact getCurrentStatusUpdate() {
    return currentStatusUpdate;
  }

  public void setCurrentStatusUpdate(StatusUpdateCompact currentStatusUpdate) {
    this.currentStatusUpdate = currentStatusUpdate;
  }


  /**
   * Array of Custom Field Settings (in compact form).
   * @return customFieldSettings
   */
  @javax.annotation.Nullable
  public List<CustomFieldSettingResponse> getCustomFieldSettings() {
    return customFieldSettings;
  }



  public ProjectBase defaultView(DefaultViewEnum defaultView) {
    this.defaultView = defaultView;
    return this;
  }

  /**
   * The default view (list, board, calendar, or timeline) of a project.
   * @return defaultView
   */
  @javax.annotation.Nullable
  public DefaultViewEnum getDefaultView() {
    return defaultView;
  }

  public void setDefaultView(DefaultViewEnum defaultView) {
    this.defaultView = defaultView;
  }


  public ProjectBase dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * *Deprecated: new integrations should prefer the &#x60;due_on&#x60; field.*
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public ProjectBase dueOn(OffsetDateTime dueOn) {
    this.dueOn = dueOn;
    return this;
  }

  /**
   * The day on which this project is due. This takes a date with format YYYY-MM-DD.
   * @return dueOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueOn() {
    return dueOn;
  }

  public void setDueOn(OffsetDateTime dueOn) {
    this.dueOn = dueOn;
  }


  public ProjectBase htmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
    return this;
  }

  /**
   * [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
   * @return htmlNotes
   */
  @javax.annotation.Nullable
  public String getHtmlNotes() {
    return htmlNotes;
  }

  public void setHtmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
  }


  public ProjectBase isTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
    return this;
  }

  /**
   * [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.
   * @return isTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsTemplate() {
    return isTemplate;
  }

  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }


  /**
   * Array of users who are members of this project.
   * @return members
   */
  @javax.annotation.Nullable
  public List<UserCompact> getMembers() {
    return members;
  }



  /**
   * The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }



  public ProjectBase notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Free-form textual information associated with the project (ie., its description).
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public ProjectBase _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * True if the project is public to its team.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public ProjectBase startOn(LocalDate startOn) {
    this.startOn = startOn;
    return this;
  }

  /**
   * The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*
   * @return startOn
   */
  @javax.annotation.Nullable
  public LocalDate getStartOn() {
    return startOn;
  }

  public void setStartOn(LocalDate startOn) {
    this.startOn = startOn;
  }


  public ProjectBase workspace(ProjectBaseAllOfWorkspace workspace) {
    this.workspace = workspace;
    return this;
  }

  /**
   * Get workspace
   * @return workspace
   */
  @javax.annotation.Nullable
  public ProjectBaseAllOfWorkspace getWorkspace() {
    return workspace;
  }

  public void setWorkspace(ProjectBaseAllOfWorkspace workspace) {
    this.workspace = workspace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectBase projectBase = (ProjectBase) o;
    return Objects.equals(this.gid, projectBase.gid) &&
        Objects.equals(this.resourceType, projectBase.resourceType) &&
        Objects.equals(this.name, projectBase.name) &&
        Objects.equals(this.archived, projectBase.archived) &&
        Objects.equals(this.color, projectBase.color) &&
        Objects.equals(this.createdAt, projectBase.createdAt) &&
        Objects.equals(this.currentStatus, projectBase.currentStatus) &&
        Objects.equals(this.currentStatusUpdate, projectBase.currentStatusUpdate) &&
        Objects.equals(this.customFieldSettings, projectBase.customFieldSettings) &&
        Objects.equals(this.defaultView, projectBase.defaultView) &&
        Objects.equals(this.dueDate, projectBase.dueDate) &&
        Objects.equals(this.dueOn, projectBase.dueOn) &&
        Objects.equals(this.htmlNotes, projectBase.htmlNotes) &&
        Objects.equals(this.isTemplate, projectBase.isTemplate) &&
        Objects.equals(this.members, projectBase.members) &&
        Objects.equals(this.modifiedAt, projectBase.modifiedAt) &&
        Objects.equals(this.notes, projectBase.notes) &&
        Objects.equals(this._public, projectBase._public) &&
        Objects.equals(this.startOn, projectBase.startOn) &&
        Objects.equals(this.workspace, projectBase.workspace);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, name, archived, color, createdAt, currentStatus, currentStatusUpdate, customFieldSettings, defaultView, dueDate, dueOn, htmlNotes, isTemplate, members, modifiedAt, notes, _public, startOn, workspace);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectBase {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    currentStatusUpdate: ").append(toIndentedString(currentStatusUpdate)).append("\n");
    sb.append("    customFieldSettings: ").append(toIndentedString(customFieldSettings)).append("\n");
    sb.append("    defaultView: ").append(toIndentedString(defaultView)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    htmlNotes: ").append(toIndentedString(htmlNotes)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("name");
    openapiFields.add("archived");
    openapiFields.add("color");
    openapiFields.add("created_at");
    openapiFields.add("current_status");
    openapiFields.add("current_status_update");
    openapiFields.add("custom_field_settings");
    openapiFields.add("default_view");
    openapiFields.add("due_date");
    openapiFields.add("due_on");
    openapiFields.add("html_notes");
    openapiFields.add("is_template");
    openapiFields.add("members");
    openapiFields.add("modified_at");
    openapiFields.add("notes");
    openapiFields.add("public");
    openapiFields.add("start_on");
    openapiFields.add("workspace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectBase is not found in the empty JSON string", ProjectBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        ColorEnum.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `current_status`
      if (jsonObj.get("current_status") != null && !jsonObj.get("current_status").isJsonNull()) {
        ProjectStatusResponse.validateJsonElement(jsonObj.get("current_status"));
      }
      // validate the optional field `current_status_update`
      if (jsonObj.get("current_status_update") != null && !jsonObj.get("current_status_update").isJsonNull()) {
        StatusUpdateCompact.validateJsonElement(jsonObj.get("current_status_update"));
      }
      if (jsonObj.get("custom_field_settings") != null && !jsonObj.get("custom_field_settings").isJsonNull()) {
        JsonArray jsonArraycustomFieldSettings = jsonObj.getAsJsonArray("custom_field_settings");
        if (jsonArraycustomFieldSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_field_settings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_field_settings` to be an array in the JSON string but got `%s`", jsonObj.get("custom_field_settings").toString()));
          }

          // validate the optional field `custom_field_settings` (array)
          for (int i = 0; i < jsonArraycustomFieldSettings.size(); i++) {
            CustomFieldSettingResponse.validateJsonElement(jsonArraycustomFieldSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("default_view") != null && !jsonObj.get("default_view").isJsonNull()) && !jsonObj.get("default_view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_view").toString()));
      }
      // validate the optional field `default_view`
      if (jsonObj.get("default_view") != null && !jsonObj.get("default_view").isJsonNull()) {
        DefaultViewEnum.validateJsonElement(jsonObj.get("default_view"));
      }
      if ((jsonObj.get("html_notes") != null && !jsonObj.get("html_notes").isJsonNull()) && !jsonObj.get("html_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_notes").toString()));
      }
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            UserCompact.validateJsonElement(jsonArraymembers.get(i));
          };
        }
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `workspace`
      if (jsonObj.get("workspace") != null && !jsonObj.get("workspace").isJsonNull()) {
        ProjectBaseAllOfWorkspace.validateJsonElement(jsonObj.get("workspace"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectBase.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectBase>() {
           @Override
           public void write(JsonWriter out, ProjectBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectBase
   * @throws IOException if the JSON string is invalid with respect to ProjectBase
   */
  public static ProjectBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectBase.class);
  }

  /**
   * Convert an instance of ProjectBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

