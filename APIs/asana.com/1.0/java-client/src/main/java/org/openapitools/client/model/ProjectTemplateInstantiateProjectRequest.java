/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateVariableRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectTemplateInstantiateProjectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectTemplateInstantiateProjectRequest {
  public static final String SERIALIZED_NAME_IS_STRICT = "is_strict";
  @SerializedName(SERIALIZED_NAME_IS_STRICT)
  private Boolean isStrict;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_REQUESTED_DATES = "requested_dates";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATES)
  private List<DateVariableRequest> requestedDates = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_WORKSPACE = "workspace";
  @SerializedName(SERIALIZED_NAME_WORKSPACE)
  private String workspace;

  public ProjectTemplateInstantiateProjectRequest() {
  }

  public ProjectTemplateInstantiateProjectRequest isStrict(Boolean isStrict) {
    this.isStrict = isStrict;
    return this;
  }

  /**
   * *Optional*. If set to &#x60;true&#x60;, the endpoint returns an \&quot;Unprocessable Entity\&quot; error if you fail to provide a calendar date value for any date variable. If set to &#x60;false&#x60;, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).
   * @return isStrict
   */
  @javax.annotation.Nullable
  public Boolean getIsStrict() {
    return isStrict;
  }

  public void setIsStrict(Boolean isStrict) {
    this.isStrict = isStrict;
  }


  public ProjectTemplateInstantiateProjectRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the new project.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectTemplateInstantiateProjectRequest _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Sets the project to public to its team.
   * @return _public
   */
  @javax.annotation.Nonnull
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public ProjectTemplateInstantiateProjectRequest requestedDates(List<DateVariableRequest> requestedDates) {
    this.requestedDates = requestedDates;
    return this;
  }

  public ProjectTemplateInstantiateProjectRequest addRequestedDatesItem(DateVariableRequest requestedDatesItem) {
    if (this.requestedDates == null) {
      this.requestedDates = new ArrayList<>();
    }
    this.requestedDates.add(requestedDatesItem);
    return this;
  }

  /**
   * Array of mappings of date variables to calendar dates.
   * @return requestedDates
   */
  @javax.annotation.Nullable
  public List<DateVariableRequest> getRequestedDates() {
    return requestedDates;
  }

  public void setRequestedDates(List<DateVariableRequest> requestedDates) {
    this.requestedDates = requestedDates;
  }


  public ProjectTemplateInstantiateProjectRequest team(String team) {
    this.team = team;
    return this;
  }

  /**
   * *Conditional*. Sets the team of the new project. If the project template exists in an _organization_, you must specify a value for &#x60;team&#x60; and not &#x60;workspace&#x60;.
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public ProjectTemplateInstantiateProjectRequest workspace(String workspace) {
    this.workspace = workspace;
    return this;
  }

  /**
   * *Conditional*. Sets the workspace of the new project. If the project template exists in a _workspace_, you must specify a value for &#x60;workspace&#x60; and not &#x60;team&#x60;.
   * @return workspace
   */
  @javax.annotation.Nullable
  public String getWorkspace() {
    return workspace;
  }

  public void setWorkspace(String workspace) {
    this.workspace = workspace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectTemplateInstantiateProjectRequest projectTemplateInstantiateProjectRequest = (ProjectTemplateInstantiateProjectRequest) o;
    return Objects.equals(this.isStrict, projectTemplateInstantiateProjectRequest.isStrict) &&
        Objects.equals(this.name, projectTemplateInstantiateProjectRequest.name) &&
        Objects.equals(this._public, projectTemplateInstantiateProjectRequest._public) &&
        Objects.equals(this.requestedDates, projectTemplateInstantiateProjectRequest.requestedDates) &&
        Objects.equals(this.team, projectTemplateInstantiateProjectRequest.team) &&
        Objects.equals(this.workspace, projectTemplateInstantiateProjectRequest.workspace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isStrict, name, _public, requestedDates, team, workspace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectTemplateInstantiateProjectRequest {\n");
    sb.append("    isStrict: ").append(toIndentedString(isStrict)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    requestedDates: ").append(toIndentedString(requestedDates)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_strict");
    openapiFields.add("name");
    openapiFields.add("public");
    openapiFields.add("requested_dates");
    openapiFields.add("team");
    openapiFields.add("workspace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("public");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectTemplateInstantiateProjectRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectTemplateInstantiateProjectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectTemplateInstantiateProjectRequest is not found in the empty JSON string", ProjectTemplateInstantiateProjectRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectTemplateInstantiateProjectRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectTemplateInstantiateProjectRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectTemplateInstantiateProjectRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("requested_dates") != null && !jsonObj.get("requested_dates").isJsonNull()) {
        JsonArray jsonArrayrequestedDates = jsonObj.getAsJsonArray("requested_dates");
        if (jsonArrayrequestedDates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requested_dates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requested_dates` to be an array in the JSON string but got `%s`", jsonObj.get("requested_dates").toString()));
          }

          // validate the optional field `requested_dates` (array)
          for (int i = 0; i < jsonArrayrequestedDates.size(); i++) {
            DateVariableRequest.validateJsonElement(jsonArrayrequestedDates.get(i));
          };
        }
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if ((jsonObj.get("workspace") != null && !jsonObj.get("workspace").isJsonNull()) && !jsonObj.get("workspace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectTemplateInstantiateProjectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectTemplateInstantiateProjectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectTemplateInstantiateProjectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectTemplateInstantiateProjectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectTemplateInstantiateProjectRequest>() {
           @Override
           public void write(JsonWriter out, ProjectTemplateInstantiateProjectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectTemplateInstantiateProjectRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectTemplateInstantiateProjectRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectTemplateInstantiateProjectRequest
   * @throws IOException if the JSON string is invalid with respect to ProjectTemplateInstantiateProjectRequest
   */
  public static ProjectTemplateInstantiateProjectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectTemplateInstantiateProjectRequest.class);
  }

  /**
   * Convert an instance of ProjectTemplateInstantiateProjectRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

