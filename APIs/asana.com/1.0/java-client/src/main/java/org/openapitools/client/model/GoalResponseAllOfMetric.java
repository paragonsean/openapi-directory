/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoalResponseAllOfMetric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoalResponseAllOfMetric {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENT_DISPLAY_VALUE = "current_display_value";
  @SerializedName(SERIALIZED_NAME_CURRENT_DISPLAY_VALUE)
  private String currentDisplayValue;

  public static final String SERIALIZED_NAME_CURRENT_NUMBER_VALUE = "current_number_value";
  @SerializedName(SERIALIZED_NAME_CURRENT_NUMBER_VALUE)
  private BigDecimal currentNumberValue;

  public static final String SERIALIZED_NAME_INITIAL_NUMBER_VALUE = "initial_number_value";
  @SerializedName(SERIALIZED_NAME_INITIAL_NUMBER_VALUE)
  private BigDecimal initialNumberValue;

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Integer precision;

  /**
   * This field defines how the progress value of a goal metric is being calculated. A goal&#39;s progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.
   */
  @JsonAdapter(ProgressSourceEnum.Adapter.class)
  public enum ProgressSourceEnum {
    MANUAL("manual"),
    
    SUBGOAL_PROGRESS("subgoal_progress"),
    
    PROJECT_TASK_COMPLETION("project_task_completion"),
    
    PROJECT_MILESTONE_COMPLETION("project_milestone_completion"),
    
    EXTERNAL("external");

    private String value;

    ProgressSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgressSourceEnum fromValue(String value) {
      for (ProgressSourceEnum b : ProgressSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgressSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgressSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgressSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgressSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProgressSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROGRESS_SOURCE = "progress_source";
  @SerializedName(SERIALIZED_NAME_PROGRESS_SOURCE)
  private ProgressSourceEnum progressSource;

  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
   */
  @JsonAdapter(ResourceSubtypeEnum.Adapter.class)
  public enum ResourceSubtypeEnum {
    NUMBER("number");

    private String value;

    ResourceSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceSubtypeEnum fromValue(String value) {
      for (ResourceSubtypeEnum b : ResourceSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceSubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceSubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private ResourceSubtypeEnum resourceSubtype;

  public static final String SERIALIZED_NAME_TARGET_NUMBER_VALUE = "target_number_value";
  @SerializedName(SERIALIZED_NAME_TARGET_NUMBER_VALUE)
  private BigDecimal targetNumberValue;

  /**
   * A supported unit of measure for the goal metric, or none.
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    NONE("none"),
    
    CURRENCY("currency"),
    
    PERCENTAGE("percentage");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public static final String SERIALIZED_NAME_CAN_MANAGE = "can_manage";
  @SerializedName(SERIALIZED_NAME_CAN_MANAGE)
  private Boolean canManage;

  public GoalResponseAllOfMetric() {
  }

  public GoalResponseAllOfMetric(
     String gid, 
     String resourceType, 
     String currentDisplayValue, 
     ResourceSubtypeEnum resourceSubtype, 
     Boolean canManage
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.currentDisplayValue = currentDisplayValue;
    this.resourceSubtype = resourceSubtype;
    this.canManage = canManage;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public GoalResponseAllOfMetric currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code to format this custom field. This will be null if the &#x60;unit&#x60; is not &#x60;currency&#x60;.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  /**
   * This string is the current value of a goal metric of type string.
   * @return currentDisplayValue
   */
  @javax.annotation.Nullable
  public String getCurrentDisplayValue() {
    return currentDisplayValue;
  }



  public GoalResponseAllOfMetric currentNumberValue(BigDecimal currentNumberValue) {
    this.currentNumberValue = currentNumberValue;
    return this;
  }

  /**
   * This number is the current value of a goal metric of type number.
   * @return currentNumberValue
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentNumberValue() {
    return currentNumberValue;
  }

  public void setCurrentNumberValue(BigDecimal currentNumberValue) {
    this.currentNumberValue = currentNumberValue;
  }


  public GoalResponseAllOfMetric initialNumberValue(BigDecimal initialNumberValue) {
    this.initialNumberValue = initialNumberValue;
    return this;
  }

  /**
   * This number is the start value of a goal metric of type number.
   * @return initialNumberValue
   */
  @javax.annotation.Nullable
  public BigDecimal getInitialNumberValue() {
    return initialNumberValue;
  }

  public void setInitialNumberValue(BigDecimal initialNumberValue) {
    this.initialNumberValue = initialNumberValue;
  }


  public GoalResponseAllOfMetric precision(Integer precision) {
    this.precision = precision;
    return this;
  }

  /**
   * *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
   * @return precision
   */
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public GoalResponseAllOfMetric progressSource(ProgressSourceEnum progressSource) {
    this.progressSource = progressSource;
    return this;
  }

  /**
   * This field defines how the progress value of a goal metric is being calculated. A goal&#39;s progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.
   * @return progressSource
   */
  @javax.annotation.Nullable
  public ProgressSourceEnum getProgressSource() {
    return progressSource;
  }

  public void setProgressSource(ProgressSourceEnum progressSource) {
    this.progressSource = progressSource;
  }


  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
   * @return resourceSubtype
   */
  @javax.annotation.Nullable
  public ResourceSubtypeEnum getResourceSubtype() {
    return resourceSubtype;
  }



  public GoalResponseAllOfMetric targetNumberValue(BigDecimal targetNumberValue) {
    this.targetNumberValue = targetNumberValue;
    return this;
  }

  /**
   * This number is the end value of a goal metric of type number. This number cannot equal &#x60;initial_number_value&#x60;.
   * @return targetNumberValue
   */
  @javax.annotation.Nullable
  public BigDecimal getTargetNumberValue() {
    return targetNumberValue;
  }

  public void setTargetNumberValue(BigDecimal targetNumberValue) {
    this.targetNumberValue = targetNumberValue;
  }


  public GoalResponseAllOfMetric unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * A supported unit of measure for the goal metric, or none.
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  /**
   * *Conditional*. Only relevant for &#x60;progress_source&#x60; of type &#x60;external&#x60;. This boolean indicates whether the requester has the ability to update the current value of this metric. This returns &#x60;true&#x60; if the external metric was created by the requester, &#x60;false&#x60; otherwise.
   * @return canManage
   */
  @javax.annotation.Nullable
  public Boolean getCanManage() {
    return canManage;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoalResponseAllOfMetric goalResponseAllOfMetric = (GoalResponseAllOfMetric) o;
    return Objects.equals(this.gid, goalResponseAllOfMetric.gid) &&
        Objects.equals(this.resourceType, goalResponseAllOfMetric.resourceType) &&
        Objects.equals(this.currencyCode, goalResponseAllOfMetric.currencyCode) &&
        Objects.equals(this.currentDisplayValue, goalResponseAllOfMetric.currentDisplayValue) &&
        Objects.equals(this.currentNumberValue, goalResponseAllOfMetric.currentNumberValue) &&
        Objects.equals(this.initialNumberValue, goalResponseAllOfMetric.initialNumberValue) &&
        Objects.equals(this.precision, goalResponseAllOfMetric.precision) &&
        Objects.equals(this.progressSource, goalResponseAllOfMetric.progressSource) &&
        Objects.equals(this.resourceSubtype, goalResponseAllOfMetric.resourceSubtype) &&
        Objects.equals(this.targetNumberValue, goalResponseAllOfMetric.targetNumberValue) &&
        Objects.equals(this.unit, goalResponseAllOfMetric.unit) &&
        Objects.equals(this.canManage, goalResponseAllOfMetric.canManage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, currencyCode, currentDisplayValue, currentNumberValue, initialNumberValue, precision, progressSource, resourceSubtype, targetNumberValue, unit, canManage);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoalResponseAllOfMetric {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currentDisplayValue: ").append(toIndentedString(currentDisplayValue)).append("\n");
    sb.append("    currentNumberValue: ").append(toIndentedString(currentNumberValue)).append("\n");
    sb.append("    initialNumberValue: ").append(toIndentedString(initialNumberValue)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    progressSource: ").append(toIndentedString(progressSource)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    targetNumberValue: ").append(toIndentedString(targetNumberValue)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    canManage: ").append(toIndentedString(canManage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("currency_code");
    openapiFields.add("current_display_value");
    openapiFields.add("current_number_value");
    openapiFields.add("initial_number_value");
    openapiFields.add("precision");
    openapiFields.add("progress_source");
    openapiFields.add("resource_subtype");
    openapiFields.add("target_number_value");
    openapiFields.add("unit");
    openapiFields.add("can_manage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoalResponseAllOfMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoalResponseAllOfMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoalResponseAllOfMetric is not found in the empty JSON string", GoalResponseAllOfMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoalResponseAllOfMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoalResponseAllOfMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("current_display_value") != null && !jsonObj.get("current_display_value").isJsonNull()) && !jsonObj.get("current_display_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_display_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_display_value").toString()));
      }
      if ((jsonObj.get("progress_source") != null && !jsonObj.get("progress_source").isJsonNull()) && !jsonObj.get("progress_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progress_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progress_source").toString()));
      }
      // validate the optional field `progress_source`
      if (jsonObj.get("progress_source") != null && !jsonObj.get("progress_source").isJsonNull()) {
        ProgressSourceEnum.validateJsonElement(jsonObj.get("progress_source"));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      // validate the optional field `resource_subtype`
      if (jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) {
        ResourceSubtypeEnum.validateJsonElement(jsonObj.get("resource_subtype"));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        UnitEnum.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoalResponseAllOfMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoalResponseAllOfMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoalResponseAllOfMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoalResponseAllOfMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<GoalResponseAllOfMetric>() {
           @Override
           public void write(JsonWriter out, GoalResponseAllOfMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoalResponseAllOfMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoalResponseAllOfMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoalResponseAllOfMetric
   * @throws IOException if the JSON string is invalid with respect to GoalResponseAllOfMetric
   */
  public static GoalResponseAllOfMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoalResponseAllOfMetric.class);
  }

  /**
   * Convert an instance of GoalResponseAllOfMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

