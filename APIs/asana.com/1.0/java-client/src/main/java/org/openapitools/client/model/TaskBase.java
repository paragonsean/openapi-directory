/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AsanaResource;
import org.openapitools.client.model.Like;
import org.openapitools.client.model.TaskBaseAllOfExternal;
import org.openapitools.client.model.TaskBaseAllOfMemberships;
import org.openapitools.client.model.UserCompact;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskBase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskBase {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.
   */
  @JsonAdapter(ResourceSubtypeEnum.Adapter.class)
  public enum ResourceSubtypeEnum {
    DEFAULT_TASK("default_task"),
    
    MILESTONE("milestone"),
    
    SECTION("section"),
    
    APPROVAL("approval");

    private String value;

    ResourceSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceSubtypeEnum fromValue(String value) {
      for (ResourceSubtypeEnum b : ResourceSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceSubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceSubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private ResourceSubtypeEnum resourceSubtype;

  public static final String SERIALIZED_NAME_ACTUAL_TIME_MINUTES = "actual_time_minutes";
  @SerializedName(SERIALIZED_NAME_ACTUAL_TIME_MINUTES)
  private BigDecimal actualTimeMinutes;

  /**
   * *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
   */
  @JsonAdapter(ApprovalStatusEnum.Adapter.class)
  public enum ApprovalStatusEnum {
    PENDING("pending"),
    
    APPROVED("approved"),
    
    REJECTED("rejected"),
    
    CHANGES_REQUESTED("changes_requested");

    private String value;

    ApprovalStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalStatusEnum fromValue(String value) {
      for (ApprovalStatusEnum b : ApprovalStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApprovalStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_STATUS = "approval_status";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATUS)
  private ApprovalStatusEnum approvalStatus;

  /**
   * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
   */
  @JsonAdapter(AssigneeStatusEnum.Adapter.class)
  public enum AssigneeStatusEnum {
    TODAY("today"),
    
    UPCOMING("upcoming"),
    
    LATER("later"),
    
    NEW("new"),
    
    INBOX("inbox");

    private String value;

    AssigneeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssigneeStatusEnum fromValue(String value) {
      for (AssigneeStatusEnum b : AssigneeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssigneeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssigneeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssigneeStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssigneeStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSIGNEE_STATUS = "assignee_status";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_STATUS)
  private AssigneeStatusEnum assigneeStatus;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private OffsetDateTime completedAt;

  public static final String SERIALIZED_NAME_COMPLETED_BY = "completed_by";
  @SerializedName(SERIALIZED_NAME_COMPLETED_BY)
  private UserCompact completedBy;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<AsanaResource> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPENDENTS = "dependents";
  @SerializedName(SERIALIZED_NAME_DEPENDENTS)
  private List<AsanaResource> dependents = new ArrayList<>();

  public static final String SERIALIZED_NAME_DUE_AT = "due_at";
  @SerializedName(SERIALIZED_NAME_DUE_AT)
  private LocalDate dueAt;

  public static final String SERIALIZED_NAME_DUE_ON = "due_on";
  @SerializedName(SERIALIZED_NAME_DUE_ON)
  private LocalDate dueOn;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private TaskBaseAllOfExternal external;

  public static final String SERIALIZED_NAME_HEARTED = "hearted";
  @SerializedName(SERIALIZED_NAME_HEARTED)
  private Boolean hearted;

  public static final String SERIALIZED_NAME_HEARTS = "hearts";
  @SerializedName(SERIALIZED_NAME_HEARTS)
  private List<Like> hearts = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTML_NOTES = "html_notes";
  @SerializedName(SERIALIZED_NAME_HTML_NOTES)
  private String htmlNotes;

  public static final String SERIALIZED_NAME_IS_RENDERED_AS_SEPARATOR = "is_rendered_as_separator";
  @SerializedName(SERIALIZED_NAME_IS_RENDERED_AS_SEPARATOR)
  private Boolean isRenderedAsSeparator;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Boolean liked;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private List<Like> likes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBERSHIPS = "memberships";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS)
  private List<TaskBaseAllOfMemberships> memberships = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NUM_HEARTS = "num_hearts";
  @SerializedName(SERIALIZED_NAME_NUM_HEARTS)
  private Integer numHearts;

  public static final String SERIALIZED_NAME_NUM_LIKES = "num_likes";
  @SerializedName(SERIALIZED_NAME_NUM_LIKES)
  private Integer numLikes;

  public static final String SERIALIZED_NAME_NUM_SUBTASKS = "num_subtasks";
  @SerializedName(SERIALIZED_NAME_NUM_SUBTASKS)
  private Integer numSubtasks;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private LocalDate startAt;

  public static final String SERIALIZED_NAME_START_ON = "start_on";
  @SerializedName(SERIALIZED_NAME_START_ON)
  private LocalDate startOn;

  public TaskBase() {
  }

  public TaskBase(
     String gid, 
     String resourceType, 
     BigDecimal actualTimeMinutes, 
     OffsetDateTime completedAt, 
     OffsetDateTime createdAt, 
     List<AsanaResource> dependencies, 
     List<AsanaResource> dependents, 
     Boolean hearted, 
     List<Like> hearts, 
     Boolean isRenderedAsSeparator, 
     List<Like> likes, 
     List<TaskBaseAllOfMemberships> memberships, 
     OffsetDateTime modifiedAt, 
     Integer numHearts, 
     Integer numLikes, 
     Integer numSubtasks
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.actualTimeMinutes = actualTimeMinutes;
    this.completedAt = completedAt;
    this.createdAt = createdAt;
    this.dependencies = dependencies;
    this.dependents = dependents;
    this.hearted = hearted;
    this.hearts = hearts;
    this.isRenderedAsSeparator = isRenderedAsSeparator;
    this.likes = likes;
    this.memberships = memberships;
    this.modifiedAt = modifiedAt;
    this.numHearts = numHearts;
    this.numLikes = numLikes;
    this.numSubtasks = numSubtasks;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public TaskBase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TaskBase resourceSubtype(ResourceSubtypeEnum resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
    return this;
  }

  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.
   * @return resourceSubtype
   */
  @javax.annotation.Nullable
  public ResourceSubtypeEnum getResourceSubtype() {
    return resourceSubtype;
  }

  public void setResourceSubtype(ResourceSubtypeEnum resourceSubtype) {
    this.resourceSubtype = resourceSubtype;
  }


  /**
   * This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
   * @return actualTimeMinutes
   */
  @javax.annotation.Nullable
  public BigDecimal getActualTimeMinutes() {
    return actualTimeMinutes;
  }



  public TaskBase approvalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
    return this;
  }

  /**
   * *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
   * @return approvalStatus
   */
  @javax.annotation.Nullable
  public ApprovalStatusEnum getApprovalStatus() {
    return approvalStatus;
  }

  public void setApprovalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
  }


  public TaskBase assigneeStatus(AssigneeStatusEnum assigneeStatus) {
    this.assigneeStatus = assigneeStatus;
    return this;
  }

  /**
   * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
   * @return assigneeStatus
   */
  @javax.annotation.Nullable
  public AssigneeStatusEnum getAssigneeStatus() {
    return assigneeStatus;
  }

  public void setAssigneeStatus(AssigneeStatusEnum assigneeStatus) {
    this.assigneeStatus = assigneeStatus;
  }


  public TaskBase completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * True if the task is currently marked complete, false if not.
   * @return completed
   */
  @javax.annotation.Nullable
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  /**
   * The time at which this task was completed, or null if the task is incomplete.
   * @return completedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }



  public TaskBase completedBy(UserCompact completedBy) {
    this.completedBy = completedBy;
    return this;
  }

  /**
   * Get completedBy
   * @return completedBy
   */
  @javax.annotation.Nullable
  public UserCompact getCompletedBy() {
    return completedBy;
  }

  public void setCompletedBy(UserCompact completedBy) {
    this.completedBy = completedBy;
  }


  /**
   * The time at which this resource was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
   * @return dependencies
   */
  @javax.annotation.Nullable
  public List<AsanaResource> getDependencies() {
    return dependencies;
  }



  /**
   * [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
   * @return dependents
   */
  @javax.annotation.Nullable
  public List<AsanaResource> getDependents() {
    return dependents;
  }



  public TaskBase dueAt(LocalDate dueAt) {
    this.dueAt = dueAt;
    return this;
  }

  /**
   * The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.
   * @return dueAt
   */
  @javax.annotation.Nullable
  public LocalDate getDueAt() {
    return dueAt;
  }

  public void setDueAt(LocalDate dueAt) {
    this.dueAt = dueAt;
  }


  public TaskBase dueOn(LocalDate dueOn) {
    this.dueOn = dueOn;
    return this;
  }

  /**
   * The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.
   * @return dueOn
   */
  @javax.annotation.Nullable
  public LocalDate getDueOn() {
    return dueOn;
  }

  public void setDueOn(LocalDate dueOn) {
    this.dueOn = dueOn;
  }


  public TaskBase external(TaskBaseAllOfExternal external) {
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @javax.annotation.Nullable
  public TaskBaseAllOfExternal getExternal() {
    return external;
  }

  public void setExternal(TaskBaseAllOfExternal external) {
    this.external = external;
  }


  /**
   * *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
   * @return hearted
   */
  @javax.annotation.Nullable
  public Boolean getHearted() {
    return hearted;
  }



  /**
   * *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
   * @return hearts
   */
  @javax.annotation.Nullable
  public List<Like> getHearts() {
    return hearts;
  }



  public TaskBase htmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
    return this;
  }

  /**
   * [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
   * @return htmlNotes
   */
  @javax.annotation.Nullable
  public String getHtmlNotes() {
    return htmlNotes;
  }

  public void setHtmlNotes(String htmlNotes) {
    this.htmlNotes = htmlNotes;
  }


  /**
   * [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.
   * @return isRenderedAsSeparator
   */
  @javax.annotation.Nullable
  public Boolean getIsRenderedAsSeparator() {
    return isRenderedAsSeparator;
  }



  public TaskBase liked(Boolean liked) {
    this.liked = liked;
    return this;
  }

  /**
   * True if the task is liked by the authorized user, false if not.
   * @return liked
   */
  @javax.annotation.Nullable
  public Boolean getLiked() {
    return liked;
  }

  public void setLiked(Boolean liked) {
    this.liked = liked;
  }


  /**
   * Array of likes for users who have liked this task.
   * @return likes
   */
  @javax.annotation.Nullable
  public List<Like> getLikes() {
    return likes;
  }



  /**
   * *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.
   * @return memberships
   */
  @javax.annotation.Nullable
  public List<TaskBaseAllOfMemberships> getMemberships() {
    return memberships;
  }



  /**
   * The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }



  public TaskBase notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Free-form textual information associated with the task (i.e. its description).
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  /**
   * *Deprecated - please use likes instead* The number of users who have hearted this task.
   * @return numHearts
   */
  @javax.annotation.Nullable
  public Integer getNumHearts() {
    return numHearts;
  }



  /**
   * The number of users who have liked this task.
   * @return numLikes
   */
  @javax.annotation.Nullable
  public Integer getNumLikes() {
    return numLikes;
  }



  /**
   * [Opt In](/docs/input-output-options). The number of subtasks on this task. 
   * @return numSubtasks
   */
  @javax.annotation.Nullable
  public Integer getNumSubtasks() {
    return numSubtasks;
  }



  public TaskBase startAt(LocalDate startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*
   * @return startAt
   */
  @javax.annotation.Nullable
  public LocalDate getStartAt() {
    return startAt;
  }

  public void setStartAt(LocalDate startAt) {
    this.startAt = startAt;
  }


  public TaskBase startOn(LocalDate startOn) {
    this.startOn = startOn;
    return this;
  }

  /**
   * The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*
   * @return startOn
   */
  @javax.annotation.Nullable
  public LocalDate getStartOn() {
    return startOn;
  }

  public void setStartOn(LocalDate startOn) {
    this.startOn = startOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskBase taskBase = (TaskBase) o;
    return Objects.equals(this.gid, taskBase.gid) &&
        Objects.equals(this.resourceType, taskBase.resourceType) &&
        Objects.equals(this.name, taskBase.name) &&
        Objects.equals(this.resourceSubtype, taskBase.resourceSubtype) &&
        Objects.equals(this.actualTimeMinutes, taskBase.actualTimeMinutes) &&
        Objects.equals(this.approvalStatus, taskBase.approvalStatus) &&
        Objects.equals(this.assigneeStatus, taskBase.assigneeStatus) &&
        Objects.equals(this.completed, taskBase.completed) &&
        Objects.equals(this.completedAt, taskBase.completedAt) &&
        Objects.equals(this.completedBy, taskBase.completedBy) &&
        Objects.equals(this.createdAt, taskBase.createdAt) &&
        Objects.equals(this.dependencies, taskBase.dependencies) &&
        Objects.equals(this.dependents, taskBase.dependents) &&
        Objects.equals(this.dueAt, taskBase.dueAt) &&
        Objects.equals(this.dueOn, taskBase.dueOn) &&
        Objects.equals(this.external, taskBase.external) &&
        Objects.equals(this.hearted, taskBase.hearted) &&
        Objects.equals(this.hearts, taskBase.hearts) &&
        Objects.equals(this.htmlNotes, taskBase.htmlNotes) &&
        Objects.equals(this.isRenderedAsSeparator, taskBase.isRenderedAsSeparator) &&
        Objects.equals(this.liked, taskBase.liked) &&
        Objects.equals(this.likes, taskBase.likes) &&
        Objects.equals(this.memberships, taskBase.memberships) &&
        Objects.equals(this.modifiedAt, taskBase.modifiedAt) &&
        Objects.equals(this.notes, taskBase.notes) &&
        Objects.equals(this.numHearts, taskBase.numHearts) &&
        Objects.equals(this.numLikes, taskBase.numLikes) &&
        Objects.equals(this.numSubtasks, taskBase.numSubtasks) &&
        Objects.equals(this.startAt, taskBase.startAt) &&
        Objects.equals(this.startOn, taskBase.startOn);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, name, resourceSubtype, actualTimeMinutes, approvalStatus, assigneeStatus, completed, completedAt, completedBy, createdAt, dependencies, dependents, dueAt, dueOn, external, hearted, hearts, htmlNotes, isRenderedAsSeparator, liked, likes, memberships, modifiedAt, notes, numHearts, numLikes, numSubtasks, startAt, startOn);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskBase {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    actualTimeMinutes: ").append(toIndentedString(actualTimeMinutes)).append("\n");
    sb.append("    approvalStatus: ").append(toIndentedString(approvalStatus)).append("\n");
    sb.append("    assigneeStatus: ").append(toIndentedString(assigneeStatus)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    completedBy: ").append(toIndentedString(completedBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    dependents: ").append(toIndentedString(dependents)).append("\n");
    sb.append("    dueAt: ").append(toIndentedString(dueAt)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    hearted: ").append(toIndentedString(hearted)).append("\n");
    sb.append("    hearts: ").append(toIndentedString(hearts)).append("\n");
    sb.append("    htmlNotes: ").append(toIndentedString(htmlNotes)).append("\n");
    sb.append("    isRenderedAsSeparator: ").append(toIndentedString(isRenderedAsSeparator)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    memberships: ").append(toIndentedString(memberships)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    numHearts: ").append(toIndentedString(numHearts)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    numSubtasks: ").append(toIndentedString(numSubtasks)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    startOn: ").append(toIndentedString(startOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("name");
    openapiFields.add("resource_subtype");
    openapiFields.add("actual_time_minutes");
    openapiFields.add("approval_status");
    openapiFields.add("assignee_status");
    openapiFields.add("completed");
    openapiFields.add("completed_at");
    openapiFields.add("completed_by");
    openapiFields.add("created_at");
    openapiFields.add("dependencies");
    openapiFields.add("dependents");
    openapiFields.add("due_at");
    openapiFields.add("due_on");
    openapiFields.add("external");
    openapiFields.add("hearted");
    openapiFields.add("hearts");
    openapiFields.add("html_notes");
    openapiFields.add("is_rendered_as_separator");
    openapiFields.add("liked");
    openapiFields.add("likes");
    openapiFields.add("memberships");
    openapiFields.add("modified_at");
    openapiFields.add("notes");
    openapiFields.add("num_hearts");
    openapiFields.add("num_likes");
    openapiFields.add("num_subtasks");
    openapiFields.add("start_at");
    openapiFields.add("start_on");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskBase is not found in the empty JSON string", TaskBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      // validate the optional field `resource_subtype`
      if (jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) {
        ResourceSubtypeEnum.validateJsonElement(jsonObj.get("resource_subtype"));
      }
      if ((jsonObj.get("approval_status") != null && !jsonObj.get("approval_status").isJsonNull()) && !jsonObj.get("approval_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approval_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approval_status").toString()));
      }
      // validate the optional field `approval_status`
      if (jsonObj.get("approval_status") != null && !jsonObj.get("approval_status").isJsonNull()) {
        ApprovalStatusEnum.validateJsonElement(jsonObj.get("approval_status"));
      }
      if ((jsonObj.get("assignee_status") != null && !jsonObj.get("assignee_status").isJsonNull()) && !jsonObj.get("assignee_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignee_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignee_status").toString()));
      }
      // validate the optional field `assignee_status`
      if (jsonObj.get("assignee_status") != null && !jsonObj.get("assignee_status").isJsonNull()) {
        AssigneeStatusEnum.validateJsonElement(jsonObj.get("assignee_status"));
      }
      // validate the optional field `completed_by`
      if (jsonObj.get("completed_by") != null && !jsonObj.get("completed_by").isJsonNull()) {
        UserCompact.validateJsonElement(jsonObj.get("completed_by"));
      }
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
        if (jsonArraydependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
          }

          // validate the optional field `dependencies` (array)
          for (int i = 0; i < jsonArraydependencies.size(); i++) {
            AsanaResource.validateJsonElement(jsonArraydependencies.get(i));
          };
        }
      }
      if (jsonObj.get("dependents") != null && !jsonObj.get("dependents").isJsonNull()) {
        JsonArray jsonArraydependents = jsonObj.getAsJsonArray("dependents");
        if (jsonArraydependents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependents` to be an array in the JSON string but got `%s`", jsonObj.get("dependents").toString()));
          }

          // validate the optional field `dependents` (array)
          for (int i = 0; i < jsonArraydependents.size(); i++) {
            AsanaResource.validateJsonElement(jsonArraydependents.get(i));
          };
        }
      }
      // validate the optional field `external`
      if (jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) {
        TaskBaseAllOfExternal.validateJsonElement(jsonObj.get("external"));
      }
      if (jsonObj.get("hearts") != null && !jsonObj.get("hearts").isJsonNull()) {
        JsonArray jsonArrayhearts = jsonObj.getAsJsonArray("hearts");
        if (jsonArrayhearts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hearts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hearts` to be an array in the JSON string but got `%s`", jsonObj.get("hearts").toString()));
          }

          // validate the optional field `hearts` (array)
          for (int i = 0; i < jsonArrayhearts.size(); i++) {
            Like.validateJsonElement(jsonArrayhearts.get(i));
          };
        }
      }
      if ((jsonObj.get("html_notes") != null && !jsonObj.get("html_notes").isJsonNull()) && !jsonObj.get("html_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_notes").toString()));
      }
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        JsonArray jsonArraylikes = jsonObj.getAsJsonArray("likes");
        if (jsonArraylikes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("likes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `likes` to be an array in the JSON string but got `%s`", jsonObj.get("likes").toString()));
          }

          // validate the optional field `likes` (array)
          for (int i = 0; i < jsonArraylikes.size(); i++) {
            Like.validateJsonElement(jsonArraylikes.get(i));
          };
        }
      }
      if (jsonObj.get("memberships") != null && !jsonObj.get("memberships").isJsonNull()) {
        JsonArray jsonArraymemberships = jsonObj.getAsJsonArray("memberships");
        if (jsonArraymemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memberships` to be an array in the JSON string but got `%s`", jsonObj.get("memberships").toString()));
          }

          // validate the optional field `memberships` (array)
          for (int i = 0; i < jsonArraymemberships.size(); i++) {
            TaskBaseAllOfMemberships.validateJsonElement(jsonArraymemberships.get(i));
          };
        }
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskBase.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskBase>() {
           @Override
           public void write(JsonWriter out, TaskBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskBase
   * @throws IOException if the JSON string is invalid with respect to TaskBase
   */
  public static TaskBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskBase.class);
  }

  /**
   * Convert an instance of TaskBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

