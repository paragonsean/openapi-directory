/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetPortfolioMembership200Response;
import org.openapitools.client.model.GetPortfolioMemberships200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortfolioMembershipsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortfolioMembershipsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioMembershipsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPortfolioMembership
     * @param portfolioMembershipGid  (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioMembershipCall(String portfolioMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio_memberships/{portfolio_membership_gid}"
            .replace("{" + "portfolio_membership_gid" + "}", localVarApiClient.escapeString(portfolioMembershipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioMembershipValidateBeforeCall(String portfolioMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioMembershipGid' is set
        if (portfolioMembershipGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioMembershipGid' when calling getPortfolioMembership(Async)");
        }

        return getPortfolioMembershipCall(portfolioMembershipGid, optPretty, optFields, _callback);

    }

    /**
     * Get a portfolio membership
     * Returns the complete portfolio record for a single portfolio membership.
     * @param portfolioMembershipGid  (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return GetPortfolioMembership200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetPortfolioMembership200Response getPortfolioMembership(String portfolioMembershipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<GetPortfolioMembership200Response> localVarResp = getPortfolioMembershipWithHttpInfo(portfolioMembershipGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Get a portfolio membership
     * Returns the complete portfolio record for a single portfolio membership.
     * @param portfolioMembershipGid  (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;GetPortfolioMembership200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPortfolioMembership200Response> getPortfolioMembershipWithHttpInfo(String portfolioMembershipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioMembershipValidateBeforeCall(portfolioMembershipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GetPortfolioMembership200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a portfolio membership (asynchronously)
     * Returns the complete portfolio record for a single portfolio membership.
     * @param portfolioMembershipGid  (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio membership. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioMembershipAsync(String portfolioMembershipGid, Boolean optPretty, List<String> optFields, final ApiCallback<GetPortfolioMembership200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioMembershipValidateBeforeCall(portfolioMembershipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GetPortfolioMembership200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioMemberships
     * @param portfolio The portfolio to filter results on. (optional)
     * @param workspace The workspace to filter results on. (optional)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioMembershipsCall(String portfolio, String workspace, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolio_memberships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (portfolio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolio", portfolio));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioMembershipsValidateBeforeCall(String portfolio, String workspace, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        return getPortfolioMembershipsCall(portfolio, workspace, user, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get multiple portfolio memberships
     * Returns a list of portfolio memberships in compact representation. You must specify &#x60;portfolio&#x60;, &#x60;portfolio&#x60; and &#x60;user&#x60;, or &#x60;workspace&#x60; and &#x60;user&#x60;.
     * @param portfolio The portfolio to filter results on. (optional)
     * @param workspace The workspace to filter results on. (optional)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetPortfolioMemberships200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetPortfolioMemberships200Response getPortfolioMemberships(String portfolio, String workspace, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetPortfolioMemberships200Response> localVarResp = getPortfolioMembershipsWithHttpInfo(portfolio, workspace, user, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get multiple portfolio memberships
     * Returns a list of portfolio memberships in compact representation. You must specify &#x60;portfolio&#x60;, &#x60;portfolio&#x60; and &#x60;user&#x60;, or &#x60;workspace&#x60; and &#x60;user&#x60;.
     * @param portfolio The portfolio to filter results on. (optional)
     * @param workspace The workspace to filter results on. (optional)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetPortfolioMemberships200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPortfolioMemberships200Response> getPortfolioMembershipsWithHttpInfo(String portfolio, String workspace, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioMembershipsValidateBeforeCall(portfolio, workspace, user, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetPortfolioMemberships200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multiple portfolio memberships (asynchronously)
     * Returns a list of portfolio memberships in compact representation. You must specify &#x60;portfolio&#x60;, &#x60;portfolio&#x60; and &#x60;user&#x60;, or &#x60;workspace&#x60; and &#x60;user&#x60;.
     * @param portfolio The portfolio to filter results on. (optional)
     * @param workspace The workspace to filter results on. (optional)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved portfolio memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioMembershipsAsync(String portfolio, String workspace, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetPortfolioMemberships200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioMembershipsValidateBeforeCall(portfolio, workspace, user, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetPortfolioMemberships200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPortfolioMembershipsForPortfolio
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioMembershipsForPortfolioCall(String portfolioGid, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolio_gid}/portfolio_memberships"
            .replace("{" + "portfolio_gid" + "}", localVarApiClient.escapeString(portfolioGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPortfolioMembershipsForPortfolioValidateBeforeCall(String portfolioGid, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portfolioGid' is set
        if (portfolioGid == null) {
            throw new ApiException("Missing the required parameter 'portfolioGid' when calling getPortfolioMembershipsForPortfolio(Async)");
        }

        return getPortfolioMembershipsForPortfolioCall(portfolioGid, user, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get memberships from a portfolio
     * Returns the compact portfolio membership records for the portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetPortfolioMemberships200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetPortfolioMemberships200Response getPortfolioMembershipsForPortfolio(String portfolioGid, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetPortfolioMemberships200Response> localVarResp = getPortfolioMembershipsForPortfolioWithHttpInfo(portfolioGid, user, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get memberships from a portfolio
     * Returns the compact portfolio membership records for the portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetPortfolioMemberships200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPortfolioMemberships200Response> getPortfolioMembershipsForPortfolioWithHttpInfo(String portfolioGid, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getPortfolioMembershipsForPortfolioValidateBeforeCall(portfolioGid, user, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetPortfolioMemberships200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get memberships from a portfolio (asynchronously)
     * Returns the compact portfolio membership records for the portfolio.
     * @param portfolioGid Globally unique identifier for the portfolio. (required)
     * @param user A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. (optional)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested portfolio&#39;s memberships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPortfolioMembershipsForPortfolioAsync(String portfolioGid, String user, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetPortfolioMemberships200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPortfolioMembershipsForPortfolioValidateBeforeCall(portfolioGid, user, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetPortfolioMemberships200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
