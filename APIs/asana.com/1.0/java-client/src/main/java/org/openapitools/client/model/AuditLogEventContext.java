/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The context from which this event originated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditLogEventContext {
  /**
   * The authentication method used in the context of an API request. Only present if the &#x60;context_type&#x60; is &#x60;api&#x60;. Can be one of &#x60;cookie&#x60;, &#x60;oauth&#x60;, &#x60;personal_access_token&#x60;, or &#x60;service_account&#x60;.
   */
  @JsonAdapter(ApiAuthenticationMethodEnum.Adapter.class)
  public enum ApiAuthenticationMethodEnum {
    COOKIE("cookie"),
    
    OAUTH("oauth"),
    
    PERSONAL_ACCESS_TOKEN("personal_access_token"),
    
    SERVICE_ACCOUNT("service_account");

    private String value;

    ApiAuthenticationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiAuthenticationMethodEnum fromValue(String value) {
      for (ApiAuthenticationMethodEnum b : ApiAuthenticationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiAuthenticationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiAuthenticationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiAuthenticationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiAuthenticationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiAuthenticationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_AUTHENTICATION_METHOD = "api_authentication_method";
  @SerializedName(SERIALIZED_NAME_API_AUTHENTICATION_METHOD)
  private ApiAuthenticationMethodEnum apiAuthenticationMethod;

  public static final String SERIALIZED_NAME_CLIENT_IP_ADDRESS = "client_ip_address";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP_ADDRESS)
  private String clientIpAddress;

  /**
   * The type of context. Can be one of &#x60;web&#x60;, &#x60;desktop&#x60;, &#x60;mobile&#x60;, &#x60;asana_support&#x60;, &#x60;asana&#x60;, &#x60;email&#x60;, or &#x60;api&#x60;.
   */
  @JsonAdapter(ContextTypeEnum.Adapter.class)
  public enum ContextTypeEnum {
    WEB("web"),
    
    DESKTOP("desktop"),
    
    MOBILE("mobile"),
    
    ASANA_SUPPORT("asana_support"),
    
    ASANA("asana"),
    
    EMAIL("email"),
    
    API("api");

    private String value;

    ContextTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContextTypeEnum fromValue(String value) {
      for (ContextTypeEnum b : ContextTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContextTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContextTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContextTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContextTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContextTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTEXT_TYPE = "context_type";
  @SerializedName(SERIALIZED_NAME_CONTEXT_TYPE)
  private ContextTypeEnum contextType;

  public static final String SERIALIZED_NAME_OAUTH_APP_NAME = "oauth_app_name";
  @SerializedName(SERIALIZED_NAME_OAUTH_APP_NAME)
  private String oauthAppName;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public AuditLogEventContext() {
  }

  public AuditLogEventContext apiAuthenticationMethod(ApiAuthenticationMethodEnum apiAuthenticationMethod) {
    this.apiAuthenticationMethod = apiAuthenticationMethod;
    return this;
  }

  /**
   * The authentication method used in the context of an API request. Only present if the &#x60;context_type&#x60; is &#x60;api&#x60;. Can be one of &#x60;cookie&#x60;, &#x60;oauth&#x60;, &#x60;personal_access_token&#x60;, or &#x60;service_account&#x60;.
   * @return apiAuthenticationMethod
   */
  @javax.annotation.Nullable
  public ApiAuthenticationMethodEnum getApiAuthenticationMethod() {
    return apiAuthenticationMethod;
  }

  public void setApiAuthenticationMethod(ApiAuthenticationMethodEnum apiAuthenticationMethod) {
    this.apiAuthenticationMethod = apiAuthenticationMethod;
  }


  public AuditLogEventContext clientIpAddress(String clientIpAddress) {
    this.clientIpAddress = clientIpAddress;
    return this;
  }

  /**
   * The IP address of the client that initiated the event, if applicable.
   * @return clientIpAddress
   */
  @javax.annotation.Nullable
  public String getClientIpAddress() {
    return clientIpAddress;
  }

  public void setClientIpAddress(String clientIpAddress) {
    this.clientIpAddress = clientIpAddress;
  }


  public AuditLogEventContext contextType(ContextTypeEnum contextType) {
    this.contextType = contextType;
    return this;
  }

  /**
   * The type of context. Can be one of &#x60;web&#x60;, &#x60;desktop&#x60;, &#x60;mobile&#x60;, &#x60;asana_support&#x60;, &#x60;asana&#x60;, &#x60;email&#x60;, or &#x60;api&#x60;.
   * @return contextType
   */
  @javax.annotation.Nullable
  public ContextTypeEnum getContextType() {
    return contextType;
  }

  public void setContextType(ContextTypeEnum contextType) {
    this.contextType = contextType;
  }


  public AuditLogEventContext oauthAppName(String oauthAppName) {
    this.oauthAppName = oauthAppName;
    return this;
  }

  /**
   * The name of the OAuth App that initiated the event. Only present if the &#x60;api_authentication_method&#x60; is &#x60;oauth&#x60;.
   * @return oauthAppName
   */
  @javax.annotation.Nullable
  public String getOauthAppName() {
    return oauthAppName;
  }

  public void setOauthAppName(String oauthAppName) {
    this.oauthAppName = oauthAppName;
  }


  public AuditLogEventContext userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * The user agent of the client that initiated the event, if applicable.
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLogEventContext auditLogEventContext = (AuditLogEventContext) o;
    return Objects.equals(this.apiAuthenticationMethod, auditLogEventContext.apiAuthenticationMethod) &&
        Objects.equals(this.clientIpAddress, auditLogEventContext.clientIpAddress) &&
        Objects.equals(this.contextType, auditLogEventContext.contextType) &&
        Objects.equals(this.oauthAppName, auditLogEventContext.oauthAppName) &&
        Objects.equals(this.userAgent, auditLogEventContext.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiAuthenticationMethod, clientIpAddress, contextType, oauthAppName, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLogEventContext {\n");
    sb.append("    apiAuthenticationMethod: ").append(toIndentedString(apiAuthenticationMethod)).append("\n");
    sb.append("    clientIpAddress: ").append(toIndentedString(clientIpAddress)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("    oauthAppName: ").append(toIndentedString(oauthAppName)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_authentication_method");
    openapiFields.add("client_ip_address");
    openapiFields.add("context_type");
    openapiFields.add("oauth_app_name");
    openapiFields.add("user_agent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditLogEventContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditLogEventContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditLogEventContext is not found in the empty JSON string", AuditLogEventContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditLogEventContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditLogEventContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api_authentication_method") != null && !jsonObj.get("api_authentication_method").isJsonNull()) && !jsonObj.get("api_authentication_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_authentication_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_authentication_method").toString()));
      }
      // validate the optional field `api_authentication_method`
      if (jsonObj.get("api_authentication_method") != null && !jsonObj.get("api_authentication_method").isJsonNull()) {
        ApiAuthenticationMethodEnum.validateJsonElement(jsonObj.get("api_authentication_method"));
      }
      if ((jsonObj.get("client_ip_address") != null && !jsonObj.get("client_ip_address").isJsonNull()) && !jsonObj.get("client_ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip_address").toString()));
      }
      if ((jsonObj.get("context_type") != null && !jsonObj.get("context_type").isJsonNull()) && !jsonObj.get("context_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context_type").toString()));
      }
      // validate the optional field `context_type`
      if (jsonObj.get("context_type") != null && !jsonObj.get("context_type").isJsonNull()) {
        ContextTypeEnum.validateJsonElement(jsonObj.get("context_type"));
      }
      if ((jsonObj.get("oauth_app_name") != null && !jsonObj.get("oauth_app_name").isJsonNull()) && !jsonObj.get("oauth_app_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_app_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_app_name").toString()));
      }
      if ((jsonObj.get("user_agent") != null && !jsonObj.get("user_agent").isJsonNull()) && !jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditLogEventContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditLogEventContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditLogEventContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditLogEventContext.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditLogEventContext>() {
           @Override
           public void write(JsonWriter out, AuditLogEventContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditLogEventContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditLogEventContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditLogEventContext
   * @throws IOException if the JSON string is invalid with respect to AuditLogEventContext
   */
  public static AuditLogEventContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditLogEventContext.class);
  }

  /**
   * Convert an instance of AuditLogEventContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

