/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A map of the userâ€™s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserBaseResponseAllOfPhoto {
  public static final String SERIALIZED_NAME_IMAGE1024X1024 = "image_1024x1024";
  @SerializedName(SERIALIZED_NAME_IMAGE1024X1024)
  private URI image1024x1024;

  public static final String SERIALIZED_NAME_IMAGE128X128 = "image_128x128";
  @SerializedName(SERIALIZED_NAME_IMAGE128X128)
  private URI image128x128;

  public static final String SERIALIZED_NAME_IMAGE21X21 = "image_21x21";
  @SerializedName(SERIALIZED_NAME_IMAGE21X21)
  private URI image21x21;

  public static final String SERIALIZED_NAME_IMAGE27X27 = "image_27x27";
  @SerializedName(SERIALIZED_NAME_IMAGE27X27)
  private URI image27x27;

  public static final String SERIALIZED_NAME_IMAGE36X36 = "image_36x36";
  @SerializedName(SERIALIZED_NAME_IMAGE36X36)
  private URI image36x36;

  public static final String SERIALIZED_NAME_IMAGE60X60 = "image_60x60";
  @SerializedName(SERIALIZED_NAME_IMAGE60X60)
  private URI image60x60;

  public UserBaseResponseAllOfPhoto() {
  }

  public UserBaseResponseAllOfPhoto image1024x1024(URI image1024x1024) {
    this.image1024x1024 = image1024x1024;
    return this;
  }

  /**
   * Get image1024x1024
   * @return image1024x1024
   */
  @javax.annotation.Nullable
  public URI getImage1024x1024() {
    return image1024x1024;
  }

  public void setImage1024x1024(URI image1024x1024) {
    this.image1024x1024 = image1024x1024;
  }


  public UserBaseResponseAllOfPhoto image128x128(URI image128x128) {
    this.image128x128 = image128x128;
    return this;
  }

  /**
   * Get image128x128
   * @return image128x128
   */
  @javax.annotation.Nullable
  public URI getImage128x128() {
    return image128x128;
  }

  public void setImage128x128(URI image128x128) {
    this.image128x128 = image128x128;
  }


  public UserBaseResponseAllOfPhoto image21x21(URI image21x21) {
    this.image21x21 = image21x21;
    return this;
  }

  /**
   * Get image21x21
   * @return image21x21
   */
  @javax.annotation.Nullable
  public URI getImage21x21() {
    return image21x21;
  }

  public void setImage21x21(URI image21x21) {
    this.image21x21 = image21x21;
  }


  public UserBaseResponseAllOfPhoto image27x27(URI image27x27) {
    this.image27x27 = image27x27;
    return this;
  }

  /**
   * Get image27x27
   * @return image27x27
   */
  @javax.annotation.Nullable
  public URI getImage27x27() {
    return image27x27;
  }

  public void setImage27x27(URI image27x27) {
    this.image27x27 = image27x27;
  }


  public UserBaseResponseAllOfPhoto image36x36(URI image36x36) {
    this.image36x36 = image36x36;
    return this;
  }

  /**
   * Get image36x36
   * @return image36x36
   */
  @javax.annotation.Nullable
  public URI getImage36x36() {
    return image36x36;
  }

  public void setImage36x36(URI image36x36) {
    this.image36x36 = image36x36;
  }


  public UserBaseResponseAllOfPhoto image60x60(URI image60x60) {
    this.image60x60 = image60x60;
    return this;
  }

  /**
   * Get image60x60
   * @return image60x60
   */
  @javax.annotation.Nullable
  public URI getImage60x60() {
    return image60x60;
  }

  public void setImage60x60(URI image60x60) {
    this.image60x60 = image60x60;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserBaseResponseAllOfPhoto userBaseResponseAllOfPhoto = (UserBaseResponseAllOfPhoto) o;
    return Objects.equals(this.image1024x1024, userBaseResponseAllOfPhoto.image1024x1024) &&
        Objects.equals(this.image128x128, userBaseResponseAllOfPhoto.image128x128) &&
        Objects.equals(this.image21x21, userBaseResponseAllOfPhoto.image21x21) &&
        Objects.equals(this.image27x27, userBaseResponseAllOfPhoto.image27x27) &&
        Objects.equals(this.image36x36, userBaseResponseAllOfPhoto.image36x36) &&
        Objects.equals(this.image60x60, userBaseResponseAllOfPhoto.image60x60);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image1024x1024, image128x128, image21x21, image27x27, image36x36, image60x60);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserBaseResponseAllOfPhoto {\n");
    sb.append("    image1024x1024: ").append(toIndentedString(image1024x1024)).append("\n");
    sb.append("    image128x128: ").append(toIndentedString(image128x128)).append("\n");
    sb.append("    image21x21: ").append(toIndentedString(image21x21)).append("\n");
    sb.append("    image27x27: ").append(toIndentedString(image27x27)).append("\n");
    sb.append("    image36x36: ").append(toIndentedString(image36x36)).append("\n");
    sb.append("    image60x60: ").append(toIndentedString(image60x60)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image_1024x1024");
    openapiFields.add("image_128x128");
    openapiFields.add("image_21x21");
    openapiFields.add("image_27x27");
    openapiFields.add("image_36x36");
    openapiFields.add("image_60x60");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserBaseResponseAllOfPhoto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserBaseResponseAllOfPhoto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserBaseResponseAllOfPhoto is not found in the empty JSON string", UserBaseResponseAllOfPhoto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserBaseResponseAllOfPhoto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserBaseResponseAllOfPhoto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("image_1024x1024") != null && !jsonObj.get("image_1024x1024").isJsonNull()) && !jsonObj.get("image_1024x1024").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_1024x1024` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_1024x1024").toString()));
      }
      if ((jsonObj.get("image_128x128") != null && !jsonObj.get("image_128x128").isJsonNull()) && !jsonObj.get("image_128x128").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_128x128` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_128x128").toString()));
      }
      if ((jsonObj.get("image_21x21") != null && !jsonObj.get("image_21x21").isJsonNull()) && !jsonObj.get("image_21x21").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_21x21` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_21x21").toString()));
      }
      if ((jsonObj.get("image_27x27") != null && !jsonObj.get("image_27x27").isJsonNull()) && !jsonObj.get("image_27x27").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_27x27` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_27x27").toString()));
      }
      if ((jsonObj.get("image_36x36") != null && !jsonObj.get("image_36x36").isJsonNull()) && !jsonObj.get("image_36x36").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_36x36` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_36x36").toString()));
      }
      if ((jsonObj.get("image_60x60") != null && !jsonObj.get("image_60x60").isJsonNull()) && !jsonObj.get("image_60x60").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_60x60` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_60x60").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserBaseResponseAllOfPhoto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserBaseResponseAllOfPhoto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserBaseResponseAllOfPhoto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserBaseResponseAllOfPhoto.class));

       return (TypeAdapter<T>) new TypeAdapter<UserBaseResponseAllOfPhoto>() {
           @Override
           public void write(JsonWriter out, UserBaseResponseAllOfPhoto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserBaseResponseAllOfPhoto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserBaseResponseAllOfPhoto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserBaseResponseAllOfPhoto
   * @throws IOException if the JSON string is invalid with respect to UserBaseResponseAllOfPhoto
   */
  public static UserBaseResponseAllOfPhoto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserBaseResponseAllOfPhoto.class);
  }

  /**
   * Convert an instance of UserBaseResponseAllOfPhoto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

