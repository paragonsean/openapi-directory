/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response object returned from the task count endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskCountResponse {
  public static final String SERIALIZED_NAME_NUM_COMPLETED_MILESTONES = "num_completed_milestones";
  @SerializedName(SERIALIZED_NAME_NUM_COMPLETED_MILESTONES)
  private Integer numCompletedMilestones;

  public static final String SERIALIZED_NAME_NUM_COMPLETED_TASKS = "num_completed_tasks";
  @SerializedName(SERIALIZED_NAME_NUM_COMPLETED_TASKS)
  private Integer numCompletedTasks;

  public static final String SERIALIZED_NAME_NUM_INCOMPLETE_MILESTONES = "num_incomplete_milestones";
  @SerializedName(SERIALIZED_NAME_NUM_INCOMPLETE_MILESTONES)
  private Integer numIncompleteMilestones;

  public static final String SERIALIZED_NAME_NUM_INCOMPLETE_TASKS = "num_incomplete_tasks";
  @SerializedName(SERIALIZED_NAME_NUM_INCOMPLETE_TASKS)
  private Integer numIncompleteTasks;

  public static final String SERIALIZED_NAME_NUM_MILESTONES = "num_milestones";
  @SerializedName(SERIALIZED_NAME_NUM_MILESTONES)
  private Integer numMilestones;

  public static final String SERIALIZED_NAME_NUM_TASKS = "num_tasks";
  @SerializedName(SERIALIZED_NAME_NUM_TASKS)
  private Integer numTasks;

  public TaskCountResponse() {
  }

  public TaskCountResponse numCompletedMilestones(Integer numCompletedMilestones) {
    this.numCompletedMilestones = numCompletedMilestones;
    return this;
  }

  /**
   * The number of completed milestones in a project.
   * @return numCompletedMilestones
   */
  @javax.annotation.Nullable
  public Integer getNumCompletedMilestones() {
    return numCompletedMilestones;
  }

  public void setNumCompletedMilestones(Integer numCompletedMilestones) {
    this.numCompletedMilestones = numCompletedMilestones;
  }


  public TaskCountResponse numCompletedTasks(Integer numCompletedTasks) {
    this.numCompletedTasks = numCompletedTasks;
    return this;
  }

  /**
   * The number of completed tasks in a project.
   * @return numCompletedTasks
   */
  @javax.annotation.Nullable
  public Integer getNumCompletedTasks() {
    return numCompletedTasks;
  }

  public void setNumCompletedTasks(Integer numCompletedTasks) {
    this.numCompletedTasks = numCompletedTasks;
  }


  public TaskCountResponse numIncompleteMilestones(Integer numIncompleteMilestones) {
    this.numIncompleteMilestones = numIncompleteMilestones;
    return this;
  }

  /**
   * The number of incomplete milestones in a project.
   * @return numIncompleteMilestones
   */
  @javax.annotation.Nullable
  public Integer getNumIncompleteMilestones() {
    return numIncompleteMilestones;
  }

  public void setNumIncompleteMilestones(Integer numIncompleteMilestones) {
    this.numIncompleteMilestones = numIncompleteMilestones;
  }


  public TaskCountResponse numIncompleteTasks(Integer numIncompleteTasks) {
    this.numIncompleteTasks = numIncompleteTasks;
    return this;
  }

  /**
   * The number of incomplete tasks in a project.
   * @return numIncompleteTasks
   */
  @javax.annotation.Nullable
  public Integer getNumIncompleteTasks() {
    return numIncompleteTasks;
  }

  public void setNumIncompleteTasks(Integer numIncompleteTasks) {
    this.numIncompleteTasks = numIncompleteTasks;
  }


  public TaskCountResponse numMilestones(Integer numMilestones) {
    this.numMilestones = numMilestones;
    return this;
  }

  /**
   * The number of milestones in a project.
   * @return numMilestones
   */
  @javax.annotation.Nullable
  public Integer getNumMilestones() {
    return numMilestones;
  }

  public void setNumMilestones(Integer numMilestones) {
    this.numMilestones = numMilestones;
  }


  public TaskCountResponse numTasks(Integer numTasks) {
    this.numTasks = numTasks;
    return this;
  }

  /**
   * The number of tasks in a project.
   * @return numTasks
   */
  @javax.annotation.Nullable
  public Integer getNumTasks() {
    return numTasks;
  }

  public void setNumTasks(Integer numTasks) {
    this.numTasks = numTasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskCountResponse taskCountResponse = (TaskCountResponse) o;
    return Objects.equals(this.numCompletedMilestones, taskCountResponse.numCompletedMilestones) &&
        Objects.equals(this.numCompletedTasks, taskCountResponse.numCompletedTasks) &&
        Objects.equals(this.numIncompleteMilestones, taskCountResponse.numIncompleteMilestones) &&
        Objects.equals(this.numIncompleteTasks, taskCountResponse.numIncompleteTasks) &&
        Objects.equals(this.numMilestones, taskCountResponse.numMilestones) &&
        Objects.equals(this.numTasks, taskCountResponse.numTasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numCompletedMilestones, numCompletedTasks, numIncompleteMilestones, numIncompleteTasks, numMilestones, numTasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskCountResponse {\n");
    sb.append("    numCompletedMilestones: ").append(toIndentedString(numCompletedMilestones)).append("\n");
    sb.append("    numCompletedTasks: ").append(toIndentedString(numCompletedTasks)).append("\n");
    sb.append("    numIncompleteMilestones: ").append(toIndentedString(numIncompleteMilestones)).append("\n");
    sb.append("    numIncompleteTasks: ").append(toIndentedString(numIncompleteTasks)).append("\n");
    sb.append("    numMilestones: ").append(toIndentedString(numMilestones)).append("\n");
    sb.append("    numTasks: ").append(toIndentedString(numTasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("num_completed_milestones");
    openapiFields.add("num_completed_tasks");
    openapiFields.add("num_incomplete_milestones");
    openapiFields.add("num_incomplete_tasks");
    openapiFields.add("num_milestones");
    openapiFields.add("num_tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskCountResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskCountResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskCountResponse is not found in the empty JSON string", TaskCountResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskCountResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskCountResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskCountResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskCountResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskCountResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskCountResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskCountResponse>() {
           @Override
           public void write(JsonWriter out, TaskCountResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskCountResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskCountResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskCountResponse
   * @throws IOException if the JSON string is invalid with respect to TaskCountResponse
   */
  public static TaskCountResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskCountResponse.class);
  }

  /**
   * Convert an instance of TaskCountResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

