/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddCustomFieldSettingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddCustomFieldSettingRequest {
  public static final String SERIALIZED_NAME_CUSTOM_FIELD = "custom_field";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD)
  private String customField;

  public static final String SERIALIZED_NAME_INSERT_AFTER = "insert_after";
  @SerializedName(SERIALIZED_NAME_INSERT_AFTER)
  private String insertAfter;

  public static final String SERIALIZED_NAME_INSERT_BEFORE = "insert_before";
  @SerializedName(SERIALIZED_NAME_INSERT_BEFORE)
  private String insertBefore;

  public static final String SERIALIZED_NAME_IS_IMPORTANT = "is_important";
  @SerializedName(SERIALIZED_NAME_IS_IMPORTANT)
  private Boolean isImportant;

  public AddCustomFieldSettingRequest() {
  }

  public AddCustomFieldSettingRequest customField(String customField) {
    this.customField = customField;
    return this;
  }

  /**
   * The custom field to associate with this container.
   * @return customField
   */
  @javax.annotation.Nonnull
  public String getCustomField() {
    return customField;
  }

  public void setCustomField(String customField) {
    this.customField = customField;
  }


  public AddCustomFieldSettingRequest insertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
    return this;
  }

  /**
   * A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  &#x60;insert_before&#x60; and &#x60;insert_after&#x60; parameters cannot both be specified.
   * @return insertAfter
   */
  @javax.annotation.Nullable
  public String getInsertAfter() {
    return insertAfter;
  }

  public void setInsertAfter(String insertAfter) {
    this.insertAfter = insertAfter;
  }


  public AddCustomFieldSettingRequest insertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
    return this;
  }

  /**
   * A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  &#x60;insert_before&#x60; and &#x60;insert_after&#x60; parameters cannot both be specified.
   * @return insertBefore
   */
  @javax.annotation.Nullable
  public String getInsertBefore() {
    return insertBefore;
  }

  public void setInsertBefore(String insertBefore) {
    this.insertBefore = insertBefore;
  }


  public AddCustomFieldSettingRequest isImportant(Boolean isImportant) {
    this.isImportant = isImportant;
    return this;
  }

  /**
   * Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).
   * @return isImportant
   */
  @javax.annotation.Nullable
  public Boolean getIsImportant() {
    return isImportant;
  }

  public void setIsImportant(Boolean isImportant) {
    this.isImportant = isImportant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddCustomFieldSettingRequest addCustomFieldSettingRequest = (AddCustomFieldSettingRequest) o;
    return Objects.equals(this.customField, addCustomFieldSettingRequest.customField) &&
        Objects.equals(this.insertAfter, addCustomFieldSettingRequest.insertAfter) &&
        Objects.equals(this.insertBefore, addCustomFieldSettingRequest.insertBefore) &&
        Objects.equals(this.isImportant, addCustomFieldSettingRequest.isImportant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customField, insertAfter, insertBefore, isImportant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddCustomFieldSettingRequest {\n");
    sb.append("    customField: ").append(toIndentedString(customField)).append("\n");
    sb.append("    insertAfter: ").append(toIndentedString(insertAfter)).append("\n");
    sb.append("    insertBefore: ").append(toIndentedString(insertBefore)).append("\n");
    sb.append("    isImportant: ").append(toIndentedString(isImportant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom_field");
    openapiFields.add("insert_after");
    openapiFields.add("insert_before");
    openapiFields.add("is_important");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("custom_field");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddCustomFieldSettingRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddCustomFieldSettingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddCustomFieldSettingRequest is not found in the empty JSON string", AddCustomFieldSettingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddCustomFieldSettingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddCustomFieldSettingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddCustomFieldSettingRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("custom_field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_field").toString()));
      }
      if ((jsonObj.get("insert_after") != null && !jsonObj.get("insert_after").isJsonNull()) && !jsonObj.get("insert_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insert_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insert_after").toString()));
      }
      if ((jsonObj.get("insert_before") != null && !jsonObj.get("insert_before").isJsonNull()) && !jsonObj.get("insert_before").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insert_before` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insert_before").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddCustomFieldSettingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddCustomFieldSettingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddCustomFieldSettingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddCustomFieldSettingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddCustomFieldSettingRequest>() {
           @Override
           public void write(JsonWriter out, AddCustomFieldSettingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddCustomFieldSettingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddCustomFieldSettingRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddCustomFieldSettingRequest
   * @throws IOException if the JSON string is invalid with respect to AddCustomFieldSettingRequest
   */
  public static AddCustomFieldSettingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddCustomFieldSettingRequest.class);
  }

  /**
   * Convert an instance of AddCustomFieldSettingRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

