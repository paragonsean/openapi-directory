/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomFieldCompact;
import org.openapitools.client.model.EnumOption;
import org.openapitools.client.model.Like;
import org.openapitools.client.model.Preview;
import org.openapitools.client.model.ProjectCompact;
import org.openapitools.client.model.SectionCompact;
import org.openapitools.client.model.StoryCompact;
import org.openapitools.client.model.StoryResponseAllOfNewDateValue;
import org.openapitools.client.model.StoryResponseAllOfOldDateValue;
import org.openapitools.client.model.StoryResponseAllOfTarget;
import org.openapitools.client.model.StoryResponseDates;
import org.openapitools.client.model.TagCompact;
import org.openapitools.client.model.TaskCompact;
import org.openapitools.client.model.UserCompact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StoryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoryResponse {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_HTML_TEXT = "html_text";
  @SerializedName(SERIALIZED_NAME_HTML_TEXT)
  private String htmlText;

  public static final String SERIALIZED_NAME_IS_PINNED = "is_pinned";
  @SerializedName(SERIALIZED_NAME_IS_PINNED)
  private Boolean isPinned;

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private String resourceSubtype;

  /**
   * The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
   */
  @JsonAdapter(StickerNameEnum.Adapter.class)
  public enum StickerNameEnum {
    GREEN_CHECKMARK("green_checkmark"),
    
    PEOPLE_DANCING("people_dancing"),
    
    DANCING_UNICORN("dancing_unicorn"),
    
    HEART("heart"),
    
    PARTY_POPPER("party_popper"),
    
    PEOPLE_WAVING_FLAGS("people_waving_flags"),
    
    SPLASHING_NARWHAL("splashing_narwhal"),
    
    TROPHY("trophy"),
    
    YETI_RIDING_UNICORN("yeti_riding_unicorn"),
    
    CELEBRATING_PEOPLE("celebrating_people"),
    
    DETERMINED_CLIMBERS("determined_climbers"),
    
    PHOENIX_SPREADING_LOVE("phoenix_spreading_love");

    private String value;

    StickerNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StickerNameEnum fromValue(String value) {
      for (StickerNameEnum b : StickerNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StickerNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StickerNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StickerNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StickerNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StickerNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STICKER_NAME = "sticker_name";
  @SerializedName(SERIALIZED_NAME_STICKER_NAME)
  private StickerNameEnum stickerName;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private UserCompact assignee;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserCompact createdBy;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD = "custom_field";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD)
  private CustomFieldCompact customField;

  public static final String SERIALIZED_NAME_DEPENDENCY = "dependency";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY)
  private TaskCompact dependency;

  public static final String SERIALIZED_NAME_DUPLICATE_OF = "duplicate_of";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_OF)
  private TaskCompact duplicateOf;

  public static final String SERIALIZED_NAME_DUPLICATED_FROM = "duplicated_from";
  @SerializedName(SERIALIZED_NAME_DUPLICATED_FROM)
  private TaskCompact duplicatedFrom;

  public static final String SERIALIZED_NAME_FOLLOWER = "follower";
  @SerializedName(SERIALIZED_NAME_FOLLOWER)
  private UserCompact follower;

  public static final String SERIALIZED_NAME_HEARTED = "hearted";
  @SerializedName(SERIALIZED_NAME_HEARTED)
  private Boolean hearted;

  public static final String SERIALIZED_NAME_HEARTS = "hearts";
  @SerializedName(SERIALIZED_NAME_HEARTS)
  private List<Like> hearts = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_EDITABLE = "is_editable";
  @SerializedName(SERIALIZED_NAME_IS_EDITABLE)
  private Boolean isEditable;

  public static final String SERIALIZED_NAME_IS_EDITED = "is_edited";
  @SerializedName(SERIALIZED_NAME_IS_EDITED)
  private Boolean isEdited;

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Boolean liked;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private List<Like> likes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_APPROVAL_STATUS = "new_approval_status";
  @SerializedName(SERIALIZED_NAME_NEW_APPROVAL_STATUS)
  private String newApprovalStatus;

  public static final String SERIALIZED_NAME_NEW_DATE_VALUE = "new_date_value";
  @SerializedName(SERIALIZED_NAME_NEW_DATE_VALUE)
  private StoryResponseAllOfNewDateValue newDateValue;

  public static final String SERIALIZED_NAME_NEW_DATES = "new_dates";
  @SerializedName(SERIALIZED_NAME_NEW_DATES)
  private StoryResponseDates newDates;

  public static final String SERIALIZED_NAME_NEW_ENUM_VALUE = "new_enum_value";
  @SerializedName(SERIALIZED_NAME_NEW_ENUM_VALUE)
  private EnumOption newEnumValue;

  public static final String SERIALIZED_NAME_NEW_MULTI_ENUM_VALUES = "new_multi_enum_values";
  @SerializedName(SERIALIZED_NAME_NEW_MULTI_ENUM_VALUES)
  private List<EnumOption> newMultiEnumValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_NAME = "new_name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  private String newName;

  public static final String SERIALIZED_NAME_NEW_NUMBER_VALUE = "new_number_value";
  @SerializedName(SERIALIZED_NAME_NEW_NUMBER_VALUE)
  private Integer newNumberValue;

  public static final String SERIALIZED_NAME_NEW_PEOPLE_VALUE = "new_people_value";
  @SerializedName(SERIALIZED_NAME_NEW_PEOPLE_VALUE)
  private List<UserCompact> newPeopleValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_RESOURCE_SUBTYPE = "new_resource_subtype";
  @SerializedName(SERIALIZED_NAME_NEW_RESOURCE_SUBTYPE)
  private String newResourceSubtype;

  public static final String SERIALIZED_NAME_NEW_SECTION = "new_section";
  @SerializedName(SERIALIZED_NAME_NEW_SECTION)
  private SectionCompact newSection;

  public static final String SERIALIZED_NAME_NEW_TEXT_VALUE = "new_text_value";
  @SerializedName(SERIALIZED_NAME_NEW_TEXT_VALUE)
  private String newTextValue;

  public static final String SERIALIZED_NAME_NUM_HEARTS = "num_hearts";
  @SerializedName(SERIALIZED_NAME_NUM_HEARTS)
  private Integer numHearts;

  public static final String SERIALIZED_NAME_NUM_LIKES = "num_likes";
  @SerializedName(SERIALIZED_NAME_NUM_LIKES)
  private Integer numLikes;

  public static final String SERIALIZED_NAME_OLD_APPROVAL_STATUS = "old_approval_status";
  @SerializedName(SERIALIZED_NAME_OLD_APPROVAL_STATUS)
  private String oldApprovalStatus;

  public static final String SERIALIZED_NAME_OLD_DATE_VALUE = "old_date_value";
  @SerializedName(SERIALIZED_NAME_OLD_DATE_VALUE)
  private StoryResponseAllOfOldDateValue oldDateValue;

  public static final String SERIALIZED_NAME_OLD_DATES = "old_dates";
  @SerializedName(SERIALIZED_NAME_OLD_DATES)
  private StoryResponseDates oldDates;

  public static final String SERIALIZED_NAME_OLD_ENUM_VALUE = "old_enum_value";
  @SerializedName(SERIALIZED_NAME_OLD_ENUM_VALUE)
  private EnumOption oldEnumValue;

  public static final String SERIALIZED_NAME_OLD_MULTI_ENUM_VALUES = "old_multi_enum_values";
  @SerializedName(SERIALIZED_NAME_OLD_MULTI_ENUM_VALUES)
  private List<EnumOption> oldMultiEnumValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_OLD_NAME = "old_name";
  @SerializedName(SERIALIZED_NAME_OLD_NAME)
  private String oldName;

  public static final String SERIALIZED_NAME_OLD_NUMBER_VALUE = "old_number_value";
  @SerializedName(SERIALIZED_NAME_OLD_NUMBER_VALUE)
  private Integer oldNumberValue;

  public static final String SERIALIZED_NAME_OLD_PEOPLE_VALUE = "old_people_value";
  @SerializedName(SERIALIZED_NAME_OLD_PEOPLE_VALUE)
  private List<UserCompact> oldPeopleValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_OLD_RESOURCE_SUBTYPE = "old_resource_subtype";
  @SerializedName(SERIALIZED_NAME_OLD_RESOURCE_SUBTYPE)
  private String oldResourceSubtype;

  public static final String SERIALIZED_NAME_OLD_SECTION = "old_section";
  @SerializedName(SERIALIZED_NAME_OLD_SECTION)
  private SectionCompact oldSection;

  public static final String SERIALIZED_NAME_OLD_TEXT_VALUE = "old_text_value";
  @SerializedName(SERIALIZED_NAME_OLD_TEXT_VALUE)
  private String oldTextValue;

  public static final String SERIALIZED_NAME_PREVIEWS = "previews";
  @SerializedName(SERIALIZED_NAME_PREVIEWS)
  private List<Preview> previews = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectCompact project;

  /**
   * The component of the Asana product the user used to trigger the story.
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    WEB("web"),
    
    EMAIL("email"),
    
    MOBILE("mobile"),
    
    API("api"),
    
    UNKNOWN("unknown");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  public static final String SERIALIZED_NAME_STORY = "story";
  @SerializedName(SERIALIZED_NAME_STORY)
  private StoryCompact story;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private TagCompact tag;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private StoryResponseAllOfTarget target;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private TaskCompact task;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COMMENT("comment"),
    
    SYSTEM("system");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public StoryResponse() {
  }

  public StoryResponse(
     String gid, 
     String resourceType, 
     OffsetDateTime createdAt, 
     String resourceSubtype, 
     Boolean hearted, 
     List<Like> hearts, 
     Boolean isEditable, 
     Boolean isEdited, 
     Boolean liked, 
     List<Like> likes, 
     String newApprovalStatus, 
     List<EnumOption> newMultiEnumValues, 
     String newName, 
     Integer newNumberValue, 
     List<UserCompact> newPeopleValue, 
     String newResourceSubtype, 
     String newTextValue, 
     Integer numHearts, 
     Integer numLikes, 
     String oldApprovalStatus, 
     List<EnumOption> oldMultiEnumValues, 
     Integer oldNumberValue, 
     List<UserCompact> oldPeopleValue, 
     String oldResourceSubtype, 
     String oldTextValue, 
     List<Preview> previews, 
     SourceEnum source, 
     TypeEnum type
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.createdAt = createdAt;
    this.resourceSubtype = resourceSubtype;
    this.hearted = hearted;
    this.hearts = hearts;
    this.isEditable = isEditable;
    this.isEdited = isEdited;
    this.liked = liked;
    this.likes = likes;
    this.newApprovalStatus = newApprovalStatus;
    this.newMultiEnumValues = newMultiEnumValues;
    this.newName = newName;
    this.newNumberValue = newNumberValue;
    this.newPeopleValue = newPeopleValue;
    this.newResourceSubtype = newResourceSubtype;
    this.newTextValue = newTextValue;
    this.numHearts = numHearts;
    this.numLikes = numLikes;
    this.oldApprovalStatus = oldApprovalStatus;
    this.oldMultiEnumValues = oldMultiEnumValues;
    this.oldNumberValue = oldNumberValue;
    this.oldPeopleValue = oldPeopleValue;
    this.oldResourceSubtype = oldResourceSubtype;
    this.oldTextValue = oldTextValue;
    this.previews = previews;
    this.source = source;
    this.type = type;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  /**
   * The time at which this resource was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public StoryResponse htmlText(String htmlText) {
    this.htmlText = htmlText;
    return this;
  }

  /**
   * [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
   * @return htmlText
   */
  @javax.annotation.Nullable
  public String getHtmlText() {
    return htmlText;
  }

  public void setHtmlText(String htmlText) {
    this.htmlText = htmlText;
  }


  public StoryResponse isPinned(Boolean isPinned) {
    this.isPinned = isPinned;
    return this;
  }

  /**
   * *Conditional*. Whether the story should be pinned on the resource.
   * @return isPinned
   */
  @javax.annotation.Nullable
  public Boolean getIsPinned() {
    return isPinned;
  }

  public void setIsPinned(Boolean isPinned) {
    this.isPinned = isPinned;
  }


  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
   * @return resourceSubtype
   */
  @javax.annotation.Nullable
  public String getResourceSubtype() {
    return resourceSubtype;
  }



  public StoryResponse stickerName(StickerNameEnum stickerName) {
    this.stickerName = stickerName;
    return this;
  }

  /**
   * The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
   * @return stickerName
   */
  @javax.annotation.Nullable
  public StickerNameEnum getStickerName() {
    return stickerName;
  }

  public void setStickerName(StickerNameEnum stickerName) {
    this.stickerName = stickerName;
  }


  public StoryResponse text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The plain text of the comment to add. Cannot be used with html_text.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public StoryResponse assignee(UserCompact assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nullable
  public UserCompact getAssignee() {
    return assignee;
  }

  public void setAssignee(UserCompact assignee) {
    this.assignee = assignee;
  }


  public StoryResponse createdBy(UserCompact createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserCompact getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserCompact createdBy) {
    this.createdBy = createdBy;
  }


  public StoryResponse customField(CustomFieldCompact customField) {
    this.customField = customField;
    return this;
  }

  /**
   * Get customField
   * @return customField
   */
  @javax.annotation.Nullable
  public CustomFieldCompact getCustomField() {
    return customField;
  }

  public void setCustomField(CustomFieldCompact customField) {
    this.customField = customField;
  }


  public StoryResponse dependency(TaskCompact dependency) {
    this.dependency = dependency;
    return this;
  }

  /**
   * Get dependency
   * @return dependency
   */
  @javax.annotation.Nullable
  public TaskCompact getDependency() {
    return dependency;
  }

  public void setDependency(TaskCompact dependency) {
    this.dependency = dependency;
  }


  public StoryResponse duplicateOf(TaskCompact duplicateOf) {
    this.duplicateOf = duplicateOf;
    return this;
  }

  /**
   * Get duplicateOf
   * @return duplicateOf
   */
  @javax.annotation.Nullable
  public TaskCompact getDuplicateOf() {
    return duplicateOf;
  }

  public void setDuplicateOf(TaskCompact duplicateOf) {
    this.duplicateOf = duplicateOf;
  }


  public StoryResponse duplicatedFrom(TaskCompact duplicatedFrom) {
    this.duplicatedFrom = duplicatedFrom;
    return this;
  }

  /**
   * Get duplicatedFrom
   * @return duplicatedFrom
   */
  @javax.annotation.Nullable
  public TaskCompact getDuplicatedFrom() {
    return duplicatedFrom;
  }

  public void setDuplicatedFrom(TaskCompact duplicatedFrom) {
    this.duplicatedFrom = duplicatedFrom;
  }


  public StoryResponse follower(UserCompact follower) {
    this.follower = follower;
    return this;
  }

  /**
   * Get follower
   * @return follower
   */
  @javax.annotation.Nullable
  public UserCompact getFollower() {
    return follower;
  }

  public void setFollower(UserCompact follower) {
    this.follower = follower;
  }


  /**
   * *Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.
   * @return hearted
   */
  @javax.annotation.Nullable
  public Boolean getHearted() {
    return hearted;
  }



  /**
   * *Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.
   * @return hearts
   */
  @javax.annotation.Nullable
  public List<Like> getHearts() {
    return hearts;
  }



  /**
   * *Conditional*. Whether the text of the story can be edited after creation.
   * @return isEditable
   */
  @javax.annotation.Nullable
  public Boolean getIsEditable() {
    return isEditable;
  }



  /**
   * *Conditional*. Whether the text of the story has been edited after creation.
   * @return isEdited
   */
  @javax.annotation.Nullable
  public Boolean getIsEdited() {
    return isEdited;
  }



  /**
   * *Conditional*. True if the story is liked by the authorized user, false if not.
   * @return liked
   */
  @javax.annotation.Nullable
  public Boolean getLiked() {
    return liked;
  }



  /**
   * *Conditional*. Array of likes for users who have liked this story.
   * @return likes
   */
  @javax.annotation.Nullable
  public List<Like> getLikes() {
    return likes;
  }



  /**
   * *Conditional*. The new value of approval status.
   * @return newApprovalStatus
   */
  @javax.annotation.Nullable
  public String getNewApprovalStatus() {
    return newApprovalStatus;
  }



  public StoryResponse newDateValue(StoryResponseAllOfNewDateValue newDateValue) {
    this.newDateValue = newDateValue;
    return this;
  }

  /**
   * Get newDateValue
   * @return newDateValue
   */
  @javax.annotation.Nullable
  public StoryResponseAllOfNewDateValue getNewDateValue() {
    return newDateValue;
  }

  public void setNewDateValue(StoryResponseAllOfNewDateValue newDateValue) {
    this.newDateValue = newDateValue;
  }


  public StoryResponse newDates(StoryResponseDates newDates) {
    this.newDates = newDates;
    return this;
  }

  /**
   * Get newDates
   * @return newDates
   */
  @javax.annotation.Nullable
  public StoryResponseDates getNewDates() {
    return newDates;
  }

  public void setNewDates(StoryResponseDates newDates) {
    this.newDates = newDates;
  }


  public StoryResponse newEnumValue(EnumOption newEnumValue) {
    this.newEnumValue = newEnumValue;
    return this;
  }

  /**
   * Get newEnumValue
   * @return newEnumValue
   */
  @javax.annotation.Nullable
  public EnumOption getNewEnumValue() {
    return newEnumValue;
  }

  public void setNewEnumValue(EnumOption newEnumValue) {
    this.newEnumValue = newEnumValue;
  }


  /**
   * *Conditional*. The new value of a multi-enum custom field story.
   * @return newMultiEnumValues
   */
  @javax.annotation.Nullable
  public List<EnumOption> getNewMultiEnumValues() {
    return newMultiEnumValues;
  }



  /**
   * *Conditional*
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }



  /**
   * *Conditional*
   * @return newNumberValue
   */
  @javax.annotation.Nullable
  public Integer getNewNumberValue() {
    return newNumberValue;
  }



  /**
   * *Conditional*. The new value of a people custom field story.
   * @return newPeopleValue
   */
  @javax.annotation.Nullable
  public List<UserCompact> getNewPeopleValue() {
    return newPeopleValue;
  }



  /**
   * *Conditional*
   * @return newResourceSubtype
   */
  @javax.annotation.Nullable
  public String getNewResourceSubtype() {
    return newResourceSubtype;
  }



  public StoryResponse newSection(SectionCompact newSection) {
    this.newSection = newSection;
    return this;
  }

  /**
   * Get newSection
   * @return newSection
   */
  @javax.annotation.Nullable
  public SectionCompact getNewSection() {
    return newSection;
  }

  public void setNewSection(SectionCompact newSection) {
    this.newSection = newSection;
  }


  /**
   * *Conditional*
   * @return newTextValue
   */
  @javax.annotation.Nullable
  public String getNewTextValue() {
    return newTextValue;
  }



  /**
   * *Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.
   * @return numHearts
   */
  @javax.annotation.Nullable
  public Integer getNumHearts() {
    return numHearts;
  }



  /**
   * *Conditional*. The number of users who have liked this story.
   * @return numLikes
   */
  @javax.annotation.Nullable
  public Integer getNumLikes() {
    return numLikes;
  }



  /**
   * *Conditional*. The old value of approval status.
   * @return oldApprovalStatus
   */
  @javax.annotation.Nullable
  public String getOldApprovalStatus() {
    return oldApprovalStatus;
  }



  public StoryResponse oldDateValue(StoryResponseAllOfOldDateValue oldDateValue) {
    this.oldDateValue = oldDateValue;
    return this;
  }

  /**
   * Get oldDateValue
   * @return oldDateValue
   */
  @javax.annotation.Nullable
  public StoryResponseAllOfOldDateValue getOldDateValue() {
    return oldDateValue;
  }

  public void setOldDateValue(StoryResponseAllOfOldDateValue oldDateValue) {
    this.oldDateValue = oldDateValue;
  }


  public StoryResponse oldDates(StoryResponseDates oldDates) {
    this.oldDates = oldDates;
    return this;
  }

  /**
   * Get oldDates
   * @return oldDates
   */
  @javax.annotation.Nullable
  public StoryResponseDates getOldDates() {
    return oldDates;
  }

  public void setOldDates(StoryResponseDates oldDates) {
    this.oldDates = oldDates;
  }


  public StoryResponse oldEnumValue(EnumOption oldEnumValue) {
    this.oldEnumValue = oldEnumValue;
    return this;
  }

  /**
   * Get oldEnumValue
   * @return oldEnumValue
   */
  @javax.annotation.Nullable
  public EnumOption getOldEnumValue() {
    return oldEnumValue;
  }

  public void setOldEnumValue(EnumOption oldEnumValue) {
    this.oldEnumValue = oldEnumValue;
  }


  /**
   * *Conditional*. The old value of a multi-enum custom field story.
   * @return oldMultiEnumValues
   */
  @javax.annotation.Nullable
  public List<EnumOption> getOldMultiEnumValues() {
    return oldMultiEnumValues;
  }



  public StoryResponse oldName(String oldName) {
    this.oldName = oldName;
    return this;
  }

  /**
   * *Conditional*&#39;
   * @return oldName
   */
  @javax.annotation.Nullable
  public String getOldName() {
    return oldName;
  }

  public void setOldName(String oldName) {
    this.oldName = oldName;
  }


  /**
   * *Conditional*
   * @return oldNumberValue
   */
  @javax.annotation.Nullable
  public Integer getOldNumberValue() {
    return oldNumberValue;
  }



  /**
   * *Conditional*. The old value of a people custom field story.
   * @return oldPeopleValue
   */
  @javax.annotation.Nullable
  public List<UserCompact> getOldPeopleValue() {
    return oldPeopleValue;
  }



  /**
   * *Conditional*
   * @return oldResourceSubtype
   */
  @javax.annotation.Nullable
  public String getOldResourceSubtype() {
    return oldResourceSubtype;
  }



  public StoryResponse oldSection(SectionCompact oldSection) {
    this.oldSection = oldSection;
    return this;
  }

  /**
   * Get oldSection
   * @return oldSection
   */
  @javax.annotation.Nullable
  public SectionCompact getOldSection() {
    return oldSection;
  }

  public void setOldSection(SectionCompact oldSection) {
    this.oldSection = oldSection;
  }


  /**
   * *Conditional*
   * @return oldTextValue
   */
  @javax.annotation.Nullable
  public String getOldTextValue() {
    return oldTextValue;
  }



  /**
   * *Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*
   * @return previews
   */
  @javax.annotation.Nullable
  public List<Preview> getPreviews() {
    return previews;
  }



  public StoryResponse project(ProjectCompact project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public ProjectCompact getProject() {
    return project;
  }

  public void setProject(ProjectCompact project) {
    this.project = project;
  }


  /**
   * The component of the Asana product the user used to trigger the story.
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }



  public StoryResponse story(StoryCompact story) {
    this.story = story;
    return this;
  }

  /**
   * Get story
   * @return story
   */
  @javax.annotation.Nullable
  public StoryCompact getStory() {
    return story;
  }

  public void setStory(StoryCompact story) {
    this.story = story;
  }


  public StoryResponse tag(TagCompact tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public TagCompact getTag() {
    return tag;
  }

  public void setTag(TagCompact tag) {
    this.tag = tag;
  }


  public StoryResponse target(StoryResponseAllOfTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public StoryResponseAllOfTarget getTarget() {
    return target;
  }

  public void setTarget(StoryResponseAllOfTarget target) {
    this.target = target;
  }


  public StoryResponse task(TaskCompact task) {
    this.task = task;
    return this;
  }

  /**
   * Get task
   * @return task
   */
  @javax.annotation.Nullable
  public TaskCompact getTask() {
    return task;
  }

  public void setTask(TaskCompact task) {
    this.task = task;
  }


  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoryResponse storyResponse = (StoryResponse) o;
    return Objects.equals(this.gid, storyResponse.gid) &&
        Objects.equals(this.resourceType, storyResponse.resourceType) &&
        Objects.equals(this.createdAt, storyResponse.createdAt) &&
        Objects.equals(this.htmlText, storyResponse.htmlText) &&
        Objects.equals(this.isPinned, storyResponse.isPinned) &&
        Objects.equals(this.resourceSubtype, storyResponse.resourceSubtype) &&
        Objects.equals(this.stickerName, storyResponse.stickerName) &&
        Objects.equals(this.text, storyResponse.text) &&
        Objects.equals(this.assignee, storyResponse.assignee) &&
        Objects.equals(this.createdBy, storyResponse.createdBy) &&
        Objects.equals(this.customField, storyResponse.customField) &&
        Objects.equals(this.dependency, storyResponse.dependency) &&
        Objects.equals(this.duplicateOf, storyResponse.duplicateOf) &&
        Objects.equals(this.duplicatedFrom, storyResponse.duplicatedFrom) &&
        Objects.equals(this.follower, storyResponse.follower) &&
        Objects.equals(this.hearted, storyResponse.hearted) &&
        Objects.equals(this.hearts, storyResponse.hearts) &&
        Objects.equals(this.isEditable, storyResponse.isEditable) &&
        Objects.equals(this.isEdited, storyResponse.isEdited) &&
        Objects.equals(this.liked, storyResponse.liked) &&
        Objects.equals(this.likes, storyResponse.likes) &&
        Objects.equals(this.newApprovalStatus, storyResponse.newApprovalStatus) &&
        Objects.equals(this.newDateValue, storyResponse.newDateValue) &&
        Objects.equals(this.newDates, storyResponse.newDates) &&
        Objects.equals(this.newEnumValue, storyResponse.newEnumValue) &&
        Objects.equals(this.newMultiEnumValues, storyResponse.newMultiEnumValues) &&
        Objects.equals(this.newName, storyResponse.newName) &&
        Objects.equals(this.newNumberValue, storyResponse.newNumberValue) &&
        Objects.equals(this.newPeopleValue, storyResponse.newPeopleValue) &&
        Objects.equals(this.newResourceSubtype, storyResponse.newResourceSubtype) &&
        Objects.equals(this.newSection, storyResponse.newSection) &&
        Objects.equals(this.newTextValue, storyResponse.newTextValue) &&
        Objects.equals(this.numHearts, storyResponse.numHearts) &&
        Objects.equals(this.numLikes, storyResponse.numLikes) &&
        Objects.equals(this.oldApprovalStatus, storyResponse.oldApprovalStatus) &&
        Objects.equals(this.oldDateValue, storyResponse.oldDateValue) &&
        Objects.equals(this.oldDates, storyResponse.oldDates) &&
        Objects.equals(this.oldEnumValue, storyResponse.oldEnumValue) &&
        Objects.equals(this.oldMultiEnumValues, storyResponse.oldMultiEnumValues) &&
        Objects.equals(this.oldName, storyResponse.oldName) &&
        Objects.equals(this.oldNumberValue, storyResponse.oldNumberValue) &&
        Objects.equals(this.oldPeopleValue, storyResponse.oldPeopleValue) &&
        Objects.equals(this.oldResourceSubtype, storyResponse.oldResourceSubtype) &&
        Objects.equals(this.oldSection, storyResponse.oldSection) &&
        Objects.equals(this.oldTextValue, storyResponse.oldTextValue) &&
        Objects.equals(this.previews, storyResponse.previews) &&
        Objects.equals(this.project, storyResponse.project) &&
        Objects.equals(this.source, storyResponse.source) &&
        Objects.equals(this.story, storyResponse.story) &&
        Objects.equals(this.tag, storyResponse.tag) &&
        Objects.equals(this.target, storyResponse.target) &&
        Objects.equals(this.task, storyResponse.task) &&
        Objects.equals(this.type, storyResponse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, createdAt, htmlText, isPinned, resourceSubtype, stickerName, text, assignee, createdBy, customField, dependency, duplicateOf, duplicatedFrom, follower, hearted, hearts, isEditable, isEdited, liked, likes, newApprovalStatus, newDateValue, newDates, newEnumValue, newMultiEnumValues, newName, newNumberValue, newPeopleValue, newResourceSubtype, newSection, newTextValue, numHearts, numLikes, oldApprovalStatus, oldDateValue, oldDates, oldEnumValue, oldMultiEnumValues, oldName, oldNumberValue, oldPeopleValue, oldResourceSubtype, oldSection, oldTextValue, previews, project, source, story, tag, target, task, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoryResponse {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    htmlText: ").append(toIndentedString(htmlText)).append("\n");
    sb.append("    isPinned: ").append(toIndentedString(isPinned)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    stickerName: ").append(toIndentedString(stickerName)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    customField: ").append(toIndentedString(customField)).append("\n");
    sb.append("    dependency: ").append(toIndentedString(dependency)).append("\n");
    sb.append("    duplicateOf: ").append(toIndentedString(duplicateOf)).append("\n");
    sb.append("    duplicatedFrom: ").append(toIndentedString(duplicatedFrom)).append("\n");
    sb.append("    follower: ").append(toIndentedString(follower)).append("\n");
    sb.append("    hearted: ").append(toIndentedString(hearted)).append("\n");
    sb.append("    hearts: ").append(toIndentedString(hearts)).append("\n");
    sb.append("    isEditable: ").append(toIndentedString(isEditable)).append("\n");
    sb.append("    isEdited: ").append(toIndentedString(isEdited)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    newApprovalStatus: ").append(toIndentedString(newApprovalStatus)).append("\n");
    sb.append("    newDateValue: ").append(toIndentedString(newDateValue)).append("\n");
    sb.append("    newDates: ").append(toIndentedString(newDates)).append("\n");
    sb.append("    newEnumValue: ").append(toIndentedString(newEnumValue)).append("\n");
    sb.append("    newMultiEnumValues: ").append(toIndentedString(newMultiEnumValues)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    newNumberValue: ").append(toIndentedString(newNumberValue)).append("\n");
    sb.append("    newPeopleValue: ").append(toIndentedString(newPeopleValue)).append("\n");
    sb.append("    newResourceSubtype: ").append(toIndentedString(newResourceSubtype)).append("\n");
    sb.append("    newSection: ").append(toIndentedString(newSection)).append("\n");
    sb.append("    newTextValue: ").append(toIndentedString(newTextValue)).append("\n");
    sb.append("    numHearts: ").append(toIndentedString(numHearts)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    oldApprovalStatus: ").append(toIndentedString(oldApprovalStatus)).append("\n");
    sb.append("    oldDateValue: ").append(toIndentedString(oldDateValue)).append("\n");
    sb.append("    oldDates: ").append(toIndentedString(oldDates)).append("\n");
    sb.append("    oldEnumValue: ").append(toIndentedString(oldEnumValue)).append("\n");
    sb.append("    oldMultiEnumValues: ").append(toIndentedString(oldMultiEnumValues)).append("\n");
    sb.append("    oldName: ").append(toIndentedString(oldName)).append("\n");
    sb.append("    oldNumberValue: ").append(toIndentedString(oldNumberValue)).append("\n");
    sb.append("    oldPeopleValue: ").append(toIndentedString(oldPeopleValue)).append("\n");
    sb.append("    oldResourceSubtype: ").append(toIndentedString(oldResourceSubtype)).append("\n");
    sb.append("    oldSection: ").append(toIndentedString(oldSection)).append("\n");
    sb.append("    oldTextValue: ").append(toIndentedString(oldTextValue)).append("\n");
    sb.append("    previews: ").append(toIndentedString(previews)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    story: ").append(toIndentedString(story)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("created_at");
    openapiFields.add("html_text");
    openapiFields.add("is_pinned");
    openapiFields.add("resource_subtype");
    openapiFields.add("sticker_name");
    openapiFields.add("text");
    openapiFields.add("assignee");
    openapiFields.add("created_by");
    openapiFields.add("custom_field");
    openapiFields.add("dependency");
    openapiFields.add("duplicate_of");
    openapiFields.add("duplicated_from");
    openapiFields.add("follower");
    openapiFields.add("hearted");
    openapiFields.add("hearts");
    openapiFields.add("is_editable");
    openapiFields.add("is_edited");
    openapiFields.add("liked");
    openapiFields.add("likes");
    openapiFields.add("new_approval_status");
    openapiFields.add("new_date_value");
    openapiFields.add("new_dates");
    openapiFields.add("new_enum_value");
    openapiFields.add("new_multi_enum_values");
    openapiFields.add("new_name");
    openapiFields.add("new_number_value");
    openapiFields.add("new_people_value");
    openapiFields.add("new_resource_subtype");
    openapiFields.add("new_section");
    openapiFields.add("new_text_value");
    openapiFields.add("num_hearts");
    openapiFields.add("num_likes");
    openapiFields.add("old_approval_status");
    openapiFields.add("old_date_value");
    openapiFields.add("old_dates");
    openapiFields.add("old_enum_value");
    openapiFields.add("old_multi_enum_values");
    openapiFields.add("old_name");
    openapiFields.add("old_number_value");
    openapiFields.add("old_people_value");
    openapiFields.add("old_resource_subtype");
    openapiFields.add("old_section");
    openapiFields.add("old_text_value");
    openapiFields.add("previews");
    openapiFields.add("project");
    openapiFields.add("source");
    openapiFields.add("story");
    openapiFields.add("tag");
    openapiFields.add("target");
    openapiFields.add("task");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoryResponse is not found in the empty JSON string", StoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("html_text") != null && !jsonObj.get("html_text").isJsonNull()) && !jsonObj.get("html_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_text").toString()));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      if ((jsonObj.get("sticker_name") != null && !jsonObj.get("sticker_name").isJsonNull()) && !jsonObj.get("sticker_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sticker_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sticker_name").toString()));
      }
      // validate the optional field `sticker_name`
      if (jsonObj.get("sticker_name") != null && !jsonObj.get("sticker_name").isJsonNull()) {
        StickerNameEnum.validateJsonElement(jsonObj.get("sticker_name"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the optional field `assignee`
      if (jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) {
        UserCompact.validateJsonElement(jsonObj.get("assignee"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        UserCompact.validateJsonElement(jsonObj.get("created_by"));
      }
      // validate the optional field `custom_field`
      if (jsonObj.get("custom_field") != null && !jsonObj.get("custom_field").isJsonNull()) {
        CustomFieldCompact.validateJsonElement(jsonObj.get("custom_field"));
      }
      // validate the optional field `dependency`
      if (jsonObj.get("dependency") != null && !jsonObj.get("dependency").isJsonNull()) {
        TaskCompact.validateJsonElement(jsonObj.get("dependency"));
      }
      // validate the optional field `duplicate_of`
      if (jsonObj.get("duplicate_of") != null && !jsonObj.get("duplicate_of").isJsonNull()) {
        TaskCompact.validateJsonElement(jsonObj.get("duplicate_of"));
      }
      // validate the optional field `duplicated_from`
      if (jsonObj.get("duplicated_from") != null && !jsonObj.get("duplicated_from").isJsonNull()) {
        TaskCompact.validateJsonElement(jsonObj.get("duplicated_from"));
      }
      // validate the optional field `follower`
      if (jsonObj.get("follower") != null && !jsonObj.get("follower").isJsonNull()) {
        UserCompact.validateJsonElement(jsonObj.get("follower"));
      }
      if (jsonObj.get("hearts") != null && !jsonObj.get("hearts").isJsonNull()) {
        JsonArray jsonArrayhearts = jsonObj.getAsJsonArray("hearts");
        if (jsonArrayhearts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hearts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hearts` to be an array in the JSON string but got `%s`", jsonObj.get("hearts").toString()));
          }

          // validate the optional field `hearts` (array)
          for (int i = 0; i < jsonArrayhearts.size(); i++) {
            Like.validateJsonElement(jsonArrayhearts.get(i));
          };
        }
      }
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        JsonArray jsonArraylikes = jsonObj.getAsJsonArray("likes");
        if (jsonArraylikes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("likes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `likes` to be an array in the JSON string but got `%s`", jsonObj.get("likes").toString()));
          }

          // validate the optional field `likes` (array)
          for (int i = 0; i < jsonArraylikes.size(); i++) {
            Like.validateJsonElement(jsonArraylikes.get(i));
          };
        }
      }
      if ((jsonObj.get("new_approval_status") != null && !jsonObj.get("new_approval_status").isJsonNull()) && !jsonObj.get("new_approval_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_approval_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_approval_status").toString()));
      }
      // validate the optional field `new_date_value`
      if (jsonObj.get("new_date_value") != null && !jsonObj.get("new_date_value").isJsonNull()) {
        StoryResponseAllOfNewDateValue.validateJsonElement(jsonObj.get("new_date_value"));
      }
      // validate the optional field `new_dates`
      if (jsonObj.get("new_dates") != null && !jsonObj.get("new_dates").isJsonNull()) {
        StoryResponseDates.validateJsonElement(jsonObj.get("new_dates"));
      }
      // validate the optional field `new_enum_value`
      if (jsonObj.get("new_enum_value") != null && !jsonObj.get("new_enum_value").isJsonNull()) {
        EnumOption.validateJsonElement(jsonObj.get("new_enum_value"));
      }
      if (jsonObj.get("new_multi_enum_values") != null && !jsonObj.get("new_multi_enum_values").isJsonNull()) {
        JsonArray jsonArraynewMultiEnumValues = jsonObj.getAsJsonArray("new_multi_enum_values");
        if (jsonArraynewMultiEnumValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("new_multi_enum_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `new_multi_enum_values` to be an array in the JSON string but got `%s`", jsonObj.get("new_multi_enum_values").toString()));
          }

          // validate the optional field `new_multi_enum_values` (array)
          for (int i = 0; i < jsonArraynewMultiEnumValues.size(); i++) {
            EnumOption.validateJsonElement(jsonArraynewMultiEnumValues.get(i));
          };
        }
      }
      if ((jsonObj.get("new_name") != null && !jsonObj.get("new_name").isJsonNull()) && !jsonObj.get("new_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_name").toString()));
      }
      if (jsonObj.get("new_people_value") != null && !jsonObj.get("new_people_value").isJsonNull()) {
        JsonArray jsonArraynewPeopleValue = jsonObj.getAsJsonArray("new_people_value");
        if (jsonArraynewPeopleValue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("new_people_value").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `new_people_value` to be an array in the JSON string but got `%s`", jsonObj.get("new_people_value").toString()));
          }

          // validate the optional field `new_people_value` (array)
          for (int i = 0; i < jsonArraynewPeopleValue.size(); i++) {
            UserCompact.validateJsonElement(jsonArraynewPeopleValue.get(i));
          };
        }
      }
      if ((jsonObj.get("new_resource_subtype") != null && !jsonObj.get("new_resource_subtype").isJsonNull()) && !jsonObj.get("new_resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_resource_subtype").toString()));
      }
      // validate the optional field `new_section`
      if (jsonObj.get("new_section") != null && !jsonObj.get("new_section").isJsonNull()) {
        SectionCompact.validateJsonElement(jsonObj.get("new_section"));
      }
      if ((jsonObj.get("new_text_value") != null && !jsonObj.get("new_text_value").isJsonNull()) && !jsonObj.get("new_text_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_text_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_text_value").toString()));
      }
      if ((jsonObj.get("old_approval_status") != null && !jsonObj.get("old_approval_status").isJsonNull()) && !jsonObj.get("old_approval_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_approval_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_approval_status").toString()));
      }
      // validate the optional field `old_date_value`
      if (jsonObj.get("old_date_value") != null && !jsonObj.get("old_date_value").isJsonNull()) {
        StoryResponseAllOfOldDateValue.validateJsonElement(jsonObj.get("old_date_value"));
      }
      // validate the optional field `old_dates`
      if (jsonObj.get("old_dates") != null && !jsonObj.get("old_dates").isJsonNull()) {
        StoryResponseDates.validateJsonElement(jsonObj.get("old_dates"));
      }
      // validate the optional field `old_enum_value`
      if (jsonObj.get("old_enum_value") != null && !jsonObj.get("old_enum_value").isJsonNull()) {
        EnumOption.validateJsonElement(jsonObj.get("old_enum_value"));
      }
      if (jsonObj.get("old_multi_enum_values") != null && !jsonObj.get("old_multi_enum_values").isJsonNull()) {
        JsonArray jsonArrayoldMultiEnumValues = jsonObj.getAsJsonArray("old_multi_enum_values");
        if (jsonArrayoldMultiEnumValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("old_multi_enum_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `old_multi_enum_values` to be an array in the JSON string but got `%s`", jsonObj.get("old_multi_enum_values").toString()));
          }

          // validate the optional field `old_multi_enum_values` (array)
          for (int i = 0; i < jsonArrayoldMultiEnumValues.size(); i++) {
            EnumOption.validateJsonElement(jsonArrayoldMultiEnumValues.get(i));
          };
        }
      }
      if ((jsonObj.get("old_name") != null && !jsonObj.get("old_name").isJsonNull()) && !jsonObj.get("old_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_name").toString()));
      }
      if (jsonObj.get("old_people_value") != null && !jsonObj.get("old_people_value").isJsonNull()) {
        JsonArray jsonArrayoldPeopleValue = jsonObj.getAsJsonArray("old_people_value");
        if (jsonArrayoldPeopleValue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("old_people_value").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `old_people_value` to be an array in the JSON string but got `%s`", jsonObj.get("old_people_value").toString()));
          }

          // validate the optional field `old_people_value` (array)
          for (int i = 0; i < jsonArrayoldPeopleValue.size(); i++) {
            UserCompact.validateJsonElement(jsonArrayoldPeopleValue.get(i));
          };
        }
      }
      if ((jsonObj.get("old_resource_subtype") != null && !jsonObj.get("old_resource_subtype").isJsonNull()) && !jsonObj.get("old_resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_resource_subtype").toString()));
      }
      // validate the optional field `old_section`
      if (jsonObj.get("old_section") != null && !jsonObj.get("old_section").isJsonNull()) {
        SectionCompact.validateJsonElement(jsonObj.get("old_section"));
      }
      if ((jsonObj.get("old_text_value") != null && !jsonObj.get("old_text_value").isJsonNull()) && !jsonObj.get("old_text_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_text_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_text_value").toString()));
      }
      if (jsonObj.get("previews") != null && !jsonObj.get("previews").isJsonNull()) {
        JsonArray jsonArraypreviews = jsonObj.getAsJsonArray("previews");
        if (jsonArraypreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previews` to be an array in the JSON string but got `%s`", jsonObj.get("previews").toString()));
          }

          // validate the optional field `previews` (array)
          for (int i = 0; i < jsonArraypreviews.size(); i++) {
            Preview.validateJsonElement(jsonArraypreviews.get(i));
          };
        }
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        ProjectCompact.validateJsonElement(jsonObj.get("project"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `story`
      if (jsonObj.get("story") != null && !jsonObj.get("story").isJsonNull()) {
        StoryCompact.validateJsonElement(jsonObj.get("story"));
      }
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        TagCompact.validateJsonElement(jsonObj.get("tag"));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        StoryResponseAllOfTarget.validateJsonElement(jsonObj.get("target"));
      }
      // validate the optional field `task`
      if (jsonObj.get("task") != null && !jsonObj.get("task").isJsonNull()) {
        TaskCompact.validateJsonElement(jsonObj.get("task"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StoryResponse>() {
           @Override
           public void write(JsonWriter out, StoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoryResponse
   * @throws IOException if the JSON string is invalid with respect to StoryResponse
   */
  public static StoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoryResponse.class);
  }

  /**
   * Convert an instance of StoryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

