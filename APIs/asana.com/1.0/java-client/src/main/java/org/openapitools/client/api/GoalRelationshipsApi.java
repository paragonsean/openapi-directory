/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddSupportingRelationshipRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetGoalRelationship200Response;
import org.openapitools.client.model.GetGoalRelationships200Response;
import org.openapitools.client.model.RemoveSupportingRelationshipRequest;
import org.openapitools.client.model.UpdateGoalRelationshipRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GoalRelationshipsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalRelationshipsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GoalRelationshipsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSupportingRelationship
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addSupportingRelationshipRequest The supporting resource to be added to the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSupportingRelationshipCall(String goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSupportingRelationshipRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/addSupportingRelationship"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSupportingRelationshipValidateBeforeCall(String goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling addSupportingRelationship(Async)");
        }

        // verify the required parameter 'addSupportingRelationshipRequest' is set
        if (addSupportingRelationshipRequest == null) {
            throw new ApiException("Missing the required parameter 'addSupportingRelationshipRequest' when calling addSupportingRelationship(Async)");
        }

        return addSupportingRelationshipCall(goalGid, addSupportingRelationshipRequest, optPretty, optFields, _callback);

    }

    /**
     * Add a supporting goal relationship
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addSupportingRelationshipRequest The supporting resource to be added to the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return GetGoalRelationship200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalRelationship200Response addSupportingRelationship(String goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<GetGoalRelationship200Response> localVarResp = addSupportingRelationshipWithHttpInfo(goalGid, addSupportingRelationshipRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Add a supporting goal relationship
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addSupportingRelationshipRequest The supporting resource to be added to the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;GetGoalRelationship200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGoalRelationship200Response> addSupportingRelationshipWithHttpInfo(String goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addSupportingRelationshipValidateBeforeCall(goalGid, addSupportingRelationshipRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GetGoalRelationship200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a supporting goal relationship (asynchronously)
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addSupportingRelationshipRequest The supporting resource to be added to the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSupportingRelationshipAsync(String goalGid, AddSupportingRelationshipRequest addSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GetGoalRelationship200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSupportingRelationshipValidateBeforeCall(goalGid, addSupportingRelationshipRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GetGoalRelationship200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGoalRelationship
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalRelationshipCall(String goalRelationshipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal_relationships/{goal_relationship_gid}"
            .replace("{" + "goal_relationship_gid" + "}", localVarApiClient.escapeString(goalRelationshipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalRelationshipValidateBeforeCall(String goalRelationshipGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalRelationshipGid' is set
        if (goalRelationshipGid == null) {
            throw new ApiException("Missing the required parameter 'goalRelationshipGid' when calling getGoalRelationship(Async)");
        }

        return getGoalRelationshipCall(goalRelationshipGid, optPretty, optFields, _callback);

    }

    /**
     * Get a goal relationship
     * Returns the complete updated goal relationship record for a single goal relationship.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return GetGoalRelationship200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalRelationship200Response getGoalRelationship(String goalRelationshipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<GetGoalRelationship200Response> localVarResp = getGoalRelationshipWithHttpInfo(goalRelationshipGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Get a goal relationship
     * Returns the complete updated goal relationship record for a single goal relationship.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;GetGoalRelationship200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGoalRelationship200Response> getGoalRelationshipWithHttpInfo(String goalRelationshipGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getGoalRelationshipValidateBeforeCall(goalRelationshipGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GetGoalRelationship200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a goal relationship (asynchronously)
     * Returns the complete updated goal relationship record for a single goal relationship.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalRelationshipAsync(String goalRelationshipGid, Boolean optPretty, List<String> optFields, final ApiCallback<GetGoalRelationship200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalRelationshipValidateBeforeCall(goalRelationshipGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GetGoalRelationship200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGoalRelationships
     * @param supportedGoal Globally unique identifier for the supported goal in the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param resourceSubtype If provided, filter to goal relationships with a given resource_subtype. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalRelationshipsCall(String supportedGoal, Boolean optPretty, List<String> optFields, String resourceSubtype, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal_relationships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (supportedGoal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supported_goal", supportedGoal));
        }

        if (resourceSubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_subtype", resourceSubtype));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalRelationshipsValidateBeforeCall(String supportedGoal, Boolean optPretty, List<String> optFields, String resourceSubtype, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportedGoal' is set
        if (supportedGoal == null) {
            throw new ApiException("Missing the required parameter 'supportedGoal' when calling getGoalRelationships(Async)");
        }

        return getGoalRelationshipsCall(supportedGoal, optPretty, optFields, resourceSubtype, _callback);

    }

    /**
     * Get goal relationships
     * Returns compact goal relationship records.
     * @param supportedGoal Globally unique identifier for the supported goal in the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param resourceSubtype If provided, filter to goal relationships with a given resource_subtype. (optional)
     * @return GetGoalRelationships200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalRelationships200Response getGoalRelationships(String supportedGoal, Boolean optPretty, List<String> optFields, String resourceSubtype) throws ApiException {
        ApiResponse<GetGoalRelationships200Response> localVarResp = getGoalRelationshipsWithHttpInfo(supportedGoal, optPretty, optFields, resourceSubtype);
        return localVarResp.getData();
    }

    /**
     * Get goal relationships
     * Returns compact goal relationship records.
     * @param supportedGoal Globally unique identifier for the supported goal in the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param resourceSubtype If provided, filter to goal relationships with a given resource_subtype. (optional)
     * @return ApiResponse&lt;GetGoalRelationships200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGoalRelationships200Response> getGoalRelationshipsWithHttpInfo(String supportedGoal, Boolean optPretty, List<String> optFields, String resourceSubtype) throws ApiException {
        okhttp3.Call localVarCall = getGoalRelationshipsValidateBeforeCall(supportedGoal, optPretty, optFields, resourceSubtype, null);
        Type localVarReturnType = new TypeToken<GetGoalRelationships200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get goal relationships (asynchronously)
     * Returns compact goal relationship records.
     * @param supportedGoal Globally unique identifier for the supported goal in the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param resourceSubtype If provided, filter to goal relationships with a given resource_subtype. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goal relationships. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalRelationshipsAsync(String supportedGoal, Boolean optPretty, List<String> optFields, String resourceSubtype, final ApiCallback<GetGoalRelationships200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalRelationshipsValidateBeforeCall(supportedGoal, optPretty, optFields, resourceSubtype, _callback);
        Type localVarReturnType = new TypeToken<GetGoalRelationships200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeSupportingRelationship
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param removeSupportingRelationshipRequest The supporting resource to be removed from the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSupportingRelationshipCall(String goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeSupportingRelationshipRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/removeSupportingRelationship"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSupportingRelationshipValidateBeforeCall(String goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling removeSupportingRelationship(Async)");
        }

        // verify the required parameter 'removeSupportingRelationshipRequest' is set
        if (removeSupportingRelationshipRequest == null) {
            throw new ApiException("Missing the required parameter 'removeSupportingRelationshipRequest' when calling removeSupportingRelationship(Async)");
        }

        return removeSupportingRelationshipCall(goalGid, removeSupportingRelationshipRequest, optPretty, optFields, _callback);

    }

    /**
     * Removes a supporting goal relationship
     * Removes a goal relationship for a given parent goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param removeSupportingRelationshipRequest The supporting resource to be removed from the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response removeSupportingRelationship(String goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = removeSupportingRelationshipWithHttpInfo(goalGid, removeSupportingRelationshipRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Removes a supporting goal relationship
     * Removes a goal relationship for a given parent goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param removeSupportingRelationshipRequest The supporting resource to be removed from the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> removeSupportingRelationshipWithHttpInfo(String goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeSupportingRelationshipValidateBeforeCall(goalGid, removeSupportingRelationshipRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a supporting goal relationship (asynchronously)
     * Removes a goal relationship for a given parent goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param removeSupportingRelationshipRequest The supporting resource to be removed from the goal (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSupportingRelationshipAsync(String goalGid, RemoveSupportingRelationshipRequest removeSupportingRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSupportingRelationshipValidateBeforeCall(goalGid, removeSupportingRelationshipRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGoalRelationship
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param updateGoalRelationshipRequest The updated fields for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGoalRelationshipCall(String goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGoalRelationshipRequest;

        // create path and map variables
        String localVarPath = "/goal_relationships/{goal_relationship_gid}"
            .replace("{" + "goal_relationship_gid" + "}", localVarApiClient.escapeString(goalRelationshipGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGoalRelationshipValidateBeforeCall(String goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalRelationshipGid' is set
        if (goalRelationshipGid == null) {
            throw new ApiException("Missing the required parameter 'goalRelationshipGid' when calling updateGoalRelationship(Async)");
        }

        // verify the required parameter 'updateGoalRelationshipRequest' is set
        if (updateGoalRelationshipRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGoalRelationshipRequest' when calling updateGoalRelationship(Async)");
        }

        return updateGoalRelationshipCall(goalRelationshipGid, updateGoalRelationshipRequest, optPretty, optFields, _callback);

    }

    /**
     * Update a goal relationship
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param updateGoalRelationshipRequest The updated fields for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return GetGoalRelationship200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoalRelationship200Response updateGoalRelationship(String goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<GetGoalRelationship200Response> localVarResp = updateGoalRelationshipWithHttpInfo(goalRelationshipGid, updateGoalRelationshipRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Update a goal relationship
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param updateGoalRelationshipRequest The updated fields for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;GetGoalRelationship200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGoalRelationship200Response> updateGoalRelationshipWithHttpInfo(String goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateGoalRelationshipValidateBeforeCall(goalRelationshipGid, updateGoalRelationshipRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GetGoalRelationship200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a goal relationship (asynchronously)
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * @param goalRelationshipGid Globally unique identifier for the goal relationship. (required)
     * @param updateGoalRelationshipRequest The updated fields for the goal relationship. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal relationship. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGoalRelationshipAsync(String goalRelationshipGid, UpdateGoalRelationshipRequest updateGoalRelationshipRequest, Boolean optPretty, List<String> optFields, final ApiCallback<GetGoalRelationship200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGoalRelationshipValidateBeforeCall(goalRelationshipGid, updateGoalRelationshipRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GetGoalRelationship200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
