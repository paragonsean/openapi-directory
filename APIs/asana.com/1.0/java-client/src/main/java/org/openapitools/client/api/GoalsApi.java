/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddFollowersRequest;
import org.openapitools.client.model.CreateGoal201Response;
import org.openapitools.client.model.CreateGoalMetricRequest;
import org.openapitools.client.model.CreateGoalRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetGoals200Response;
import org.openapitools.client.model.UpdateGoalMetricRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GoalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GoalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFollowers
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be added as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFollowersCall(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFollowersRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/addFollowers"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFollowersValidateBeforeCall(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling addFollowers(Async)");
        }

        // verify the required parameter 'addFollowersRequest' is set
        if (addFollowersRequest == null) {
            throw new ApiException("Missing the required parameter 'addFollowersRequest' when calling addFollowers(Async)");
        }

        return addFollowersCall(goalGid, addFollowersRequest, optPretty, optFields, _callback);

    }

    /**
     * Add a collaborator to a goal
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be added as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateGoal201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGoal201Response addFollowers(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateGoal201Response> localVarResp = addFollowersWithHttpInfo(goalGid, addFollowersRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Add a collaborator to a goal
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be added as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateGoal201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGoal201Response> addFollowersWithHttpInfo(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = addFollowersValidateBeforeCall(goalGid, addFollowersRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a collaborator to a goal (asynchronously)
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be added as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFollowersAsync(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateGoal201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFollowersValidateBeforeCall(goalGid, addFollowersRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGoal
     * @param createGoalRequest The goal to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGoalCall(CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGoalRequest;

        // create path and map variables
        String localVarPath = "/goals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGoalValidateBeforeCall(CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGoalRequest' is set
        if (createGoalRequest == null) {
            throw new ApiException("Missing the required parameter 'createGoalRequest' when calling createGoal(Async)");
        }

        return createGoalCall(createGoalRequest, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Create a goal
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * @param createGoalRequest The goal to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return CreateGoal201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGoal201Response createGoal(CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<CreateGoal201Response> localVarResp = createGoalWithHttpInfo(createGoalRequest, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Create a goal
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * @param createGoalRequest The goal to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;CreateGoal201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGoal201Response> createGoalWithHttpInfo(CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = createGoalValidateBeforeCall(createGoalRequest, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a goal (asynchronously)
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * @param createGoalRequest The goal to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGoalAsync(CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<CreateGoal201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGoalValidateBeforeCall(createGoalRequest, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGoalMetric
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalMetricRequest The goal metric to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGoalMetricCall(String goalGid, CreateGoalMetricRequest createGoalMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGoalMetricRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/setMetric"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGoalMetricValidateBeforeCall(String goalGid, CreateGoalMetricRequest createGoalMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling createGoalMetric(Async)");
        }

        // verify the required parameter 'createGoalMetricRequest' is set
        if (createGoalMetricRequest == null) {
            throw new ApiException("Missing the required parameter 'createGoalMetricRequest' when calling createGoalMetric(Async)");
        }

        return createGoalMetricCall(goalGid, createGoalMetricRequest, optPretty, optFields, _callback);

    }

    /**
     * Create a goal metric
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalMetricRequest The goal metric to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateGoal201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGoal201Response createGoalMetric(String goalGid, CreateGoalMetricRequest createGoalMetricRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateGoal201Response> localVarResp = createGoalMetricWithHttpInfo(goalGid, createGoalMetricRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Create a goal metric
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalMetricRequest The goal metric to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateGoal201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGoal201Response> createGoalMetricWithHttpInfo(String goalGid, CreateGoalMetricRequest createGoalMetricRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = createGoalMetricValidateBeforeCall(goalGid, createGoalMetricRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a goal metric (asynchronously)
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalMetricRequest The goal metric to create. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGoalMetricAsync(String goalGid, CreateGoalMetricRequest createGoalMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateGoal201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGoalMetricValidateBeforeCall(goalGid, createGoalMetricRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGoal
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGoalCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGoalValidateBeforeCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling deleteGoal(Async)");
        }

        return deleteGoalCall(goalGid, optPretty, optFields, _callback);

    }

    /**
     * Delete a goal
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response deleteGoal(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = deleteGoalWithHttpInfo(goalGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Delete a goal
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> deleteGoalWithHttpInfo(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = deleteGoalValidateBeforeCall(goalGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a goal (asynchronously)
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGoalAsync(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGoalValidateBeforeCall(goalGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGoal
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalValidateBeforeCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling getGoal(Async)");
        }

        return getGoalCall(goalGid, optPretty, optFields, _callback);

    }

    /**
     * Get a goal
     * Returns the complete goal record for a single goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateGoal201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGoal201Response getGoal(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateGoal201Response> localVarResp = getGoalWithHttpInfo(goalGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Get a goal
     * Returns the complete goal record for a single goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateGoal201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGoal201Response> getGoalWithHttpInfo(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getGoalValidateBeforeCall(goalGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a goal (asynchronously)
     * Returns the complete goal record for a single goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the record for a single goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalAsync(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback<CreateGoal201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalValidateBeforeCall(goalGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGoals
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param portfolio Globally unique identifier for supporting portfolio. (optional)
     * @param project Globally unique identifier for supporting project. (optional)
     * @param isWorkspaceLevel Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)
     * @param team Globally unique identifier for the team. (optional)
     * @param workspace Globally unique identifier for the workspace. (optional)
     * @param timePeriods Globally unique identifiers for the time periods. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalsCall(Boolean optPretty, List<String> optFields, Integer limit, String offset, String portfolio, String project, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (portfolio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolio", portfolio));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (isWorkspaceLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_workspace_level", isWorkspaceLevel));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (workspace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workspace", workspace));
        }

        if (timePeriods != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time_periods", timePeriods));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoalsValidateBeforeCall(Boolean optPretty, List<String> optFields, Integer limit, String offset, String portfolio, String project, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods, final ApiCallback _callback) throws ApiException {
        return getGoalsCall(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods, _callback);

    }

    /**
     * Get goals
     * Returns compact goal records.
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param portfolio Globally unique identifier for supporting portfolio. (optional)
     * @param project Globally unique identifier for supporting project. (optional)
     * @param isWorkspaceLevel Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)
     * @param team Globally unique identifier for the team. (optional)
     * @param workspace Globally unique identifier for the workspace. (optional)
     * @param timePeriods Globally unique identifiers for the time periods. (optional)
     * @return GetGoals200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoals200Response getGoals(Boolean optPretty, List<String> optFields, Integer limit, String offset, String portfolio, String project, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods) throws ApiException {
        ApiResponse<GetGoals200Response> localVarResp = getGoalsWithHttpInfo(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods);
        return localVarResp.getData();
    }

    /**
     * Get goals
     * Returns compact goal records.
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param portfolio Globally unique identifier for supporting portfolio. (optional)
     * @param project Globally unique identifier for supporting project. (optional)
     * @param isWorkspaceLevel Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)
     * @param team Globally unique identifier for the team. (optional)
     * @param workspace Globally unique identifier for the workspace. (optional)
     * @param timePeriods Globally unique identifiers for the time periods. (optional)
     * @return ApiResponse&lt;GetGoals200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGoals200Response> getGoalsWithHttpInfo(Boolean optPretty, List<String> optFields, Integer limit, String offset, String portfolio, String project, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods) throws ApiException {
        okhttp3.Call localVarCall = getGoalsValidateBeforeCall(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods, null);
        Type localVarReturnType = new TypeToken<GetGoals200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get goals (asynchronously)
     * Returns compact goal records.
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param portfolio Globally unique identifier for supporting portfolio. (optional)
     * @param project Globally unique identifier for supporting project. (optional)
     * @param isWorkspaceLevel Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter. (optional)
     * @param team Globally unique identifier for the team. (optional)
     * @param workspace Globally unique identifier for the workspace. (optional)
     * @param timePeriods Globally unique identifiers for the time periods. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the requested goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoalsAsync(Boolean optPretty, List<String> optFields, Integer limit, String offset, String portfolio, String project, Boolean isWorkspaceLevel, String team, String workspace, List<String> timePeriods, final ApiCallback<GetGoals200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoalsValidateBeforeCall(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods, _callback);
        Type localVarReturnType = new TypeToken<GetGoals200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParentGoalsForGoal
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParentGoalsForGoalCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/parentGoals"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParentGoalsForGoalValidateBeforeCall(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling getParentGoalsForGoal(Async)");
        }

        return getParentGoalsForGoalCall(goalGid, optPretty, optFields, _callback);

    }

    /**
     * Get parent goals from a goal
     * Returns a compact representation of all of the parent goals of a goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return GetGoals200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetGoals200Response getParentGoalsForGoal(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<GetGoals200Response> localVarResp = getParentGoalsForGoalWithHttpInfo(goalGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Get parent goals from a goal
     * Returns a compact representation of all of the parent goals of a goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;GetGoals200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGoals200Response> getParentGoalsForGoalWithHttpInfo(String goalGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getParentGoalsForGoalValidateBeforeCall(goalGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<GetGoals200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get parent goals from a goal (asynchronously)
     * Returns a compact representation of all of the parent goals of a goal.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified goal&#39;s parent goals. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParentGoalsForGoalAsync(String goalGid, Boolean optPretty, List<String> optFields, final ApiCallback<GetGoals200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParentGoalsForGoalValidateBeforeCall(goalGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<GetGoals200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFollowers
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be removed as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFollowersCall(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFollowersRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/removeFollowers"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFollowersValidateBeforeCall(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling removeFollowers(Async)");
        }

        // verify the required parameter 'addFollowersRequest' is set
        if (addFollowersRequest == null) {
            throw new ApiException("Missing the required parameter 'addFollowersRequest' when calling removeFollowers(Async)");
        }

        return removeFollowersCall(goalGid, addFollowersRequest, optPretty, optFields, _callback);

    }

    /**
     * Remove a collaborator from a goal
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be removed as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateGoal201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGoal201Response removeFollowers(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateGoal201Response> localVarResp = removeFollowersWithHttpInfo(goalGid, addFollowersRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Remove a collaborator from a goal
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be removed as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateGoal201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGoal201Response> removeFollowersWithHttpInfo(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = removeFollowersValidateBeforeCall(goalGid, addFollowersRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a collaborator from a goal (asynchronously)
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param addFollowersRequest The followers to be removed as collaborators (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed users as collaborators. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFollowersAsync(String goalGid, AddFollowersRequest addFollowersRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateGoal201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFollowersValidateBeforeCall(goalGid, addFollowersRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGoal
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalRequest The updated fields for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGoalCall(String goalGid, CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGoalRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGoalValidateBeforeCall(String goalGid, CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling updateGoal(Async)");
        }

        // verify the required parameter 'createGoalRequest' is set
        if (createGoalRequest == null) {
            throw new ApiException("Missing the required parameter 'createGoalRequest' when calling updateGoal(Async)");
        }

        return updateGoalCall(goalGid, createGoalRequest, optPretty, optFields, _callback);

    }

    /**
     * Update a goal
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalRequest The updated fields for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateGoal201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGoal201Response updateGoal(String goalGid, CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateGoal201Response> localVarResp = updateGoalWithHttpInfo(goalGid, createGoalRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Update a goal
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalRequest The updated fields for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateGoal201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGoal201Response> updateGoalWithHttpInfo(String goalGid, CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateGoalValidateBeforeCall(goalGid, createGoalRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a goal (asynchronously)
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param createGoalRequest The updated fields for the goal. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGoalAsync(String goalGid, CreateGoalRequest createGoalRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateGoal201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGoalValidateBeforeCall(goalGid, createGoalRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGoalMetric
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param updateGoalMetricRequest The updated fields for the goal metric. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGoalMetricCall(String goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGoalMetricRequest;

        // create path and map variables
        String localVarPath = "/goals/{goal_gid}/setMetricCurrentValue"
            .replace("{" + "goal_gid" + "}", localVarApiClient.escapeString(goalGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGoalMetricValidateBeforeCall(String goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalGid' is set
        if (goalGid == null) {
            throw new ApiException("Missing the required parameter 'goalGid' when calling updateGoalMetric(Async)");
        }

        // verify the required parameter 'updateGoalMetricRequest' is set
        if (updateGoalMetricRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGoalMetricRequest' when calling updateGoalMetric(Async)");
        }

        return updateGoalMetricCall(goalGid, updateGoalMetricRequest, optPretty, optFields, _callback);

    }

    /**
     * Update a goal metric
     * Updates a goal&#39;s existing metric&#39;s &#x60;current_number_value&#x60; if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param updateGoalMetricRequest The updated fields for the goal metric. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateGoal201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGoal201Response updateGoalMetric(String goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateGoal201Response> localVarResp = updateGoalMetricWithHttpInfo(goalGid, updateGoalMetricRequest, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Update a goal metric
     * Updates a goal&#39;s existing metric&#39;s &#x60;current_number_value&#x60; if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param updateGoalMetricRequest The updated fields for the goal metric. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateGoal201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGoal201Response> updateGoalMetricWithHttpInfo(String goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = updateGoalMetricValidateBeforeCall(goalGid, updateGoalMetricRequest, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a goal metric (asynchronously)
     * Updates a goal&#39;s existing metric&#39;s &#x60;current_number_value&#x60; if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * @param goalGid Globally unique identifier for the goal. (required)
     * @param updateGoalMetricRequest The updated fields for the goal metric. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the goal metric. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> The request was valid, but the queried object or object mutation specified in the request is above your current premium level. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGoalMetricAsync(String goalGid, UpdateGoalMetricRequest updateGoalMetricRequest, Boolean optPretty, List<String> optFields, final ApiCallback<CreateGoal201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGoalMetricValidateBeforeCall(goalGid, updateGoalMetricRequest, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateGoal201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
