/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCustomField201Response;
import org.openapitools.client.model.CreateCustomFieldRequest;
import org.openapitools.client.model.CreateEnumOptionForCustomField201Response;
import org.openapitools.client.model.CreateEnumOptionForCustomFieldRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetCustomFieldsForWorkspace200Response;
import org.openapitools.client.model.InsertEnumOptionForCustomFieldRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomFieldsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomField
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createCustomFieldRequest The custom field object to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomFieldCall(Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateCustomFieldRequest createCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomFieldRequest;

        // create path and map variables
        String localVarPath = "/custom_fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFieldValidateBeforeCall(Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateCustomFieldRequest createCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        return createCustomFieldCall(optPretty, optFields, limit, offset, createCustomFieldRequest, _callback);

    }

    /**
     * Create a custom field
     * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as &#x60;Due Date&#x60; or &#x60;Assignee&#x60;. A custom field’s type must be one of &#x60;text&#x60;, &#x60;enum&#x60;, &#x60;multi_enum&#x60;, &#x60;number&#x60;, &#x60;date&#x60;, or &#x60;people&#x60;.  Returns the full record of the newly created custom field.
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createCustomFieldRequest The custom field object to create. (optional)
     * @return CreateCustomField201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomField201Response createCustomField(Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateCustomFieldRequest createCustomFieldRequest) throws ApiException {
        ApiResponse<CreateCustomField201Response> localVarResp = createCustomFieldWithHttpInfo(optPretty, optFields, limit, offset, createCustomFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Create a custom field
     * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as &#x60;Due Date&#x60; or &#x60;Assignee&#x60;. A custom field’s type must be one of &#x60;text&#x60;, &#x60;enum&#x60;, &#x60;multi_enum&#x60;, &#x60;number&#x60;, &#x60;date&#x60;, or &#x60;people&#x60;.  Returns the full record of the newly created custom field.
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createCustomFieldRequest The custom field object to create. (optional)
     * @return ApiResponse&lt;CreateCustomField201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomField201Response> createCustomFieldWithHttpInfo(Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateCustomFieldRequest createCustomFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomFieldValidateBeforeCall(optPretty, optFields, limit, offset, createCustomFieldRequest, null);
        Type localVarReturnType = new TypeToken<CreateCustomField201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a custom field (asynchronously)
     * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as &#x60;Due Date&#x60; or &#x60;Assignee&#x60;. A custom field’s type must be one of &#x60;text&#x60;, &#x60;enum&#x60;, &#x60;multi_enum&#x60;, &#x60;number&#x60;, &#x60;date&#x60;, or &#x60;people&#x60;.  Returns the full record of the newly created custom field.
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createCustomFieldRequest The custom field object to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomFieldAsync(Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateCustomFieldRequest createCustomFieldRequest, final ApiCallback<CreateCustomField201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFieldValidateBeforeCall(optPretty, optFields, limit, offset, createCustomFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomField201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEnumOptionForCustomField
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnumOptionForCustomFieldCall(String customFieldGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEnumOptionForCustomFieldRequest;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}/enum_options"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnumOptionForCustomFieldValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling createEnumOptionForCustomField(Async)");
        }

        return createEnumOptionForCustomFieldCall(customFieldGid, optPretty, optFields, limit, offset, createEnumOptionForCustomFieldRequest, _callback);

    }

    /**
     * Create an enum option
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @return CreateEnumOptionForCustomField201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEnumOptionForCustomField201Response createEnumOptionForCustomField(String customFieldGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest) throws ApiException {
        ApiResponse<CreateEnumOptionForCustomField201Response> localVarResp = createEnumOptionForCustomFieldWithHttpInfo(customFieldGid, optPretty, optFields, limit, offset, createEnumOptionForCustomFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Create an enum option
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @return ApiResponse&lt;CreateEnumOptionForCustomField201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEnumOptionForCustomField201Response> createEnumOptionForCustomFieldWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = createEnumOptionForCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, limit, offset, createEnumOptionForCustomFieldRequest, null);
        Type localVarReturnType = new TypeToken<CreateEnumOptionForCustomField201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an enum option (asynchronously)
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Custom field enum option successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnumOptionForCustomFieldAsync(String customFieldGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest, final ApiCallback<CreateEnumOptionForCustomField201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnumOptionForCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, limit, offset, createEnumOptionForCustomFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateEnumOptionForCustomField201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomField
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomFieldCall(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomFieldValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling deleteCustomField(Async)");
        }

        return deleteCustomFieldCall(customFieldGid, optPretty, optFields, _callback);

    }

    /**
     * Delete a custom field
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return DeleteAttachment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttachment200Response deleteCustomField(String customFieldGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<DeleteAttachment200Response> localVarResp = deleteCustomFieldWithHttpInfo(customFieldGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Delete a custom field
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;DeleteAttachment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAttachment200Response> deleteCustomFieldWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a custom field (asynchronously)
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomFieldAsync(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback<DeleteAttachment200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<DeleteAttachment200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomField
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldCall(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling getCustomField(Async)");
        }

        return getCustomFieldCall(customFieldGid, optPretty, optFields, _callback);

    }

    /**
     * Get a custom field
     * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return CreateCustomField201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomField201Response getCustomField(String customFieldGid, Boolean optPretty, List<String> optFields) throws ApiException {
        ApiResponse<CreateCustomField201Response> localVarResp = getCustomFieldWithHttpInfo(customFieldGid, optPretty, optFields);
        return localVarResp.getData();
    }

    /**
     * Get a custom field
     * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @return ApiResponse&lt;CreateCustomField201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomField201Response> getCustomFieldWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, null);
        Type localVarReturnType = new TypeToken<CreateCustomField201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a custom field (asynchronously)
     * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the complete definition of a custom field’s metadata. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldAsync(String customFieldGid, Boolean optPretty, List<String> optFields, final ApiCallback<CreateCustomField201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomField201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFieldsForWorkspace
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldsForWorkspaceCall(String workspaceGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace_gid}/custom_fields"
            .replace("{" + "workspace_gid" + "}", localVarApiClient.escapeString(workspaceGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsForWorkspaceValidateBeforeCall(String workspaceGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceGid' is set
        if (workspaceGid == null) {
            throw new ApiException("Missing the required parameter 'workspaceGid' when calling getCustomFieldsForWorkspace(Async)");
        }

        return getCustomFieldsForWorkspaceCall(workspaceGid, optPretty, optFields, limit, offset, _callback);

    }

    /**
     * Get a workspace&#39;s custom fields
     * Returns a list of the compact representation of all of the custom fields in a workspace.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return GetCustomFieldsForWorkspace200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsForWorkspace200Response getCustomFieldsForWorkspace(String workspaceGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        ApiResponse<GetCustomFieldsForWorkspace200Response> localVarResp = getCustomFieldsForWorkspaceWithHttpInfo(workspaceGid, optPretty, optFields, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get a workspace&#39;s custom fields
     * Returns a list of the compact representation of all of the custom fields in a workspace.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @return ApiResponse&lt;GetCustomFieldsForWorkspace200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomFieldsForWorkspace200Response> getCustomFieldsForWorkspaceWithHttpInfo(String workspaceGid, Boolean optPretty, List<String> optFields, Integer limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsForWorkspaceValidateBeforeCall(workspaceGid, optPretty, optFields, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetCustomFieldsForWorkspace200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a workspace&#39;s custom fields (asynchronously)
     * Returns a list of the compact representation of all of the custom fields in a workspace.
     * @param workspaceGid Globally unique identifier for the workspace or organization. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param limit Results per page. The number of objects to return per page. The value must be between 1 and 100. (optional)
     * @param offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. &#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all custom fields for the given workspace. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldsForWorkspaceAsync(String workspaceGid, Boolean optPretty, List<String> optFields, Integer limit, String offset, final ApiCallback<GetCustomFieldsForWorkspace200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsForWorkspaceValidateBeforeCall(workspaceGid, optPretty, optFields, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetCustomFieldsForWorkspace200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertEnumOptionForCustomField
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param insertEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertEnumOptionForCustomFieldCall(String customFieldGid, Boolean optPretty, List<String> optFields, InsertEnumOptionForCustomFieldRequest insertEnumOptionForCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = insertEnumOptionForCustomFieldRequest;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}/enum_options/insert"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertEnumOptionForCustomFieldValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, InsertEnumOptionForCustomFieldRequest insertEnumOptionForCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling insertEnumOptionForCustomField(Async)");
        }

        return insertEnumOptionForCustomFieldCall(customFieldGid, optPretty, optFields, insertEnumOptionForCustomFieldRequest, _callback);

    }

    /**
     * Reorder a custom field&#39;s enum
     * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param insertEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @return CreateEnumOptionForCustomField201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEnumOptionForCustomField201Response insertEnumOptionForCustomField(String customFieldGid, Boolean optPretty, List<String> optFields, InsertEnumOptionForCustomFieldRequest insertEnumOptionForCustomFieldRequest) throws ApiException {
        ApiResponse<CreateEnumOptionForCustomField201Response> localVarResp = insertEnumOptionForCustomFieldWithHttpInfo(customFieldGid, optPretty, optFields, insertEnumOptionForCustomFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Reorder a custom field&#39;s enum
     * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param insertEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @return ApiResponse&lt;CreateEnumOptionForCustomField201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEnumOptionForCustomField201Response> insertEnumOptionForCustomFieldWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields, InsertEnumOptionForCustomFieldRequest insertEnumOptionForCustomFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = insertEnumOptionForCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, insertEnumOptionForCustomFieldRequest, null);
        Type localVarReturnType = new TypeToken<CreateEnumOptionForCustomField201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reorder a custom field&#39;s enum (asynchronously)
     * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param insertEnumOptionForCustomFieldRequest The enum option object to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Custom field enum option successfully reordered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertEnumOptionForCustomFieldAsync(String customFieldGid, Boolean optPretty, List<String> optFields, InsertEnumOptionForCustomFieldRequest insertEnumOptionForCustomFieldRequest, final ApiCallback<CreateEnumOptionForCustomField201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertEnumOptionForCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, insertEnumOptionForCustomFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateEnumOptionForCustomField201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomField
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createCustomFieldRequest The custom field object with all updated properties. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldCall(String customFieldGid, Boolean optPretty, List<String> optFields, CreateCustomFieldRequest createCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomFieldRequest;

        // create path and map variables
        String localVarPath = "/custom_fields/{custom_field_gid}"
            .replace("{" + "custom_field_gid" + "}", localVarApiClient.escapeString(customFieldGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValidateBeforeCall(String customFieldGid, Boolean optPretty, List<String> optFields, CreateCustomFieldRequest createCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldGid' is set
        if (customFieldGid == null) {
            throw new ApiException("Missing the required parameter 'customFieldGid' when calling updateCustomField(Async)");
        }

        return updateCustomFieldCall(customFieldGid, optPretty, optFields, createCustomFieldRequest, _callback);

    }

    /**
     * Update a custom field
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s &#x60;type&#x60; cannot be updated. An enum custom field’s &#x60;enum_options&#x60; cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update &#x60;enum_options&#x60;. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createCustomFieldRequest The custom field object with all updated properties. (optional)
     * @return CreateCustomField201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomField201Response updateCustomField(String customFieldGid, Boolean optPretty, List<String> optFields, CreateCustomFieldRequest createCustomFieldRequest) throws ApiException {
        ApiResponse<CreateCustomField201Response> localVarResp = updateCustomFieldWithHttpInfo(customFieldGid, optPretty, optFields, createCustomFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Update a custom field
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s &#x60;type&#x60; cannot be updated. An enum custom field’s &#x60;enum_options&#x60; cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update &#x60;enum_options&#x60;. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createCustomFieldRequest The custom field object with all updated properties. (optional)
     * @return ApiResponse&lt;CreateCustomField201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCustomField201Response> updateCustomFieldWithHttpInfo(String customFieldGid, Boolean optPretty, List<String> optFields, CreateCustomFieldRequest createCustomFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, createCustomFieldRequest, null);
        Type localVarReturnType = new TypeToken<CreateCustomField201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a custom field (asynchronously)
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s &#x60;type&#x60; cannot be updated. An enum custom field’s &#x60;enum_options&#x60; cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update &#x60;enum_options&#x60;. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * @param customFieldGid Globally unique identifier for the custom field. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createCustomFieldRequest The custom field object with all updated properties. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom field was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldAsync(String customFieldGid, Boolean optPretty, List<String> optFields, CreateCustomFieldRequest createCustomFieldRequest, final ApiCallback<CreateCustomField201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(customFieldGid, optPretty, optFields, createCustomFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomField201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnumOption
     * @param enumOptionGid Globally unique identifier for the enum option. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnumOptionCall(String enumOptionGid, Boolean optPretty, List<String> optFields, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEnumOptionForCustomFieldRequest;

        // create path and map variables
        String localVarPath = "/enum_options/{enum_option_gid}"
            .replace("{" + "enum_option_gid" + "}", localVarApiClient.escapeString(enumOptionGid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (optPretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opt_pretty", optPretty));
        }

        if (optFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "opt_fields", optFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "personalAccessToken", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnumOptionValidateBeforeCall(String enumOptionGid, Boolean optPretty, List<String> optFields, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enumOptionGid' is set
        if (enumOptionGid == null) {
            throw new ApiException("Missing the required parameter 'enumOptionGid' when calling updateEnumOption(Async)");
        }

        return updateEnumOptionCall(enumOptionGid, optPretty, optFields, createEnumOptionForCustomFieldRequest, _callback);

    }

    /**
     * Update an enum option
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * @param enumOptionGid Globally unique identifier for the enum option. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to update (optional)
     * @return CreateEnumOptionForCustomField201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEnumOptionForCustomField201Response updateEnumOption(String enumOptionGid, Boolean optPretty, List<String> optFields, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest) throws ApiException {
        ApiResponse<CreateEnumOptionForCustomField201Response> localVarResp = updateEnumOptionWithHttpInfo(enumOptionGid, optPretty, optFields, createEnumOptionForCustomFieldRequest);
        return localVarResp.getData();
    }

    /**
     * Update an enum option
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * @param enumOptionGid Globally unique identifier for the enum option. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to update (optional)
     * @return ApiResponse&lt;CreateEnumOptionForCustomField201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEnumOptionForCustomField201Response> updateEnumOptionWithHttpInfo(String enumOptionGid, Boolean optPretty, List<String> optFields, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEnumOptionValidateBeforeCall(enumOptionGid, optPretty, optFields, createEnumOptionForCustomFieldRequest, null);
        Type localVarReturnType = new TypeToken<CreateEnumOptionForCustomField201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an enum option (asynchronously)
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * @param enumOptionGid Globally unique identifier for the enum option. (required)
     * @param optPretty Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. (optional)
     * @param optFields Defines fields to return. Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below. The id of included objects will always be returned, regardless of the field options. (optional)
     * @param createEnumOptionForCustomFieldRequest The enum option object to update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified custom field enum. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A valid authentication token was not provided with the request, so the API could not associate a user with the request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication and request syntax was valid but the server is refusing to complete the request. This can happen if you try to read or write to objects or properties that the user does not have access to. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> There was a problem on Asana’s end. In the event of a server error the response body should contain an error phrase. These phrases can be used by Asana support to quickly look up the incident that caused the server error. Some errors are due to server load, and will not supply an error phrase. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnumOptionAsync(String enumOptionGid, Boolean optPretty, List<String> optFields, CreateEnumOptionForCustomFieldRequest createEnumOptionForCustomFieldRequest, final ApiCallback<CreateEnumOptionForCustomField201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnumOptionValidateBeforeCall(enumOptionGid, optPretty, optFields, createEnumOptionForCustomFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateEnumOptionForCustomField201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
