/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProjectCompact;
import org.openapitools.client.model.ProjectTemplateCompact;
import org.openapitools.client.model.TaskCompact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobCompact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobCompact {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_NEW_PROJECT = "new_project";
  @SerializedName(SERIALIZED_NAME_NEW_PROJECT)
  private ProjectCompact newProject;

  public static final String SERIALIZED_NAME_NEW_PROJECT_TEMPLATE = "new_project_template";
  @SerializedName(SERIALIZED_NAME_NEW_PROJECT_TEMPLATE)
  private ProjectTemplateCompact newProjectTemplate;

  public static final String SERIALIZED_NAME_NEW_TASK = "new_task";
  @SerializedName(SERIALIZED_NAME_NEW_TASK)
  private TaskCompact newTask;

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private String resourceSubtype;

  /**
   * The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_STARTED("not_started"),
    
    IN_PROGRESS("in_progress"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public JobCompact() {
  }

  public JobCompact(
     String gid, 
     String resourceType, 
     String resourceSubtype, 
     StatusEnum status
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.resourceSubtype = resourceSubtype;
    this.status = status;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public JobCompact newProject(ProjectCompact newProject) {
    this.newProject = newProject;
    return this;
  }

  /**
   * Get newProject
   * @return newProject
   */
  @javax.annotation.Nullable
  public ProjectCompact getNewProject() {
    return newProject;
  }

  public void setNewProject(ProjectCompact newProject) {
    this.newProject = newProject;
  }


  public JobCompact newProjectTemplate(ProjectTemplateCompact newProjectTemplate) {
    this.newProjectTemplate = newProjectTemplate;
    return this;
  }

  /**
   * Get newProjectTemplate
   * @return newProjectTemplate
   */
  @javax.annotation.Nullable
  public ProjectTemplateCompact getNewProjectTemplate() {
    return newProjectTemplate;
  }

  public void setNewProjectTemplate(ProjectTemplateCompact newProjectTemplate) {
    this.newProjectTemplate = newProjectTemplate;
  }


  public JobCompact newTask(TaskCompact newTask) {
    this.newTask = newTask;
    return this;
  }

  /**
   * Get newTask
   * @return newTask
   */
  @javax.annotation.Nullable
  public TaskCompact getNewTask() {
    return newTask;
  }

  public void setNewTask(TaskCompact newTask) {
    this.newTask = newTask;
  }


  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
   * @return resourceSubtype
   */
  @javax.annotation.Nullable
  public String getResourceSubtype() {
    return resourceSubtype;
  }



  /**
   * The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobCompact jobCompact = (JobCompact) o;
    return Objects.equals(this.gid, jobCompact.gid) &&
        Objects.equals(this.resourceType, jobCompact.resourceType) &&
        Objects.equals(this.newProject, jobCompact.newProject) &&
        Objects.equals(this.newProjectTemplate, jobCompact.newProjectTemplate) &&
        Objects.equals(this.newTask, jobCompact.newTask) &&
        Objects.equals(this.resourceSubtype, jobCompact.resourceSubtype) &&
        Objects.equals(this.status, jobCompact.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, newProject, newProjectTemplate, newTask, resourceSubtype, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobCompact {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    newProject: ").append(toIndentedString(newProject)).append("\n");
    sb.append("    newProjectTemplate: ").append(toIndentedString(newProjectTemplate)).append("\n");
    sb.append("    newTask: ").append(toIndentedString(newTask)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("new_project");
    openapiFields.add("new_project_template");
    openapiFields.add("new_task");
    openapiFields.add("resource_subtype");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobCompact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobCompact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobCompact is not found in the empty JSON string", JobCompact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobCompact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobCompact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      // validate the optional field `new_project`
      if (jsonObj.get("new_project") != null && !jsonObj.get("new_project").isJsonNull()) {
        ProjectCompact.validateJsonElement(jsonObj.get("new_project"));
      }
      // validate the optional field `new_project_template`
      if (jsonObj.get("new_project_template") != null && !jsonObj.get("new_project_template").isJsonNull()) {
        ProjectTemplateCompact.validateJsonElement(jsonObj.get("new_project_template"));
      }
      // validate the optional field `new_task`
      if (jsonObj.get("new_task") != null && !jsonObj.get("new_task").isJsonNull()) {
        TaskCompact.validateJsonElement(jsonObj.get("new_task"));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobCompact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobCompact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobCompact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobCompact.class));

       return (TypeAdapter<T>) new TypeAdapter<JobCompact>() {
           @Override
           public void write(JsonWriter out, JobCompact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobCompact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobCompact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobCompact
   * @throws IOException if the JSON string is invalid with respect to JobCompact
   */
  public static JobCompact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobCompact.class);
  }

  /**
   * Convert an instance of JobCompact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

