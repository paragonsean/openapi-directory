/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Like;
import org.openapitools.client.model.StatusUpdateResponseAllOfParent;
import org.openapitools.client.model.UserCompact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StatusUpdateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:24:59.644143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StatusUpdateResponse {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The &#x60;resource_subtype&#x60;s for &#x60;status&#x60; objects represent the type of their parent.
   */
  @JsonAdapter(ResourceSubtypeEnum.Adapter.class)
  public enum ResourceSubtypeEnum {
    PROJECT_STATUS_UPDATE("project_status_update"),
    
    PORTFOLIO_STATUS_UPDATE("portfolio_status_update"),
    
    GOAL_STATUS_UPDATE("goal_status_update");

    private String value;

    ResourceSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceSubtypeEnum fromValue(String value) {
      for (ResourceSubtypeEnum b : ResourceSubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceSubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceSubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_SUBTYPE = "resource_subtype";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SUBTYPE)
  private ResourceSubtypeEnum resourceSubtype;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_HTML_TEXT = "html_text";
  @SerializedName(SERIALIZED_NAME_HTML_TEXT)
  private String htmlText;

  /**
   * The type associated with the status update. This represents the current state of the object this object is on.
   */
  @JsonAdapter(StatusTypeEnum.Adapter.class)
  public enum StatusTypeEnum {
    ON_TRACK("on_track"),
    
    AT_RISK("at_risk"),
    
    OFF_TRACK("off_track"),
    
    ON_HOLD("on_hold"),
    
    COMPLETE("complete"),
    
    ACHIEVED("achieved"),
    
    PARTIAL("partial"),
    
    MISSED("missed"),
    
    DROPPED("dropped");

    private String value;

    StatusTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusTypeEnum fromValue(String value) {
      for (StatusTypeEnum b : StatusTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_TYPE = "status_type";
  @SerializedName(SERIALIZED_NAME_STATUS_TYPE)
  private StatusTypeEnum statusType;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserCompact author;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserCompact createdBy;

  public static final String SERIALIZED_NAME_HEARTED = "hearted";
  @SerializedName(SERIALIZED_NAME_HEARTED)
  private Boolean hearted;

  public static final String SERIALIZED_NAME_HEARTS = "hearts";
  @SerializedName(SERIALIZED_NAME_HEARTS)
  private List<Like> hearts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIKED = "liked";
  @SerializedName(SERIALIZED_NAME_LIKED)
  private Boolean liked;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private List<Like> likes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_NUM_HEARTS = "num_hearts";
  @SerializedName(SERIALIZED_NAME_NUM_HEARTS)
  private Integer numHearts;

  public static final String SERIALIZED_NAME_NUM_LIKES = "num_likes";
  @SerializedName(SERIALIZED_NAME_NUM_LIKES)
  private Integer numLikes;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private StatusUpdateResponseAllOfParent parent;

  public StatusUpdateResponse() {
  }

  public StatusUpdateResponse(
     String gid, 
     String resourceType, 
     ResourceSubtypeEnum resourceSubtype, 
     OffsetDateTime createdAt, 
     Boolean hearted, 
     List<Like> hearts, 
     List<Like> likes, 
     OffsetDateTime modifiedAt, 
     Integer numHearts, 
     Integer numLikes
  ) {
    this();
    this.gid = gid;
    this.resourceType = resourceType;
    this.resourceSubtype = resourceSubtype;
    this.createdAt = createdAt;
    this.hearted = hearted;
    this.hearts = hearts;
    this.likes = likes;
    this.modifiedAt = modifiedAt;
    this.numHearts = numHearts;
    this.numLikes = numLikes;
  }

  /**
   * Globally unique identifier of the resource, as a string.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }



  /**
   * The base type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  /**
   * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The &#x60;resource_subtype&#x60;s for &#x60;status&#x60; objects represent the type of their parent.
   * @return resourceSubtype
   */
  @javax.annotation.Nullable
  public ResourceSubtypeEnum getResourceSubtype() {
    return resourceSubtype;
  }



  public StatusUpdateResponse title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the status update.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public StatusUpdateResponse htmlText(String htmlText) {
    this.htmlText = htmlText;
    return this;
  }

  /**
   * [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
   * @return htmlText
   */
  @javax.annotation.Nullable
  public String getHtmlText() {
    return htmlText;
  }

  public void setHtmlText(String htmlText) {
    this.htmlText = htmlText;
  }


  public StatusUpdateResponse statusType(StatusTypeEnum statusType) {
    this.statusType = statusType;
    return this;
  }

  /**
   * The type associated with the status update. This represents the current state of the object this object is on.
   * @return statusType
   */
  @javax.annotation.Nonnull
  public StatusTypeEnum getStatusType() {
    return statusType;
  }

  public void setStatusType(StatusTypeEnum statusType) {
    this.statusType = statusType;
  }


  public StatusUpdateResponse text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text content of the status update.
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public StatusUpdateResponse author(UserCompact author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserCompact getAuthor() {
    return author;
  }

  public void setAuthor(UserCompact author) {
    this.author = author;
  }


  /**
   * The time at which this resource was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public StatusUpdateResponse createdBy(UserCompact createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserCompact getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserCompact createdBy) {
    this.createdBy = createdBy;
  }


  /**
   * *Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.
   * @return hearted
   */
  @javax.annotation.Nullable
  public Boolean getHearted() {
    return hearted;
  }



  /**
   * *Deprecated - please use likes instead* Array of likes for users who have hearted this status.
   * @return hearts
   */
  @javax.annotation.Nullable
  public List<Like> getHearts() {
    return hearts;
  }



  public StatusUpdateResponse liked(Boolean liked) {
    this.liked = liked;
    return this;
  }

  /**
   * True if the status is liked by the authorized user, false if not.
   * @return liked
   */
  @javax.annotation.Nullable
  public Boolean getLiked() {
    return liked;
  }

  public void setLiked(Boolean liked) {
    this.liked = liked;
  }


  /**
   * Array of likes for users who have liked this status.
   * @return likes
   */
  @javax.annotation.Nullable
  public List<Like> getLikes() {
    return likes;
  }



  /**
   * The time at which this project status was last modified. *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }



  /**
   * *Deprecated - please use likes instead* The number of users who have hearted this status.
   * @return numHearts
   */
  @javax.annotation.Nullable
  public Integer getNumHearts() {
    return numHearts;
  }



  /**
   * The number of users who have liked this status.
   * @return numLikes
   */
  @javax.annotation.Nullable
  public Integer getNumLikes() {
    return numLikes;
  }



  public StatusUpdateResponse parent(StatusUpdateResponseAllOfParent parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public StatusUpdateResponseAllOfParent getParent() {
    return parent;
  }

  public void setParent(StatusUpdateResponseAllOfParent parent) {
    this.parent = parent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusUpdateResponse statusUpdateResponse = (StatusUpdateResponse) o;
    return Objects.equals(this.gid, statusUpdateResponse.gid) &&
        Objects.equals(this.resourceType, statusUpdateResponse.resourceType) &&
        Objects.equals(this.resourceSubtype, statusUpdateResponse.resourceSubtype) &&
        Objects.equals(this.title, statusUpdateResponse.title) &&
        Objects.equals(this.htmlText, statusUpdateResponse.htmlText) &&
        Objects.equals(this.statusType, statusUpdateResponse.statusType) &&
        Objects.equals(this.text, statusUpdateResponse.text) &&
        Objects.equals(this.author, statusUpdateResponse.author) &&
        Objects.equals(this.createdAt, statusUpdateResponse.createdAt) &&
        Objects.equals(this.createdBy, statusUpdateResponse.createdBy) &&
        Objects.equals(this.hearted, statusUpdateResponse.hearted) &&
        Objects.equals(this.hearts, statusUpdateResponse.hearts) &&
        Objects.equals(this.liked, statusUpdateResponse.liked) &&
        Objects.equals(this.likes, statusUpdateResponse.likes) &&
        Objects.equals(this.modifiedAt, statusUpdateResponse.modifiedAt) &&
        Objects.equals(this.numHearts, statusUpdateResponse.numHearts) &&
        Objects.equals(this.numLikes, statusUpdateResponse.numLikes) &&
        Objects.equals(this.parent, statusUpdateResponse.parent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, resourceType, resourceSubtype, title, htmlText, statusType, text, author, createdAt, createdBy, hearted, hearts, liked, likes, modifiedAt, numHearts, numLikes, parent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusUpdateResponse {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceSubtype: ").append(toIndentedString(resourceSubtype)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    htmlText: ").append(toIndentedString(htmlText)).append("\n");
    sb.append("    statusType: ").append(toIndentedString(statusType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    hearted: ").append(toIndentedString(hearted)).append("\n");
    sb.append("    hearts: ").append(toIndentedString(hearts)).append("\n");
    sb.append("    liked: ").append(toIndentedString(liked)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    numHearts: ").append(toIndentedString(numHearts)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("resource_type");
    openapiFields.add("resource_subtype");
    openapiFields.add("title");
    openapiFields.add("html_text");
    openapiFields.add("status_type");
    openapiFields.add("text");
    openapiFields.add("author");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("hearted");
    openapiFields.add("hearts");
    openapiFields.add("liked");
    openapiFields.add("likes");
    openapiFields.add("modified_at");
    openapiFields.add("num_hearts");
    openapiFields.add("num_likes");
    openapiFields.add("parent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status_type");
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StatusUpdateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatusUpdateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatusUpdateResponse is not found in the empty JSON string", StatusUpdateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatusUpdateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatusUpdateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatusUpdateResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) && !jsonObj.get("resource_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_subtype").toString()));
      }
      // validate the optional field `resource_subtype`
      if (jsonObj.get("resource_subtype") != null && !jsonObj.get("resource_subtype").isJsonNull()) {
        ResourceSubtypeEnum.validateJsonElement(jsonObj.get("resource_subtype"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("html_text") != null && !jsonObj.get("html_text").isJsonNull()) && !jsonObj.get("html_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_text").toString()));
      }
      if (!jsonObj.get("status_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_type").toString()));
      }
      // validate the required field `status_type`
      StatusTypeEnum.validateJsonElement(jsonObj.get("status_type"));
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserCompact.validateJsonElement(jsonObj.get("author"));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        UserCompact.validateJsonElement(jsonObj.get("created_by"));
      }
      if (jsonObj.get("hearts") != null && !jsonObj.get("hearts").isJsonNull()) {
        JsonArray jsonArrayhearts = jsonObj.getAsJsonArray("hearts");
        if (jsonArrayhearts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hearts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hearts` to be an array in the JSON string but got `%s`", jsonObj.get("hearts").toString()));
          }

          // validate the optional field `hearts` (array)
          for (int i = 0; i < jsonArrayhearts.size(); i++) {
            Like.validateJsonElement(jsonArrayhearts.get(i));
          };
        }
      }
      if (jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) {
        JsonArray jsonArraylikes = jsonObj.getAsJsonArray("likes");
        if (jsonArraylikes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("likes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `likes` to be an array in the JSON string but got `%s`", jsonObj.get("likes").toString()));
          }

          // validate the optional field `likes` (array)
          for (int i = 0; i < jsonArraylikes.size(); i++) {
            Like.validateJsonElement(jsonArraylikes.get(i));
          };
        }
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        StatusUpdateResponseAllOfParent.validateJsonElement(jsonObj.get("parent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatusUpdateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatusUpdateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatusUpdateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatusUpdateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StatusUpdateResponse>() {
           @Override
           public void write(JsonWriter out, StatusUpdateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatusUpdateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StatusUpdateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StatusUpdateResponse
   * @throws IOException if the JSON string is invalid with respect to StatusUpdateResponse
   */
  public static StatusUpdateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatusUpdateResponse.class);
  }

  /**
   * Convert an instance of StatusUpdateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

