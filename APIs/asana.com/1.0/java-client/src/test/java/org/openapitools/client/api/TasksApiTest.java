/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddDependenciesForTaskRequest;
import org.openapitools.client.model.AddDependentsForTaskRequest;
import org.openapitools.client.model.AddFollowersRequest;
import org.openapitools.client.model.AddProjectForTaskRequest;
import org.openapitools.client.model.AddTagForTaskRequest;
import org.openapitools.client.model.CreateTask201Response;
import org.openapitools.client.model.CreateTaskRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.DuplicateTaskRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetJob200Response;
import org.openapitools.client.model.GetTasksForProject200Response;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RemoveFollowerForTaskRequest;
import org.openapitools.client.model.RemoveProjectForTaskRequest;
import org.openapitools.client.model.RemoveTagForTaskRequest;
import org.openapitools.client.model.SetParentForTaskRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Disabled
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    /**
     * Set dependencies for a task
     *
     * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDependenciesForTaskTest() throws ApiException {
        String taskGid = null;
        AddDependenciesForTaskRequest addDependenciesForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.addDependenciesForTask(taskGid, addDependenciesForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Set dependents for a task
     *
     * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDependentsForTaskTest() throws ApiException {
        String taskGid = null;
        AddDependentsForTaskRequest addDependentsForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.addDependentsForTask(taskGid, addDependentsForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Add followers to a task
     *
     * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFollowersForTaskTest() throws ApiException {
        String taskGid = null;
        AddFollowersRequest addFollowersRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTask201Response response = api.addFollowersForTask(taskGid, addFollowersRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Add a project to a task
     *
     * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  &#x60;addProject&#x60; can also be used to reorder a task within a project or section that already contains it.  At most one of &#x60;insert_before&#x60;, &#x60;insert_after&#x60;, or &#x60;section&#x60; should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify &#x60;insert_before&#x60; or &#x60;insert_after&#x60; and a task within the section to anchor the position of this task.  Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProjectForTaskTest() throws ApiException {
        String taskGid = null;
        AddProjectForTaskRequest addProjectForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.addProjectForTask(taskGid, addProjectForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Add a tag to a task
     *
     * Adds a tag to a task. Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagForTaskTest() throws ApiException {
        String taskGid = null;
        AddTagForTaskRequest addTagForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.addTagForTask(taskGid, addTagForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Create a subtask
     *
     * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubtaskForTaskTest() throws ApiException {
        String taskGid = null;
        CreateTaskRequest createTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTask201Response response = api.createSubtaskForTask(taskGid, createTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Create a task
     *
     * Creating a new task is as easy as POSTing to the &#x60;/tasks&#x60; endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify &#x60;projects&#x60; or a &#x60;parent&#x60; task instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        CreateTaskRequest createTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTask201Response response = api.createTask(createTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Delete a task
     *
     * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.deleteTask(taskGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Duplicate a task
     *
     * Creates and returns a job that will asynchronously handle the duplication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateTaskTest() throws ApiException {
        String taskGid = null;
        DuplicateTaskRequest duplicateTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetJob200Response response = api.duplicateTask(taskGid, duplicateTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get dependencies from a task
     *
     * Returns the compact representations of all of the dependencies of a task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDependenciesForTaskTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTasksForProject200Response response = api.getDependenciesForTask(taskGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get dependents from a task
     *
     * Returns the compact representations of all of the dependents of a task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDependentsForTaskTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTasksForProject200Response response = api.getDependentsForTask(taskGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get subtasks from a task
     *
     * Returns a compact representation of all of the subtasks of a task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubtasksForTaskTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTasksForProject200Response response = api.getSubtasksForTask(taskGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get a task
     *
     * Returns the complete task record for a single task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTask201Response response = api.getTask(taskGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get multiple tasks
     *
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a &#x60;project&#x60; or &#x60;tag&#x60; if you do not specify &#x60;assignee&#x60; and &#x60;workspace&#x60;.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksTest() throws ApiException {
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        String assignee = null;
        String project = null;
        String section = null;
        String workspace = null;
        OffsetDateTime completedSince = null;
        OffsetDateTime modifiedSince = null;
        GetTasksForProject200Response response = api.getTasks(optPretty, optFields, limit, offset, assignee, project, section, workspace, completedSince, modifiedSince);
        // TODO: test validations
    }

    /**
     * Get tasks from a project
     *
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksForProjectTest() throws ApiException {
        String projectGid = null;
        String completedSince = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTasksForProject200Response response = api.getTasksForProject(projectGid, completedSince, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get tasks from a section
     *
     * *Board view only*: Returns the compact section records for all tasks within the given section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksForSectionTest() throws ApiException {
        String sectionGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTasksForProject200Response response = api.getTasksForSection(sectionGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get tasks from a tag
     *
     * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksForTagTest() throws ApiException {
        String tagGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTasksForProject200Response response = api.getTasksForTag(tagGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get tasks from a user task list
     *
     * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting &#x60;completed_since&#x3D;now&#x60; will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTasksForUserTaskListTest() throws ApiException {
        String userTaskListGid = null;
        String completedSince = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTasksForProject200Response response = api.getTasksForUserTaskList(userTaskListGid, completedSince, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Unlink dependencies from a task
     *
     * Unlinks a set of dependencies from this task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDependenciesForTaskTest() throws ApiException {
        String taskGid = null;
        AddDependenciesForTaskRequest addDependenciesForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.removeDependenciesForTask(taskGid, addDependenciesForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Unlink dependents from a task
     *
     * Unlinks a set of dependents from this task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDependentsForTaskTest() throws ApiException {
        String taskGid = null;
        AddDependentsForTaskRequest addDependentsForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.removeDependentsForTask(taskGid, addDependentsForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Remove followers from a task
     *
     * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFollowerForTaskTest() throws ApiException {
        String taskGid = null;
        RemoveFollowerForTaskRequest removeFollowerForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTask201Response response = api.removeFollowerForTask(taskGid, removeFollowerForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Remove a project from a task
     *
     * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProjectForTaskTest() throws ApiException {
        String taskGid = null;
        RemoveProjectForTaskRequest removeProjectForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.removeProjectForTask(taskGid, removeProjectForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Remove a tag from a task
     *
     * Removes a tag from a task. Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagForTaskTest() throws ApiException {
        String taskGid = null;
        RemoveTagForTaskRequest removeTagForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.removeTagForTask(taskGid, removeTagForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Search tasks in a workspace
     *
     * To mirror the functionality of the Asana web app&#39;s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product&#39;s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a &#x60;402 Payment Required&#x60; error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the &#x60;limit&#x60; query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a &#x60;429 Too Many Requests&#x60; response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be &#x60;custom_fields.12345.is_set&#x3D;true&#x60;. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: &#x60;custom_fields.12345.value&#x3D;67890&#x60;.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify &#x60;projects.any&#x60; and &#x60;sections.any&#x60;, you will receive tasks for the project **and** tasks for the section. If you&#39;re looking for only tasks in a section, omit the &#x60;projects.any&#x60; from the request.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTasksForWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        String text = null;
        String resourceSubtype = null;
        String assigneeAny = null;
        String assigneeNot = null;
        String portfoliosAny = null;
        String projectsAny = null;
        String projectsNot = null;
        String projectsAll = null;
        String sectionsAny = null;
        String sectionsNot = null;
        String sectionsAll = null;
        String tagsAny = null;
        String tagsNot = null;
        String tagsAll = null;
        String teamsAny = null;
        String followersNot = null;
        String createdByAny = null;
        String createdByNot = null;
        String assignedByAny = null;
        String assignedByNot = null;
        String likedByNot = null;
        String commentedOnByNot = null;
        LocalDate dueOnBefore = null;
        LocalDate dueOnAfter = null;
        LocalDate dueOn = null;
        OffsetDateTime dueAtBefore = null;
        OffsetDateTime dueAtAfter = null;
        LocalDate startOnBefore = null;
        LocalDate startOnAfter = null;
        LocalDate startOn = null;
        LocalDate createdOnBefore = null;
        LocalDate createdOnAfter = null;
        LocalDate createdOn = null;
        OffsetDateTime createdAtBefore = null;
        OffsetDateTime createdAtAfter = null;
        LocalDate completedOnBefore = null;
        LocalDate completedOnAfter = null;
        LocalDate completedOn = null;
        OffsetDateTime completedAtBefore = null;
        OffsetDateTime completedAtAfter = null;
        LocalDate modifiedOnBefore = null;
        LocalDate modifiedOnAfter = null;
        LocalDate modifiedOn = null;
        OffsetDateTime modifiedAtBefore = null;
        OffsetDateTime modifiedAtAfter = null;
        Boolean isBlocking = null;
        Boolean isBlocked = null;
        Boolean hasAttachment = null;
        Boolean completed = null;
        Boolean isSubtask = null;
        String sortBy = null;
        Boolean sortAscending = null;
        GetTasksForProject200Response response = api.searchTasksForWorkspace(workspaceGid, optPretty, optFields, text, resourceSubtype, assigneeAny, assigneeNot, portfoliosAny, projectsAny, projectsNot, projectsAll, sectionsAny, sectionsNot, sectionsAll, tagsAny, tagsNot, tagsAll, teamsAny, followersNot, createdByAny, createdByNot, assignedByAny, assignedByNot, likedByNot, commentedOnByNot, dueOnBefore, dueOnAfter, dueOn, dueAtBefore, dueAtAfter, startOnBefore, startOnAfter, startOn, createdOnBefore, createdOnAfter, createdOn, createdAtBefore, createdAtAfter, completedOnBefore, completedOnAfter, completedOn, completedAtBefore, completedAtAfter, modifiedOnBefore, modifiedOnAfter, modifiedOn, modifiedAtBefore, modifiedAtAfter, isBlocking, isBlocked, hasAttachment, completed, isSubtask, sortBy, sortAscending);
        // TODO: test validations
    }

    /**
     * Set the parent of a task
     *
     * parent, or no parent task at all. Returns an empty data block. When using &#x60;insert_before&#x60; and &#x60;insert_after&#x60;, at most one of those two options can be specified, and they must already be subtasks of the parent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setParentForTaskTest() throws ApiException {
        String taskGid = null;
        SetParentForTaskRequest setParentForTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTask201Response response = api.setParentForTask(taskGid, setParentForTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Update a task
     *
     * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        String taskGid = null;
        CreateTaskRequest createTaskRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTask201Response response = api.updateTask(taskGid, createTaskRequest, optPretty, optFields);
        // TODO: test validations
    }

}
