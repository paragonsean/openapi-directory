/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddFollowersRequest;
import org.openapitools.client.model.CreateGoal201Response;
import org.openapitools.client.model.CreateGoalMetricRequest;
import org.openapitools.client.model.CreateGoalRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetGoals200Response;
import org.openapitools.client.model.UpdateGoalMetricRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GoalsApi
 */
@Disabled
public class GoalsApiTest {

    private final GoalsApi api = new GoalsApi();

    /**
     * Add a collaborator to a goal
     *
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFollowersTest() throws ApiException {
        String goalGid = null;
        AddFollowersRequest addFollowersRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateGoal201Response response = api.addFollowers(goalGid, addFollowersRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Create a goal
     *
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGoalTest() throws ApiException {
        CreateGoalRequest createGoalRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        CreateGoal201Response response = api.createGoal(createGoalRequest, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Create a goal metric
     *
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGoalMetricTest() throws ApiException {
        String goalGid = null;
        CreateGoalMetricRequest createGoalMetricRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateGoal201Response response = api.createGoalMetric(goalGid, createGoalMetricRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Delete a goal
     *
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGoalTest() throws ApiException {
        String goalGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.deleteGoal(goalGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get a goal
     *
     * Returns the complete goal record for a single goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGoalTest() throws ApiException {
        String goalGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateGoal201Response response = api.getGoal(goalGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get goals
     *
     * Returns compact goal records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGoalsTest() throws ApiException {
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        String portfolio = null;
        String project = null;
        Boolean isWorkspaceLevel = null;
        String team = null;
        String workspace = null;
        List<String> timePeriods = null;
        GetGoals200Response response = api.getGoals(optPretty, optFields, limit, offset, portfolio, project, isWorkspaceLevel, team, workspace, timePeriods);
        // TODO: test validations
    }

    /**
     * Get parent goals from a goal
     *
     * Returns a compact representation of all of the parent goals of a goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParentGoalsForGoalTest() throws ApiException {
        String goalGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetGoals200Response response = api.getParentGoalsForGoal(goalGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Remove a collaborator from a goal
     *
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFollowersTest() throws ApiException {
        String goalGid = null;
        AddFollowersRequest addFollowersRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateGoal201Response response = api.removeFollowers(goalGid, addFollowersRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Update a goal
     *
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGoalTest() throws ApiException {
        String goalGid = null;
        CreateGoalRequest createGoalRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateGoal201Response response = api.updateGoal(goalGid, createGoalRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Update a goal metric
     *
     * Updates a goal&#39;s existing metric&#39;s &#x60;current_number_value&#x60; if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGoalMetricTest() throws ApiException {
        String goalGid = null;
        UpdateGoalMetricRequest updateGoalMetricRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateGoal201Response response = api.updateGoalMetric(goalGid, updateGoalMetricRequest, optPretty, optFields);
        // TODO: test validations
    }

}
