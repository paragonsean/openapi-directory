/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddCustomFieldSettingForPortfolio200Response;
import org.openapitools.client.model.AddCustomFieldSettingForPortfolioRequest;
import org.openapitools.client.model.AddItemForPortfolioRequest;
import org.openapitools.client.model.AddMembersForPortfolioRequest;
import org.openapitools.client.model.CreatePortfolio201Response;
import org.openapitools.client.model.CreatePortfolioRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetItemsForPortfolio200Response;
import org.openapitools.client.model.GetPortfolios200Response;
import org.openapitools.client.model.RemoveCustomFieldSettingForPortfolioRequest;
import org.openapitools.client.model.RemoveItemForPortfolioRequest;
import org.openapitools.client.model.RemoveMembersForPortfolioRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortfoliosApi
 */
@Disabled
public class PortfoliosApiTest {

    private final PortfoliosApi api = new PortfoliosApi();

    /**
     * Add a custom field to a portfolio
     *
     * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCustomFieldSettingForPortfolioTest() throws ApiException {
        String portfolioGid = null;
        AddCustomFieldSettingForPortfolioRequest addCustomFieldSettingForPortfolioRequest = null;
        Boolean optPretty = null;
        AddCustomFieldSettingForPortfolio200Response response = api.addCustomFieldSettingForPortfolio(portfolioGid, addCustomFieldSettingForPortfolioRequest, optPretty);
        // TODO: test validations
    }

    /**
     * Add a portfolio item
     *
     * Add an item to a portfolio. Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addItemForPortfolioTest() throws ApiException {
        String portfolioGid = null;
        AddItemForPortfolioRequest addItemForPortfolioRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.addItemForPortfolio(portfolioGid, addItemForPortfolioRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Add users to a portfolio
     *
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMembersForPortfolioTest() throws ApiException {
        String portfolioGid = null;
        AddMembersForPortfolioRequest addMembersForPortfolioRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreatePortfolio201Response response = api.addMembersForPortfolio(portfolioGid, addMembersForPortfolioRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Create a portfolio
     *
     * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPortfolioTest() throws ApiException {
        CreatePortfolioRequest createPortfolioRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreatePortfolio201Response response = api.createPortfolio(createPortfolioRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Delete a portfolio
     *
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePortfolioTest() throws ApiException {
        String portfolioGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.deletePortfolio(portfolioGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get portfolio items
     *
     * Get a list of the items in compact form in a portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemsForPortfolioTest() throws ApiException {
        String portfolioGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetItemsForPortfolio200Response response = api.getItemsForPortfolio(portfolioGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get a portfolio
     *
     * Returns the complete portfolio record for a single portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPortfolioTest() throws ApiException {
        String portfolioGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreatePortfolio201Response response = api.getPortfolio(portfolioGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get multiple portfolios
     *
     * Returns a list of the portfolios in compact representation that are owned by the current API user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPortfoliosTest() throws ApiException {
        String workspace = null;
        String owner = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetPortfolios200Response response = api.getPortfolios(workspace, owner, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Remove a custom field from a portfolio
     *
     * Removes a custom field setting from a portfolio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCustomFieldSettingForPortfolioTest() throws ApiException {
        String portfolioGid = null;
        RemoveCustomFieldSettingForPortfolioRequest removeCustomFieldSettingForPortfolioRequest = null;
        Boolean optPretty = null;
        DeleteAttachment200Response response = api.removeCustomFieldSettingForPortfolio(portfolioGid, removeCustomFieldSettingForPortfolioRequest, optPretty);
        // TODO: test validations
    }

    /**
     * Remove a portfolio item
     *
     * Remove an item from a portfolio. Returns an empty data block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeItemForPortfolioTest() throws ApiException {
        String portfolioGid = null;
        RemoveItemForPortfolioRequest removeItemForPortfolioRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.removeItemForPortfolio(portfolioGid, removeItemForPortfolioRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Remove users from a portfolio
     *
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMembersForPortfolioTest() throws ApiException {
        String portfolioGid = null;
        RemoveMembersForPortfolioRequest removeMembersForPortfolioRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreatePortfolio201Response response = api.removeMembersForPortfolio(portfolioGid, removeMembersForPortfolioRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Update a portfolio
     *
     * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePortfolioTest() throws ApiException {
        String portfolioGid = null;
        CreatePortfolioRequest createPortfolioRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreatePortfolio201Response response = api.updatePortfolio(portfolioGid, createPortfolioRequest, optPretty, optFields);
        // TODO: test validations
    }

}
