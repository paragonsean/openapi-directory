/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateTag201Response;
import org.openapitools.client.model.CreateTagRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetTags200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Create a tag
     *
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        CreateTagRequest createTagRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTag201Response response = api.createTag(createTagRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Create a tag in a workspace
     *
     * Creates a new tag in a workspace or organization.  Every tag is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the workspace parameter regardless of whether or not it is an organization.  Returns the full record of the newly created tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagForWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        CreateTag201Response createTag201Response = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateTag201Response response = api.createTagForWorkspace(workspaceGid, createTag201Response, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Delete a tag
     *
     * A specific, existing tag can be deleted by making a DELETE request on the URL for that tag.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        String tagGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        DeleteAttachment200Response response = api.deleteTag(tagGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get a tag
     *
     * Returns the complete tag record for a single tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        String tagGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        CreateTag201Response response = api.getTag(tagGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get multiple tags
     *
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        String workspace = null;
        GetTags200Response response = api.getTags(optPretty, optFields, limit, offset, workspace);
        // TODO: test validations
    }

    /**
     * Get a task&#39;s tags
     *
     * Get a compact representation of all of the tags the task has.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsForTaskTest() throws ApiException {
        String taskGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTags200Response response = api.getTagsForTask(taskGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get tags in a workspace
     *
     * Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsForWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTags200Response response = api.getTagsForWorkspace(workspaceGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Update a tag
     *
     * Updates the properties of a tag. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the tag.  Returns the complete updated tag record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        String tagGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        CreateTag201Response response = api.updateTag(tagGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

}
