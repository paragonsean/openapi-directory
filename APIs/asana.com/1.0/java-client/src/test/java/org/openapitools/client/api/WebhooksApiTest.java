/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateWebhook201Response;
import org.openapitools.client.model.CreateWebhookRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetWebhooks200Response;
import org.openapitools.client.model.UpdateWebhookRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Establish a webhook
     *
     * Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an &#x60;X-Hook-Secret&#x60; header. The target must respond with a &#x60;200 OK&#x60; or &#x60;204 No Content&#x60; and a matching &#x60;X-Hook-Secret&#x60; header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhookâ€™s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  &#x60;&#x60;&#x60; # Request curl -H \&quot;Authorization: Bearer &lt;personal_access_token&gt;\&quot; \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \&quot;resource&#x3D;8675309\&quot; \\ -d \&quot;target&#x3D;https://example.com/receive-webhook/7654\&quot; &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 &#x60;&#x60;&#x60;  &#x60;&#x60;&#x60; # Response HTTP/1.1 201 {   \&quot;data\&quot;: {     \&quot;gid\&quot;: \&quot;43214\&quot;,     \&quot;resource\&quot;: {       \&quot;gid\&quot;: \&quot;8675309\&quot;,       \&quot;name\&quot;: \&quot;Bugs\&quot;     },     \&quot;target\&quot;: \&quot;https://example.com/receive-webhook/7654\&quot;,     \&quot;active\&quot;: false,     \&quot;last_success_at\&quot;: null,     \&quot;last_failure_at\&quot;: null,     \&quot;last_failure_content\&quot;: null   } } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        CreateWebhookRequest createWebhookRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateWebhook201Response response = api.createWebhook(createWebhookRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Delete a webhook
     *
     * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        String webhookGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.deleteWebhook(webhookGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get a webhook
     *
     * Returns the full record for the given webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        String webhookGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateWebhook201Response response = api.getWebhook(webhookGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get multiple webhooks
     *
     * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        String workspace = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        String resource = null;
        GetWebhooks200Response response = api.getWebhooks(workspace, optPretty, optFields, limit, offset, resource);
        // TODO: test validations
    }

    /**
     * Update a webhook
     *
     * An existing webhook&#39;s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook&#39;s previous &#x60;filters&#x60; array will be completely overwritten by the &#x60;filters&#x60; sent in the PUT request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        String webhookGid = null;
        UpdateWebhookRequest updateWebhookRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateWebhook201Response response = api.updateWebhook(webhookGid, updateWebhookRequest, optPretty, optFields);
        // TODO: test validations
    }

}
