/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetProjectBrief200Response;
import org.openapitools.client.model.UpdateProjectBriefRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectBriefsApi
 */
@Disabled
public class ProjectBriefsApiTest {

    private final ProjectBriefsApi api = new ProjectBriefsApi();

    /**
     * Create a project brief
     *
     * Creates a new project brief.  Returns the full record of the newly created project brief.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectBriefTest() throws ApiException {
        String projectGid = null;
        UpdateProjectBriefRequest updateProjectBriefRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetProjectBrief200Response response = api.createProjectBrief(projectGid, updateProjectBriefRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Delete a project brief
     *
     * Deletes a specific, existing project brief.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectBriefTest() throws ApiException {
        String projectBriefGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.deleteProjectBrief(projectBriefGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get a project brief
     *
     * Get the full record for a project brief.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectBriefTest() throws ApiException {
        String projectBriefGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetProjectBrief200Response response = api.getProjectBrief(projectBriefGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Update a project brief
     *
     * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectBriefTest() throws ApiException {
        String projectBriefGid = null;
        UpdateProjectBriefRequest updateProjectBriefRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetProjectBrief200Response response = api.updateProjectBrief(projectBriefGid, updateProjectBriefRequest, optPretty, optFields);
        // TODO: test validations
    }

}
