/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddUserForTeamRequest;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetTeamMembership200Response;
import org.openapitools.client.model.GetTeamsForUser200Response;
import org.openapitools.client.model.RemoveUserForTeamRequest;
import org.openapitools.client.model.UpdateTeam200Response;
import org.openapitools.client.model.UpdateTeamRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Disabled
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    /**
     * Add a user to a team
     *
     * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserForTeamTest() throws ApiException {
        String teamGid = null;
        AddUserForTeamRequest addUserForTeamRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetTeamMembership200Response response = api.addUserForTeam(teamGid, addUserForTeamRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Create a team
     *
     * Creates a team within the current workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamTest() throws ApiException {
        UpdateTeamRequest updateTeamRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        UpdateTeam200Response response = api.createTeam(updateTeamRequest, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get a team
     *
     * Returns the full record for a single team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamTest() throws ApiException {
        String teamGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        UpdateTeam200Response response = api.getTeam(teamGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get teams for a user
     *
     * Returns the compact records for all teams to which the given user is assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsForUserTest() throws ApiException {
        String userGid = null;
        String organization = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTeamsForUser200Response response = api.getTeamsForUser(userGid, organization, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get teams in a workspace
     *
     * Returns the compact records for all teams in the workspace visible to the authorized user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsForWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetTeamsForUser200Response response = api.getTeamsForWorkspace(workspaceGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Remove a user from a team
     *
     * The user making this call must be a member of the team in order to remove themselves or others.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserForTeamTest() throws ApiException {
        String teamGid = null;
        RemoveUserForTeamRequest removeUserForTeamRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.removeUserForTeam(teamGid, removeUserForTeamRequest, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Update a team
     *
     * Updates a team within the current workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTeamTest() throws ApiException {
        UpdateTeamRequest updateTeamRequest = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        UpdateTeam200Response response = api.updateTeam(updateTeamRequest, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

}
