/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAttachmentForObject200Response;
import org.openapitools.client.model.DeleteAttachment200Response;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.GetAttachmentsForObject200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AttachmentsApi
 */
@Disabled
public class AttachmentsApiTest {

    private final AttachmentsApi api = new AttachmentsApi();

    /**
     * Upload an attachment
     *
     * Upload an attachment.  This method uploads an attachment on an object and returns the compact record for the created attachment object. This is possible by either:  - Providing the URL of the external resource being attached, or - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach files from third party services such as Dropbox, Box, Vimeo &amp; Google Drive via the API  The 100MB size limit on attachments in Asana is enforced on this endpoint.  This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.  Requests made should follow the HTTP/1.1 specification that line terminators are of the form &#x60;CRLF&#x60; or &#x60;\\r\\n&#x60; outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAttachmentForObjectTest() throws ApiException {
        Boolean optPretty = null;
        List<String> optFields = null;
        Boolean connectToApp = null;
        File _file = null;
        String name = null;
        String parent = null;
        String resourceSubtype = null;
        String url = null;
        CreateAttachmentForObject200Response response = api.createAttachmentForObject(optPretty, optFields, connectToApp, _file, name, parent, resourceSubtype, url);
        // TODO: test validations
    }

    /**
     * Delete an attachment
     *
     * Deletes a specific, existing attachment.  Returns an empty data record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAttachmentTest() throws ApiException {
        String attachmentGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        DeleteAttachment200Response response = api.deleteAttachment(attachmentGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get an attachment
     *
     * Get the full record for a single attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentTest() throws ApiException {
        String attachmentGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        CreateAttachmentForObject200Response response = api.getAttachment(attachmentGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get attachments from an object
     *
     * Returns the compact records for all attachments on the object.  There are three possible &#x60;parent&#x60; values for this request: &#x60;project&#x60;, &#x60;project_brief&#x60;, and &#x60;task&#x60;. For a project, an attachment refers to a file uploaded to the \&quot;Key resources\&quot; section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentsForObjectTest() throws ApiException {
        String parent = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetAttachmentsForObject200Response response = api.getAttachmentsForObject(parent, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

}
