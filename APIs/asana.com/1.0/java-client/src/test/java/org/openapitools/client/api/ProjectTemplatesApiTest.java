/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetJob200Response;
import org.openapitools.client.model.GetProjectTemplate200Response;
import org.openapitools.client.model.GetProjectTemplates200Response;
import org.openapitools.client.model.InstantiateProjectRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectTemplatesApi
 */
@Disabled
public class ProjectTemplatesApiTest {

    private final ProjectTemplatesApi api = new ProjectTemplatesApi();

    /**
     * Get a project template
     *
     * Returns the complete project template record for a single project template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTemplateTest() throws ApiException {
        String projectTemplateGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetProjectTemplate200Response response = api.getProjectTemplate(projectTemplateGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get multiple project templates
     *
     * Returns the compact project template records for all project templates in the given team or workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTemplatesTest() throws ApiException {
        Boolean optPretty = null;
        List<String> optFields = null;
        String workspace = null;
        String team = null;
        Integer limit = null;
        String offset = null;
        GetProjectTemplates200Response response = api.getProjectTemplates(optPretty, optFields, workspace, team, limit, offset);
        // TODO: test validations
    }

    /**
     * Get a team&#39;s project templates
     *
     * Returns the compact project template records for all project templates in the team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTemplatesForTeamTest() throws ApiException {
        String teamGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetProjectTemplates200Response response = api.getProjectTemplatesForTeam(teamGid, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Instantiate a project from a project template
     *
     * Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](/docs/get-a-project-template). Then, from the response, copy the &#x60;gid&#x60; from the object in the &#x60;requested_dates&#x60; array. This &#x60;gid&#x60; should be used in &#x60;requested_dates&#x60; to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](/docs/workspace) parameter._
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instantiateProjectTest() throws ApiException {
        String projectTemplateGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        InstantiateProjectRequest instantiateProjectRequest = null;
        GetJob200Response response = api.instantiateProject(projectTemplateGid, optPretty, optFields, instantiateProjectRequest);
        // TODO: test validations
    }

}
