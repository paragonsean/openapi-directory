/*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetFavoritesForUser200Response;
import org.openapitools.client.model.GetUser200Response;
import org.openapitools.client.model.GetUsersForTeam200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Get a user&#39;s favorites
     *
     * Returns all of a user&#39;s favorites in the given workspace, of the given type. Results are given in order (The same order as Asana&#39;s sidebar).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoritesForUserTest() throws ApiException {
        String userGid = null;
        String resourceType = null;
        String workspace = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetFavoritesForUser200Response response = api.getFavoritesForUser(userGid, resourceType, workspace, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get a user
     *
     * Returns the full user record for the single user with the provided ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        GetUser200Response response = api.getUser(userGid, optPretty, optFields);
        // TODO: test validations
    }

    /**
     * Get multiple users
     *
     * Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String workspace = null;
        String team = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        Integer limit = null;
        String offset = null;
        GetUsersForTeam200Response response = api.getUsers(workspace, team, optPretty, optFields, limit, offset);
        // TODO: test validations
    }

    /**
     * Get users in a team
     *
     * Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersForTeamTest() throws ApiException {
        String teamGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        String offset = null;
        GetUsersForTeam200Response response = api.getUsersForTeam(teamGid, optPretty, optFields, offset);
        // TODO: test validations
    }

    /**
     * Get users in a workspace or organization
     *
     * Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the &#x60;/users&#x60; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersForWorkspaceTest() throws ApiException {
        String workspaceGid = null;
        Boolean optPretty = null;
        List<String> optFields = null;
        String offset = null;
        GetUsersForTeam200Response response = api.getUsersForWorkspace(workspaceGid, optPretty, optFields, offset);
        // TODO: test validations
    }

}
