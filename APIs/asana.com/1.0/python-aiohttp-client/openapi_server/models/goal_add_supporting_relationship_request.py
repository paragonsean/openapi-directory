# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoalAddSupportingRelationshipRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contribution_weight: float=None, insert_after: str=None, insert_before: str=None, supporting_resource: str=None):
        """GoalAddSupportingRelationshipRequest - a model defined in OpenAPI

        :param contribution_weight: The contribution_weight of this GoalAddSupportingRelationshipRequest.
        :param insert_after: The insert_after of this GoalAddSupportingRelationshipRequest.
        :param insert_before: The insert_before of this GoalAddSupportingRelationshipRequest.
        :param supporting_resource: The supporting_resource of this GoalAddSupportingRelationshipRequest.
        """
        self.openapi_types = {
            'contribution_weight': float,
            'insert_after': str,
            'insert_before': str,
            'supporting_resource': str
        }

        self.attribute_map = {
            'contribution_weight': 'contribution_weight',
            'insert_after': 'insert_after',
            'insert_before': 'insert_before',
            'supporting_resource': 'supporting_resource'
        }

        self._contribution_weight = contribution_weight
        self._insert_after = insert_after
        self._insert_before = insert_before
        self._supporting_resource = supporting_resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoalAddSupportingRelationshipRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoalAddSupportingRelationshipRequest of this GoalAddSupportingRelationshipRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contribution_weight(self):
        """Gets the contribution_weight of this GoalAddSupportingRelationshipRequest.

        The weight that the supporting resource's progress will contribute to the supported goal's progress. This can only be 0 or 1.

        :return: The contribution_weight of this GoalAddSupportingRelationshipRequest.
        :rtype: float
        """
        return self._contribution_weight

    @contribution_weight.setter
    def contribution_weight(self, contribution_weight):
        """Sets the contribution_weight of this GoalAddSupportingRelationshipRequest.

        The weight that the supporting resource's progress will contribute to the supported goal's progress. This can only be 0 or 1.

        :param contribution_weight: The contribution_weight of this GoalAddSupportingRelationshipRequest.
        :type contribution_weight: float
        """

        self._contribution_weight = contribution_weight

    @property
    def insert_after(self):
        """Gets the insert_after of this GoalAddSupportingRelationshipRequest.

        An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.

        :return: The insert_after of this GoalAddSupportingRelationshipRequest.
        :rtype: str
        """
        return self._insert_after

    @insert_after.setter
    def insert_after(self, insert_after):
        """Sets the insert_after of this GoalAddSupportingRelationshipRequest.

        An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.

        :param insert_after: The insert_after of this GoalAddSupportingRelationshipRequest.
        :type insert_after: str
        """

        self._insert_after = insert_after

    @property
    def insert_before(self):
        """Gets the insert_before of this GoalAddSupportingRelationshipRequest.

        An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.

        :return: The insert_before of this GoalAddSupportingRelationshipRequest.
        :rtype: str
        """
        return self._insert_before

    @insert_before.setter
    def insert_before(self, insert_before):
        """Sets the insert_before of this GoalAddSupportingRelationshipRequest.

        An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified. Currently only supported when adding a subgoal.

        :param insert_before: The insert_before of this GoalAddSupportingRelationshipRequest.
        :type insert_before: str
        """

        self._insert_before = insert_before

    @property
    def supporting_resource(self):
        """Gets the supporting_resource of this GoalAddSupportingRelationshipRequest.

        The gid of the supporting resource to add to the parent goal. Must be the gid of a goal, project, or portfolio.

        :return: The supporting_resource of this GoalAddSupportingRelationshipRequest.
        :rtype: str
        """
        return self._supporting_resource

    @supporting_resource.setter
    def supporting_resource(self, supporting_resource):
        """Sets the supporting_resource of this GoalAddSupportingRelationshipRequest.

        The gid of the supporting resource to add to the parent goal. Must be the gid of a goal, project, or portfolio.

        :param supporting_resource: The supporting_resource of this GoalAddSupportingRelationshipRequest.
        :type supporting_resource: str
        """
        if supporting_resource is None:
            raise ValueError("Invalid value for `supporting_resource`, must not be `None`")

        self._supporting_resource = supporting_resource
