# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_field_compact import CustomFieldCompact
from openapi_server.models.custom_field_setting_response import CustomFieldSettingResponse
from openapi_server.models.portfolio_response_all_of_workspace import PortfolioResponseAllOfWorkspace
from openapi_server.models.status_update_compact import StatusUpdateCompact
from openapi_server.models.user_compact import UserCompact
from openapi_server import util


class PortfolioResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, name: str=None, color: str=None, created_at: datetime=None, created_by: UserCompact=None, current_status_update: StatusUpdateCompact=None, custom_field_settings: List[CustomFieldSettingResponse]=None, custom_fields: List[CustomFieldCompact]=None, due_on: datetime=None, members: List[UserCompact]=None, owner: UserCompact=None, permalink_url: str=None, public: bool=None, start_on: date=None, workspace: PortfolioResponseAllOfWorkspace=None):
        """PortfolioResponse - a model defined in OpenAPI

        :param gid: The gid of this PortfolioResponse.
        :param resource_type: The resource_type of this PortfolioResponse.
        :param name: The name of this PortfolioResponse.
        :param color: The color of this PortfolioResponse.
        :param created_at: The created_at of this PortfolioResponse.
        :param created_by: The created_by of this PortfolioResponse.
        :param current_status_update: The current_status_update of this PortfolioResponse.
        :param custom_field_settings: The custom_field_settings of this PortfolioResponse.
        :param custom_fields: The custom_fields of this PortfolioResponse.
        :param due_on: The due_on of this PortfolioResponse.
        :param members: The members of this PortfolioResponse.
        :param owner: The owner of this PortfolioResponse.
        :param permalink_url: The permalink_url of this PortfolioResponse.
        :param public: The public of this PortfolioResponse.
        :param start_on: The start_on of this PortfolioResponse.
        :param workspace: The workspace of this PortfolioResponse.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'color': str,
            'created_at': datetime,
            'created_by': UserCompact,
            'current_status_update': StatusUpdateCompact,
            'custom_field_settings': List[CustomFieldSettingResponse],
            'custom_fields': List[CustomFieldCompact],
            'due_on': datetime,
            'members': List[UserCompact],
            'owner': UserCompact,
            'permalink_url': str,
            'public': bool,
            'start_on': date,
            'workspace': PortfolioResponseAllOfWorkspace
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'color': 'color',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'current_status_update': 'current_status_update',
            'custom_field_settings': 'custom_field_settings',
            'custom_fields': 'custom_fields',
            'due_on': 'due_on',
            'members': 'members',
            'owner': 'owner',
            'permalink_url': 'permalink_url',
            'public': 'public',
            'start_on': 'start_on',
            'workspace': 'workspace'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._color = color
        self._created_at = created_at
        self._created_by = created_by
        self._current_status_update = current_status_update
        self._custom_field_settings = custom_field_settings
        self._custom_fields = custom_fields
        self._due_on = due_on
        self._members = members
        self._owner = owner
        self._permalink_url = permalink_url
        self._public = public
        self._start_on = start_on
        self._workspace = workspace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortfolioResponse of this PortfolioResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this PortfolioResponse.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this PortfolioResponse.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this PortfolioResponse.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this PortfolioResponse.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this PortfolioResponse.

        The base type of this resource.

        :return: The resource_type of this PortfolioResponse.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PortfolioResponse.

        The base type of this resource.

        :param resource_type: The resource_type of this PortfolioResponse.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this PortfolioResponse.

        The name of the portfolio.

        :return: The name of this PortfolioResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortfolioResponse.

        The name of the portfolio.

        :param name: The name of this PortfolioResponse.
        :type name: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this PortfolioResponse.

        Color of the portfolio.

        :return: The color of this PortfolioResponse.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PortfolioResponse.

        Color of the portfolio.

        :param color: The color of this PortfolioResponse.
        :type color: str
        """
        allowed_values = ["dark-pink", "dark-green", "dark-blue", "dark-red", "dark-teal", "dark-brown", "dark-orange", "dark-purple", "dark-warm-gray", "light-pink", "light-green", "light-blue", "light-red", "light-teal", "light-brown", "light-orange", "light-purple", "light-warm-gray"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def created_at(self):
        """Gets the created_at of this PortfolioResponse.

        The time at which this resource was created.

        :return: The created_at of this PortfolioResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PortfolioResponse.

        The time at which this resource was created.

        :param created_at: The created_at of this PortfolioResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this PortfolioResponse.


        :return: The created_by of this PortfolioResponse.
        :rtype: UserCompact
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PortfolioResponse.


        :param created_by: The created_by of this PortfolioResponse.
        :type created_by: UserCompact
        """

        self._created_by = created_by

    @property
    def current_status_update(self):
        """Gets the current_status_update of this PortfolioResponse.

        The latest `status_update` posted to this portfolio.

        :return: The current_status_update of this PortfolioResponse.
        :rtype: StatusUpdateCompact
        """
        return self._current_status_update

    @current_status_update.setter
    def current_status_update(self, current_status_update):
        """Sets the current_status_update of this PortfolioResponse.

        The latest `status_update` posted to this portfolio.

        :param current_status_update: The current_status_update of this PortfolioResponse.
        :type current_status_update: StatusUpdateCompact
        """

        self._current_status_update = current_status_update

    @property
    def custom_field_settings(self):
        """Gets the custom_field_settings of this PortfolioResponse.

        Array of custom field settings applied to the portfolio.

        :return: The custom_field_settings of this PortfolioResponse.
        :rtype: List[CustomFieldSettingResponse]
        """
        return self._custom_field_settings

    @custom_field_settings.setter
    def custom_field_settings(self, custom_field_settings):
        """Sets the custom_field_settings of this PortfolioResponse.

        Array of custom field settings applied to the portfolio.

        :param custom_field_settings: The custom_field_settings of this PortfolioResponse.
        :type custom_field_settings: List[CustomFieldSettingResponse]
        """

        self._custom_field_settings = custom_field_settings

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PortfolioResponse.

        Array of Custom Fields.

        :return: The custom_fields of this PortfolioResponse.
        :rtype: List[CustomFieldCompact]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PortfolioResponse.

        Array of Custom Fields.

        :param custom_fields: The custom_fields of this PortfolioResponse.
        :type custom_fields: List[CustomFieldCompact]
        """

        self._custom_fields = custom_fields

    @property
    def due_on(self):
        """Gets the due_on of this PortfolioResponse.

        The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.

        :return: The due_on of this PortfolioResponse.
        :rtype: datetime
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on):
        """Sets the due_on of this PortfolioResponse.

        The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.

        :param due_on: The due_on of this PortfolioResponse.
        :type due_on: datetime
        """

        self._due_on = due_on

    @property
    def members(self):
        """Gets the members of this PortfolioResponse.


        :return: The members of this PortfolioResponse.
        :rtype: List[UserCompact]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this PortfolioResponse.


        :param members: The members of this PortfolioResponse.
        :type members: List[UserCompact]
        """

        self._members = members

    @property
    def owner(self):
        """Gets the owner of this PortfolioResponse.


        :return: The owner of this PortfolioResponse.
        :rtype: UserCompact
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this PortfolioResponse.


        :param owner: The owner of this PortfolioResponse.
        :type owner: UserCompact
        """

        self._owner = owner

    @property
    def permalink_url(self):
        """Gets the permalink_url of this PortfolioResponse.

        A url that points directly to the object within Asana.

        :return: The permalink_url of this PortfolioResponse.
        :rtype: str
        """
        return self._permalink_url

    @permalink_url.setter
    def permalink_url(self, permalink_url):
        """Sets the permalink_url of this PortfolioResponse.

        A url that points directly to the object within Asana.

        :param permalink_url: The permalink_url of this PortfolioResponse.
        :type permalink_url: str
        """

        self._permalink_url = permalink_url

    @property
    def public(self):
        """Gets the public of this PortfolioResponse.

        True if the portfolio is public to its workspace members.

        :return: The public of this PortfolioResponse.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this PortfolioResponse.

        True if the portfolio is public to its workspace members.

        :param public: The public of this PortfolioResponse.
        :type public: bool
        """

        self._public = public

    @property
    def start_on(self):
        """Gets the start_on of this PortfolioResponse.

        The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*

        :return: The start_on of this PortfolioResponse.
        :rtype: date
        """
        return self._start_on

    @start_on.setter
    def start_on(self, start_on):
        """Sets the start_on of this PortfolioResponse.

        The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*

        :param start_on: The start_on of this PortfolioResponse.
        :type start_on: date
        """

        self._start_on = start_on

    @property
    def workspace(self):
        """Gets the workspace of this PortfolioResponse.


        :return: The workspace of this PortfolioResponse.
        :rtype: PortfolioResponseAllOfWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this PortfolioResponse.


        :param workspace: The workspace of this PortfolioResponse.
        :type workspace: PortfolioResponseAllOfWorkspace
        """

        self._workspace = workspace
