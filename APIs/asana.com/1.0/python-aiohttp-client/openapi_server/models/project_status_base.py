# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectStatusBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, title: str=None, color: str=None, html_text: str=None, text: str=None):
        """ProjectStatusBase - a model defined in OpenAPI

        :param gid: The gid of this ProjectStatusBase.
        :param resource_type: The resource_type of this ProjectStatusBase.
        :param title: The title of this ProjectStatusBase.
        :param color: The color of this ProjectStatusBase.
        :param html_text: The html_text of this ProjectStatusBase.
        :param text: The text of this ProjectStatusBase.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'title': str,
            'color': str,
            'html_text': str,
            'text': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'title': 'title',
            'color': 'color',
            'html_text': 'html_text',
            'text': 'text'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._title = title
        self._color = color
        self._html_text = html_text
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectStatusBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectStatusBase of this ProjectStatusBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this ProjectStatusBase.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this ProjectStatusBase.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this ProjectStatusBase.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this ProjectStatusBase.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this ProjectStatusBase.

        The base type of this resource.

        :return: The resource_type of this ProjectStatusBase.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ProjectStatusBase.

        The base type of this resource.

        :param resource_type: The resource_type of this ProjectStatusBase.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def title(self):
        """Gets the title of this ProjectStatusBase.

        The title of the project status update.

        :return: The title of this ProjectStatusBase.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectStatusBase.

        The title of the project status update.

        :param title: The title of this ProjectStatusBase.
        :type title: str
        """

        self._title = title

    @property
    def color(self):
        """Gets the color of this ProjectStatusBase.

        The color associated with the status update.

        :return: The color of this ProjectStatusBase.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ProjectStatusBase.

        The color associated with the status update.

        :param color: The color of this ProjectStatusBase.
        :type color: str
        """
        allowed_values = ["green", "yellow", "red", "blue"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def html_text(self):
        """Gets the html_text of this ProjectStatusBase.

        [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.

        :return: The html_text of this ProjectStatusBase.
        :rtype: str
        """
        return self._html_text

    @html_text.setter
    def html_text(self, html_text):
        """Sets the html_text of this ProjectStatusBase.

        [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.

        :param html_text: The html_text of this ProjectStatusBase.
        :type html_text: str
        """

        self._html_text = html_text

    @property
    def text(self):
        """Gets the text of this ProjectStatusBase.

        The text content of the status update.

        :return: The text of this ProjectStatusBase.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ProjectStatusBase.

        The text content of the status update.

        :param text: The text of this ProjectStatusBase.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
