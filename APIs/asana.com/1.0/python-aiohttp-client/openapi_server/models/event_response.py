# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_response_change import EventResponseChange
from openapi_server.models.event_response_parent import EventResponseParent
from openapi_server.models.event_response_resource import EventResponseResource
from openapi_server.models.event_response_user import EventResponseUser
from openapi_server import util


class EventResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, change: EventResponseChange=None, created_at: datetime=None, parent: EventResponseParent=None, resource: EventResponseResource=None, type: str=None, user: EventResponseUser=None):
        """EventResponse - a model defined in OpenAPI

        :param action: The action of this EventResponse.
        :param change: The change of this EventResponse.
        :param created_at: The created_at of this EventResponse.
        :param parent: The parent of this EventResponse.
        :param resource: The resource of this EventResponse.
        :param type: The type of this EventResponse.
        :param user: The user of this EventResponse.
        """
        self.openapi_types = {
            'action': str,
            'change': EventResponseChange,
            'created_at': datetime,
            'parent': EventResponseParent,
            'resource': EventResponseResource,
            'type': str,
            'user': EventResponseUser
        }

        self.attribute_map = {
            'action': 'action',
            'change': 'change',
            'created_at': 'created_at',
            'parent': 'parent',
            'resource': 'resource',
            'type': 'type',
            'user': 'user'
        }

        self._action = action
        self._change = change
        self._created_at = created_at
        self._parent = parent
        self._resource = resource
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventResponse of this EventResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this EventResponse.

        The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.

        :return: The action of this EventResponse.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EventResponse.

        The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.

        :param action: The action of this EventResponse.
        :type action: str
        """

        self._action = action

    @property
    def change(self):
        """Gets the change of this EventResponse.


        :return: The change of this EventResponse.
        :rtype: EventResponseChange
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this EventResponse.


        :param change: The change of this EventResponse.
        :type change: EventResponseChange
        """

        self._change = change

    @property
    def created_at(self):
        """Gets the created_at of this EventResponse.

        The timestamp when the event occurred.

        :return: The created_at of this EventResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventResponse.

        The timestamp when the event occurred.

        :param created_at: The created_at of this EventResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def parent(self):
        """Gets the parent of this EventResponse.


        :return: The parent of this EventResponse.
        :rtype: EventResponseParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this EventResponse.


        :param parent: The parent of this EventResponse.
        :type parent: EventResponseParent
        """

        self._parent = parent

    @property
    def resource(self):
        """Gets the resource of this EventResponse.


        :return: The resource of this EventResponse.
        :rtype: EventResponseResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this EventResponse.


        :param resource: The resource of this EventResponse.
        :type resource: EventResponseResource
        """

        self._resource = resource

    @property
    def type(self):
        """Gets the type of this EventResponse.

        *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.

        :return: The type of this EventResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventResponse.

        *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.

        :param type: The type of this EventResponse.
        :type type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this EventResponse.


        :return: The user of this EventResponse.
        :rtype: EventResponseUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EventResponse.


        :param user: The user of this EventResponse.
        :type user: EventResponseUser
        """

        self._user = user
