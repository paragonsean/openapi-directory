# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddCustomFieldSettingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_field: str=None, insert_after: str=None, insert_before: str=None, is_important: bool=None):
        """AddCustomFieldSettingRequest - a model defined in OpenAPI

        :param custom_field: The custom_field of this AddCustomFieldSettingRequest.
        :param insert_after: The insert_after of this AddCustomFieldSettingRequest.
        :param insert_before: The insert_before of this AddCustomFieldSettingRequest.
        :param is_important: The is_important of this AddCustomFieldSettingRequest.
        """
        self.openapi_types = {
            'custom_field': str,
            'insert_after': str,
            'insert_before': str,
            'is_important': bool
        }

        self.attribute_map = {
            'custom_field': 'custom_field',
            'insert_after': 'insert_after',
            'insert_before': 'insert_before',
            'is_important': 'is_important'
        }

        self._custom_field = custom_field
        self._insert_after = insert_after
        self._insert_before = insert_before
        self._is_important = is_important

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddCustomFieldSettingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddCustomFieldSettingRequest of this AddCustomFieldSettingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_field(self):
        """Gets the custom_field of this AddCustomFieldSettingRequest.

        The custom field to associate with this container.

        :return: The custom_field of this AddCustomFieldSettingRequest.
        :rtype: str
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this AddCustomFieldSettingRequest.

        The custom field to associate with this container.

        :param custom_field: The custom_field of this AddCustomFieldSettingRequest.
        :type custom_field: str
        """
        if custom_field is None:
            raise ValueError("Invalid value for `custom_field`, must not be `None`")

        self._custom_field = custom_field

    @property
    def insert_after(self):
        """Gets the insert_after of this AddCustomFieldSettingRequest.

        A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.

        :return: The insert_after of this AddCustomFieldSettingRequest.
        :rtype: str
        """
        return self._insert_after

    @insert_after.setter
    def insert_after(self, insert_after):
        """Sets the insert_after of this AddCustomFieldSettingRequest.

        A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.

        :param insert_after: The insert_after of this AddCustomFieldSettingRequest.
        :type insert_after: str
        """

        self._insert_after = insert_after

    @property
    def insert_before(self):
        """Gets the insert_before of this AddCustomFieldSettingRequest.

        A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.

        :return: The insert_before of this AddCustomFieldSettingRequest.
        :rtype: str
        """
        return self._insert_before

    @insert_before.setter
    def insert_before(self, insert_before):
        """Sets the insert_before of this AddCustomFieldSettingRequest.

        A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.

        :param insert_before: The insert_before of this AddCustomFieldSettingRequest.
        :type insert_before: str
        """

        self._insert_before = insert_before

    @property
    def is_important(self):
        """Gets the is_important of this AddCustomFieldSettingRequest.

        Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).

        :return: The is_important of this AddCustomFieldSettingRequest.
        :rtype: bool
        """
        return self._is_important

    @is_important.setter
    def is_important(self, is_important):
        """Sets the is_important of this AddCustomFieldSettingRequest.

        Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).

        :param is_important: The is_important of this AddCustomFieldSettingRequest.
        :type is_important: bool
        """

        self._is_important = is_important
