# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insert_after: str=None, insert_before: str=None, name: str=None):
        """SectionRequest - a model defined in OpenAPI

        :param insert_after: The insert_after of this SectionRequest.
        :param insert_before: The insert_before of this SectionRequest.
        :param name: The name of this SectionRequest.
        """
        self.openapi_types = {
            'insert_after': str,
            'insert_before': str,
            'name': str
        }

        self.attribute_map = {
            'insert_after': 'insert_after',
            'insert_before': 'insert_before',
            'name': 'name'
        }

        self._insert_after = insert_after
        self._insert_before = insert_before
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SectionRequest of this SectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insert_after(self):
        """Gets the insert_after of this SectionRequest.

        An existing section within this project after which the added section should be inserted. Cannot be provided together with insert_before.

        :return: The insert_after of this SectionRequest.
        :rtype: str
        """
        return self._insert_after

    @insert_after.setter
    def insert_after(self, insert_after):
        """Sets the insert_after of this SectionRequest.

        An existing section within this project after which the added section should be inserted. Cannot be provided together with insert_before.

        :param insert_after: The insert_after of this SectionRequest.
        :type insert_after: str
        """

        self._insert_after = insert_after

    @property
    def insert_before(self):
        """Gets the insert_before of this SectionRequest.

        An existing section within this project before which the added section should be inserted. Cannot be provided together with insert_after.

        :return: The insert_before of this SectionRequest.
        :rtype: str
        """
        return self._insert_before

    @insert_before.setter
    def insert_before(self, insert_before):
        """Sets the insert_before of this SectionRequest.

        An existing section within this project before which the added section should be inserted. Cannot be provided together with insert_after.

        :param insert_before: The insert_before of this SectionRequest.
        :type insert_before: str
        """

        self._insert_before = insert_before

    @property
    def name(self):
        """Gets the name of this SectionRequest.

        The text to be displayed as the section name. This cannot be an empty string.

        :return: The name of this SectionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SectionRequest.

        The text to be displayed as the section name. This cannot be an empty string.

        :param name: The name of this SectionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
