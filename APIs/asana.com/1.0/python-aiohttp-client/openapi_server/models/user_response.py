# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_base_response_all_of_photo import UserBaseResponseAllOfPhoto
from openapi_server.models.workspace_compact import WorkspaceCompact
from openapi_server import util


class UserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, name: str=None, email: str=None, photo: UserBaseResponseAllOfPhoto=None, workspaces: List[WorkspaceCompact]=None):
        """UserResponse - a model defined in OpenAPI

        :param gid: The gid of this UserResponse.
        :param resource_type: The resource_type of this UserResponse.
        :param name: The name of this UserResponse.
        :param email: The email of this UserResponse.
        :param photo: The photo of this UserResponse.
        :param workspaces: The workspaces of this UserResponse.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'email': str,
            'photo': UserBaseResponseAllOfPhoto,
            'workspaces': List[WorkspaceCompact]
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'email': 'email',
            'photo': 'photo',
            'workspaces': 'workspaces'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._email = email
        self._photo = photo
        self._workspaces = workspaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserResponse of this UserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this UserResponse.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this UserResponse.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this UserResponse.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this UserResponse.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this UserResponse.

        The base type of this resource.

        :return: The resource_type of this UserResponse.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UserResponse.

        The base type of this resource.

        :param resource_type: The resource_type of this UserResponse.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this UserResponse.

        *Read-only except when same user as requester*. The user’s name.

        :return: The name of this UserResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserResponse.

        *Read-only except when same user as requester*. The user’s name.

        :param name: The name of this UserResponse.
        :type name: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this UserResponse.

        The user's email address.

        :return: The email of this UserResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserResponse.

        The user's email address.

        :param email: The email of this UserResponse.
        :type email: str
        """

        self._email = email

    @property
    def photo(self):
        """Gets the photo of this UserResponse.


        :return: The photo of this UserResponse.
        :rtype: UserBaseResponseAllOfPhoto
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this UserResponse.


        :param photo: The photo of this UserResponse.
        :type photo: UserBaseResponseAllOfPhoto
        """

        self._photo = photo

    @property
    def workspaces(self):
        """Gets the workspaces of this UserResponse.

        Workspaces and organizations this user may access. Note\\: The API will only return workspaces and organizations that also contain the authenticated user.

        :return: The workspaces of this UserResponse.
        :rtype: List[WorkspaceCompact]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this UserResponse.

        Workspaces and organizations this user may access. Note\\: The API will only return workspaces and organizations that also contain the authenticated user.

        :param workspaces: The workspaces of this UserResponse.
        :type workspaces: List[WorkspaceCompact]
        """

        self._workspaces = workspaces
