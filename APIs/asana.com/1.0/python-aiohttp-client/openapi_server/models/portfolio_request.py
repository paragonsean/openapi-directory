# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, name: str=None, color: str=None, members: List[str]=None, public: bool=None, workspace: str=None):
        """PortfolioRequest - a model defined in OpenAPI

        :param gid: The gid of this PortfolioRequest.
        :param resource_type: The resource_type of this PortfolioRequest.
        :param name: The name of this PortfolioRequest.
        :param color: The color of this PortfolioRequest.
        :param members: The members of this PortfolioRequest.
        :param public: The public of this PortfolioRequest.
        :param workspace: The workspace of this PortfolioRequest.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'color': str,
            'members': List[str],
            'public': bool,
            'workspace': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'color': 'color',
            'members': 'members',
            'public': 'public',
            'workspace': 'workspace'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._color = color
        self._members = members
        self._public = public
        self._workspace = workspace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortfolioRequest of this PortfolioRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this PortfolioRequest.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this PortfolioRequest.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this PortfolioRequest.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this PortfolioRequest.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this PortfolioRequest.

        The base type of this resource.

        :return: The resource_type of this PortfolioRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PortfolioRequest.

        The base type of this resource.

        :param resource_type: The resource_type of this PortfolioRequest.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this PortfolioRequest.

        The name of the portfolio.

        :return: The name of this PortfolioRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortfolioRequest.

        The name of the portfolio.

        :param name: The name of this PortfolioRequest.
        :type name: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this PortfolioRequest.

        Color of the portfolio.

        :return: The color of this PortfolioRequest.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PortfolioRequest.

        Color of the portfolio.

        :param color: The color of this PortfolioRequest.
        :type color: str
        """
        allowed_values = ["dark-pink", "dark-green", "dark-blue", "dark-red", "dark-teal", "dark-brown", "dark-orange", "dark-purple", "dark-warm-gray", "light-pink", "light-green", "light-blue", "light-red", "light-teal", "light-brown", "light-orange", "light-purple", "light-warm-gray"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def members(self):
        """Gets the members of this PortfolioRequest.

        An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.

        :return: The members of this PortfolioRequest.
        :rtype: List[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this PortfolioRequest.

        An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user.

        :param members: The members of this PortfolioRequest.
        :type members: List[str]
        """

        self._members = members

    @property
    def public(self):
        """Gets the public of this PortfolioRequest.

        True if the portfolio is public to its workspace members.

        :return: The public of this PortfolioRequest.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this PortfolioRequest.

        True if the portfolio is public to its workspace members.

        :param public: The public of this PortfolioRequest.
        :type public: bool
        """

        self._public = public

    @property
    def workspace(self):
        """Gets the workspace of this PortfolioRequest.

        Gid of an object.

        :return: The workspace of this PortfolioRequest.
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this PortfolioRequest.

        Gid of an object.

        :param workspace: The workspace of this PortfolioRequest.
        :type workspace: str
        """

        self._workspace = workspace
