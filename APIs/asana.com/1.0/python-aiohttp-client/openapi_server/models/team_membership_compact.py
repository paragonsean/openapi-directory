# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.team_compact import TeamCompact
from openapi_server.models.user_compact import UserCompact
from openapi_server import util


class TeamMembershipCompact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, is_guest: bool=None, team: TeamCompact=None, user: UserCompact=None):
        """TeamMembershipCompact - a model defined in OpenAPI

        :param gid: The gid of this TeamMembershipCompact.
        :param resource_type: The resource_type of this TeamMembershipCompact.
        :param is_guest: The is_guest of this TeamMembershipCompact.
        :param team: The team of this TeamMembershipCompact.
        :param user: The user of this TeamMembershipCompact.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'is_guest': bool,
            'team': TeamCompact,
            'user': UserCompact
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'is_guest': 'is_guest',
            'team': 'team',
            'user': 'user'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._is_guest = is_guest
        self._team = team
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamMembershipCompact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamMembershipCompact of this TeamMembershipCompact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this TeamMembershipCompact.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this TeamMembershipCompact.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this TeamMembershipCompact.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this TeamMembershipCompact.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this TeamMembershipCompact.

        The base type of this resource.

        :return: The resource_type of this TeamMembershipCompact.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TeamMembershipCompact.

        The base type of this resource.

        :param resource_type: The resource_type of this TeamMembershipCompact.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def is_guest(self):
        """Gets the is_guest of this TeamMembershipCompact.

        Describes if the user is a guest in the team.

        :return: The is_guest of this TeamMembershipCompact.
        :rtype: bool
        """
        return self._is_guest

    @is_guest.setter
    def is_guest(self, is_guest):
        """Sets the is_guest of this TeamMembershipCompact.

        Describes if the user is a guest in the team.

        :param is_guest: The is_guest of this TeamMembershipCompact.
        :type is_guest: bool
        """

        self._is_guest = is_guest

    @property
    def team(self):
        """Gets the team of this TeamMembershipCompact.


        :return: The team of this TeamMembershipCompact.
        :rtype: TeamCompact
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TeamMembershipCompact.


        :param team: The team of this TeamMembershipCompact.
        :type team: TeamCompact
        """

        self._team = team

    @property
    def user(self):
        """Gets the user of this TeamMembershipCompact.


        :return: The user of this TeamMembershipCompact.
        :rtype: UserCompact
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TeamMembershipCompact.


        :param user: The user of this TeamMembershipCompact.
        :type user: UserCompact
        """

        self._user = user
