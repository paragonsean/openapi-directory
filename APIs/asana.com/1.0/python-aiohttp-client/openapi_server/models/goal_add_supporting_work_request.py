# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoalAddSupportingWorkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supporting_work: str=None):
        """GoalAddSupportingWorkRequest - a model defined in OpenAPI

        :param supporting_work: The supporting_work of this GoalAddSupportingWorkRequest.
        """
        self.openapi_types = {
            'supporting_work': str
        }

        self.attribute_map = {
            'supporting_work': 'supporting_work'
        }

        self._supporting_work = supporting_work

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoalAddSupportingWorkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoalAddSupportingWorkRequest of this GoalAddSupportingWorkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supporting_work(self):
        """Gets the supporting_work of this GoalAddSupportingWorkRequest.

        The project/portfolio gid to add as supporting work for a goal

        :return: The supporting_work of this GoalAddSupportingWorkRequest.
        :rtype: str
        """
        return self._supporting_work

    @supporting_work.setter
    def supporting_work(self, supporting_work):
        """Sets the supporting_work of this GoalAddSupportingWorkRequest.

        The project/portfolio gid to add as supporting work for a goal

        :param supporting_work: The supporting_work of this GoalAddSupportingWorkRequest.
        :type supporting_work: str
        """
        if supporting_work is None:
            raise ValueError("Invalid value for `supporting_work`, must not be `None`")

        self._supporting_work = supporting_work
