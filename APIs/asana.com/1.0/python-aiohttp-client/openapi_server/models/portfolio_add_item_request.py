# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortfolioAddItemRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insert_after: str=None, insert_before: str=None, item: str=None):
        """PortfolioAddItemRequest - a model defined in OpenAPI

        :param insert_after: The insert_after of this PortfolioAddItemRequest.
        :param insert_before: The insert_before of this PortfolioAddItemRequest.
        :param item: The item of this PortfolioAddItemRequest.
        """
        self.openapi_types = {
            'insert_after': str,
            'insert_before': str,
            'item': str
        }

        self.attribute_map = {
            'insert_after': 'insert_after',
            'insert_before': 'insert_before',
            'item': 'item'
        }

        self._insert_after = insert_after
        self._insert_before = insert_before
        self._item = item

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioAddItemRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortfolioAddItemRequest of this PortfolioAddItemRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insert_after(self):
        """Gets the insert_after of this PortfolioAddItemRequest.

        An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.

        :return: The insert_after of this PortfolioAddItemRequest.
        :rtype: str
        """
        return self._insert_after

    @insert_after.setter
    def insert_after(self, insert_after):
        """Sets the insert_after of this PortfolioAddItemRequest.

        An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.

        :param insert_after: The insert_after of this PortfolioAddItemRequest.
        :type insert_after: str
        """

        self._insert_after = insert_after

    @property
    def insert_before(self):
        """Gets the insert_before of this PortfolioAddItemRequest.

        An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.

        :return: The insert_before of this PortfolioAddItemRequest.
        :rtype: str
        """
        return self._insert_before

    @insert_before.setter
    def insert_before(self, insert_before):
        """Sets the insert_before of this PortfolioAddItemRequest.

        An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.

        :param insert_before: The insert_before of this PortfolioAddItemRequest.
        :type insert_before: str
        """

        self._insert_before = insert_before

    @property
    def item(self):
        """Gets the item of this PortfolioAddItemRequest.

        The item to add to the portfolio.

        :return: The item of this PortfolioAddItemRequest.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this PortfolioAddItemRequest.

        The item to add to the portfolio.

        :param item: The item of this PortfolioAddItemRequest.
        :type item: str
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item
