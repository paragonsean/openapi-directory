# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_request_filters_inner import WebhookRequestFiltersInner
from openapi_server import util


class WebhookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[WebhookRequestFiltersInner]=None, resource: str=None, target: str=None):
        """WebhookRequest - a model defined in OpenAPI

        :param filters: The filters of this WebhookRequest.
        :param resource: The resource of this WebhookRequest.
        :param target: The target of this WebhookRequest.
        """
        self.openapi_types = {
            'filters': List[WebhookRequestFiltersInner],
            'resource': str,
            'target': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'resource': 'resource',
            'target': 'target'
        }

        self._filters = filters
        self._resource = resource
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookRequest of this WebhookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this WebhookRequest.

        An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.

        :return: The filters of this WebhookRequest.
        :rtype: List[WebhookRequestFiltersInner]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this WebhookRequest.

        An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.

        :param filters: The filters of this WebhookRequest.
        :type filters: List[WebhookRequestFiltersInner]
        """

        self._filters = filters

    @property
    def resource(self):
        """Gets the resource of this WebhookRequest.

        A resource ID to subscribe to. Many Asana resources are valid to create webhooks on, but higher-level resources require filters.

        :return: The resource of this WebhookRequest.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this WebhookRequest.

        A resource ID to subscribe to. Many Asana resources are valid to create webhooks on, but higher-level resources require filters.

        :param resource: The resource of this WebhookRequest.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def target(self):
        """Gets the target of this WebhookRequest.

        The URL to receive the HTTP POST. The full URL will be used to deliver events from this webhook (including parameters) which allows encoding of application-specific state when the webhook is created.

        :return: The target of this WebhookRequest.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this WebhookRequest.

        The URL to receive the HTTP POST. The full URL will be used to deliver events from this webhook (including parameters) which allows encoding of application-specific state when the webhook is created.

        :param target: The target of this WebhookRequest.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
