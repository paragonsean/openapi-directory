# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, name: str=None, description: str=None, html_description: str=None, organization: str=None, visibility: str=None):
        """TeamRequest - a model defined in OpenAPI

        :param gid: The gid of this TeamRequest.
        :param resource_type: The resource_type of this TeamRequest.
        :param name: The name of this TeamRequest.
        :param description: The description of this TeamRequest.
        :param html_description: The html_description of this TeamRequest.
        :param organization: The organization of this TeamRequest.
        :param visibility: The visibility of this TeamRequest.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'description': str,
            'html_description': str,
            'organization': str,
            'visibility': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'description': 'description',
            'html_description': 'html_description',
            'organization': 'organization',
            'visibility': 'visibility'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._description = description
        self._html_description = html_description
        self._organization = organization
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamRequest of this TeamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this TeamRequest.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this TeamRequest.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this TeamRequest.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this TeamRequest.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this TeamRequest.

        The base type of this resource.

        :return: The resource_type of this TeamRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TeamRequest.

        The base type of this resource.

        :param resource_type: The resource_type of this TeamRequest.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this TeamRequest.

        The name of the team.

        :return: The name of this TeamRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamRequest.

        The name of the team.

        :param name: The name of this TeamRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TeamRequest.

        The description of the team. 

        :return: The description of this TeamRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TeamRequest.

        The description of the team. 

        :param description: The description of this TeamRequest.
        :type description: str
        """

        self._description = description

    @property
    def html_description(self):
        """Gets the html_description of this TeamRequest.

        The description of the team with formatting as HTML. 

        :return: The html_description of this TeamRequest.
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description):
        """Sets the html_description of this TeamRequest.

        The description of the team with formatting as HTML. 

        :param html_description: The html_description of this TeamRequest.
        :type html_description: str
        """

        self._html_description = html_description

    @property
    def organization(self):
        """Gets the organization of this TeamRequest.

        The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. 

        :return: The organization of this TeamRequest.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this TeamRequest.

        The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. 

        :param organization: The organization of this TeamRequest.
        :type organization: str
        """

        self._organization = organization

    @property
    def visibility(self):
        """Gets the visibility of this TeamRequest.

        The visibility of the team to users in the same organization 

        :return: The visibility of this TeamRequest.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this TeamRequest.

        The visibility of the team to users in the same organization 

        :param visibility: The visibility of this TeamRequest.
        :type visibility: str
        """
        allowed_values = ["secret", "request_to_join", "public"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
