# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuditLogEventActor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor_type: str=None, email: str=None, gid: str=None, name: str=None):
        """AuditLogEventActor - a model defined in OpenAPI

        :param actor_type: The actor_type of this AuditLogEventActor.
        :param email: The email of this AuditLogEventActor.
        :param gid: The gid of this AuditLogEventActor.
        :param name: The name of this AuditLogEventActor.
        """
        self.openapi_types = {
            'actor_type': str,
            'email': str,
            'gid': str,
            'name': str
        }

        self.attribute_map = {
            'actor_type': 'actor_type',
            'email': 'email',
            'gid': 'gid',
            'name': 'name'
        }

        self._actor_type = actor_type
        self._email = email
        self._gid = gid
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditLogEventActor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditLogEventActor of this AuditLogEventActor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor_type(self):
        """Gets the actor_type of this AuditLogEventActor.

        The type of actor. Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.

        :return: The actor_type of this AuditLogEventActor.
        :rtype: str
        """
        return self._actor_type

    @actor_type.setter
    def actor_type(self, actor_type):
        """Sets the actor_type of this AuditLogEventActor.

        The type of actor. Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.

        :param actor_type: The actor_type of this AuditLogEventActor.
        :type actor_type: str
        """
        allowed_values = ["user", "asana", "asana_support", "anonymous", "external_administrator"]  # noqa: E501
        if actor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `actor_type` ({0}), must be one of {1}"
                .format(actor_type, allowed_values)
            )

        self._actor_type = actor_type

    @property
    def email(self):
        """Gets the email of this AuditLogEventActor.

        The email of the actor, if it is a user.

        :return: The email of this AuditLogEventActor.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AuditLogEventActor.

        The email of the actor, if it is a user.

        :param email: The email of this AuditLogEventActor.
        :type email: str
        """

        self._email = email

    @property
    def gid(self):
        """Gets the gid of this AuditLogEventActor.

        Globally unique identifier of the actor, if it is a user.

        :return: The gid of this AuditLogEventActor.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this AuditLogEventActor.

        Globally unique identifier of the actor, if it is a user.

        :param gid: The gid of this AuditLogEventActor.
        :type gid: str
        """

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this AuditLogEventActor.

        The name of the actor, if it is a user.

        :return: The name of this AuditLogEventActor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuditLogEventActor.

        The name of the actor, if it is a user.

        :param name: The name of this AuditLogEventActor.
        :type name: str
        """

        self._name = name
