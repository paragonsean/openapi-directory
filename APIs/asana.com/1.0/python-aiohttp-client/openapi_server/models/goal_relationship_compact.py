# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.goal_relationship_compact_all_of_supporting_resource import GoalRelationshipCompactAllOfSupportingResource
from openapi_server import util


class GoalRelationshipCompact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, contribution_weight: float=None, resource_subtype: str=None, supporting_resource: GoalRelationshipCompactAllOfSupportingResource=None):
        """GoalRelationshipCompact - a model defined in OpenAPI

        :param gid: The gid of this GoalRelationshipCompact.
        :param resource_type: The resource_type of this GoalRelationshipCompact.
        :param contribution_weight: The contribution_weight of this GoalRelationshipCompact.
        :param resource_subtype: The resource_subtype of this GoalRelationshipCompact.
        :param supporting_resource: The supporting_resource of this GoalRelationshipCompact.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'contribution_weight': float,
            'resource_subtype': str,
            'supporting_resource': GoalRelationshipCompactAllOfSupportingResource
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'contribution_weight': 'contribution_weight',
            'resource_subtype': 'resource_subtype',
            'supporting_resource': 'supporting_resource'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._contribution_weight = contribution_weight
        self._resource_subtype = resource_subtype
        self._supporting_resource = supporting_resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoalRelationshipCompact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoalRelationshipCompact of this GoalRelationshipCompact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this GoalRelationshipCompact.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this GoalRelationshipCompact.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this GoalRelationshipCompact.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this GoalRelationshipCompact.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this GoalRelationshipCompact.

        The base type of this resource.

        :return: The resource_type of this GoalRelationshipCompact.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GoalRelationshipCompact.

        The base type of this resource.

        :param resource_type: The resource_type of this GoalRelationshipCompact.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def contribution_weight(self):
        """Gets the contribution_weight of this GoalRelationshipCompact.

        The weight that the supporting resource's progress contributes to the supported goal's progress. This can only be 0 or 1.

        :return: The contribution_weight of this GoalRelationshipCompact.
        :rtype: float
        """
        return self._contribution_weight

    @contribution_weight.setter
    def contribution_weight(self, contribution_weight):
        """Sets the contribution_weight of this GoalRelationshipCompact.

        The weight that the supporting resource's progress contributes to the supported goal's progress. This can only be 0 or 1.

        :param contribution_weight: The contribution_weight of this GoalRelationshipCompact.
        :type contribution_weight: float
        """

        self._contribution_weight = contribution_weight

    @property
    def resource_subtype(self):
        """Gets the resource_subtype of this GoalRelationshipCompact.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.

        :return: The resource_subtype of this GoalRelationshipCompact.
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype):
        """Sets the resource_subtype of this GoalRelationshipCompact.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.

        :param resource_subtype: The resource_subtype of this GoalRelationshipCompact.
        :type resource_subtype: str
        """
        allowed_values = ["subgoal", "supporting_work"]  # noqa: E501
        if resource_subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_subtype` ({0}), must be one of {1}"
                .format(resource_subtype, allowed_values)
            )

        self._resource_subtype = resource_subtype

    @property
    def supporting_resource(self):
        """Gets the supporting_resource of this GoalRelationshipCompact.


        :return: The supporting_resource of this GoalRelationshipCompact.
        :rtype: GoalRelationshipCompactAllOfSupportingResource
        """
        return self._supporting_resource

    @supporting_resource.setter
    def supporting_resource(self, supporting_resource):
        """Sets the supporting_resource of this GoalRelationshipCompact.


        :param supporting_resource: The supporting_resource of this GoalRelationshipCompact.
        :type supporting_resource: GoalRelationshipCompactAllOfSupportingResource
        """

        self._supporting_resource = supporting_resource
