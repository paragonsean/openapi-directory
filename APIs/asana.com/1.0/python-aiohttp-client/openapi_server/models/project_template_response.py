# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_variable_compact import DateVariableCompact
from openapi_server.models.team_compact import TeamCompact
from openapi_server.models.user_compact import UserCompact
from openapi_server import util


class ProjectTemplateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, name: str=None, color: str=None, description: str=None, html_description: str=None, owner: UserCompact=None, public: bool=None, requested_dates: List[DateVariableCompact]=None, team: TeamCompact=None):
        """ProjectTemplateResponse - a model defined in OpenAPI

        :param gid: The gid of this ProjectTemplateResponse.
        :param resource_type: The resource_type of this ProjectTemplateResponse.
        :param name: The name of this ProjectTemplateResponse.
        :param color: The color of this ProjectTemplateResponse.
        :param description: The description of this ProjectTemplateResponse.
        :param html_description: The html_description of this ProjectTemplateResponse.
        :param owner: The owner of this ProjectTemplateResponse.
        :param public: The public of this ProjectTemplateResponse.
        :param requested_dates: The requested_dates of this ProjectTemplateResponse.
        :param team: The team of this ProjectTemplateResponse.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'color': str,
            'description': str,
            'html_description': str,
            'owner': UserCompact,
            'public': bool,
            'requested_dates': List[DateVariableCompact],
            'team': TeamCompact
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'color': 'color',
            'description': 'description',
            'html_description': 'html_description',
            'owner': 'owner',
            'public': 'public',
            'requested_dates': 'requested_dates',
            'team': 'team'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._color = color
        self._description = description
        self._html_description = html_description
        self._owner = owner
        self._public = public
        self._requested_dates = requested_dates
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectTemplateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectTemplateResponse of this ProjectTemplateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this ProjectTemplateResponse.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this ProjectTemplateResponse.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this ProjectTemplateResponse.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this ProjectTemplateResponse.

        The base type of this resource.

        :return: The resource_type of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ProjectTemplateResponse.

        The base type of this resource.

        :param resource_type: The resource_type of this ProjectTemplateResponse.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this ProjectTemplateResponse.

        Name of the project template.

        :return: The name of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectTemplateResponse.

        Name of the project template.

        :param name: The name of this ProjectTemplateResponse.
        :type name: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this ProjectTemplateResponse.

        Color of the project template.

        :return: The color of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ProjectTemplateResponse.

        Color of the project template.

        :param color: The color of this ProjectTemplateResponse.
        :type color: str
        """
        allowed_values = [None,"dark-pink", "dark-green", "dark-blue", "dark-red", "dark-teal", "dark-brown", "dark-orange", "dark-purple", "dark-warm-gray", "light-pink", "light-green", "light-blue", "light-red", "light-teal", "light-brown", "light-orange", "light-purple", "light-warm-gray"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def description(self):
        """Gets the description of this ProjectTemplateResponse.

        Free-form textual information associated with the project template

        :return: The description of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectTemplateResponse.

        Free-form textual information associated with the project template

        :param description: The description of this ProjectTemplateResponse.
        :type description: str
        """

        self._description = description

    @property
    def html_description(self):
        """Gets the html_description of this ProjectTemplateResponse.

        The description of the project template with formatting as HTML.

        :return: The html_description of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description):
        """Sets the html_description of this ProjectTemplateResponse.

        The description of the project template with formatting as HTML.

        :param html_description: The html_description of this ProjectTemplateResponse.
        :type html_description: str
        """

        self._html_description = html_description

    @property
    def owner(self):
        """Gets the owner of this ProjectTemplateResponse.

        The current owner of the project template, may be null.

        :return: The owner of this ProjectTemplateResponse.
        :rtype: UserCompact
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ProjectTemplateResponse.

        The current owner of the project template, may be null.

        :param owner: The owner of this ProjectTemplateResponse.
        :type owner: UserCompact
        """

        self._owner = owner

    @property
    def public(self):
        """Gets the public of this ProjectTemplateResponse.

        True if the project template is public to its team.

        :return: The public of this ProjectTemplateResponse.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ProjectTemplateResponse.

        True if the project template is public to its team.

        :param public: The public of this ProjectTemplateResponse.
        :type public: bool
        """

        self._public = public

    @property
    def requested_dates(self):
        """Gets the requested_dates of this ProjectTemplateResponse.

        Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.

        :return: The requested_dates of this ProjectTemplateResponse.
        :rtype: List[DateVariableCompact]
        """
        return self._requested_dates

    @requested_dates.setter
    def requested_dates(self, requested_dates):
        """Sets the requested_dates of this ProjectTemplateResponse.

        Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.

        :param requested_dates: The requested_dates of this ProjectTemplateResponse.
        :type requested_dates: List[DateVariableCompact]
        """

        self._requested_dates = requested_dates

    @property
    def team(self):
        """Gets the team of this ProjectTemplateResponse.


        :return: The team of this ProjectTemplateResponse.
        :rtype: TeamCompact
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ProjectTemplateResponse.


        :param team: The team of this ProjectTemplateResponse.
        :type team: TeamCompact
        """

        self._team = team
