# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, name: str=None, color: str=None, notes: str=None):
        """TagBase - a model defined in OpenAPI

        :param gid: The gid of this TagBase.
        :param resource_type: The resource_type of this TagBase.
        :param name: The name of this TagBase.
        :param color: The color of this TagBase.
        :param notes: The notes of this TagBase.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'color': str,
            'notes': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'color': 'color',
            'notes': 'notes'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._color = color
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagBase of this TagBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this TagBase.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this TagBase.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this TagBase.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this TagBase.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this TagBase.

        The base type of this resource.

        :return: The resource_type of this TagBase.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TagBase.

        The base type of this resource.

        :param resource_type: The resource_type of this TagBase.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self):
        """Gets the name of this TagBase.

        Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.

        :return: The name of this TagBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagBase.

        Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.

        :param name: The name of this TagBase.
        :type name: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this TagBase.

        Color of the tag.

        :return: The color of this TagBase.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TagBase.

        Color of the tag.

        :param color: The color of this TagBase.
        :type color: str
        """
        allowed_values = [None,"dark-pink", "dark-green", "dark-blue", "dark-red", "dark-teal", "dark-brown", "dark-orange", "dark-purple", "dark-warm-gray", "light-pink", "light-green", "light-blue", "light-red", "light-teal", "light-brown", "light-orange", "light-purple", "light-warm-gray"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def notes(self):
        """Gets the notes of this TagBase.

        Free-form textual information associated with the tag (i.e. its description).

        :return: The notes of this TagBase.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this TagBase.

        Free-form textual information associated with the tag (i.e. its description).

        :param notes: The notes of this TagBase.
        :type notes: str
        """

        self._notes = notes
