# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workspace_compact import WorkspaceCompact
from openapi_server import util


class OrganizationExportCompact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, created_at: datetime=None, download_url: str=None, organization: WorkspaceCompact=None, state: str=None):
        """OrganizationExportCompact - a model defined in OpenAPI

        :param gid: The gid of this OrganizationExportCompact.
        :param resource_type: The resource_type of this OrganizationExportCompact.
        :param created_at: The created_at of this OrganizationExportCompact.
        :param download_url: The download_url of this OrganizationExportCompact.
        :param organization: The organization of this OrganizationExportCompact.
        :param state: The state of this OrganizationExportCompact.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'created_at': datetime,
            'download_url': str,
            'organization': WorkspaceCompact,
            'state': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'created_at': 'created_at',
            'download_url': 'download_url',
            'organization': 'organization',
            'state': 'state'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._created_at = created_at
        self._download_url = download_url
        self._organization = organization
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationExportCompact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationExportCompact of this OrganizationExportCompact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this OrganizationExportCompact.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this OrganizationExportCompact.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this OrganizationExportCompact.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this OrganizationExportCompact.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this OrganizationExportCompact.

        The base type of this resource.

        :return: The resource_type of this OrganizationExportCompact.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this OrganizationExportCompact.

        The base type of this resource.

        :param resource_type: The resource_type of this OrganizationExportCompact.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def created_at(self):
        """Gets the created_at of this OrganizationExportCompact.

        The time at which this resource was created.

        :return: The created_at of this OrganizationExportCompact.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrganizationExportCompact.

        The time at which this resource was created.

        :param created_at: The created_at of this OrganizationExportCompact.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def download_url(self):
        """Gets the download_url of this OrganizationExportCompact.

        Download this URL to retreive the full export of the organization in JSON format. It will be compressed in a gzip (.gz) container.  *Note: May be null if the export is still in progress or failed.  If present, this URL may only be valid for 1 hour from the time of retrieval. You should avoid persisting this URL somewhere and rather refresh on demand to ensure you do not keep stale URLs.*

        :return: The download_url of this OrganizationExportCompact.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this OrganizationExportCompact.

        Download this URL to retreive the full export of the organization in JSON format. It will be compressed in a gzip (.gz) container.  *Note: May be null if the export is still in progress or failed.  If present, this URL may only be valid for 1 hour from the time of retrieval. You should avoid persisting this URL somewhere and rather refresh on demand to ensure you do not keep stale URLs.*

        :param download_url: The download_url of this OrganizationExportCompact.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def organization(self):
        """Gets the organization of this OrganizationExportCompact.


        :return: The organization of this OrganizationExportCompact.
        :rtype: WorkspaceCompact
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrganizationExportCompact.


        :param organization: The organization of this OrganizationExportCompact.
        :type organization: WorkspaceCompact
        """

        self._organization = organization

    @property
    def state(self):
        """Gets the state of this OrganizationExportCompact.

        The current state of the export.

        :return: The state of this OrganizationExportCompact.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OrganizationExportCompact.

        The current state of the export.

        :param state: The state of this OrganizationExportCompact.
        :type state: str
        """
        allowed_values = ["pending", "started", "finished", "error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
