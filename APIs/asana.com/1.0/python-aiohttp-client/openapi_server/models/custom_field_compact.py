# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_field_compact_all_of_date_value import CustomFieldCompactAllOfDateValue
from openapi_server.models.custom_field_compact_all_of_enum_value import CustomFieldCompactAllOfEnumValue
from openapi_server.models.enum_option import EnumOption
from openapi_server import util


class CustomFieldCompact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, date_value: CustomFieldCompactAllOfDateValue=None, display_value: str=None, enabled: bool=None, enum_options: List[EnumOption]=None, enum_value: CustomFieldCompactAllOfEnumValue=None, multi_enum_values: List[EnumOption]=None, name: str=None, number_value: float=None, resource_subtype: str=None, text_value: str=None, type: str=None):
        """CustomFieldCompact - a model defined in OpenAPI

        :param gid: The gid of this CustomFieldCompact.
        :param resource_type: The resource_type of this CustomFieldCompact.
        :param date_value: The date_value of this CustomFieldCompact.
        :param display_value: The display_value of this CustomFieldCompact.
        :param enabled: The enabled of this CustomFieldCompact.
        :param enum_options: The enum_options of this CustomFieldCompact.
        :param enum_value: The enum_value of this CustomFieldCompact.
        :param multi_enum_values: The multi_enum_values of this CustomFieldCompact.
        :param name: The name of this CustomFieldCompact.
        :param number_value: The number_value of this CustomFieldCompact.
        :param resource_subtype: The resource_subtype of this CustomFieldCompact.
        :param text_value: The text_value of this CustomFieldCompact.
        :param type: The type of this CustomFieldCompact.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'date_value': CustomFieldCompactAllOfDateValue,
            'display_value': str,
            'enabled': bool,
            'enum_options': List[EnumOption],
            'enum_value': CustomFieldCompactAllOfEnumValue,
            'multi_enum_values': List[EnumOption],
            'name': str,
            'number_value': float,
            'resource_subtype': str,
            'text_value': str,
            'type': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'date_value': 'date_value',
            'display_value': 'display_value',
            'enabled': 'enabled',
            'enum_options': 'enum_options',
            'enum_value': 'enum_value',
            'multi_enum_values': 'multi_enum_values',
            'name': 'name',
            'number_value': 'number_value',
            'resource_subtype': 'resource_subtype',
            'text_value': 'text_value',
            'type': 'type'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._date_value = date_value
        self._display_value = display_value
        self._enabled = enabled
        self._enum_options = enum_options
        self._enum_value = enum_value
        self._multi_enum_values = multi_enum_values
        self._name = name
        self._number_value = number_value
        self._resource_subtype = resource_subtype
        self._text_value = text_value
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldCompact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFieldCompact of this CustomFieldCompact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this CustomFieldCompact.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this CustomFieldCompact.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this CustomFieldCompact.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this CustomFieldCompact.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this CustomFieldCompact.

        The base type of this resource.

        :return: The resource_type of this CustomFieldCompact.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CustomFieldCompact.

        The base type of this resource.

        :param resource_type: The resource_type of this CustomFieldCompact.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def date_value(self):
        """Gets the date_value of this CustomFieldCompact.


        :return: The date_value of this CustomFieldCompact.
        :rtype: CustomFieldCompactAllOfDateValue
        """
        return self._date_value

    @date_value.setter
    def date_value(self, date_value):
        """Sets the date_value of this CustomFieldCompact.


        :param date_value: The date_value of this CustomFieldCompact.
        :type date_value: CustomFieldCompactAllOfDateValue
        """

        self._date_value = date_value

    @property
    def display_value(self):
        """Gets the display_value of this CustomFieldCompact.

        A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.

        :return: The display_value of this CustomFieldCompact.
        :rtype: str
        """
        return self._display_value

    @display_value.setter
    def display_value(self, display_value):
        """Sets the display_value of this CustomFieldCompact.

        A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.

        :param display_value: The display_value of this CustomFieldCompact.
        :type display_value: str
        """

        self._display_value = display_value

    @property
    def enabled(self):
        """Gets the enabled of this CustomFieldCompact.

        *Conditional*. Determines if the custom field is enabled or not.

        :return: The enabled of this CustomFieldCompact.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CustomFieldCompact.

        *Conditional*. Determines if the custom field is enabled or not.

        :param enabled: The enabled of this CustomFieldCompact.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def enum_options(self):
        """Gets the enum_options of this CustomFieldCompact.

        *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).

        :return: The enum_options of this CustomFieldCompact.
        :rtype: List[EnumOption]
        """
        return self._enum_options

    @enum_options.setter
    def enum_options(self, enum_options):
        """Sets the enum_options of this CustomFieldCompact.

        *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).

        :param enum_options: The enum_options of this CustomFieldCompact.
        :type enum_options: List[EnumOption]
        """

        self._enum_options = enum_options

    @property
    def enum_value(self):
        """Gets the enum_value of this CustomFieldCompact.


        :return: The enum_value of this CustomFieldCompact.
        :rtype: CustomFieldCompactAllOfEnumValue
        """
        return self._enum_value

    @enum_value.setter
    def enum_value(self, enum_value):
        """Sets the enum_value of this CustomFieldCompact.


        :param enum_value: The enum_value of this CustomFieldCompact.
        :type enum_value: CustomFieldCompactAllOfEnumValue
        """

        self._enum_value = enum_value

    @property
    def multi_enum_values(self):
        """Gets the multi_enum_values of this CustomFieldCompact.

        *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.

        :return: The multi_enum_values of this CustomFieldCompact.
        :rtype: List[EnumOption]
        """
        return self._multi_enum_values

    @multi_enum_values.setter
    def multi_enum_values(self, multi_enum_values):
        """Sets the multi_enum_values of this CustomFieldCompact.

        *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.

        :param multi_enum_values: The multi_enum_values of this CustomFieldCompact.
        :type multi_enum_values: List[EnumOption]
        """

        self._multi_enum_values = multi_enum_values

    @property
    def name(self):
        """Gets the name of this CustomFieldCompact.

        The name of the custom field.

        :return: The name of this CustomFieldCompact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomFieldCompact.

        The name of the custom field.

        :param name: The name of this CustomFieldCompact.
        :type name: str
        """

        self._name = name

    @property
    def number_value(self):
        """Gets the number_value of this CustomFieldCompact.

        *Conditional*. This number is the value of a `number` custom field.

        :return: The number_value of this CustomFieldCompact.
        :rtype: float
        """
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        """Sets the number_value of this CustomFieldCompact.

        *Conditional*. This number is the value of a `number` custom field.

        :param number_value: The number_value of this CustomFieldCompact.
        :type number_value: float
        """

        self._number_value = number_value

    @property
    def resource_subtype(self):
        """Gets the resource_subtype of this CustomFieldCompact.

        The type of the custom field. Must be one of the given values. 

        :return: The resource_subtype of this CustomFieldCompact.
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype):
        """Sets the resource_subtype of this CustomFieldCompact.

        The type of the custom field. Must be one of the given values. 

        :param resource_subtype: The resource_subtype of this CustomFieldCompact.
        :type resource_subtype: str
        """
        allowed_values = ["text", "enum", "multi_enum", "number", "date", "people"]  # noqa: E501
        if resource_subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_subtype` ({0}), must be one of {1}"
                .format(resource_subtype, allowed_values)
            )

        self._resource_subtype = resource_subtype

    @property
    def text_value(self):
        """Gets the text_value of this CustomFieldCompact.

        *Conditional*. This string is the value of a `text` custom field.

        :return: The text_value of this CustomFieldCompact.
        :rtype: str
        """
        return self._text_value

    @text_value.setter
    def text_value(self, text_value):
        """Sets the text_value of this CustomFieldCompact.

        *Conditional*. This string is the value of a `text` custom field.

        :param text_value: The text_value of this CustomFieldCompact.
        :type text_value: str
        """

        self._text_value = text_value

    @property
    def type(self):
        """Gets the type of this CustomFieldCompact.

        *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 

        :return: The type of this CustomFieldCompact.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFieldCompact.

        *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 

        :param type: The type of this CustomFieldCompact.
        :type type: str
        """
        allowed_values = ["text", "enum", "multi_enum", "number"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
