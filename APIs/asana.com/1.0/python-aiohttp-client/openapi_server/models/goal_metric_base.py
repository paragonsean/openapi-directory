# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoalMetricBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid: str=None, resource_type: str=None, currency_code: str=None, current_display_value: str=None, current_number_value: float=None, initial_number_value: float=None, precision: int=None, progress_source: str=None, resource_subtype: str=None, target_number_value: float=None, unit: str=None):
        """GoalMetricBase - a model defined in OpenAPI

        :param gid: The gid of this GoalMetricBase.
        :param resource_type: The resource_type of this GoalMetricBase.
        :param currency_code: The currency_code of this GoalMetricBase.
        :param current_display_value: The current_display_value of this GoalMetricBase.
        :param current_number_value: The current_number_value of this GoalMetricBase.
        :param initial_number_value: The initial_number_value of this GoalMetricBase.
        :param precision: The precision of this GoalMetricBase.
        :param progress_source: The progress_source of this GoalMetricBase.
        :param resource_subtype: The resource_subtype of this GoalMetricBase.
        :param target_number_value: The target_number_value of this GoalMetricBase.
        :param unit: The unit of this GoalMetricBase.
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'currency_code': str,
            'current_display_value': str,
            'current_number_value': float,
            'initial_number_value': float,
            'precision': int,
            'progress_source': str,
            'resource_subtype': str,
            'target_number_value': float,
            'unit': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'currency_code': 'currency_code',
            'current_display_value': 'current_display_value',
            'current_number_value': 'current_number_value',
            'initial_number_value': 'initial_number_value',
            'precision': 'precision',
            'progress_source': 'progress_source',
            'resource_subtype': 'resource_subtype',
            'target_number_value': 'target_number_value',
            'unit': 'unit'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._currency_code = currency_code
        self._current_display_value = current_display_value
        self._current_number_value = current_number_value
        self._initial_number_value = initial_number_value
        self._precision = precision
        self._progress_source = progress_source
        self._resource_subtype = resource_subtype
        self._target_number_value = target_number_value
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoalMetricBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoalMetricBase of this GoalMetricBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self):
        """Gets the gid of this GoalMetricBase.

        Globally unique identifier of the resource, as a string.

        :return: The gid of this GoalMetricBase.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this GoalMetricBase.

        Globally unique identifier of the resource, as a string.

        :param gid: The gid of this GoalMetricBase.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self):
        """Gets the resource_type of this GoalMetricBase.

        The base type of this resource.

        :return: The resource_type of this GoalMetricBase.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GoalMetricBase.

        The base type of this resource.

        :param resource_type: The resource_type of this GoalMetricBase.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def currency_code(self):
        """Gets the currency_code of this GoalMetricBase.

        ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.

        :return: The currency_code of this GoalMetricBase.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GoalMetricBase.

        ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.

        :param currency_code: The currency_code of this GoalMetricBase.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def current_display_value(self):
        """Gets the current_display_value of this GoalMetricBase.

        This string is the current value of a goal metric of type string.

        :return: The current_display_value of this GoalMetricBase.
        :rtype: str
        """
        return self._current_display_value

    @current_display_value.setter
    def current_display_value(self, current_display_value):
        """Sets the current_display_value of this GoalMetricBase.

        This string is the current value of a goal metric of type string.

        :param current_display_value: The current_display_value of this GoalMetricBase.
        :type current_display_value: str
        """

        self._current_display_value = current_display_value

    @property
    def current_number_value(self):
        """Gets the current_number_value of this GoalMetricBase.

        This number is the current value of a goal metric of type number.

        :return: The current_number_value of this GoalMetricBase.
        :rtype: float
        """
        return self._current_number_value

    @current_number_value.setter
    def current_number_value(self, current_number_value):
        """Sets the current_number_value of this GoalMetricBase.

        This number is the current value of a goal metric of type number.

        :param current_number_value: The current_number_value of this GoalMetricBase.
        :type current_number_value: float
        """

        self._current_number_value = current_number_value

    @property
    def initial_number_value(self):
        """Gets the initial_number_value of this GoalMetricBase.

        This number is the start value of a goal metric of type number.

        :return: The initial_number_value of this GoalMetricBase.
        :rtype: float
        """
        return self._initial_number_value

    @initial_number_value.setter
    def initial_number_value(self, initial_number_value):
        """Sets the initial_number_value of this GoalMetricBase.

        This number is the start value of a goal metric of type number.

        :param initial_number_value: The initial_number_value of this GoalMetricBase.
        :type initial_number_value: float
        """

        self._initial_number_value = initial_number_value

    @property
    def precision(self):
        """Gets the precision of this GoalMetricBase.

        *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.

        :return: The precision of this GoalMetricBase.
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this GoalMetricBase.

        *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.

        :param precision: The precision of this GoalMetricBase.
        :type precision: int
        """

        self._precision = precision

    @property
    def progress_source(self):
        """Gets the progress_source of this GoalMetricBase.

        This field defines how the progress value of a goal metric is being calculated. A goal's progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.

        :return: The progress_source of this GoalMetricBase.
        :rtype: str
        """
        return self._progress_source

    @progress_source.setter
    def progress_source(self, progress_source):
        """Sets the progress_source of this GoalMetricBase.

        This field defines how the progress value of a goal metric is being calculated. A goal's progress can be provided manually by the user, calculated automatically from contributing subgoals or projects, or managed by an integration with an external data source, such as Salesforce.

        :param progress_source: The progress_source of this GoalMetricBase.
        :type progress_source: str
        """
        allowed_values = ["manual", "subgoal_progress", "project_task_completion", "project_milestone_completion", "external"]  # noqa: E501
        if progress_source not in allowed_values:
            raise ValueError(
                "Invalid value for `progress_source` ({0}), must be one of {1}"
                .format(progress_source, allowed_values)
            )

        self._progress_source = progress_source

    @property
    def resource_subtype(self):
        """Gets the resource_subtype of this GoalMetricBase.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.

        :return: The resource_subtype of this GoalMetricBase.
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype):
        """Sets the resource_subtype of this GoalMetricBase.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.

        :param resource_subtype: The resource_subtype of this GoalMetricBase.
        :type resource_subtype: str
        """
        allowed_values = ["number"]  # noqa: E501
        if resource_subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_subtype` ({0}), must be one of {1}"
                .format(resource_subtype, allowed_values)
            )

        self._resource_subtype = resource_subtype

    @property
    def target_number_value(self):
        """Gets the target_number_value of this GoalMetricBase.

        This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.

        :return: The target_number_value of this GoalMetricBase.
        :rtype: float
        """
        return self._target_number_value

    @target_number_value.setter
    def target_number_value(self, target_number_value):
        """Sets the target_number_value of this GoalMetricBase.

        This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.

        :param target_number_value: The target_number_value of this GoalMetricBase.
        :type target_number_value: float
        """

        self._target_number_value = target_number_value

    @property
    def unit(self):
        """Gets the unit of this GoalMetricBase.

        A supported unit of measure for the goal metric, or none.

        :return: The unit of this GoalMetricBase.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GoalMetricBase.

        A supported unit of measure for the goal metric, or none.

        :param unit: The unit of this GoalMetricBase.
        :type unit: str
        """
        allowed_values = ["none", "currency", "percentage"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
