/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGoalsApi_H
#define OAI_OAIGoalsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddFollowers_request.h"
#include "OAICreateGoalMetric_request.h"
#include "OAICreateGoal_201_response.h"
#include "OAICreateGoal_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIErrorResponse.h"
#include "OAIGetGoals_200_response.h"
#include "OAIUpdateGoalMetric_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGoalsApi : public QObject {
    Q_OBJECT

public:
    OAIGoalsApi(const int timeOut = 0);
    ~OAIGoalsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  oai_add_followers_request OAIAddFollowers_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addFollowers(const QString &goal_gid, const OAIAddFollowers_request &oai_add_followers_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_create_goal_request OAICreateGoal_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void createGoal(const OAICreateGoal_request &oai_create_goal_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  oai_create_goal_metric_request OAICreateGoalMetric_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createGoalMetric(const QString &goal_gid, const OAICreateGoalMetric_request &oai_create_goal_metric_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deleteGoal(const QString &goal_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getGoal(const QString &goal_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  portfolio QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  is_workspace_level bool [optional]
    * @param[in]  team QString [optional]
    * @param[in]  workspace QString [optional]
    * @param[in]  time_periods QList<QString> [optional]
    */
    virtual void getGoals(const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &portfolio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_workspace_level = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workspace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &time_periods = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getParentGoalsForGoal(const QString &goal_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  oai_add_followers_request OAIAddFollowers_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeFollowers(const QString &goal_gid, const OAIAddFollowers_request &oai_add_followers_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  oai_create_goal_request OAICreateGoal_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updateGoal(const QString &goal_gid, const OAICreateGoal_request &oai_create_goal_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  oai_update_goal_metric_request OAIUpdateGoalMetric_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updateGoalMetric(const QString &goal_gid, const OAIUpdateGoalMetric_request &oai_update_goal_metric_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFollowersCallback(OAIHttpRequestWorker *worker);
    void createGoalCallback(OAIHttpRequestWorker *worker);
    void createGoalMetricCallback(OAIHttpRequestWorker *worker);
    void deleteGoalCallback(OAIHttpRequestWorker *worker);
    void getGoalCallback(OAIHttpRequestWorker *worker);
    void getGoalsCallback(OAIHttpRequestWorker *worker);
    void getParentGoalsForGoalCallback(OAIHttpRequestWorker *worker);
    void removeFollowersCallback(OAIHttpRequestWorker *worker);
    void updateGoalCallback(OAIHttpRequestWorker *worker);
    void updateGoalMetricCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFollowersSignal(OAICreateGoal_201_response summary);
    void createGoalSignal(OAICreateGoal_201_response summary);
    void createGoalMetricSignal(OAICreateGoal_201_response summary);
    void deleteGoalSignal(OAIDeleteAttachment_200_response summary);
    void getGoalSignal(OAICreateGoal_201_response summary);
    void getGoalsSignal(OAIGetGoals_200_response summary);
    void getParentGoalsForGoalSignal(OAIGetGoals_200_response summary);
    void removeFollowersSignal(OAICreateGoal_201_response summary);
    void updateGoalSignal(OAICreateGoal_201_response summary);
    void updateGoalMetricSignal(OAICreateGoal_201_response summary);


    void addFollowersSignalFull(OAIHttpRequestWorker *worker, OAICreateGoal_201_response summary);
    void createGoalSignalFull(OAIHttpRequestWorker *worker, OAICreateGoal_201_response summary);
    void createGoalMetricSignalFull(OAIHttpRequestWorker *worker, OAICreateGoal_201_response summary);
    void deleteGoalSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void getGoalSignalFull(OAIHttpRequestWorker *worker, OAICreateGoal_201_response summary);
    void getGoalsSignalFull(OAIHttpRequestWorker *worker, OAIGetGoals_200_response summary);
    void getParentGoalsForGoalSignalFull(OAIHttpRequestWorker *worker, OAIGetGoals_200_response summary);
    void removeFollowersSignalFull(OAIHttpRequestWorker *worker, OAICreateGoal_201_response summary);
    void updateGoalSignalFull(OAIHttpRequestWorker *worker, OAICreateGoal_201_response summary);
    void updateGoalMetricSignalFull(OAIHttpRequestWorker *worker, OAICreateGoal_201_response summary);

    Q_DECL_DEPRECATED_X("Use addFollowersSignalError() instead")
    void addFollowersSignalE(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFollowersSignalError(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGoalSignalError() instead")
    void createGoalSignalE(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGoalSignalError(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGoalMetricSignalError() instead")
    void createGoalMetricSignalE(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGoalMetricSignalError(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGoalSignalError() instead")
    void deleteGoalSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGoalSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalSignalError() instead")
    void getGoalSignalE(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalSignalError(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalsSignalError() instead")
    void getGoalsSignalE(OAIGetGoals_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalsSignalError(OAIGetGoals_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentGoalsForGoalSignalError() instead")
    void getParentGoalsForGoalSignalE(OAIGetGoals_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getParentGoalsForGoalSignalError(OAIGetGoals_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFollowersSignalError() instead")
    void removeFollowersSignalE(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFollowersSignalError(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoalSignalError() instead")
    void updateGoalSignalE(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoalSignalError(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoalMetricSignalError() instead")
    void updateGoalMetricSignalE(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoalMetricSignalError(OAICreateGoal_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFollowersSignalErrorFull() instead")
    void addFollowersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFollowersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGoalSignalErrorFull() instead")
    void createGoalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGoalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGoalMetricSignalErrorFull() instead")
    void createGoalMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGoalMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGoalSignalErrorFull() instead")
    void deleteGoalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGoalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalSignalErrorFull() instead")
    void getGoalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalsSignalErrorFull() instead")
    void getGoalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentGoalsForGoalSignalErrorFull() instead")
    void getParentGoalsForGoalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getParentGoalsForGoalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFollowersSignalErrorFull() instead")
    void removeFollowersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFollowersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoalSignalErrorFull() instead")
    void updateGoalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoalMetricSignalErrorFull() instead")
    void updateGoalMetricSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoalMetricSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
