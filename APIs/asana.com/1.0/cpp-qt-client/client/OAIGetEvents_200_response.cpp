/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEvents_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEvents_200_response::OAIGetEvents_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEvents_200_response::OAIGetEvents_200_response() {
    this->initializeModel();
}

OAIGetEvents_200_response::~OAIGetEvents_200_response() {}

void OAIGetEvents_200_response::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_sync_isSet = false;
    m_sync_isValid = false;
}

void OAIGetEvents_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEvents_200_response::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("has_more")]);
    m_has_more_isSet = !json[QString("has_more")].isNull() && m_has_more_isValid;

    m_sync_isValid = ::OpenAPI::fromJsonValue(m_sync, json[QString("sync")]);
    m_sync_isSet = !json[QString("sync")].isNull() && m_sync_isValid;
}

QString OAIGetEvents_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEvents_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_has_more_isSet) {
        obj.insert(QString("has_more"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_sync_isSet) {
        obj.insert(QString("sync"), ::OpenAPI::toJsonValue(m_sync));
    }
    return obj;
}

QList<OAIEventResponse> OAIGetEvents_200_response::getData() const {
    return m_data;
}
void OAIGetEvents_200_response::setData(const QList<OAIEventResponse> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIGetEvents_200_response::is_data_Set() const{
    return m_data_isSet;
}

bool OAIGetEvents_200_response::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIGetEvents_200_response::isHasMore() const {
    return m_has_more;
}
void OAIGetEvents_200_response::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAIGetEvents_200_response::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAIGetEvents_200_response::is_has_more_Valid() const{
    return m_has_more_isValid;
}

QString OAIGetEvents_200_response::getSync() const {
    return m_sync;
}
void OAIGetEvents_200_response::setSync(const QString &sync) {
    m_sync = sync;
    m_sync_isSet = true;
}

bool OAIGetEvents_200_response::is_sync_Set() const{
    return m_sync_isSet;
}

bool OAIGetEvents_200_response::is_sync_Valid() const{
    return m_sync_isValid;
}

bool OAIGetEvents_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEvents_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
