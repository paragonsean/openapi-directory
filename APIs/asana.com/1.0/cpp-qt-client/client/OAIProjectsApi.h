/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddCustomFieldSettingForPortfolio_200_response.h"
#include "OAIAddCustomFieldSettingForPortfolio_request.h"
#include "OAIAddFollowersForProject_request.h"
#include "OAIAddMembersForPortfolio_request.h"
#include "OAICreateProject_201_response.h"
#include "OAICreateProject_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIDuplicateProject_request.h"
#include "OAIErrorResponse.h"
#include "OAIGetItemsForPortfolio_200_response.h"
#include "OAIGetJob_200_response.h"
#include "OAIGetTaskCountsForProject_200_response.h"
#include "OAIProjectSaveAsTemplate_request.h"
#include "OAIRemoveCustomFieldSettingForPortfolio_request.h"
#include "OAIRemoveFollowersForProject_request.h"
#include "OAIRemoveMembersForPortfolio_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_add_custom_field_setting_for_portfolio_request OAIAddCustomFieldSettingForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    */
    virtual void addCustomFieldSettingForProject(const QString &project_gid, const OAIAddCustomFieldSettingForPortfolio_request &oai_add_custom_field_setting_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_add_followers_for_project_request OAIAddFollowersForProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addFollowersForProject(const QString &project_gid, const OAIAddFollowersForProject_request &oai_add_followers_for_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_add_members_for_portfolio_request OAIAddMembersForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addMembersForProject(const QString &project_gid, const OAIAddMembersForPortfolio_request &oai_add_members_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_create_project_request OAICreateProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createProject(const OAICreateProject_request &oai_create_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  team_gid QString [required]
    * @param[in]  oai_create_project_request OAICreateProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createProjectForTeam(const QString &team_gid, const OAICreateProject_request &oai_create_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  workspace_gid QString [required]
    * @param[in]  oai_create_project_request OAICreateProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createProjectForWorkspace(const QString &workspace_gid, const OAICreateProject_request &oai_create_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deleteProject(const QString &project_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  oai_duplicate_project_request OAIDuplicateProject_request [optional]
    */
    virtual void duplicateProject(const QString &project_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIDuplicateProject_request> &oai_duplicate_project_request = ::OpenAPI::OptionalParam<OAIDuplicateProject_request>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getProject(const QString &project_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  workspace QString [optional]
    * @param[in]  team QString [optional]
    * @param[in]  archived bool [optional]
    */
    virtual void getProjects(const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workspace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getProjectsForTask(const QString &task_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  archived bool [optional]
    */
    virtual void getProjectsForTeam(const QString &team_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  workspace_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  archived bool [optional]
    */
    virtual void getProjectsForWorkspace(const QString &workspace_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getTaskCountsForProject(const QString &project_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_project_save_as_template_request OAIProjectSaveAsTemplate_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void projectSaveAsTemplate(const QString &project_gid, const OAIProjectSaveAsTemplate_request &oai_project_save_as_template_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_remove_custom_field_setting_for_portfolio_request OAIRemoveCustomFieldSettingForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    */
    virtual void removeCustomFieldSettingForProject(const QString &project_gid, const OAIRemoveCustomFieldSettingForPortfolio_request &oai_remove_custom_field_setting_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_remove_followers_for_project_request OAIRemoveFollowersForProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeFollowersForProject(const QString &project_gid, const OAIRemoveFollowersForProject_request &oai_remove_followers_for_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_remove_members_for_portfolio_request OAIRemoveMembersForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeMembersForProject(const QString &project_gid, const OAIRemoveMembersForPortfolio_request &oai_remove_members_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_create_project_request OAICreateProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updateProject(const QString &project_gid, const OAICreateProject_request &oai_create_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addCustomFieldSettingForProjectCallback(OAIHttpRequestWorker *worker);
    void addFollowersForProjectCallback(OAIHttpRequestWorker *worker);
    void addMembersForProjectCallback(OAIHttpRequestWorker *worker);
    void createProjectCallback(OAIHttpRequestWorker *worker);
    void createProjectForTeamCallback(OAIHttpRequestWorker *worker);
    void createProjectForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void duplicateProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectsCallback(OAIHttpRequestWorker *worker);
    void getProjectsForTaskCallback(OAIHttpRequestWorker *worker);
    void getProjectsForTeamCallback(OAIHttpRequestWorker *worker);
    void getProjectsForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void getTaskCountsForProjectCallback(OAIHttpRequestWorker *worker);
    void projectSaveAsTemplateCallback(OAIHttpRequestWorker *worker);
    void removeCustomFieldSettingForProjectCallback(OAIHttpRequestWorker *worker);
    void removeFollowersForProjectCallback(OAIHttpRequestWorker *worker);
    void removeMembersForProjectCallback(OAIHttpRequestWorker *worker);
    void updateProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addCustomFieldSettingForProjectSignal(OAIAddCustomFieldSettingForPortfolio_200_response summary);
    void addFollowersForProjectSignal(OAICreateProject_201_response summary);
    void addMembersForProjectSignal(OAICreateProject_201_response summary);
    void createProjectSignal(OAICreateProject_201_response summary);
    void createProjectForTeamSignal(OAICreateProject_201_response summary);
    void createProjectForWorkspaceSignal(OAICreateProject_201_response summary);
    void deleteProjectSignal(OAIDeleteAttachment_200_response summary);
    void duplicateProjectSignal(OAIGetJob_200_response summary);
    void getProjectSignal(OAICreateProject_201_response summary);
    void getProjectsSignal(OAIGetItemsForPortfolio_200_response summary);
    void getProjectsForTaskSignal(OAIGetItemsForPortfolio_200_response summary);
    void getProjectsForTeamSignal(OAIGetItemsForPortfolio_200_response summary);
    void getProjectsForWorkspaceSignal(OAIGetItemsForPortfolio_200_response summary);
    void getTaskCountsForProjectSignal(OAIGetTaskCountsForProject_200_response summary);
    void projectSaveAsTemplateSignal(OAIGetJob_200_response summary);
    void removeCustomFieldSettingForProjectSignal(OAIDeleteAttachment_200_response summary);
    void removeFollowersForProjectSignal(OAICreateProject_201_response summary);
    void removeMembersForProjectSignal(OAICreateProject_201_response summary);
    void updateProjectSignal(OAICreateProject_201_response summary);


    void addCustomFieldSettingForProjectSignalFull(OAIHttpRequestWorker *worker, OAIAddCustomFieldSettingForPortfolio_200_response summary);
    void addFollowersForProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void addMembersForProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void createProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void createProjectForTeamSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void createProjectForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void duplicateProjectSignalFull(OAIHttpRequestWorker *worker, OAIGetJob_200_response summary);
    void getProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void getProjectsSignalFull(OAIHttpRequestWorker *worker, OAIGetItemsForPortfolio_200_response summary);
    void getProjectsForTaskSignalFull(OAIHttpRequestWorker *worker, OAIGetItemsForPortfolio_200_response summary);
    void getProjectsForTeamSignalFull(OAIHttpRequestWorker *worker, OAIGetItemsForPortfolio_200_response summary);
    void getProjectsForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIGetItemsForPortfolio_200_response summary);
    void getTaskCountsForProjectSignalFull(OAIHttpRequestWorker *worker, OAIGetTaskCountsForProject_200_response summary);
    void projectSaveAsTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetJob_200_response summary);
    void removeCustomFieldSettingForProjectSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void removeFollowersForProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void removeMembersForProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);
    void updateProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateProject_201_response summary);

    Q_DECL_DEPRECATED_X("Use addCustomFieldSettingForProjectSignalError() instead")
    void addCustomFieldSettingForProjectSignalE(OAIAddCustomFieldSettingForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCustomFieldSettingForProjectSignalError(OAIAddCustomFieldSettingForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFollowersForProjectSignalError() instead")
    void addFollowersForProjectSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFollowersForProjectSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addMembersForProjectSignalError() instead")
    void addMembersForProjectSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addMembersForProjectSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalError() instead")
    void createProjectSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectForTeamSignalError() instead")
    void createProjectForTeamSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectForTeamSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectForWorkspaceSignalError() instead")
    void createProjectForWorkspaceSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectForWorkspaceSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateProjectSignalError() instead")
    void duplicateProjectSignalE(OAIGetJob_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateProjectSignalError(OAIGetJob_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalError() instead")
    void getProjectSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalError() instead")
    void getProjectsSignalE(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalError(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForTaskSignalError() instead")
    void getProjectsForTaskSignalE(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForTaskSignalError(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForTeamSignalError() instead")
    void getProjectsForTeamSignalE(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForTeamSignalError(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForWorkspaceSignalError() instead")
    void getProjectsForWorkspaceSignalE(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForWorkspaceSignalError(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskCountsForProjectSignalError() instead")
    void getTaskCountsForProjectSignalE(OAIGetTaskCountsForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskCountsForProjectSignalError(OAIGetTaskCountsForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectSaveAsTemplateSignalError() instead")
    void projectSaveAsTemplateSignalE(OAIGetJob_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectSaveAsTemplateSignalError(OAIGetJob_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomFieldSettingForProjectSignalError() instead")
    void removeCustomFieldSettingForProjectSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomFieldSettingForProjectSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFollowersForProjectSignalError() instead")
    void removeFollowersForProjectSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFollowersForProjectSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMembersForProjectSignalError() instead")
    void removeMembersForProjectSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMembersForProjectSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalError() instead")
    void updateProjectSignalE(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalError(OAICreateProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addCustomFieldSettingForProjectSignalErrorFull() instead")
    void addCustomFieldSettingForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCustomFieldSettingForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFollowersForProjectSignalErrorFull() instead")
    void addFollowersForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFollowersForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addMembersForProjectSignalErrorFull() instead")
    void addMembersForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addMembersForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectSignalErrorFull() instead")
    void createProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectForTeamSignalErrorFull() instead")
    void createProjectForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectForWorkspaceSignalErrorFull() instead")
    void createProjectForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateProjectSignalErrorFull() instead")
    void duplicateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalErrorFull() instead")
    void getProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalErrorFull() instead")
    void getProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForTaskSignalErrorFull() instead")
    void getProjectsForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForTeamSignalErrorFull() instead")
    void getProjectsForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsForWorkspaceSignalErrorFull() instead")
    void getProjectsForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskCountsForProjectSignalErrorFull() instead")
    void getTaskCountsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskCountsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectSaveAsTemplateSignalErrorFull() instead")
    void projectSaveAsTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectSaveAsTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomFieldSettingForProjectSignalErrorFull() instead")
    void removeCustomFieldSettingForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomFieldSettingForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFollowersForProjectSignalErrorFull() instead")
    void removeFollowersForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFollowersForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMembersForProjectSignalErrorFull() instead")
    void removeMembersForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMembersForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProjectSignalErrorFull() instead")
    void updateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
