/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentResponse::OAIAttachmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentResponse::OAIAttachmentResponse() {
    this->initializeModel();
}

OAIAttachmentResponse::~OAIAttachmentResponse() {}

void OAIAttachmentResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_subtype_isSet = false;
    m_resource_subtype_isValid = false;

    m_connected_to_app_isSet = false;
    m_connected_to_app_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_permanent_url_isSet = false;
    m_permanent_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_view_url_isSet = false;
    m_view_url_isValid = false;
}

void OAIAttachmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_resource_subtype, json[QString("resource_subtype")]);
    m_resource_subtype_isSet = !json[QString("resource_subtype")].isNull() && m_resource_subtype_isValid;

    m_connected_to_app_isValid = ::OpenAPI::fromJsonValue(m_connected_to_app, json[QString("connected_to_app")]);
    m_connected_to_app_isSet = !json[QString("connected_to_app")].isNull() && m_connected_to_app_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_permanent_url_isValid = ::OpenAPI::fromJsonValue(m_permanent_url, json[QString("permanent_url")]);
    m_permanent_url_isSet = !json[QString("permanent_url")].isNull() && m_permanent_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_view_url_isValid = ::OpenAPI::fromJsonValue(m_view_url, json[QString("view_url")]);
    m_view_url_isSet = !json[QString("view_url")].isNull() && m_view_url_isValid;
}

QString OAIAttachmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_subtype_isSet) {
        obj.insert(QString("resource_subtype"), ::OpenAPI::toJsonValue(m_resource_subtype));
    }
    if (m_connected_to_app_isSet) {
        obj.insert(QString("connected_to_app"), ::OpenAPI::toJsonValue(m_connected_to_app));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_permanent_url_isSet) {
        obj.insert(QString("permanent_url"), ::OpenAPI::toJsonValue(m_permanent_url));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_view_url_isSet) {
        obj.insert(QString("view_url"), ::OpenAPI::toJsonValue(m_view_url));
    }
    return obj;
}

QString OAIAttachmentResponse::getGid() const {
    return m_gid;
}
void OAIAttachmentResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIAttachmentResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIAttachmentResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIAttachmentResponse::getResourceType() const {
    return m_resource_type;
}
void OAIAttachmentResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIAttachmentResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIAttachmentResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIAttachmentResponse::getName() const {
    return m_name;
}
void OAIAttachmentResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttachmentResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttachmentResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAttachmentResponse::getResourceSubtype() const {
    return m_resource_subtype;
}
void OAIAttachmentResponse::setResourceSubtype(const QString &resource_subtype) {
    m_resource_subtype = resource_subtype;
    m_resource_subtype_isSet = true;
}

bool OAIAttachmentResponse::is_resource_subtype_Set() const{
    return m_resource_subtype_isSet;
}

bool OAIAttachmentResponse::is_resource_subtype_Valid() const{
    return m_resource_subtype_isValid;
}

bool OAIAttachmentResponse::isConnectedToApp() const {
    return m_connected_to_app;
}
void OAIAttachmentResponse::setConnectedToApp(const bool &connected_to_app) {
    m_connected_to_app = connected_to_app;
    m_connected_to_app_isSet = true;
}

bool OAIAttachmentResponse::is_connected_to_app_Set() const{
    return m_connected_to_app_isSet;
}

bool OAIAttachmentResponse::is_connected_to_app_Valid() const{
    return m_connected_to_app_isValid;
}

QDateTime OAIAttachmentResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIAttachmentResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAttachmentResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAttachmentResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAttachmentResponse::getDownloadUrl() const {
    return m_download_url;
}
void OAIAttachmentResponse::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIAttachmentResponse::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIAttachmentResponse::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIAttachmentResponse::getHost() const {
    return m_host;
}
void OAIAttachmentResponse::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIAttachmentResponse::is_host_Set() const{
    return m_host_isSet;
}

bool OAIAttachmentResponse::is_host_Valid() const{
    return m_host_isValid;
}

OAIAttachmentResponse_allOf_parent OAIAttachmentResponse::getParent() const {
    return m_parent;
}
void OAIAttachmentResponse::setParent(const OAIAttachmentResponse_allOf_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAttachmentResponse::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAttachmentResponse::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIAttachmentResponse::getPermanentUrl() const {
    return m_permanent_url;
}
void OAIAttachmentResponse::setPermanentUrl(const QString &permanent_url) {
    m_permanent_url = permanent_url;
    m_permanent_url_isSet = true;
}

bool OAIAttachmentResponse::is_permanent_url_Set() const{
    return m_permanent_url_isSet;
}

bool OAIAttachmentResponse::is_permanent_url_Valid() const{
    return m_permanent_url_isValid;
}

qint32 OAIAttachmentResponse::getSize() const {
    return m_size;
}
void OAIAttachmentResponse::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAttachmentResponse::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAttachmentResponse::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAttachmentResponse::getViewUrl() const {
    return m_view_url;
}
void OAIAttachmentResponse::setViewUrl(const QString &view_url) {
    m_view_url = view_url;
    m_view_url_isSet = true;
}

bool OAIAttachmentResponse::is_view_url_Set() const{
    return m_view_url_isSet;
}

bool OAIAttachmentResponse::is_view_url_Valid() const{
    return m_view_url_isValid;
}

bool OAIAttachmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_to_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permanent_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
