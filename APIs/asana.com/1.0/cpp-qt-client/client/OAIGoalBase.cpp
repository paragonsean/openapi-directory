/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalBase::OAIGoalBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalBase::OAIGoalBase() {
    this->initializeModel();
}

OAIGoalBase::~OAIGoalBase() {}

void OAIGoalBase::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_html_notes_isSet = false;
    m_html_notes_isValid = false;

    m_is_workspace_level_isSet = false;
    m_is_workspace_level_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_start_on_isSet = false;
    m_start_on_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoalBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalBase::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_html_notes_isValid = ::OpenAPI::fromJsonValue(m_html_notes, json[QString("html_notes")]);
    m_html_notes_isSet = !json[QString("html_notes")].isNull() && m_html_notes_isValid;

    m_is_workspace_level_isValid = ::OpenAPI::fromJsonValue(m_is_workspace_level, json[QString("is_workspace_level")]);
    m_is_workspace_level_isSet = !json[QString("is_workspace_level")].isNull() && m_is_workspace_level_isValid;

    m_liked_isValid = ::OpenAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_start_on_isValid = ::OpenAPI::fromJsonValue(m_start_on, json[QString("start_on")]);
    m_start_on_isSet = !json[QString("start_on")].isNull() && m_start_on_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoalBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalBase::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_html_notes_isSet) {
        obj.insert(QString("html_notes"), ::OpenAPI::toJsonValue(m_html_notes));
    }
    if (m_is_workspace_level_isSet) {
        obj.insert(QString("is_workspace_level"), ::OpenAPI::toJsonValue(m_is_workspace_level));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::OpenAPI::toJsonValue(m_liked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_start_on_isSet) {
        obj.insert(QString("start_on"), ::OpenAPI::toJsonValue(m_start_on));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGoalBase::getGid() const {
    return m_gid;
}
void OAIGoalBase::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIGoalBase::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIGoalBase::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIGoalBase::getResourceType() const {
    return m_resource_type;
}
void OAIGoalBase::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIGoalBase::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIGoalBase::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIGoalBase::getDueOn() const {
    return m_due_on;
}
void OAIGoalBase::setDueOn(const QString &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAIGoalBase::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAIGoalBase::is_due_on_Valid() const{
    return m_due_on_isValid;
}

QString OAIGoalBase::getHtmlNotes() const {
    return m_html_notes;
}
void OAIGoalBase::setHtmlNotes(const QString &html_notes) {
    m_html_notes = html_notes;
    m_html_notes_isSet = true;
}

bool OAIGoalBase::is_html_notes_Set() const{
    return m_html_notes_isSet;
}

bool OAIGoalBase::is_html_notes_Valid() const{
    return m_html_notes_isValid;
}

bool OAIGoalBase::isIsWorkspaceLevel() const {
    return m_is_workspace_level;
}
void OAIGoalBase::setIsWorkspaceLevel(const bool &is_workspace_level) {
    m_is_workspace_level = is_workspace_level;
    m_is_workspace_level_isSet = true;
}

bool OAIGoalBase::is_is_workspace_level_Set() const{
    return m_is_workspace_level_isSet;
}

bool OAIGoalBase::is_is_workspace_level_Valid() const{
    return m_is_workspace_level_isValid;
}

bool OAIGoalBase::isLiked() const {
    return m_liked;
}
void OAIGoalBase::setLiked(const bool &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool OAIGoalBase::is_liked_Set() const{
    return m_liked_isSet;
}

bool OAIGoalBase::is_liked_Valid() const{
    return m_liked_isValid;
}

QString OAIGoalBase::getName() const {
    return m_name;
}
void OAIGoalBase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoalBase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoalBase::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoalBase::getNotes() const {
    return m_notes;
}
void OAIGoalBase::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGoalBase::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGoalBase::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIGoalBase::getStartOn() const {
    return m_start_on;
}
void OAIGoalBase::setStartOn(const QString &start_on) {
    m_start_on = start_on;
    m_start_on_isSet = true;
}

bool OAIGoalBase::is_start_on_Set() const{
    return m_start_on_isSet;
}

bool OAIGoalBase::is_start_on_Valid() const{
    return m_start_on_isValid;
}

QString OAIGoalBase::getStatus() const {
    return m_status;
}
void OAIGoalBase::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoalBase::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoalBase::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoalBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_workspace_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
