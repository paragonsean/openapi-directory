/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoalResponse.h
 *
 * 
 */

#ifndef OAIGoalResponse_H
#define OAIGoalResponse_H

#include <QJsonObject>

#include "OAIGoalResponse_allOf_metric.h"
#include "OAIGoalResponse_allOf_owner.h"
#include "OAIGoalResponse_allOf_team.h"
#include "OAIGoalResponse_allOf_time_period.h"
#include "OAIGoalResponse_allOf_workspace.h"
#include "OAILike.h"
#include "OAIStatusUpdateCompact.h"
#include "OAIUserCompact.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatusUpdateCompact;
class OAIUserCompact;
class OAILike;
class OAIGoalResponse_allOf_metric;
class OAIGoalResponse_allOf_owner;
class OAIGoalResponse_allOf_team;
class OAIGoalResponse_allOf_time_period;
class OAIGoalResponse_allOf_workspace;

class OAIGoalResponse : public OAIObject {
public:
    OAIGoalResponse();
    OAIGoalResponse(QString json);
    ~OAIGoalResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGid() const;
    void setGid(const QString &gid);
    bool is_gid_Set() const;
    bool is_gid_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getDueOn() const;
    void setDueOn(const QString &due_on);
    bool is_due_on_Set() const;
    bool is_due_on_Valid() const;

    QString getHtmlNotes() const;
    void setHtmlNotes(const QString &html_notes);
    bool is_html_notes_Set() const;
    bool is_html_notes_Valid() const;

    bool isIsWorkspaceLevel() const;
    void setIsWorkspaceLevel(const bool &is_workspace_level);
    bool is_is_workspace_level_Set() const;
    bool is_is_workspace_level_Valid() const;

    bool isLiked() const;
    void setLiked(const bool &liked);
    bool is_liked_Set() const;
    bool is_liked_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getStartOn() const;
    void setStartOn(const QString &start_on);
    bool is_start_on_Set() const;
    bool is_start_on_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIStatusUpdateCompact getCurrentStatusUpdate() const;
    void setCurrentStatusUpdate(const OAIStatusUpdateCompact &current_status_update);
    bool is_current_status_update_Set() const;
    bool is_current_status_update_Valid() const;

    QList<OAIUserCompact> getFollowers() const;
    void setFollowers(const QList<OAIUserCompact> &followers);
    bool is_followers_Set() const;
    bool is_followers_Valid() const;

    QList<OAILike> getLikes() const;
    void setLikes(const QList<OAILike> &likes);
    bool is_likes_Set() const;
    bool is_likes_Valid() const;

    OAIGoalResponse_allOf_metric getMetric() const;
    void setMetric(const OAIGoalResponse_allOf_metric &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    qint32 getNumLikes() const;
    void setNumLikes(const qint32 &num_likes);
    bool is_num_likes_Set() const;
    bool is_num_likes_Valid() const;

    OAIGoalResponse_allOf_owner getOwner() const;
    void setOwner(const OAIGoalResponse_allOf_owner &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    OAIGoalResponse_allOf_team getTeam() const;
    void setTeam(const OAIGoalResponse_allOf_team &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    OAIGoalResponse_allOf_time_period getTimePeriod() const;
    void setTimePeriod(const OAIGoalResponse_allOf_time_period &time_period);
    bool is_time_period_Set() const;
    bool is_time_period_Valid() const;

    OAIGoalResponse_allOf_workspace getWorkspace() const;
    void setWorkspace(const OAIGoalResponse_allOf_workspace &workspace);
    bool is_workspace_Set() const;
    bool is_workspace_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_gid;
    bool m_gid_isSet;
    bool m_gid_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_due_on;
    bool m_due_on_isSet;
    bool m_due_on_isValid;

    QString m_html_notes;
    bool m_html_notes_isSet;
    bool m_html_notes_isValid;

    bool m_is_workspace_level;
    bool m_is_workspace_level_isSet;
    bool m_is_workspace_level_isValid;

    bool m_liked;
    bool m_liked_isSet;
    bool m_liked_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_start_on;
    bool m_start_on_isSet;
    bool m_start_on_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIStatusUpdateCompact m_current_status_update;
    bool m_current_status_update_isSet;
    bool m_current_status_update_isValid;

    QList<OAIUserCompact> m_followers;
    bool m_followers_isSet;
    bool m_followers_isValid;

    QList<OAILike> m_likes;
    bool m_likes_isSet;
    bool m_likes_isValid;

    OAIGoalResponse_allOf_metric m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    qint32 m_num_likes;
    bool m_num_likes_isSet;
    bool m_num_likes_isValid;

    OAIGoalResponse_allOf_owner m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    OAIGoalResponse_allOf_team m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    OAIGoalResponse_allOf_time_period m_time_period;
    bool m_time_period_isSet;
    bool m_time_period_isValid;

    OAIGoalResponse_allOf_workspace m_workspace;
    bool m_workspace_isSet;
    bool m_workspace_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoalResponse)

#endif // OAIGoalResponse_H
