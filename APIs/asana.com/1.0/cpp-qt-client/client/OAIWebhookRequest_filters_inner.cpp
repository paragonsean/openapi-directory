/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookRequest_filters_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookRequest_filters_inner::OAIWebhookRequest_filters_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookRequest_filters_inner::OAIWebhookRequest_filters_inner() {
    this->initializeModel();
}

OAIWebhookRequest_filters_inner::~OAIWebhookRequest_filters_inner() {}

void OAIWebhookRequest_filters_inner::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_resource_subtype_isSet = false;
    m_resource_subtype_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIWebhookRequest_filters_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookRequest_filters_inner::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_resource_subtype, json[QString("resource_subtype")]);
    m_resource_subtype_isSet = !json[QString("resource_subtype")].isNull() && m_resource_subtype_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;
}

QString OAIWebhookRequest_filters_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookRequest_filters_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_resource_subtype_isSet) {
        obj.insert(QString("resource_subtype"), ::OpenAPI::toJsonValue(m_resource_subtype));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QString OAIWebhookRequest_filters_inner::getAction() const {
    return m_action;
}
void OAIWebhookRequest_filters_inner::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIWebhookRequest_filters_inner::is_action_Set() const{
    return m_action_isSet;
}

bool OAIWebhookRequest_filters_inner::is_action_Valid() const{
    return m_action_isValid;
}

QList<QString> OAIWebhookRequest_filters_inner::getFields() const {
    return m_fields;
}
void OAIWebhookRequest_filters_inner::setFields(const QList<QString> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIWebhookRequest_filters_inner::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIWebhookRequest_filters_inner::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIWebhookRequest_filters_inner::getResourceSubtype() const {
    return m_resource_subtype;
}
void OAIWebhookRequest_filters_inner::setResourceSubtype(const QString &resource_subtype) {
    m_resource_subtype = resource_subtype;
    m_resource_subtype_isSet = true;
}

bool OAIWebhookRequest_filters_inner::is_resource_subtype_Set() const{
    return m_resource_subtype_isSet;
}

bool OAIWebhookRequest_filters_inner::is_resource_subtype_Valid() const{
    return m_resource_subtype_isValid;
}

QString OAIWebhookRequest_filters_inner::getResourceType() const {
    return m_resource_type;
}
void OAIWebhookRequest_filters_inner::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIWebhookRequest_filters_inner::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIWebhookRequest_filters_inner::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIWebhookRequest_filters_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookRequest_filters_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
