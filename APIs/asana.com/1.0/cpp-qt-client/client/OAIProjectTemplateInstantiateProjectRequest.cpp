/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTemplateInstantiateProjectRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTemplateInstantiateProjectRequest::OAIProjectTemplateInstantiateProjectRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTemplateInstantiateProjectRequest::OAIProjectTemplateInstantiateProjectRequest() {
    this->initializeModel();
}

OAIProjectTemplateInstantiateProjectRequest::~OAIProjectTemplateInstantiateProjectRequest() {}

void OAIProjectTemplateInstantiateProjectRequest::initializeModel() {

    m_is_strict_isSet = false;
    m_is_strict_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_requested_dates_isSet = false;
    m_requested_dates_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;
}

void OAIProjectTemplateInstantiateProjectRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTemplateInstantiateProjectRequest::fromJsonObject(QJsonObject json) {

    m_is_strict_isValid = ::OpenAPI::fromJsonValue(m_is_strict, json[QString("is_strict")]);
    m_is_strict_isSet = !json[QString("is_strict")].isNull() && m_is_strict_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_requested_dates_isValid = ::OpenAPI::fromJsonValue(m_requested_dates, json[QString("requested_dates")]);
    m_requested_dates_isSet = !json[QString("requested_dates")].isNull() && m_requested_dates_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;
}

QString OAIProjectTemplateInstantiateProjectRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTemplateInstantiateProjectRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_is_strict_isSet) {
        obj.insert(QString("is_strict"), ::OpenAPI::toJsonValue(m_is_strict));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_requested_dates.size() > 0) {
        obj.insert(QString("requested_dates"), ::OpenAPI::toJsonValue(m_requested_dates));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_workspace_isSet) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    return obj;
}

bool OAIProjectTemplateInstantiateProjectRequest::isIsStrict() const {
    return m_is_strict;
}
void OAIProjectTemplateInstantiateProjectRequest::setIsStrict(const bool &is_strict) {
    m_is_strict = is_strict;
    m_is_strict_isSet = true;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_is_strict_Set() const{
    return m_is_strict_isSet;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_is_strict_Valid() const{
    return m_is_strict_isValid;
}

QString OAIProjectTemplateInstantiateProjectRequest::getName() const {
    return m_name;
}
void OAIProjectTemplateInstantiateProjectRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProjectTemplateInstantiateProjectRequest::isRPublic() const {
    return m_r_public;
}
void OAIProjectTemplateInstantiateProjectRequest::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QList<OAIDateVariableRequest> OAIProjectTemplateInstantiateProjectRequest::getRequestedDates() const {
    return m_requested_dates;
}
void OAIProjectTemplateInstantiateProjectRequest::setRequestedDates(const QList<OAIDateVariableRequest> &requested_dates) {
    m_requested_dates = requested_dates;
    m_requested_dates_isSet = true;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_requested_dates_Set() const{
    return m_requested_dates_isSet;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_requested_dates_Valid() const{
    return m_requested_dates_isValid;
}

QString OAIProjectTemplateInstantiateProjectRequest::getTeam() const {
    return m_team;
}
void OAIProjectTemplateInstantiateProjectRequest::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_team_Set() const{
    return m_team_isSet;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIProjectTemplateInstantiateProjectRequest::getWorkspace() const {
    return m_workspace;
}
void OAIProjectTemplateInstantiateProjectRequest::setWorkspace(const QString &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAIProjectTemplateInstantiateProjectRequest::is_workspace_Valid() const{
    return m_workspace_isValid;
}

bool OAIProjectTemplateInstantiateProjectRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_strict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_dates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTemplateInstantiateProjectRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_r_public_isValid && true;
}

} // namespace OpenAPI
