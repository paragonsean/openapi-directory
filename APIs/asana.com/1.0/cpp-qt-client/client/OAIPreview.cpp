/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreview::OAIPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreview::OAIPreview() {
    this->initializeModel();
}

OAIPreview::~OAIPreview() {}

void OAIPreview::initializeModel() {

    m_fallback_isSet = false;
    m_fallback_isValid = false;

    m_footer_isSet = false;
    m_footer_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_header_link_isSet = false;
    m_header_link_isValid = false;

    m_html_text_isSet = false;
    m_html_text_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_link_isSet = false;
    m_title_link_isValid = false;
}

void OAIPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreview::fromJsonObject(QJsonObject json) {

    m_fallback_isValid = ::OpenAPI::fromJsonValue(m_fallback, json[QString("fallback")]);
    m_fallback_isSet = !json[QString("fallback")].isNull() && m_fallback_isValid;

    m_footer_isValid = ::OpenAPI::fromJsonValue(m_footer, json[QString("footer")]);
    m_footer_isSet = !json[QString("footer")].isNull() && m_footer_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_header_link_isValid = ::OpenAPI::fromJsonValue(m_header_link, json[QString("header_link")]);
    m_header_link_isSet = !json[QString("header_link")].isNull() && m_header_link_isValid;

    m_html_text_isValid = ::OpenAPI::fromJsonValue(m_html_text, json[QString("html_text")]);
    m_html_text_isSet = !json[QString("html_text")].isNull() && m_html_text_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_link_isValid = ::OpenAPI::fromJsonValue(m_title_link, json[QString("title_link")]);
    m_title_link_isSet = !json[QString("title_link")].isNull() && m_title_link_isValid;
}

QString OAIPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_fallback_isSet) {
        obj.insert(QString("fallback"), ::OpenAPI::toJsonValue(m_fallback));
    }
    if (m_footer_isSet) {
        obj.insert(QString("footer"), ::OpenAPI::toJsonValue(m_footer));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_header_link_isSet) {
        obj.insert(QString("header_link"), ::OpenAPI::toJsonValue(m_header_link));
    }
    if (m_html_text_isSet) {
        obj.insert(QString("html_text"), ::OpenAPI::toJsonValue(m_html_text));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_link_isSet) {
        obj.insert(QString("title_link"), ::OpenAPI::toJsonValue(m_title_link));
    }
    return obj;
}

QString OAIPreview::getFallback() const {
    return m_fallback;
}
void OAIPreview::setFallback(const QString &fallback) {
    m_fallback = fallback;
    m_fallback_isSet = true;
}

bool OAIPreview::is_fallback_Set() const{
    return m_fallback_isSet;
}

bool OAIPreview::is_fallback_Valid() const{
    return m_fallback_isValid;
}

QString OAIPreview::getFooter() const {
    return m_footer;
}
void OAIPreview::setFooter(const QString &footer) {
    m_footer = footer;
    m_footer_isSet = true;
}

bool OAIPreview::is_footer_Set() const{
    return m_footer_isSet;
}

bool OAIPreview::is_footer_Valid() const{
    return m_footer_isValid;
}

QString OAIPreview::getHeader() const {
    return m_header;
}
void OAIPreview::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIPreview::is_header_Set() const{
    return m_header_isSet;
}

bool OAIPreview::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIPreview::getHeaderLink() const {
    return m_header_link;
}
void OAIPreview::setHeaderLink(const QString &header_link) {
    m_header_link = header_link;
    m_header_link_isSet = true;
}

bool OAIPreview::is_header_link_Set() const{
    return m_header_link_isSet;
}

bool OAIPreview::is_header_link_Valid() const{
    return m_header_link_isValid;
}

QString OAIPreview::getHtmlText() const {
    return m_html_text;
}
void OAIPreview::setHtmlText(const QString &html_text) {
    m_html_text = html_text;
    m_html_text_isSet = true;
}

bool OAIPreview::is_html_text_Set() const{
    return m_html_text_isSet;
}

bool OAIPreview::is_html_text_Valid() const{
    return m_html_text_isValid;
}

QString OAIPreview::getText() const {
    return m_text;
}
void OAIPreview::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPreview::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPreview::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPreview::getTitle() const {
    return m_title;
}
void OAIPreview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPreview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPreview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPreview::getTitleLink() const {
    return m_title_link;
}
void OAIPreview::setTitleLink(const QString &title_link) {
    m_title_link = title_link;
    m_title_link_isSet = true;
}

bool OAIPreview::is_title_link_Set() const{
    return m_title_link_isSet;
}

bool OAIPreview::is_title_link_Valid() const{
    return m_title_link_isValid;
}

bool OAIPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
