/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGoalRelationshipsApi_H
#define OAI_OAIGoalRelationshipsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddSupportingRelationship_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIErrorResponse.h"
#include "OAIGetGoalRelationship_200_response.h"
#include "OAIGetGoalRelationships_200_response.h"
#include "OAIRemoveSupportingRelationship_request.h"
#include "OAIUpdateGoalRelationship_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGoalRelationshipsApi : public QObject {
    Q_OBJECT

public:
    OAIGoalRelationshipsApi(const int timeOut = 0);
    ~OAIGoalRelationshipsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  oai_add_supporting_relationship_request OAIAddSupportingRelationship_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addSupportingRelationship(const QString &goal_gid, const OAIAddSupportingRelationship_request &oai_add_supporting_relationship_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_relationship_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getGoalRelationship(const QString &goal_relationship_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  supported_goal QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  resource_subtype QString [optional]
    */
    virtual void getGoalRelationships(const QString &supported_goal, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &resource_subtype = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  goal_gid QString [required]
    * @param[in]  oai_remove_supporting_relationship_request OAIRemoveSupportingRelationship_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeSupportingRelationship(const QString &goal_gid, const OAIRemoveSupportingRelationship_request &oai_remove_supporting_relationship_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  goal_relationship_gid QString [required]
    * @param[in]  oai_update_goal_relationship_request OAIUpdateGoalRelationship_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updateGoalRelationship(const QString &goal_relationship_gid, const OAIUpdateGoalRelationship_request &oai_update_goal_relationship_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSupportingRelationshipCallback(OAIHttpRequestWorker *worker);
    void getGoalRelationshipCallback(OAIHttpRequestWorker *worker);
    void getGoalRelationshipsCallback(OAIHttpRequestWorker *worker);
    void removeSupportingRelationshipCallback(OAIHttpRequestWorker *worker);
    void updateGoalRelationshipCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSupportingRelationshipSignal(OAIGetGoalRelationship_200_response summary);
    void getGoalRelationshipSignal(OAIGetGoalRelationship_200_response summary);
    void getGoalRelationshipsSignal(OAIGetGoalRelationships_200_response summary);
    void removeSupportingRelationshipSignal(OAIDeleteAttachment_200_response summary);
    void updateGoalRelationshipSignal(OAIGetGoalRelationship_200_response summary);


    void addSupportingRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIGetGoalRelationship_200_response summary);
    void getGoalRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIGetGoalRelationship_200_response summary);
    void getGoalRelationshipsSignalFull(OAIHttpRequestWorker *worker, OAIGetGoalRelationships_200_response summary);
    void removeSupportingRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void updateGoalRelationshipSignalFull(OAIHttpRequestWorker *worker, OAIGetGoalRelationship_200_response summary);

    Q_DECL_DEPRECATED_X("Use addSupportingRelationshipSignalError() instead")
    void addSupportingRelationshipSignalE(OAIGetGoalRelationship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSupportingRelationshipSignalError(OAIGetGoalRelationship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalRelationshipSignalError() instead")
    void getGoalRelationshipSignalE(OAIGetGoalRelationship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalRelationshipSignalError(OAIGetGoalRelationship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalRelationshipsSignalError() instead")
    void getGoalRelationshipsSignalE(OAIGetGoalRelationships_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalRelationshipsSignalError(OAIGetGoalRelationships_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSupportingRelationshipSignalError() instead")
    void removeSupportingRelationshipSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeSupportingRelationshipSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoalRelationshipSignalError() instead")
    void updateGoalRelationshipSignalE(OAIGetGoalRelationship_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoalRelationshipSignalError(OAIGetGoalRelationship_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSupportingRelationshipSignalErrorFull() instead")
    void addSupportingRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSupportingRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalRelationshipSignalErrorFull() instead")
    void getGoalRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGoalRelationshipsSignalErrorFull() instead")
    void getGoalRelationshipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGoalRelationshipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSupportingRelationshipSignalErrorFull() instead")
    void removeSupportingRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeSupportingRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGoalRelationshipSignalErrorFull() instead")
    void updateGoalRelationshipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGoalRelationshipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
