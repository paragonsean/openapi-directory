/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserBaseResponse_allOf_photo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserBaseResponse_allOf_photo::OAIUserBaseResponse_allOf_photo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserBaseResponse_allOf_photo::OAIUserBaseResponse_allOf_photo() {
    this->initializeModel();
}

OAIUserBaseResponse_allOf_photo::~OAIUserBaseResponse_allOf_photo() {}

void OAIUserBaseResponse_allOf_photo::initializeModel() {

    m_image_1024x1024_isSet = false;
    m_image_1024x1024_isValid = false;

    m_image_128x128_isSet = false;
    m_image_128x128_isValid = false;

    m_image_21x21_isSet = false;
    m_image_21x21_isValid = false;

    m_image_27x27_isSet = false;
    m_image_27x27_isValid = false;

    m_image_36x36_isSet = false;
    m_image_36x36_isValid = false;

    m_image_60x60_isSet = false;
    m_image_60x60_isValid = false;
}

void OAIUserBaseResponse_allOf_photo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserBaseResponse_allOf_photo::fromJsonObject(QJsonObject json) {

    m_image_1024x1024_isValid = ::OpenAPI::fromJsonValue(m_image_1024x1024, json[QString("image_1024x1024")]);
    m_image_1024x1024_isSet = !json[QString("image_1024x1024")].isNull() && m_image_1024x1024_isValid;

    m_image_128x128_isValid = ::OpenAPI::fromJsonValue(m_image_128x128, json[QString("image_128x128")]);
    m_image_128x128_isSet = !json[QString("image_128x128")].isNull() && m_image_128x128_isValid;

    m_image_21x21_isValid = ::OpenAPI::fromJsonValue(m_image_21x21, json[QString("image_21x21")]);
    m_image_21x21_isSet = !json[QString("image_21x21")].isNull() && m_image_21x21_isValid;

    m_image_27x27_isValid = ::OpenAPI::fromJsonValue(m_image_27x27, json[QString("image_27x27")]);
    m_image_27x27_isSet = !json[QString("image_27x27")].isNull() && m_image_27x27_isValid;

    m_image_36x36_isValid = ::OpenAPI::fromJsonValue(m_image_36x36, json[QString("image_36x36")]);
    m_image_36x36_isSet = !json[QString("image_36x36")].isNull() && m_image_36x36_isValid;

    m_image_60x60_isValid = ::OpenAPI::fromJsonValue(m_image_60x60, json[QString("image_60x60")]);
    m_image_60x60_isSet = !json[QString("image_60x60")].isNull() && m_image_60x60_isValid;
}

QString OAIUserBaseResponse_allOf_photo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserBaseResponse_allOf_photo::asJsonObject() const {
    QJsonObject obj;
    if (m_image_1024x1024_isSet) {
        obj.insert(QString("image_1024x1024"), ::OpenAPI::toJsonValue(m_image_1024x1024));
    }
    if (m_image_128x128_isSet) {
        obj.insert(QString("image_128x128"), ::OpenAPI::toJsonValue(m_image_128x128));
    }
    if (m_image_21x21_isSet) {
        obj.insert(QString("image_21x21"), ::OpenAPI::toJsonValue(m_image_21x21));
    }
    if (m_image_27x27_isSet) {
        obj.insert(QString("image_27x27"), ::OpenAPI::toJsonValue(m_image_27x27));
    }
    if (m_image_36x36_isSet) {
        obj.insert(QString("image_36x36"), ::OpenAPI::toJsonValue(m_image_36x36));
    }
    if (m_image_60x60_isSet) {
        obj.insert(QString("image_60x60"), ::OpenAPI::toJsonValue(m_image_60x60));
    }
    return obj;
}

QString OAIUserBaseResponse_allOf_photo::getImage1024x1024() const {
    return m_image_1024x1024;
}
void OAIUserBaseResponse_allOf_photo::setImage1024x1024(const QString &image_1024x1024) {
    m_image_1024x1024 = image_1024x1024;
    m_image_1024x1024_isSet = true;
}

bool OAIUserBaseResponse_allOf_photo::is_image_1024x1024_Set() const{
    return m_image_1024x1024_isSet;
}

bool OAIUserBaseResponse_allOf_photo::is_image_1024x1024_Valid() const{
    return m_image_1024x1024_isValid;
}

QString OAIUserBaseResponse_allOf_photo::getImage128x128() const {
    return m_image_128x128;
}
void OAIUserBaseResponse_allOf_photo::setImage128x128(const QString &image_128x128) {
    m_image_128x128 = image_128x128;
    m_image_128x128_isSet = true;
}

bool OAIUserBaseResponse_allOf_photo::is_image_128x128_Set() const{
    return m_image_128x128_isSet;
}

bool OAIUserBaseResponse_allOf_photo::is_image_128x128_Valid() const{
    return m_image_128x128_isValid;
}

QString OAIUserBaseResponse_allOf_photo::getImage21x21() const {
    return m_image_21x21;
}
void OAIUserBaseResponse_allOf_photo::setImage21x21(const QString &image_21x21) {
    m_image_21x21 = image_21x21;
    m_image_21x21_isSet = true;
}

bool OAIUserBaseResponse_allOf_photo::is_image_21x21_Set() const{
    return m_image_21x21_isSet;
}

bool OAIUserBaseResponse_allOf_photo::is_image_21x21_Valid() const{
    return m_image_21x21_isValid;
}

QString OAIUserBaseResponse_allOf_photo::getImage27x27() const {
    return m_image_27x27;
}
void OAIUserBaseResponse_allOf_photo::setImage27x27(const QString &image_27x27) {
    m_image_27x27 = image_27x27;
    m_image_27x27_isSet = true;
}

bool OAIUserBaseResponse_allOf_photo::is_image_27x27_Set() const{
    return m_image_27x27_isSet;
}

bool OAIUserBaseResponse_allOf_photo::is_image_27x27_Valid() const{
    return m_image_27x27_isValid;
}

QString OAIUserBaseResponse_allOf_photo::getImage36x36() const {
    return m_image_36x36;
}
void OAIUserBaseResponse_allOf_photo::setImage36x36(const QString &image_36x36) {
    m_image_36x36 = image_36x36;
    m_image_36x36_isSet = true;
}

bool OAIUserBaseResponse_allOf_photo::is_image_36x36_Set() const{
    return m_image_36x36_isSet;
}

bool OAIUserBaseResponse_allOf_photo::is_image_36x36_Valid() const{
    return m_image_36x36_isValid;
}

QString OAIUserBaseResponse_allOf_photo::getImage60x60() const {
    return m_image_60x60;
}
void OAIUserBaseResponse_allOf_photo::setImage60x60(const QString &image_60x60) {
    m_image_60x60 = image_60x60;
    m_image_60x60_isSet = true;
}

bool OAIUserBaseResponse_allOf_photo::is_image_60x60_Set() const{
    return m_image_60x60_isSet;
}

bool OAIUserBaseResponse_allOf_photo::is_image_60x60_Valid() const{
    return m_image_60x60_isValid;
}

bool OAIUserBaseResponse_allOf_photo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_1024x1024_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_128x128_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_21x21_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_27x27_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_36x36_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_60x60_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserBaseResponse_allOf_photo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
