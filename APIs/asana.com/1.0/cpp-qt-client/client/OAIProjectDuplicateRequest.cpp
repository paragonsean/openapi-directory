/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDuplicateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDuplicateRequest::OAIProjectDuplicateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDuplicateRequest::OAIProjectDuplicateRequest() {
    this->initializeModel();
}

OAIProjectDuplicateRequest::~OAIProjectDuplicateRequest() {}

void OAIProjectDuplicateRequest::initializeModel() {

    m_include_isSet = false;
    m_include_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schedule_dates_isSet = false;
    m_schedule_dates_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIProjectDuplicateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDuplicateRequest::fromJsonObject(QJsonObject json) {

    m_include_isValid = ::OpenAPI::fromJsonValue(m_include, json[QString("include")]);
    m_include_isSet = !json[QString("include")].isNull() && m_include_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schedule_dates_isValid = ::OpenAPI::fromJsonValue(m_schedule_dates, json[QString("schedule_dates")]);
    m_schedule_dates_isSet = !json[QString("schedule_dates")].isNull() && m_schedule_dates_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIProjectDuplicateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDuplicateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_include_isSet) {
        obj.insert(QString("include"), ::OpenAPI::toJsonValue(m_include));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schedule_dates.isSet()) {
        obj.insert(QString("schedule_dates"), ::OpenAPI::toJsonValue(m_schedule_dates));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QString OAIProjectDuplicateRequest::getInclude() const {
    return m_include;
}
void OAIProjectDuplicateRequest::setInclude(const QString &include) {
    m_include = include;
    m_include_isSet = true;
}

bool OAIProjectDuplicateRequest::is_include_Set() const{
    return m_include_isSet;
}

bool OAIProjectDuplicateRequest::is_include_Valid() const{
    return m_include_isValid;
}

QString OAIProjectDuplicateRequest::getName() const {
    return m_name;
}
void OAIProjectDuplicateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectDuplicateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectDuplicateRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIProjectDuplicateRequest_schedule_dates OAIProjectDuplicateRequest::getScheduleDates() const {
    return m_schedule_dates;
}
void OAIProjectDuplicateRequest::setScheduleDates(const OAIProjectDuplicateRequest_schedule_dates &schedule_dates) {
    m_schedule_dates = schedule_dates;
    m_schedule_dates_isSet = true;
}

bool OAIProjectDuplicateRequest::is_schedule_dates_Set() const{
    return m_schedule_dates_isSet;
}

bool OAIProjectDuplicateRequest::is_schedule_dates_Valid() const{
    return m_schedule_dates_isValid;
}

QString OAIProjectDuplicateRequest::getTeam() const {
    return m_team;
}
void OAIProjectDuplicateRequest::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIProjectDuplicateRequest::is_team_Set() const{
    return m_team_isSet;
}

bool OAIProjectDuplicateRequest::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIProjectDuplicateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDuplicateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
