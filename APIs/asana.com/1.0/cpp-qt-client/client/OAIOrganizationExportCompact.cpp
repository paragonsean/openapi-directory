/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationExportCompact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationExportCompact::OAIOrganizationExportCompact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationExportCompact::OAIOrganizationExportCompact() {
    this->initializeModel();
}

OAIOrganizationExportCompact::~OAIOrganizationExportCompact() {}

void OAIOrganizationExportCompact::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIOrganizationExportCompact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationExportCompact::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIOrganizationExportCompact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationExportCompact::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIOrganizationExportCompact::getGid() const {
    return m_gid;
}
void OAIOrganizationExportCompact::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIOrganizationExportCompact::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIOrganizationExportCompact::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIOrganizationExportCompact::getResourceType() const {
    return m_resource_type;
}
void OAIOrganizationExportCompact::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIOrganizationExportCompact::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIOrganizationExportCompact::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QDateTime OAIOrganizationExportCompact::getCreatedAt() const {
    return m_created_at;
}
void OAIOrganizationExportCompact::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrganizationExportCompact::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrganizationExportCompact::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOrganizationExportCompact::getDownloadUrl() const {
    return m_download_url;
}
void OAIOrganizationExportCompact::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIOrganizationExportCompact::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIOrganizationExportCompact::is_download_url_Valid() const{
    return m_download_url_isValid;
}

OAIWorkspaceCompact OAIOrganizationExportCompact::getOrganization() const {
    return m_organization;
}
void OAIOrganizationExportCompact::setOrganization(const OAIWorkspaceCompact &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIOrganizationExportCompact::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIOrganizationExportCompact::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIOrganizationExportCompact::getState() const {
    return m_state;
}
void OAIOrganizationExportCompact::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOrganizationExportCompact::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOrganizationExportCompact::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIOrganizationExportCompact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationExportCompact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
