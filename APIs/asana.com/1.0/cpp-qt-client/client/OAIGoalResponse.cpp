/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalResponse::OAIGoalResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalResponse::OAIGoalResponse() {
    this->initializeModel();
}

OAIGoalResponse::~OAIGoalResponse() {}

void OAIGoalResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_html_notes_isSet = false;
    m_html_notes_isValid = false;

    m_is_workspace_level_isSet = false;
    m_is_workspace_level_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_start_on_isSet = false;
    m_start_on_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_current_status_update_isSet = false;
    m_current_status_update_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_num_likes_isSet = false;
    m_num_likes_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;
}

void OAIGoalResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_html_notes_isValid = ::OpenAPI::fromJsonValue(m_html_notes, json[QString("html_notes")]);
    m_html_notes_isSet = !json[QString("html_notes")].isNull() && m_html_notes_isValid;

    m_is_workspace_level_isValid = ::OpenAPI::fromJsonValue(m_is_workspace_level, json[QString("is_workspace_level")]);
    m_is_workspace_level_isSet = !json[QString("is_workspace_level")].isNull() && m_is_workspace_level_isValid;

    m_liked_isValid = ::OpenAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_start_on_isValid = ::OpenAPI::fromJsonValue(m_start_on, json[QString("start_on")]);
    m_start_on_isSet = !json[QString("start_on")].isNull() && m_start_on_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_current_status_update_isValid = ::OpenAPI::fromJsonValue(m_current_status_update, json[QString("current_status_update")]);
    m_current_status_update_isSet = !json[QString("current_status_update")].isNull() && m_current_status_update_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_num_likes_isValid = ::OpenAPI::fromJsonValue(m_num_likes, json[QString("num_likes")]);
    m_num_likes_isSet = !json[QString("num_likes")].isNull() && m_num_likes_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("time_period")]);
    m_time_period_isSet = !json[QString("time_period")].isNull() && m_time_period_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;
}

QString OAIGoalResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_html_notes_isSet) {
        obj.insert(QString("html_notes"), ::OpenAPI::toJsonValue(m_html_notes));
    }
    if (m_is_workspace_level_isSet) {
        obj.insert(QString("is_workspace_level"), ::OpenAPI::toJsonValue(m_is_workspace_level));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::OpenAPI::toJsonValue(m_liked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_start_on_isSet) {
        obj.insert(QString("start_on"), ::OpenAPI::toJsonValue(m_start_on));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_current_status_update.isSet()) {
        obj.insert(QString("current_status_update"), ::OpenAPI::toJsonValue(m_current_status_update));
    }
    if (m_followers.size() > 0) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_likes.size() > 0) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_num_likes_isSet) {
        obj.insert(QString("num_likes"), ::OpenAPI::toJsonValue(m_num_likes));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("time_period"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_workspace.isSet()) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    return obj;
}

QString OAIGoalResponse::getGid() const {
    return m_gid;
}
void OAIGoalResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIGoalResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIGoalResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIGoalResponse::getResourceType() const {
    return m_resource_type;
}
void OAIGoalResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIGoalResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIGoalResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIGoalResponse::getDueOn() const {
    return m_due_on;
}
void OAIGoalResponse::setDueOn(const QString &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAIGoalResponse::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAIGoalResponse::is_due_on_Valid() const{
    return m_due_on_isValid;
}

QString OAIGoalResponse::getHtmlNotes() const {
    return m_html_notes;
}
void OAIGoalResponse::setHtmlNotes(const QString &html_notes) {
    m_html_notes = html_notes;
    m_html_notes_isSet = true;
}

bool OAIGoalResponse::is_html_notes_Set() const{
    return m_html_notes_isSet;
}

bool OAIGoalResponse::is_html_notes_Valid() const{
    return m_html_notes_isValid;
}

bool OAIGoalResponse::isIsWorkspaceLevel() const {
    return m_is_workspace_level;
}
void OAIGoalResponse::setIsWorkspaceLevel(const bool &is_workspace_level) {
    m_is_workspace_level = is_workspace_level;
    m_is_workspace_level_isSet = true;
}

bool OAIGoalResponse::is_is_workspace_level_Set() const{
    return m_is_workspace_level_isSet;
}

bool OAIGoalResponse::is_is_workspace_level_Valid() const{
    return m_is_workspace_level_isValid;
}

bool OAIGoalResponse::isLiked() const {
    return m_liked;
}
void OAIGoalResponse::setLiked(const bool &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool OAIGoalResponse::is_liked_Set() const{
    return m_liked_isSet;
}

bool OAIGoalResponse::is_liked_Valid() const{
    return m_liked_isValid;
}

QString OAIGoalResponse::getName() const {
    return m_name;
}
void OAIGoalResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoalResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoalResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoalResponse::getNotes() const {
    return m_notes;
}
void OAIGoalResponse::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGoalResponse::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGoalResponse::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIGoalResponse::getStartOn() const {
    return m_start_on;
}
void OAIGoalResponse::setStartOn(const QString &start_on) {
    m_start_on = start_on;
    m_start_on_isSet = true;
}

bool OAIGoalResponse::is_start_on_Set() const{
    return m_start_on_isSet;
}

bool OAIGoalResponse::is_start_on_Valid() const{
    return m_start_on_isValid;
}

QString OAIGoalResponse::getStatus() const {
    return m_status;
}
void OAIGoalResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoalResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoalResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIStatusUpdateCompact OAIGoalResponse::getCurrentStatusUpdate() const {
    return m_current_status_update;
}
void OAIGoalResponse::setCurrentStatusUpdate(const OAIStatusUpdateCompact &current_status_update) {
    m_current_status_update = current_status_update;
    m_current_status_update_isSet = true;
}

bool OAIGoalResponse::is_current_status_update_Set() const{
    return m_current_status_update_isSet;
}

bool OAIGoalResponse::is_current_status_update_Valid() const{
    return m_current_status_update_isValid;
}

QList<OAIUserCompact> OAIGoalResponse::getFollowers() const {
    return m_followers;
}
void OAIGoalResponse::setFollowers(const QList<OAIUserCompact> &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIGoalResponse::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIGoalResponse::is_followers_Valid() const{
    return m_followers_isValid;
}

QList<OAILike> OAIGoalResponse::getLikes() const {
    return m_likes;
}
void OAIGoalResponse::setLikes(const QList<OAILike> &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIGoalResponse::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIGoalResponse::is_likes_Valid() const{
    return m_likes_isValid;
}

OAIGoalResponse_allOf_metric OAIGoalResponse::getMetric() const {
    return m_metric;
}
void OAIGoalResponse::setMetric(const OAIGoalResponse_allOf_metric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIGoalResponse::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIGoalResponse::is_metric_Valid() const{
    return m_metric_isValid;
}

qint32 OAIGoalResponse::getNumLikes() const {
    return m_num_likes;
}
void OAIGoalResponse::setNumLikes(const qint32 &num_likes) {
    m_num_likes = num_likes;
    m_num_likes_isSet = true;
}

bool OAIGoalResponse::is_num_likes_Set() const{
    return m_num_likes_isSet;
}

bool OAIGoalResponse::is_num_likes_Valid() const{
    return m_num_likes_isValid;
}

OAIGoalResponse_allOf_owner OAIGoalResponse::getOwner() const {
    return m_owner;
}
void OAIGoalResponse::setOwner(const OAIGoalResponse_allOf_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGoalResponse::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGoalResponse::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIGoalResponse_allOf_team OAIGoalResponse::getTeam() const {
    return m_team;
}
void OAIGoalResponse::setTeam(const OAIGoalResponse_allOf_team &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIGoalResponse::is_team_Set() const{
    return m_team_isSet;
}

bool OAIGoalResponse::is_team_Valid() const{
    return m_team_isValid;
}

OAIGoalResponse_allOf_time_period OAIGoalResponse::getTimePeriod() const {
    return m_time_period;
}
void OAIGoalResponse::setTimePeriod(const OAIGoalResponse_allOf_time_period &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIGoalResponse::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIGoalResponse::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAIGoalResponse_allOf_workspace OAIGoalResponse::getWorkspace() const {
    return m_workspace;
}
void OAIGoalResponse::setWorkspace(const OAIGoalResponse_allOf_workspace &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAIGoalResponse::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAIGoalResponse::is_workspace_Valid() const{
    return m_workspace_isValid;
}

bool OAIGoalResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_workspace_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
