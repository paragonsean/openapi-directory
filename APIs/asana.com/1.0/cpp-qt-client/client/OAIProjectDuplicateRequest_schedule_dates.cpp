/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDuplicateRequest_schedule_dates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDuplicateRequest_schedule_dates::OAIProjectDuplicateRequest_schedule_dates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDuplicateRequest_schedule_dates::OAIProjectDuplicateRequest_schedule_dates() {
    this->initializeModel();
}

OAIProjectDuplicateRequest_schedule_dates::~OAIProjectDuplicateRequest_schedule_dates() {}

void OAIProjectDuplicateRequest_schedule_dates::initializeModel() {

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_should_skip_weekends_isSet = false;
    m_should_skip_weekends_isValid = false;

    m_start_on_isSet = false;
    m_start_on_isValid = false;
}

void OAIProjectDuplicateRequest_schedule_dates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDuplicateRequest_schedule_dates::fromJsonObject(QJsonObject json) {

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_should_skip_weekends_isValid = ::OpenAPI::fromJsonValue(m_should_skip_weekends, json[QString("should_skip_weekends")]);
    m_should_skip_weekends_isSet = !json[QString("should_skip_weekends")].isNull() && m_should_skip_weekends_isValid;

    m_start_on_isValid = ::OpenAPI::fromJsonValue(m_start_on, json[QString("start_on")]);
    m_start_on_isSet = !json[QString("start_on")].isNull() && m_start_on_isValid;
}

QString OAIProjectDuplicateRequest_schedule_dates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDuplicateRequest_schedule_dates::asJsonObject() const {
    QJsonObject obj;
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_should_skip_weekends_isSet) {
        obj.insert(QString("should_skip_weekends"), ::OpenAPI::toJsonValue(m_should_skip_weekends));
    }
    if (m_start_on_isSet) {
        obj.insert(QString("start_on"), ::OpenAPI::toJsonValue(m_start_on));
    }
    return obj;
}

QString OAIProjectDuplicateRequest_schedule_dates::getDueOn() const {
    return m_due_on;
}
void OAIProjectDuplicateRequest_schedule_dates::setDueOn(const QString &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAIProjectDuplicateRequest_schedule_dates::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAIProjectDuplicateRequest_schedule_dates::is_due_on_Valid() const{
    return m_due_on_isValid;
}

bool OAIProjectDuplicateRequest_schedule_dates::isShouldSkipWeekends() const {
    return m_should_skip_weekends;
}
void OAIProjectDuplicateRequest_schedule_dates::setShouldSkipWeekends(const bool &should_skip_weekends) {
    m_should_skip_weekends = should_skip_weekends;
    m_should_skip_weekends_isSet = true;
}

bool OAIProjectDuplicateRequest_schedule_dates::is_should_skip_weekends_Set() const{
    return m_should_skip_weekends_isSet;
}

bool OAIProjectDuplicateRequest_schedule_dates::is_should_skip_weekends_Valid() const{
    return m_should_skip_weekends_isValid;
}

QString OAIProjectDuplicateRequest_schedule_dates::getStartOn() const {
    return m_start_on;
}
void OAIProjectDuplicateRequest_schedule_dates::setStartOn(const QString &start_on) {
    m_start_on = start_on;
    m_start_on_isSet = true;
}

bool OAIProjectDuplicateRequest_schedule_dates::is_start_on_Set() const{
    return m_start_on_isSet;
}

bool OAIProjectDuplicateRequest_schedule_dates::is_start_on_Valid() const{
    return m_start_on_isValid;
}

bool OAIProjectDuplicateRequest_schedule_dates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_skip_weekends_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDuplicateRequest_schedule_dates::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_should_skip_weekends_isValid && true;
}

} // namespace OpenAPI
