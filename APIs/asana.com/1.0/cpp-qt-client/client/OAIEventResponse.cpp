/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventResponse::OAIEventResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventResponse::OAIEventResponse() {
    this->initializeModel();
}

OAIEventResponse::~OAIEventResponse() {}

void OAIEventResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_change_isSet = false;
    m_change_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEventResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_change_isValid = ::OpenAPI::fromJsonValue(m_change, json[QString("change")]);
    m_change_isSet = !json[QString("change")].isNull() && m_change_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEventResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_change.isSet()) {
        obj.insert(QString("change"), ::OpenAPI::toJsonValue(m_change));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIEventResponse::getAction() const {
    return m_action;
}
void OAIEventResponse::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIEventResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAIEventResponse::is_action_Valid() const{
    return m_action_isValid;
}

OAIEventResponse_change OAIEventResponse::getChange() const {
    return m_change;
}
void OAIEventResponse::setChange(const OAIEventResponse_change &change) {
    m_change = change;
    m_change_isSet = true;
}

bool OAIEventResponse::is_change_Set() const{
    return m_change_isSet;
}

bool OAIEventResponse::is_change_Valid() const{
    return m_change_isValid;
}

QDateTime OAIEventResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIEventResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEventResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEventResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIEventResponse_parent OAIEventResponse::getParent() const {
    return m_parent;
}
void OAIEventResponse::setParent(const OAIEventResponse_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIEventResponse::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIEventResponse::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIEventResponse_resource OAIEventResponse::getResource() const {
    return m_resource;
}
void OAIEventResponse::setResource(const OAIEventResponse_resource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIEventResponse::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIEventResponse::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIEventResponse::getType() const {
    return m_type;
}
void OAIEventResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventResponse::is_type_Valid() const{
    return m_type_isValid;
}

OAIEventResponse_user OAIEventResponse::getUser() const {
    return m_user;
}
void OAIEventResponse::setUser(const OAIEventResponse_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEventResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEventResponse::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEventResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
