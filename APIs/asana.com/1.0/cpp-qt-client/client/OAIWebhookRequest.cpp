/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookRequest::OAIWebhookRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookRequest::OAIWebhookRequest() {
    this->initializeModel();
}

OAIWebhookRequest::~OAIWebhookRequest() {}

void OAIWebhookRequest::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIWebhookRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookRequest::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIWebhookRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QList<OAIWebhookRequest_filters_inner> OAIWebhookRequest::getFilters() const {
    return m_filters;
}
void OAIWebhookRequest::setFilters(const QList<OAIWebhookRequest_filters_inner> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIWebhookRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIWebhookRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIWebhookRequest::getResource() const {
    return m_resource;
}
void OAIWebhookRequest::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIWebhookRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIWebhookRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIWebhookRequest::getTarget() const {
    return m_target;
}
void OAIWebhookRequest::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIWebhookRequest::is_target_Set() const{
    return m_target_isSet;
}

bool OAIWebhookRequest::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIWebhookRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
