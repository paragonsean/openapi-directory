/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskResponse::OAITaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskResponse::OAITaskResponse() {
    this->initializeModel();
}

OAITaskResponse::~OAITaskResponse() {}

void OAITaskResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_subtype_isSet = false;
    m_resource_subtype_isValid = false;

    m_actual_time_minutes_isSet = false;
    m_actual_time_minutes_isValid = false;

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_assignee_status_isSet = false;
    m_assignee_status_isValid = false;

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_completed_by_isSet = false;
    m_completed_by_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dependencies_isSet = false;
    m_dependencies_isValid = false;

    m_dependents_isSet = false;
    m_dependents_isValid = false;

    m_due_at_isSet = false;
    m_due_at_isValid = false;

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;

    m_hearted_isSet = false;
    m_hearted_isValid = false;

    m_hearts_isSet = false;
    m_hearts_isValid = false;

    m_html_notes_isSet = false;
    m_html_notes_isValid = false;

    m_is_rendered_as_separator_isSet = false;
    m_is_rendered_as_separator_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_memberships_isSet = false;
    m_memberships_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_num_hearts_isSet = false;
    m_num_hearts_isValid = false;

    m_num_likes_isSet = false;
    m_num_likes_isValid = false;

    m_num_subtasks_isSet = false;
    m_num_subtasks_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_start_on_isSet = false;
    m_start_on_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignee_section_isSet = false;
    m_assignee_section_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_permalink_url_isSet = false;
    m_permalink_url_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;
}

void OAITaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_resource_subtype, json[QString("resource_subtype")]);
    m_resource_subtype_isSet = !json[QString("resource_subtype")].isNull() && m_resource_subtype_isValid;

    m_actual_time_minutes_isValid = ::OpenAPI::fromJsonValue(m_actual_time_minutes, json[QString("actual_time_minutes")]);
    m_actual_time_minutes_isSet = !json[QString("actual_time_minutes")].isNull() && m_actual_time_minutes_isValid;

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approval_status")]);
    m_approval_status_isSet = !json[QString("approval_status")].isNull() && m_approval_status_isValid;

    m_assignee_status_isValid = ::OpenAPI::fromJsonValue(m_assignee_status, json[QString("assignee_status")]);
    m_assignee_status_isSet = !json[QString("assignee_status")].isNull() && m_assignee_status_isValid;

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_completed_by_isValid = ::OpenAPI::fromJsonValue(m_completed_by, json[QString("completed_by")]);
    m_completed_by_isSet = !json[QString("completed_by")].isNull() && m_completed_by_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dependencies_isValid = ::OpenAPI::fromJsonValue(m_dependencies, json[QString("dependencies")]);
    m_dependencies_isSet = !json[QString("dependencies")].isNull() && m_dependencies_isValid;

    m_dependents_isValid = ::OpenAPI::fromJsonValue(m_dependents, json[QString("dependents")]);
    m_dependents_isSet = !json[QString("dependents")].isNull() && m_dependents_isValid;

    m_due_at_isValid = ::OpenAPI::fromJsonValue(m_due_at, json[QString("due_at")]);
    m_due_at_isSet = !json[QString("due_at")].isNull() && m_due_at_isValid;

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_hearted_isValid = ::OpenAPI::fromJsonValue(m_hearted, json[QString("hearted")]);
    m_hearted_isSet = !json[QString("hearted")].isNull() && m_hearted_isValid;

    m_hearts_isValid = ::OpenAPI::fromJsonValue(m_hearts, json[QString("hearts")]);
    m_hearts_isSet = !json[QString("hearts")].isNull() && m_hearts_isValid;

    m_html_notes_isValid = ::OpenAPI::fromJsonValue(m_html_notes, json[QString("html_notes")]);
    m_html_notes_isSet = !json[QString("html_notes")].isNull() && m_html_notes_isValid;

    m_is_rendered_as_separator_isValid = ::OpenAPI::fromJsonValue(m_is_rendered_as_separator, json[QString("is_rendered_as_separator")]);
    m_is_rendered_as_separator_isSet = !json[QString("is_rendered_as_separator")].isNull() && m_is_rendered_as_separator_isValid;

    m_liked_isValid = ::OpenAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_memberships_isValid = ::OpenAPI::fromJsonValue(m_memberships, json[QString("memberships")]);
    m_memberships_isSet = !json[QString("memberships")].isNull() && m_memberships_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_num_hearts_isValid = ::OpenAPI::fromJsonValue(m_num_hearts, json[QString("num_hearts")]);
    m_num_hearts_isSet = !json[QString("num_hearts")].isNull() && m_num_hearts_isValid;

    m_num_likes_isValid = ::OpenAPI::fromJsonValue(m_num_likes, json[QString("num_likes")]);
    m_num_likes_isSet = !json[QString("num_likes")].isNull() && m_num_likes_isValid;

    m_num_subtasks_isValid = ::OpenAPI::fromJsonValue(m_num_subtasks, json[QString("num_subtasks")]);
    m_num_subtasks_isSet = !json[QString("num_subtasks")].isNull() && m_num_subtasks_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("start_at")]);
    m_start_at_isSet = !json[QString("start_at")].isNull() && m_start_at_isValid;

    m_start_on_isValid = ::OpenAPI::fromJsonValue(m_start_on, json[QString("start_on")]);
    m_start_on_isSet = !json[QString("start_on")].isNull() && m_start_on_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignee_section_isValid = ::OpenAPI::fromJsonValue(m_assignee_section, json[QString("assignee_section")]);
    m_assignee_section_isSet = !json[QString("assignee_section")].isNull() && m_assignee_section_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_permalink_url_isValid = ::OpenAPI::fromJsonValue(m_permalink_url, json[QString("permalink_url")]);
    m_permalink_url_isSet = !json[QString("permalink_url")].isNull() && m_permalink_url_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;
}

QString OAITaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_subtype_isSet) {
        obj.insert(QString("resource_subtype"), ::OpenAPI::toJsonValue(m_resource_subtype));
    }
    if (m_actual_time_minutes_isSet) {
        obj.insert(QString("actual_time_minutes"), ::OpenAPI::toJsonValue(m_actual_time_minutes));
    }
    if (m_approval_status_isSet) {
        obj.insert(QString("approval_status"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_assignee_status_isSet) {
        obj.insert(QString("assignee_status"), ::OpenAPI::toJsonValue(m_assignee_status));
    }
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_completed_by.isSet()) {
        obj.insert(QString("completed_by"), ::OpenAPI::toJsonValue(m_completed_by));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dependencies.size() > 0) {
        obj.insert(QString("dependencies"), ::OpenAPI::toJsonValue(m_dependencies));
    }
    if (m_dependents.size() > 0) {
        obj.insert(QString("dependents"), ::OpenAPI::toJsonValue(m_dependents));
    }
    if (m_due_at_isSet) {
        obj.insert(QString("due_at"), ::OpenAPI::toJsonValue(m_due_at));
    }
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_external.isSet()) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_hearted_isSet) {
        obj.insert(QString("hearted"), ::OpenAPI::toJsonValue(m_hearted));
    }
    if (m_hearts.size() > 0) {
        obj.insert(QString("hearts"), ::OpenAPI::toJsonValue(m_hearts));
    }
    if (m_html_notes_isSet) {
        obj.insert(QString("html_notes"), ::OpenAPI::toJsonValue(m_html_notes));
    }
    if (m_is_rendered_as_separator_isSet) {
        obj.insert(QString("is_rendered_as_separator"), ::OpenAPI::toJsonValue(m_is_rendered_as_separator));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::OpenAPI::toJsonValue(m_liked));
    }
    if (m_likes.size() > 0) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_memberships.size() > 0) {
        obj.insert(QString("memberships"), ::OpenAPI::toJsonValue(m_memberships));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_num_hearts_isSet) {
        obj.insert(QString("num_hearts"), ::OpenAPI::toJsonValue(m_num_hearts));
    }
    if (m_num_likes_isSet) {
        obj.insert(QString("num_likes"), ::OpenAPI::toJsonValue(m_num_likes));
    }
    if (m_num_subtasks_isSet) {
        obj.insert(QString("num_subtasks"), ::OpenAPI::toJsonValue(m_num_subtasks));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("start_at"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_start_on_isSet) {
        obj.insert(QString("start_on"), ::OpenAPI::toJsonValue(m_start_on));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignee_section.isSet()) {
        obj.insert(QString("assignee_section"), ::OpenAPI::toJsonValue(m_assignee_section));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_followers.size() > 0) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_permalink_url_isSet) {
        obj.insert(QString("permalink_url"), ::OpenAPI::toJsonValue(m_permalink_url));
    }
    if (m_projects.size() > 0) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_workspace.isSet()) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    return obj;
}

QString OAITaskResponse::getGid() const {
    return m_gid;
}
void OAITaskResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAITaskResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAITaskResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAITaskResponse::getResourceType() const {
    return m_resource_type;
}
void OAITaskResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAITaskResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAITaskResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAITaskResponse::getName() const {
    return m_name;
}
void OAITaskResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITaskResponse::getResourceSubtype() const {
    return m_resource_subtype;
}
void OAITaskResponse::setResourceSubtype(const QString &resource_subtype) {
    m_resource_subtype = resource_subtype;
    m_resource_subtype_isSet = true;
}

bool OAITaskResponse::is_resource_subtype_Set() const{
    return m_resource_subtype_isSet;
}

bool OAITaskResponse::is_resource_subtype_Valid() const{
    return m_resource_subtype_isValid;
}

double OAITaskResponse::getActualTimeMinutes() const {
    return m_actual_time_minutes;
}
void OAITaskResponse::setActualTimeMinutes(const double &actual_time_minutes) {
    m_actual_time_minutes = actual_time_minutes;
    m_actual_time_minutes_isSet = true;
}

bool OAITaskResponse::is_actual_time_minutes_Set() const{
    return m_actual_time_minutes_isSet;
}

bool OAITaskResponse::is_actual_time_minutes_Valid() const{
    return m_actual_time_minutes_isValid;
}

QString OAITaskResponse::getApprovalStatus() const {
    return m_approval_status;
}
void OAITaskResponse::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAITaskResponse::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAITaskResponse::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QString OAITaskResponse::getAssigneeStatus() const {
    return m_assignee_status;
}
void OAITaskResponse::setAssigneeStatus(const QString &assignee_status) {
    m_assignee_status = assignee_status;
    m_assignee_status_isSet = true;
}

bool OAITaskResponse::is_assignee_status_Set() const{
    return m_assignee_status_isSet;
}

bool OAITaskResponse::is_assignee_status_Valid() const{
    return m_assignee_status_isValid;
}

bool OAITaskResponse::isCompleted() const {
    return m_completed;
}
void OAITaskResponse::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAITaskResponse::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAITaskResponse::is_completed_Valid() const{
    return m_completed_isValid;
}

QDateTime OAITaskResponse::getCompletedAt() const {
    return m_completed_at;
}
void OAITaskResponse::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAITaskResponse::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAITaskResponse::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

OAIUserCompact OAITaskResponse::getCompletedBy() const {
    return m_completed_by;
}
void OAITaskResponse::setCompletedBy(const OAIUserCompact &completed_by) {
    m_completed_by = completed_by;
    m_completed_by_isSet = true;
}

bool OAITaskResponse::is_completed_by_Set() const{
    return m_completed_by_isSet;
}

bool OAITaskResponse::is_completed_by_Valid() const{
    return m_completed_by_isValid;
}

QDateTime OAITaskResponse::getCreatedAt() const {
    return m_created_at;
}
void OAITaskResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITaskResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITaskResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIAsanaResource> OAITaskResponse::getDependencies() const {
    return m_dependencies;
}
void OAITaskResponse::setDependencies(const QList<OAIAsanaResource> &dependencies) {
    m_dependencies = dependencies;
    m_dependencies_isSet = true;
}

bool OAITaskResponse::is_dependencies_Set() const{
    return m_dependencies_isSet;
}

bool OAITaskResponse::is_dependencies_Valid() const{
    return m_dependencies_isValid;
}

QList<OAIAsanaResource> OAITaskResponse::getDependents() const {
    return m_dependents;
}
void OAITaskResponse::setDependents(const QList<OAIAsanaResource> &dependents) {
    m_dependents = dependents;
    m_dependents_isSet = true;
}

bool OAITaskResponse::is_dependents_Set() const{
    return m_dependents_isSet;
}

bool OAITaskResponse::is_dependents_Valid() const{
    return m_dependents_isValid;
}

QDate OAITaskResponse::getDueAt() const {
    return m_due_at;
}
void OAITaskResponse::setDueAt(const QDate &due_at) {
    m_due_at = due_at;
    m_due_at_isSet = true;
}

bool OAITaskResponse::is_due_at_Set() const{
    return m_due_at_isSet;
}

bool OAITaskResponse::is_due_at_Valid() const{
    return m_due_at_isValid;
}

QDate OAITaskResponse::getDueOn() const {
    return m_due_on;
}
void OAITaskResponse::setDueOn(const QDate &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAITaskResponse::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAITaskResponse::is_due_on_Valid() const{
    return m_due_on_isValid;
}

OAITaskBase_allOf_external OAITaskResponse::getExternal() const {
    return m_external;
}
void OAITaskResponse::setExternal(const OAITaskBase_allOf_external &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAITaskResponse::is_external_Set() const{
    return m_external_isSet;
}

bool OAITaskResponse::is_external_Valid() const{
    return m_external_isValid;
}

bool OAITaskResponse::isHearted() const {
    return m_hearted;
}
void OAITaskResponse::setHearted(const bool &hearted) {
    m_hearted = hearted;
    m_hearted_isSet = true;
}

bool OAITaskResponse::is_hearted_Set() const{
    return m_hearted_isSet;
}

bool OAITaskResponse::is_hearted_Valid() const{
    return m_hearted_isValid;
}

QList<OAILike> OAITaskResponse::getHearts() const {
    return m_hearts;
}
void OAITaskResponse::setHearts(const QList<OAILike> &hearts) {
    m_hearts = hearts;
    m_hearts_isSet = true;
}

bool OAITaskResponse::is_hearts_Set() const{
    return m_hearts_isSet;
}

bool OAITaskResponse::is_hearts_Valid() const{
    return m_hearts_isValid;
}

QString OAITaskResponse::getHtmlNotes() const {
    return m_html_notes;
}
void OAITaskResponse::setHtmlNotes(const QString &html_notes) {
    m_html_notes = html_notes;
    m_html_notes_isSet = true;
}

bool OAITaskResponse::is_html_notes_Set() const{
    return m_html_notes_isSet;
}

bool OAITaskResponse::is_html_notes_Valid() const{
    return m_html_notes_isValid;
}

bool OAITaskResponse::isIsRenderedAsSeparator() const {
    return m_is_rendered_as_separator;
}
void OAITaskResponse::setIsRenderedAsSeparator(const bool &is_rendered_as_separator) {
    m_is_rendered_as_separator = is_rendered_as_separator;
    m_is_rendered_as_separator_isSet = true;
}

bool OAITaskResponse::is_is_rendered_as_separator_Set() const{
    return m_is_rendered_as_separator_isSet;
}

bool OAITaskResponse::is_is_rendered_as_separator_Valid() const{
    return m_is_rendered_as_separator_isValid;
}

bool OAITaskResponse::isLiked() const {
    return m_liked;
}
void OAITaskResponse::setLiked(const bool &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool OAITaskResponse::is_liked_Set() const{
    return m_liked_isSet;
}

bool OAITaskResponse::is_liked_Valid() const{
    return m_liked_isValid;
}

QList<OAILike> OAITaskResponse::getLikes() const {
    return m_likes;
}
void OAITaskResponse::setLikes(const QList<OAILike> &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAITaskResponse::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAITaskResponse::is_likes_Valid() const{
    return m_likes_isValid;
}

QList<OAITaskBase_allOf_memberships> OAITaskResponse::getMemberships() const {
    return m_memberships;
}
void OAITaskResponse::setMemberships(const QList<OAITaskBase_allOf_memberships> &memberships) {
    m_memberships = memberships;
    m_memberships_isSet = true;
}

bool OAITaskResponse::is_memberships_Set() const{
    return m_memberships_isSet;
}

bool OAITaskResponse::is_memberships_Valid() const{
    return m_memberships_isValid;
}

QDateTime OAITaskResponse::getModifiedAt() const {
    return m_modified_at;
}
void OAITaskResponse::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAITaskResponse::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAITaskResponse::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAITaskResponse::getNotes() const {
    return m_notes;
}
void OAITaskResponse::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAITaskResponse::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAITaskResponse::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAITaskResponse::getNumHearts() const {
    return m_num_hearts;
}
void OAITaskResponse::setNumHearts(const qint32 &num_hearts) {
    m_num_hearts = num_hearts;
    m_num_hearts_isSet = true;
}

bool OAITaskResponse::is_num_hearts_Set() const{
    return m_num_hearts_isSet;
}

bool OAITaskResponse::is_num_hearts_Valid() const{
    return m_num_hearts_isValid;
}

qint32 OAITaskResponse::getNumLikes() const {
    return m_num_likes;
}
void OAITaskResponse::setNumLikes(const qint32 &num_likes) {
    m_num_likes = num_likes;
    m_num_likes_isSet = true;
}

bool OAITaskResponse::is_num_likes_Set() const{
    return m_num_likes_isSet;
}

bool OAITaskResponse::is_num_likes_Valid() const{
    return m_num_likes_isValid;
}

qint32 OAITaskResponse::getNumSubtasks() const {
    return m_num_subtasks;
}
void OAITaskResponse::setNumSubtasks(const qint32 &num_subtasks) {
    m_num_subtasks = num_subtasks;
    m_num_subtasks_isSet = true;
}

bool OAITaskResponse::is_num_subtasks_Set() const{
    return m_num_subtasks_isSet;
}

bool OAITaskResponse::is_num_subtasks_Valid() const{
    return m_num_subtasks_isValid;
}

QDate OAITaskResponse::getStartAt() const {
    return m_start_at;
}
void OAITaskResponse::setStartAt(const QDate &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAITaskResponse::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAITaskResponse::is_start_at_Valid() const{
    return m_start_at_isValid;
}

QDate OAITaskResponse::getStartOn() const {
    return m_start_on;
}
void OAITaskResponse::setStartOn(const QDate &start_on) {
    m_start_on = start_on;
    m_start_on_isSet = true;
}

bool OAITaskResponse::is_start_on_Set() const{
    return m_start_on_isSet;
}

bool OAITaskResponse::is_start_on_Valid() const{
    return m_start_on_isValid;
}

OAIUserCompact OAITaskResponse::getAssignee() const {
    return m_assignee;
}
void OAITaskResponse::setAssignee(const OAIUserCompact &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAITaskResponse::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAITaskResponse::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAITaskResponse_allOf_assignee_section OAITaskResponse::getAssigneeSection() const {
    return m_assignee_section;
}
void OAITaskResponse::setAssigneeSection(const OAITaskResponse_allOf_assignee_section &assignee_section) {
    m_assignee_section = assignee_section;
    m_assignee_section_isSet = true;
}

bool OAITaskResponse::is_assignee_section_Set() const{
    return m_assignee_section_isSet;
}

bool OAITaskResponse::is_assignee_section_Valid() const{
    return m_assignee_section_isValid;
}

QList<OAICustomFieldResponse> OAITaskResponse::getCustomFields() const {
    return m_custom_fields;
}
void OAITaskResponse::setCustomFields(const QList<OAICustomFieldResponse> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAITaskResponse::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAITaskResponse::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<OAIUserCompact> OAITaskResponse::getFollowers() const {
    return m_followers;
}
void OAITaskResponse::setFollowers(const QList<OAIUserCompact> &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAITaskResponse::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAITaskResponse::is_followers_Valid() const{
    return m_followers_isValid;
}

OAITaskResponse_allOf_parent OAITaskResponse::getParent() const {
    return m_parent;
}
void OAITaskResponse::setParent(const OAITaskResponse_allOf_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAITaskResponse::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAITaskResponse::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAITaskResponse::getPermalinkUrl() const {
    return m_permalink_url;
}
void OAITaskResponse::setPermalinkUrl(const QString &permalink_url) {
    m_permalink_url = permalink_url;
    m_permalink_url_isSet = true;
}

bool OAITaskResponse::is_permalink_url_Set() const{
    return m_permalink_url_isSet;
}

bool OAITaskResponse::is_permalink_url_Valid() const{
    return m_permalink_url_isValid;
}

QList<OAIProjectCompact> OAITaskResponse::getProjects() const {
    return m_projects;
}
void OAITaskResponse::setProjects(const QList<OAIProjectCompact> &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAITaskResponse::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAITaskResponse::is_projects_Valid() const{
    return m_projects_isValid;
}

QList<OAITagCompact> OAITaskResponse::getTags() const {
    return m_tags;
}
void OAITaskResponse::setTags(const QList<OAITagCompact> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITaskResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITaskResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITaskResponse_allOf_workspace OAITaskResponse::getWorkspace() const {
    return m_workspace;
}
void OAITaskResponse::setWorkspace(const OAITaskResponse_allOf_workspace &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAITaskResponse::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAITaskResponse::is_workspace_Valid() const{
    return m_workspace_isValid;
}

bool OAITaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_time_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rendered_as_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_hearts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_subtasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_section.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permalink_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
