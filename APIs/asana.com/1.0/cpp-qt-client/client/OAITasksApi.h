/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddDependenciesForTask_request.h"
#include "OAIAddDependentsForTask_request.h"
#include "OAIAddFollowers_request.h"
#include "OAIAddProjectForTask_request.h"
#include "OAIAddTagForTask_request.h"
#include "OAICreateTask_201_response.h"
#include "OAICreateTask_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIDuplicateTask_request.h"
#include "OAIErrorResponse.h"
#include "OAIGetJob_200_response.h"
#include "OAIGetTasksForProject_200_response.h"
#include "OAIRemoveFollowerForTask_request.h"
#include "OAIRemoveProjectForTask_request.h"
#include "OAIRemoveTagForTask_request.h"
#include "OAISetParentForTask_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_add_dependencies_for_task_request OAIAddDependenciesForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addDependenciesForTask(const QString &task_gid, const OAIAddDependenciesForTask_request &oai_add_dependencies_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_add_dependents_for_task_request OAIAddDependentsForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addDependentsForTask(const QString &task_gid, const OAIAddDependentsForTask_request &oai_add_dependents_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_add_followers_request OAIAddFollowers_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addFollowersForTask(const QString &task_gid, const OAIAddFollowers_request &oai_add_followers_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_add_project_for_task_request OAIAddProjectForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addProjectForTask(const QString &task_gid, const OAIAddProjectForTask_request &oai_add_project_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_add_tag_for_task_request OAIAddTagForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addTagForTask(const QString &task_gid, const OAIAddTagForTask_request &oai_add_tag_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_create_task_request OAICreateTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createSubtaskForTask(const QString &task_gid, const OAICreateTask_request &oai_create_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_create_task_request OAICreateTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createTask(const OAICreateTask_request &oai_create_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deleteTask(const QString &task_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_duplicate_task_request OAIDuplicateTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void duplicateTask(const QString &task_gid, const OAIDuplicateTask_request &oai_duplicate_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getDependenciesForTask(const QString &task_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getDependentsForTask(const QString &task_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getSubtasksForTask(const QString &task_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getTask(const QString &task_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  assignee QString [optional]
    * @param[in]  project QString [optional]
    * @param[in]  section QString [optional]
    * @param[in]  workspace QString [optional]
    * @param[in]  completed_since QDateTime [optional]
    * @param[in]  modified_since QDateTime [optional]
    */
    virtual void getTasks(const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &section = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &workspace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &completed_since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_since = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  completed_since QString [optional]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getTasksForProject(const QString &project_gid, const ::OpenAPI::OptionalParam<QString> &completed_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  section_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getTasksForSection(const QString &section_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getTasksForTag(const QString &tag_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_task_list_gid QString [required]
    * @param[in]  completed_since QString [optional]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getTasksForUserTaskList(const QString &user_task_list_gid, const ::OpenAPI::OptionalParam<QString> &completed_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_add_dependencies_for_task_request OAIAddDependenciesForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeDependenciesForTask(const QString &task_gid, const OAIAddDependenciesForTask_request &oai_add_dependencies_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_add_dependents_for_task_request OAIAddDependentsForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeDependentsForTask(const QString &task_gid, const OAIAddDependentsForTask_request &oai_add_dependents_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_remove_follower_for_task_request OAIRemoveFollowerForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeFollowerForTask(const QString &task_gid, const OAIRemoveFollowerForTask_request &oai_remove_follower_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_remove_project_for_task_request OAIRemoveProjectForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeProjectForTask(const QString &task_gid, const OAIRemoveProjectForTask_request &oai_remove_project_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_remove_tag_for_task_request OAIRemoveTagForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeTagForTask(const QString &task_gid, const OAIRemoveTagForTask_request &oai_remove_tag_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  workspace_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  text QString [optional]
    * @param[in]  resource_subtype QString [optional]
    * @param[in]  assignee_any QString [optional]
    * @param[in]  assignee_not QString [optional]
    * @param[in]  portfolios_any QString [optional]
    * @param[in]  projects_any QString [optional]
    * @param[in]  projects_not QString [optional]
    * @param[in]  projects_all QString [optional]
    * @param[in]  sections_any QString [optional]
    * @param[in]  sections_not QString [optional]
    * @param[in]  sections_all QString [optional]
    * @param[in]  tags_any QString [optional]
    * @param[in]  tags_not QString [optional]
    * @param[in]  tags_all QString [optional]
    * @param[in]  teams_any QString [optional]
    * @param[in]  followers_not QString [optional]
    * @param[in]  created_by_any QString [optional]
    * @param[in]  created_by_not QString [optional]
    * @param[in]  assigned_by_any QString [optional]
    * @param[in]  assigned_by_not QString [optional]
    * @param[in]  liked_by_not QString [optional]
    * @param[in]  commented_on_by_not QString [optional]
    * @param[in]  due_on_before QDate [optional]
    * @param[in]  due_on_after QDate [optional]
    * @param[in]  due_on QDate [optional]
    * @param[in]  due_at_before QDateTime [optional]
    * @param[in]  due_at_after QDateTime [optional]
    * @param[in]  start_on_before QDate [optional]
    * @param[in]  start_on_after QDate [optional]
    * @param[in]  start_on QDate [optional]
    * @param[in]  created_on_before QDate [optional]
    * @param[in]  created_on_after QDate [optional]
    * @param[in]  created_on QDate [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  completed_on_before QDate [optional]
    * @param[in]  completed_on_after QDate [optional]
    * @param[in]  completed_on QDate [optional]
    * @param[in]  completed_at_before QDateTime [optional]
    * @param[in]  completed_at_after QDateTime [optional]
    * @param[in]  modified_on_before QDate [optional]
    * @param[in]  modified_on_after QDate [optional]
    * @param[in]  modified_on QDate [optional]
    * @param[in]  modified_at_before QDateTime [optional]
    * @param[in]  modified_at_after QDateTime [optional]
    * @param[in]  is_blocking bool [optional]
    * @param[in]  is_blocked bool [optional]
    * @param[in]  has_attachment bool [optional]
    * @param[in]  completed bool [optional]
    * @param[in]  is_subtask bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_ascending bool [optional]
    */
    virtual void searchTasksForWorkspace(const QString &workspace_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_subtype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignee_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignee_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &portfolios_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &projects_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &projects_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &projects_all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sections_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sections_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sections_all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags_all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &teams_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &followers_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_by_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_by_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_by_any = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_by_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &liked_by_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commented_on_by_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &due_on_before = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &due_on_after = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &due_on = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDateTime> &due_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &due_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDate> &start_on_before = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &start_on_after = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &start_on = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &created_on_before = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &created_on_after = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &created_on = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDate> &completed_on_before = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &completed_on_after = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &completed_on = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDateTime> &completed_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &completed_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDate> &modified_on_before = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &modified_on_after = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &modified_on = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &is_blocking = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_blocked = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &has_attachment = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &completed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_subtask = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_ascending = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_set_parent_for_task_request OAISetParentForTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void setParentForTask(const QString &task_gid, const OAISetParentForTask_request &oai_set_parent_for_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  task_gid QString [required]
    * @param[in]  oai_create_task_request OAICreateTask_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updateTask(const QString &task_gid, const OAICreateTask_request &oai_create_task_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addDependenciesForTaskCallback(OAIHttpRequestWorker *worker);
    void addDependentsForTaskCallback(OAIHttpRequestWorker *worker);
    void addFollowersForTaskCallback(OAIHttpRequestWorker *worker);
    void addProjectForTaskCallback(OAIHttpRequestWorker *worker);
    void addTagForTaskCallback(OAIHttpRequestWorker *worker);
    void createSubtaskForTaskCallback(OAIHttpRequestWorker *worker);
    void createTaskCallback(OAIHttpRequestWorker *worker);
    void deleteTaskCallback(OAIHttpRequestWorker *worker);
    void duplicateTaskCallback(OAIHttpRequestWorker *worker);
    void getDependenciesForTaskCallback(OAIHttpRequestWorker *worker);
    void getDependentsForTaskCallback(OAIHttpRequestWorker *worker);
    void getSubtasksForTaskCallback(OAIHttpRequestWorker *worker);
    void getTaskCallback(OAIHttpRequestWorker *worker);
    void getTasksCallback(OAIHttpRequestWorker *worker);
    void getTasksForProjectCallback(OAIHttpRequestWorker *worker);
    void getTasksForSectionCallback(OAIHttpRequestWorker *worker);
    void getTasksForTagCallback(OAIHttpRequestWorker *worker);
    void getTasksForUserTaskListCallback(OAIHttpRequestWorker *worker);
    void removeDependenciesForTaskCallback(OAIHttpRequestWorker *worker);
    void removeDependentsForTaskCallback(OAIHttpRequestWorker *worker);
    void removeFollowerForTaskCallback(OAIHttpRequestWorker *worker);
    void removeProjectForTaskCallback(OAIHttpRequestWorker *worker);
    void removeTagForTaskCallback(OAIHttpRequestWorker *worker);
    void searchTasksForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void setParentForTaskCallback(OAIHttpRequestWorker *worker);
    void updateTaskCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addDependenciesForTaskSignal(OAIDeleteAttachment_200_response summary);
    void addDependentsForTaskSignal(OAIDeleteAttachment_200_response summary);
    void addFollowersForTaskSignal(OAICreateTask_201_response summary);
    void addProjectForTaskSignal(OAIDeleteAttachment_200_response summary);
    void addTagForTaskSignal(OAIDeleteAttachment_200_response summary);
    void createSubtaskForTaskSignal(OAICreateTask_201_response summary);
    void createTaskSignal(OAICreateTask_201_response summary);
    void deleteTaskSignal(OAIDeleteAttachment_200_response summary);
    void duplicateTaskSignal(OAIGetJob_200_response summary);
    void getDependenciesForTaskSignal(OAIGetTasksForProject_200_response summary);
    void getDependentsForTaskSignal(OAIGetTasksForProject_200_response summary);
    void getSubtasksForTaskSignal(OAIGetTasksForProject_200_response summary);
    void getTaskSignal(OAICreateTask_201_response summary);
    void getTasksSignal(OAIGetTasksForProject_200_response summary);
    void getTasksForProjectSignal(OAIGetTasksForProject_200_response summary);
    void getTasksForSectionSignal(OAIGetTasksForProject_200_response summary);
    void getTasksForTagSignal(OAIGetTasksForProject_200_response summary);
    void getTasksForUserTaskListSignal(OAIGetTasksForProject_200_response summary);
    void removeDependenciesForTaskSignal(OAIDeleteAttachment_200_response summary);
    void removeDependentsForTaskSignal(OAIDeleteAttachment_200_response summary);
    void removeFollowerForTaskSignal(OAICreateTask_201_response summary);
    void removeProjectForTaskSignal(OAIDeleteAttachment_200_response summary);
    void removeTagForTaskSignal(OAIDeleteAttachment_200_response summary);
    void searchTasksForWorkspaceSignal(OAIGetTasksForProject_200_response summary);
    void setParentForTaskSignal(OAICreateTask_201_response summary);
    void updateTaskSignal(OAICreateTask_201_response summary);


    void addDependenciesForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void addDependentsForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void addFollowersForTaskSignalFull(OAIHttpRequestWorker *worker, OAICreateTask_201_response summary);
    void addProjectForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void addTagForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void createSubtaskForTaskSignalFull(OAIHttpRequestWorker *worker, OAICreateTask_201_response summary);
    void createTaskSignalFull(OAIHttpRequestWorker *worker, OAICreateTask_201_response summary);
    void deleteTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void duplicateTaskSignalFull(OAIHttpRequestWorker *worker, OAIGetJob_200_response summary);
    void getDependenciesForTaskSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void getDependentsForTaskSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void getSubtasksForTaskSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void getTaskSignalFull(OAIHttpRequestWorker *worker, OAICreateTask_201_response summary);
    void getTasksSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void getTasksForProjectSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void getTasksForSectionSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void getTasksForTagSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void getTasksForUserTaskListSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void removeDependenciesForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void removeDependentsForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void removeFollowerForTaskSignalFull(OAIHttpRequestWorker *worker, OAICreateTask_201_response summary);
    void removeProjectForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void removeTagForTaskSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void searchTasksForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIGetTasksForProject_200_response summary);
    void setParentForTaskSignalFull(OAIHttpRequestWorker *worker, OAICreateTask_201_response summary);
    void updateTaskSignalFull(OAIHttpRequestWorker *worker, OAICreateTask_201_response summary);

    Q_DECL_DEPRECATED_X("Use addDependenciesForTaskSignalError() instead")
    void addDependenciesForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDependenciesForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDependentsForTaskSignalError() instead")
    void addDependentsForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDependentsForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFollowersForTaskSignalError() instead")
    void addFollowersForTaskSignalE(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFollowersForTaskSignalError(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addProjectForTaskSignalError() instead")
    void addProjectForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTagForTaskSignalError() instead")
    void addTagForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTagForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubtaskForTaskSignalError() instead")
    void createSubtaskForTaskSignalE(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubtaskForTaskSignalError(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTaskSignalError() instead")
    void createTaskSignalE(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalError(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaskSignalError() instead")
    void deleteTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateTaskSignalError() instead")
    void duplicateTaskSignalE(OAIGetJob_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateTaskSignalError(OAIGetJob_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDependenciesForTaskSignalError() instead")
    void getDependenciesForTaskSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDependenciesForTaskSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDependentsForTaskSignalError() instead")
    void getDependentsForTaskSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDependentsForTaskSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtasksForTaskSignalError() instead")
    void getSubtasksForTaskSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtasksForTaskSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskSignalError() instead")
    void getTaskSignalE(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskSignalError(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalError() instead")
    void getTasksSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForProjectSignalError() instead")
    void getTasksForProjectSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForProjectSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForSectionSignalError() instead")
    void getTasksForSectionSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForSectionSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForTagSignalError() instead")
    void getTasksForTagSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForTagSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForUserTaskListSignalError() instead")
    void getTasksForUserTaskListSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForUserTaskListSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDependenciesForTaskSignalError() instead")
    void removeDependenciesForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDependenciesForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDependentsForTaskSignalError() instead")
    void removeDependentsForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDependentsForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFollowerForTaskSignalError() instead")
    void removeFollowerForTaskSignalE(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFollowerForTaskSignalError(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProjectForTaskSignalError() instead")
    void removeProjectForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeProjectForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTagForTaskSignalError() instead")
    void removeTagForTaskSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTagForTaskSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTasksForWorkspaceSignalError() instead")
    void searchTasksForWorkspaceSignalE(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTasksForWorkspaceSignalError(OAIGetTasksForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setParentForTaskSignalError() instead")
    void setParentForTaskSignalE(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setParentForTaskSignalError(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskSignalError() instead")
    void updateTaskSignalE(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskSignalError(OAICreateTask_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addDependenciesForTaskSignalErrorFull() instead")
    void addDependenciesForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDependenciesForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDependentsForTaskSignalErrorFull() instead")
    void addDependentsForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDependentsForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFollowersForTaskSignalErrorFull() instead")
    void addFollowersForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFollowersForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addProjectForTaskSignalErrorFull() instead")
    void addProjectForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addProjectForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTagForTaskSignalErrorFull() instead")
    void addTagForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTagForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubtaskForTaskSignalErrorFull() instead")
    void createSubtaskForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubtaskForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTaskSignalErrorFull() instead")
    void createTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTaskSignalErrorFull() instead")
    void deleteTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateTaskSignalErrorFull() instead")
    void duplicateTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDependenciesForTaskSignalErrorFull() instead")
    void getDependenciesForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDependenciesForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDependentsForTaskSignalErrorFull() instead")
    void getDependentsForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDependentsForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubtasksForTaskSignalErrorFull() instead")
    void getSubtasksForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubtasksForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskSignalErrorFull() instead")
    void getTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksSignalErrorFull() instead")
    void getTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForProjectSignalErrorFull() instead")
    void getTasksForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForSectionSignalErrorFull() instead")
    void getTasksForSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForTagSignalErrorFull() instead")
    void getTasksForTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTasksForUserTaskListSignalErrorFull() instead")
    void getTasksForUserTaskListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTasksForUserTaskListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDependenciesForTaskSignalErrorFull() instead")
    void removeDependenciesForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDependenciesForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDependentsForTaskSignalErrorFull() instead")
    void removeDependentsForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDependentsForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFollowerForTaskSignalErrorFull() instead")
    void removeFollowerForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFollowerForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProjectForTaskSignalErrorFull() instead")
    void removeProjectForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeProjectForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTagForTaskSignalErrorFull() instead")
    void removeTagForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTagForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTasksForWorkspaceSignalErrorFull() instead")
    void searchTasksForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTasksForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setParentForTaskSignalErrorFull() instead")
    void setParentForTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setParentForTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTaskSignalErrorFull() instead")
    void updateTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
