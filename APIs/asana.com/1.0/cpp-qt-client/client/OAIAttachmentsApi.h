/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttachmentsApi_H
#define OAI_OAIAttachmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateAttachmentForObject_200_response.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIErrorResponse.h"
#include "OAIGetAttachmentsForObject_200_response.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttachmentsApi : public QObject {
    Q_OBJECT

public:
    OAIAttachmentsApi(const int timeOut = 0);
    ~OAIAttachmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  connect_to_app bool [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  name QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  resource_subtype QString [optional]
    * @param[in]  url QString [optional]
    */
    virtual void createAttachmentForObject(const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &connect_to_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_subtype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attachment_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deleteAttachment(const QString &attachment_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  attachment_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getAttachment(const QString &attachment_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getAttachmentsForObject(const QString &parent, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAttachmentForObjectCallback(OAIHttpRequestWorker *worker);
    void deleteAttachmentCallback(OAIHttpRequestWorker *worker);
    void getAttachmentCallback(OAIHttpRequestWorker *worker);
    void getAttachmentsForObjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAttachmentForObjectSignal(OAICreateAttachmentForObject_200_response summary);
    void deleteAttachmentSignal(OAIDeleteAttachment_200_response summary);
    void getAttachmentSignal(OAICreateAttachmentForObject_200_response summary);
    void getAttachmentsForObjectSignal(OAIGetAttachmentsForObject_200_response summary);


    void createAttachmentForObjectSignalFull(OAIHttpRequestWorker *worker, OAICreateAttachmentForObject_200_response summary);
    void deleteAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void getAttachmentSignalFull(OAIHttpRequestWorker *worker, OAICreateAttachmentForObject_200_response summary);
    void getAttachmentsForObjectSignalFull(OAIHttpRequestWorker *worker, OAIGetAttachmentsForObject_200_response summary);

    Q_DECL_DEPRECATED_X("Use createAttachmentForObjectSignalError() instead")
    void createAttachmentForObjectSignalE(OAICreateAttachmentForObject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttachmentForObjectSignalError(OAICreateAttachmentForObject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttachmentSignalError() instead")
    void deleteAttachmentSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttachmentSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentSignalError() instead")
    void getAttachmentSignalE(OAICreateAttachmentForObject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentSignalError(OAICreateAttachmentForObject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentsForObjectSignalError() instead")
    void getAttachmentsForObjectSignalE(OAIGetAttachmentsForObject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentsForObjectSignalError(OAIGetAttachmentsForObject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAttachmentForObjectSignalErrorFull() instead")
    void createAttachmentForObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttachmentForObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttachmentSignalErrorFull() instead")
    void deleteAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentSignalErrorFull() instead")
    void getAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttachmentsForObjectSignalErrorFull() instead")
    void getAttachmentsForObjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentsForObjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
