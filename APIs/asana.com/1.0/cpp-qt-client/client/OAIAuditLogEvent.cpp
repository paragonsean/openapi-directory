/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLogEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLogEvent::OAIAuditLogEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLogEvent::OAIAuditLogEvent() {
    this->initializeModel();
}

OAIAuditLogEvent::~OAIAuditLogEvent() {}

void OAIAuditLogEvent::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_event_category_isSet = false;
    m_event_category_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIAuditLogEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLogEvent::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_event_category_isValid = ::OpenAPI::fromJsonValue(m_event_category, json[QString("event_category")]);
    m_event_category_isSet = !json[QString("event_category")].isNull() && m_event_category_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIAuditLogEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLogEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_event_category_isSet) {
        obj.insert(QString("event_category"), ::OpenAPI::toJsonValue(m_event_category));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

OAIAuditLogEventActor OAIAuditLogEvent::getActor() const {
    return m_actor;
}
void OAIAuditLogEvent::setActor(const OAIAuditLogEventActor &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIAuditLogEvent::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIAuditLogEvent::is_actor_Valid() const{
    return m_actor_isValid;
}

OAIAuditLogEventContext OAIAuditLogEvent::getContext() const {
    return m_context;
}
void OAIAuditLogEvent::setContext(const OAIAuditLogEventContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIAuditLogEvent::is_context_Set() const{
    return m_context_isSet;
}

bool OAIAuditLogEvent::is_context_Valid() const{
    return m_context_isValid;
}

QDateTime OAIAuditLogEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIAuditLogEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAuditLogEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAuditLogEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAIAuditLogEvent::getDetails() const {
    return m_details;
}
void OAIAuditLogEvent::setDetails(const OAIObject &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIAuditLogEvent::is_details_Set() const{
    return m_details_isSet;
}

bool OAIAuditLogEvent::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIAuditLogEvent::getEventCategory() const {
    return m_event_category;
}
void OAIAuditLogEvent::setEventCategory(const QString &event_category) {
    m_event_category = event_category;
    m_event_category_isSet = true;
}

bool OAIAuditLogEvent::is_event_category_Set() const{
    return m_event_category_isSet;
}

bool OAIAuditLogEvent::is_event_category_Valid() const{
    return m_event_category_isValid;
}

QString OAIAuditLogEvent::getEventType() const {
    return m_event_type;
}
void OAIAuditLogEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIAuditLogEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIAuditLogEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIAuditLogEvent::getGid() const {
    return m_gid;
}
void OAIAuditLogEvent::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIAuditLogEvent::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIAuditLogEvent::is_gid_Valid() const{
    return m_gid_isValid;
}

OAIAuditLogEventResource OAIAuditLogEvent::getResource() const {
    return m_resource;
}
void OAIAuditLogEvent::setResource(const OAIAuditLogEventResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAuditLogEvent::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAuditLogEvent::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIAuditLogEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLogEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
