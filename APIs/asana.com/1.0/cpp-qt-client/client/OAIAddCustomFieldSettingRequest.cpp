/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddCustomFieldSettingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddCustomFieldSettingRequest::OAIAddCustomFieldSettingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddCustomFieldSettingRequest::OAIAddCustomFieldSettingRequest() {
    this->initializeModel();
}

OAIAddCustomFieldSettingRequest::~OAIAddCustomFieldSettingRequest() {}

void OAIAddCustomFieldSettingRequest::initializeModel() {

    m_custom_field_isSet = false;
    m_custom_field_isValid = false;

    m_insert_after_isSet = false;
    m_insert_after_isValid = false;

    m_insert_before_isSet = false;
    m_insert_before_isValid = false;

    m_is_important_isSet = false;
    m_is_important_isValid = false;
}

void OAIAddCustomFieldSettingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddCustomFieldSettingRequest::fromJsonObject(QJsonObject json) {

    m_custom_field_isValid = ::OpenAPI::fromJsonValue(m_custom_field, json[QString("custom_field")]);
    m_custom_field_isSet = !json[QString("custom_field")].isNull() && m_custom_field_isValid;

    m_insert_after_isValid = ::OpenAPI::fromJsonValue(m_insert_after, json[QString("insert_after")]);
    m_insert_after_isSet = !json[QString("insert_after")].isNull() && m_insert_after_isValid;

    m_insert_before_isValid = ::OpenAPI::fromJsonValue(m_insert_before, json[QString("insert_before")]);
    m_insert_before_isSet = !json[QString("insert_before")].isNull() && m_insert_before_isValid;

    m_is_important_isValid = ::OpenAPI::fromJsonValue(m_is_important, json[QString("is_important")]);
    m_is_important_isSet = !json[QString("is_important")].isNull() && m_is_important_isValid;
}

QString OAIAddCustomFieldSettingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddCustomFieldSettingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_field_isSet) {
        obj.insert(QString("custom_field"), ::OpenAPI::toJsonValue(m_custom_field));
    }
    if (m_insert_after_isSet) {
        obj.insert(QString("insert_after"), ::OpenAPI::toJsonValue(m_insert_after));
    }
    if (m_insert_before_isSet) {
        obj.insert(QString("insert_before"), ::OpenAPI::toJsonValue(m_insert_before));
    }
    if (m_is_important_isSet) {
        obj.insert(QString("is_important"), ::OpenAPI::toJsonValue(m_is_important));
    }
    return obj;
}

QString OAIAddCustomFieldSettingRequest::getCustomField() const {
    return m_custom_field;
}
void OAIAddCustomFieldSettingRequest::setCustomField(const QString &custom_field) {
    m_custom_field = custom_field;
    m_custom_field_isSet = true;
}

bool OAIAddCustomFieldSettingRequest::is_custom_field_Set() const{
    return m_custom_field_isSet;
}

bool OAIAddCustomFieldSettingRequest::is_custom_field_Valid() const{
    return m_custom_field_isValid;
}

QString OAIAddCustomFieldSettingRequest::getInsertAfter() const {
    return m_insert_after;
}
void OAIAddCustomFieldSettingRequest::setInsertAfter(const QString &insert_after) {
    m_insert_after = insert_after;
    m_insert_after_isSet = true;
}

bool OAIAddCustomFieldSettingRequest::is_insert_after_Set() const{
    return m_insert_after_isSet;
}

bool OAIAddCustomFieldSettingRequest::is_insert_after_Valid() const{
    return m_insert_after_isValid;
}

QString OAIAddCustomFieldSettingRequest::getInsertBefore() const {
    return m_insert_before;
}
void OAIAddCustomFieldSettingRequest::setInsertBefore(const QString &insert_before) {
    m_insert_before = insert_before;
    m_insert_before_isSet = true;
}

bool OAIAddCustomFieldSettingRequest::is_insert_before_Set() const{
    return m_insert_before_isSet;
}

bool OAIAddCustomFieldSettingRequest::is_insert_before_Valid() const{
    return m_insert_before_isValid;
}

bool OAIAddCustomFieldSettingRequest::isIsImportant() const {
    return m_is_important;
}
void OAIAddCustomFieldSettingRequest::setIsImportant(const bool &is_important) {
    m_is_important = is_important;
    m_is_important_isSet = true;
}

bool OAIAddCustomFieldSettingRequest::is_is_important_Set() const{
    return m_is_important_isSet;
}

bool OAIAddCustomFieldSettingRequest::is_is_important_Valid() const{
    return m_is_important_isValid;
}

bool OAIAddCustomFieldSettingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_important_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddCustomFieldSettingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_custom_field_isValid && true;
}

} // namespace OpenAPI
