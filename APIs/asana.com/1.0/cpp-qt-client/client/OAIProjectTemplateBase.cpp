/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTemplateBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTemplateBase::OAIProjectTemplateBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTemplateBase::OAIProjectTemplateBase() {
    this->initializeModel();
}

OAIProjectTemplateBase::~OAIProjectTemplateBase() {}

void OAIProjectTemplateBase::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_html_description_isSet = false;
    m_html_description_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_requested_dates_isSet = false;
    m_requested_dates_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIProjectTemplateBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTemplateBase::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_html_description_isValid = ::OpenAPI::fromJsonValue(m_html_description, json[QString("html_description")]);
    m_html_description_isSet = !json[QString("html_description")].isNull() && m_html_description_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_requested_dates_isValid = ::OpenAPI::fromJsonValue(m_requested_dates, json[QString("requested_dates")]);
    m_requested_dates_isSet = !json[QString("requested_dates")].isNull() && m_requested_dates_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIProjectTemplateBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTemplateBase::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_html_description_isSet) {
        obj.insert(QString("html_description"), ::OpenAPI::toJsonValue(m_html_description));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_requested_dates.size() > 0) {
        obj.insert(QString("requested_dates"), ::OpenAPI::toJsonValue(m_requested_dates));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QString OAIProjectTemplateBase::getGid() const {
    return m_gid;
}
void OAIProjectTemplateBase::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIProjectTemplateBase::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIProjectTemplateBase::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIProjectTemplateBase::getResourceType() const {
    return m_resource_type;
}
void OAIProjectTemplateBase::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIProjectTemplateBase::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIProjectTemplateBase::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIProjectTemplateBase::getName() const {
    return m_name;
}
void OAIProjectTemplateBase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectTemplateBase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectTemplateBase::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProjectTemplateBase::getColor() const {
    return m_color;
}
void OAIProjectTemplateBase::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIProjectTemplateBase::is_color_Set() const{
    return m_color_isSet;
}

bool OAIProjectTemplateBase::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIProjectTemplateBase::getDescription() const {
    return m_description;
}
void OAIProjectTemplateBase::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectTemplateBase::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectTemplateBase::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProjectTemplateBase::getHtmlDescription() const {
    return m_html_description;
}
void OAIProjectTemplateBase::setHtmlDescription(const QString &html_description) {
    m_html_description = html_description;
    m_html_description_isSet = true;
}

bool OAIProjectTemplateBase::is_html_description_Set() const{
    return m_html_description_isSet;
}

bool OAIProjectTemplateBase::is_html_description_Valid() const{
    return m_html_description_isValid;
}

OAIUserCompact OAIProjectTemplateBase::getOwner() const {
    return m_owner;
}
void OAIProjectTemplateBase::setOwner(const OAIUserCompact &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProjectTemplateBase::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProjectTemplateBase::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIProjectTemplateBase::isRPublic() const {
    return m_r_public;
}
void OAIProjectTemplateBase::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIProjectTemplateBase::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIProjectTemplateBase::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QList<OAIDateVariableCompact> OAIProjectTemplateBase::getRequestedDates() const {
    return m_requested_dates;
}
void OAIProjectTemplateBase::setRequestedDates(const QList<OAIDateVariableCompact> &requested_dates) {
    m_requested_dates = requested_dates;
    m_requested_dates_isSet = true;
}

bool OAIProjectTemplateBase::is_requested_dates_Set() const{
    return m_requested_dates_isSet;
}

bool OAIProjectTemplateBase::is_requested_dates_Valid() const{
    return m_requested_dates_isValid;
}

OAITeamCompact OAIProjectTemplateBase::getTeam() const {
    return m_team;
}
void OAIProjectTemplateBase::setTeam(const OAITeamCompact &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIProjectTemplateBase::is_team_Set() const{
    return m_team_isSet;
}

bool OAIProjectTemplateBase::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIProjectTemplateBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_dates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTemplateBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
