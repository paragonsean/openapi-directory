/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPortfoliosApi_H
#define OAI_OAIPortfoliosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddCustomFieldSettingForPortfolio_200_response.h"
#include "OAIAddCustomFieldSettingForPortfolio_request.h"
#include "OAIAddItemForPortfolio_request.h"
#include "OAIAddMembersForPortfolio_request.h"
#include "OAICreatePortfolio_201_response.h"
#include "OAICreatePortfolio_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIErrorResponse.h"
#include "OAIGetItemsForPortfolio_200_response.h"
#include "OAIGetPortfolios_200_response.h"
#include "OAIRemoveCustomFieldSettingForPortfolio_request.h"
#include "OAIRemoveItemForPortfolio_request.h"
#include "OAIRemoveMembersForPortfolio_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPortfoliosApi : public QObject {
    Q_OBJECT

public:
    OAIPortfoliosApi(const int timeOut = 0);
    ~OAIPortfoliosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  oai_add_custom_field_setting_for_portfolio_request OAIAddCustomFieldSettingForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    */
    virtual void addCustomFieldSettingForPortfolio(const QString &portfolio_gid, const OAIAddCustomFieldSettingForPortfolio_request &oai_add_custom_field_setting_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  oai_add_item_for_portfolio_request OAIAddItemForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addItemForPortfolio(const QString &portfolio_gid, const OAIAddItemForPortfolio_request &oai_add_item_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  oai_add_members_for_portfolio_request OAIAddMembersForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addMembersForPortfolio(const QString &portfolio_gid, const OAIAddMembersForPortfolio_request &oai_add_members_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_create_portfolio_request OAICreatePortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createPortfolio(const OAICreatePortfolio_request &oai_create_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deletePortfolio(const QString &portfolio_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getItemsForPortfolio(const QString &portfolio_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getPortfolio(const QString &portfolio_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  owner QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getPortfolios(const QString &workspace, const QString &owner, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  oai_remove_custom_field_setting_for_portfolio_request OAIRemoveCustomFieldSettingForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    */
    virtual void removeCustomFieldSettingForPortfolio(const QString &portfolio_gid, const OAIRemoveCustomFieldSettingForPortfolio_request &oai_remove_custom_field_setting_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  oai_remove_item_for_portfolio_request OAIRemoveItemForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeItemForPortfolio(const QString &portfolio_gid, const OAIRemoveItemForPortfolio_request &oai_remove_item_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  oai_remove_members_for_portfolio_request OAIRemoveMembersForPortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void removeMembersForPortfolio(const QString &portfolio_gid, const OAIRemoveMembersForPortfolio_request &oai_remove_members_for_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  portfolio_gid QString [required]
    * @param[in]  oai_create_portfolio_request OAICreatePortfolio_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updatePortfolio(const QString &portfolio_gid, const OAICreatePortfolio_request &oai_create_portfolio_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addCustomFieldSettingForPortfolioCallback(OAIHttpRequestWorker *worker);
    void addItemForPortfolioCallback(OAIHttpRequestWorker *worker);
    void addMembersForPortfolioCallback(OAIHttpRequestWorker *worker);
    void createPortfolioCallback(OAIHttpRequestWorker *worker);
    void deletePortfolioCallback(OAIHttpRequestWorker *worker);
    void getItemsForPortfolioCallback(OAIHttpRequestWorker *worker);
    void getPortfolioCallback(OAIHttpRequestWorker *worker);
    void getPortfoliosCallback(OAIHttpRequestWorker *worker);
    void removeCustomFieldSettingForPortfolioCallback(OAIHttpRequestWorker *worker);
    void removeItemForPortfolioCallback(OAIHttpRequestWorker *worker);
    void removeMembersForPortfolioCallback(OAIHttpRequestWorker *worker);
    void updatePortfolioCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addCustomFieldSettingForPortfolioSignal(OAIAddCustomFieldSettingForPortfolio_200_response summary);
    void addItemForPortfolioSignal(OAIDeleteAttachment_200_response summary);
    void addMembersForPortfolioSignal(OAICreatePortfolio_201_response summary);
    void createPortfolioSignal(OAICreatePortfolio_201_response summary);
    void deletePortfolioSignal(OAIDeleteAttachment_200_response summary);
    void getItemsForPortfolioSignal(OAIGetItemsForPortfolio_200_response summary);
    void getPortfolioSignal(OAICreatePortfolio_201_response summary);
    void getPortfoliosSignal(OAIGetPortfolios_200_response summary);
    void removeCustomFieldSettingForPortfolioSignal(OAIDeleteAttachment_200_response summary);
    void removeItemForPortfolioSignal(OAIDeleteAttachment_200_response summary);
    void removeMembersForPortfolioSignal(OAICreatePortfolio_201_response summary);
    void updatePortfolioSignal(OAICreatePortfolio_201_response summary);


    void addCustomFieldSettingForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIAddCustomFieldSettingForPortfolio_200_response summary);
    void addItemForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void addMembersForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAICreatePortfolio_201_response summary);
    void createPortfolioSignalFull(OAIHttpRequestWorker *worker, OAICreatePortfolio_201_response summary);
    void deletePortfolioSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void getItemsForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIGetItemsForPortfolio_200_response summary);
    void getPortfolioSignalFull(OAIHttpRequestWorker *worker, OAICreatePortfolio_201_response summary);
    void getPortfoliosSignalFull(OAIHttpRequestWorker *worker, OAIGetPortfolios_200_response summary);
    void removeCustomFieldSettingForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void removeItemForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void removeMembersForPortfolioSignalFull(OAIHttpRequestWorker *worker, OAICreatePortfolio_201_response summary);
    void updatePortfolioSignalFull(OAIHttpRequestWorker *worker, OAICreatePortfolio_201_response summary);

    Q_DECL_DEPRECATED_X("Use addCustomFieldSettingForPortfolioSignalError() instead")
    void addCustomFieldSettingForPortfolioSignalE(OAIAddCustomFieldSettingForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCustomFieldSettingForPortfolioSignalError(OAIAddCustomFieldSettingForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addItemForPortfolioSignalError() instead")
    void addItemForPortfolioSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addItemForPortfolioSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addMembersForPortfolioSignalError() instead")
    void addMembersForPortfolioSignalE(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addMembersForPortfolioSignalError(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPortfolioSignalError() instead")
    void createPortfolioSignalE(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPortfolioSignalError(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePortfolioSignalError() instead")
    void deletePortfolioSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePortfolioSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsForPortfolioSignalError() instead")
    void getItemsForPortfolioSignalE(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsForPortfolioSignalError(OAIGetItemsForPortfolio_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioSignalError() instead")
    void getPortfolioSignalE(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioSignalError(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfoliosSignalError() instead")
    void getPortfoliosSignalE(OAIGetPortfolios_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfoliosSignalError(OAIGetPortfolios_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomFieldSettingForPortfolioSignalError() instead")
    void removeCustomFieldSettingForPortfolioSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomFieldSettingForPortfolioSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeItemForPortfolioSignalError() instead")
    void removeItemForPortfolioSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeItemForPortfolioSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMembersForPortfolioSignalError() instead")
    void removeMembersForPortfolioSignalE(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMembersForPortfolioSignalError(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePortfolioSignalError() instead")
    void updatePortfolioSignalE(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePortfolioSignalError(OAICreatePortfolio_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addCustomFieldSettingForPortfolioSignalErrorFull() instead")
    void addCustomFieldSettingForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCustomFieldSettingForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addItemForPortfolioSignalErrorFull() instead")
    void addItemForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addItemForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addMembersForPortfolioSignalErrorFull() instead")
    void addMembersForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addMembersForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPortfolioSignalErrorFull() instead")
    void createPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePortfolioSignalErrorFull() instead")
    void deletePortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsForPortfolioSignalErrorFull() instead")
    void getItemsForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioSignalErrorFull() instead")
    void getPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfoliosSignalErrorFull() instead")
    void getPortfoliosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfoliosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomFieldSettingForPortfolioSignalErrorFull() instead")
    void removeCustomFieldSettingForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomFieldSettingForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeItemForPortfolioSignalErrorFull() instead")
    void removeItemForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeItemForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMembersForPortfolioSignalErrorFull() instead")
    void removeMembersForPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMembersForPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePortfolioSignalErrorFull() instead")
    void updatePortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
