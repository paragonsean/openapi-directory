/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoryResponse::OAIStoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoryResponse::OAIStoryResponse() {
    this->initializeModel();
}

OAIStoryResponse::~OAIStoryResponse() {}

void OAIStoryResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_html_text_isSet = false;
    m_html_text_isValid = false;

    m_is_pinned_isSet = false;
    m_is_pinned_isValid = false;

    m_resource_subtype_isSet = false;
    m_resource_subtype_isValid = false;

    m_sticker_name_isSet = false;
    m_sticker_name_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_custom_field_isSet = false;
    m_custom_field_isValid = false;

    m_dependency_isSet = false;
    m_dependency_isValid = false;

    m_duplicate_of_isSet = false;
    m_duplicate_of_isValid = false;

    m_duplicated_from_isSet = false;
    m_duplicated_from_isValid = false;

    m_follower_isSet = false;
    m_follower_isValid = false;

    m_hearted_isSet = false;
    m_hearted_isValid = false;

    m_hearts_isSet = false;
    m_hearts_isValid = false;

    m_is_editable_isSet = false;
    m_is_editable_isValid = false;

    m_is_edited_isSet = false;
    m_is_edited_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_new_approval_status_isSet = false;
    m_new_approval_status_isValid = false;

    m_new_date_value_isSet = false;
    m_new_date_value_isValid = false;

    m_new_dates_isSet = false;
    m_new_dates_isValid = false;

    m_new_enum_value_isSet = false;
    m_new_enum_value_isValid = false;

    m_new_multi_enum_values_isSet = false;
    m_new_multi_enum_values_isValid = false;

    m_new_name_isSet = false;
    m_new_name_isValid = false;

    m_new_number_value_isSet = false;
    m_new_number_value_isValid = false;

    m_new_people_value_isSet = false;
    m_new_people_value_isValid = false;

    m_new_resource_subtype_isSet = false;
    m_new_resource_subtype_isValid = false;

    m_new_section_isSet = false;
    m_new_section_isValid = false;

    m_new_text_value_isSet = false;
    m_new_text_value_isValid = false;

    m_num_hearts_isSet = false;
    m_num_hearts_isValid = false;

    m_num_likes_isSet = false;
    m_num_likes_isValid = false;

    m_old_approval_status_isSet = false;
    m_old_approval_status_isValid = false;

    m_old_date_value_isSet = false;
    m_old_date_value_isValid = false;

    m_old_dates_isSet = false;
    m_old_dates_isValid = false;

    m_old_enum_value_isSet = false;
    m_old_enum_value_isValid = false;

    m_old_multi_enum_values_isSet = false;
    m_old_multi_enum_values_isValid = false;

    m_old_name_isSet = false;
    m_old_name_isValid = false;

    m_old_number_value_isSet = false;
    m_old_number_value_isValid = false;

    m_old_people_value_isSet = false;
    m_old_people_value_isValid = false;

    m_old_resource_subtype_isSet = false;
    m_old_resource_subtype_isValid = false;

    m_old_section_isSet = false;
    m_old_section_isValid = false;

    m_old_text_value_isSet = false;
    m_old_text_value_isValid = false;

    m_previews_isSet = false;
    m_previews_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_story_isSet = false;
    m_story_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoryResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_html_text_isValid = ::OpenAPI::fromJsonValue(m_html_text, json[QString("html_text")]);
    m_html_text_isSet = !json[QString("html_text")].isNull() && m_html_text_isValid;

    m_is_pinned_isValid = ::OpenAPI::fromJsonValue(m_is_pinned, json[QString("is_pinned")]);
    m_is_pinned_isSet = !json[QString("is_pinned")].isNull() && m_is_pinned_isValid;

    m_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_resource_subtype, json[QString("resource_subtype")]);
    m_resource_subtype_isSet = !json[QString("resource_subtype")].isNull() && m_resource_subtype_isValid;

    m_sticker_name_isValid = ::OpenAPI::fromJsonValue(m_sticker_name, json[QString("sticker_name")]);
    m_sticker_name_isSet = !json[QString("sticker_name")].isNull() && m_sticker_name_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_custom_field_isValid = ::OpenAPI::fromJsonValue(m_custom_field, json[QString("custom_field")]);
    m_custom_field_isSet = !json[QString("custom_field")].isNull() && m_custom_field_isValid;

    m_dependency_isValid = ::OpenAPI::fromJsonValue(m_dependency, json[QString("dependency")]);
    m_dependency_isSet = !json[QString("dependency")].isNull() && m_dependency_isValid;

    m_duplicate_of_isValid = ::OpenAPI::fromJsonValue(m_duplicate_of, json[QString("duplicate_of")]);
    m_duplicate_of_isSet = !json[QString("duplicate_of")].isNull() && m_duplicate_of_isValid;

    m_duplicated_from_isValid = ::OpenAPI::fromJsonValue(m_duplicated_from, json[QString("duplicated_from")]);
    m_duplicated_from_isSet = !json[QString("duplicated_from")].isNull() && m_duplicated_from_isValid;

    m_follower_isValid = ::OpenAPI::fromJsonValue(m_follower, json[QString("follower")]);
    m_follower_isSet = !json[QString("follower")].isNull() && m_follower_isValid;

    m_hearted_isValid = ::OpenAPI::fromJsonValue(m_hearted, json[QString("hearted")]);
    m_hearted_isSet = !json[QString("hearted")].isNull() && m_hearted_isValid;

    m_hearts_isValid = ::OpenAPI::fromJsonValue(m_hearts, json[QString("hearts")]);
    m_hearts_isSet = !json[QString("hearts")].isNull() && m_hearts_isValid;

    m_is_editable_isValid = ::OpenAPI::fromJsonValue(m_is_editable, json[QString("is_editable")]);
    m_is_editable_isSet = !json[QString("is_editable")].isNull() && m_is_editable_isValid;

    m_is_edited_isValid = ::OpenAPI::fromJsonValue(m_is_edited, json[QString("is_edited")]);
    m_is_edited_isSet = !json[QString("is_edited")].isNull() && m_is_edited_isValid;

    m_liked_isValid = ::OpenAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_new_approval_status_isValid = ::OpenAPI::fromJsonValue(m_new_approval_status, json[QString("new_approval_status")]);
    m_new_approval_status_isSet = !json[QString("new_approval_status")].isNull() && m_new_approval_status_isValid;

    m_new_date_value_isValid = ::OpenAPI::fromJsonValue(m_new_date_value, json[QString("new_date_value")]);
    m_new_date_value_isSet = !json[QString("new_date_value")].isNull() && m_new_date_value_isValid;

    m_new_dates_isValid = ::OpenAPI::fromJsonValue(m_new_dates, json[QString("new_dates")]);
    m_new_dates_isSet = !json[QString("new_dates")].isNull() && m_new_dates_isValid;

    m_new_enum_value_isValid = ::OpenAPI::fromJsonValue(m_new_enum_value, json[QString("new_enum_value")]);
    m_new_enum_value_isSet = !json[QString("new_enum_value")].isNull() && m_new_enum_value_isValid;

    m_new_multi_enum_values_isValid = ::OpenAPI::fromJsonValue(m_new_multi_enum_values, json[QString("new_multi_enum_values")]);
    m_new_multi_enum_values_isSet = !json[QString("new_multi_enum_values")].isNull() && m_new_multi_enum_values_isValid;

    m_new_name_isValid = ::OpenAPI::fromJsonValue(m_new_name, json[QString("new_name")]);
    m_new_name_isSet = !json[QString("new_name")].isNull() && m_new_name_isValid;

    m_new_number_value_isValid = ::OpenAPI::fromJsonValue(m_new_number_value, json[QString("new_number_value")]);
    m_new_number_value_isSet = !json[QString("new_number_value")].isNull() && m_new_number_value_isValid;

    m_new_people_value_isValid = ::OpenAPI::fromJsonValue(m_new_people_value, json[QString("new_people_value")]);
    m_new_people_value_isSet = !json[QString("new_people_value")].isNull() && m_new_people_value_isValid;

    m_new_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_new_resource_subtype, json[QString("new_resource_subtype")]);
    m_new_resource_subtype_isSet = !json[QString("new_resource_subtype")].isNull() && m_new_resource_subtype_isValid;

    m_new_section_isValid = ::OpenAPI::fromJsonValue(m_new_section, json[QString("new_section")]);
    m_new_section_isSet = !json[QString("new_section")].isNull() && m_new_section_isValid;

    m_new_text_value_isValid = ::OpenAPI::fromJsonValue(m_new_text_value, json[QString("new_text_value")]);
    m_new_text_value_isSet = !json[QString("new_text_value")].isNull() && m_new_text_value_isValid;

    m_num_hearts_isValid = ::OpenAPI::fromJsonValue(m_num_hearts, json[QString("num_hearts")]);
    m_num_hearts_isSet = !json[QString("num_hearts")].isNull() && m_num_hearts_isValid;

    m_num_likes_isValid = ::OpenAPI::fromJsonValue(m_num_likes, json[QString("num_likes")]);
    m_num_likes_isSet = !json[QString("num_likes")].isNull() && m_num_likes_isValid;

    m_old_approval_status_isValid = ::OpenAPI::fromJsonValue(m_old_approval_status, json[QString("old_approval_status")]);
    m_old_approval_status_isSet = !json[QString("old_approval_status")].isNull() && m_old_approval_status_isValid;

    m_old_date_value_isValid = ::OpenAPI::fromJsonValue(m_old_date_value, json[QString("old_date_value")]);
    m_old_date_value_isSet = !json[QString("old_date_value")].isNull() && m_old_date_value_isValid;

    m_old_dates_isValid = ::OpenAPI::fromJsonValue(m_old_dates, json[QString("old_dates")]);
    m_old_dates_isSet = !json[QString("old_dates")].isNull() && m_old_dates_isValid;

    m_old_enum_value_isValid = ::OpenAPI::fromJsonValue(m_old_enum_value, json[QString("old_enum_value")]);
    m_old_enum_value_isSet = !json[QString("old_enum_value")].isNull() && m_old_enum_value_isValid;

    m_old_multi_enum_values_isValid = ::OpenAPI::fromJsonValue(m_old_multi_enum_values, json[QString("old_multi_enum_values")]);
    m_old_multi_enum_values_isSet = !json[QString("old_multi_enum_values")].isNull() && m_old_multi_enum_values_isValid;

    m_old_name_isValid = ::OpenAPI::fromJsonValue(m_old_name, json[QString("old_name")]);
    m_old_name_isSet = !json[QString("old_name")].isNull() && m_old_name_isValid;

    m_old_number_value_isValid = ::OpenAPI::fromJsonValue(m_old_number_value, json[QString("old_number_value")]);
    m_old_number_value_isSet = !json[QString("old_number_value")].isNull() && m_old_number_value_isValid;

    m_old_people_value_isValid = ::OpenAPI::fromJsonValue(m_old_people_value, json[QString("old_people_value")]);
    m_old_people_value_isSet = !json[QString("old_people_value")].isNull() && m_old_people_value_isValid;

    m_old_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_old_resource_subtype, json[QString("old_resource_subtype")]);
    m_old_resource_subtype_isSet = !json[QString("old_resource_subtype")].isNull() && m_old_resource_subtype_isValid;

    m_old_section_isValid = ::OpenAPI::fromJsonValue(m_old_section, json[QString("old_section")]);
    m_old_section_isSet = !json[QString("old_section")].isNull() && m_old_section_isValid;

    m_old_text_value_isValid = ::OpenAPI::fromJsonValue(m_old_text_value, json[QString("old_text_value")]);
    m_old_text_value_isSet = !json[QString("old_text_value")].isNull() && m_old_text_value_isValid;

    m_previews_isValid = ::OpenAPI::fromJsonValue(m_previews, json[QString("previews")]);
    m_previews_isSet = !json[QString("previews")].isNull() && m_previews_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_story_isValid = ::OpenAPI::fromJsonValue(m_story, json[QString("story")]);
    m_story_isSet = !json[QString("story")].isNull() && m_story_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_html_text_isSet) {
        obj.insert(QString("html_text"), ::OpenAPI::toJsonValue(m_html_text));
    }
    if (m_is_pinned_isSet) {
        obj.insert(QString("is_pinned"), ::OpenAPI::toJsonValue(m_is_pinned));
    }
    if (m_resource_subtype_isSet) {
        obj.insert(QString("resource_subtype"), ::OpenAPI::toJsonValue(m_resource_subtype));
    }
    if (m_sticker_name_isSet) {
        obj.insert(QString("sticker_name"), ::OpenAPI::toJsonValue(m_sticker_name));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_custom_field.isSet()) {
        obj.insert(QString("custom_field"), ::OpenAPI::toJsonValue(m_custom_field));
    }
    if (m_dependency.isSet()) {
        obj.insert(QString("dependency"), ::OpenAPI::toJsonValue(m_dependency));
    }
    if (m_duplicate_of.isSet()) {
        obj.insert(QString("duplicate_of"), ::OpenAPI::toJsonValue(m_duplicate_of));
    }
    if (m_duplicated_from.isSet()) {
        obj.insert(QString("duplicated_from"), ::OpenAPI::toJsonValue(m_duplicated_from));
    }
    if (m_follower.isSet()) {
        obj.insert(QString("follower"), ::OpenAPI::toJsonValue(m_follower));
    }
    if (m_hearted_isSet) {
        obj.insert(QString("hearted"), ::OpenAPI::toJsonValue(m_hearted));
    }
    if (m_hearts.size() > 0) {
        obj.insert(QString("hearts"), ::OpenAPI::toJsonValue(m_hearts));
    }
    if (m_is_editable_isSet) {
        obj.insert(QString("is_editable"), ::OpenAPI::toJsonValue(m_is_editable));
    }
    if (m_is_edited_isSet) {
        obj.insert(QString("is_edited"), ::OpenAPI::toJsonValue(m_is_edited));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::OpenAPI::toJsonValue(m_liked));
    }
    if (m_likes.size() > 0) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_new_approval_status_isSet) {
        obj.insert(QString("new_approval_status"), ::OpenAPI::toJsonValue(m_new_approval_status));
    }
    if (m_new_date_value.isSet()) {
        obj.insert(QString("new_date_value"), ::OpenAPI::toJsonValue(m_new_date_value));
    }
    if (m_new_dates.isSet()) {
        obj.insert(QString("new_dates"), ::OpenAPI::toJsonValue(m_new_dates));
    }
    if (m_new_enum_value.isSet()) {
        obj.insert(QString("new_enum_value"), ::OpenAPI::toJsonValue(m_new_enum_value));
    }
    if (m_new_multi_enum_values.size() > 0) {
        obj.insert(QString("new_multi_enum_values"), ::OpenAPI::toJsonValue(m_new_multi_enum_values));
    }
    if (m_new_name_isSet) {
        obj.insert(QString("new_name"), ::OpenAPI::toJsonValue(m_new_name));
    }
    if (m_new_number_value_isSet) {
        obj.insert(QString("new_number_value"), ::OpenAPI::toJsonValue(m_new_number_value));
    }
    if (m_new_people_value.size() > 0) {
        obj.insert(QString("new_people_value"), ::OpenAPI::toJsonValue(m_new_people_value));
    }
    if (m_new_resource_subtype_isSet) {
        obj.insert(QString("new_resource_subtype"), ::OpenAPI::toJsonValue(m_new_resource_subtype));
    }
    if (m_new_section.isSet()) {
        obj.insert(QString("new_section"), ::OpenAPI::toJsonValue(m_new_section));
    }
    if (m_new_text_value_isSet) {
        obj.insert(QString("new_text_value"), ::OpenAPI::toJsonValue(m_new_text_value));
    }
    if (m_num_hearts_isSet) {
        obj.insert(QString("num_hearts"), ::OpenAPI::toJsonValue(m_num_hearts));
    }
    if (m_num_likes_isSet) {
        obj.insert(QString("num_likes"), ::OpenAPI::toJsonValue(m_num_likes));
    }
    if (m_old_approval_status_isSet) {
        obj.insert(QString("old_approval_status"), ::OpenAPI::toJsonValue(m_old_approval_status));
    }
    if (m_old_date_value.isSet()) {
        obj.insert(QString("old_date_value"), ::OpenAPI::toJsonValue(m_old_date_value));
    }
    if (m_old_dates.isSet()) {
        obj.insert(QString("old_dates"), ::OpenAPI::toJsonValue(m_old_dates));
    }
    if (m_old_enum_value.isSet()) {
        obj.insert(QString("old_enum_value"), ::OpenAPI::toJsonValue(m_old_enum_value));
    }
    if (m_old_multi_enum_values.size() > 0) {
        obj.insert(QString("old_multi_enum_values"), ::OpenAPI::toJsonValue(m_old_multi_enum_values));
    }
    if (m_old_name_isSet) {
        obj.insert(QString("old_name"), ::OpenAPI::toJsonValue(m_old_name));
    }
    if (m_old_number_value_isSet) {
        obj.insert(QString("old_number_value"), ::OpenAPI::toJsonValue(m_old_number_value));
    }
    if (m_old_people_value.size() > 0) {
        obj.insert(QString("old_people_value"), ::OpenAPI::toJsonValue(m_old_people_value));
    }
    if (m_old_resource_subtype_isSet) {
        obj.insert(QString("old_resource_subtype"), ::OpenAPI::toJsonValue(m_old_resource_subtype));
    }
    if (m_old_section.isSet()) {
        obj.insert(QString("old_section"), ::OpenAPI::toJsonValue(m_old_section));
    }
    if (m_old_text_value_isSet) {
        obj.insert(QString("old_text_value"), ::OpenAPI::toJsonValue(m_old_text_value));
    }
    if (m_previews.size() > 0) {
        obj.insert(QString("previews"), ::OpenAPI::toJsonValue(m_previews));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_story.isSet()) {
        obj.insert(QString("story"), ::OpenAPI::toJsonValue(m_story));
    }
    if (m_tag.isSet()) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_task.isSet()) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIStoryResponse::getGid() const {
    return m_gid;
}
void OAIStoryResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIStoryResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIStoryResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIStoryResponse::getResourceType() const {
    return m_resource_type;
}
void OAIStoryResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStoryResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStoryResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QDateTime OAIStoryResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIStoryResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStoryResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStoryResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStoryResponse::getHtmlText() const {
    return m_html_text;
}
void OAIStoryResponse::setHtmlText(const QString &html_text) {
    m_html_text = html_text;
    m_html_text_isSet = true;
}

bool OAIStoryResponse::is_html_text_Set() const{
    return m_html_text_isSet;
}

bool OAIStoryResponse::is_html_text_Valid() const{
    return m_html_text_isValid;
}

bool OAIStoryResponse::isIsPinned() const {
    return m_is_pinned;
}
void OAIStoryResponse::setIsPinned(const bool &is_pinned) {
    m_is_pinned = is_pinned;
    m_is_pinned_isSet = true;
}

bool OAIStoryResponse::is_is_pinned_Set() const{
    return m_is_pinned_isSet;
}

bool OAIStoryResponse::is_is_pinned_Valid() const{
    return m_is_pinned_isValid;
}

QString OAIStoryResponse::getResourceSubtype() const {
    return m_resource_subtype;
}
void OAIStoryResponse::setResourceSubtype(const QString &resource_subtype) {
    m_resource_subtype = resource_subtype;
    m_resource_subtype_isSet = true;
}

bool OAIStoryResponse::is_resource_subtype_Set() const{
    return m_resource_subtype_isSet;
}

bool OAIStoryResponse::is_resource_subtype_Valid() const{
    return m_resource_subtype_isValid;
}

QString OAIStoryResponse::getStickerName() const {
    return m_sticker_name;
}
void OAIStoryResponse::setStickerName(const QString &sticker_name) {
    m_sticker_name = sticker_name;
    m_sticker_name_isSet = true;
}

bool OAIStoryResponse::is_sticker_name_Set() const{
    return m_sticker_name_isSet;
}

bool OAIStoryResponse::is_sticker_name_Valid() const{
    return m_sticker_name_isValid;
}

QString OAIStoryResponse::getText() const {
    return m_text;
}
void OAIStoryResponse::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIStoryResponse::is_text_Set() const{
    return m_text_isSet;
}

bool OAIStoryResponse::is_text_Valid() const{
    return m_text_isValid;
}

OAIUserCompact OAIStoryResponse::getAssignee() const {
    return m_assignee;
}
void OAIStoryResponse::setAssignee(const OAIUserCompact &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIStoryResponse::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIStoryResponse::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAIUserCompact OAIStoryResponse::getCreatedBy() const {
    return m_created_by;
}
void OAIStoryResponse::setCreatedBy(const OAIUserCompact &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStoryResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStoryResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAICustomFieldCompact OAIStoryResponse::getCustomField() const {
    return m_custom_field;
}
void OAIStoryResponse::setCustomField(const OAICustomFieldCompact &custom_field) {
    m_custom_field = custom_field;
    m_custom_field_isSet = true;
}

bool OAIStoryResponse::is_custom_field_Set() const{
    return m_custom_field_isSet;
}

bool OAIStoryResponse::is_custom_field_Valid() const{
    return m_custom_field_isValid;
}

OAITaskCompact OAIStoryResponse::getDependency() const {
    return m_dependency;
}
void OAIStoryResponse::setDependency(const OAITaskCompact &dependency) {
    m_dependency = dependency;
    m_dependency_isSet = true;
}

bool OAIStoryResponse::is_dependency_Set() const{
    return m_dependency_isSet;
}

bool OAIStoryResponse::is_dependency_Valid() const{
    return m_dependency_isValid;
}

OAITaskCompact OAIStoryResponse::getDuplicateOf() const {
    return m_duplicate_of;
}
void OAIStoryResponse::setDuplicateOf(const OAITaskCompact &duplicate_of) {
    m_duplicate_of = duplicate_of;
    m_duplicate_of_isSet = true;
}

bool OAIStoryResponse::is_duplicate_of_Set() const{
    return m_duplicate_of_isSet;
}

bool OAIStoryResponse::is_duplicate_of_Valid() const{
    return m_duplicate_of_isValid;
}

OAITaskCompact OAIStoryResponse::getDuplicatedFrom() const {
    return m_duplicated_from;
}
void OAIStoryResponse::setDuplicatedFrom(const OAITaskCompact &duplicated_from) {
    m_duplicated_from = duplicated_from;
    m_duplicated_from_isSet = true;
}

bool OAIStoryResponse::is_duplicated_from_Set() const{
    return m_duplicated_from_isSet;
}

bool OAIStoryResponse::is_duplicated_from_Valid() const{
    return m_duplicated_from_isValid;
}

OAIUserCompact OAIStoryResponse::getFollower() const {
    return m_follower;
}
void OAIStoryResponse::setFollower(const OAIUserCompact &follower) {
    m_follower = follower;
    m_follower_isSet = true;
}

bool OAIStoryResponse::is_follower_Set() const{
    return m_follower_isSet;
}

bool OAIStoryResponse::is_follower_Valid() const{
    return m_follower_isValid;
}

bool OAIStoryResponse::isHearted() const {
    return m_hearted;
}
void OAIStoryResponse::setHearted(const bool &hearted) {
    m_hearted = hearted;
    m_hearted_isSet = true;
}

bool OAIStoryResponse::is_hearted_Set() const{
    return m_hearted_isSet;
}

bool OAIStoryResponse::is_hearted_Valid() const{
    return m_hearted_isValid;
}

QList<OAILike> OAIStoryResponse::getHearts() const {
    return m_hearts;
}
void OAIStoryResponse::setHearts(const QList<OAILike> &hearts) {
    m_hearts = hearts;
    m_hearts_isSet = true;
}

bool OAIStoryResponse::is_hearts_Set() const{
    return m_hearts_isSet;
}

bool OAIStoryResponse::is_hearts_Valid() const{
    return m_hearts_isValid;
}

bool OAIStoryResponse::isIsEditable() const {
    return m_is_editable;
}
void OAIStoryResponse::setIsEditable(const bool &is_editable) {
    m_is_editable = is_editable;
    m_is_editable_isSet = true;
}

bool OAIStoryResponse::is_is_editable_Set() const{
    return m_is_editable_isSet;
}

bool OAIStoryResponse::is_is_editable_Valid() const{
    return m_is_editable_isValid;
}

bool OAIStoryResponse::isIsEdited() const {
    return m_is_edited;
}
void OAIStoryResponse::setIsEdited(const bool &is_edited) {
    m_is_edited = is_edited;
    m_is_edited_isSet = true;
}

bool OAIStoryResponse::is_is_edited_Set() const{
    return m_is_edited_isSet;
}

bool OAIStoryResponse::is_is_edited_Valid() const{
    return m_is_edited_isValid;
}

bool OAIStoryResponse::isLiked() const {
    return m_liked;
}
void OAIStoryResponse::setLiked(const bool &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool OAIStoryResponse::is_liked_Set() const{
    return m_liked_isSet;
}

bool OAIStoryResponse::is_liked_Valid() const{
    return m_liked_isValid;
}

QList<OAILike> OAIStoryResponse::getLikes() const {
    return m_likes;
}
void OAIStoryResponse::setLikes(const QList<OAILike> &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIStoryResponse::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIStoryResponse::is_likes_Valid() const{
    return m_likes_isValid;
}

QString OAIStoryResponse::getNewApprovalStatus() const {
    return m_new_approval_status;
}
void OAIStoryResponse::setNewApprovalStatus(const QString &new_approval_status) {
    m_new_approval_status = new_approval_status;
    m_new_approval_status_isSet = true;
}

bool OAIStoryResponse::is_new_approval_status_Set() const{
    return m_new_approval_status_isSet;
}

bool OAIStoryResponse::is_new_approval_status_Valid() const{
    return m_new_approval_status_isValid;
}

OAIStoryResponse_allOf_new_date_value OAIStoryResponse::getNewDateValue() const {
    return m_new_date_value;
}
void OAIStoryResponse::setNewDateValue(const OAIStoryResponse_allOf_new_date_value &new_date_value) {
    m_new_date_value = new_date_value;
    m_new_date_value_isSet = true;
}

bool OAIStoryResponse::is_new_date_value_Set() const{
    return m_new_date_value_isSet;
}

bool OAIStoryResponse::is_new_date_value_Valid() const{
    return m_new_date_value_isValid;
}

OAIStoryResponseDates OAIStoryResponse::getNewDates() const {
    return m_new_dates;
}
void OAIStoryResponse::setNewDates(const OAIStoryResponseDates &new_dates) {
    m_new_dates = new_dates;
    m_new_dates_isSet = true;
}

bool OAIStoryResponse::is_new_dates_Set() const{
    return m_new_dates_isSet;
}

bool OAIStoryResponse::is_new_dates_Valid() const{
    return m_new_dates_isValid;
}

OAIEnumOption OAIStoryResponse::getNewEnumValue() const {
    return m_new_enum_value;
}
void OAIStoryResponse::setNewEnumValue(const OAIEnumOption &new_enum_value) {
    m_new_enum_value = new_enum_value;
    m_new_enum_value_isSet = true;
}

bool OAIStoryResponse::is_new_enum_value_Set() const{
    return m_new_enum_value_isSet;
}

bool OAIStoryResponse::is_new_enum_value_Valid() const{
    return m_new_enum_value_isValid;
}

QList<OAIEnumOption> OAIStoryResponse::getNewMultiEnumValues() const {
    return m_new_multi_enum_values;
}
void OAIStoryResponse::setNewMultiEnumValues(const QList<OAIEnumOption> &new_multi_enum_values) {
    m_new_multi_enum_values = new_multi_enum_values;
    m_new_multi_enum_values_isSet = true;
}

bool OAIStoryResponse::is_new_multi_enum_values_Set() const{
    return m_new_multi_enum_values_isSet;
}

bool OAIStoryResponse::is_new_multi_enum_values_Valid() const{
    return m_new_multi_enum_values_isValid;
}

QString OAIStoryResponse::getNewName() const {
    return m_new_name;
}
void OAIStoryResponse::setNewName(const QString &new_name) {
    m_new_name = new_name;
    m_new_name_isSet = true;
}

bool OAIStoryResponse::is_new_name_Set() const{
    return m_new_name_isSet;
}

bool OAIStoryResponse::is_new_name_Valid() const{
    return m_new_name_isValid;
}

qint32 OAIStoryResponse::getNewNumberValue() const {
    return m_new_number_value;
}
void OAIStoryResponse::setNewNumberValue(const qint32 &new_number_value) {
    m_new_number_value = new_number_value;
    m_new_number_value_isSet = true;
}

bool OAIStoryResponse::is_new_number_value_Set() const{
    return m_new_number_value_isSet;
}

bool OAIStoryResponse::is_new_number_value_Valid() const{
    return m_new_number_value_isValid;
}

QList<OAIUserCompact> OAIStoryResponse::getNewPeopleValue() const {
    return m_new_people_value;
}
void OAIStoryResponse::setNewPeopleValue(const QList<OAIUserCompact> &new_people_value) {
    m_new_people_value = new_people_value;
    m_new_people_value_isSet = true;
}

bool OAIStoryResponse::is_new_people_value_Set() const{
    return m_new_people_value_isSet;
}

bool OAIStoryResponse::is_new_people_value_Valid() const{
    return m_new_people_value_isValid;
}

QString OAIStoryResponse::getNewResourceSubtype() const {
    return m_new_resource_subtype;
}
void OAIStoryResponse::setNewResourceSubtype(const QString &new_resource_subtype) {
    m_new_resource_subtype = new_resource_subtype;
    m_new_resource_subtype_isSet = true;
}

bool OAIStoryResponse::is_new_resource_subtype_Set() const{
    return m_new_resource_subtype_isSet;
}

bool OAIStoryResponse::is_new_resource_subtype_Valid() const{
    return m_new_resource_subtype_isValid;
}

OAISectionCompact OAIStoryResponse::getNewSection() const {
    return m_new_section;
}
void OAIStoryResponse::setNewSection(const OAISectionCompact &new_section) {
    m_new_section = new_section;
    m_new_section_isSet = true;
}

bool OAIStoryResponse::is_new_section_Set() const{
    return m_new_section_isSet;
}

bool OAIStoryResponse::is_new_section_Valid() const{
    return m_new_section_isValid;
}

QString OAIStoryResponse::getNewTextValue() const {
    return m_new_text_value;
}
void OAIStoryResponse::setNewTextValue(const QString &new_text_value) {
    m_new_text_value = new_text_value;
    m_new_text_value_isSet = true;
}

bool OAIStoryResponse::is_new_text_value_Set() const{
    return m_new_text_value_isSet;
}

bool OAIStoryResponse::is_new_text_value_Valid() const{
    return m_new_text_value_isValid;
}

qint32 OAIStoryResponse::getNumHearts() const {
    return m_num_hearts;
}
void OAIStoryResponse::setNumHearts(const qint32 &num_hearts) {
    m_num_hearts = num_hearts;
    m_num_hearts_isSet = true;
}

bool OAIStoryResponse::is_num_hearts_Set() const{
    return m_num_hearts_isSet;
}

bool OAIStoryResponse::is_num_hearts_Valid() const{
    return m_num_hearts_isValid;
}

qint32 OAIStoryResponse::getNumLikes() const {
    return m_num_likes;
}
void OAIStoryResponse::setNumLikes(const qint32 &num_likes) {
    m_num_likes = num_likes;
    m_num_likes_isSet = true;
}

bool OAIStoryResponse::is_num_likes_Set() const{
    return m_num_likes_isSet;
}

bool OAIStoryResponse::is_num_likes_Valid() const{
    return m_num_likes_isValid;
}

QString OAIStoryResponse::getOldApprovalStatus() const {
    return m_old_approval_status;
}
void OAIStoryResponse::setOldApprovalStatus(const QString &old_approval_status) {
    m_old_approval_status = old_approval_status;
    m_old_approval_status_isSet = true;
}

bool OAIStoryResponse::is_old_approval_status_Set() const{
    return m_old_approval_status_isSet;
}

bool OAIStoryResponse::is_old_approval_status_Valid() const{
    return m_old_approval_status_isValid;
}

OAIStoryResponse_allOf_old_date_value OAIStoryResponse::getOldDateValue() const {
    return m_old_date_value;
}
void OAIStoryResponse::setOldDateValue(const OAIStoryResponse_allOf_old_date_value &old_date_value) {
    m_old_date_value = old_date_value;
    m_old_date_value_isSet = true;
}

bool OAIStoryResponse::is_old_date_value_Set() const{
    return m_old_date_value_isSet;
}

bool OAIStoryResponse::is_old_date_value_Valid() const{
    return m_old_date_value_isValid;
}

OAIStoryResponseDates OAIStoryResponse::getOldDates() const {
    return m_old_dates;
}
void OAIStoryResponse::setOldDates(const OAIStoryResponseDates &old_dates) {
    m_old_dates = old_dates;
    m_old_dates_isSet = true;
}

bool OAIStoryResponse::is_old_dates_Set() const{
    return m_old_dates_isSet;
}

bool OAIStoryResponse::is_old_dates_Valid() const{
    return m_old_dates_isValid;
}

OAIEnumOption OAIStoryResponse::getOldEnumValue() const {
    return m_old_enum_value;
}
void OAIStoryResponse::setOldEnumValue(const OAIEnumOption &old_enum_value) {
    m_old_enum_value = old_enum_value;
    m_old_enum_value_isSet = true;
}

bool OAIStoryResponse::is_old_enum_value_Set() const{
    return m_old_enum_value_isSet;
}

bool OAIStoryResponse::is_old_enum_value_Valid() const{
    return m_old_enum_value_isValid;
}

QList<OAIEnumOption> OAIStoryResponse::getOldMultiEnumValues() const {
    return m_old_multi_enum_values;
}
void OAIStoryResponse::setOldMultiEnumValues(const QList<OAIEnumOption> &old_multi_enum_values) {
    m_old_multi_enum_values = old_multi_enum_values;
    m_old_multi_enum_values_isSet = true;
}

bool OAIStoryResponse::is_old_multi_enum_values_Set() const{
    return m_old_multi_enum_values_isSet;
}

bool OAIStoryResponse::is_old_multi_enum_values_Valid() const{
    return m_old_multi_enum_values_isValid;
}

QString OAIStoryResponse::getOldName() const {
    return m_old_name;
}
void OAIStoryResponse::setOldName(const QString &old_name) {
    m_old_name = old_name;
    m_old_name_isSet = true;
}

bool OAIStoryResponse::is_old_name_Set() const{
    return m_old_name_isSet;
}

bool OAIStoryResponse::is_old_name_Valid() const{
    return m_old_name_isValid;
}

qint32 OAIStoryResponse::getOldNumberValue() const {
    return m_old_number_value;
}
void OAIStoryResponse::setOldNumberValue(const qint32 &old_number_value) {
    m_old_number_value = old_number_value;
    m_old_number_value_isSet = true;
}

bool OAIStoryResponse::is_old_number_value_Set() const{
    return m_old_number_value_isSet;
}

bool OAIStoryResponse::is_old_number_value_Valid() const{
    return m_old_number_value_isValid;
}

QList<OAIUserCompact> OAIStoryResponse::getOldPeopleValue() const {
    return m_old_people_value;
}
void OAIStoryResponse::setOldPeopleValue(const QList<OAIUserCompact> &old_people_value) {
    m_old_people_value = old_people_value;
    m_old_people_value_isSet = true;
}

bool OAIStoryResponse::is_old_people_value_Set() const{
    return m_old_people_value_isSet;
}

bool OAIStoryResponse::is_old_people_value_Valid() const{
    return m_old_people_value_isValid;
}

QString OAIStoryResponse::getOldResourceSubtype() const {
    return m_old_resource_subtype;
}
void OAIStoryResponse::setOldResourceSubtype(const QString &old_resource_subtype) {
    m_old_resource_subtype = old_resource_subtype;
    m_old_resource_subtype_isSet = true;
}

bool OAIStoryResponse::is_old_resource_subtype_Set() const{
    return m_old_resource_subtype_isSet;
}

bool OAIStoryResponse::is_old_resource_subtype_Valid() const{
    return m_old_resource_subtype_isValid;
}

OAISectionCompact OAIStoryResponse::getOldSection() const {
    return m_old_section;
}
void OAIStoryResponse::setOldSection(const OAISectionCompact &old_section) {
    m_old_section = old_section;
    m_old_section_isSet = true;
}

bool OAIStoryResponse::is_old_section_Set() const{
    return m_old_section_isSet;
}

bool OAIStoryResponse::is_old_section_Valid() const{
    return m_old_section_isValid;
}

QString OAIStoryResponse::getOldTextValue() const {
    return m_old_text_value;
}
void OAIStoryResponse::setOldTextValue(const QString &old_text_value) {
    m_old_text_value = old_text_value;
    m_old_text_value_isSet = true;
}

bool OAIStoryResponse::is_old_text_value_Set() const{
    return m_old_text_value_isSet;
}

bool OAIStoryResponse::is_old_text_value_Valid() const{
    return m_old_text_value_isValid;
}

QList<OAIPreview> OAIStoryResponse::getPreviews() const {
    return m_previews;
}
void OAIStoryResponse::setPreviews(const QList<OAIPreview> &previews) {
    m_previews = previews;
    m_previews_isSet = true;
}

bool OAIStoryResponse::is_previews_Set() const{
    return m_previews_isSet;
}

bool OAIStoryResponse::is_previews_Valid() const{
    return m_previews_isValid;
}

OAIProjectCompact OAIStoryResponse::getProject() const {
    return m_project;
}
void OAIStoryResponse::setProject(const OAIProjectCompact &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIStoryResponse::is_project_Set() const{
    return m_project_isSet;
}

bool OAIStoryResponse::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIStoryResponse::getSource() const {
    return m_source;
}
void OAIStoryResponse::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIStoryResponse::is_source_Set() const{
    return m_source_isSet;
}

bool OAIStoryResponse::is_source_Valid() const{
    return m_source_isValid;
}

OAIStoryCompact OAIStoryResponse::getStory() const {
    return m_story;
}
void OAIStoryResponse::setStory(const OAIStoryCompact &story) {
    m_story = story;
    m_story_isSet = true;
}

bool OAIStoryResponse::is_story_Set() const{
    return m_story_isSet;
}

bool OAIStoryResponse::is_story_Valid() const{
    return m_story_isValid;
}

OAITagCompact OAIStoryResponse::getTag() const {
    return m_tag;
}
void OAIStoryResponse::setTag(const OAITagCompact &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIStoryResponse::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIStoryResponse::is_tag_Valid() const{
    return m_tag_isValid;
}

OAIStoryResponse_allOf_target OAIStoryResponse::getTarget() const {
    return m_target;
}
void OAIStoryResponse::setTarget(const OAIStoryResponse_allOf_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIStoryResponse::is_target_Set() const{
    return m_target_isSet;
}

bool OAIStoryResponse::is_target_Valid() const{
    return m_target_isValid;
}

OAITaskCompact OAIStoryResponse::getTask() const {
    return m_task;
}
void OAIStoryResponse::setTask(const OAITaskCompact &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIStoryResponse::is_task_Set() const{
    return m_task_isSet;
}

bool OAIStoryResponse::is_task_Valid() const{
    return m_task_isValid;
}

QString OAIStoryResponse::getType() const {
    return m_type;
}
void OAIStoryResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStoryResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStoryResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticker_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicated_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_follower.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_editable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_edited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_date_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_enum_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_multi_enum_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_people_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_section.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_hearts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_date_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_enum_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_multi_enum_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_people_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_section.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previews.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_story.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
