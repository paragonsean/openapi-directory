/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortfolioResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortfolioResponse::OAIPortfolioResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortfolioResponse::OAIPortfolioResponse() {
    this->initializeModel();
}

OAIPortfolioResponse::~OAIPortfolioResponse() {}

void OAIPortfolioResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_current_status_update_isSet = false;
    m_current_status_update_isValid = false;

    m_custom_field_settings_isSet = false;
    m_custom_field_settings_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_permalink_url_isSet = false;
    m_permalink_url_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_start_on_isSet = false;
    m_start_on_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;
}

void OAIPortfolioResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortfolioResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_current_status_update_isValid = ::OpenAPI::fromJsonValue(m_current_status_update, json[QString("current_status_update")]);
    m_current_status_update_isSet = !json[QString("current_status_update")].isNull() && m_current_status_update_isValid;

    m_custom_field_settings_isValid = ::OpenAPI::fromJsonValue(m_custom_field_settings, json[QString("custom_field_settings")]);
    m_custom_field_settings_isSet = !json[QString("custom_field_settings")].isNull() && m_custom_field_settings_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_permalink_url_isValid = ::OpenAPI::fromJsonValue(m_permalink_url, json[QString("permalink_url")]);
    m_permalink_url_isSet = !json[QString("permalink_url")].isNull() && m_permalink_url_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_start_on_isValid = ::OpenAPI::fromJsonValue(m_start_on, json[QString("start_on")]);
    m_start_on_isSet = !json[QString("start_on")].isNull() && m_start_on_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;
}

QString OAIPortfolioResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortfolioResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_current_status_update.isSet()) {
        obj.insert(QString("current_status_update"), ::OpenAPI::toJsonValue(m_current_status_update));
    }
    if (m_custom_field_settings.size() > 0) {
        obj.insert(QString("custom_field_settings"), ::OpenAPI::toJsonValue(m_custom_field_settings));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_permalink_url_isSet) {
        obj.insert(QString("permalink_url"), ::OpenAPI::toJsonValue(m_permalink_url));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_start_on_isSet) {
        obj.insert(QString("start_on"), ::OpenAPI::toJsonValue(m_start_on));
    }
    if (m_workspace.isSet()) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    return obj;
}

QString OAIPortfolioResponse::getGid() const {
    return m_gid;
}
void OAIPortfolioResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIPortfolioResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIPortfolioResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIPortfolioResponse::getResourceType() const {
    return m_resource_type;
}
void OAIPortfolioResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIPortfolioResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIPortfolioResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIPortfolioResponse::getName() const {
    return m_name;
}
void OAIPortfolioResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPortfolioResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPortfolioResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPortfolioResponse::getColor() const {
    return m_color;
}
void OAIPortfolioResponse::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIPortfolioResponse::is_color_Set() const{
    return m_color_isSet;
}

bool OAIPortfolioResponse::is_color_Valid() const{
    return m_color_isValid;
}

QDateTime OAIPortfolioResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIPortfolioResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPortfolioResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPortfolioResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserCompact OAIPortfolioResponse::getCreatedBy() const {
    return m_created_by;
}
void OAIPortfolioResponse::setCreatedBy(const OAIUserCompact &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPortfolioResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPortfolioResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIStatusUpdateCompact OAIPortfolioResponse::getCurrentStatusUpdate() const {
    return m_current_status_update;
}
void OAIPortfolioResponse::setCurrentStatusUpdate(const OAIStatusUpdateCompact &current_status_update) {
    m_current_status_update = current_status_update;
    m_current_status_update_isSet = true;
}

bool OAIPortfolioResponse::is_current_status_update_Set() const{
    return m_current_status_update_isSet;
}

bool OAIPortfolioResponse::is_current_status_update_Valid() const{
    return m_current_status_update_isValid;
}

QList<OAICustomFieldSettingResponse> OAIPortfolioResponse::getCustomFieldSettings() const {
    return m_custom_field_settings;
}
void OAIPortfolioResponse::setCustomFieldSettings(const QList<OAICustomFieldSettingResponse> &custom_field_settings) {
    m_custom_field_settings = custom_field_settings;
    m_custom_field_settings_isSet = true;
}

bool OAIPortfolioResponse::is_custom_field_settings_Set() const{
    return m_custom_field_settings_isSet;
}

bool OAIPortfolioResponse::is_custom_field_settings_Valid() const{
    return m_custom_field_settings_isValid;
}

QList<OAICustomFieldCompact> OAIPortfolioResponse::getCustomFields() const {
    return m_custom_fields;
}
void OAIPortfolioResponse::setCustomFields(const QList<OAICustomFieldCompact> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPortfolioResponse::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPortfolioResponse::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QDateTime OAIPortfolioResponse::getDueOn() const {
    return m_due_on;
}
void OAIPortfolioResponse::setDueOn(const QDateTime &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAIPortfolioResponse::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAIPortfolioResponse::is_due_on_Valid() const{
    return m_due_on_isValid;
}

QList<OAIUserCompact> OAIPortfolioResponse::getMembers() const {
    return m_members;
}
void OAIPortfolioResponse::setMembers(const QList<OAIUserCompact> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIPortfolioResponse::is_members_Set() const{
    return m_members_isSet;
}

bool OAIPortfolioResponse::is_members_Valid() const{
    return m_members_isValid;
}

OAIUserCompact OAIPortfolioResponse::getOwner() const {
    return m_owner;
}
void OAIPortfolioResponse::setOwner(const OAIUserCompact &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPortfolioResponse::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPortfolioResponse::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIPortfolioResponse::getPermalinkUrl() const {
    return m_permalink_url;
}
void OAIPortfolioResponse::setPermalinkUrl(const QString &permalink_url) {
    m_permalink_url = permalink_url;
    m_permalink_url_isSet = true;
}

bool OAIPortfolioResponse::is_permalink_url_Set() const{
    return m_permalink_url_isSet;
}

bool OAIPortfolioResponse::is_permalink_url_Valid() const{
    return m_permalink_url_isValid;
}

bool OAIPortfolioResponse::isRPublic() const {
    return m_r_public;
}
void OAIPortfolioResponse::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIPortfolioResponse::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIPortfolioResponse::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QDate OAIPortfolioResponse::getStartOn() const {
    return m_start_on;
}
void OAIPortfolioResponse::setStartOn(const QDate &start_on) {
    m_start_on = start_on;
    m_start_on_isSet = true;
}

bool OAIPortfolioResponse::is_start_on_Set() const{
    return m_start_on_isSet;
}

bool OAIPortfolioResponse::is_start_on_Valid() const{
    return m_start_on_isValid;
}

OAIPortfolioResponse_allOf_workspace OAIPortfolioResponse::getWorkspace() const {
    return m_workspace;
}
void OAIPortfolioResponse::setWorkspace(const OAIPortfolioResponse_allOf_workspace &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAIPortfolioResponse::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAIPortfolioResponse::is_workspace_Valid() const{
    return m_workspace_isValid;
}

bool OAIPortfolioResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_field_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permalink_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortfolioResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
