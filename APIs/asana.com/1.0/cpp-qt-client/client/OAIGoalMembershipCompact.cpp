/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalMembershipCompact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalMembershipCompact::OAIGoalMembershipCompact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalMembershipCompact::OAIGoalMembershipCompact() {
    this->initializeModel();
}

OAIGoalMembershipCompact::~OAIGoalMembershipCompact() {}

void OAIGoalMembershipCompact::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_is_commenter_isSet = false;
    m_is_commenter_isValid = false;

    m_is_editor_isSet = false;
    m_is_editor_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;
}

void OAIGoalMembershipCompact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalMembershipCompact::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_is_commenter_isValid = ::OpenAPI::fromJsonValue(m_is_commenter, json[QString("is_commenter")]);
    m_is_commenter_isSet = !json[QString("is_commenter")].isNull() && m_is_commenter_isValid;

    m_is_editor_isValid = ::OpenAPI::fromJsonValue(m_is_editor, json[QString("is_editor")]);
    m_is_editor_isSet = !json[QString("is_editor")].isNull() && m_is_editor_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;
}

QString OAIGoalMembershipCompact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalMembershipCompact::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_is_commenter_isSet) {
        obj.insert(QString("is_commenter"), ::OpenAPI::toJsonValue(m_is_commenter));
    }
    if (m_is_editor_isSet) {
        obj.insert(QString("is_editor"), ::OpenAPI::toJsonValue(m_is_editor));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    return obj;
}

QString OAIGoalMembershipCompact::getGid() const {
    return m_gid;
}
void OAIGoalMembershipCompact::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIGoalMembershipCompact::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIGoalMembershipCompact::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIGoalMembershipCompact::getResourceType() const {
    return m_resource_type;
}
void OAIGoalMembershipCompact::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIGoalMembershipCompact::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIGoalMembershipCompact::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIGoalMembershipCompact::isIsCommenter() const {
    return m_is_commenter;
}
void OAIGoalMembershipCompact::setIsCommenter(const bool &is_commenter) {
    m_is_commenter = is_commenter;
    m_is_commenter_isSet = true;
}

bool OAIGoalMembershipCompact::is_is_commenter_Set() const{
    return m_is_commenter_isSet;
}

bool OAIGoalMembershipCompact::is_is_commenter_Valid() const{
    return m_is_commenter_isValid;
}

bool OAIGoalMembershipCompact::isIsEditor() const {
    return m_is_editor;
}
void OAIGoalMembershipCompact::setIsEditor(const bool &is_editor) {
    m_is_editor = is_editor;
    m_is_editor_isSet = true;
}

bool OAIGoalMembershipCompact::is_is_editor_Set() const{
    return m_is_editor_isSet;
}

bool OAIGoalMembershipCompact::is_is_editor_Valid() const{
    return m_is_editor_isValid;
}

OAIUserCompact OAIGoalMembershipCompact::getMember() const {
    return m_member;
}
void OAIGoalMembershipCompact::setMember(const OAIUserCompact &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIGoalMembershipCompact::is_member_Set() const{
    return m_member_isSet;
}

bool OAIGoalMembershipCompact::is_member_Valid() const{
    return m_member_isValid;
}

bool OAIGoalMembershipCompact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_commenter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalMembershipCompact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
