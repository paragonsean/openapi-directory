/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateWebhook_201_response.h"
#include "OAICreateWebhook_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIErrorResponse.h"
#include "OAIGetWebhooks_200_response.h"
#include "OAIUpdateWebhook_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_webhook_request OAICreateWebhook_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createWebhook(const OAICreateWebhook_request &oai_create_webhook_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  webhook_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deleteWebhook(const QString &webhook_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  webhook_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getWebhook(const QString &webhook_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  resource QString [optional]
    */
    virtual void getWebhooks(const QString &workspace, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_gid QString [required]
    * @param[in]  oai_update_webhook_request OAIUpdateWebhook_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updateWebhook(const QString &webhook_gid, const OAIUpdateWebhook_request &oai_update_webhook_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteWebhookCallback(OAIHttpRequestWorker *worker);
    void getWebhookCallback(OAIHttpRequestWorker *worker);
    void getWebhooksCallback(OAIHttpRequestWorker *worker);
    void updateWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWebhookSignal(OAICreateWebhook_201_response summary);
    void deleteWebhookSignal(OAIDeleteAttachment_200_response summary);
    void getWebhookSignal(OAICreateWebhook_201_response summary);
    void getWebhooksSignal(OAIGetWebhooks_200_response summary);
    void updateWebhookSignal(OAICreateWebhook_201_response summary);


    void createWebhookSignalFull(OAIHttpRequestWorker *worker, OAICreateWebhook_201_response summary);
    void deleteWebhookSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void getWebhookSignalFull(OAIHttpRequestWorker *worker, OAICreateWebhook_201_response summary);
    void getWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIGetWebhooks_200_response summary);
    void updateWebhookSignalFull(OAIHttpRequestWorker *worker, OAICreateWebhook_201_response summary);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalError() instead")
    void createWebhookSignalE(OAICreateWebhook_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalError(OAICreateWebhook_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalError() instead")
    void deleteWebhookSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookSignalError() instead")
    void getWebhookSignalE(OAICreateWebhook_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookSignalError(OAICreateWebhook_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhooksSignalError() instead")
    void getWebhooksSignalE(OAIGetWebhooks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhooksSignalError(OAIGetWebhooks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalError() instead")
    void updateWebhookSignalE(OAICreateWebhook_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalError(OAICreateWebhook_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalErrorFull() instead")
    void createWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalErrorFull() instead")
    void deleteWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookSignalErrorFull() instead")
    void getWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhooksSignalErrorFull() instead")
    void getWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalErrorFull() instead")
    void updateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
