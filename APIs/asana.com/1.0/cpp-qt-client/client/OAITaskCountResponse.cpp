/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskCountResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskCountResponse::OAITaskCountResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskCountResponse::OAITaskCountResponse() {
    this->initializeModel();
}

OAITaskCountResponse::~OAITaskCountResponse() {}

void OAITaskCountResponse::initializeModel() {

    m_num_completed_milestones_isSet = false;
    m_num_completed_milestones_isValid = false;

    m_num_completed_tasks_isSet = false;
    m_num_completed_tasks_isValid = false;

    m_num_incomplete_milestones_isSet = false;
    m_num_incomplete_milestones_isValid = false;

    m_num_incomplete_tasks_isSet = false;
    m_num_incomplete_tasks_isValid = false;

    m_num_milestones_isSet = false;
    m_num_milestones_isValid = false;

    m_num_tasks_isSet = false;
    m_num_tasks_isValid = false;
}

void OAITaskCountResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskCountResponse::fromJsonObject(QJsonObject json) {

    m_num_completed_milestones_isValid = ::OpenAPI::fromJsonValue(m_num_completed_milestones, json[QString("num_completed_milestones")]);
    m_num_completed_milestones_isSet = !json[QString("num_completed_milestones")].isNull() && m_num_completed_milestones_isValid;

    m_num_completed_tasks_isValid = ::OpenAPI::fromJsonValue(m_num_completed_tasks, json[QString("num_completed_tasks")]);
    m_num_completed_tasks_isSet = !json[QString("num_completed_tasks")].isNull() && m_num_completed_tasks_isValid;

    m_num_incomplete_milestones_isValid = ::OpenAPI::fromJsonValue(m_num_incomplete_milestones, json[QString("num_incomplete_milestones")]);
    m_num_incomplete_milestones_isSet = !json[QString("num_incomplete_milestones")].isNull() && m_num_incomplete_milestones_isValid;

    m_num_incomplete_tasks_isValid = ::OpenAPI::fromJsonValue(m_num_incomplete_tasks, json[QString("num_incomplete_tasks")]);
    m_num_incomplete_tasks_isSet = !json[QString("num_incomplete_tasks")].isNull() && m_num_incomplete_tasks_isValid;

    m_num_milestones_isValid = ::OpenAPI::fromJsonValue(m_num_milestones, json[QString("num_milestones")]);
    m_num_milestones_isSet = !json[QString("num_milestones")].isNull() && m_num_milestones_isValid;

    m_num_tasks_isValid = ::OpenAPI::fromJsonValue(m_num_tasks, json[QString("num_tasks")]);
    m_num_tasks_isSet = !json[QString("num_tasks")].isNull() && m_num_tasks_isValid;
}

QString OAITaskCountResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskCountResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_num_completed_milestones_isSet) {
        obj.insert(QString("num_completed_milestones"), ::OpenAPI::toJsonValue(m_num_completed_milestones));
    }
    if (m_num_completed_tasks_isSet) {
        obj.insert(QString("num_completed_tasks"), ::OpenAPI::toJsonValue(m_num_completed_tasks));
    }
    if (m_num_incomplete_milestones_isSet) {
        obj.insert(QString("num_incomplete_milestones"), ::OpenAPI::toJsonValue(m_num_incomplete_milestones));
    }
    if (m_num_incomplete_tasks_isSet) {
        obj.insert(QString("num_incomplete_tasks"), ::OpenAPI::toJsonValue(m_num_incomplete_tasks));
    }
    if (m_num_milestones_isSet) {
        obj.insert(QString("num_milestones"), ::OpenAPI::toJsonValue(m_num_milestones));
    }
    if (m_num_tasks_isSet) {
        obj.insert(QString("num_tasks"), ::OpenAPI::toJsonValue(m_num_tasks));
    }
    return obj;
}

qint32 OAITaskCountResponse::getNumCompletedMilestones() const {
    return m_num_completed_milestones;
}
void OAITaskCountResponse::setNumCompletedMilestones(const qint32 &num_completed_milestones) {
    m_num_completed_milestones = num_completed_milestones;
    m_num_completed_milestones_isSet = true;
}

bool OAITaskCountResponse::is_num_completed_milestones_Set() const{
    return m_num_completed_milestones_isSet;
}

bool OAITaskCountResponse::is_num_completed_milestones_Valid() const{
    return m_num_completed_milestones_isValid;
}

qint32 OAITaskCountResponse::getNumCompletedTasks() const {
    return m_num_completed_tasks;
}
void OAITaskCountResponse::setNumCompletedTasks(const qint32 &num_completed_tasks) {
    m_num_completed_tasks = num_completed_tasks;
    m_num_completed_tasks_isSet = true;
}

bool OAITaskCountResponse::is_num_completed_tasks_Set() const{
    return m_num_completed_tasks_isSet;
}

bool OAITaskCountResponse::is_num_completed_tasks_Valid() const{
    return m_num_completed_tasks_isValid;
}

qint32 OAITaskCountResponse::getNumIncompleteMilestones() const {
    return m_num_incomplete_milestones;
}
void OAITaskCountResponse::setNumIncompleteMilestones(const qint32 &num_incomplete_milestones) {
    m_num_incomplete_milestones = num_incomplete_milestones;
    m_num_incomplete_milestones_isSet = true;
}

bool OAITaskCountResponse::is_num_incomplete_milestones_Set() const{
    return m_num_incomplete_milestones_isSet;
}

bool OAITaskCountResponse::is_num_incomplete_milestones_Valid() const{
    return m_num_incomplete_milestones_isValid;
}

qint32 OAITaskCountResponse::getNumIncompleteTasks() const {
    return m_num_incomplete_tasks;
}
void OAITaskCountResponse::setNumIncompleteTasks(const qint32 &num_incomplete_tasks) {
    m_num_incomplete_tasks = num_incomplete_tasks;
    m_num_incomplete_tasks_isSet = true;
}

bool OAITaskCountResponse::is_num_incomplete_tasks_Set() const{
    return m_num_incomplete_tasks_isSet;
}

bool OAITaskCountResponse::is_num_incomplete_tasks_Valid() const{
    return m_num_incomplete_tasks_isValid;
}

qint32 OAITaskCountResponse::getNumMilestones() const {
    return m_num_milestones;
}
void OAITaskCountResponse::setNumMilestones(const qint32 &num_milestones) {
    m_num_milestones = num_milestones;
    m_num_milestones_isSet = true;
}

bool OAITaskCountResponse::is_num_milestones_Set() const{
    return m_num_milestones_isSet;
}

bool OAITaskCountResponse::is_num_milestones_Valid() const{
    return m_num_milestones_isValid;
}

qint32 OAITaskCountResponse::getNumTasks() const {
    return m_num_tasks;
}
void OAITaskCountResponse::setNumTasks(const qint32 &num_tasks) {
    m_num_tasks = num_tasks;
    m_num_tasks_isSet = true;
}

bool OAITaskCountResponse::is_num_tasks_Set() const{
    return m_num_tasks_isSet;
}

bool OAITaskCountResponse::is_num_tasks_Valid() const{
    return m_num_tasks_isValid;
}

bool OAITaskCountResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_completed_milestones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_completed_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_incomplete_milestones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_incomplete_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_milestones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskCountResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
