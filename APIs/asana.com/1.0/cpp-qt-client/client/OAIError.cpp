/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_help_isSet = false;
    m_help_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_phrase_isSet = false;
    m_phrase_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_help_isValid = ::OpenAPI::fromJsonValue(m_help, json[QString("help")]);
    m_help_isSet = !json[QString("help")].isNull() && m_help_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_phrase_isValid = ::OpenAPI::fromJsonValue(m_phrase, json[QString("phrase")]);
    m_phrase_isSet = !json[QString("phrase")].isNull() && m_phrase_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_help_isSet) {
        obj.insert(QString("help"), ::OpenAPI::toJsonValue(m_help));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_phrase_isSet) {
        obj.insert(QString("phrase"), ::OpenAPI::toJsonValue(m_phrase));
    }
    return obj;
}

QString OAIError::getHelp() const {
    return m_help;
}
void OAIError::setHelp(const QString &help) {
    m_help = help;
    m_help_isSet = true;
}

bool OAIError::is_help_Set() const{
    return m_help_isSet;
}

bool OAIError::is_help_Valid() const{
    return m_help_isValid;
}

QString OAIError::getMessage() const {
    return m_message;
}
void OAIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIError::getPhrase() const {
    return m_phrase;
}
void OAIError::setPhrase(const QString &phrase) {
    m_phrase = phrase;
    m_phrase_isSet = true;
}

bool OAIError::is_phrase_Set() const{
    return m_phrase_isSet;
}

bool OAIError::is_phrase_Valid() const{
    return m_phrase_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_help_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
