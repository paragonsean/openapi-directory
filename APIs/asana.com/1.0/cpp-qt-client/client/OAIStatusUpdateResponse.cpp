/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusUpdateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusUpdateResponse::OAIStatusUpdateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusUpdateResponse::OAIStatusUpdateResponse() {
    this->initializeModel();
}

OAIStatusUpdateResponse::~OAIStatusUpdateResponse() {}

void OAIStatusUpdateResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_subtype_isSet = false;
    m_resource_subtype_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_html_text_isSet = false;
    m_html_text_isValid = false;

    m_status_type_isSet = false;
    m_status_type_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_hearted_isSet = false;
    m_hearted_isValid = false;

    m_hearts_isSet = false;
    m_hearts_isValid = false;

    m_liked_isSet = false;
    m_liked_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_num_hearts_isSet = false;
    m_num_hearts_isValid = false;

    m_num_likes_isSet = false;
    m_num_likes_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAIStatusUpdateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusUpdateResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_resource_subtype, json[QString("resource_subtype")]);
    m_resource_subtype_isSet = !json[QString("resource_subtype")].isNull() && m_resource_subtype_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_html_text_isValid = ::OpenAPI::fromJsonValue(m_html_text, json[QString("html_text")]);
    m_html_text_isSet = !json[QString("html_text")].isNull() && m_html_text_isValid;

    m_status_type_isValid = ::OpenAPI::fromJsonValue(m_status_type, json[QString("status_type")]);
    m_status_type_isSet = !json[QString("status_type")].isNull() && m_status_type_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_hearted_isValid = ::OpenAPI::fromJsonValue(m_hearted, json[QString("hearted")]);
    m_hearted_isSet = !json[QString("hearted")].isNull() && m_hearted_isValid;

    m_hearts_isValid = ::OpenAPI::fromJsonValue(m_hearts, json[QString("hearts")]);
    m_hearts_isSet = !json[QString("hearts")].isNull() && m_hearts_isValid;

    m_liked_isValid = ::OpenAPI::fromJsonValue(m_liked, json[QString("liked")]);
    m_liked_isSet = !json[QString("liked")].isNull() && m_liked_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_num_hearts_isValid = ::OpenAPI::fromJsonValue(m_num_hearts, json[QString("num_hearts")]);
    m_num_hearts_isSet = !json[QString("num_hearts")].isNull() && m_num_hearts_isValid;

    m_num_likes_isValid = ::OpenAPI::fromJsonValue(m_num_likes, json[QString("num_likes")]);
    m_num_likes_isSet = !json[QString("num_likes")].isNull() && m_num_likes_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAIStatusUpdateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusUpdateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_subtype_isSet) {
        obj.insert(QString("resource_subtype"), ::OpenAPI::toJsonValue(m_resource_subtype));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_html_text_isSet) {
        obj.insert(QString("html_text"), ::OpenAPI::toJsonValue(m_html_text));
    }
    if (m_status_type_isSet) {
        obj.insert(QString("status_type"), ::OpenAPI::toJsonValue(m_status_type));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_hearted_isSet) {
        obj.insert(QString("hearted"), ::OpenAPI::toJsonValue(m_hearted));
    }
    if (m_hearts.size() > 0) {
        obj.insert(QString("hearts"), ::OpenAPI::toJsonValue(m_hearts));
    }
    if (m_liked_isSet) {
        obj.insert(QString("liked"), ::OpenAPI::toJsonValue(m_liked));
    }
    if (m_likes.size() > 0) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_num_hearts_isSet) {
        obj.insert(QString("num_hearts"), ::OpenAPI::toJsonValue(m_num_hearts));
    }
    if (m_num_likes_isSet) {
        obj.insert(QString("num_likes"), ::OpenAPI::toJsonValue(m_num_likes));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

QString OAIStatusUpdateResponse::getGid() const {
    return m_gid;
}
void OAIStatusUpdateResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIStatusUpdateResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIStatusUpdateResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIStatusUpdateResponse::getResourceType() const {
    return m_resource_type;
}
void OAIStatusUpdateResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStatusUpdateResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStatusUpdateResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIStatusUpdateResponse::getResourceSubtype() const {
    return m_resource_subtype;
}
void OAIStatusUpdateResponse::setResourceSubtype(const QString &resource_subtype) {
    m_resource_subtype = resource_subtype;
    m_resource_subtype_isSet = true;
}

bool OAIStatusUpdateResponse::is_resource_subtype_Set() const{
    return m_resource_subtype_isSet;
}

bool OAIStatusUpdateResponse::is_resource_subtype_Valid() const{
    return m_resource_subtype_isValid;
}

QString OAIStatusUpdateResponse::getTitle() const {
    return m_title;
}
void OAIStatusUpdateResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIStatusUpdateResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIStatusUpdateResponse::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIStatusUpdateResponse::getHtmlText() const {
    return m_html_text;
}
void OAIStatusUpdateResponse::setHtmlText(const QString &html_text) {
    m_html_text = html_text;
    m_html_text_isSet = true;
}

bool OAIStatusUpdateResponse::is_html_text_Set() const{
    return m_html_text_isSet;
}

bool OAIStatusUpdateResponse::is_html_text_Valid() const{
    return m_html_text_isValid;
}

QString OAIStatusUpdateResponse::getStatusType() const {
    return m_status_type;
}
void OAIStatusUpdateResponse::setStatusType(const QString &status_type) {
    m_status_type = status_type;
    m_status_type_isSet = true;
}

bool OAIStatusUpdateResponse::is_status_type_Set() const{
    return m_status_type_isSet;
}

bool OAIStatusUpdateResponse::is_status_type_Valid() const{
    return m_status_type_isValid;
}

QString OAIStatusUpdateResponse::getText() const {
    return m_text;
}
void OAIStatusUpdateResponse::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIStatusUpdateResponse::is_text_Set() const{
    return m_text_isSet;
}

bool OAIStatusUpdateResponse::is_text_Valid() const{
    return m_text_isValid;
}

OAIUserCompact OAIStatusUpdateResponse::getAuthor() const {
    return m_author;
}
void OAIStatusUpdateResponse::setAuthor(const OAIUserCompact &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIStatusUpdateResponse::is_author_Set() const{
    return m_author_isSet;
}

bool OAIStatusUpdateResponse::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIStatusUpdateResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIStatusUpdateResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStatusUpdateResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStatusUpdateResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserCompact OAIStatusUpdateResponse::getCreatedBy() const {
    return m_created_by;
}
void OAIStatusUpdateResponse::setCreatedBy(const OAIUserCompact &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStatusUpdateResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStatusUpdateResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIStatusUpdateResponse::isHearted() const {
    return m_hearted;
}
void OAIStatusUpdateResponse::setHearted(const bool &hearted) {
    m_hearted = hearted;
    m_hearted_isSet = true;
}

bool OAIStatusUpdateResponse::is_hearted_Set() const{
    return m_hearted_isSet;
}

bool OAIStatusUpdateResponse::is_hearted_Valid() const{
    return m_hearted_isValid;
}

QList<OAILike> OAIStatusUpdateResponse::getHearts() const {
    return m_hearts;
}
void OAIStatusUpdateResponse::setHearts(const QList<OAILike> &hearts) {
    m_hearts = hearts;
    m_hearts_isSet = true;
}

bool OAIStatusUpdateResponse::is_hearts_Set() const{
    return m_hearts_isSet;
}

bool OAIStatusUpdateResponse::is_hearts_Valid() const{
    return m_hearts_isValid;
}

bool OAIStatusUpdateResponse::isLiked() const {
    return m_liked;
}
void OAIStatusUpdateResponse::setLiked(const bool &liked) {
    m_liked = liked;
    m_liked_isSet = true;
}

bool OAIStatusUpdateResponse::is_liked_Set() const{
    return m_liked_isSet;
}

bool OAIStatusUpdateResponse::is_liked_Valid() const{
    return m_liked_isValid;
}

QList<OAILike> OAIStatusUpdateResponse::getLikes() const {
    return m_likes;
}
void OAIStatusUpdateResponse::setLikes(const QList<OAILike> &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIStatusUpdateResponse::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIStatusUpdateResponse::is_likes_Valid() const{
    return m_likes_isValid;
}

QDateTime OAIStatusUpdateResponse::getModifiedAt() const {
    return m_modified_at;
}
void OAIStatusUpdateResponse::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIStatusUpdateResponse::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIStatusUpdateResponse::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

qint32 OAIStatusUpdateResponse::getNumHearts() const {
    return m_num_hearts;
}
void OAIStatusUpdateResponse::setNumHearts(const qint32 &num_hearts) {
    m_num_hearts = num_hearts;
    m_num_hearts_isSet = true;
}

bool OAIStatusUpdateResponse::is_num_hearts_Set() const{
    return m_num_hearts_isSet;
}

bool OAIStatusUpdateResponse::is_num_hearts_Valid() const{
    return m_num_hearts_isValid;
}

qint32 OAIStatusUpdateResponse::getNumLikes() const {
    return m_num_likes;
}
void OAIStatusUpdateResponse::setNumLikes(const qint32 &num_likes) {
    m_num_likes = num_likes;
    m_num_likes_isSet = true;
}

bool OAIStatusUpdateResponse::is_num_likes_Set() const{
    return m_num_likes_isSet;
}

bool OAIStatusUpdateResponse::is_num_likes_Valid() const{
    return m_num_likes_isValid;
}

OAIStatusUpdateResponse_allOf_parent OAIStatusUpdateResponse::getParent() const {
    return m_parent;
}
void OAIStatusUpdateResponse::setParent(const OAIStatusUpdateResponse_allOf_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIStatusUpdateResponse::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIStatusUpdateResponse::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAIStatusUpdateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_hearts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusUpdateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_type_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
