/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectStatusesApi_H
#define OAI_OAIProjectStatusesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateProjectStatusForProject_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIErrorResponse.h"
#include "OAIGetProjectStatus_200_response.h"
#include "OAIGetProjectStatusesForProject_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectStatusesApi : public QObject {
    Q_OBJECT

public:
    OAIProjectStatusesApi(const int timeOut = 0);
    ~OAIProjectStatusesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_create_project_status_for_project_request OAICreateProjectStatusForProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createProjectStatusForProject(const QString &project_gid, const OAICreateProjectStatusForProject_request &oai_create_project_status_for_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_status_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deleteProjectStatus(const QString &project_status_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_status_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getProjectStatus(const QString &project_status_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getProjectStatusesForProject(const QString &project_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProjectStatusForProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectStatusCallback(OAIHttpRequestWorker *worker);
    void getProjectStatusCallback(OAIHttpRequestWorker *worker);
    void getProjectStatusesForProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProjectStatusForProjectSignal(OAIGetProjectStatus_200_response summary);
    void deleteProjectStatusSignal(OAIDeleteAttachment_200_response summary);
    void getProjectStatusSignal(OAIGetProjectStatus_200_response summary);
    void getProjectStatusesForProjectSignal(OAIGetProjectStatusesForProject_200_response summary);


    void createProjectStatusForProjectSignalFull(OAIHttpRequestWorker *worker, OAIGetProjectStatus_200_response summary);
    void deleteProjectStatusSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void getProjectStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetProjectStatus_200_response summary);
    void getProjectStatusesForProjectSignalFull(OAIHttpRequestWorker *worker, OAIGetProjectStatusesForProject_200_response summary);

    Q_DECL_DEPRECATED_X("Use createProjectStatusForProjectSignalError() instead")
    void createProjectStatusForProjectSignalE(OAIGetProjectStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectStatusForProjectSignalError(OAIGetProjectStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectStatusSignalError() instead")
    void deleteProjectStatusSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectStatusSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatusSignalError() instead")
    void getProjectStatusSignalE(OAIGetProjectStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatusSignalError(OAIGetProjectStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatusesForProjectSignalError() instead")
    void getProjectStatusesForProjectSignalE(OAIGetProjectStatusesForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatusesForProjectSignalError(OAIGetProjectStatusesForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProjectStatusForProjectSignalErrorFull() instead")
    void createProjectStatusForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectStatusForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectStatusSignalErrorFull() instead")
    void deleteProjectStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatusSignalErrorFull() instead")
    void getProjectStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectStatusesForProjectSignalErrorFull() instead")
    void getProjectStatusesForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectStatusesForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
