/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoalResponse_allOf_metric.h
 *
 * 
 */

#ifndef OAIGoalResponse_allOf_metric_H
#define OAIGoalResponse_allOf_metric_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoalResponse_allOf_metric : public OAIObject {
public:
    OAIGoalResponse_allOf_metric();
    OAIGoalResponse_allOf_metric(QString json);
    ~OAIGoalResponse_allOf_metric() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGid() const;
    void setGid(const QString &gid);
    bool is_gid_Set() const;
    bool is_gid_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getCurrentDisplayValue() const;
    void setCurrentDisplayValue(const QString &current_display_value);
    bool is_current_display_value_Set() const;
    bool is_current_display_value_Valid() const;

    double getCurrentNumberValue() const;
    void setCurrentNumberValue(const double &current_number_value);
    bool is_current_number_value_Set() const;
    bool is_current_number_value_Valid() const;

    double getInitialNumberValue() const;
    void setInitialNumberValue(const double &initial_number_value);
    bool is_initial_number_value_Set() const;
    bool is_initial_number_value_Valid() const;

    qint32 getPrecision() const;
    void setPrecision(const qint32 &precision);
    bool is_precision_Set() const;
    bool is_precision_Valid() const;

    QString getProgressSource() const;
    void setProgressSource(const QString &progress_source);
    bool is_progress_source_Set() const;
    bool is_progress_source_Valid() const;

    QString getResourceSubtype() const;
    void setResourceSubtype(const QString &resource_subtype);
    bool is_resource_subtype_Set() const;
    bool is_resource_subtype_Valid() const;

    double getTargetNumberValue() const;
    void setTargetNumberValue(const double &target_number_value);
    bool is_target_number_value_Set() const;
    bool is_target_number_value_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    bool isCanManage() const;
    void setCanManage(const bool &can_manage);
    bool is_can_manage_Set() const;
    bool is_can_manage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_gid;
    bool m_gid_isSet;
    bool m_gid_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_current_display_value;
    bool m_current_display_value_isSet;
    bool m_current_display_value_isValid;

    double m_current_number_value;
    bool m_current_number_value_isSet;
    bool m_current_number_value_isValid;

    double m_initial_number_value;
    bool m_initial_number_value_isSet;
    bool m_initial_number_value_isValid;

    qint32 m_precision;
    bool m_precision_isSet;
    bool m_precision_isValid;

    QString m_progress_source;
    bool m_progress_source_isSet;
    bool m_progress_source_isValid;

    QString m_resource_subtype;
    bool m_resource_subtype_isSet;
    bool m_resource_subtype_isValid;

    double m_target_number_value;
    bool m_target_number_value_isSet;
    bool m_target_number_value_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    bool m_can_manage;
    bool m_can_manage_isSet;
    bool m_can_manage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoalResponse_allOf_metric)

#endif // OAIGoalResponse_allOf_metric_H
