/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalAddSupportingRelationshipRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalAddSupportingRelationshipRequest::OAIGoalAddSupportingRelationshipRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalAddSupportingRelationshipRequest::OAIGoalAddSupportingRelationshipRequest() {
    this->initializeModel();
}

OAIGoalAddSupportingRelationshipRequest::~OAIGoalAddSupportingRelationshipRequest() {}

void OAIGoalAddSupportingRelationshipRequest::initializeModel() {

    m_contribution_weight_isSet = false;
    m_contribution_weight_isValid = false;

    m_insert_after_isSet = false;
    m_insert_after_isValid = false;

    m_insert_before_isSet = false;
    m_insert_before_isValid = false;

    m_supporting_resource_isSet = false;
    m_supporting_resource_isValid = false;
}

void OAIGoalAddSupportingRelationshipRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalAddSupportingRelationshipRequest::fromJsonObject(QJsonObject json) {

    m_contribution_weight_isValid = ::OpenAPI::fromJsonValue(m_contribution_weight, json[QString("contribution_weight")]);
    m_contribution_weight_isSet = !json[QString("contribution_weight")].isNull() && m_contribution_weight_isValid;

    m_insert_after_isValid = ::OpenAPI::fromJsonValue(m_insert_after, json[QString("insert_after")]);
    m_insert_after_isSet = !json[QString("insert_after")].isNull() && m_insert_after_isValid;

    m_insert_before_isValid = ::OpenAPI::fromJsonValue(m_insert_before, json[QString("insert_before")]);
    m_insert_before_isSet = !json[QString("insert_before")].isNull() && m_insert_before_isValid;

    m_supporting_resource_isValid = ::OpenAPI::fromJsonValue(m_supporting_resource, json[QString("supporting_resource")]);
    m_supporting_resource_isSet = !json[QString("supporting_resource")].isNull() && m_supporting_resource_isValid;
}

QString OAIGoalAddSupportingRelationshipRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalAddSupportingRelationshipRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contribution_weight_isSet) {
        obj.insert(QString("contribution_weight"), ::OpenAPI::toJsonValue(m_contribution_weight));
    }
    if (m_insert_after_isSet) {
        obj.insert(QString("insert_after"), ::OpenAPI::toJsonValue(m_insert_after));
    }
    if (m_insert_before_isSet) {
        obj.insert(QString("insert_before"), ::OpenAPI::toJsonValue(m_insert_before));
    }
    if (m_supporting_resource_isSet) {
        obj.insert(QString("supporting_resource"), ::OpenAPI::toJsonValue(m_supporting_resource));
    }
    return obj;
}

double OAIGoalAddSupportingRelationshipRequest::getContributionWeight() const {
    return m_contribution_weight;
}
void OAIGoalAddSupportingRelationshipRequest::setContributionWeight(const double &contribution_weight) {
    m_contribution_weight = contribution_weight;
    m_contribution_weight_isSet = true;
}

bool OAIGoalAddSupportingRelationshipRequest::is_contribution_weight_Set() const{
    return m_contribution_weight_isSet;
}

bool OAIGoalAddSupportingRelationshipRequest::is_contribution_weight_Valid() const{
    return m_contribution_weight_isValid;
}

QString OAIGoalAddSupportingRelationshipRequest::getInsertAfter() const {
    return m_insert_after;
}
void OAIGoalAddSupportingRelationshipRequest::setInsertAfter(const QString &insert_after) {
    m_insert_after = insert_after;
    m_insert_after_isSet = true;
}

bool OAIGoalAddSupportingRelationshipRequest::is_insert_after_Set() const{
    return m_insert_after_isSet;
}

bool OAIGoalAddSupportingRelationshipRequest::is_insert_after_Valid() const{
    return m_insert_after_isValid;
}

QString OAIGoalAddSupportingRelationshipRequest::getInsertBefore() const {
    return m_insert_before;
}
void OAIGoalAddSupportingRelationshipRequest::setInsertBefore(const QString &insert_before) {
    m_insert_before = insert_before;
    m_insert_before_isSet = true;
}

bool OAIGoalAddSupportingRelationshipRequest::is_insert_before_Set() const{
    return m_insert_before_isSet;
}

bool OAIGoalAddSupportingRelationshipRequest::is_insert_before_Valid() const{
    return m_insert_before_isValid;
}

QString OAIGoalAddSupportingRelationshipRequest::getSupportingResource() const {
    return m_supporting_resource;
}
void OAIGoalAddSupportingRelationshipRequest::setSupportingResource(const QString &supporting_resource) {
    m_supporting_resource = supporting_resource;
    m_supporting_resource_isSet = true;
}

bool OAIGoalAddSupportingRelationshipRequest::is_supporting_resource_Set() const{
    return m_supporting_resource_isSet;
}

bool OAIGoalAddSupportingRelationshipRequest::is_supporting_resource_Valid() const{
    return m_supporting_resource_isValid;
}

bool OAIGoalAddSupportingRelationshipRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contribution_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supporting_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalAddSupportingRelationshipRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_supporting_resource_isValid && true;
}

} // namespace OpenAPI
