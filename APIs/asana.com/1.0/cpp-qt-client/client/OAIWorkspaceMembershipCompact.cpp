/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceMembershipCompact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceMembershipCompact::OAIWorkspaceMembershipCompact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceMembershipCompact::OAIWorkspaceMembershipCompact() {
    this->initializeModel();
}

OAIWorkspaceMembershipCompact::~OAIWorkspaceMembershipCompact() {}

void OAIWorkspaceMembershipCompact::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;
}

void OAIWorkspaceMembershipCompact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceMembershipCompact::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;
}

QString OAIWorkspaceMembershipCompact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceMembershipCompact::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_workspace.isSet()) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    return obj;
}

QString OAIWorkspaceMembershipCompact::getGid() const {
    return m_gid;
}
void OAIWorkspaceMembershipCompact::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIWorkspaceMembershipCompact::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIWorkspaceMembershipCompact::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIWorkspaceMembershipCompact::getResourceType() const {
    return m_resource_type;
}
void OAIWorkspaceMembershipCompact::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIWorkspaceMembershipCompact::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIWorkspaceMembershipCompact::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIUserCompact OAIWorkspaceMembershipCompact::getUser() const {
    return m_user;
}
void OAIWorkspaceMembershipCompact::setUser(const OAIUserCompact &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIWorkspaceMembershipCompact::is_user_Set() const{
    return m_user_isSet;
}

bool OAIWorkspaceMembershipCompact::is_user_Valid() const{
    return m_user_isValid;
}

OAIWorkspaceCompact OAIWorkspaceMembershipCompact::getWorkspace() const {
    return m_workspace;
}
void OAIWorkspaceMembershipCompact::setWorkspace(const OAIWorkspaceCompact &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAIWorkspaceMembershipCompact::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAIWorkspaceMembershipCompact::is_workspace_Valid() const{
    return m_workspace_isValid;
}

bool OAIWorkspaceMembershipCompact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceMembershipCompact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
