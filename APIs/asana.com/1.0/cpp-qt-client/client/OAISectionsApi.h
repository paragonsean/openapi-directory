/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISectionsApi_H
#define OAI_OAISectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddTaskForSection_request.h"
#include "OAICreateSectionForProject_201_response.h"
#include "OAICreateSectionForProject_request.h"
#include "OAIDeleteAttachment_200_response.h"
#include "OAIErrorResponse.h"
#include "OAIGetSectionsForProject_200_response.h"
#include "OAIInsertSectionForProject_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISectionsApi : public QObject {
    Q_OBJECT

public:
    OAISectionsApi(const int timeOut = 0);
    ~OAISectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  section_gid QString [required]
    * @param[in]  oai_add_task_for_section_request OAIAddTaskForSection_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void addTaskForSection(const QString &section_gid, const OAIAddTaskForSection_request &oai_add_task_for_section_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_create_section_for_project_request OAICreateSectionForProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void createSectionForProject(const QString &project_gid, const OAICreateSectionForProject_request &oai_create_section_for_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  section_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void deleteSection(const QString &section_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  section_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void getSection(const QString &section_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getSectionsForProject(const QString &project_gid, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_gid QString [required]
    * @param[in]  oai_insert_section_for_project_request OAIInsertSectionForProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void insertSectionForProject(const QString &project_gid, const OAIInsertSectionForProject_request &oai_insert_section_for_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  section_gid QString [required]
    * @param[in]  oai_create_section_for_project_request OAICreateSectionForProject_request [required]
    * @param[in]  opt_pretty bool [optional]
    * @param[in]  opt_fields QList<QString> [optional]
    */
    virtual void updateSection(const QString &section_gid, const OAICreateSectionForProject_request &oai_create_section_for_project_request, const ::OpenAPI::OptionalParam<bool> &opt_pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &opt_fields = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addTaskForSectionCallback(OAIHttpRequestWorker *worker);
    void createSectionForProjectCallback(OAIHttpRequestWorker *worker);
    void deleteSectionCallback(OAIHttpRequestWorker *worker);
    void getSectionCallback(OAIHttpRequestWorker *worker);
    void getSectionsForProjectCallback(OAIHttpRequestWorker *worker);
    void insertSectionForProjectCallback(OAIHttpRequestWorker *worker);
    void updateSectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addTaskForSectionSignal(OAIDeleteAttachment_200_response summary);
    void createSectionForProjectSignal(OAICreateSectionForProject_201_response summary);
    void deleteSectionSignal(OAIDeleteAttachment_200_response summary);
    void getSectionSignal(OAICreateSectionForProject_201_response summary);
    void getSectionsForProjectSignal(OAIGetSectionsForProject_200_response summary);
    void insertSectionForProjectSignal(OAIDeleteAttachment_200_response summary);
    void updateSectionSignal(OAICreateSectionForProject_201_response summary);


    void addTaskForSectionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void createSectionForProjectSignalFull(OAIHttpRequestWorker *worker, OAICreateSectionForProject_201_response summary);
    void deleteSectionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void getSectionSignalFull(OAIHttpRequestWorker *worker, OAICreateSectionForProject_201_response summary);
    void getSectionsForProjectSignalFull(OAIHttpRequestWorker *worker, OAIGetSectionsForProject_200_response summary);
    void insertSectionForProjectSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAttachment_200_response summary);
    void updateSectionSignalFull(OAIHttpRequestWorker *worker, OAICreateSectionForProject_201_response summary);

    Q_DECL_DEPRECATED_X("Use addTaskForSectionSignalError() instead")
    void addTaskForSectionSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTaskForSectionSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSectionForProjectSignalError() instead")
    void createSectionForProjectSignalE(OAICreateSectionForProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSectionForProjectSignalError(OAICreateSectionForProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSectionSignalError() instead")
    void deleteSectionSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSectionSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionSignalError() instead")
    void getSectionSignalE(OAICreateSectionForProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionSignalError(OAICreateSectionForProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForProjectSignalError() instead")
    void getSectionsForProjectSignalE(OAIGetSectionsForProject_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForProjectSignalError(OAIGetSectionsForProject_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertSectionForProjectSignalError() instead")
    void insertSectionForProjectSignalE(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void insertSectionForProjectSignalError(OAIDeleteAttachment_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSectionSignalError() instead")
    void updateSectionSignalE(OAICreateSectionForProject_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSectionSignalError(OAICreateSectionForProject_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addTaskForSectionSignalErrorFull() instead")
    void addTaskForSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTaskForSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSectionForProjectSignalErrorFull() instead")
    void createSectionForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSectionForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSectionSignalErrorFull() instead")
    void deleteSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionSignalErrorFull() instead")
    void getSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSectionsForProjectSignalErrorFull() instead")
    void getSectionsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSectionsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertSectionForProjectSignalErrorFull() instead")
    void insertSectionForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void insertSectionForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSectionSignalErrorFull() instead")
    void updateSectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
