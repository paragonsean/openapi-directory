/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimePeriodCompact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimePeriodCompact::OAITimePeriodCompact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimePeriodCompact::OAITimePeriodCompact() {
    this->initializeModel();
}

OAITimePeriodCompact::~OAITimePeriodCompact() {}

void OAITimePeriodCompact::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_on_isSet = false;
    m_end_on_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_start_on_isSet = false;
    m_start_on_isValid = false;
}

void OAITimePeriodCompact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimePeriodCompact::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_end_on_isValid = ::OpenAPI::fromJsonValue(m_end_on, json[QString("end_on")]);
    m_end_on_isSet = !json[QString("end_on")].isNull() && m_end_on_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_start_on_isValid = ::OpenAPI::fromJsonValue(m_start_on, json[QString("start_on")]);
    m_start_on_isSet = !json[QString("start_on")].isNull() && m_start_on_isValid;
}

QString OAITimePeriodCompact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimePeriodCompact::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_on_isSet) {
        obj.insert(QString("end_on"), ::OpenAPI::toJsonValue(m_end_on));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_start_on_isSet) {
        obj.insert(QString("start_on"), ::OpenAPI::toJsonValue(m_start_on));
    }
    return obj;
}

QString OAITimePeriodCompact::getGid() const {
    return m_gid;
}
void OAITimePeriodCompact::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAITimePeriodCompact::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAITimePeriodCompact::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAITimePeriodCompact::getResourceType() const {
    return m_resource_type;
}
void OAITimePeriodCompact::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAITimePeriodCompact::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAITimePeriodCompact::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAITimePeriodCompact::getDisplayName() const {
    return m_display_name;
}
void OAITimePeriodCompact::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITimePeriodCompact::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITimePeriodCompact::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITimePeriodCompact::getEndOn() const {
    return m_end_on;
}
void OAITimePeriodCompact::setEndOn(const QString &end_on) {
    m_end_on = end_on;
    m_end_on_isSet = true;
}

bool OAITimePeriodCompact::is_end_on_Set() const{
    return m_end_on_isSet;
}

bool OAITimePeriodCompact::is_end_on_Valid() const{
    return m_end_on_isValid;
}

QString OAITimePeriodCompact::getPeriod() const {
    return m_period;
}
void OAITimePeriodCompact::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAITimePeriodCompact::is_period_Set() const{
    return m_period_isSet;
}

bool OAITimePeriodCompact::is_period_Valid() const{
    return m_period_isValid;
}

QString OAITimePeriodCompact::getStartOn() const {
    return m_start_on;
}
void OAITimePeriodCompact::setStartOn(const QString &start_on) {
    m_start_on = start_on;
    m_start_on_isSet = true;
}

bool OAITimePeriodCompact::is_start_on_Set() const{
    return m_start_on_isSet;
}

bool OAITimePeriodCompact::is_start_on_Valid() const{
    return m_start_on_isValid;
}

bool OAITimePeriodCompact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimePeriodCompact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
