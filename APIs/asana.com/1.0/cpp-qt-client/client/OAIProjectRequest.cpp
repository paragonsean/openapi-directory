/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectRequest::OAIProjectRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectRequest::OAIProjectRequest() {
    this->initializeModel();
}

OAIProjectRequest::~OAIProjectRequest() {}

void OAIProjectRequest::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_status_isSet = false;
    m_current_status_isValid = false;

    m_current_status_update_isSet = false;
    m_current_status_update_isValid = false;

    m_custom_field_settings_isSet = false;
    m_custom_field_settings_isValid = false;

    m_default_view_isSet = false;
    m_default_view_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_html_notes_isSet = false;
    m_html_notes_isValid = false;

    m_is_template_isSet = false;
    m_is_template_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_start_on_isSet = false;
    m_start_on_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIProjectRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectRequest::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_current_status_isValid = ::OpenAPI::fromJsonValue(m_current_status, json[QString("current_status")]);
    m_current_status_isSet = !json[QString("current_status")].isNull() && m_current_status_isValid;

    m_current_status_update_isValid = ::OpenAPI::fromJsonValue(m_current_status_update, json[QString("current_status_update")]);
    m_current_status_update_isSet = !json[QString("current_status_update")].isNull() && m_current_status_update_isValid;

    m_custom_field_settings_isValid = ::OpenAPI::fromJsonValue(m_custom_field_settings, json[QString("custom_field_settings")]);
    m_custom_field_settings_isSet = !json[QString("custom_field_settings")].isNull() && m_custom_field_settings_isValid;

    m_default_view_isValid = ::OpenAPI::fromJsonValue(m_default_view, json[QString("default_view")]);
    m_default_view_isSet = !json[QString("default_view")].isNull() && m_default_view_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_html_notes_isValid = ::OpenAPI::fromJsonValue(m_html_notes, json[QString("html_notes")]);
    m_html_notes_isSet = !json[QString("html_notes")].isNull() && m_html_notes_isValid;

    m_is_template_isValid = ::OpenAPI::fromJsonValue(m_is_template, json[QString("is_template")]);
    m_is_template_isSet = !json[QString("is_template")].isNull() && m_is_template_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_start_on_isValid = ::OpenAPI::fromJsonValue(m_start_on, json[QString("start_on")]);
    m_start_on_isSet = !json[QString("start_on")].isNull() && m_start_on_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIProjectRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_status.isSet()) {
        obj.insert(QString("current_status"), ::OpenAPI::toJsonValue(m_current_status));
    }
    if (m_current_status_update.isSet()) {
        obj.insert(QString("current_status_update"), ::OpenAPI::toJsonValue(m_current_status_update));
    }
    if (m_custom_field_settings.size() > 0) {
        obj.insert(QString("custom_field_settings"), ::OpenAPI::toJsonValue(m_custom_field_settings));
    }
    if (m_default_view_isSet) {
        obj.insert(QString("default_view"), ::OpenAPI::toJsonValue(m_default_view));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_html_notes_isSet) {
        obj.insert(QString("html_notes"), ::OpenAPI::toJsonValue(m_html_notes));
    }
    if (m_is_template_isSet) {
        obj.insert(QString("is_template"), ::OpenAPI::toJsonValue(m_is_template));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_start_on_isSet) {
        obj.insert(QString("start_on"), ::OpenAPI::toJsonValue(m_start_on));
    }
    if (m_workspace.isSet()) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_followers_isSet) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QString OAIProjectRequest::getGid() const {
    return m_gid;
}
void OAIProjectRequest::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIProjectRequest::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIProjectRequest::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIProjectRequest::getResourceType() const {
    return m_resource_type;
}
void OAIProjectRequest::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIProjectRequest::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIProjectRequest::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIProjectRequest::getName() const {
    return m_name;
}
void OAIProjectRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProjectRequest::isArchived() const {
    return m_archived;
}
void OAIProjectRequest::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIProjectRequest::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIProjectRequest::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIProjectRequest::getColor() const {
    return m_color;
}
void OAIProjectRequest::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIProjectRequest::is_color_Set() const{
    return m_color_isSet;
}

bool OAIProjectRequest::is_color_Valid() const{
    return m_color_isValid;
}

QDateTime OAIProjectRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIProjectRequest::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProjectRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProjectRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIProjectStatusResponse OAIProjectRequest::getCurrentStatus() const {
    return m_current_status;
}
void OAIProjectRequest::setCurrentStatus(const OAIProjectStatusResponse &current_status) {
    m_current_status = current_status;
    m_current_status_isSet = true;
}

bool OAIProjectRequest::is_current_status_Set() const{
    return m_current_status_isSet;
}

bool OAIProjectRequest::is_current_status_Valid() const{
    return m_current_status_isValid;
}

OAIStatusUpdateCompact OAIProjectRequest::getCurrentStatusUpdate() const {
    return m_current_status_update;
}
void OAIProjectRequest::setCurrentStatusUpdate(const OAIStatusUpdateCompact &current_status_update) {
    m_current_status_update = current_status_update;
    m_current_status_update_isSet = true;
}

bool OAIProjectRequest::is_current_status_update_Set() const{
    return m_current_status_update_isSet;
}

bool OAIProjectRequest::is_current_status_update_Valid() const{
    return m_current_status_update_isValid;
}

QList<OAICustomFieldSettingResponse> OAIProjectRequest::getCustomFieldSettings() const {
    return m_custom_field_settings;
}
void OAIProjectRequest::setCustomFieldSettings(const QList<OAICustomFieldSettingResponse> &custom_field_settings) {
    m_custom_field_settings = custom_field_settings;
    m_custom_field_settings_isSet = true;
}

bool OAIProjectRequest::is_custom_field_settings_Set() const{
    return m_custom_field_settings_isSet;
}

bool OAIProjectRequest::is_custom_field_settings_Valid() const{
    return m_custom_field_settings_isValid;
}

QString OAIProjectRequest::getDefaultView() const {
    return m_default_view;
}
void OAIProjectRequest::setDefaultView(const QString &default_view) {
    m_default_view = default_view;
    m_default_view_isSet = true;
}

bool OAIProjectRequest::is_default_view_Set() const{
    return m_default_view_isSet;
}

bool OAIProjectRequest::is_default_view_Valid() const{
    return m_default_view_isValid;
}

QDateTime OAIProjectRequest::getDueDate() const {
    return m_due_date;
}
void OAIProjectRequest::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIProjectRequest::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIProjectRequest::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QDateTime OAIProjectRequest::getDueOn() const {
    return m_due_on;
}
void OAIProjectRequest::setDueOn(const QDateTime &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAIProjectRequest::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAIProjectRequest::is_due_on_Valid() const{
    return m_due_on_isValid;
}

QString OAIProjectRequest::getHtmlNotes() const {
    return m_html_notes;
}
void OAIProjectRequest::setHtmlNotes(const QString &html_notes) {
    m_html_notes = html_notes;
    m_html_notes_isSet = true;
}

bool OAIProjectRequest::is_html_notes_Set() const{
    return m_html_notes_isSet;
}

bool OAIProjectRequest::is_html_notes_Valid() const{
    return m_html_notes_isValid;
}

bool OAIProjectRequest::isIsTemplate() const {
    return m_is_template;
}
void OAIProjectRequest::setIsTemplate(const bool &is_template) {
    m_is_template = is_template;
    m_is_template_isSet = true;
}

bool OAIProjectRequest::is_is_template_Set() const{
    return m_is_template_isSet;
}

bool OAIProjectRequest::is_is_template_Valid() const{
    return m_is_template_isValid;
}

QList<OAIUserCompact> OAIProjectRequest::getMembers() const {
    return m_members;
}
void OAIProjectRequest::setMembers(const QList<OAIUserCompact> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIProjectRequest::is_members_Set() const{
    return m_members_isSet;
}

bool OAIProjectRequest::is_members_Valid() const{
    return m_members_isValid;
}

QDateTime OAIProjectRequest::getModifiedAt() const {
    return m_modified_at;
}
void OAIProjectRequest::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIProjectRequest::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIProjectRequest::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAIProjectRequest::getNotes() const {
    return m_notes;
}
void OAIProjectRequest::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIProjectRequest::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIProjectRequest::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIProjectRequest::isRPublic() const {
    return m_r_public;
}
void OAIProjectRequest::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIProjectRequest::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIProjectRequest::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QDate OAIProjectRequest::getStartOn() const {
    return m_start_on;
}
void OAIProjectRequest::setStartOn(const QDate &start_on) {
    m_start_on = start_on;
    m_start_on_isSet = true;
}

bool OAIProjectRequest::is_start_on_Set() const{
    return m_start_on_isSet;
}

bool OAIProjectRequest::is_start_on_Valid() const{
    return m_start_on_isValid;
}

OAIProjectBase_allOf_workspace OAIProjectRequest::getWorkspace() const {
    return m_workspace;
}
void OAIProjectRequest::setWorkspace(const OAIProjectBase_allOf_workspace &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAIProjectRequest::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAIProjectRequest::is_workspace_Valid() const{
    return m_workspace_isValid;
}

QMap<QString, QString> OAIProjectRequest::getCustomFields() const {
    return m_custom_fields;
}
void OAIProjectRequest::setCustomFields(const QMap<QString, QString> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProjectRequest::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProjectRequest::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIProjectRequest::getFollowers() const {
    return m_followers;
}
void OAIProjectRequest::setFollowers(const QString &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIProjectRequest::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIProjectRequest::is_followers_Valid() const{
    return m_followers_isValid;
}

QString OAIProjectRequest::getOwner() const {
    return m_owner;
}
void OAIProjectRequest::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProjectRequest::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProjectRequest::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIProjectRequest::getTeam() const {
    return m_team;
}
void OAIProjectRequest::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIProjectRequest::is_team_Set() const{
    return m_team_isSet;
}

bool OAIProjectRequest::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIProjectRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_field_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
