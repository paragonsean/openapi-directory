/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSectionInsertRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSectionInsertRequest::OAIProjectSectionInsertRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSectionInsertRequest::OAIProjectSectionInsertRequest() {
    this->initializeModel();
}

OAIProjectSectionInsertRequest::~OAIProjectSectionInsertRequest() {}

void OAIProjectSectionInsertRequest::initializeModel() {

    m_after_section_isSet = false;
    m_after_section_isValid = false;

    m_before_section_isSet = false;
    m_before_section_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;
}

void OAIProjectSectionInsertRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSectionInsertRequest::fromJsonObject(QJsonObject json) {

    m_after_section_isValid = ::OpenAPI::fromJsonValue(m_after_section, json[QString("after_section")]);
    m_after_section_isSet = !json[QString("after_section")].isNull() && m_after_section_isValid;

    m_before_section_isValid = ::OpenAPI::fromJsonValue(m_before_section, json[QString("before_section")]);
    m_before_section_isSet = !json[QString("before_section")].isNull() && m_before_section_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;
}

QString OAIProjectSectionInsertRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSectionInsertRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_after_section_isSet) {
        obj.insert(QString("after_section"), ::OpenAPI::toJsonValue(m_after_section));
    }
    if (m_before_section_isSet) {
        obj.insert(QString("before_section"), ::OpenAPI::toJsonValue(m_before_section));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    return obj;
}

QString OAIProjectSectionInsertRequest::getAfterSection() const {
    return m_after_section;
}
void OAIProjectSectionInsertRequest::setAfterSection(const QString &after_section) {
    m_after_section = after_section;
    m_after_section_isSet = true;
}

bool OAIProjectSectionInsertRequest::is_after_section_Set() const{
    return m_after_section_isSet;
}

bool OAIProjectSectionInsertRequest::is_after_section_Valid() const{
    return m_after_section_isValid;
}

QString OAIProjectSectionInsertRequest::getBeforeSection() const {
    return m_before_section;
}
void OAIProjectSectionInsertRequest::setBeforeSection(const QString &before_section) {
    m_before_section = before_section;
    m_before_section_isSet = true;
}

bool OAIProjectSectionInsertRequest::is_before_section_Set() const{
    return m_before_section_isSet;
}

bool OAIProjectSectionInsertRequest::is_before_section_Valid() const{
    return m_before_section_isValid;
}

QString OAIProjectSectionInsertRequest::getProject() const {
    return m_project;
}
void OAIProjectSectionInsertRequest::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIProjectSectionInsertRequest::is_project_Set() const{
    return m_project_isSet;
}

bool OAIProjectSectionInsertRequest::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIProjectSectionInsertRequest::getSection() const {
    return m_section;
}
void OAIProjectSectionInsertRequest::setSection(const QString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIProjectSectionInsertRequest::is_section_Set() const{
    return m_section_isSet;
}

bool OAIProjectSectionInsertRequest::is_section_Valid() const{
    return m_section_isValid;
}

bool OAIProjectSectionInsertRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSectionInsertRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_isValid && m_section_isValid && true;
}

} // namespace OpenAPI
