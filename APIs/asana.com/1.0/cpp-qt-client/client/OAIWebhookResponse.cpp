/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookResponse::OAIWebhookResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookResponse::OAIWebhookResponse() {
    this->initializeModel();
}

OAIWebhookResponse::~OAIWebhookResponse() {}

void OAIWebhookResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_last_failure_at_isSet = false;
    m_last_failure_at_isValid = false;

    m_last_failure_content_isSet = false;
    m_last_failure_content_isValid = false;

    m_last_success_at_isSet = false;
    m_last_success_at_isValid = false;
}

void OAIWebhookResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_last_failure_at_isValid = ::OpenAPI::fromJsonValue(m_last_failure_at, json[QString("last_failure_at")]);
    m_last_failure_at_isSet = !json[QString("last_failure_at")].isNull() && m_last_failure_at_isValid;

    m_last_failure_content_isValid = ::OpenAPI::fromJsonValue(m_last_failure_content, json[QString("last_failure_content")]);
    m_last_failure_content_isSet = !json[QString("last_failure_content")].isNull() && m_last_failure_content_isValid;

    m_last_success_at_isValid = ::OpenAPI::fromJsonValue(m_last_success_at, json[QString("last_success_at")]);
    m_last_success_at_isSet = !json[QString("last_success_at")].isNull() && m_last_success_at_isValid;
}

QString OAIWebhookResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_last_failure_at_isSet) {
        obj.insert(QString("last_failure_at"), ::OpenAPI::toJsonValue(m_last_failure_at));
    }
    if (m_last_failure_content_isSet) {
        obj.insert(QString("last_failure_content"), ::OpenAPI::toJsonValue(m_last_failure_content));
    }
    if (m_last_success_at_isSet) {
        obj.insert(QString("last_success_at"), ::OpenAPI::toJsonValue(m_last_success_at));
    }
    return obj;
}

QString OAIWebhookResponse::getGid() const {
    return m_gid;
}
void OAIWebhookResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIWebhookResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIWebhookResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIWebhookResponse::getResourceType() const {
    return m_resource_type;
}
void OAIWebhookResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIWebhookResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIWebhookResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIWebhookResponse::isActive() const {
    return m_active;
}
void OAIWebhookResponse::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIWebhookResponse::is_active_Set() const{
    return m_active_isSet;
}

bool OAIWebhookResponse::is_active_Valid() const{
    return m_active_isValid;
}

OAIAsanaNamedResource OAIWebhookResponse::getResource() const {
    return m_resource;
}
void OAIWebhookResponse::setResource(const OAIAsanaNamedResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIWebhookResponse::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIWebhookResponse::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIWebhookResponse::getTarget() const {
    return m_target;
}
void OAIWebhookResponse::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIWebhookResponse::is_target_Set() const{
    return m_target_isSet;
}

bool OAIWebhookResponse::is_target_Valid() const{
    return m_target_isValid;
}

QDateTime OAIWebhookResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIWebhookResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWebhookResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWebhookResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIWebhookResponse_allOf_filters> OAIWebhookResponse::getFilters() const {
    return m_filters;
}
void OAIWebhookResponse::setFilters(const QList<OAIWebhookResponse_allOf_filters> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIWebhookResponse::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIWebhookResponse::is_filters_Valid() const{
    return m_filters_isValid;
}

QDateTime OAIWebhookResponse::getLastFailureAt() const {
    return m_last_failure_at;
}
void OAIWebhookResponse::setLastFailureAt(const QDateTime &last_failure_at) {
    m_last_failure_at = last_failure_at;
    m_last_failure_at_isSet = true;
}

bool OAIWebhookResponse::is_last_failure_at_Set() const{
    return m_last_failure_at_isSet;
}

bool OAIWebhookResponse::is_last_failure_at_Valid() const{
    return m_last_failure_at_isValid;
}

QString OAIWebhookResponse::getLastFailureContent() const {
    return m_last_failure_content;
}
void OAIWebhookResponse::setLastFailureContent(const QString &last_failure_content) {
    m_last_failure_content = last_failure_content;
    m_last_failure_content_isSet = true;
}

bool OAIWebhookResponse::is_last_failure_content_Set() const{
    return m_last_failure_content_isSet;
}

bool OAIWebhookResponse::is_last_failure_content_Valid() const{
    return m_last_failure_content_isValid;
}

QDateTime OAIWebhookResponse::getLastSuccessAt() const {
    return m_last_success_at;
}
void OAIWebhookResponse::setLastSuccessAt(const QDateTime &last_success_at) {
    m_last_success_at = last_success_at;
    m_last_success_at_isSet = true;
}

bool OAIWebhookResponse::is_last_success_at_Set() const{
    return m_last_success_at_isSet;
}

bool OAIWebhookResponse::is_last_success_at_Valid() const{
    return m_last_success_at_isValid;
}

bool OAIWebhookResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_failure_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_failure_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_success_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
