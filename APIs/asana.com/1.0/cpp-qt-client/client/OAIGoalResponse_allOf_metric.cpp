/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalResponse_allOf_metric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalResponse_allOf_metric::OAIGoalResponse_allOf_metric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalResponse_allOf_metric::OAIGoalResponse_allOf_metric() {
    this->initializeModel();
}

OAIGoalResponse_allOf_metric::~OAIGoalResponse_allOf_metric() {}

void OAIGoalResponse_allOf_metric::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_current_display_value_isSet = false;
    m_current_display_value_isValid = false;

    m_current_number_value_isSet = false;
    m_current_number_value_isValid = false;

    m_initial_number_value_isSet = false;
    m_initial_number_value_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_progress_source_isSet = false;
    m_progress_source_isValid = false;

    m_resource_subtype_isSet = false;
    m_resource_subtype_isValid = false;

    m_target_number_value_isSet = false;
    m_target_number_value_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_can_manage_isSet = false;
    m_can_manage_isValid = false;
}

void OAIGoalResponse_allOf_metric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalResponse_allOf_metric::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_current_display_value_isValid = ::OpenAPI::fromJsonValue(m_current_display_value, json[QString("current_display_value")]);
    m_current_display_value_isSet = !json[QString("current_display_value")].isNull() && m_current_display_value_isValid;

    m_current_number_value_isValid = ::OpenAPI::fromJsonValue(m_current_number_value, json[QString("current_number_value")]);
    m_current_number_value_isSet = !json[QString("current_number_value")].isNull() && m_current_number_value_isValid;

    m_initial_number_value_isValid = ::OpenAPI::fromJsonValue(m_initial_number_value, json[QString("initial_number_value")]);
    m_initial_number_value_isSet = !json[QString("initial_number_value")].isNull() && m_initial_number_value_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_progress_source_isValid = ::OpenAPI::fromJsonValue(m_progress_source, json[QString("progress_source")]);
    m_progress_source_isSet = !json[QString("progress_source")].isNull() && m_progress_source_isValid;

    m_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_resource_subtype, json[QString("resource_subtype")]);
    m_resource_subtype_isSet = !json[QString("resource_subtype")].isNull() && m_resource_subtype_isValid;

    m_target_number_value_isValid = ::OpenAPI::fromJsonValue(m_target_number_value, json[QString("target_number_value")]);
    m_target_number_value_isSet = !json[QString("target_number_value")].isNull() && m_target_number_value_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_can_manage_isValid = ::OpenAPI::fromJsonValue(m_can_manage, json[QString("can_manage")]);
    m_can_manage_isSet = !json[QString("can_manage")].isNull() && m_can_manage_isValid;
}

QString OAIGoalResponse_allOf_metric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalResponse_allOf_metric::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_current_display_value_isSet) {
        obj.insert(QString("current_display_value"), ::OpenAPI::toJsonValue(m_current_display_value));
    }
    if (m_current_number_value_isSet) {
        obj.insert(QString("current_number_value"), ::OpenAPI::toJsonValue(m_current_number_value));
    }
    if (m_initial_number_value_isSet) {
        obj.insert(QString("initial_number_value"), ::OpenAPI::toJsonValue(m_initial_number_value));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_progress_source_isSet) {
        obj.insert(QString("progress_source"), ::OpenAPI::toJsonValue(m_progress_source));
    }
    if (m_resource_subtype_isSet) {
        obj.insert(QString("resource_subtype"), ::OpenAPI::toJsonValue(m_resource_subtype));
    }
    if (m_target_number_value_isSet) {
        obj.insert(QString("target_number_value"), ::OpenAPI::toJsonValue(m_target_number_value));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_can_manage_isSet) {
        obj.insert(QString("can_manage"), ::OpenAPI::toJsonValue(m_can_manage));
    }
    return obj;
}

QString OAIGoalResponse_allOf_metric::getGid() const {
    return m_gid;
}
void OAIGoalResponse_allOf_metric::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIGoalResponse_allOf_metric::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIGoalResponse_allOf_metric::getResourceType() const {
    return m_resource_type;
}
void OAIGoalResponse_allOf_metric::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIGoalResponse_allOf_metric::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIGoalResponse_allOf_metric::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGoalResponse_allOf_metric::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGoalResponse_allOf_metric::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIGoalResponse_allOf_metric::getCurrentDisplayValue() const {
    return m_current_display_value;
}
void OAIGoalResponse_allOf_metric::setCurrentDisplayValue(const QString &current_display_value) {
    m_current_display_value = current_display_value;
    m_current_display_value_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_current_display_value_Set() const{
    return m_current_display_value_isSet;
}

bool OAIGoalResponse_allOf_metric::is_current_display_value_Valid() const{
    return m_current_display_value_isValid;
}

double OAIGoalResponse_allOf_metric::getCurrentNumberValue() const {
    return m_current_number_value;
}
void OAIGoalResponse_allOf_metric::setCurrentNumberValue(const double &current_number_value) {
    m_current_number_value = current_number_value;
    m_current_number_value_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_current_number_value_Set() const{
    return m_current_number_value_isSet;
}

bool OAIGoalResponse_allOf_metric::is_current_number_value_Valid() const{
    return m_current_number_value_isValid;
}

double OAIGoalResponse_allOf_metric::getInitialNumberValue() const {
    return m_initial_number_value;
}
void OAIGoalResponse_allOf_metric::setInitialNumberValue(const double &initial_number_value) {
    m_initial_number_value = initial_number_value;
    m_initial_number_value_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_initial_number_value_Set() const{
    return m_initial_number_value_isSet;
}

bool OAIGoalResponse_allOf_metric::is_initial_number_value_Valid() const{
    return m_initial_number_value_isValid;
}

qint32 OAIGoalResponse_allOf_metric::getPrecision() const {
    return m_precision;
}
void OAIGoalResponse_allOf_metric::setPrecision(const qint32 &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIGoalResponse_allOf_metric::is_precision_Valid() const{
    return m_precision_isValid;
}

QString OAIGoalResponse_allOf_metric::getProgressSource() const {
    return m_progress_source;
}
void OAIGoalResponse_allOf_metric::setProgressSource(const QString &progress_source) {
    m_progress_source = progress_source;
    m_progress_source_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_progress_source_Set() const{
    return m_progress_source_isSet;
}

bool OAIGoalResponse_allOf_metric::is_progress_source_Valid() const{
    return m_progress_source_isValid;
}

QString OAIGoalResponse_allOf_metric::getResourceSubtype() const {
    return m_resource_subtype;
}
void OAIGoalResponse_allOf_metric::setResourceSubtype(const QString &resource_subtype) {
    m_resource_subtype = resource_subtype;
    m_resource_subtype_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_resource_subtype_Set() const{
    return m_resource_subtype_isSet;
}

bool OAIGoalResponse_allOf_metric::is_resource_subtype_Valid() const{
    return m_resource_subtype_isValid;
}

double OAIGoalResponse_allOf_metric::getTargetNumberValue() const {
    return m_target_number_value;
}
void OAIGoalResponse_allOf_metric::setTargetNumberValue(const double &target_number_value) {
    m_target_number_value = target_number_value;
    m_target_number_value_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_target_number_value_Set() const{
    return m_target_number_value_isSet;
}

bool OAIGoalResponse_allOf_metric::is_target_number_value_Valid() const{
    return m_target_number_value_isValid;
}

QString OAIGoalResponse_allOf_metric::getUnit() const {
    return m_unit;
}
void OAIGoalResponse_allOf_metric::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIGoalResponse_allOf_metric::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIGoalResponse_allOf_metric::isCanManage() const {
    return m_can_manage;
}
void OAIGoalResponse_allOf_metric::setCanManage(const bool &can_manage) {
    m_can_manage = can_manage;
    m_can_manage_isSet = true;
}

bool OAIGoalResponse_allOf_metric::is_can_manage_Set() const{
    return m_can_manage_isSet;
}

bool OAIGoalResponse_allOf_metric::is_can_manage_Valid() const{
    return m_can_manage_isValid;
}

bool OAIGoalResponse_allOf_metric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_display_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_manage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalResponse_allOf_metric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
