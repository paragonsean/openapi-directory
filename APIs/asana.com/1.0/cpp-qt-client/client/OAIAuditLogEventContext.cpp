/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLogEventContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLogEventContext::OAIAuditLogEventContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLogEventContext::OAIAuditLogEventContext() {
    this->initializeModel();
}

OAIAuditLogEventContext::~OAIAuditLogEventContext() {}

void OAIAuditLogEventContext::initializeModel() {

    m_api_authentication_method_isSet = false;
    m_api_authentication_method_isValid = false;

    m_client_ip_address_isSet = false;
    m_client_ip_address_isValid = false;

    m_context_type_isSet = false;
    m_context_type_isValid = false;

    m_oauth_app_name_isSet = false;
    m_oauth_app_name_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIAuditLogEventContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLogEventContext::fromJsonObject(QJsonObject json) {

    m_api_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_api_authentication_method, json[QString("api_authentication_method")]);
    m_api_authentication_method_isSet = !json[QString("api_authentication_method")].isNull() && m_api_authentication_method_isValid;

    m_client_ip_address_isValid = ::OpenAPI::fromJsonValue(m_client_ip_address, json[QString("client_ip_address")]);
    m_client_ip_address_isSet = !json[QString("client_ip_address")].isNull() && m_client_ip_address_isValid;

    m_context_type_isValid = ::OpenAPI::fromJsonValue(m_context_type, json[QString("context_type")]);
    m_context_type_isSet = !json[QString("context_type")].isNull() && m_context_type_isValid;

    m_oauth_app_name_isValid = ::OpenAPI::fromJsonValue(m_oauth_app_name, json[QString("oauth_app_name")]);
    m_oauth_app_name_isSet = !json[QString("oauth_app_name")].isNull() && m_oauth_app_name_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;
}

QString OAIAuditLogEventContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLogEventContext::asJsonObject() const {
    QJsonObject obj;
    if (m_api_authentication_method_isSet) {
        obj.insert(QString("api_authentication_method"), ::OpenAPI::toJsonValue(m_api_authentication_method));
    }
    if (m_client_ip_address_isSet) {
        obj.insert(QString("client_ip_address"), ::OpenAPI::toJsonValue(m_client_ip_address));
    }
    if (m_context_type_isSet) {
        obj.insert(QString("context_type"), ::OpenAPI::toJsonValue(m_context_type));
    }
    if (m_oauth_app_name_isSet) {
        obj.insert(QString("oauth_app_name"), ::OpenAPI::toJsonValue(m_oauth_app_name));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QString OAIAuditLogEventContext::getApiAuthenticationMethod() const {
    return m_api_authentication_method;
}
void OAIAuditLogEventContext::setApiAuthenticationMethod(const QString &api_authentication_method) {
    m_api_authentication_method = api_authentication_method;
    m_api_authentication_method_isSet = true;
}

bool OAIAuditLogEventContext::is_api_authentication_method_Set() const{
    return m_api_authentication_method_isSet;
}

bool OAIAuditLogEventContext::is_api_authentication_method_Valid() const{
    return m_api_authentication_method_isValid;
}

QString OAIAuditLogEventContext::getClientIpAddress() const {
    return m_client_ip_address;
}
void OAIAuditLogEventContext::setClientIpAddress(const QString &client_ip_address) {
    m_client_ip_address = client_ip_address;
    m_client_ip_address_isSet = true;
}

bool OAIAuditLogEventContext::is_client_ip_address_Set() const{
    return m_client_ip_address_isSet;
}

bool OAIAuditLogEventContext::is_client_ip_address_Valid() const{
    return m_client_ip_address_isValid;
}

QString OAIAuditLogEventContext::getContextType() const {
    return m_context_type;
}
void OAIAuditLogEventContext::setContextType(const QString &context_type) {
    m_context_type = context_type;
    m_context_type_isSet = true;
}

bool OAIAuditLogEventContext::is_context_type_Set() const{
    return m_context_type_isSet;
}

bool OAIAuditLogEventContext::is_context_type_Valid() const{
    return m_context_type_isValid;
}

QString OAIAuditLogEventContext::getOauthAppName() const {
    return m_oauth_app_name;
}
void OAIAuditLogEventContext::setOauthAppName(const QString &oauth_app_name) {
    m_oauth_app_name = oauth_app_name;
    m_oauth_app_name_isSet = true;
}

bool OAIAuditLogEventContext::is_oauth_app_name_Set() const{
    return m_oauth_app_name_isSet;
}

bool OAIAuditLogEventContext::is_oauth_app_name_Valid() const{
    return m_oauth_app_name_isValid;
}

QString OAIAuditLogEventContext::getUserAgent() const {
    return m_user_agent;
}
void OAIAuditLogEventContext::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIAuditLogEventContext::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIAuditLogEventContext::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIAuditLogEventContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLogEventContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
