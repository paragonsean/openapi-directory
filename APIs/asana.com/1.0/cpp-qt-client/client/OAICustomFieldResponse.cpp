/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFieldResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFieldResponse::OAICustomFieldResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFieldResponse::OAICustomFieldResponse() {
    this->initializeModel();
}

OAICustomFieldResponse::~OAICustomFieldResponse() {}

void OAICustomFieldResponse::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_date_value_isSet = false;
    m_date_value_isValid = false;

    m_display_value_isSet = false;
    m_display_value_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_enum_options_isSet = false;
    m_enum_options_isValid = false;

    m_enum_value_isSet = false;
    m_enum_value_isValid = false;

    m_multi_enum_values_isSet = false;
    m_multi_enum_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_value_isSet = false;
    m_number_value_isValid = false;

    m_resource_subtype_isSet = false;
    m_resource_subtype_isValid = false;

    m_text_value_isSet = false;
    m_text_value_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_asana_created_field_isSet = false;
    m_asana_created_field_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_custom_label_isSet = false;
    m_custom_label_isValid = false;

    m_custom_label_position_isSet = false;
    m_custom_label_position_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_has_notifications_enabled_isSet = false;
    m_has_notifications_enabled_isValid = false;

    m_is_global_to_workspace_isSet = false;
    m_is_global_to_workspace_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_people_value_isSet = false;
    m_people_value_isValid = false;
}

void OAICustomFieldResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFieldResponse::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_date_value_isValid = ::OpenAPI::fromJsonValue(m_date_value, json[QString("date_value")]);
    m_date_value_isSet = !json[QString("date_value")].isNull() && m_date_value_isValid;

    m_display_value_isValid = ::OpenAPI::fromJsonValue(m_display_value, json[QString("display_value")]);
    m_display_value_isSet = !json[QString("display_value")].isNull() && m_display_value_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_enum_options_isValid = ::OpenAPI::fromJsonValue(m_enum_options, json[QString("enum_options")]);
    m_enum_options_isSet = !json[QString("enum_options")].isNull() && m_enum_options_isValid;

    m_enum_value_isValid = ::OpenAPI::fromJsonValue(m_enum_value, json[QString("enum_value")]);
    m_enum_value_isSet = !json[QString("enum_value")].isNull() && m_enum_value_isValid;

    m_multi_enum_values_isValid = ::OpenAPI::fromJsonValue(m_multi_enum_values, json[QString("multi_enum_values")]);
    m_multi_enum_values_isSet = !json[QString("multi_enum_values")].isNull() && m_multi_enum_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_value_isValid = ::OpenAPI::fromJsonValue(m_number_value, json[QString("number_value")]);
    m_number_value_isSet = !json[QString("number_value")].isNull() && m_number_value_isValid;

    m_resource_subtype_isValid = ::OpenAPI::fromJsonValue(m_resource_subtype, json[QString("resource_subtype")]);
    m_resource_subtype_isSet = !json[QString("resource_subtype")].isNull() && m_resource_subtype_isValid;

    m_text_value_isValid = ::OpenAPI::fromJsonValue(m_text_value, json[QString("text_value")]);
    m_text_value_isSet = !json[QString("text_value")].isNull() && m_text_value_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_asana_created_field_isValid = ::OpenAPI::fromJsonValue(m_asana_created_field, json[QString("asana_created_field")]);
    m_asana_created_field_isSet = !json[QString("asana_created_field")].isNull() && m_asana_created_field_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_custom_label_isValid = ::OpenAPI::fromJsonValue(m_custom_label, json[QString("custom_label")]);
    m_custom_label_isSet = !json[QString("custom_label")].isNull() && m_custom_label_isValid;

    m_custom_label_position_isValid = ::OpenAPI::fromJsonValue(m_custom_label_position, json[QString("custom_label_position")]);
    m_custom_label_position_isSet = !json[QString("custom_label_position")].isNull() && m_custom_label_position_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_has_notifications_enabled_isValid = ::OpenAPI::fromJsonValue(m_has_notifications_enabled, json[QString("has_notifications_enabled")]);
    m_has_notifications_enabled_isSet = !json[QString("has_notifications_enabled")].isNull() && m_has_notifications_enabled_isValid;

    m_is_global_to_workspace_isValid = ::OpenAPI::fromJsonValue(m_is_global_to_workspace, json[QString("is_global_to_workspace")]);
    m_is_global_to_workspace_isSet = !json[QString("is_global_to_workspace")].isNull() && m_is_global_to_workspace_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_people_value_isValid = ::OpenAPI::fromJsonValue(m_people_value, json[QString("people_value")]);
    m_people_value_isSet = !json[QString("people_value")].isNull() && m_people_value_isValid;
}

QString OAICustomFieldResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFieldResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_date_value.isSet()) {
        obj.insert(QString("date_value"), ::OpenAPI::toJsonValue(m_date_value));
    }
    if (m_display_value_isSet) {
        obj.insert(QString("display_value"), ::OpenAPI::toJsonValue(m_display_value));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_enum_options.size() > 0) {
        obj.insert(QString("enum_options"), ::OpenAPI::toJsonValue(m_enum_options));
    }
    if (m_enum_value.isSet()) {
        obj.insert(QString("enum_value"), ::OpenAPI::toJsonValue(m_enum_value));
    }
    if (m_multi_enum_values.size() > 0) {
        obj.insert(QString("multi_enum_values"), ::OpenAPI::toJsonValue(m_multi_enum_values));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_value_isSet) {
        obj.insert(QString("number_value"), ::OpenAPI::toJsonValue(m_number_value));
    }
    if (m_resource_subtype_isSet) {
        obj.insert(QString("resource_subtype"), ::OpenAPI::toJsonValue(m_resource_subtype));
    }
    if (m_text_value_isSet) {
        obj.insert(QString("text_value"), ::OpenAPI::toJsonValue(m_text_value));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_asana_created_field_isSet) {
        obj.insert(QString("asana_created_field"), ::OpenAPI::toJsonValue(m_asana_created_field));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_custom_label_isSet) {
        obj.insert(QString("custom_label"), ::OpenAPI::toJsonValue(m_custom_label));
    }
    if (m_custom_label_position_isSet) {
        obj.insert(QString("custom_label_position"), ::OpenAPI::toJsonValue(m_custom_label_position));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_has_notifications_enabled_isSet) {
        obj.insert(QString("has_notifications_enabled"), ::OpenAPI::toJsonValue(m_has_notifications_enabled));
    }
    if (m_is_global_to_workspace_isSet) {
        obj.insert(QString("is_global_to_workspace"), ::OpenAPI::toJsonValue(m_is_global_to_workspace));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_people_value.size() > 0) {
        obj.insert(QString("people_value"), ::OpenAPI::toJsonValue(m_people_value));
    }
    return obj;
}

QString OAICustomFieldResponse::getGid() const {
    return m_gid;
}
void OAICustomFieldResponse::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAICustomFieldResponse::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAICustomFieldResponse::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAICustomFieldResponse::getResourceType() const {
    return m_resource_type;
}
void OAICustomFieldResponse::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICustomFieldResponse::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICustomFieldResponse::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAICustomFieldCompact_allOf_date_value OAICustomFieldResponse::getDateValue() const {
    return m_date_value;
}
void OAICustomFieldResponse::setDateValue(const OAICustomFieldCompact_allOf_date_value &date_value) {
    m_date_value = date_value;
    m_date_value_isSet = true;
}

bool OAICustomFieldResponse::is_date_value_Set() const{
    return m_date_value_isSet;
}

bool OAICustomFieldResponse::is_date_value_Valid() const{
    return m_date_value_isValid;
}

QString OAICustomFieldResponse::getDisplayValue() const {
    return m_display_value;
}
void OAICustomFieldResponse::setDisplayValue(const QString &display_value) {
    m_display_value = display_value;
    m_display_value_isSet = true;
}

bool OAICustomFieldResponse::is_display_value_Set() const{
    return m_display_value_isSet;
}

bool OAICustomFieldResponse::is_display_value_Valid() const{
    return m_display_value_isValid;
}

bool OAICustomFieldResponse::isEnabled() const {
    return m_enabled;
}
void OAICustomFieldResponse::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICustomFieldResponse::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICustomFieldResponse::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIEnumOption> OAICustomFieldResponse::getEnumOptions() const {
    return m_enum_options;
}
void OAICustomFieldResponse::setEnumOptions(const QList<OAIEnumOption> &enum_options) {
    m_enum_options = enum_options;
    m_enum_options_isSet = true;
}

bool OAICustomFieldResponse::is_enum_options_Set() const{
    return m_enum_options_isSet;
}

bool OAICustomFieldResponse::is_enum_options_Valid() const{
    return m_enum_options_isValid;
}

OAICustomFieldCompact_allOf_enum_value OAICustomFieldResponse::getEnumValue() const {
    return m_enum_value;
}
void OAICustomFieldResponse::setEnumValue(const OAICustomFieldCompact_allOf_enum_value &enum_value) {
    m_enum_value = enum_value;
    m_enum_value_isSet = true;
}

bool OAICustomFieldResponse::is_enum_value_Set() const{
    return m_enum_value_isSet;
}

bool OAICustomFieldResponse::is_enum_value_Valid() const{
    return m_enum_value_isValid;
}

QList<OAIEnumOption> OAICustomFieldResponse::getMultiEnumValues() const {
    return m_multi_enum_values;
}
void OAICustomFieldResponse::setMultiEnumValues(const QList<OAIEnumOption> &multi_enum_values) {
    m_multi_enum_values = multi_enum_values;
    m_multi_enum_values_isSet = true;
}

bool OAICustomFieldResponse::is_multi_enum_values_Set() const{
    return m_multi_enum_values_isSet;
}

bool OAICustomFieldResponse::is_multi_enum_values_Valid() const{
    return m_multi_enum_values_isValid;
}

QString OAICustomFieldResponse::getName() const {
    return m_name;
}
void OAICustomFieldResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomFieldResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomFieldResponse::is_name_Valid() const{
    return m_name_isValid;
}

double OAICustomFieldResponse::getNumberValue() const {
    return m_number_value;
}
void OAICustomFieldResponse::setNumberValue(const double &number_value) {
    m_number_value = number_value;
    m_number_value_isSet = true;
}

bool OAICustomFieldResponse::is_number_value_Set() const{
    return m_number_value_isSet;
}

bool OAICustomFieldResponse::is_number_value_Valid() const{
    return m_number_value_isValid;
}

QString OAICustomFieldResponse::getResourceSubtype() const {
    return m_resource_subtype;
}
void OAICustomFieldResponse::setResourceSubtype(const QString &resource_subtype) {
    m_resource_subtype = resource_subtype;
    m_resource_subtype_isSet = true;
}

bool OAICustomFieldResponse::is_resource_subtype_Set() const{
    return m_resource_subtype_isSet;
}

bool OAICustomFieldResponse::is_resource_subtype_Valid() const{
    return m_resource_subtype_isValid;
}

QString OAICustomFieldResponse::getTextValue() const {
    return m_text_value;
}
void OAICustomFieldResponse::setTextValue(const QString &text_value) {
    m_text_value = text_value;
    m_text_value_isSet = true;
}

bool OAICustomFieldResponse::is_text_value_Set() const{
    return m_text_value_isSet;
}

bool OAICustomFieldResponse::is_text_value_Valid() const{
    return m_text_value_isValid;
}

QString OAICustomFieldResponse::getType() const {
    return m_type;
}
void OAICustomFieldResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomFieldResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomFieldResponse::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICustomFieldResponse::getAsanaCreatedField() const {
    return m_asana_created_field;
}
void OAICustomFieldResponse::setAsanaCreatedField(const QString &asana_created_field) {
    m_asana_created_field = asana_created_field;
    m_asana_created_field_isSet = true;
}

bool OAICustomFieldResponse::is_asana_created_field_Set() const{
    return m_asana_created_field_isSet;
}

bool OAICustomFieldResponse::is_asana_created_field_Valid() const{
    return m_asana_created_field_isValid;
}

QString OAICustomFieldResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAICustomFieldResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICustomFieldResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICustomFieldResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAICustomFieldResponse::getCustomLabel() const {
    return m_custom_label;
}
void OAICustomFieldResponse::setCustomLabel(const QString &custom_label) {
    m_custom_label = custom_label;
    m_custom_label_isSet = true;
}

bool OAICustomFieldResponse::is_custom_label_Set() const{
    return m_custom_label_isSet;
}

bool OAICustomFieldResponse::is_custom_label_Valid() const{
    return m_custom_label_isValid;
}

QString OAICustomFieldResponse::getCustomLabelPosition() const {
    return m_custom_label_position;
}
void OAICustomFieldResponse::setCustomLabelPosition(const QString &custom_label_position) {
    m_custom_label_position = custom_label_position;
    m_custom_label_position_isSet = true;
}

bool OAICustomFieldResponse::is_custom_label_position_Set() const{
    return m_custom_label_position_isSet;
}

bool OAICustomFieldResponse::is_custom_label_position_Valid() const{
    return m_custom_label_position_isValid;
}

QString OAICustomFieldResponse::getDescription() const {
    return m_description;
}
void OAICustomFieldResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomFieldResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomFieldResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICustomFieldResponse::getFormat() const {
    return m_format;
}
void OAICustomFieldResponse::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICustomFieldResponse::is_format_Set() const{
    return m_format_isSet;
}

bool OAICustomFieldResponse::is_format_Valid() const{
    return m_format_isValid;
}

bool OAICustomFieldResponse::isHasNotificationsEnabled() const {
    return m_has_notifications_enabled;
}
void OAICustomFieldResponse::setHasNotificationsEnabled(const bool &has_notifications_enabled) {
    m_has_notifications_enabled = has_notifications_enabled;
    m_has_notifications_enabled_isSet = true;
}

bool OAICustomFieldResponse::is_has_notifications_enabled_Set() const{
    return m_has_notifications_enabled_isSet;
}

bool OAICustomFieldResponse::is_has_notifications_enabled_Valid() const{
    return m_has_notifications_enabled_isValid;
}

bool OAICustomFieldResponse::isIsGlobalToWorkspace() const {
    return m_is_global_to_workspace;
}
void OAICustomFieldResponse::setIsGlobalToWorkspace(const bool &is_global_to_workspace) {
    m_is_global_to_workspace = is_global_to_workspace;
    m_is_global_to_workspace_isSet = true;
}

bool OAICustomFieldResponse::is_is_global_to_workspace_Set() const{
    return m_is_global_to_workspace_isSet;
}

bool OAICustomFieldResponse::is_is_global_to_workspace_Valid() const{
    return m_is_global_to_workspace_isValid;
}

qint32 OAICustomFieldResponse::getPrecision() const {
    return m_precision;
}
void OAICustomFieldResponse::setPrecision(const qint32 &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAICustomFieldResponse::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAICustomFieldResponse::is_precision_Valid() const{
    return m_precision_isValid;
}

OAIUserCompact OAICustomFieldResponse::getCreatedBy() const {
    return m_created_by;
}
void OAICustomFieldResponse::setCreatedBy(const OAIUserCompact &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAICustomFieldResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAICustomFieldResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QList<OAIUserCompact> OAICustomFieldResponse::getPeopleValue() const {
    return m_people_value;
}
void OAICustomFieldResponse::setPeopleValue(const QList<OAIUserCompact> &people_value) {
    m_people_value = people_value;
    m_people_value_isSet = true;
}

bool OAICustomFieldResponse::is_people_value_Set() const{
    return m_people_value_isSet;
}

bool OAICustomFieldResponse::is_people_value_Valid() const{
    return m_people_value_isValid;
}

bool OAICustomFieldResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_enum_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asana_created_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_notifications_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_to_workspace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFieldResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
