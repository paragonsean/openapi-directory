/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SaleListingById200Response model module.
 * @module model/SaleListingById200Response
 * @version 1.0
 */
class SaleListingById200Response {
    /**
     * Constructs a new <code>SaleListingById200Response</code>.
     * @alias module:model/SaleListingById200Response
     */
    constructor() { 
        
        SaleListingById200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['bathrooms'] = 0;
        obj['bedrooms'] = 0;
        obj['daysOnMarket'] = 0;
        obj['latitude'] = 0;
        obj['longitude'] = 0;
        obj['lotSize'] = 0;
        obj['price'] = 0;
        obj['squareFootage'] = 0;
        obj['yearBuilt'] = 0;
    }

    /**
     * Constructs a <code>SaleListingById200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SaleListingById200Response} obj Optional instance to populate.
     * @return {module:model/SaleListingById200Response} The populated <code>SaleListingById200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SaleListingById200Response();

            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('bathrooms')) {
                obj['bathrooms'] = ApiClient.convertToType(data['bathrooms'], 'Number');
            }
            if (data.hasOwnProperty('bedrooms')) {
                obj['bedrooms'] = ApiClient.convertToType(data['bedrooms'], 'Number');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'String');
            }
            if (data.hasOwnProperty('daysOnMarket')) {
                obj['daysOnMarket'] = ApiClient.convertToType(data['daysOnMarket'], 'Number');
            }
            if (data.hasOwnProperty('formattedAddress')) {
                obj['formattedAddress'] = ApiClient.convertToType(data['formattedAddress'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastSeenDate')) {
                obj['lastSeenDate'] = ApiClient.convertToType(data['lastSeenDate'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('listedDate')) {
                obj['listedDate'] = ApiClient.convertToType(data['listedDate'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('lotSize')) {
                obj['lotSize'] = ApiClient.convertToType(data['lotSize'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('propertyType')) {
                obj['propertyType'] = ApiClient.convertToType(data['propertyType'], 'String');
            }
            if (data.hasOwnProperty('removedDate')) {
                obj['removedDate'] = ApiClient.convertToType(data['removedDate'], Object);
            }
            if (data.hasOwnProperty('squareFootage')) {
                obj['squareFootage'] = ApiClient.convertToType(data['squareFootage'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('yearBuilt')) {
                obj['yearBuilt'] = ApiClient.convertToType(data['yearBuilt'], 'Number');
            }
            if (data.hasOwnProperty('zipCode')) {
                obj['zipCode'] = ApiClient.convertToType(data['zipCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SaleListingById200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SaleListingById200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['createdDate'] && !(typeof data['createdDate'] === 'string' || data['createdDate'] instanceof String)) {
            throw new Error("Expected the field `createdDate` to be a primitive type in the JSON string but got " + data['createdDate']);
        }
        // ensure the json data is a string
        if (data['formattedAddress'] && !(typeof data['formattedAddress'] === 'string' || data['formattedAddress'] instanceof String)) {
            throw new Error("Expected the field `formattedAddress` to be a primitive type in the JSON string but got " + data['formattedAddress']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastSeenDate'] && !(typeof data['lastSeenDate'] === 'string' || data['lastSeenDate'] instanceof String)) {
            throw new Error("Expected the field `lastSeenDate` to be a primitive type in the JSON string but got " + data['lastSeenDate']);
        }
        // ensure the json data is a string
        if (data['listedDate'] && !(typeof data['listedDate'] === 'string' || data['listedDate'] instanceof String)) {
            throw new Error("Expected the field `listedDate` to be a primitive type in the JSON string but got " + data['listedDate']);
        }
        // ensure the json data is a string
        if (data['propertyType'] && !(typeof data['propertyType'] === 'string' || data['propertyType'] instanceof String)) {
            throw new Error("Expected the field `propertyType` to be a primitive type in the JSON string but got " + data['propertyType']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['zipCode'] && !(typeof data['zipCode'] === 'string' || data['zipCode'] instanceof String)) {
            throw new Error("Expected the field `zipCode` to be a primitive type in the JSON string but got " + data['zipCode']);
        }

        return true;
    }


}



/**
 * @member {String} addressLine1
 */
SaleListingById200Response.prototype['addressLine1'] = undefined;

/**
 * @member {Number} bathrooms
 * @default 0
 */
SaleListingById200Response.prototype['bathrooms'] = 0;

/**
 * @member {Number} bedrooms
 * @default 0
 */
SaleListingById200Response.prototype['bedrooms'] = 0;

/**
 * @member {String} city
 */
SaleListingById200Response.prototype['city'] = undefined;

/**
 * @member {String} county
 */
SaleListingById200Response.prototype['county'] = undefined;

/**
 * @member {String} createdDate
 */
SaleListingById200Response.prototype['createdDate'] = undefined;

/**
 * @member {Number} daysOnMarket
 * @default 0
 */
SaleListingById200Response.prototype['daysOnMarket'] = 0;

/**
 * @member {String} formattedAddress
 */
SaleListingById200Response.prototype['formattedAddress'] = undefined;

/**
 * @member {String} id
 */
SaleListingById200Response.prototype['id'] = undefined;

/**
 * @member {String} lastSeenDate
 */
SaleListingById200Response.prototype['lastSeenDate'] = undefined;

/**
 * @member {Number} latitude
 * @default 0
 */
SaleListingById200Response.prototype['latitude'] = 0;

/**
 * @member {String} listedDate
 */
SaleListingById200Response.prototype['listedDate'] = undefined;

/**
 * @member {Number} longitude
 * @default 0
 */
SaleListingById200Response.prototype['longitude'] = 0;

/**
 * @member {Number} lotSize
 * @default 0
 */
SaleListingById200Response.prototype['lotSize'] = 0;

/**
 * @member {Number} price
 * @default 0
 */
SaleListingById200Response.prototype['price'] = 0;

/**
 * @member {String} propertyType
 */
SaleListingById200Response.prototype['propertyType'] = undefined;

/**
 * @member {Object} removedDate
 */
SaleListingById200Response.prototype['removedDate'] = undefined;

/**
 * @member {Number} squareFootage
 * @default 0
 */
SaleListingById200Response.prototype['squareFootage'] = 0;

/**
 * @member {String} state
 */
SaleListingById200Response.prototype['state'] = undefined;

/**
 * @member {String} status
 */
SaleListingById200Response.prototype['status'] = undefined;

/**
 * @member {Number} yearBuilt
 * @default 0
 */
SaleListingById200Response.prototype['yearBuilt'] = 0;

/**
 * @member {String} zipCode
 */
SaleListingById200Response.prototype['zipCode'] = undefined;






export default SaleListingById200Response;

