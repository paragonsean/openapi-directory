/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PropertyRecordsRandom200ResponseInnerFeatures model module.
 * @module model/PropertyRecordsRandom200ResponseInnerFeatures
 * @version 1.0
 */
class PropertyRecordsRandom200ResponseInnerFeatures {
    /**
     * Constructs a new <code>PropertyRecordsRandom200ResponseInnerFeatures</code>.
     * @alias module:model/PropertyRecordsRandom200ResponseInnerFeatures
     */
    constructor() { 
        
        PropertyRecordsRandom200ResponseInnerFeatures.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['cooling'] = true;
        obj['fireplace'] = true;
        obj['floorCount'] = 0;
        obj['garage'] = true;
        obj['heating'] = true;
        obj['unitCount'] = 0;
    }

    /**
     * Constructs a <code>PropertyRecordsRandom200ResponseInnerFeatures</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyRecordsRandom200ResponseInnerFeatures} obj Optional instance to populate.
     * @return {module:model/PropertyRecordsRandom200ResponseInnerFeatures} The populated <code>PropertyRecordsRandom200ResponseInnerFeatures</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyRecordsRandom200ResponseInnerFeatures();

            if (data.hasOwnProperty('architectureType')) {
                obj['architectureType'] = ApiClient.convertToType(data['architectureType'], 'String');
            }
            if (data.hasOwnProperty('cooling')) {
                obj['cooling'] = ApiClient.convertToType(data['cooling'], 'Boolean');
            }
            if (data.hasOwnProperty('coolingType')) {
                obj['coolingType'] = ApiClient.convertToType(data['coolingType'], 'String');
            }
            if (data.hasOwnProperty('exteriorType')) {
                obj['exteriorType'] = ApiClient.convertToType(data['exteriorType'], 'String');
            }
            if (data.hasOwnProperty('fireplace')) {
                obj['fireplace'] = ApiClient.convertToType(data['fireplace'], 'Boolean');
            }
            if (data.hasOwnProperty('fireplaceType')) {
                obj['fireplaceType'] = ApiClient.convertToType(data['fireplaceType'], 'String');
            }
            if (data.hasOwnProperty('floorCount')) {
                obj['floorCount'] = ApiClient.convertToType(data['floorCount'], 'Number');
            }
            if (data.hasOwnProperty('garage')) {
                obj['garage'] = ApiClient.convertToType(data['garage'], 'Boolean');
            }
            if (data.hasOwnProperty('garageType')) {
                obj['garageType'] = ApiClient.convertToType(data['garageType'], 'String');
            }
            if (data.hasOwnProperty('heating')) {
                obj['heating'] = ApiClient.convertToType(data['heating'], 'Boolean');
            }
            if (data.hasOwnProperty('heatingType')) {
                obj['heatingType'] = ApiClient.convertToType(data['heatingType'], 'String');
            }
            if (data.hasOwnProperty('roofType')) {
                obj['roofType'] = ApiClient.convertToType(data['roofType'], 'String');
            }
            if (data.hasOwnProperty('unitCount')) {
                obj['unitCount'] = ApiClient.convertToType(data['unitCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyRecordsRandom200ResponseInnerFeatures</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyRecordsRandom200ResponseInnerFeatures</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['architectureType'] && !(typeof data['architectureType'] === 'string' || data['architectureType'] instanceof String)) {
            throw new Error("Expected the field `architectureType` to be a primitive type in the JSON string but got " + data['architectureType']);
        }
        // ensure the json data is a string
        if (data['coolingType'] && !(typeof data['coolingType'] === 'string' || data['coolingType'] instanceof String)) {
            throw new Error("Expected the field `coolingType` to be a primitive type in the JSON string but got " + data['coolingType']);
        }
        // ensure the json data is a string
        if (data['exteriorType'] && !(typeof data['exteriorType'] === 'string' || data['exteriorType'] instanceof String)) {
            throw new Error("Expected the field `exteriorType` to be a primitive type in the JSON string but got " + data['exteriorType']);
        }
        // ensure the json data is a string
        if (data['fireplaceType'] && !(typeof data['fireplaceType'] === 'string' || data['fireplaceType'] instanceof String)) {
            throw new Error("Expected the field `fireplaceType` to be a primitive type in the JSON string but got " + data['fireplaceType']);
        }
        // ensure the json data is a string
        if (data['garageType'] && !(typeof data['garageType'] === 'string' || data['garageType'] instanceof String)) {
            throw new Error("Expected the field `garageType` to be a primitive type in the JSON string but got " + data['garageType']);
        }
        // ensure the json data is a string
        if (data['heatingType'] && !(typeof data['heatingType'] === 'string' || data['heatingType'] instanceof String)) {
            throw new Error("Expected the field `heatingType` to be a primitive type in the JSON string but got " + data['heatingType']);
        }
        // ensure the json data is a string
        if (data['roofType'] && !(typeof data['roofType'] === 'string' || data['roofType'] instanceof String)) {
            throw new Error("Expected the field `roofType` to be a primitive type in the JSON string but got " + data['roofType']);
        }

        return true;
    }


}



/**
 * @member {String} architectureType
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['architectureType'] = undefined;

/**
 * @member {Boolean} cooling
 * @default true
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['cooling'] = true;

/**
 * @member {String} coolingType
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['coolingType'] = undefined;

/**
 * @member {String} exteriorType
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['exteriorType'] = undefined;

/**
 * @member {Boolean} fireplace
 * @default true
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['fireplace'] = true;

/**
 * @member {String} fireplaceType
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['fireplaceType'] = undefined;

/**
 * @member {Number} floorCount
 * @default 0
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['floorCount'] = 0;

/**
 * @member {Boolean} garage
 * @default true
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['garage'] = true;

/**
 * @member {String} garageType
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['garageType'] = undefined;

/**
 * @member {Boolean} heating
 * @default true
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['heating'] = true;

/**
 * @member {String} heatingType
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['heatingType'] = undefined;

/**
 * @member {String} roofType
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['roofType'] = undefined;

/**
 * @member {Number} unitCount
 * @default 0
 */
PropertyRecordsRandom200ResponseInnerFeatures.prototype['unitCount'] = 0;






export default PropertyRecordsRandom200ResponseInnerFeatures;

