/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MarketStatistics200Response from '../model/MarketStatistics200Response';
import PropertyRecords200ResponseInner from '../model/PropertyRecords200ResponseInner';
import PropertyRecordsRandom200ResponseInner from '../model/PropertyRecordsRandom200ResponseInner';
import RentEstimateLongTerm200Response from '../model/RentEstimateLongTerm200Response';
import RentalListingLongTermById200Response from '../model/RentalListingLongTermById200Response';
import RentalListingsLongTerm200ResponseInner from '../model/RentalListingsLongTerm200ResponseInner';
import SaleListingById200Response from '../model/SaleListingById200Response';
import SaleListings200ResponseInner from '../model/SaleListings200ResponseInner';
import ValueEstimate200Response from '../model/ValueEstimate200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the marketStatistics operation.
     * @callback module:api/DefaultApi~marketStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketStatistics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market Statistics
     * Returns aggregate rental statistics and listing trends for a single US zip code.
     * @param {String} zipCode A valid 5-digit US zip code
     * @param {Object} opts Optional parameters
     * @param {Number} [historyRange = 6)] The time range for historical record entries, in months. Defaults to 12 if not provided
     * @param {module:api/DefaultApi~marketStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketStatistics200Response}
     */
    marketStatistics(zipCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'zipCode' is set
      if (zipCode === undefined || zipCode === null) {
        throw new Error("Missing the required parameter 'zipCode' when calling marketStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'zipCode': zipCode,
        'historyRange': opts['historyRange']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MarketStatistics200Response;
      return this.apiClient.callApi(
        '/markets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyRecordById operation.
     * @callback module:api/DefaultApi~propertyRecordByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyRecords200ResponseInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Property Record by Id
     * Returns a single property record matching the specified id.
     * @param {String} id The id of the property record to return
     * @param {module:api/DefaultApi~propertyRecordByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyRecords200ResponseInner}
     */
    propertyRecordById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling propertyRecordById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyRecords200ResponseInner;
      return this.apiClient.callApi(
        '/properties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyRecords operation.
     * @callback module:api/DefaultApi~propertyRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyRecords200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Property Records
     * Search for property records in a geographical area, or by a specific address.
     * @param {Object} opts Optional parameters
     * @param {String} [address = '5500 Grand Lake Dr, San Antonio, TX, 78244')] The full address of the property, in the format of `Street, City, State, Zip`. Used to retrieve data for a specific property, or together with the `radius` parameter to search for properties in a specific area
     * @param {String} [city] The name of the city, used to search for properties in a specific city. This parameter is case-sensitive
     * @param {String} [state] The 2-character state abbreviation, used to search for properties in a specific state. This parameter is case-sensitive
     * @param {String} [zipCode] The 5-digit zip code, used to search for properties in a specific zip code
     * @param {Number} [latitude] The latitude of the search area. Use the `latitude`/`longitude` and `radius` parameters to search for properties in a specific area
     * @param {Number} [longitude] The longitude of the search area. Use the `latitude`/`longitude` and `radius` parameters to search for properties in a specific area
     * @param {Number} [radius] The radius of the search area in miles, with a maximum of 100. Use in combination with the `latitude`/`longitude` or `address` parameters to search for properties in a specific area
     * @param {module:model/String} [propertyType] The type of the property, used to search for properties matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types)
     * @param {Number} [bedrooms] The number of bedrooms, used to search for properties matching this criteria. Use `0` to indicate a studio layout
     * @param {Number} [bathrooms] The number of bathrooms, used to search for properties matching this criteria. Supports fractions to indicate partial bathrooms
     * @param {Number} [limit] The maximum number of property records to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination
     * @param {Number} [offset] The index of the first property record to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination
     * @param {module:api/DefaultApi~propertyRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyRecords200ResponseInner>}
     */
    propertyRecords(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'city': opts['city'],
        'state': opts['state'],
        'zipCode': opts['zipCode'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'propertyType': opts['propertyType'],
        'bedrooms': opts['bedrooms'],
        'bathrooms': opts['bathrooms'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyRecords200ResponseInner];
      return this.apiClient.callApi(
        '/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyRecordsRandom operation.
     * @callback module:api/DefaultApi~propertyRecordsRandomCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyRecordsRandom200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Random Property Records
     * Returns a list of property records selected at random.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 5)] The number of records to return, between 1 and 500. Defaults to 50 if not provided
     * @param {module:api/DefaultApi~propertyRecordsRandomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PropertyRecordsRandom200ResponseInner>}
     */
    propertyRecordsRandom(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyRecordsRandom200ResponseInner];
      return this.apiClient.callApi(
        '/properties/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rentEstimateLongTerm operation.
     * @callback module:api/DefaultApi~rentEstimateLongTermCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RentEstimateLongTerm200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rent Estimate
     * Returns a property rent estimate and comparable properties.
     * @param {Object} opts Optional parameters
     * @param {String} [address = '5500 Grand Lake Drive, San Antonio, TX, 78244')] The full property address, in the format of `Street, City, State, Zip`. You need to provide either the `address` or the `latitude`/`longitude` parameters
     * @param {Number} [latitude] The latitude of the property. The `latitude`/`longitude` can be provided instead of the `address` parameter
     * @param {Number} [longitude] The longitude of the property. The `latitude`/`longitude` can be provided instead of the `address` parameter
     * @param {module:model/String} [propertyType = 'Single Family')] The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types)
     * @param {Number} [bedrooms = 4)] The number of bedrooms in the property. Use `0` to indicate a studio layout
     * @param {Number} [bathrooms = 2)] The number of bathrooms in the property. Supports fractions to indicate partial bathrooms
     * @param {Number} [squareFootage = 1600)] The total living area size of the property, in square feet
     * @param {Number} [maxRadius] The maximum distance between comparable listings and the subject property, in miles
     * @param {Number} [daysOld] The maximum number of days since comparable listings were last seen on the market, with a minimum of 1
     * @param {Number} [compCount = 5)] The number of comparable listings to use when calculating the rent estimate, between 5 and 25. Defaults to 10 if not provided
     * @param {module:api/DefaultApi~rentEstimateLongTermCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RentEstimateLongTerm200Response}
     */
    rentEstimateLongTerm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'propertyType': opts['propertyType'],
        'bedrooms': opts['bedrooms'],
        'bathrooms': opts['bathrooms'],
        'squareFootage': opts['squareFootage'],
        'maxRadius': opts['maxRadius'],
        'daysOld': opts['daysOld'],
        'compCount': opts['compCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RentEstimateLongTerm200Response;
      return this.apiClient.callApi(
        '/avm/rent/long-term', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rentalListingLongTermById operation.
     * @callback module:api/DefaultApi~rentalListingLongTermByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RentalListingLongTermById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rental Listing by Id
     * Returns a single rental listing matching the specified id.
     * @param {String} id The id of the property listing to return
     * @param {module:api/DefaultApi~rentalListingLongTermByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RentalListingLongTermById200Response}
     */
    rentalListingLongTermById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rentalListingLongTermById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RentalListingLongTermById200Response;
      return this.apiClient.callApi(
        '/listings/rental/long-term/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rentalListingsLongTerm operation.
     * @callback module:api/DefaultApi~rentalListingsLongTermCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RentalListingsLongTerm200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rental Listings
     * Search for rental listings in a geographical area, or by a specific address.
     * @param {Object} opts Optional parameters
     * @param {String} [address] The full address of the property, in the format of `Street, City, State, Zip`. Used to retrieve data for a specific property, or together with the `radius` parameter to search for listings in a specific area
     * @param {String} [city = 'Austin')] The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     * @param {String} [state = 'TX')] The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     * @param {String} [zipCode] The 5-digit zip code, used to search for listings in a specific zip code
     * @param {Number} [latitude] The latitude of the search area. Use the `latitude`/`longitude` and `radius` parameters to search for listings in a specific area
     * @param {Number} [longitude] The longitude of the search area. Use the `latitude`/`longitude` and `radius` parameters to search for listings in a specific area
     * @param {Number} [radius] The radius of the search area in miles, with a maximum of 100. Use in combination with the `latitude`/`longitude` or `address` parameters to search for listings in a specific area
     * @param {module:model/String} [propertyType] The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types)
     * @param {Number} [bedrooms] The number of bedrooms, used to search for listings matching this criteria. Use `0` to indicate a studio layout
     * @param {Number} [bathrooms] The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     * @param {module:model/String} [status = 'Active')] The current listing status, used to search for listings matching this criteria
     * @param {Number} [daysOld] The maximum number of days since a property was listed on the market, with a minimum of 1
     * @param {Number} [limit = 5)] The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination
     * @param {Number} [offset] The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination
     * @param {module:api/DefaultApi~rentalListingsLongTermCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RentalListingsLongTerm200ResponseInner>}
     */
    rentalListingsLongTerm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'city': opts['city'],
        'state': opts['state'],
        'zipCode': opts['zipCode'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'propertyType': opts['propertyType'],
        'bedrooms': opts['bedrooms'],
        'bathrooms': opts['bathrooms'],
        'status': opts['status'],
        'daysOld': opts['daysOld'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RentalListingsLongTerm200ResponseInner];
      return this.apiClient.callApi(
        '/listings/rental/long-term', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saleListingById operation.
     * @callback module:api/DefaultApi~saleListingByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaleListingById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sale Listing by Id
     * Returns a single sale listing matching the specified id.
     * @param {String} id The id of the property listing to return
     * @param {module:api/DefaultApi~saleListingByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaleListingById200Response}
     */
    saleListingById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saleListingById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SaleListingById200Response;
      return this.apiClient.callApi(
        '/listings/sale/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saleListings operation.
     * @callback module:api/DefaultApi~saleListingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SaleListings200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sale Listings
     * Search for sale listings in a geographical area, or by a specific address.
     * @param {Object} opts Optional parameters
     * @param {String} [address] The full address of the property, in the format of `Street, City, State, Zip`. Used to retrieve data for a specific property, or together with the `radius` parameter to search for listings in a specific area
     * @param {String} [city = 'Austin')] The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     * @param {String} [state = 'TX')] The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     * @param {String} [zipCode] The 5-digit zip code, used to search for listings in a specific zip code
     * @param {Number} [latitude] The latitude of the search area. Use the `latitude`/`longitude` and `radius` parameters to search for listings in a specific area
     * @param {Number} [longitude] The longitude of the search area. Use the `latitude`/`longitude` and `radius` parameters to search for listings in a specific area
     * @param {Number} [radius] The radius of the search area in miles, with a maximum of 100. Use in combination with the `latitude`/`longitude` or `address` parameters to search for listings in a specific area
     * @param {module:model/String} [propertyType] The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types)
     * @param {Number} [bedrooms] The number of bedrooms, used to search for listings matching this criteria. Use `0` to indicate a studio layout
     * @param {Number} [bathrooms] The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     * @param {module:model/String} [status = 'Active')] The current listing status, used to search for listings matching this criteria
     * @param {Number} [daysOld] The maximum number of days since a property was listed on the market, with a minimum of 1
     * @param {Number} [limit = 5)] The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination
     * @param {Number} [offset] The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination
     * @param {module:api/DefaultApi~saleListingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SaleListings200ResponseInner>}
     */
    saleListings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'city': opts['city'],
        'state': opts['state'],
        'zipCode': opts['zipCode'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'propertyType': opts['propertyType'],
        'bedrooms': opts['bedrooms'],
        'bathrooms': opts['bathrooms'],
        'status': opts['status'],
        'daysOld': opts['daysOld'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SaleListings200ResponseInner];
      return this.apiClient.callApi(
        '/listings/sale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the valueEstimate operation.
     * @callback module:api/DefaultApi~valueEstimateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValueEstimate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Value Estimate
     * Returns a property value estimate and comparable properties.
     * @param {Object} opts Optional parameters
     * @param {String} [address = '5500 Grand Lake Drive, San Antonio, TX, 78244')] The full property address, in the format of `Street, City, State, Zip`. You need to provide either the `address` or the `latitude`/`longitude` parameters
     * @param {Number} [latitude] The latitude of the property. The `latitude`/`longitude` can be provided instead of the `address` parameter
     * @param {Number} [longitude] The longitude of the property. The `latitude`/`longitude` can be provided instead of the `address` parameter
     * @param {module:model/String} [propertyType = 'Single Family')] The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types)
     * @param {Number} [bedrooms = 4)] The number of bedrooms in the property. Use `0` to indicate a studio layout
     * @param {Number} [bathrooms = 2)] The number of bathrooms in the property. Supports fractions to indicate partial bathrooms
     * @param {Number} [squareFootage = 1600)] The total living area size of the property, in square feet
     * @param {Number} [maxRadius] The maximum distance between comparable listings and the subject property, in miles
     * @param {Number} [daysOld] The maximum number of days since comparable listings were last seen on the market, with a minimum of 1
     * @param {Number} [compCount = 5)] The number of comparable listings to use when calculating the value estimate, between 5 and 25. Defaults to 10 if not provided
     * @param {module:api/DefaultApi~valueEstimateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValueEstimate200Response}
     */
    valueEstimate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'address': opts['address'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'propertyType': opts['propertyType'],
        'bedrooms': opts['bedrooms'],
        'bathrooms': opts['bathrooms'],
        'squareFootage': opts['squareFootage'],
        'maxRadius': opts['maxRadius'],
        'daysOld': opts['daysOld'],
        'compCount': opts['compCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sec0'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ValueEstimate200Response;
      return this.apiClient.callApi(
        '/avm/value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
