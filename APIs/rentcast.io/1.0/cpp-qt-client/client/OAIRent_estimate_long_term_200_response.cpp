/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRent_estimate_long_term_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRent_estimate_long_term_200_response::OAIRent_estimate_long_term_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRent_estimate_long_term_200_response::OAIRent_estimate_long_term_200_response() {
    this->initializeModel();
}

OAIRent_estimate_long_term_200_response::~OAIRent_estimate_long_term_200_response() {}

void OAIRent_estimate_long_term_200_response::initializeModel() {

    m_comparables_isSet = false;
    m_comparables_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_rent_isSet = false;
    m_rent_isValid = false;

    m_rent_range_high_isSet = false;
    m_rent_range_high_isValid = false;

    m_rent_range_low_isSet = false;
    m_rent_range_low_isValid = false;
}

void OAIRent_estimate_long_term_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRent_estimate_long_term_200_response::fromJsonObject(QJsonObject json) {

    m_comparables_isValid = ::OpenAPI::fromJsonValue(m_comparables, json[QString("comparables")]);
    m_comparables_isSet = !json[QString("comparables")].isNull() && m_comparables_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_rent_isValid = ::OpenAPI::fromJsonValue(m_rent, json[QString("rent")]);
    m_rent_isSet = !json[QString("rent")].isNull() && m_rent_isValid;

    m_rent_range_high_isValid = ::OpenAPI::fromJsonValue(m_rent_range_high, json[QString("rentRangeHigh")]);
    m_rent_range_high_isSet = !json[QString("rentRangeHigh")].isNull() && m_rent_range_high_isValid;

    m_rent_range_low_isValid = ::OpenAPI::fromJsonValue(m_rent_range_low, json[QString("rentRangeLow")]);
    m_rent_range_low_isSet = !json[QString("rentRangeLow")].isNull() && m_rent_range_low_isValid;
}

QString OAIRent_estimate_long_term_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRent_estimate_long_term_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_comparables.size() > 0) {
        obj.insert(QString("comparables"), ::OpenAPI::toJsonValue(m_comparables));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_rent_isSet) {
        obj.insert(QString("rent"), ::OpenAPI::toJsonValue(m_rent));
    }
    if (m_rent_range_high_isSet) {
        obj.insert(QString("rentRangeHigh"), ::OpenAPI::toJsonValue(m_rent_range_high));
    }
    if (m_rent_range_low_isSet) {
        obj.insert(QString("rentRangeLow"), ::OpenAPI::toJsonValue(m_rent_range_low));
    }
    return obj;
}

QList<OAIRent_estimate_long_term_200_response_comparables_inner> OAIRent_estimate_long_term_200_response::getComparables() const {
    return m_comparables;
}
void OAIRent_estimate_long_term_200_response::setComparables(const QList<OAIRent_estimate_long_term_200_response_comparables_inner> &comparables) {
    m_comparables = comparables;
    m_comparables_isSet = true;
}

bool OAIRent_estimate_long_term_200_response::is_comparables_Set() const{
    return m_comparables_isSet;
}

bool OAIRent_estimate_long_term_200_response::is_comparables_Valid() const{
    return m_comparables_isValid;
}

double OAIRent_estimate_long_term_200_response::getLatitude() const {
    return m_latitude;
}
void OAIRent_estimate_long_term_200_response::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIRent_estimate_long_term_200_response::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIRent_estimate_long_term_200_response::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIRent_estimate_long_term_200_response::getLongitude() const {
    return m_longitude;
}
void OAIRent_estimate_long_term_200_response::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIRent_estimate_long_term_200_response::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIRent_estimate_long_term_200_response::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIRent_estimate_long_term_200_response::getRent() const {
    return m_rent;
}
void OAIRent_estimate_long_term_200_response::setRent(const qint32 &rent) {
    m_rent = rent;
    m_rent_isSet = true;
}

bool OAIRent_estimate_long_term_200_response::is_rent_Set() const{
    return m_rent_isSet;
}

bool OAIRent_estimate_long_term_200_response::is_rent_Valid() const{
    return m_rent_isValid;
}

qint32 OAIRent_estimate_long_term_200_response::getRentRangeHigh() const {
    return m_rent_range_high;
}
void OAIRent_estimate_long_term_200_response::setRentRangeHigh(const qint32 &rent_range_high) {
    m_rent_range_high = rent_range_high;
    m_rent_range_high_isSet = true;
}

bool OAIRent_estimate_long_term_200_response::is_rent_range_high_Set() const{
    return m_rent_range_high_isSet;
}

bool OAIRent_estimate_long_term_200_response::is_rent_range_high_Valid() const{
    return m_rent_range_high_isValid;
}

qint32 OAIRent_estimate_long_term_200_response::getRentRangeLow() const {
    return m_rent_range_low;
}
void OAIRent_estimate_long_term_200_response::setRentRangeLow(const qint32 &rent_range_low) {
    m_rent_range_low = rent_range_low;
    m_rent_range_low_isSet = true;
}

bool OAIRent_estimate_long_term_200_response::is_rent_range_low_Set() const{
    return m_rent_range_low_isSet;
}

bool OAIRent_estimate_long_term_200_response::is_rent_range_low_Valid() const{
    return m_rent_range_low_isValid;
}

bool OAIRent_estimate_long_term_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_range_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_range_low_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRent_estimate_long_term_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
