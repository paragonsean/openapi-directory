/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty_records_random_200_response_inner_features.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty_records_random_200_response_inner_features::OAIProperty_records_random_200_response_inner_features(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty_records_random_200_response_inner_features::OAIProperty_records_random_200_response_inner_features() {
    this->initializeModel();
}

OAIProperty_records_random_200_response_inner_features::~OAIProperty_records_random_200_response_inner_features() {}

void OAIProperty_records_random_200_response_inner_features::initializeModel() {

    m_architecture_type_isSet = false;
    m_architecture_type_isValid = false;

    m_cooling_isSet = false;
    m_cooling_isValid = false;

    m_cooling_type_isSet = false;
    m_cooling_type_isValid = false;

    m_exterior_type_isSet = false;
    m_exterior_type_isValid = false;

    m_fireplace_isSet = false;
    m_fireplace_isValid = false;

    m_fireplace_type_isSet = false;
    m_fireplace_type_isValid = false;

    m_floor_count_isSet = false;
    m_floor_count_isValid = false;

    m_garage_isSet = false;
    m_garage_isValid = false;

    m_garage_type_isSet = false;
    m_garage_type_isValid = false;

    m_heating_isSet = false;
    m_heating_isValid = false;

    m_heating_type_isSet = false;
    m_heating_type_isValid = false;

    m_roof_type_isSet = false;
    m_roof_type_isValid = false;

    m_unit_count_isSet = false;
    m_unit_count_isValid = false;
}

void OAIProperty_records_random_200_response_inner_features::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty_records_random_200_response_inner_features::fromJsonObject(QJsonObject json) {

    m_architecture_type_isValid = ::OpenAPI::fromJsonValue(m_architecture_type, json[QString("architectureType")]);
    m_architecture_type_isSet = !json[QString("architectureType")].isNull() && m_architecture_type_isValid;

    m_cooling_isValid = ::OpenAPI::fromJsonValue(m_cooling, json[QString("cooling")]);
    m_cooling_isSet = !json[QString("cooling")].isNull() && m_cooling_isValid;

    m_cooling_type_isValid = ::OpenAPI::fromJsonValue(m_cooling_type, json[QString("coolingType")]);
    m_cooling_type_isSet = !json[QString("coolingType")].isNull() && m_cooling_type_isValid;

    m_exterior_type_isValid = ::OpenAPI::fromJsonValue(m_exterior_type, json[QString("exteriorType")]);
    m_exterior_type_isSet = !json[QString("exteriorType")].isNull() && m_exterior_type_isValid;

    m_fireplace_isValid = ::OpenAPI::fromJsonValue(m_fireplace, json[QString("fireplace")]);
    m_fireplace_isSet = !json[QString("fireplace")].isNull() && m_fireplace_isValid;

    m_fireplace_type_isValid = ::OpenAPI::fromJsonValue(m_fireplace_type, json[QString("fireplaceType")]);
    m_fireplace_type_isSet = !json[QString("fireplaceType")].isNull() && m_fireplace_type_isValid;

    m_floor_count_isValid = ::OpenAPI::fromJsonValue(m_floor_count, json[QString("floorCount")]);
    m_floor_count_isSet = !json[QString("floorCount")].isNull() && m_floor_count_isValid;

    m_garage_isValid = ::OpenAPI::fromJsonValue(m_garage, json[QString("garage")]);
    m_garage_isSet = !json[QString("garage")].isNull() && m_garage_isValid;

    m_garage_type_isValid = ::OpenAPI::fromJsonValue(m_garage_type, json[QString("garageType")]);
    m_garage_type_isSet = !json[QString("garageType")].isNull() && m_garage_type_isValid;

    m_heating_isValid = ::OpenAPI::fromJsonValue(m_heating, json[QString("heating")]);
    m_heating_isSet = !json[QString("heating")].isNull() && m_heating_isValid;

    m_heating_type_isValid = ::OpenAPI::fromJsonValue(m_heating_type, json[QString("heatingType")]);
    m_heating_type_isSet = !json[QString("heatingType")].isNull() && m_heating_type_isValid;

    m_roof_type_isValid = ::OpenAPI::fromJsonValue(m_roof_type, json[QString("roofType")]);
    m_roof_type_isSet = !json[QString("roofType")].isNull() && m_roof_type_isValid;

    m_unit_count_isValid = ::OpenAPI::fromJsonValue(m_unit_count, json[QString("unitCount")]);
    m_unit_count_isSet = !json[QString("unitCount")].isNull() && m_unit_count_isValid;
}

QString OAIProperty_records_random_200_response_inner_features::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty_records_random_200_response_inner_features::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_type_isSet) {
        obj.insert(QString("architectureType"), ::OpenAPI::toJsonValue(m_architecture_type));
    }
    if (m_cooling_isSet) {
        obj.insert(QString("cooling"), ::OpenAPI::toJsonValue(m_cooling));
    }
    if (m_cooling_type_isSet) {
        obj.insert(QString("coolingType"), ::OpenAPI::toJsonValue(m_cooling_type));
    }
    if (m_exterior_type_isSet) {
        obj.insert(QString("exteriorType"), ::OpenAPI::toJsonValue(m_exterior_type));
    }
    if (m_fireplace_isSet) {
        obj.insert(QString("fireplace"), ::OpenAPI::toJsonValue(m_fireplace));
    }
    if (m_fireplace_type_isSet) {
        obj.insert(QString("fireplaceType"), ::OpenAPI::toJsonValue(m_fireplace_type));
    }
    if (m_floor_count_isSet) {
        obj.insert(QString("floorCount"), ::OpenAPI::toJsonValue(m_floor_count));
    }
    if (m_garage_isSet) {
        obj.insert(QString("garage"), ::OpenAPI::toJsonValue(m_garage));
    }
    if (m_garage_type_isSet) {
        obj.insert(QString("garageType"), ::OpenAPI::toJsonValue(m_garage_type));
    }
    if (m_heating_isSet) {
        obj.insert(QString("heating"), ::OpenAPI::toJsonValue(m_heating));
    }
    if (m_heating_type_isSet) {
        obj.insert(QString("heatingType"), ::OpenAPI::toJsonValue(m_heating_type));
    }
    if (m_roof_type_isSet) {
        obj.insert(QString("roofType"), ::OpenAPI::toJsonValue(m_roof_type));
    }
    if (m_unit_count_isSet) {
        obj.insert(QString("unitCount"), ::OpenAPI::toJsonValue(m_unit_count));
    }
    return obj;
}

QString OAIProperty_records_random_200_response_inner_features::getArchitectureType() const {
    return m_architecture_type;
}
void OAIProperty_records_random_200_response_inner_features::setArchitectureType(const QString &architecture_type) {
    m_architecture_type = architecture_type;
    m_architecture_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_architecture_type_Set() const{
    return m_architecture_type_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_architecture_type_Valid() const{
    return m_architecture_type_isValid;
}

bool OAIProperty_records_random_200_response_inner_features::isCooling() const {
    return m_cooling;
}
void OAIProperty_records_random_200_response_inner_features::setCooling(const bool &cooling) {
    m_cooling = cooling;
    m_cooling_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_cooling_Set() const{
    return m_cooling_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_cooling_Valid() const{
    return m_cooling_isValid;
}

QString OAIProperty_records_random_200_response_inner_features::getCoolingType() const {
    return m_cooling_type;
}
void OAIProperty_records_random_200_response_inner_features::setCoolingType(const QString &cooling_type) {
    m_cooling_type = cooling_type;
    m_cooling_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_cooling_type_Set() const{
    return m_cooling_type_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_cooling_type_Valid() const{
    return m_cooling_type_isValid;
}

QString OAIProperty_records_random_200_response_inner_features::getExteriorType() const {
    return m_exterior_type;
}
void OAIProperty_records_random_200_response_inner_features::setExteriorType(const QString &exterior_type) {
    m_exterior_type = exterior_type;
    m_exterior_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_exterior_type_Set() const{
    return m_exterior_type_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_exterior_type_Valid() const{
    return m_exterior_type_isValid;
}

bool OAIProperty_records_random_200_response_inner_features::isFireplace() const {
    return m_fireplace;
}
void OAIProperty_records_random_200_response_inner_features::setFireplace(const bool &fireplace) {
    m_fireplace = fireplace;
    m_fireplace_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_fireplace_Set() const{
    return m_fireplace_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_fireplace_Valid() const{
    return m_fireplace_isValid;
}

QString OAIProperty_records_random_200_response_inner_features::getFireplaceType() const {
    return m_fireplace_type;
}
void OAIProperty_records_random_200_response_inner_features::setFireplaceType(const QString &fireplace_type) {
    m_fireplace_type = fireplace_type;
    m_fireplace_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_fireplace_type_Set() const{
    return m_fireplace_type_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_fireplace_type_Valid() const{
    return m_fireplace_type_isValid;
}

qint32 OAIProperty_records_random_200_response_inner_features::getFloorCount() const {
    return m_floor_count;
}
void OAIProperty_records_random_200_response_inner_features::setFloorCount(const qint32 &floor_count) {
    m_floor_count = floor_count;
    m_floor_count_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_floor_count_Set() const{
    return m_floor_count_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_floor_count_Valid() const{
    return m_floor_count_isValid;
}

bool OAIProperty_records_random_200_response_inner_features::isGarage() const {
    return m_garage;
}
void OAIProperty_records_random_200_response_inner_features::setGarage(const bool &garage) {
    m_garage = garage;
    m_garage_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_garage_Set() const{
    return m_garage_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_garage_Valid() const{
    return m_garage_isValid;
}

QString OAIProperty_records_random_200_response_inner_features::getGarageType() const {
    return m_garage_type;
}
void OAIProperty_records_random_200_response_inner_features::setGarageType(const QString &garage_type) {
    m_garage_type = garage_type;
    m_garage_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_garage_type_Set() const{
    return m_garage_type_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_garage_type_Valid() const{
    return m_garage_type_isValid;
}

bool OAIProperty_records_random_200_response_inner_features::isHeating() const {
    return m_heating;
}
void OAIProperty_records_random_200_response_inner_features::setHeating(const bool &heating) {
    m_heating = heating;
    m_heating_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_heating_Set() const{
    return m_heating_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_heating_Valid() const{
    return m_heating_isValid;
}

QString OAIProperty_records_random_200_response_inner_features::getHeatingType() const {
    return m_heating_type;
}
void OAIProperty_records_random_200_response_inner_features::setHeatingType(const QString &heating_type) {
    m_heating_type = heating_type;
    m_heating_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_heating_type_Set() const{
    return m_heating_type_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_heating_type_Valid() const{
    return m_heating_type_isValid;
}

QString OAIProperty_records_random_200_response_inner_features::getRoofType() const {
    return m_roof_type;
}
void OAIProperty_records_random_200_response_inner_features::setRoofType(const QString &roof_type) {
    m_roof_type = roof_type;
    m_roof_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_roof_type_Set() const{
    return m_roof_type_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_roof_type_Valid() const{
    return m_roof_type_isValid;
}

qint32 OAIProperty_records_random_200_response_inner_features::getUnitCount() const {
    return m_unit_count;
}
void OAIProperty_records_random_200_response_inner_features::setUnitCount(const qint32 &unit_count) {
    m_unit_count = unit_count;
    m_unit_count_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_features::is_unit_count_Set() const{
    return m_unit_count_isSet;
}

bool OAIProperty_records_random_200_response_inner_features::is_unit_count_Valid() const{
    return m_unit_count_isValid;
}

bool OAIProperty_records_random_200_response_inner_features::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooling_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exterior_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fireplace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fireplace_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_garage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_garage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heating_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roof_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty_records_random_200_response_inner_features::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
