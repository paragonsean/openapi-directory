/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty_records_random_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty_records_random_200_response_inner::OAIProperty_records_random_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty_records_random_200_response_inner::OAIProperty_records_random_200_response_inner() {
    this->initializeModel();
}

OAIProperty_records_random_200_response_inner::~OAIProperty_records_random_200_response_inner() {}

void OAIProperty_records_random_200_response_inner::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_assessor_id_isSet = false;
    m_assessor_id_isValid = false;

    m_bathrooms_isSet = false;
    m_bathrooms_isValid = false;

    m_bedrooms_isSet = false;
    m_bedrooms_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_sale_date_isSet = false;
    m_last_sale_date_isValid = false;

    m_last_sale_price_isSet = false;
    m_last_sale_price_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_legal_description_isSet = false;
    m_legal_description_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_lot_size_isSet = false;
    m_lot_size_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_owner_occupied_isSet = false;
    m_owner_occupied_isValid = false;

    m_property_taxes_isSet = false;
    m_property_taxes_isValid = false;

    m_property_type_isSet = false;
    m_property_type_isValid = false;

    m_square_footage_isSet = false;
    m_square_footage_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subdivision_isSet = false;
    m_subdivision_isValid = false;

    m_tax_assessments_isSet = false;
    m_tax_assessments_isValid = false;

    m_year_built_isSet = false;
    m_year_built_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;

    m_zoning_isSet = false;
    m_zoning_isValid = false;
}

void OAIProperty_records_random_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty_records_random_200_response_inner::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_assessor_id_isValid = ::OpenAPI::fromJsonValue(m_assessor_id, json[QString("assessorID")]);
    m_assessor_id_isSet = !json[QString("assessorID")].isNull() && m_assessor_id_isValid;

    m_bathrooms_isValid = ::OpenAPI::fromJsonValue(m_bathrooms, json[QString("bathrooms")]);
    m_bathrooms_isSet = !json[QString("bathrooms")].isNull() && m_bathrooms_isValid;

    m_bedrooms_isValid = ::OpenAPI::fromJsonValue(m_bedrooms, json[QString("bedrooms")]);
    m_bedrooms_isSet = !json[QString("bedrooms")].isNull() && m_bedrooms_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formattedAddress")]);
    m_formatted_address_isSet = !json[QString("formattedAddress")].isNull() && m_formatted_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_sale_date_isValid = ::OpenAPI::fromJsonValue(m_last_sale_date, json[QString("lastSaleDate")]);
    m_last_sale_date_isSet = !json[QString("lastSaleDate")].isNull() && m_last_sale_date_isValid;

    m_last_sale_price_isValid = ::OpenAPI::fromJsonValue(m_last_sale_price, json[QString("lastSalePrice")]);
    m_last_sale_price_isSet = !json[QString("lastSalePrice")].isNull() && m_last_sale_price_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_legal_description_isValid = ::OpenAPI::fromJsonValue(m_legal_description, json[QString("legalDescription")]);
    m_legal_description_isSet = !json[QString("legalDescription")].isNull() && m_legal_description_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_lot_size_isValid = ::OpenAPI::fromJsonValue(m_lot_size, json[QString("lotSize")]);
    m_lot_size_isSet = !json[QString("lotSize")].isNull() && m_lot_size_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_owner_occupied_isValid = ::OpenAPI::fromJsonValue(m_owner_occupied, json[QString("ownerOccupied")]);
    m_owner_occupied_isSet = !json[QString("ownerOccupied")].isNull() && m_owner_occupied_isValid;

    m_property_taxes_isValid = ::OpenAPI::fromJsonValue(m_property_taxes, json[QString("propertyTaxes")]);
    m_property_taxes_isSet = !json[QString("propertyTaxes")].isNull() && m_property_taxes_isValid;

    m_property_type_isValid = ::OpenAPI::fromJsonValue(m_property_type, json[QString("propertyType")]);
    m_property_type_isSet = !json[QString("propertyType")].isNull() && m_property_type_isValid;

    m_square_footage_isValid = ::OpenAPI::fromJsonValue(m_square_footage, json[QString("squareFootage")]);
    m_square_footage_isSet = !json[QString("squareFootage")].isNull() && m_square_footage_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subdivision_isValid = ::OpenAPI::fromJsonValue(m_subdivision, json[QString("subdivision")]);
    m_subdivision_isSet = !json[QString("subdivision")].isNull() && m_subdivision_isValid;

    m_tax_assessments_isValid = ::OpenAPI::fromJsonValue(m_tax_assessments, json[QString("taxAssessments")]);
    m_tax_assessments_isSet = !json[QString("taxAssessments")].isNull() && m_tax_assessments_isValid;

    m_year_built_isValid = ::OpenAPI::fromJsonValue(m_year_built, json[QString("yearBuilt")]);
    m_year_built_isSet = !json[QString("yearBuilt")].isNull() && m_year_built_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;

    m_zoning_isValid = ::OpenAPI::fromJsonValue(m_zoning, json[QString("zoning")]);
    m_zoning_isSet = !json[QString("zoning")].isNull() && m_zoning_isValid;
}

QString OAIProperty_records_random_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty_records_random_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_assessor_id_isSet) {
        obj.insert(QString("assessorID"), ::OpenAPI::toJsonValue(m_assessor_id));
    }
    if (m_bathrooms_isSet) {
        obj.insert(QString("bathrooms"), ::OpenAPI::toJsonValue(m_bathrooms));
    }
    if (m_bedrooms_isSet) {
        obj.insert(QString("bedrooms"), ::OpenAPI::toJsonValue(m_bedrooms));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_features.isSet()) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formattedAddress"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_sale_date_isSet) {
        obj.insert(QString("lastSaleDate"), ::OpenAPI::toJsonValue(m_last_sale_date));
    }
    if (m_last_sale_price_isSet) {
        obj.insert(QString("lastSalePrice"), ::OpenAPI::toJsonValue(m_last_sale_price));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_legal_description_isSet) {
        obj.insert(QString("legalDescription"), ::OpenAPI::toJsonValue(m_legal_description));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_lot_size_isSet) {
        obj.insert(QString("lotSize"), ::OpenAPI::toJsonValue(m_lot_size));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_owner_occupied_isSet) {
        obj.insert(QString("ownerOccupied"), ::OpenAPI::toJsonValue(m_owner_occupied));
    }
    if (m_property_taxes.isSet()) {
        obj.insert(QString("propertyTaxes"), ::OpenAPI::toJsonValue(m_property_taxes));
    }
    if (m_property_type_isSet) {
        obj.insert(QString("propertyType"), ::OpenAPI::toJsonValue(m_property_type));
    }
    if (m_square_footage_isSet) {
        obj.insert(QString("squareFootage"), ::OpenAPI::toJsonValue(m_square_footage));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subdivision_isSet) {
        obj.insert(QString("subdivision"), ::OpenAPI::toJsonValue(m_subdivision));
    }
    if (m_tax_assessments.isSet()) {
        obj.insert(QString("taxAssessments"), ::OpenAPI::toJsonValue(m_tax_assessments));
    }
    if (m_year_built_isSet) {
        obj.insert(QString("yearBuilt"), ::OpenAPI::toJsonValue(m_year_built));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    if (m_zoning_isSet) {
        obj.insert(QString("zoning"), ::OpenAPI::toJsonValue(m_zoning));
    }
    return obj;
}

QString OAIProperty_records_random_200_response_inner::getAddressLine1() const {
    return m_address_line1;
}
void OAIProperty_records_random_200_response_inner::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIProperty_records_random_200_response_inner::getAssessorId() const {
    return m_assessor_id;
}
void OAIProperty_records_random_200_response_inner::setAssessorId(const QString &assessor_id) {
    m_assessor_id = assessor_id;
    m_assessor_id_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_assessor_id_Set() const{
    return m_assessor_id_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_assessor_id_Valid() const{
    return m_assessor_id_isValid;
}

double OAIProperty_records_random_200_response_inner::getBathrooms() const {
    return m_bathrooms;
}
void OAIProperty_records_random_200_response_inner::setBathrooms(const double &bathrooms) {
    m_bathrooms = bathrooms;
    m_bathrooms_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_bathrooms_Set() const{
    return m_bathrooms_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_bathrooms_Valid() const{
    return m_bathrooms_isValid;
}

qint32 OAIProperty_records_random_200_response_inner::getBedrooms() const {
    return m_bedrooms;
}
void OAIProperty_records_random_200_response_inner::setBedrooms(const qint32 &bedrooms) {
    m_bedrooms = bedrooms;
    m_bedrooms_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_bedrooms_Set() const{
    return m_bedrooms_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_bedrooms_Valid() const{
    return m_bedrooms_isValid;
}

QString OAIProperty_records_random_200_response_inner::getCity() const {
    return m_city;
}
void OAIProperty_records_random_200_response_inner::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_city_Set() const{
    return m_city_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIProperty_records_random_200_response_inner::getCounty() const {
    return m_county;
}
void OAIProperty_records_random_200_response_inner::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_county_Set() const{
    return m_county_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_county_Valid() const{
    return m_county_isValid;
}

OAIProperty_records_random_200_response_inner_features OAIProperty_records_random_200_response_inner::getFeatures() const {
    return m_features;
}
void OAIProperty_records_random_200_response_inner::setFeatures(const OAIProperty_records_random_200_response_inner_features &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_features_Set() const{
    return m_features_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIProperty_records_random_200_response_inner::getFormattedAddress() const {
    return m_formatted_address;
}
void OAIProperty_records_random_200_response_inner::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

QString OAIProperty_records_random_200_response_inner::getId() const {
    return m_id;
}
void OAIProperty_records_random_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProperty_records_random_200_response_inner::getLastSaleDate() const {
    return m_last_sale_date;
}
void OAIProperty_records_random_200_response_inner::setLastSaleDate(const QString &last_sale_date) {
    m_last_sale_date = last_sale_date;
    m_last_sale_date_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_last_sale_date_Set() const{
    return m_last_sale_date_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_last_sale_date_Valid() const{
    return m_last_sale_date_isValid;
}

qint32 OAIProperty_records_random_200_response_inner::getLastSalePrice() const {
    return m_last_sale_price;
}
void OAIProperty_records_random_200_response_inner::setLastSalePrice(const qint32 &last_sale_price) {
    m_last_sale_price = last_sale_price;
    m_last_sale_price_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_last_sale_price_Set() const{
    return m_last_sale_price_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_last_sale_price_Valid() const{
    return m_last_sale_price_isValid;
}

double OAIProperty_records_random_200_response_inner::getLatitude() const {
    return m_latitude;
}
void OAIProperty_records_random_200_response_inner::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIProperty_records_random_200_response_inner::getLegalDescription() const {
    return m_legal_description;
}
void OAIProperty_records_random_200_response_inner::setLegalDescription(const QString &legal_description) {
    m_legal_description = legal_description;
    m_legal_description_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_legal_description_Set() const{
    return m_legal_description_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_legal_description_Valid() const{
    return m_legal_description_isValid;
}

double OAIProperty_records_random_200_response_inner::getLongitude() const {
    return m_longitude;
}
void OAIProperty_records_random_200_response_inner::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIProperty_records_random_200_response_inner::getLotSize() const {
    return m_lot_size;
}
void OAIProperty_records_random_200_response_inner::setLotSize(const qint32 &lot_size) {
    m_lot_size = lot_size;
    m_lot_size_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_lot_size_Set() const{
    return m_lot_size_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_lot_size_Valid() const{
    return m_lot_size_isValid;
}

OAIProperty_records_random_200_response_inner_owner OAIProperty_records_random_200_response_inner::getOwner() const {
    return m_owner;
}
void OAIProperty_records_random_200_response_inner::setOwner(const OAIProperty_records_random_200_response_inner_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIProperty_records_random_200_response_inner::isOwnerOccupied() const {
    return m_owner_occupied;
}
void OAIProperty_records_random_200_response_inner::setOwnerOccupied(const bool &owner_occupied) {
    m_owner_occupied = owner_occupied;
    m_owner_occupied_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_owner_occupied_Set() const{
    return m_owner_occupied_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_owner_occupied_Valid() const{
    return m_owner_occupied_isValid;
}

OAIProperty_records_random_200_response_inner_propertyTaxes OAIProperty_records_random_200_response_inner::getPropertyTaxes() const {
    return m_property_taxes;
}
void OAIProperty_records_random_200_response_inner::setPropertyTaxes(const OAIProperty_records_random_200_response_inner_propertyTaxes &property_taxes) {
    m_property_taxes = property_taxes;
    m_property_taxes_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_property_taxes_Set() const{
    return m_property_taxes_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_property_taxes_Valid() const{
    return m_property_taxes_isValid;
}

QString OAIProperty_records_random_200_response_inner::getPropertyType() const {
    return m_property_type;
}
void OAIProperty_records_random_200_response_inner::setPropertyType(const QString &property_type) {
    m_property_type = property_type;
    m_property_type_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_property_type_Set() const{
    return m_property_type_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_property_type_Valid() const{
    return m_property_type_isValid;
}

qint32 OAIProperty_records_random_200_response_inner::getSquareFootage() const {
    return m_square_footage;
}
void OAIProperty_records_random_200_response_inner::setSquareFootage(const qint32 &square_footage) {
    m_square_footage = square_footage;
    m_square_footage_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_square_footage_Set() const{
    return m_square_footage_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_square_footage_Valid() const{
    return m_square_footage_isValid;
}

QString OAIProperty_records_random_200_response_inner::getState() const {
    return m_state;
}
void OAIProperty_records_random_200_response_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIProperty_records_random_200_response_inner::getSubdivision() const {
    return m_subdivision;
}
void OAIProperty_records_random_200_response_inner::setSubdivision(const QString &subdivision) {
    m_subdivision = subdivision;
    m_subdivision_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_subdivision_Set() const{
    return m_subdivision_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_subdivision_Valid() const{
    return m_subdivision_isValid;
}

OAIProperty_records_random_200_response_inner_taxAssessments OAIProperty_records_random_200_response_inner::getTaxAssessments() const {
    return m_tax_assessments;
}
void OAIProperty_records_random_200_response_inner::setTaxAssessments(const OAIProperty_records_random_200_response_inner_taxAssessments &tax_assessments) {
    m_tax_assessments = tax_assessments;
    m_tax_assessments_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_tax_assessments_Set() const{
    return m_tax_assessments_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_tax_assessments_Valid() const{
    return m_tax_assessments_isValid;
}

qint32 OAIProperty_records_random_200_response_inner::getYearBuilt() const {
    return m_year_built;
}
void OAIProperty_records_random_200_response_inner::setYearBuilt(const qint32 &year_built) {
    m_year_built = year_built;
    m_year_built_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_year_built_Set() const{
    return m_year_built_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_year_built_Valid() const{
    return m_year_built_isValid;
}

QString OAIProperty_records_random_200_response_inner::getZipCode() const {
    return m_zip_code;
}
void OAIProperty_records_random_200_response_inner::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

QString OAIProperty_records_random_200_response_inner::getZoning() const {
    return m_zoning;
}
void OAIProperty_records_random_200_response_inner::setZoning(const QString &zoning) {
    m_zoning = zoning;
    m_zoning_isSet = true;
}

bool OAIProperty_records_random_200_response_inner::is_zoning_Set() const{
    return m_zoning_isSet;
}

bool OAIProperty_records_random_200_response_inner::is_zoning_Valid() const{
    return m_zoning_isValid;
}

bool OAIProperty_records_random_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bathrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bedrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sale_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sale_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_occupied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_taxes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_square_footage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdivision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_assessments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_built_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty_records_random_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
