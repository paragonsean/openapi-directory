/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner() {
    this->initializeModel();
}

OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::~OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner() {}

void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::initializeModel() {

    m_average_rent_isSet = false;
    m_average_rent_isValid = false;

    m_bedrooms_isSet = false;
    m_bedrooms_isValid = false;

    m_max_rent_isSet = false;
    m_max_rent_isValid = false;

    m_min_rent_isSet = false;
    m_min_rent_isValid = false;

    m_total_listings_isSet = false;
    m_total_listings_isValid = false;
}

void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::fromJsonObject(QJsonObject json) {

    m_average_rent_isValid = ::OpenAPI::fromJsonValue(m_average_rent, json[QString("averageRent")]);
    m_average_rent_isSet = !json[QString("averageRent")].isNull() && m_average_rent_isValid;

    m_bedrooms_isValid = ::OpenAPI::fromJsonValue(m_bedrooms, json[QString("bedrooms")]);
    m_bedrooms_isSet = !json[QString("bedrooms")].isNull() && m_bedrooms_isValid;

    m_max_rent_isValid = ::OpenAPI::fromJsonValue(m_max_rent, json[QString("maxRent")]);
    m_max_rent_isSet = !json[QString("maxRent")].isNull() && m_max_rent_isValid;

    m_min_rent_isValid = ::OpenAPI::fromJsonValue(m_min_rent, json[QString("minRent")]);
    m_min_rent_isSet = !json[QString("minRent")].isNull() && m_min_rent_isValid;

    m_total_listings_isValid = ::OpenAPI::fromJsonValue(m_total_listings, json[QString("totalListings")]);
    m_total_listings_isSet = !json[QString("totalListings")].isNull() && m_total_listings_isValid;
}

QString OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_average_rent_isSet) {
        obj.insert(QString("averageRent"), ::OpenAPI::toJsonValue(m_average_rent));
    }
    if (m_bedrooms_isSet) {
        obj.insert(QString("bedrooms"), ::OpenAPI::toJsonValue(m_bedrooms));
    }
    if (m_max_rent_isSet) {
        obj.insert(QString("maxRent"), ::OpenAPI::toJsonValue(m_max_rent));
    }
    if (m_min_rent_isSet) {
        obj.insert(QString("minRent"), ::OpenAPI::toJsonValue(m_min_rent));
    }
    if (m_total_listings_isSet) {
        obj.insert(QString("totalListings"), ::OpenAPI::toJsonValue(m_total_listings));
    }
    return obj;
}

qint32 OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::getAverageRent() const {
    return m_average_rent;
}
void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::setAverageRent(const qint32 &average_rent) {
    m_average_rent = average_rent;
    m_average_rent_isSet = true;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_average_rent_Set() const{
    return m_average_rent_isSet;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_average_rent_Valid() const{
    return m_average_rent_isValid;
}

qint32 OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::getBedrooms() const {
    return m_bedrooms;
}
void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::setBedrooms(const qint32 &bedrooms) {
    m_bedrooms = bedrooms;
    m_bedrooms_isSet = true;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_bedrooms_Set() const{
    return m_bedrooms_isSet;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_bedrooms_Valid() const{
    return m_bedrooms_isValid;
}

qint32 OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::getMaxRent() const {
    return m_max_rent;
}
void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::setMaxRent(const qint32 &max_rent) {
    m_max_rent = max_rent;
    m_max_rent_isSet = true;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_max_rent_Set() const{
    return m_max_rent_isSet;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_max_rent_Valid() const{
    return m_max_rent_isValid;
}

qint32 OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::getMinRent() const {
    return m_min_rent;
}
void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::setMinRent(const qint32 &min_rent) {
    m_min_rent = min_rent;
    m_min_rent_isSet = true;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_min_rent_Set() const{
    return m_min_rent_isSet;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_min_rent_Valid() const{
    return m_min_rent_isValid;
}

qint32 OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::getTotalListings() const {
    return m_total_listings;
}
void OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::setTotalListings(const qint32 &total_listings) {
    m_total_listings = total_listings;
    m_total_listings_isSet = true;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_total_listings_Set() const{
    return m_total_listings_isSet;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::is_total_listings_Valid() const{
    return m_total_listings_isValid;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bedrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_listings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarket_statistics_200_response_rentalData_history_2023_08_dataByBedrooms_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
