/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProperty_records_random_200_response_inner_features.h
 *
 * 
 */

#ifndef OAIProperty_records_random_200_response_inner_features_H
#define OAIProperty_records_random_200_response_inner_features_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProperty_records_random_200_response_inner_features : public OAIObject {
public:
    OAIProperty_records_random_200_response_inner_features();
    OAIProperty_records_random_200_response_inner_features(QString json);
    ~OAIProperty_records_random_200_response_inner_features() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitectureType() const;
    void setArchitectureType(const QString &architecture_type);
    bool is_architecture_type_Set() const;
    bool is_architecture_type_Valid() const;

    bool isCooling() const;
    void setCooling(const bool &cooling);
    bool is_cooling_Set() const;
    bool is_cooling_Valid() const;

    QString getCoolingType() const;
    void setCoolingType(const QString &cooling_type);
    bool is_cooling_type_Set() const;
    bool is_cooling_type_Valid() const;

    QString getExteriorType() const;
    void setExteriorType(const QString &exterior_type);
    bool is_exterior_type_Set() const;
    bool is_exterior_type_Valid() const;

    bool isFireplace() const;
    void setFireplace(const bool &fireplace);
    bool is_fireplace_Set() const;
    bool is_fireplace_Valid() const;

    QString getFireplaceType() const;
    void setFireplaceType(const QString &fireplace_type);
    bool is_fireplace_type_Set() const;
    bool is_fireplace_type_Valid() const;

    qint32 getFloorCount() const;
    void setFloorCount(const qint32 &floor_count);
    bool is_floor_count_Set() const;
    bool is_floor_count_Valid() const;

    bool isGarage() const;
    void setGarage(const bool &garage);
    bool is_garage_Set() const;
    bool is_garage_Valid() const;

    QString getGarageType() const;
    void setGarageType(const QString &garage_type);
    bool is_garage_type_Set() const;
    bool is_garage_type_Valid() const;

    bool isHeating() const;
    void setHeating(const bool &heating);
    bool is_heating_Set() const;
    bool is_heating_Valid() const;

    QString getHeatingType() const;
    void setHeatingType(const QString &heating_type);
    bool is_heating_type_Set() const;
    bool is_heating_type_Valid() const;

    QString getRoofType() const;
    void setRoofType(const QString &roof_type);
    bool is_roof_type_Set() const;
    bool is_roof_type_Valid() const;

    qint32 getUnitCount() const;
    void setUnitCount(const qint32 &unit_count);
    bool is_unit_count_Set() const;
    bool is_unit_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture_type;
    bool m_architecture_type_isSet;
    bool m_architecture_type_isValid;

    bool m_cooling;
    bool m_cooling_isSet;
    bool m_cooling_isValid;

    QString m_cooling_type;
    bool m_cooling_type_isSet;
    bool m_cooling_type_isValid;

    QString m_exterior_type;
    bool m_exterior_type_isSet;
    bool m_exterior_type_isValid;

    bool m_fireplace;
    bool m_fireplace_isSet;
    bool m_fireplace_isValid;

    QString m_fireplace_type;
    bool m_fireplace_type_isSet;
    bool m_fireplace_type_isValid;

    qint32 m_floor_count;
    bool m_floor_count_isSet;
    bool m_floor_count_isValid;

    bool m_garage;
    bool m_garage_isSet;
    bool m_garage_isValid;

    QString m_garage_type;
    bool m_garage_type_isSet;
    bool m_garage_type_isValid;

    bool m_heating;
    bool m_heating_isSet;
    bool m_heating_isValid;

    QString m_heating_type;
    bool m_heating_type_isSet;
    bool m_heating_type_isValid;

    QString m_roof_type;
    bool m_roof_type_isSet;
    bool m_roof_type_isValid;

    qint32 m_unit_count;
    bool m_unit_count_isSet;
    bool m_unit_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProperty_records_random_200_response_inner_features)

#endif // OAIProperty_records_random_200_response_inner_features_H
