/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMarket_statistics_200_response.h"
#include "OAIProperty_records_200_response_inner.h"
#include "OAIProperty_records_random_200_response_inner.h"
#include "OAIRent_estimate_long_term_200_response.h"
#include "OAIRental_listing_long_term_by_id_200_response.h"
#include "OAIRental_listings_long_term_200_response_inner.h"
#include "OAISale_listing_by_id_200_response.h"
#include "OAISale_listings_200_response_inner.h"
#include "OAIValue_estimate_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  zip_code QString [required]
    * @param[in]  history_range qint32 [optional]
    */
    virtual void marketStatistics(const QString &zip_code, const ::OpenAPI::OptionalParam<qint32> &history_range = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void propertyRecordById(const QString &id);

    /**
    * @param[in]  address QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zip_code QString [optional]
    * @param[in]  latitude float [optional]
    * @param[in]  longitude float [optional]
    * @param[in]  radius float [optional]
    * @param[in]  property_type QString [optional]
    * @param[in]  bedrooms float [optional]
    * @param[in]  bathrooms float [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void propertyRecords(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &radius = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &property_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &bedrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &bathrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void propertyRecordsRandom(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  address QString [optional]
    * @param[in]  latitude float [optional]
    * @param[in]  longitude float [optional]
    * @param[in]  property_type QString [optional]
    * @param[in]  bedrooms float [optional]
    * @param[in]  bathrooms float [optional]
    * @param[in]  square_footage float [optional]
    * @param[in]  max_radius float [optional]
    * @param[in]  days_old float [optional]
    * @param[in]  comp_count qint32 [optional]
    */
    virtual void rentEstimateLongTerm(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &property_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &bedrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &bathrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &square_footage = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_radius = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &days_old = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &comp_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void rentalListingLongTermById(const QString &id);

    /**
    * @param[in]  address QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zip_code QString [optional]
    * @param[in]  latitude float [optional]
    * @param[in]  longitude float [optional]
    * @param[in]  radius float [optional]
    * @param[in]  property_type QString [optional]
    * @param[in]  bedrooms float [optional]
    * @param[in]  bathrooms float [optional]
    * @param[in]  status QString [optional]
    * @param[in]  days_old float [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void rentalListingsLongTerm(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &radius = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &property_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &bedrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &bathrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &days_old = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void saleListingById(const QString &id);

    /**
    * @param[in]  address QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zip_code QString [optional]
    * @param[in]  latitude float [optional]
    * @param[in]  longitude float [optional]
    * @param[in]  radius float [optional]
    * @param[in]  property_type QString [optional]
    * @param[in]  bedrooms float [optional]
    * @param[in]  bathrooms float [optional]
    * @param[in]  status QString [optional]
    * @param[in]  days_old float [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void saleListings(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &radius = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &property_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &bedrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &bathrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &days_old = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  address QString [optional]
    * @param[in]  latitude float [optional]
    * @param[in]  longitude float [optional]
    * @param[in]  property_type QString [optional]
    * @param[in]  bedrooms float [optional]
    * @param[in]  bathrooms float [optional]
    * @param[in]  square_footage float [optional]
    * @param[in]  max_radius float [optional]
    * @param[in]  days_old float [optional]
    * @param[in]  comp_count qint32 [optional]
    */
    virtual void valueEstimate(const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &latitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &longitude = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &property_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &bedrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &bathrooms = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &square_footage = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &max_radius = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &days_old = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &comp_count = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void marketStatisticsCallback(OAIHttpRequestWorker *worker);
    void propertyRecordByIdCallback(OAIHttpRequestWorker *worker);
    void propertyRecordsCallback(OAIHttpRequestWorker *worker);
    void propertyRecordsRandomCallback(OAIHttpRequestWorker *worker);
    void rentEstimateLongTermCallback(OAIHttpRequestWorker *worker);
    void rentalListingLongTermByIdCallback(OAIHttpRequestWorker *worker);
    void rentalListingsLongTermCallback(OAIHttpRequestWorker *worker);
    void saleListingByIdCallback(OAIHttpRequestWorker *worker);
    void saleListingsCallback(OAIHttpRequestWorker *worker);
    void valueEstimateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void marketStatisticsSignal(OAIMarket_statistics_200_response summary);
    void propertyRecordByIdSignal(OAIProperty_records_200_response_inner summary);
    void propertyRecordsSignal(QList<OAIProperty_records_200_response_inner> summary);
    void propertyRecordsRandomSignal(QList<OAIProperty_records_random_200_response_inner> summary);
    void rentEstimateLongTermSignal(OAIRent_estimate_long_term_200_response summary);
    void rentalListingLongTermByIdSignal(OAIRental_listing_long_term_by_id_200_response summary);
    void rentalListingsLongTermSignal(QList<OAIRental_listings_long_term_200_response_inner> summary);
    void saleListingByIdSignal(OAISale_listing_by_id_200_response summary);
    void saleListingsSignal(QList<OAISale_listings_200_response_inner> summary);
    void valueEstimateSignal(OAIValue_estimate_200_response summary);


    void marketStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIMarket_statistics_200_response summary);
    void propertyRecordByIdSignalFull(OAIHttpRequestWorker *worker, OAIProperty_records_200_response_inner summary);
    void propertyRecordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProperty_records_200_response_inner> summary);
    void propertyRecordsRandomSignalFull(OAIHttpRequestWorker *worker, QList<OAIProperty_records_random_200_response_inner> summary);
    void rentEstimateLongTermSignalFull(OAIHttpRequestWorker *worker, OAIRent_estimate_long_term_200_response summary);
    void rentalListingLongTermByIdSignalFull(OAIHttpRequestWorker *worker, OAIRental_listing_long_term_by_id_200_response summary);
    void rentalListingsLongTermSignalFull(OAIHttpRequestWorker *worker, QList<OAIRental_listings_long_term_200_response_inner> summary);
    void saleListingByIdSignalFull(OAIHttpRequestWorker *worker, OAISale_listing_by_id_200_response summary);
    void saleListingsSignalFull(OAIHttpRequestWorker *worker, QList<OAISale_listings_200_response_inner> summary);
    void valueEstimateSignalFull(OAIHttpRequestWorker *worker, OAIValue_estimate_200_response summary);

    Q_DECL_DEPRECATED_X("Use marketStatisticsSignalError() instead")
    void marketStatisticsSignalE(OAIMarket_statistics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketStatisticsSignalError(OAIMarket_statistics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyRecordByIdSignalError() instead")
    void propertyRecordByIdSignalE(OAIProperty_records_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyRecordByIdSignalError(OAIProperty_records_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyRecordsSignalError() instead")
    void propertyRecordsSignalE(QList<OAIProperty_records_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyRecordsSignalError(QList<OAIProperty_records_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyRecordsRandomSignalError() instead")
    void propertyRecordsRandomSignalE(QList<OAIProperty_records_random_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyRecordsRandomSignalError(QList<OAIProperty_records_random_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rentEstimateLongTermSignalError() instead")
    void rentEstimateLongTermSignalE(OAIRent_estimate_long_term_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rentEstimateLongTermSignalError(OAIRent_estimate_long_term_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rentalListingLongTermByIdSignalError() instead")
    void rentalListingLongTermByIdSignalE(OAIRental_listing_long_term_by_id_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rentalListingLongTermByIdSignalError(OAIRental_listing_long_term_by_id_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rentalListingsLongTermSignalError() instead")
    void rentalListingsLongTermSignalE(QList<OAIRental_listings_long_term_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rentalListingsLongTermSignalError(QList<OAIRental_listings_long_term_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saleListingByIdSignalError() instead")
    void saleListingByIdSignalE(OAISale_listing_by_id_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saleListingByIdSignalError(OAISale_listing_by_id_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saleListingsSignalError() instead")
    void saleListingsSignalE(QList<OAISale_listings_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saleListingsSignalError(QList<OAISale_listings_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use valueEstimateSignalError() instead")
    void valueEstimateSignalE(OAIValue_estimate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void valueEstimateSignalError(OAIValue_estimate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use marketStatisticsSignalErrorFull() instead")
    void marketStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyRecordByIdSignalErrorFull() instead")
    void propertyRecordByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyRecordByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyRecordsSignalErrorFull() instead")
    void propertyRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyRecordsRandomSignalErrorFull() instead")
    void propertyRecordsRandomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyRecordsRandomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rentEstimateLongTermSignalErrorFull() instead")
    void rentEstimateLongTermSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rentEstimateLongTermSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rentalListingLongTermByIdSignalErrorFull() instead")
    void rentalListingLongTermByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rentalListingLongTermByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rentalListingsLongTermSignalErrorFull() instead")
    void rentalListingsLongTermSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rentalListingsLongTermSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saleListingByIdSignalErrorFull() instead")
    void saleListingByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saleListingByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saleListingsSignalErrorFull() instead")
    void saleListingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saleListingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use valueEstimateSignalErrorFull() instead")
    void valueEstimateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void valueEstimateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
