/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty_records_random_200_response_inner_propertyTaxes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty_records_random_200_response_inner_propertyTaxes::OAIProperty_records_random_200_response_inner_propertyTaxes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty_records_random_200_response_inner_propertyTaxes::OAIProperty_records_random_200_response_inner_propertyTaxes() {
    this->initializeModel();
}

OAIProperty_records_random_200_response_inner_propertyTaxes::~OAIProperty_records_random_200_response_inner_propertyTaxes() {}

void OAIProperty_records_random_200_response_inner_propertyTaxes::initializeModel() {

    m_r_2022_isSet = false;
    m_r_2022_isValid = false;
}

void OAIProperty_records_random_200_response_inner_propertyTaxes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty_records_random_200_response_inner_propertyTaxes::fromJsonObject(QJsonObject json) {

    m_r_2022_isValid = ::OpenAPI::fromJsonValue(m_r_2022, json[QString("2022")]);
    m_r_2022_isSet = !json[QString("2022")].isNull() && m_r_2022_isValid;
}

QString OAIProperty_records_random_200_response_inner_propertyTaxes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty_records_random_200_response_inner_propertyTaxes::asJsonObject() const {
    QJsonObject obj;
    if (m_r_2022.isSet()) {
        obj.insert(QString("2022"), ::OpenAPI::toJsonValue(m_r_2022));
    }
    return obj;
}

OAIProperty_records_random_200_response_inner_propertyTaxes_2022 OAIProperty_records_random_200_response_inner_propertyTaxes::getR2022() const {
    return m_r_2022;
}
void OAIProperty_records_random_200_response_inner_propertyTaxes::setR2022(const OAIProperty_records_random_200_response_inner_propertyTaxes_2022 &r_2022) {
    m_r_2022 = r_2022;
    m_r_2022_isSet = true;
}

bool OAIProperty_records_random_200_response_inner_propertyTaxes::is_r_2022_Set() const{
    return m_r_2022_isSet;
}

bool OAIProperty_records_random_200_response_inner_propertyTaxes::is_r_2022_Valid() const{
    return m_r_2022_isValid;
}

bool OAIProperty_records_random_200_response_inner_propertyTaxes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_2022.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty_records_random_200_response_inner_propertyTaxes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
