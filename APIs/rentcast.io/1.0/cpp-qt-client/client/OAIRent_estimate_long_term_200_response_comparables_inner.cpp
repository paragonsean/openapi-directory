/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRent_estimate_long_term_200_response_comparables_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRent_estimate_long_term_200_response_comparables_inner::OAIRent_estimate_long_term_200_response_comparables_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRent_estimate_long_term_200_response_comparables_inner::OAIRent_estimate_long_term_200_response_comparables_inner() {
    this->initializeModel();
}

OAIRent_estimate_long_term_200_response_comparables_inner::~OAIRent_estimate_long_term_200_response_comparables_inner() {}

void OAIRent_estimate_long_term_200_response_comparables_inner::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_bathrooms_isSet = false;
    m_bathrooms_isValid = false;

    m_bedrooms_isSet = false;
    m_bedrooms_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_correlation_isSet = false;
    m_correlation_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_days_old_isSet = false;
    m_days_old_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_seen_date_isSet = false;
    m_last_seen_date_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_listed_date_isSet = false;
    m_listed_date_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_property_type_isSet = false;
    m_property_type_isValid = false;

    m_square_footage_isSet = false;
    m_square_footage_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIRent_estimate_long_term_200_response_comparables_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRent_estimate_long_term_200_response_comparables_inner::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_bathrooms_isValid = ::OpenAPI::fromJsonValue(m_bathrooms, json[QString("bathrooms")]);
    m_bathrooms_isSet = !json[QString("bathrooms")].isNull() && m_bathrooms_isValid;

    m_bedrooms_isValid = ::OpenAPI::fromJsonValue(m_bedrooms, json[QString("bedrooms")]);
    m_bedrooms_isSet = !json[QString("bedrooms")].isNull() && m_bedrooms_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_correlation_isValid = ::OpenAPI::fromJsonValue(m_correlation, json[QString("correlation")]);
    m_correlation_isSet = !json[QString("correlation")].isNull() && m_correlation_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_days_old_isValid = ::OpenAPI::fromJsonValue(m_days_old, json[QString("daysOld")]);
    m_days_old_isSet = !json[QString("daysOld")].isNull() && m_days_old_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formattedAddress")]);
    m_formatted_address_isSet = !json[QString("formattedAddress")].isNull() && m_formatted_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_seen_date_isValid = ::OpenAPI::fromJsonValue(m_last_seen_date, json[QString("lastSeenDate")]);
    m_last_seen_date_isSet = !json[QString("lastSeenDate")].isNull() && m_last_seen_date_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_listed_date_isValid = ::OpenAPI::fromJsonValue(m_listed_date, json[QString("listedDate")]);
    m_listed_date_isSet = !json[QString("listedDate")].isNull() && m_listed_date_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_property_type_isValid = ::OpenAPI::fromJsonValue(m_property_type, json[QString("propertyType")]);
    m_property_type_isSet = !json[QString("propertyType")].isNull() && m_property_type_isValid;

    m_square_footage_isValid = ::OpenAPI::fromJsonValue(m_square_footage, json[QString("squareFootage")]);
    m_square_footage_isSet = !json[QString("squareFootage")].isNull() && m_square_footage_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRent_estimate_long_term_200_response_comparables_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_bathrooms_isSet) {
        obj.insert(QString("bathrooms"), ::OpenAPI::toJsonValue(m_bathrooms));
    }
    if (m_bedrooms_isSet) {
        obj.insert(QString("bedrooms"), ::OpenAPI::toJsonValue(m_bedrooms));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_correlation_isSet) {
        obj.insert(QString("correlation"), ::OpenAPI::toJsonValue(m_correlation));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_days_old_isSet) {
        obj.insert(QString("daysOld"), ::OpenAPI::toJsonValue(m_days_old));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formattedAddress"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_seen_date_isSet) {
        obj.insert(QString("lastSeenDate"), ::OpenAPI::toJsonValue(m_last_seen_date));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_listed_date_isSet) {
        obj.insert(QString("listedDate"), ::OpenAPI::toJsonValue(m_listed_date));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_property_type_isSet) {
        obj.insert(QString("propertyType"), ::OpenAPI::toJsonValue(m_property_type));
    }
    if (m_square_footage_isSet) {
        obj.insert(QString("squareFootage"), ::OpenAPI::toJsonValue(m_square_footage));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getAddressLine1() const {
    return m_address_line1;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

qint32 OAIRent_estimate_long_term_200_response_comparables_inner::getBathrooms() const {
    return m_bathrooms;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setBathrooms(const qint32 &bathrooms) {
    m_bathrooms = bathrooms;
    m_bathrooms_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_bathrooms_Set() const{
    return m_bathrooms_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_bathrooms_Valid() const{
    return m_bathrooms_isValid;
}

qint32 OAIRent_estimate_long_term_200_response_comparables_inner::getBedrooms() const {
    return m_bedrooms;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setBedrooms(const qint32 &bedrooms) {
    m_bedrooms = bedrooms;
    m_bedrooms_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_bedrooms_Set() const{
    return m_bedrooms_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_bedrooms_Valid() const{
    return m_bedrooms_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getCity() const {
    return m_city;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_city_Valid() const{
    return m_city_isValid;
}

double OAIRent_estimate_long_term_200_response_comparables_inner::getCorrelation() const {
    return m_correlation;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setCorrelation(const double &correlation) {
    m_correlation = correlation;
    m_correlation_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_correlation_Set() const{
    return m_correlation_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_correlation_Valid() const{
    return m_correlation_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getCounty() const {
    return m_county;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_county_Set() const{
    return m_county_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_county_Valid() const{
    return m_county_isValid;
}

qint32 OAIRent_estimate_long_term_200_response_comparables_inner::getDaysOld() const {
    return m_days_old;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setDaysOld(const qint32 &days_old) {
    m_days_old = days_old;
    m_days_old_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_days_old_Set() const{
    return m_days_old_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_days_old_Valid() const{
    return m_days_old_isValid;
}

double OAIRent_estimate_long_term_200_response_comparables_inner::getDistance() const {
    return m_distance;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getFormattedAddress() const {
    return m_formatted_address;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getId() const {
    return m_id;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getLastSeenDate() const {
    return m_last_seen_date;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setLastSeenDate(const QString &last_seen_date) {
    m_last_seen_date = last_seen_date;
    m_last_seen_date_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_last_seen_date_Set() const{
    return m_last_seen_date_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_last_seen_date_Valid() const{
    return m_last_seen_date_isValid;
}

double OAIRent_estimate_long_term_200_response_comparables_inner::getLatitude() const {
    return m_latitude;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getListedDate() const {
    return m_listed_date;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setListedDate(const QString &listed_date) {
    m_listed_date = listed_date;
    m_listed_date_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_listed_date_Set() const{
    return m_listed_date_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_listed_date_Valid() const{
    return m_listed_date_isValid;
}

double OAIRent_estimate_long_term_200_response_comparables_inner::getLongitude() const {
    return m_longitude;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIRent_estimate_long_term_200_response_comparables_inner::getPrice() const {
    return m_price;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getPropertyType() const {
    return m_property_type;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setPropertyType(const QString &property_type) {
    m_property_type = property_type;
    m_property_type_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_property_type_Set() const{
    return m_property_type_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_property_type_Valid() const{
    return m_property_type_isValid;
}

qint32 OAIRent_estimate_long_term_200_response_comparables_inner::getSquareFootage() const {
    return m_square_footage;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setSquareFootage(const qint32 &square_footage) {
    m_square_footage = square_footage;
    m_square_footage_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_square_footage_Set() const{
    return m_square_footage_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_square_footage_Valid() const{
    return m_square_footage_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getState() const {
    return m_state;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRent_estimate_long_term_200_response_comparables_inner::getZipCode() const {
    return m_zip_code;
}
void OAIRent_estimate_long_term_200_response_comparables_inner::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bathrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bedrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_old_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_square_footage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRent_estimate_long_term_200_response_comparables_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
