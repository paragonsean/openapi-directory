/**
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValue_estimate_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValue_estimate_200_response::OAIValue_estimate_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValue_estimate_200_response::OAIValue_estimate_200_response() {
    this->initializeModel();
}

OAIValue_estimate_200_response::~OAIValue_estimate_200_response() {}

void OAIValue_estimate_200_response::initializeModel() {

    m_comparables_isSet = false;
    m_comparables_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_range_high_isSet = false;
    m_price_range_high_isValid = false;

    m_price_range_low_isSet = false;
    m_price_range_low_isValid = false;
}

void OAIValue_estimate_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValue_estimate_200_response::fromJsonObject(QJsonObject json) {

    m_comparables_isValid = ::OpenAPI::fromJsonValue(m_comparables, json[QString("comparables")]);
    m_comparables_isSet = !json[QString("comparables")].isNull() && m_comparables_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_range_high_isValid = ::OpenAPI::fromJsonValue(m_price_range_high, json[QString("priceRangeHigh")]);
    m_price_range_high_isSet = !json[QString("priceRangeHigh")].isNull() && m_price_range_high_isValid;

    m_price_range_low_isValid = ::OpenAPI::fromJsonValue(m_price_range_low, json[QString("priceRangeLow")]);
    m_price_range_low_isSet = !json[QString("priceRangeLow")].isNull() && m_price_range_low_isValid;
}

QString OAIValue_estimate_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValue_estimate_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_comparables.size() > 0) {
        obj.insert(QString("comparables"), ::OpenAPI::toJsonValue(m_comparables));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_range_high_isSet) {
        obj.insert(QString("priceRangeHigh"), ::OpenAPI::toJsonValue(m_price_range_high));
    }
    if (m_price_range_low_isSet) {
        obj.insert(QString("priceRangeLow"), ::OpenAPI::toJsonValue(m_price_range_low));
    }
    return obj;
}

QList<OAIValue_estimate_200_response_comparables_inner> OAIValue_estimate_200_response::getComparables() const {
    return m_comparables;
}
void OAIValue_estimate_200_response::setComparables(const QList<OAIValue_estimate_200_response_comparables_inner> &comparables) {
    m_comparables = comparables;
    m_comparables_isSet = true;
}

bool OAIValue_estimate_200_response::is_comparables_Set() const{
    return m_comparables_isSet;
}

bool OAIValue_estimate_200_response::is_comparables_Valid() const{
    return m_comparables_isValid;
}

double OAIValue_estimate_200_response::getLatitude() const {
    return m_latitude;
}
void OAIValue_estimate_200_response::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIValue_estimate_200_response::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIValue_estimate_200_response::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIValue_estimate_200_response::getLongitude() const {
    return m_longitude;
}
void OAIValue_estimate_200_response::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIValue_estimate_200_response::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIValue_estimate_200_response::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIValue_estimate_200_response::getPrice() const {
    return m_price;
}
void OAIValue_estimate_200_response::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIValue_estimate_200_response::is_price_Set() const{
    return m_price_isSet;
}

bool OAIValue_estimate_200_response::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAIValue_estimate_200_response::getPriceRangeHigh() const {
    return m_price_range_high;
}
void OAIValue_estimate_200_response::setPriceRangeHigh(const qint32 &price_range_high) {
    m_price_range_high = price_range_high;
    m_price_range_high_isSet = true;
}

bool OAIValue_estimate_200_response::is_price_range_high_Set() const{
    return m_price_range_high_isSet;
}

bool OAIValue_estimate_200_response::is_price_range_high_Valid() const{
    return m_price_range_high_isValid;
}

qint32 OAIValue_estimate_200_response::getPriceRangeLow() const {
    return m_price_range_low;
}
void OAIValue_estimate_200_response::setPriceRangeLow(const qint32 &price_range_low) {
    m_price_range_low = price_range_low;
    m_price_range_low_isSet = true;
}

bool OAIValue_estimate_200_response::is_price_range_low_Set() const{
    return m_price_range_low_isSet;
}

bool OAIValue_estimate_200_response::is_price_range_low_Valid() const{
    return m_price_range_low_isValid;
}

bool OAIValue_estimate_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_range_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_range_low_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValue_estimate_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
