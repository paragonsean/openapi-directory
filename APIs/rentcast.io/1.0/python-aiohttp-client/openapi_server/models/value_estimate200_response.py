# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value_estimate200_response_comparables_inner import ValueEstimate200ResponseComparablesInner
from openapi_server import util


class ValueEstimate200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparables: List[ValueEstimate200ResponseComparablesInner]=None, latitude: float=0, longitude: float=0, price: int=0, price_range_high: int=0, price_range_low: int=0):
        """ValueEstimate200Response - a model defined in OpenAPI

        :param comparables: The comparables of this ValueEstimate200Response.
        :param latitude: The latitude of this ValueEstimate200Response.
        :param longitude: The longitude of this ValueEstimate200Response.
        :param price: The price of this ValueEstimate200Response.
        :param price_range_high: The price_range_high of this ValueEstimate200Response.
        :param price_range_low: The price_range_low of this ValueEstimate200Response.
        """
        self.openapi_types = {
            'comparables': List[ValueEstimate200ResponseComparablesInner],
            'latitude': float,
            'longitude': float,
            'price': int,
            'price_range_high': int,
            'price_range_low': int
        }

        self.attribute_map = {
            'comparables': 'comparables',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'price': 'price',
            'price_range_high': 'priceRangeHigh',
            'price_range_low': 'priceRangeLow'
        }

        self._comparables = comparables
        self._latitude = latitude
        self._longitude = longitude
        self._price = price
        self._price_range_high = price_range_high
        self._price_range_low = price_range_low

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueEstimate200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The value_estimate_200_response of this ValueEstimate200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparables(self):
        """Gets the comparables of this ValueEstimate200Response.


        :return: The comparables of this ValueEstimate200Response.
        :rtype: List[ValueEstimate200ResponseComparablesInner]
        """
        return self._comparables

    @comparables.setter
    def comparables(self, comparables):
        """Sets the comparables of this ValueEstimate200Response.


        :param comparables: The comparables of this ValueEstimate200Response.
        :type comparables: List[ValueEstimate200ResponseComparablesInner]
        """

        self._comparables = comparables

    @property
    def latitude(self):
        """Gets the latitude of this ValueEstimate200Response.


        :return: The latitude of this ValueEstimate200Response.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ValueEstimate200Response.


        :param latitude: The latitude of this ValueEstimate200Response.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this ValueEstimate200Response.


        :return: The longitude of this ValueEstimate200Response.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ValueEstimate200Response.


        :param longitude: The longitude of this ValueEstimate200Response.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def price(self):
        """Gets the price of this ValueEstimate200Response.


        :return: The price of this ValueEstimate200Response.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ValueEstimate200Response.


        :param price: The price of this ValueEstimate200Response.
        :type price: int
        """

        self._price = price

    @property
    def price_range_high(self):
        """Gets the price_range_high of this ValueEstimate200Response.


        :return: The price_range_high of this ValueEstimate200Response.
        :rtype: int
        """
        return self._price_range_high

    @price_range_high.setter
    def price_range_high(self, price_range_high):
        """Sets the price_range_high of this ValueEstimate200Response.


        :param price_range_high: The price_range_high of this ValueEstimate200Response.
        :type price_range_high: int
        """

        self._price_range_high = price_range_high

    @property
    def price_range_low(self):
        """Gets the price_range_low of this ValueEstimate200Response.


        :return: The price_range_low of this ValueEstimate200Response.
        :rtype: int
        """
        return self._price_range_low

    @price_range_low.setter
    def price_range_low(self, price_range_low):
        """Sets the price_range_low of this ValueEstimate200Response.


        :param price_range_low: The price_range_low of this ValueEstimate200Response.
        :type price_range_low: int
        """

        self._price_range_low = price_range_low
