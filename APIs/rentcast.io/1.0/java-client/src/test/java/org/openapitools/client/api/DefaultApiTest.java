/*
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MarketStatistics200Response;
import org.openapitools.client.model.PropertyRecords200ResponseInner;
import org.openapitools.client.model.PropertyRecordsRandom200ResponseInner;
import org.openapitools.client.model.RentEstimateLongTerm200Response;
import org.openapitools.client.model.RentalListingLongTermById200Response;
import org.openapitools.client.model.RentalListingsLongTerm200ResponseInner;
import org.openapitools.client.model.SaleListingById200Response;
import org.openapitools.client.model.SaleListings200ResponseInner;
import org.openapitools.client.model.ValueEstimate200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Market Statistics
     *
     * Returns aggregate rental statistics and listing trends for a single US zip code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marketStatisticsTest() throws ApiException {
        String zipCode = null;
        Integer historyRange = null;
        MarketStatistics200Response response = api.marketStatistics(zipCode, historyRange);
        // TODO: test validations
    }

    /**
     * Property Record by Id
     *
     * Returns a single property record matching the specified id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyRecordByIdTest() throws ApiException {
        String id = null;
        PropertyRecords200ResponseInner response = api.propertyRecordById(id);
        // TODO: test validations
    }

    /**
     * Property Records
     *
     * Search for property records in a geographical area, or by a specific address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyRecordsTest() throws ApiException {
        String address = null;
        String city = null;
        String state = null;
        String zipCode = null;
        Float latitude = null;
        Float longitude = null;
        Float radius = null;
        String propertyType = null;
        Float bedrooms = null;
        Float bathrooms = null;
        Integer limit = null;
        Integer offset = null;
        List<PropertyRecords200ResponseInner> response = api.propertyRecords(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, limit, offset);
        // TODO: test validations
    }

    /**
     * Random Property Records
     *
     * Returns a list of property records selected at random.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyRecordsRandomTest() throws ApiException {
        Integer limit = null;
        List<PropertyRecordsRandom200ResponseInner> response = api.propertyRecordsRandom(limit);
        // TODO: test validations
    }

    /**
     * Rent Estimate
     *
     * Returns a property rent estimate and comparable properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rentEstimateLongTermTest() throws ApiException {
        String address = null;
        Float latitude = null;
        Float longitude = null;
        String propertyType = null;
        Float bedrooms = null;
        Float bathrooms = null;
        Float squareFootage = null;
        Float maxRadius = null;
        Float daysOld = null;
        Integer compCount = null;
        RentEstimateLongTerm200Response response = api.rentEstimateLongTerm(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount);
        // TODO: test validations
    }

    /**
     * Rental Listing by Id
     *
     * Returns a single rental listing matching the specified id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rentalListingLongTermByIdTest() throws ApiException {
        String id = null;
        RentalListingLongTermById200Response response = api.rentalListingLongTermById(id);
        // TODO: test validations
    }

    /**
     * Rental Listings
     *
     * Search for rental listings in a geographical area, or by a specific address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rentalListingsLongTermTest() throws ApiException {
        String address = null;
        String city = null;
        String state = null;
        String zipCode = null;
        Float latitude = null;
        Float longitude = null;
        Float radius = null;
        String propertyType = null;
        Float bedrooms = null;
        Float bathrooms = null;
        String status = null;
        Float daysOld = null;
        Integer limit = null;
        Integer offset = null;
        List<RentalListingsLongTerm200ResponseInner> response = api.rentalListingsLongTerm(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset);
        // TODO: test validations
    }

    /**
     * Sale Listing by Id
     *
     * Returns a single sale listing matching the specified id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saleListingByIdTest() throws ApiException {
        String id = null;
        SaleListingById200Response response = api.saleListingById(id);
        // TODO: test validations
    }

    /**
     * Sale Listings
     *
     * Search for sale listings in a geographical area, or by a specific address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saleListingsTest() throws ApiException {
        String address = null;
        String city = null;
        String state = null;
        String zipCode = null;
        Float latitude = null;
        Float longitude = null;
        Float radius = null;
        String propertyType = null;
        Float bedrooms = null;
        Float bathrooms = null;
        String status = null;
        Float daysOld = null;
        Integer limit = null;
        Integer offset = null;
        List<SaleListings200ResponseInner> response = api.saleListings(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset);
        // TODO: test validations
    }

    /**
     * Value Estimate
     *
     * Returns a property value estimate and comparable properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void valueEstimateTest() throws ApiException {
        String address = null;
        Float latitude = null;
        Float longitude = null;
        String propertyType = null;
        Float bedrooms = null;
        Float bathrooms = null;
        Float squareFootage = null;
        Float maxRadius = null;
        Float daysOld = null;
        Integer compCount = null;
        ValueEstimate200Response response = api.valueEstimate(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount);
        // TODO: test validations
    }

}
