/*
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MarketStatistics200Response;
import org.openapitools.client.model.PropertyRecords200ResponseInner;
import org.openapitools.client.model.PropertyRecordsRandom200ResponseInner;
import org.openapitools.client.model.RentEstimateLongTerm200Response;
import org.openapitools.client.model.RentalListingLongTermById200Response;
import org.openapitools.client.model.RentalListingsLongTerm200ResponseInner;
import org.openapitools.client.model.SaleListingById200Response;
import org.openapitools.client.model.SaleListings200ResponseInner;
import org.openapitools.client.model.ValueEstimate200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marketStatistics
     * @param zipCode A valid 5-digit US zip code (required)
     * @param historyRange The time range for historical record entries, in months. Defaults to 12 if not provided (optional, default to 6)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketStatisticsCall(String zipCode, Integer historyRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/markets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        if (historyRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("historyRange", historyRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marketStatisticsValidateBeforeCall(String zipCode, Integer historyRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zipCode' is set
        if (zipCode == null) {
            throw new ApiException("Missing the required parameter 'zipCode' when calling marketStatistics(Async)");
        }

        return marketStatisticsCall(zipCode, historyRange, _callback);

    }

    /**
     * Market Statistics
     * Returns aggregate rental statistics and listing trends for a single US zip code.
     * @param zipCode A valid 5-digit US zip code (required)
     * @param historyRange The time range for historical record entries, in months. Defaults to 12 if not provided (optional, default to 6)
     * @return MarketStatistics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public MarketStatistics200Response marketStatistics(String zipCode, Integer historyRange) throws ApiException {
        ApiResponse<MarketStatistics200Response> localVarResp = marketStatisticsWithHttpInfo(zipCode, historyRange);
        return localVarResp.getData();
    }

    /**
     * Market Statistics
     * Returns aggregate rental statistics and listing trends for a single US zip code.
     * @param zipCode A valid 5-digit US zip code (required)
     * @param historyRange The time range for historical record entries, in months. Defaults to 12 if not provided (optional, default to 6)
     * @return ApiResponse&lt;MarketStatistics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketStatistics200Response> marketStatisticsWithHttpInfo(String zipCode, Integer historyRange) throws ApiException {
        okhttp3.Call localVarCall = marketStatisticsValidateBeforeCall(zipCode, historyRange, null);
        Type localVarReturnType = new TypeToken<MarketStatistics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Market Statistics (asynchronously)
     * Returns aggregate rental statistics and listing trends for a single US zip code.
     * @param zipCode A valid 5-digit US zip code (required)
     * @param historyRange The time range for historical record entries, in months. Defaults to 12 if not provided (optional, default to 6)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marketStatisticsAsync(String zipCode, Integer historyRange, final ApiCallback<MarketStatistics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = marketStatisticsValidateBeforeCall(zipCode, historyRange, _callback);
        Type localVarReturnType = new TypeToken<MarketStatistics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyRecordById
     * @param id The id of the property record to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyRecordByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyRecordByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling propertyRecordById(Async)");
        }

        return propertyRecordByIdCall(id, _callback);

    }

    /**
     * Property Record by Id
     * Returns a single property record matching the specified id.
     * @param id The id of the property record to return (required)
     * @return PropertyRecords200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public PropertyRecords200ResponseInner propertyRecordById(String id) throws ApiException {
        ApiResponse<PropertyRecords200ResponseInner> localVarResp = propertyRecordByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Property Record by Id
     * Returns a single property record matching the specified id.
     * @param id The id of the property record to return (required)
     * @return ApiResponse&lt;PropertyRecords200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyRecords200ResponseInner> propertyRecordByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = propertyRecordByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PropertyRecords200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Property Record by Id (asynchronously)
     * Returns a single property record matching the specified id.
     * @param id The id of the property record to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyRecordByIdAsync(String id, final ApiCallback<PropertyRecords200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyRecordByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PropertyRecords200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyRecords
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for properties in a specific area (optional, default to 5500 Grand Lake Dr, San Antonio, TX, 78244)
     * @param city The name of the city, used to search for properties in a specific city. This parameter is case-sensitive (optional)
     * @param state The 2-character state abbreviation, used to search for properties in a specific state. This parameter is case-sensitive (optional)
     * @param zipCode The 5-digit zip code, used to search for properties in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for properties in a specific area (optional)
     * @param propertyType The type of the property, used to search for properties matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for properties matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for properties matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param limit The maximum number of property records to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param offset The index of the first property record to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyRecordsCall(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (propertyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyType", propertyType));
        }

        if (bedrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bedrooms", bedrooms));
        }

        if (bathrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bathrooms", bathrooms));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyRecordsValidateBeforeCall(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return propertyRecordsCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, limit, offset, _callback);

    }

    /**
     * Property Records
     * Search for property records in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for properties in a specific area (optional, default to 5500 Grand Lake Dr, San Antonio, TX, 78244)
     * @param city The name of the city, used to search for properties in a specific city. This parameter is case-sensitive (optional)
     * @param state The 2-character state abbreviation, used to search for properties in a specific state. This parameter is case-sensitive (optional)
     * @param zipCode The 5-digit zip code, used to search for properties in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for properties in a specific area (optional)
     * @param propertyType The type of the property, used to search for properties matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for properties matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for properties matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param limit The maximum number of property records to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param offset The index of the first property record to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @return List&lt;PropertyRecords200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public List<PropertyRecords200ResponseInner> propertyRecords(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<PropertyRecords200ResponseInner>> localVarResp = propertyRecordsWithHttpInfo(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Property Records
     * Search for property records in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for properties in a specific area (optional, default to 5500 Grand Lake Dr, San Antonio, TX, 78244)
     * @param city The name of the city, used to search for properties in a specific city. This parameter is case-sensitive (optional)
     * @param state The 2-character state abbreviation, used to search for properties in a specific state. This parameter is case-sensitive (optional)
     * @param zipCode The 5-digit zip code, used to search for properties in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for properties in a specific area (optional)
     * @param propertyType The type of the property, used to search for properties matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for properties matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for properties matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param limit The maximum number of property records to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param offset The index of the first property record to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @return ApiResponse&lt;List&lt;PropertyRecords200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PropertyRecords200ResponseInner>> propertyRecordsWithHttpInfo(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = propertyRecordsValidateBeforeCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<PropertyRecords200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Property Records (asynchronously)
     * Search for property records in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for properties in a specific area (optional, default to 5500 Grand Lake Dr, San Antonio, TX, 78244)
     * @param city The name of the city, used to search for properties in a specific city. This parameter is case-sensitive (optional)
     * @param state The 2-character state abbreviation, used to search for properties in a specific state. This parameter is case-sensitive (optional)
     * @param zipCode The 5-digit zip code, used to search for properties in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for properties in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for properties in a specific area (optional)
     * @param propertyType The type of the property, used to search for properties matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for properties matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for properties matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param limit The maximum number of property records to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param offset The index of the first property record to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyRecordsAsync(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, Integer limit, Integer offset, final ApiCallback<List<PropertyRecords200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyRecordsValidateBeforeCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<PropertyRecords200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyRecordsRandom
     * @param limit The number of records to return, between 1 and 500. Defaults to 50 if not provided (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyRecordsRandomCall(Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyRecordsRandomValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        return propertyRecordsRandomCall(limit, _callback);

    }

    /**
     * Random Property Records
     * Returns a list of property records selected at random.
     * @param limit The number of records to return, between 1 and 500. Defaults to 50 if not provided (optional, default to 5)
     * @return List&lt;PropertyRecordsRandom200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public List<PropertyRecordsRandom200ResponseInner> propertyRecordsRandom(Integer limit) throws ApiException {
        ApiResponse<List<PropertyRecordsRandom200ResponseInner>> localVarResp = propertyRecordsRandomWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * Random Property Records
     * Returns a list of property records selected at random.
     * @param limit The number of records to return, between 1 and 500. Defaults to 50 if not provided (optional, default to 5)
     * @return ApiResponse&lt;List&lt;PropertyRecordsRandom200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PropertyRecordsRandom200ResponseInner>> propertyRecordsRandomWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = propertyRecordsRandomValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<PropertyRecordsRandom200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Property Records (asynchronously)
     * Returns a list of property records selected at random.
     * @param limit The number of records to return, between 1 and 500. Defaults to 50 if not provided (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyRecordsRandomAsync(Integer limit, final ApiCallback<List<PropertyRecordsRandom200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyRecordsRandomValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<PropertyRecordsRandom200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rentEstimateLongTerm
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the rent estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentEstimateLongTermCall(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avm/rent/long-term";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (propertyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyType", propertyType));
        }

        if (bedrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bedrooms", bedrooms));
        }

        if (bathrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bathrooms", bathrooms));
        }

        if (squareFootage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("squareFootage", squareFootage));
        }

        if (maxRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxRadius", maxRadius));
        }

        if (daysOld != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("daysOld", daysOld));
        }

        if (compCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compCount", compCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentEstimateLongTermValidateBeforeCall(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount, final ApiCallback _callback) throws ApiException {
        return rentEstimateLongTermCall(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount, _callback);

    }

    /**
     * Rent Estimate
     * Returns a property rent estimate and comparable properties.
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the rent estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @return RentEstimateLongTerm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RentEstimateLongTerm200Response rentEstimateLongTerm(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount) throws ApiException {
        ApiResponse<RentEstimateLongTerm200Response> localVarResp = rentEstimateLongTermWithHttpInfo(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount);
        return localVarResp.getData();
    }

    /**
     * Rent Estimate
     * Returns a property rent estimate and comparable properties.
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the rent estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @return ApiResponse&lt;RentEstimateLongTerm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RentEstimateLongTerm200Response> rentEstimateLongTermWithHttpInfo(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount) throws ApiException {
        okhttp3.Call localVarCall = rentEstimateLongTermValidateBeforeCall(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount, null);
        Type localVarReturnType = new TypeToken<RentEstimateLongTerm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rent Estimate (asynchronously)
     * Returns a property rent estimate and comparable properties.
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the rent estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentEstimateLongTermAsync(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount, final ApiCallback<RentEstimateLongTerm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentEstimateLongTermValidateBeforeCall(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount, _callback);
        Type localVarReturnType = new TypeToken<RentEstimateLongTerm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rentalListingLongTermById
     * @param id The id of the property listing to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalListingLongTermByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/rental/long-term/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentalListingLongTermByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rentalListingLongTermById(Async)");
        }

        return rentalListingLongTermByIdCall(id, _callback);

    }

    /**
     * Rental Listing by Id
     * Returns a single rental listing matching the specified id.
     * @param id The id of the property listing to return (required)
     * @return RentalListingLongTermById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RentalListingLongTermById200Response rentalListingLongTermById(String id) throws ApiException {
        ApiResponse<RentalListingLongTermById200Response> localVarResp = rentalListingLongTermByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Rental Listing by Id
     * Returns a single rental listing matching the specified id.
     * @param id The id of the property listing to return (required)
     * @return ApiResponse&lt;RentalListingLongTermById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RentalListingLongTermById200Response> rentalListingLongTermByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = rentalListingLongTermByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RentalListingLongTermById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rental Listing by Id (asynchronously)
     * Returns a single rental listing matching the specified id.
     * @param id The id of the property listing to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalListingLongTermByIdAsync(String id, final ApiCallback<RentalListingLongTermById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentalListingLongTermByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RentalListingLongTermById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rentalListingsLongTerm
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalListingsLongTermCall(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/rental/long-term";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (propertyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyType", propertyType));
        }

        if (bedrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bedrooms", bedrooms));
        }

        if (bathrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bathrooms", bathrooms));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (daysOld != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("daysOld", daysOld));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentalListingsLongTermValidateBeforeCall(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return rentalListingsLongTermCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset, _callback);

    }

    /**
     * Rental Listings
     * Search for rental listings in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @return List&lt;RentalListingsLongTerm200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public List<RentalListingsLongTerm200ResponseInner> rentalListingsLongTerm(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<RentalListingsLongTerm200ResponseInner>> localVarResp = rentalListingsLongTermWithHttpInfo(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Rental Listings
     * Search for rental listings in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @return ApiResponse&lt;List&lt;RentalListingsLongTerm200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RentalListingsLongTerm200ResponseInner>> rentalListingsLongTermWithHttpInfo(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = rentalListingsLongTermValidateBeforeCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<RentalListingsLongTerm200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rental Listings (asynchronously)
     * Search for rental listings in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalListingsLongTermAsync(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset, final ApiCallback<List<RentalListingsLongTerm200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentalListingsLongTermValidateBeforeCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<RentalListingsLongTerm200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saleListingById
     * @param id The id of the property listing to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saleListingByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/sale/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saleListingByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling saleListingById(Async)");
        }

        return saleListingByIdCall(id, _callback);

    }

    /**
     * Sale Listing by Id
     * Returns a single sale listing matching the specified id.
     * @param id The id of the property listing to return (required)
     * @return SaleListingById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SaleListingById200Response saleListingById(String id) throws ApiException {
        ApiResponse<SaleListingById200Response> localVarResp = saleListingByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Sale Listing by Id
     * Returns a single sale listing matching the specified id.
     * @param id The id of the property listing to return (required)
     * @return ApiResponse&lt;SaleListingById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaleListingById200Response> saleListingByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = saleListingByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SaleListingById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sale Listing by Id (asynchronously)
     * Returns a single sale listing matching the specified id.
     * @param id The id of the property listing to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saleListingByIdAsync(String id, final ApiCallback<SaleListingById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = saleListingByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SaleListingById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saleListings
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saleListingsCall(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/sale";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (propertyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyType", propertyType));
        }

        if (bedrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bedrooms", bedrooms));
        }

        if (bathrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bathrooms", bathrooms));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (daysOld != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("daysOld", daysOld));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saleListingsValidateBeforeCall(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return saleListingsCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset, _callback);

    }

    /**
     * Sale Listings
     * Search for sale listings in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @return List&lt;SaleListings200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public List<SaleListings200ResponseInner> saleListings(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<SaleListings200ResponseInner>> localVarResp = saleListingsWithHttpInfo(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Sale Listings
     * Search for sale listings in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @return ApiResponse&lt;List&lt;SaleListings200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SaleListings200ResponseInner>> saleListingsWithHttpInfo(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = saleListingsValidateBeforeCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<SaleListings200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sale Listings (asynchronously)
     * Search for sale listings in a geographical area, or by a specific address.
     * @param address The full address of the property, in the format of &#x60;Street, City, State, Zip&#x60;. Used to retrieve data for a specific property, or together with the &#x60;radius&#x60; parameter to search for listings in a specific area (optional)
     * @param city The name of the city, used to search for listings in a specific city. This parameter is case-sensitive (optional, default to Austin)
     * @param state The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive (optional, default to TX)
     * @param zipCode The 5-digit zip code, used to search for listings in a specific zip code (optional)
     * @param latitude The latitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param longitude The longitude of the search area. Use the &#x60;latitude&#x60;/&#x60;longitude&#x60; and &#x60;radius&#x60; parameters to search for listings in a specific area (optional)
     * @param radius The radius of the search area in miles, with a maximum of 100. Use in combination with the &#x60;latitude&#x60;/&#x60;longitude&#x60; or &#x60;address&#x60; parameters to search for listings in a specific area (optional)
     * @param propertyType The type of the property, used to search for listings matching this criteria. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional)
     * @param bedrooms The number of bedrooms, used to search for listings matching this criteria. Use &#x60;0&#x60; to indicate a studio layout (optional)
     * @param bathrooms The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms (optional)
     * @param status The current listing status, used to search for listings matching this criteria (optional, default to Active)
     * @param daysOld The maximum number of days since a property was listed on the market, with a minimum of 1 (optional)
     * @param limit The maximum number of listings to return, between 1 and 500. Defaults to 50 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional, default to 5)
     * @param offset The index of the first listing to return, used to paginate through large lists of results. Defaults to 0 if not provided. [Learn more](https://developers.rentcast.io/reference/pagination) about pagination (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saleListingsAsync(String address, String city, String state, String zipCode, Float latitude, Float longitude, Float radius, String propertyType, Float bedrooms, Float bathrooms, String status, Float daysOld, Integer limit, Integer offset, final ApiCallback<List<SaleListings200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = saleListingsValidateBeforeCall(address, city, state, zipCode, latitude, longitude, radius, propertyType, bedrooms, bathrooms, status, daysOld, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<SaleListings200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for valueEstimate
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the value estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call valueEstimateCall(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avm/value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (propertyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyType", propertyType));
        }

        if (bedrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bedrooms", bedrooms));
        }

        if (bathrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bathrooms", bathrooms));
        }

        if (squareFootage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("squareFootage", squareFootage));
        }

        if (maxRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxRadius", maxRadius));
        }

        if (daysOld != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("daysOld", daysOld));
        }

        if (compCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compCount", compCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call valueEstimateValidateBeforeCall(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount, final ApiCallback _callback) throws ApiException {
        return valueEstimateCall(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount, _callback);

    }

    /**
     * Value Estimate
     * Returns a property value estimate and comparable properties.
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the value estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @return ValueEstimate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ValueEstimate200Response valueEstimate(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount) throws ApiException {
        ApiResponse<ValueEstimate200Response> localVarResp = valueEstimateWithHttpInfo(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount);
        return localVarResp.getData();
    }

    /**
     * Value Estimate
     * Returns a property value estimate and comparable properties.
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the value estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @return ApiResponse&lt;ValueEstimate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValueEstimate200Response> valueEstimateWithHttpInfo(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount) throws ApiException {
        okhttp3.Call localVarCall = valueEstimateValidateBeforeCall(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount, null);
        Type localVarReturnType = new TypeToken<ValueEstimate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Value Estimate (asynchronously)
     * Returns a property value estimate and comparable properties.
     * @param address The full property address, in the format of &#x60;Street, City, State, Zip&#x60;. You need to provide either the &#x60;address&#x60; or the &#x60;latitude&#x60;/&#x60;longitude&#x60; parameters (optional, default to 5500 Grand Lake Drive, San Antonio, TX, 78244)
     * @param latitude The latitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param longitude The longitude of the property. The &#x60;latitude&#x60;/&#x60;longitude&#x60; can be provided instead of the &#x60;address&#x60; parameter (optional)
     * @param propertyType The type of the property. See [explanation of property types](https://developers.rentcast.io/reference/property-types) (optional, default to Single Family)
     * @param bedrooms The number of bedrooms in the property. Use &#x60;0&#x60; to indicate a studio layout (optional, default to 4)
     * @param bathrooms The number of bathrooms in the property. Supports fractions to indicate partial bathrooms (optional, default to 2)
     * @param squareFootage The total living area size of the property, in square feet (optional, default to 1600)
     * @param maxRadius The maximum distance between comparable listings and the subject property, in miles (optional)
     * @param daysOld The maximum number of days since comparable listings were last seen on the market, with a minimum of 1 (optional)
     * @param compCount The number of comparable listings to use when calculating the value estimate, between 5 and 25. Defaults to 10 if not provided (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call valueEstimateAsync(String address, Float latitude, Float longitude, String propertyType, Float bedrooms, Float bathrooms, Float squareFootage, Float maxRadius, Float daysOld, Integer compCount, final ApiCallback<ValueEstimate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = valueEstimateValidateBeforeCall(address, latitude, longitude, propertyType, bedrooms, bathrooms, squareFootage, maxRadius, daysOld, compCount, _callback);
        Type localVarReturnType = new TypeToken<ValueEstimate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
