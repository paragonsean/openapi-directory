/*
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropertyRecords200ResponseInnerFeatures
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:12.015833-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyRecords200ResponseInnerFeatures {
  public static final String SERIALIZED_NAME_ARCHITECTURE_TYPE = "architectureType";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE_TYPE)
  private String architectureType;

  public static final String SERIALIZED_NAME_COOLING = "cooling";
  @SerializedName(SERIALIZED_NAME_COOLING)
  private Boolean cooling = true;

  public static final String SERIALIZED_NAME_COOLING_TYPE = "coolingType";
  @SerializedName(SERIALIZED_NAME_COOLING_TYPE)
  private String coolingType;

  public static final String SERIALIZED_NAME_EXTERIOR_TYPE = "exteriorType";
  @SerializedName(SERIALIZED_NAME_EXTERIOR_TYPE)
  private String exteriorType;

  public static final String SERIALIZED_NAME_FLOOR_COUNT = "floorCount";
  @SerializedName(SERIALIZED_NAME_FLOOR_COUNT)
  private Integer floorCount = 0;

  public static final String SERIALIZED_NAME_FOUNDATION_TYPE = "foundationType";
  @SerializedName(SERIALIZED_NAME_FOUNDATION_TYPE)
  private String foundationType;

  public static final String SERIALIZED_NAME_GARAGE = "garage";
  @SerializedName(SERIALIZED_NAME_GARAGE)
  private Boolean garage = true;

  public static final String SERIALIZED_NAME_GARAGE_TYPE = "garageType";
  @SerializedName(SERIALIZED_NAME_GARAGE_TYPE)
  private String garageType;

  public static final String SERIALIZED_NAME_HEATING = "heating";
  @SerializedName(SERIALIZED_NAME_HEATING)
  private Boolean heating = true;

  public static final String SERIALIZED_NAME_HEATING_TYPE = "heatingType";
  @SerializedName(SERIALIZED_NAME_HEATING_TYPE)
  private String heatingType;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private Boolean pool = true;

  public static final String SERIALIZED_NAME_ROOF_TYPE = "roofType";
  @SerializedName(SERIALIZED_NAME_ROOF_TYPE)
  private String roofType;

  public static final String SERIALIZED_NAME_ROOM_COUNT = "roomCount";
  @SerializedName(SERIALIZED_NAME_ROOM_COUNT)
  private Integer roomCount = 0;

  public static final String SERIALIZED_NAME_UNIT_COUNT = "unitCount";
  @SerializedName(SERIALIZED_NAME_UNIT_COUNT)
  private Integer unitCount = 0;

  public PropertyRecords200ResponseInnerFeatures() {
  }

  public PropertyRecords200ResponseInnerFeatures architectureType(String architectureType) {
    this.architectureType = architectureType;
    return this;
  }

  /**
   * Get architectureType
   * @return architectureType
   */
  @javax.annotation.Nullable
  public String getArchitectureType() {
    return architectureType;
  }

  public void setArchitectureType(String architectureType) {
    this.architectureType = architectureType;
  }


  public PropertyRecords200ResponseInnerFeatures cooling(Boolean cooling) {
    this.cooling = cooling;
    return this;
  }

  /**
   * Get cooling
   * @return cooling
   */
  @javax.annotation.Nullable
  public Boolean getCooling() {
    return cooling;
  }

  public void setCooling(Boolean cooling) {
    this.cooling = cooling;
  }


  public PropertyRecords200ResponseInnerFeatures coolingType(String coolingType) {
    this.coolingType = coolingType;
    return this;
  }

  /**
   * Get coolingType
   * @return coolingType
   */
  @javax.annotation.Nullable
  public String getCoolingType() {
    return coolingType;
  }

  public void setCoolingType(String coolingType) {
    this.coolingType = coolingType;
  }


  public PropertyRecords200ResponseInnerFeatures exteriorType(String exteriorType) {
    this.exteriorType = exteriorType;
    return this;
  }

  /**
   * Get exteriorType
   * @return exteriorType
   */
  @javax.annotation.Nullable
  public String getExteriorType() {
    return exteriorType;
  }

  public void setExteriorType(String exteriorType) {
    this.exteriorType = exteriorType;
  }


  public PropertyRecords200ResponseInnerFeatures floorCount(Integer floorCount) {
    this.floorCount = floorCount;
    return this;
  }

  /**
   * Get floorCount
   * @return floorCount
   */
  @javax.annotation.Nullable
  public Integer getFloorCount() {
    return floorCount;
  }

  public void setFloorCount(Integer floorCount) {
    this.floorCount = floorCount;
  }


  public PropertyRecords200ResponseInnerFeatures foundationType(String foundationType) {
    this.foundationType = foundationType;
    return this;
  }

  /**
   * Get foundationType
   * @return foundationType
   */
  @javax.annotation.Nullable
  public String getFoundationType() {
    return foundationType;
  }

  public void setFoundationType(String foundationType) {
    this.foundationType = foundationType;
  }


  public PropertyRecords200ResponseInnerFeatures garage(Boolean garage) {
    this.garage = garage;
    return this;
  }

  /**
   * Get garage
   * @return garage
   */
  @javax.annotation.Nullable
  public Boolean getGarage() {
    return garage;
  }

  public void setGarage(Boolean garage) {
    this.garage = garage;
  }


  public PropertyRecords200ResponseInnerFeatures garageType(String garageType) {
    this.garageType = garageType;
    return this;
  }

  /**
   * Get garageType
   * @return garageType
   */
  @javax.annotation.Nullable
  public String getGarageType() {
    return garageType;
  }

  public void setGarageType(String garageType) {
    this.garageType = garageType;
  }


  public PropertyRecords200ResponseInnerFeatures heating(Boolean heating) {
    this.heating = heating;
    return this;
  }

  /**
   * Get heating
   * @return heating
   */
  @javax.annotation.Nullable
  public Boolean getHeating() {
    return heating;
  }

  public void setHeating(Boolean heating) {
    this.heating = heating;
  }


  public PropertyRecords200ResponseInnerFeatures heatingType(String heatingType) {
    this.heatingType = heatingType;
    return this;
  }

  /**
   * Get heatingType
   * @return heatingType
   */
  @javax.annotation.Nullable
  public String getHeatingType() {
    return heatingType;
  }

  public void setHeatingType(String heatingType) {
    this.heatingType = heatingType;
  }


  public PropertyRecords200ResponseInnerFeatures pool(Boolean pool) {
    this.pool = pool;
    return this;
  }

  /**
   * Get pool
   * @return pool
   */
  @javax.annotation.Nullable
  public Boolean getPool() {
    return pool;
  }

  public void setPool(Boolean pool) {
    this.pool = pool;
  }


  public PropertyRecords200ResponseInnerFeatures roofType(String roofType) {
    this.roofType = roofType;
    return this;
  }

  /**
   * Get roofType
   * @return roofType
   */
  @javax.annotation.Nullable
  public String getRoofType() {
    return roofType;
  }

  public void setRoofType(String roofType) {
    this.roofType = roofType;
  }


  public PropertyRecords200ResponseInnerFeatures roomCount(Integer roomCount) {
    this.roomCount = roomCount;
    return this;
  }

  /**
   * Get roomCount
   * @return roomCount
   */
  @javax.annotation.Nullable
  public Integer getRoomCount() {
    return roomCount;
  }

  public void setRoomCount(Integer roomCount) {
    this.roomCount = roomCount;
  }


  public PropertyRecords200ResponseInnerFeatures unitCount(Integer unitCount) {
    this.unitCount = unitCount;
    return this;
  }

  /**
   * Get unitCount
   * @return unitCount
   */
  @javax.annotation.Nullable
  public Integer getUnitCount() {
    return unitCount;
  }

  public void setUnitCount(Integer unitCount) {
    this.unitCount = unitCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyRecords200ResponseInnerFeatures propertyRecords200ResponseInnerFeatures = (PropertyRecords200ResponseInnerFeatures) o;
    return Objects.equals(this.architectureType, propertyRecords200ResponseInnerFeatures.architectureType) &&
        Objects.equals(this.cooling, propertyRecords200ResponseInnerFeatures.cooling) &&
        Objects.equals(this.coolingType, propertyRecords200ResponseInnerFeatures.coolingType) &&
        Objects.equals(this.exteriorType, propertyRecords200ResponseInnerFeatures.exteriorType) &&
        Objects.equals(this.floorCount, propertyRecords200ResponseInnerFeatures.floorCount) &&
        Objects.equals(this.foundationType, propertyRecords200ResponseInnerFeatures.foundationType) &&
        Objects.equals(this.garage, propertyRecords200ResponseInnerFeatures.garage) &&
        Objects.equals(this.garageType, propertyRecords200ResponseInnerFeatures.garageType) &&
        Objects.equals(this.heating, propertyRecords200ResponseInnerFeatures.heating) &&
        Objects.equals(this.heatingType, propertyRecords200ResponseInnerFeatures.heatingType) &&
        Objects.equals(this.pool, propertyRecords200ResponseInnerFeatures.pool) &&
        Objects.equals(this.roofType, propertyRecords200ResponseInnerFeatures.roofType) &&
        Objects.equals(this.roomCount, propertyRecords200ResponseInnerFeatures.roomCount) &&
        Objects.equals(this.unitCount, propertyRecords200ResponseInnerFeatures.unitCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architectureType, cooling, coolingType, exteriorType, floorCount, foundationType, garage, garageType, heating, heatingType, pool, roofType, roomCount, unitCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyRecords200ResponseInnerFeatures {\n");
    sb.append("    architectureType: ").append(toIndentedString(architectureType)).append("\n");
    sb.append("    cooling: ").append(toIndentedString(cooling)).append("\n");
    sb.append("    coolingType: ").append(toIndentedString(coolingType)).append("\n");
    sb.append("    exteriorType: ").append(toIndentedString(exteriorType)).append("\n");
    sb.append("    floorCount: ").append(toIndentedString(floorCount)).append("\n");
    sb.append("    foundationType: ").append(toIndentedString(foundationType)).append("\n");
    sb.append("    garage: ").append(toIndentedString(garage)).append("\n");
    sb.append("    garageType: ").append(toIndentedString(garageType)).append("\n");
    sb.append("    heating: ").append(toIndentedString(heating)).append("\n");
    sb.append("    heatingType: ").append(toIndentedString(heatingType)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    roofType: ").append(toIndentedString(roofType)).append("\n");
    sb.append("    roomCount: ").append(toIndentedString(roomCount)).append("\n");
    sb.append("    unitCount: ").append(toIndentedString(unitCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("architectureType");
    openapiFields.add("cooling");
    openapiFields.add("coolingType");
    openapiFields.add("exteriorType");
    openapiFields.add("floorCount");
    openapiFields.add("foundationType");
    openapiFields.add("garage");
    openapiFields.add("garageType");
    openapiFields.add("heating");
    openapiFields.add("heatingType");
    openapiFields.add("pool");
    openapiFields.add("roofType");
    openapiFields.add("roomCount");
    openapiFields.add("unitCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyRecords200ResponseInnerFeatures
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyRecords200ResponseInnerFeatures.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyRecords200ResponseInnerFeatures is not found in the empty JSON string", PropertyRecords200ResponseInnerFeatures.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyRecords200ResponseInnerFeatures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyRecords200ResponseInnerFeatures` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("architectureType") != null && !jsonObj.get("architectureType").isJsonNull()) && !jsonObj.get("architectureType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `architectureType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("architectureType").toString()));
      }
      if ((jsonObj.get("coolingType") != null && !jsonObj.get("coolingType").isJsonNull()) && !jsonObj.get("coolingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coolingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coolingType").toString()));
      }
      if ((jsonObj.get("exteriorType") != null && !jsonObj.get("exteriorType").isJsonNull()) && !jsonObj.get("exteriorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exteriorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exteriorType").toString()));
      }
      if ((jsonObj.get("foundationType") != null && !jsonObj.get("foundationType").isJsonNull()) && !jsonObj.get("foundationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foundationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foundationType").toString()));
      }
      if ((jsonObj.get("garageType") != null && !jsonObj.get("garageType").isJsonNull()) && !jsonObj.get("garageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `garageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("garageType").toString()));
      }
      if ((jsonObj.get("heatingType") != null && !jsonObj.get("heatingType").isJsonNull()) && !jsonObj.get("heatingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heatingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heatingType").toString()));
      }
      if ((jsonObj.get("roofType") != null && !jsonObj.get("roofType").isJsonNull()) && !jsonObj.get("roofType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roofType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roofType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyRecords200ResponseInnerFeatures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyRecords200ResponseInnerFeatures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyRecords200ResponseInnerFeatures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyRecords200ResponseInnerFeatures.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyRecords200ResponseInnerFeatures>() {
           @Override
           public void write(JsonWriter out, PropertyRecords200ResponseInnerFeatures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyRecords200ResponseInnerFeatures read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyRecords200ResponseInnerFeatures given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyRecords200ResponseInnerFeatures
   * @throws IOException if the JSON string is invalid with respect to PropertyRecords200ResponseInnerFeatures
   */
  public static PropertyRecords200ResponseInnerFeatures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyRecords200ResponseInnerFeatures.class);
  }

  /**
   * Convert an instance of PropertyRecords200ResponseInnerFeatures to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

