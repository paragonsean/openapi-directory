/*
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RentalListingLongTermById200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:12.015833-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RentalListingLongTermById200Response {
  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_BATHROOMS = "bathrooms";
  @SerializedName(SERIALIZED_NAME_BATHROOMS)
  private Integer bathrooms = 0;

  public static final String SERIALIZED_NAME_BEDROOMS = "bedrooms";
  @SerializedName(SERIALIZED_NAME_BEDROOMS)
  private Integer bedrooms = 0;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_DAYS_ON_MARKET = "daysOnMarket";
  @SerializedName(SERIALIZED_NAME_DAYS_ON_MARKET)
  private Integer daysOnMarket = 0;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formattedAddress";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private String formattedAddress;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_SEEN_DATE = "lastSeenDate";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_DATE)
  private String lastSeenDate;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude = new BigDecimal("0");

  public static final String SERIALIZED_NAME_LISTED_DATE = "listedDate";
  @SerializedName(SERIALIZED_NAME_LISTED_DATE)
  private String listedDate;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude = new BigDecimal("0");

  public static final String SERIALIZED_NAME_LOT_SIZE = "lotSize";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE)
  private Integer lotSize = 0;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price = 0;

  public static final String SERIALIZED_NAME_PROPERTY_TYPE = "propertyType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_TYPE)
  private String propertyType;

  public static final String SERIALIZED_NAME_REMOVED_DATE = "removedDate";
  @SerializedName(SERIALIZED_NAME_REMOVED_DATE)
  private Object removedDate = null;

  public static final String SERIALIZED_NAME_SQUARE_FOOTAGE = "squareFootage";
  @SerializedName(SERIALIZED_NAME_SQUARE_FOOTAGE)
  private Integer squareFootage = 0;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_YEAR_BUILT = "yearBuilt";
  @SerializedName(SERIALIZED_NAME_YEAR_BUILT)
  private Integer yearBuilt = 0;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public RentalListingLongTermById200Response() {
  }

  public RentalListingLongTermById200Response addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public RentalListingLongTermById200Response bathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
    return this;
  }

  /**
   * Get bathrooms
   * @return bathrooms
   */
  @javax.annotation.Nullable
  public Integer getBathrooms() {
    return bathrooms;
  }

  public void setBathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
  }


  public RentalListingLongTermById200Response bedrooms(Integer bedrooms) {
    this.bedrooms = bedrooms;
    return this;
  }

  /**
   * Get bedrooms
   * @return bedrooms
   */
  @javax.annotation.Nullable
  public Integer getBedrooms() {
    return bedrooms;
  }

  public void setBedrooms(Integer bedrooms) {
    this.bedrooms = bedrooms;
  }


  public RentalListingLongTermById200Response city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public RentalListingLongTermById200Response county(String county) {
    this.county = county;
    return this;
  }

  /**
   * Get county
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public RentalListingLongTermById200Response createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public RentalListingLongTermById200Response daysOnMarket(Integer daysOnMarket) {
    this.daysOnMarket = daysOnMarket;
    return this;
  }

  /**
   * Get daysOnMarket
   * @return daysOnMarket
   */
  @javax.annotation.Nullable
  public Integer getDaysOnMarket() {
    return daysOnMarket;
  }

  public void setDaysOnMarket(Integer daysOnMarket) {
    this.daysOnMarket = daysOnMarket;
  }


  public RentalListingLongTermById200Response formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  /**
   * Get formattedAddress
   * @return formattedAddress
   */
  @javax.annotation.Nullable
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public RentalListingLongTermById200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RentalListingLongTermById200Response lastSeenDate(String lastSeenDate) {
    this.lastSeenDate = lastSeenDate;
    return this;
  }

  /**
   * Get lastSeenDate
   * @return lastSeenDate
   */
  @javax.annotation.Nullable
  public String getLastSeenDate() {
    return lastSeenDate;
  }

  public void setLastSeenDate(String lastSeenDate) {
    this.lastSeenDate = lastSeenDate;
  }


  public RentalListingLongTermById200Response latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public RentalListingLongTermById200Response listedDate(String listedDate) {
    this.listedDate = listedDate;
    return this;
  }

  /**
   * Get listedDate
   * @return listedDate
   */
  @javax.annotation.Nullable
  public String getListedDate() {
    return listedDate;
  }

  public void setListedDate(String listedDate) {
    this.listedDate = listedDate;
  }


  public RentalListingLongTermById200Response longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public RentalListingLongTermById200Response lotSize(Integer lotSize) {
    this.lotSize = lotSize;
    return this;
  }

  /**
   * Get lotSize
   * @return lotSize
   */
  @javax.annotation.Nullable
  public Integer getLotSize() {
    return lotSize;
  }

  public void setLotSize(Integer lotSize) {
    this.lotSize = lotSize;
  }


  public RentalListingLongTermById200Response price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public RentalListingLongTermById200Response propertyType(String propertyType) {
    this.propertyType = propertyType;
    return this;
  }

  /**
   * Get propertyType
   * @return propertyType
   */
  @javax.annotation.Nullable
  public String getPropertyType() {
    return propertyType;
  }

  public void setPropertyType(String propertyType) {
    this.propertyType = propertyType;
  }


  public RentalListingLongTermById200Response removedDate(Object removedDate) {
    this.removedDate = removedDate;
    return this;
  }

  /**
   * Get removedDate
   * @return removedDate
   */
  @javax.annotation.Nullable
  public Object getRemovedDate() {
    return removedDate;
  }

  public void setRemovedDate(Object removedDate) {
    this.removedDate = removedDate;
  }


  public RentalListingLongTermById200Response squareFootage(Integer squareFootage) {
    this.squareFootage = squareFootage;
    return this;
  }

  /**
   * Get squareFootage
   * @return squareFootage
   */
  @javax.annotation.Nullable
  public Integer getSquareFootage() {
    return squareFootage;
  }

  public void setSquareFootage(Integer squareFootage) {
    this.squareFootage = squareFootage;
  }


  public RentalListingLongTermById200Response state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public RentalListingLongTermById200Response status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RentalListingLongTermById200Response yearBuilt(Integer yearBuilt) {
    this.yearBuilt = yearBuilt;
    return this;
  }

  /**
   * Get yearBuilt
   * @return yearBuilt
   */
  @javax.annotation.Nullable
  public Integer getYearBuilt() {
    return yearBuilt;
  }

  public void setYearBuilt(Integer yearBuilt) {
    this.yearBuilt = yearBuilt;
  }


  public RentalListingLongTermById200Response zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Get zipCode
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RentalListingLongTermById200Response rentalListingLongTermById200Response = (RentalListingLongTermById200Response) o;
    return Objects.equals(this.addressLine1, rentalListingLongTermById200Response.addressLine1) &&
        Objects.equals(this.bathrooms, rentalListingLongTermById200Response.bathrooms) &&
        Objects.equals(this.bedrooms, rentalListingLongTermById200Response.bedrooms) &&
        Objects.equals(this.city, rentalListingLongTermById200Response.city) &&
        Objects.equals(this.county, rentalListingLongTermById200Response.county) &&
        Objects.equals(this.createdDate, rentalListingLongTermById200Response.createdDate) &&
        Objects.equals(this.daysOnMarket, rentalListingLongTermById200Response.daysOnMarket) &&
        Objects.equals(this.formattedAddress, rentalListingLongTermById200Response.formattedAddress) &&
        Objects.equals(this.id, rentalListingLongTermById200Response.id) &&
        Objects.equals(this.lastSeenDate, rentalListingLongTermById200Response.lastSeenDate) &&
        Objects.equals(this.latitude, rentalListingLongTermById200Response.latitude) &&
        Objects.equals(this.listedDate, rentalListingLongTermById200Response.listedDate) &&
        Objects.equals(this.longitude, rentalListingLongTermById200Response.longitude) &&
        Objects.equals(this.lotSize, rentalListingLongTermById200Response.lotSize) &&
        Objects.equals(this.price, rentalListingLongTermById200Response.price) &&
        Objects.equals(this.propertyType, rentalListingLongTermById200Response.propertyType) &&
        Objects.equals(this.removedDate, rentalListingLongTermById200Response.removedDate) &&
        Objects.equals(this.squareFootage, rentalListingLongTermById200Response.squareFootage) &&
        Objects.equals(this.state, rentalListingLongTermById200Response.state) &&
        Objects.equals(this.status, rentalListingLongTermById200Response.status) &&
        Objects.equals(this.yearBuilt, rentalListingLongTermById200Response.yearBuilt) &&
        Objects.equals(this.zipCode, rentalListingLongTermById200Response.zipCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine1, bathrooms, bedrooms, city, county, createdDate, daysOnMarket, formattedAddress, id, lastSeenDate, latitude, listedDate, longitude, lotSize, price, propertyType, removedDate, squareFootage, state, status, yearBuilt, zipCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RentalListingLongTermById200Response {\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    bathrooms: ").append(toIndentedString(bathrooms)).append("\n");
    sb.append("    bedrooms: ").append(toIndentedString(bedrooms)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    daysOnMarket: ").append(toIndentedString(daysOnMarket)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSeenDate: ").append(toIndentedString(lastSeenDate)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    listedDate: ").append(toIndentedString(listedDate)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    lotSize: ").append(toIndentedString(lotSize)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("    removedDate: ").append(toIndentedString(removedDate)).append("\n");
    sb.append("    squareFootage: ").append(toIndentedString(squareFootage)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    yearBuilt: ").append(toIndentedString(yearBuilt)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressLine1");
    openapiFields.add("bathrooms");
    openapiFields.add("bedrooms");
    openapiFields.add("city");
    openapiFields.add("county");
    openapiFields.add("createdDate");
    openapiFields.add("daysOnMarket");
    openapiFields.add("formattedAddress");
    openapiFields.add("id");
    openapiFields.add("lastSeenDate");
    openapiFields.add("latitude");
    openapiFields.add("listedDate");
    openapiFields.add("longitude");
    openapiFields.add("lotSize");
    openapiFields.add("price");
    openapiFields.add("propertyType");
    openapiFields.add("removedDate");
    openapiFields.add("squareFootage");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("yearBuilt");
    openapiFields.add("zipCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RentalListingLongTermById200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RentalListingLongTermById200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RentalListingLongTermById200Response is not found in the empty JSON string", RentalListingLongTermById200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RentalListingLongTermById200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RentalListingLongTermById200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("formattedAddress") != null && !jsonObj.get("formattedAddress").isJsonNull()) && !jsonObj.get("formattedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedAddress").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastSeenDate") != null && !jsonObj.get("lastSeenDate").isJsonNull()) && !jsonObj.get("lastSeenDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSeenDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSeenDate").toString()));
      }
      if ((jsonObj.get("listedDate") != null && !jsonObj.get("listedDate").isJsonNull()) && !jsonObj.get("listedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listedDate").toString()));
      }
      if ((jsonObj.get("propertyType") != null && !jsonObj.get("propertyType").isJsonNull()) && !jsonObj.get("propertyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyType").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("zipCode") != null && !jsonObj.get("zipCode").isJsonNull()) && !jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RentalListingLongTermById200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RentalListingLongTermById200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RentalListingLongTermById200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RentalListingLongTermById200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RentalListingLongTermById200Response>() {
           @Override
           public void write(JsonWriter out, RentalListingLongTermById200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RentalListingLongTermById200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RentalListingLongTermById200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RentalListingLongTermById200Response
   * @throws IOException if the JSON string is invalid with respect to RentalListingLongTermById200Response
   */
  public static RentalListingLongTermById200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RentalListingLongTermById200Response.class);
  }

  /**
   * Convert an instance of RentalListingLongTermById200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

