/*
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PropertyRecords200ResponseInnerPropertyTaxes2019;
import org.openapitools.client.model.PropertyRecords200ResponseInnerPropertyTaxes2020;
import org.openapitools.client.model.PropertyRecords200ResponseInnerPropertyTaxes2021;
import org.openapitools.client.model.PropertyRecords200ResponseInnerPropertyTaxes2022;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropertyRecords200ResponseInnerPropertyTaxes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:12.015833-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyRecords200ResponseInnerPropertyTaxes {
  public static final String SERIALIZED_NAME_2019 = "2019";
  @SerializedName(SERIALIZED_NAME_2019)
  private PropertyRecords200ResponseInnerPropertyTaxes2019 _2019;

  public static final String SERIALIZED_NAME_2020 = "2020";
  @SerializedName(SERIALIZED_NAME_2020)
  private PropertyRecords200ResponseInnerPropertyTaxes2020 _2020;

  public static final String SERIALIZED_NAME_2021 = "2021";
  @SerializedName(SERIALIZED_NAME_2021)
  private PropertyRecords200ResponseInnerPropertyTaxes2021 _2021;

  public static final String SERIALIZED_NAME_2022 = "2022";
  @SerializedName(SERIALIZED_NAME_2022)
  private PropertyRecords200ResponseInnerPropertyTaxes2022 _2022;

  public PropertyRecords200ResponseInnerPropertyTaxes() {
  }

  public PropertyRecords200ResponseInnerPropertyTaxes _2019(PropertyRecords200ResponseInnerPropertyTaxes2019 _2019) {
    this._2019 = _2019;
    return this;
  }

  /**
   * Get _2019
   * @return _2019
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerPropertyTaxes2019 get2019() {
    return _2019;
  }

  public void set2019(PropertyRecords200ResponseInnerPropertyTaxes2019 _2019) {
    this._2019 = _2019;
  }


  public PropertyRecords200ResponseInnerPropertyTaxes _2020(PropertyRecords200ResponseInnerPropertyTaxes2020 _2020) {
    this._2020 = _2020;
    return this;
  }

  /**
   * Get _2020
   * @return _2020
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerPropertyTaxes2020 get2020() {
    return _2020;
  }

  public void set2020(PropertyRecords200ResponseInnerPropertyTaxes2020 _2020) {
    this._2020 = _2020;
  }


  public PropertyRecords200ResponseInnerPropertyTaxes _2021(PropertyRecords200ResponseInnerPropertyTaxes2021 _2021) {
    this._2021 = _2021;
    return this;
  }

  /**
   * Get _2021
   * @return _2021
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerPropertyTaxes2021 get2021() {
    return _2021;
  }

  public void set2021(PropertyRecords200ResponseInnerPropertyTaxes2021 _2021) {
    this._2021 = _2021;
  }


  public PropertyRecords200ResponseInnerPropertyTaxes _2022(PropertyRecords200ResponseInnerPropertyTaxes2022 _2022) {
    this._2022 = _2022;
    return this;
  }

  /**
   * Get _2022
   * @return _2022
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerPropertyTaxes2022 get2022() {
    return _2022;
  }

  public void set2022(PropertyRecords200ResponseInnerPropertyTaxes2022 _2022) {
    this._2022 = _2022;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyRecords200ResponseInnerPropertyTaxes propertyRecords200ResponseInnerPropertyTaxes = (PropertyRecords200ResponseInnerPropertyTaxes) o;
    return Objects.equals(this._2019, propertyRecords200ResponseInnerPropertyTaxes._2019) &&
        Objects.equals(this._2020, propertyRecords200ResponseInnerPropertyTaxes._2020) &&
        Objects.equals(this._2021, propertyRecords200ResponseInnerPropertyTaxes._2021) &&
        Objects.equals(this._2022, propertyRecords200ResponseInnerPropertyTaxes._2022);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_2019, _2020, _2021, _2022);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyRecords200ResponseInnerPropertyTaxes {\n");
    sb.append("    _2019: ").append(toIndentedString(_2019)).append("\n");
    sb.append("    _2020: ").append(toIndentedString(_2020)).append("\n");
    sb.append("    _2021: ").append(toIndentedString(_2021)).append("\n");
    sb.append("    _2022: ").append(toIndentedString(_2022)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("2019");
    openapiFields.add("2020");
    openapiFields.add("2021");
    openapiFields.add("2022");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyRecords200ResponseInnerPropertyTaxes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyRecords200ResponseInnerPropertyTaxes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyRecords200ResponseInnerPropertyTaxes is not found in the empty JSON string", PropertyRecords200ResponseInnerPropertyTaxes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyRecords200ResponseInnerPropertyTaxes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyRecords200ResponseInnerPropertyTaxes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `2019`
      if (jsonObj.get("2019") != null && !jsonObj.get("2019").isJsonNull()) {
        PropertyRecords200ResponseInnerPropertyTaxes2019.validateJsonElement(jsonObj.get("2019"));
      }
      // validate the optional field `2020`
      if (jsonObj.get("2020") != null && !jsonObj.get("2020").isJsonNull()) {
        PropertyRecords200ResponseInnerPropertyTaxes2020.validateJsonElement(jsonObj.get("2020"));
      }
      // validate the optional field `2021`
      if (jsonObj.get("2021") != null && !jsonObj.get("2021").isJsonNull()) {
        PropertyRecords200ResponseInnerPropertyTaxes2021.validateJsonElement(jsonObj.get("2021"));
      }
      // validate the optional field `2022`
      if (jsonObj.get("2022") != null && !jsonObj.get("2022").isJsonNull()) {
        PropertyRecords200ResponseInnerPropertyTaxes2022.validateJsonElement(jsonObj.get("2022"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyRecords200ResponseInnerPropertyTaxes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyRecords200ResponseInnerPropertyTaxes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyRecords200ResponseInnerPropertyTaxes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyRecords200ResponseInnerPropertyTaxes.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyRecords200ResponseInnerPropertyTaxes>() {
           @Override
           public void write(JsonWriter out, PropertyRecords200ResponseInnerPropertyTaxes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyRecords200ResponseInnerPropertyTaxes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyRecords200ResponseInnerPropertyTaxes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyRecords200ResponseInnerPropertyTaxes
   * @throws IOException if the JSON string is invalid with respect to PropertyRecords200ResponseInnerPropertyTaxes
   */
  public static PropertyRecords200ResponseInnerPropertyTaxes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyRecords200ResponseInnerPropertyTaxes.class);
  }

  /**
   * Convert an instance of PropertyRecords200ResponseInnerPropertyTaxes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

