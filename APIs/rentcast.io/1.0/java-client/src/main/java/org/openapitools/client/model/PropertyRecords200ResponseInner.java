/*
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PropertyRecords200ResponseInnerFeatures;
import org.openapitools.client.model.PropertyRecords200ResponseInnerOwner;
import org.openapitools.client.model.PropertyRecords200ResponseInnerPropertyTaxes;
import org.openapitools.client.model.PropertyRecords200ResponseInnerTaxAssessments;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropertyRecords200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:12.015833-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyRecords200ResponseInner {
  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ASSESSOR_I_D = "assessorID";
  @SerializedName(SERIALIZED_NAME_ASSESSOR_I_D)
  private String assessorID;

  public static final String SERIALIZED_NAME_BATHROOMS = "bathrooms";
  @SerializedName(SERIALIZED_NAME_BATHROOMS)
  private Integer bathrooms = 0;

  public static final String SERIALIZED_NAME_BEDROOMS = "bedrooms";
  @SerializedName(SERIALIZED_NAME_BEDROOMS)
  private Integer bedrooms = 0;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private PropertyRecords200ResponseInnerFeatures features;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formattedAddress";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private String formattedAddress;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_SALE_DATE = "lastSaleDate";
  @SerializedName(SERIALIZED_NAME_LAST_SALE_DATE)
  private String lastSaleDate;

  public static final String SERIALIZED_NAME_LAST_SALE_PRICE = "lastSalePrice";
  @SerializedName(SERIALIZED_NAME_LAST_SALE_PRICE)
  private Integer lastSalePrice = 0;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude = new BigDecimal("0");

  public static final String SERIALIZED_NAME_LEGAL_DESCRIPTION = "legalDescription";
  @SerializedName(SERIALIZED_NAME_LEGAL_DESCRIPTION)
  private String legalDescription;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude = new BigDecimal("0");

  public static final String SERIALIZED_NAME_LOT_SIZE = "lotSize";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE)
  private Integer lotSize = 0;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private PropertyRecords200ResponseInnerOwner owner;

  public static final String SERIALIZED_NAME_OWNER_OCCUPIED = "ownerOccupied";
  @SerializedName(SERIALIZED_NAME_OWNER_OCCUPIED)
  private Boolean ownerOccupied = true;

  public static final String SERIALIZED_NAME_PROPERTY_TAXES = "propertyTaxes";
  @SerializedName(SERIALIZED_NAME_PROPERTY_TAXES)
  private PropertyRecords200ResponseInnerPropertyTaxes propertyTaxes;

  public static final String SERIALIZED_NAME_PROPERTY_TYPE = "propertyType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_TYPE)
  private String propertyType;

  public static final String SERIALIZED_NAME_SQUARE_FOOTAGE = "squareFootage";
  @SerializedName(SERIALIZED_NAME_SQUARE_FOOTAGE)
  private Integer squareFootage = 0;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUBDIVISION = "subdivision";
  @SerializedName(SERIALIZED_NAME_SUBDIVISION)
  private String subdivision;

  public static final String SERIALIZED_NAME_TAX_ASSESSMENTS = "taxAssessments";
  @SerializedName(SERIALIZED_NAME_TAX_ASSESSMENTS)
  private PropertyRecords200ResponseInnerTaxAssessments taxAssessments;

  public static final String SERIALIZED_NAME_YEAR_BUILT = "yearBuilt";
  @SerializedName(SERIALIZED_NAME_YEAR_BUILT)
  private Integer yearBuilt = 0;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_ZONING = "zoning";
  @SerializedName(SERIALIZED_NAME_ZONING)
  private String zoning;

  public PropertyRecords200ResponseInner() {
  }

  public PropertyRecords200ResponseInner addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public PropertyRecords200ResponseInner assessorID(String assessorID) {
    this.assessorID = assessorID;
    return this;
  }

  /**
   * Get assessorID
   * @return assessorID
   */
  @javax.annotation.Nullable
  public String getAssessorID() {
    return assessorID;
  }

  public void setAssessorID(String assessorID) {
    this.assessorID = assessorID;
  }


  public PropertyRecords200ResponseInner bathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
    return this;
  }

  /**
   * Get bathrooms
   * @return bathrooms
   */
  @javax.annotation.Nullable
  public Integer getBathrooms() {
    return bathrooms;
  }

  public void setBathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
  }


  public PropertyRecords200ResponseInner bedrooms(Integer bedrooms) {
    this.bedrooms = bedrooms;
    return this;
  }

  /**
   * Get bedrooms
   * @return bedrooms
   */
  @javax.annotation.Nullable
  public Integer getBedrooms() {
    return bedrooms;
  }

  public void setBedrooms(Integer bedrooms) {
    this.bedrooms = bedrooms;
  }


  public PropertyRecords200ResponseInner city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public PropertyRecords200ResponseInner county(String county) {
    this.county = county;
    return this;
  }

  /**
   * Get county
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public PropertyRecords200ResponseInner features(PropertyRecords200ResponseInnerFeatures features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerFeatures getFeatures() {
    return features;
  }

  public void setFeatures(PropertyRecords200ResponseInnerFeatures features) {
    this.features = features;
  }


  public PropertyRecords200ResponseInner formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  /**
   * Get formattedAddress
   * @return formattedAddress
   */
  @javax.annotation.Nullable
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public PropertyRecords200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PropertyRecords200ResponseInner lastSaleDate(String lastSaleDate) {
    this.lastSaleDate = lastSaleDate;
    return this;
  }

  /**
   * Get lastSaleDate
   * @return lastSaleDate
   */
  @javax.annotation.Nullable
  public String getLastSaleDate() {
    return lastSaleDate;
  }

  public void setLastSaleDate(String lastSaleDate) {
    this.lastSaleDate = lastSaleDate;
  }


  public PropertyRecords200ResponseInner lastSalePrice(Integer lastSalePrice) {
    this.lastSalePrice = lastSalePrice;
    return this;
  }

  /**
   * Get lastSalePrice
   * @return lastSalePrice
   */
  @javax.annotation.Nullable
  public Integer getLastSalePrice() {
    return lastSalePrice;
  }

  public void setLastSalePrice(Integer lastSalePrice) {
    this.lastSalePrice = lastSalePrice;
  }


  public PropertyRecords200ResponseInner latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public PropertyRecords200ResponseInner legalDescription(String legalDescription) {
    this.legalDescription = legalDescription;
    return this;
  }

  /**
   * Get legalDescription
   * @return legalDescription
   */
  @javax.annotation.Nullable
  public String getLegalDescription() {
    return legalDescription;
  }

  public void setLegalDescription(String legalDescription) {
    this.legalDescription = legalDescription;
  }


  public PropertyRecords200ResponseInner longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public PropertyRecords200ResponseInner lotSize(Integer lotSize) {
    this.lotSize = lotSize;
    return this;
  }

  /**
   * Get lotSize
   * @return lotSize
   */
  @javax.annotation.Nullable
  public Integer getLotSize() {
    return lotSize;
  }

  public void setLotSize(Integer lotSize) {
    this.lotSize = lotSize;
  }


  public PropertyRecords200ResponseInner owner(PropertyRecords200ResponseInnerOwner owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerOwner getOwner() {
    return owner;
  }

  public void setOwner(PropertyRecords200ResponseInnerOwner owner) {
    this.owner = owner;
  }


  public PropertyRecords200ResponseInner ownerOccupied(Boolean ownerOccupied) {
    this.ownerOccupied = ownerOccupied;
    return this;
  }

  /**
   * Get ownerOccupied
   * @return ownerOccupied
   */
  @javax.annotation.Nullable
  public Boolean getOwnerOccupied() {
    return ownerOccupied;
  }

  public void setOwnerOccupied(Boolean ownerOccupied) {
    this.ownerOccupied = ownerOccupied;
  }


  public PropertyRecords200ResponseInner propertyTaxes(PropertyRecords200ResponseInnerPropertyTaxes propertyTaxes) {
    this.propertyTaxes = propertyTaxes;
    return this;
  }

  /**
   * Get propertyTaxes
   * @return propertyTaxes
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerPropertyTaxes getPropertyTaxes() {
    return propertyTaxes;
  }

  public void setPropertyTaxes(PropertyRecords200ResponseInnerPropertyTaxes propertyTaxes) {
    this.propertyTaxes = propertyTaxes;
  }


  public PropertyRecords200ResponseInner propertyType(String propertyType) {
    this.propertyType = propertyType;
    return this;
  }

  /**
   * Get propertyType
   * @return propertyType
   */
  @javax.annotation.Nullable
  public String getPropertyType() {
    return propertyType;
  }

  public void setPropertyType(String propertyType) {
    this.propertyType = propertyType;
  }


  public PropertyRecords200ResponseInner squareFootage(Integer squareFootage) {
    this.squareFootage = squareFootage;
    return this;
  }

  /**
   * Get squareFootage
   * @return squareFootage
   */
  @javax.annotation.Nullable
  public Integer getSquareFootage() {
    return squareFootage;
  }

  public void setSquareFootage(Integer squareFootage) {
    this.squareFootage = squareFootage;
  }


  public PropertyRecords200ResponseInner state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public PropertyRecords200ResponseInner subdivision(String subdivision) {
    this.subdivision = subdivision;
    return this;
  }

  /**
   * Get subdivision
   * @return subdivision
   */
  @javax.annotation.Nullable
  public String getSubdivision() {
    return subdivision;
  }

  public void setSubdivision(String subdivision) {
    this.subdivision = subdivision;
  }


  public PropertyRecords200ResponseInner taxAssessments(PropertyRecords200ResponseInnerTaxAssessments taxAssessments) {
    this.taxAssessments = taxAssessments;
    return this;
  }

  /**
   * Get taxAssessments
   * @return taxAssessments
   */
  @javax.annotation.Nullable
  public PropertyRecords200ResponseInnerTaxAssessments getTaxAssessments() {
    return taxAssessments;
  }

  public void setTaxAssessments(PropertyRecords200ResponseInnerTaxAssessments taxAssessments) {
    this.taxAssessments = taxAssessments;
  }


  public PropertyRecords200ResponseInner yearBuilt(Integer yearBuilt) {
    this.yearBuilt = yearBuilt;
    return this;
  }

  /**
   * Get yearBuilt
   * @return yearBuilt
   */
  @javax.annotation.Nullable
  public Integer getYearBuilt() {
    return yearBuilt;
  }

  public void setYearBuilt(Integer yearBuilt) {
    this.yearBuilt = yearBuilt;
  }


  public PropertyRecords200ResponseInner zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Get zipCode
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  public PropertyRecords200ResponseInner zoning(String zoning) {
    this.zoning = zoning;
    return this;
  }

  /**
   * Get zoning
   * @return zoning
   */
  @javax.annotation.Nullable
  public String getZoning() {
    return zoning;
  }

  public void setZoning(String zoning) {
    this.zoning = zoning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyRecords200ResponseInner propertyRecords200ResponseInner = (PropertyRecords200ResponseInner) o;
    return Objects.equals(this.addressLine1, propertyRecords200ResponseInner.addressLine1) &&
        Objects.equals(this.assessorID, propertyRecords200ResponseInner.assessorID) &&
        Objects.equals(this.bathrooms, propertyRecords200ResponseInner.bathrooms) &&
        Objects.equals(this.bedrooms, propertyRecords200ResponseInner.bedrooms) &&
        Objects.equals(this.city, propertyRecords200ResponseInner.city) &&
        Objects.equals(this.county, propertyRecords200ResponseInner.county) &&
        Objects.equals(this.features, propertyRecords200ResponseInner.features) &&
        Objects.equals(this.formattedAddress, propertyRecords200ResponseInner.formattedAddress) &&
        Objects.equals(this.id, propertyRecords200ResponseInner.id) &&
        Objects.equals(this.lastSaleDate, propertyRecords200ResponseInner.lastSaleDate) &&
        Objects.equals(this.lastSalePrice, propertyRecords200ResponseInner.lastSalePrice) &&
        Objects.equals(this.latitude, propertyRecords200ResponseInner.latitude) &&
        Objects.equals(this.legalDescription, propertyRecords200ResponseInner.legalDescription) &&
        Objects.equals(this.longitude, propertyRecords200ResponseInner.longitude) &&
        Objects.equals(this.lotSize, propertyRecords200ResponseInner.lotSize) &&
        Objects.equals(this.owner, propertyRecords200ResponseInner.owner) &&
        Objects.equals(this.ownerOccupied, propertyRecords200ResponseInner.ownerOccupied) &&
        Objects.equals(this.propertyTaxes, propertyRecords200ResponseInner.propertyTaxes) &&
        Objects.equals(this.propertyType, propertyRecords200ResponseInner.propertyType) &&
        Objects.equals(this.squareFootage, propertyRecords200ResponseInner.squareFootage) &&
        Objects.equals(this.state, propertyRecords200ResponseInner.state) &&
        Objects.equals(this.subdivision, propertyRecords200ResponseInner.subdivision) &&
        Objects.equals(this.taxAssessments, propertyRecords200ResponseInner.taxAssessments) &&
        Objects.equals(this.yearBuilt, propertyRecords200ResponseInner.yearBuilt) &&
        Objects.equals(this.zipCode, propertyRecords200ResponseInner.zipCode) &&
        Objects.equals(this.zoning, propertyRecords200ResponseInner.zoning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine1, assessorID, bathrooms, bedrooms, city, county, features, formattedAddress, id, lastSaleDate, lastSalePrice, latitude, legalDescription, longitude, lotSize, owner, ownerOccupied, propertyTaxes, propertyType, squareFootage, state, subdivision, taxAssessments, yearBuilt, zipCode, zoning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyRecords200ResponseInner {\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    assessorID: ").append(toIndentedString(assessorID)).append("\n");
    sb.append("    bathrooms: ").append(toIndentedString(bathrooms)).append("\n");
    sb.append("    bedrooms: ").append(toIndentedString(bedrooms)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSaleDate: ").append(toIndentedString(lastSaleDate)).append("\n");
    sb.append("    lastSalePrice: ").append(toIndentedString(lastSalePrice)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    legalDescription: ").append(toIndentedString(legalDescription)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    lotSize: ").append(toIndentedString(lotSize)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    ownerOccupied: ").append(toIndentedString(ownerOccupied)).append("\n");
    sb.append("    propertyTaxes: ").append(toIndentedString(propertyTaxes)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("    squareFootage: ").append(toIndentedString(squareFootage)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subdivision: ").append(toIndentedString(subdivision)).append("\n");
    sb.append("    taxAssessments: ").append(toIndentedString(taxAssessments)).append("\n");
    sb.append("    yearBuilt: ").append(toIndentedString(yearBuilt)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    zoning: ").append(toIndentedString(zoning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressLine1");
    openapiFields.add("assessorID");
    openapiFields.add("bathrooms");
    openapiFields.add("bedrooms");
    openapiFields.add("city");
    openapiFields.add("county");
    openapiFields.add("features");
    openapiFields.add("formattedAddress");
    openapiFields.add("id");
    openapiFields.add("lastSaleDate");
    openapiFields.add("lastSalePrice");
    openapiFields.add("latitude");
    openapiFields.add("legalDescription");
    openapiFields.add("longitude");
    openapiFields.add("lotSize");
    openapiFields.add("owner");
    openapiFields.add("ownerOccupied");
    openapiFields.add("propertyTaxes");
    openapiFields.add("propertyType");
    openapiFields.add("squareFootage");
    openapiFields.add("state");
    openapiFields.add("subdivision");
    openapiFields.add("taxAssessments");
    openapiFields.add("yearBuilt");
    openapiFields.add("zipCode");
    openapiFields.add("zoning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyRecords200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyRecords200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyRecords200ResponseInner is not found in the empty JSON string", PropertyRecords200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyRecords200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyRecords200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("assessorID") != null && !jsonObj.get("assessorID").isJsonNull()) && !jsonObj.get("assessorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessorID").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        PropertyRecords200ResponseInnerFeatures.validateJsonElement(jsonObj.get("features"));
      }
      if ((jsonObj.get("formattedAddress") != null && !jsonObj.get("formattedAddress").isJsonNull()) && !jsonObj.get("formattedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedAddress").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastSaleDate") != null && !jsonObj.get("lastSaleDate").isJsonNull()) && !jsonObj.get("lastSaleDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSaleDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSaleDate").toString()));
      }
      if ((jsonObj.get("legalDescription") != null && !jsonObj.get("legalDescription").isJsonNull()) && !jsonObj.get("legalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalDescription").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        PropertyRecords200ResponseInnerOwner.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `propertyTaxes`
      if (jsonObj.get("propertyTaxes") != null && !jsonObj.get("propertyTaxes").isJsonNull()) {
        PropertyRecords200ResponseInnerPropertyTaxes.validateJsonElement(jsonObj.get("propertyTaxes"));
      }
      if ((jsonObj.get("propertyType") != null && !jsonObj.get("propertyType").isJsonNull()) && !jsonObj.get("propertyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyType").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("subdivision") != null && !jsonObj.get("subdivision").isJsonNull()) && !jsonObj.get("subdivision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdivision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdivision").toString()));
      }
      // validate the optional field `taxAssessments`
      if (jsonObj.get("taxAssessments") != null && !jsonObj.get("taxAssessments").isJsonNull()) {
        PropertyRecords200ResponseInnerTaxAssessments.validateJsonElement(jsonObj.get("taxAssessments"));
      }
      if ((jsonObj.get("zipCode") != null && !jsonObj.get("zipCode").isJsonNull()) && !jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
      if ((jsonObj.get("zoning") != null && !jsonObj.get("zoning").isJsonNull()) && !jsonObj.get("zoning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoning").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyRecords200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyRecords200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyRecords200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyRecords200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyRecords200ResponseInner>() {
           @Override
           public void write(JsonWriter out, PropertyRecords200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyRecords200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyRecords200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyRecords200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to PropertyRecords200ResponseInner
   */
  public static PropertyRecords200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyRecords200ResponseInner.class);
  }

  /**
   * Convert an instance of PropertyRecords200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

