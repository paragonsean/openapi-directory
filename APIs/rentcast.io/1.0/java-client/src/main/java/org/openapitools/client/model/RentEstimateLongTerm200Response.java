/*
 * RentCast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RentEstimateLongTerm200ResponseComparablesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RentEstimateLongTerm200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:12.015833-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RentEstimateLongTerm200Response {
  public static final String SERIALIZED_NAME_COMPARABLES = "comparables";
  @SerializedName(SERIALIZED_NAME_COMPARABLES)
  private List<RentEstimateLongTerm200ResponseComparablesInner> comparables = new ArrayList<>();

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude = new BigDecimal("0");

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude = new BigDecimal("0");

  public static final String SERIALIZED_NAME_RENT = "rent";
  @SerializedName(SERIALIZED_NAME_RENT)
  private Integer rent = 0;

  public static final String SERIALIZED_NAME_RENT_RANGE_HIGH = "rentRangeHigh";
  @SerializedName(SERIALIZED_NAME_RENT_RANGE_HIGH)
  private Integer rentRangeHigh = 0;

  public static final String SERIALIZED_NAME_RENT_RANGE_LOW = "rentRangeLow";
  @SerializedName(SERIALIZED_NAME_RENT_RANGE_LOW)
  private Integer rentRangeLow = 0;

  public RentEstimateLongTerm200Response() {
  }

  public RentEstimateLongTerm200Response comparables(List<RentEstimateLongTerm200ResponseComparablesInner> comparables) {
    this.comparables = comparables;
    return this;
  }

  public RentEstimateLongTerm200Response addComparablesItem(RentEstimateLongTerm200ResponseComparablesInner comparablesItem) {
    if (this.comparables == null) {
      this.comparables = new ArrayList<>();
    }
    this.comparables.add(comparablesItem);
    return this;
  }

  /**
   * Get comparables
   * @return comparables
   */
  @javax.annotation.Nullable
  public List<RentEstimateLongTerm200ResponseComparablesInner> getComparables() {
    return comparables;
  }

  public void setComparables(List<RentEstimateLongTerm200ResponseComparablesInner> comparables) {
    this.comparables = comparables;
  }


  public RentEstimateLongTerm200Response latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public RentEstimateLongTerm200Response longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public RentEstimateLongTerm200Response rent(Integer rent) {
    this.rent = rent;
    return this;
  }

  /**
   * Get rent
   * @return rent
   */
  @javax.annotation.Nullable
  public Integer getRent() {
    return rent;
  }

  public void setRent(Integer rent) {
    this.rent = rent;
  }


  public RentEstimateLongTerm200Response rentRangeHigh(Integer rentRangeHigh) {
    this.rentRangeHigh = rentRangeHigh;
    return this;
  }

  /**
   * Get rentRangeHigh
   * @return rentRangeHigh
   */
  @javax.annotation.Nullable
  public Integer getRentRangeHigh() {
    return rentRangeHigh;
  }

  public void setRentRangeHigh(Integer rentRangeHigh) {
    this.rentRangeHigh = rentRangeHigh;
  }


  public RentEstimateLongTerm200Response rentRangeLow(Integer rentRangeLow) {
    this.rentRangeLow = rentRangeLow;
    return this;
  }

  /**
   * Get rentRangeLow
   * @return rentRangeLow
   */
  @javax.annotation.Nullable
  public Integer getRentRangeLow() {
    return rentRangeLow;
  }

  public void setRentRangeLow(Integer rentRangeLow) {
    this.rentRangeLow = rentRangeLow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RentEstimateLongTerm200Response rentEstimateLongTerm200Response = (RentEstimateLongTerm200Response) o;
    return Objects.equals(this.comparables, rentEstimateLongTerm200Response.comparables) &&
        Objects.equals(this.latitude, rentEstimateLongTerm200Response.latitude) &&
        Objects.equals(this.longitude, rentEstimateLongTerm200Response.longitude) &&
        Objects.equals(this.rent, rentEstimateLongTerm200Response.rent) &&
        Objects.equals(this.rentRangeHigh, rentEstimateLongTerm200Response.rentRangeHigh) &&
        Objects.equals(this.rentRangeLow, rentEstimateLongTerm200Response.rentRangeLow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparables, latitude, longitude, rent, rentRangeHigh, rentRangeLow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RentEstimateLongTerm200Response {\n");
    sb.append("    comparables: ").append(toIndentedString(comparables)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    rent: ").append(toIndentedString(rent)).append("\n");
    sb.append("    rentRangeHigh: ").append(toIndentedString(rentRangeHigh)).append("\n");
    sb.append("    rentRangeLow: ").append(toIndentedString(rentRangeLow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparables");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("rent");
    openapiFields.add("rentRangeHigh");
    openapiFields.add("rentRangeLow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RentEstimateLongTerm200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RentEstimateLongTerm200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RentEstimateLongTerm200Response is not found in the empty JSON string", RentEstimateLongTerm200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RentEstimateLongTerm200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RentEstimateLongTerm200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("comparables") != null && !jsonObj.get("comparables").isJsonNull()) {
        JsonArray jsonArraycomparables = jsonObj.getAsJsonArray("comparables");
        if (jsonArraycomparables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("comparables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `comparables` to be an array in the JSON string but got `%s`", jsonObj.get("comparables").toString()));
          }

          // validate the optional field `comparables` (array)
          for (int i = 0; i < jsonArraycomparables.size(); i++) {
            RentEstimateLongTerm200ResponseComparablesInner.validateJsonElement(jsonArraycomparables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RentEstimateLongTerm200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RentEstimateLongTerm200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RentEstimateLongTerm200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RentEstimateLongTerm200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RentEstimateLongTerm200Response>() {
           @Override
           public void write(JsonWriter out, RentEstimateLongTerm200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RentEstimateLongTerm200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RentEstimateLongTerm200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RentEstimateLongTerm200Response
   * @throws IOException if the JSON string is invalid with respect to RentEstimateLongTerm200Response
   */
  public static RentEstimateLongTerm200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RentEstimateLongTerm200Response.class);
  }

  /**
   * Convert an instance of RentEstimateLongTerm200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

