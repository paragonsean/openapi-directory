/**
 * BikeWise API v2
 * <p>This is an API for accessing information about bicycling related incidents. You can find the source code on <a href=\"https://github.com/bikeindex/bikewise\">GitHub</a>.</p> 
 *
 * The version of the OpenAPI document: v2
 * Contact: support@bikeindex.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Locations service.
* @module api/LocationsApi
* @version v2
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETVersionLocationsFormat operation.
     * @callback module:api/LocationsApi~gETVersionLocationsFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpaginated geojson response
     * <p><strong>This endpoint behaves exactly like</strong> <code>incidents</code>, but returns a valid geojson <code>FeatureCollection</code> that looks like this:</p>  <pre><code>{   type: \"FeatureCollection\",   features: [     {       type: \"Feature\",       properties: {       id: 4474199,       type: \"Theft\",       occurred_at: 1428536937     },       geometry: {       type: \"Point\",       coordinates: [ -122.6244177, 45.5164386 ]     }   } } </code></pre>  <p>It doesn’t paginate. If you pass the <code>all</code> parameter it returns all matches (which can be big, &gt; 4mb), otherwise it returns the 100 most recent.</p>  <p><strong>Go forth and make maps!</strong></p> 
     * @param {Object} opts Optional parameters
     * @param {Number} [occurredBefore] <p>End of period</p> 
     * @param {Number} [occurredAfter] <p>Start of period</p> 
     * @param {module:model/String} [incidentType] <p>Only incidents of specific type</p> 
     * @param {String} [proximity] <p>Center of location for proximity search</p> 
     * @param {Number} [proximitySquare = 100)] <p>Size of the proximity search</p> 
     * @param {String} [query] <p>Full text search of incidents</p> 
     * @param {Number} [limit] <p>Max number of results to return. Defaults to 100</p> 
     * @param {Boolean} [all] <p>Give ‘em all to me. Will ignore limit</p> 
     * @param {module:api/LocationsApi~gETVersionLocationsFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETVersionLocationsFormat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'occurred_before': opts['occurredBefore'],
        'occurred_after': opts['occurredAfter'],
        'incident_type': opts['incidentType'],
        'proximity': opts['proximity'],
        'proximity_square': opts['proximitySquare'],
        'query': opts['query'],
        'limit': opts['limit'],
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVersionLocationsMarkersFormat operation.
     * @callback module:api/LocationsApi~gETVersionLocationsMarkersFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpaginated geojson response with simplestyled markers
     * <p>This behaves exactly like the root <code>locations</code> endpoint, but returns <a href=\"https://github.com/mapbox/simplestyle-spec\">simplestyled markers</a> (<a href=\"https://www.mapbox.com/guides/markers/#simple-style\">mapbox styled markers</a>)</p>  <p><strong>Go forth and make maps!</strong></p> 
     * @param {Object} opts Optional parameters
     * @param {Number} [occurredBefore] <p>End of period</p> 
     * @param {Number} [occurredAfter] <p>Start of period</p> 
     * @param {module:model/String} [incidentType] <p>Only incidents of specific type</p> 
     * @param {String} [proximity] <p>Center of location for proximity search</p> 
     * @param {Number} [proximitySquare = 100)] <p>Size of the proximity search</p> 
     * @param {String} [query] <p>Full text search of incidents</p> 
     * @param {Number} [limit] <p>Max number of results to return. Defaults to 100</p> 
     * @param {Boolean} [all] <p>Give ‘em all to me. Will ignore limit</p> 
     * @param {module:api/LocationsApi~gETVersionLocationsMarkersFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETVersionLocationsMarkersFormat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'occurred_before': opts['occurredBefore'],
        'occurred_after': opts['occurredAfter'],
        'incident_type': opts['incidentType'],
        'proximity': opts['proximity'],
        'proximity_square': opts['proximitySquare'],
        'query': opts['query'],
        'limit': opts['limit'],
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/locations/markers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
