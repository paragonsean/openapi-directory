/**
 * BikeWise API v2
 * <p>This is an API for accessing information about bicycling related incidents. You can find the source code on <a href=\"https://github.com/bikeindex/bikewise\">GitHub</a>.</p> 
 *
 * The version of the OpenAPI document: v2
 * Contact: support@bikeindex.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Incidents service.
* @module api/IncidentsApi
* @version v2
*/
export default class IncidentsApi {

    /**
    * Constructs a new IncidentsApi. 
    * @alias module:api/IncidentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETVersionIncidentsFormat operation.
     * @callback module:api/IncidentsApi~gETVersionIncidentsFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated incidents matching parameters
     *  <p>If youâ€™d like more detailed information about bike incidents, use this endpoint. For mapping, <code>locations</code> is probably a better bet.</p>  <p><strong>Notes on location searching</strong>: <br /> - <code>proximity</code> accepts an ip address, an address, zipcode, city, or latitude,longitude - i.e. <code>70.210.133.87</code>, <code>210 NW 11th Ave, Portland, OR</code>, <code>60647</code>, <code>Chicago, IL</code>, and <code>45.521728,-122.67326</code> are all acceptable<br /> - <code>proximity_square</code> sets the length of the sides of the square to find matches inside of. The square is centered on the location specified by <code>proximity</code>. It defaults to 100.</p> 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] <p>Page of results to fetch.</p> 
     * @param {Number} [perPage] <p>Number of results to return per page.</p> 
     * @param {Number} [occurredBefore] <p>End of period</p> 
     * @param {Number} [occurredAfter] <p>Start of period</p> 
     * @param {module:model/String} [incidentType] <p>Only incidents of specific type</p> 
     * @param {String} [proximity] <p>Center of location for proximity search</p> 
     * @param {Number} [proximitySquare = 100)] <p>Size of the proximity search</p> 
     * @param {String} [query] <p>Full text search of incidents</p> 
     * @param {module:api/IncidentsApi~gETVersionIncidentsFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETVersionIncidentsFormat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'occurred_before': opts['occurredBefore'],
        'occurred_after': opts['occurredAfter'],
        'incident_type': opts['incidentType'],
        'proximity': opts['proximity'],
        'proximity_square': opts['proximitySquare'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/incidents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVersionIncidentsIdFormat operation.
     * @callback module:api/IncidentsApi~gETVersionIncidentsIdFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id <p>Incident ID</p> 
     * @param {module:api/IncidentsApi~gETVersionIncidentsIdFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETVersionIncidentsIdFormat(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gETVersionIncidentsIdFormat");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/incidents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
