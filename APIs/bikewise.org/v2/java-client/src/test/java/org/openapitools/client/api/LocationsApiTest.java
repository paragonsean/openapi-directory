/*
 * BikeWise API v2
 * <p>This is an API for accessing information about bicycling related incidents. You can find the source code on <a href=\"https://github.com/bikeindex/bikewise\">GitHub</a>.</p> 
 *
 * The version of the OpenAPI document: v2
 * Contact: support@bikeindex.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private final LocationsApi api = new LocationsApi();

    /**
     * Unpaginated geojson response
     *
     * &lt;p&gt;&lt;strong&gt;This endpoint behaves exactly like&lt;/strong&gt; &lt;code&gt;incidents&lt;/code&gt;, but returns a valid geojson &lt;code&gt;FeatureCollection&lt;/code&gt; that looks like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;{   type: \&quot;FeatureCollection\&quot;,   features: [     {       type: \&quot;Feature\&quot;,       properties: {       id: 4474199,       type: \&quot;Theft\&quot;,       occurred_at: 1428536937     },       geometry: {       type: \&quot;Point\&quot;,       coordinates: [ -122.6244177, 45.5164386 ]     }   } } &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;It doesnâ€™t paginate. If you pass the &lt;code&gt;all&lt;/code&gt; parameter it returns all matches (which can be big, &amp;gt; 4mb), otherwise it returns the 100 most recent.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETVersionLocationsFormatTest() throws ApiException {
        Integer occurredBefore = null;
        Integer occurredAfter = null;
        String incidentType = null;
        String proximity = null;
        Integer proximitySquare = null;
        String query = null;
        Integer limit = null;
        Boolean all = null;
        api.gETVersionLocationsFormat(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all);
        // TODO: test validations
    }

    /**
     * Unpaginated geojson response with simplestyled markers
     *
     * &lt;p&gt;This behaves exactly like the root &lt;code&gt;locations&lt;/code&gt; endpoint, but returns &lt;a href&#x3D;\&quot;https://github.com/mapbox/simplestyle-spec\&quot;&gt;simplestyled markers&lt;/a&gt; (&lt;a href&#x3D;\&quot;https://www.mapbox.com/guides/markers/#simple-style\&quot;&gt;mapbox styled markers&lt;/a&gt;)&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETVersionLocationsMarkersFormatTest() throws ApiException {
        Integer occurredBefore = null;
        Integer occurredAfter = null;
        String incidentType = null;
        String proximity = null;
        Integer proximitySquare = null;
        String query = null;
        Integer limit = null;
        Boolean all = null;
        api.gETVersionLocationsMarkersFormat(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all);
        // TODO: test validations
    }

}
