/*
 * BikeWise API v2
 * <p>This is an API for accessing information about bicycling related incidents. You can find the source code on <a href=\"https://github.com/bikeindex/bikewise\">GitHub</a>.</p> 
 *
 * The version of the OpenAPI document: v2
 * Contact: support@bikeindex.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETVersionLocationsFormat
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETVersionLocationsFormatCall(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurredBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurred_before", occurredBefore));
        }

        if (occurredAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurred_after", occurredAfter));
        }

        if (incidentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("incident_type", incidentType));
        }

        if (proximity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proximity", proximity));
        }

        if (proximitySquare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proximity_square", proximitySquare));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETVersionLocationsFormatValidateBeforeCall(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all, final ApiCallback _callback) throws ApiException {
        return gETVersionLocationsFormatCall(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all, _callback);

    }

    /**
     * Unpaginated geojson response
     * &lt;p&gt;&lt;strong&gt;This endpoint behaves exactly like&lt;/strong&gt; &lt;code&gt;incidents&lt;/code&gt;, but returns a valid geojson &lt;code&gt;FeatureCollection&lt;/code&gt; that looks like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;{   type: \&quot;FeatureCollection\&quot;,   features: [     {       type: \&quot;Feature\&quot;,       properties: {       id: 4474199,       type: \&quot;Theft\&quot;,       occurred_at: 1428536937     },       geometry: {       type: \&quot;Point\&quot;,       coordinates: [ -122.6244177, 45.5164386 ]     }   } } &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;It doesn’t paginate. If you pass the &lt;code&gt;all&lt;/code&gt; parameter it returns all matches (which can be big, &amp;gt; 4mb), otherwise it returns the 100 most recent.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void gETVersionLocationsFormat(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all) throws ApiException {
        gETVersionLocationsFormatWithHttpInfo(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all);
    }

    /**
     * Unpaginated geojson response
     * &lt;p&gt;&lt;strong&gt;This endpoint behaves exactly like&lt;/strong&gt; &lt;code&gt;incidents&lt;/code&gt;, but returns a valid geojson &lt;code&gt;FeatureCollection&lt;/code&gt; that looks like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;{   type: \&quot;FeatureCollection\&quot;,   features: [     {       type: \&quot;Feature\&quot;,       properties: {       id: 4474199,       type: \&quot;Theft\&quot;,       occurred_at: 1428536937     },       geometry: {       type: \&quot;Point\&quot;,       coordinates: [ -122.6244177, 45.5164386 ]     }   } } &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;It doesn’t paginate. If you pass the &lt;code&gt;all&lt;/code&gt; parameter it returns all matches (which can be big, &amp;gt; 4mb), otherwise it returns the 100 most recent.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETVersionLocationsFormatWithHttpInfo(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all) throws ApiException {
        okhttp3.Call localVarCall = gETVersionLocationsFormatValidateBeforeCall(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unpaginated geojson response (asynchronously)
     * &lt;p&gt;&lt;strong&gt;This endpoint behaves exactly like&lt;/strong&gt; &lt;code&gt;incidents&lt;/code&gt;, but returns a valid geojson &lt;code&gt;FeatureCollection&lt;/code&gt; that looks like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;{   type: \&quot;FeatureCollection\&quot;,   features: [     {       type: \&quot;Feature\&quot;,       properties: {       id: 4474199,       type: \&quot;Theft\&quot;,       occurred_at: 1428536937     },       geometry: {       type: \&quot;Point\&quot;,       coordinates: [ -122.6244177, 45.5164386 ]     }   } } &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;It doesn’t paginate. If you pass the &lt;code&gt;all&lt;/code&gt; parameter it returns all matches (which can be big, &amp;gt; 4mb), otherwise it returns the 100 most recent.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETVersionLocationsFormatAsync(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETVersionLocationsFormatValidateBeforeCall(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETVersionLocationsMarkersFormat
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETVersionLocationsMarkersFormatCall(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/markers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (occurredBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurred_before", occurredBefore));
        }

        if (occurredAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occurred_after", occurredAfter));
        }

        if (incidentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("incident_type", incidentType));
        }

        if (proximity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proximity", proximity));
        }

        if (proximitySquare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proximity_square", proximitySquare));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETVersionLocationsMarkersFormatValidateBeforeCall(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all, final ApiCallback _callback) throws ApiException {
        return gETVersionLocationsMarkersFormatCall(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all, _callback);

    }

    /**
     * Unpaginated geojson response with simplestyled markers
     * &lt;p&gt;This behaves exactly like the root &lt;code&gt;locations&lt;/code&gt; endpoint, but returns &lt;a href&#x3D;\&quot;https://github.com/mapbox/simplestyle-spec\&quot;&gt;simplestyled markers&lt;/a&gt; (&lt;a href&#x3D;\&quot;https://www.mapbox.com/guides/markers/#simple-style\&quot;&gt;mapbox styled markers&lt;/a&gt;)&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void gETVersionLocationsMarkersFormat(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all) throws ApiException {
        gETVersionLocationsMarkersFormatWithHttpInfo(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all);
    }

    /**
     * Unpaginated geojson response with simplestyled markers
     * &lt;p&gt;This behaves exactly like the root &lt;code&gt;locations&lt;/code&gt; endpoint, but returns &lt;a href&#x3D;\&quot;https://github.com/mapbox/simplestyle-spec\&quot;&gt;simplestyled markers&lt;/a&gt; (&lt;a href&#x3D;\&quot;https://www.mapbox.com/guides/markers/#simple-style\&quot;&gt;mapbox styled markers&lt;/a&gt;)&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETVersionLocationsMarkersFormatWithHttpInfo(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all) throws ApiException {
        okhttp3.Call localVarCall = gETVersionLocationsMarkersFormatValidateBeforeCall(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unpaginated geojson response with simplestyled markers (asynchronously)
     * &lt;p&gt;This behaves exactly like the root &lt;code&gt;locations&lt;/code&gt; endpoint, but returns &lt;a href&#x3D;\&quot;https://github.com/mapbox/simplestyle-spec\&quot;&gt;simplestyled markers&lt;/a&gt; (&lt;a href&#x3D;\&quot;https://www.mapbox.com/guides/markers/#simple-style\&quot;&gt;mapbox styled markers&lt;/a&gt;)&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Go forth and make maps!&lt;/strong&gt;&lt;/p&gt; 
     * @param occurredBefore &lt;p&gt;End of period&lt;/p&gt;  (optional)
     * @param occurredAfter &lt;p&gt;Start of period&lt;/p&gt;  (optional)
     * @param incidentType &lt;p&gt;Only incidents of specific type&lt;/p&gt;  (optional)
     * @param proximity &lt;p&gt;Center of location for proximity search&lt;/p&gt;  (optional)
     * @param proximitySquare &lt;p&gt;Size of the proximity search&lt;/p&gt;  (optional, default to 100)
     * @param query &lt;p&gt;Full text search of incidents&lt;/p&gt;  (optional)
     * @param limit &lt;p&gt;Max number of results to return. Defaults to 100&lt;/p&gt;  (optional)
     * @param all &lt;p&gt;Give ‘em all to me. Will ignore limit&lt;/p&gt;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETVersionLocationsMarkersFormatAsync(Integer occurredBefore, Integer occurredAfter, String incidentType, String proximity, Integer proximitySquare, String query, Integer limit, Boolean all, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETVersionLocationsMarkersFormatValidateBeforeCall(occurredBefore, occurredAfter, incidentType, proximity, proximitySquare, query, limit, all, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
