/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndUserPing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndUserPing::OAIEndUserPing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndUserPing::OAIEndUserPing() {
    this->initializeModel();
}

OAIEndUserPing::~OAIEndUserPing() {}

void OAIEndUserPing::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_return_url_isSet = false;
    m_return_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEndUserPing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndUserPing::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_return_url_isValid = ::OpenAPI::fromJsonValue(m_return_url, json[QString("return_url")]);
    m_return_url_isSet = !json[QString("return_url")].isNull() && m_return_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEndUserPing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndUserPing::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_return_url_isSet) {
        obj.insert(QString("return_url"), ::OpenAPI::toJsonValue(m_return_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIAccountWithTags OAIEndUserPing::getAccount() const {
    return m_account;
}
void OAIEndUserPing::setAccount(const OAIAccountWithTags &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIEndUserPing::is_account_Set() const{
    return m_account_isSet;
}

bool OAIEndUserPing::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIEndUserPing::getReturnUrl() const {
    return m_return_url;
}
void OAIEndUserPing::setReturnUrl(const QString &return_url) {
    m_return_url = return_url;
    m_return_url_isSet = true;
}

bool OAIEndUserPing::is_return_url_Set() const{
    return m_return_url_isSet;
}

bool OAIEndUserPing::is_return_url_Valid() const{
    return m_return_url_isValid;
}

OAIEndUserPing_user OAIEndUserPing::getUser() const {
    return m_user;
}
void OAIEndUserPing::setUser(const OAIEndUserPing_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEndUserPing::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEndUserPing::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEndUserPing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndUserPing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
