/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_users__id__put_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_users__id__put_request::OAI_users__id__put_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_users__id__put_request::OAI_users__id__put_request() {
    this->initializeModel();
}

OAI_users__id__put_request::~OAI_users__id__put_request() {}

void OAI_users__id__put_request::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_group_id_isSet = false;
    m_permission_group_id_isValid = false;
}

void OAI_users__id__put_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_users__id__put_request::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_group_id_isValid = ::OpenAPI::fromJsonValue(m_permission_group_id, json[QString("permission_group_id")]);
    m_permission_group_id_isSet = !json[QString("permission_group_id")].isNull() && m_permission_group_id_isValid;
}

QString OAI_users__id__put_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_users__id__put_request::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_group_id_isSet) {
        obj.insert(QString("permission_group_id"), ::OpenAPI::toJsonValue(m_permission_group_id));
    }
    return obj;
}

QString OAI_users__id__put_request::getEmail() const {
    return m_email;
}
void OAI_users__id__put_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAI_users__id__put_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAI_users__id__put_request::is_email_Valid() const{
    return m_email_isValid;
}

QString OAI_users__id__put_request::getExternalId() const {
    return m_external_id;
}
void OAI_users__id__put_request::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAI_users__id__put_request::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAI_users__id__put_request::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAI_users__id__put_request::getName() const {
    return m_name;
}
void OAI_users__id__put_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_users__id__put_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_users__id__put_request::is_name_Valid() const{
    return m_name_isValid;
}

double OAI_users__id__put_request::getPermissionGroupId() const {
    return m_permission_group_id;
}
void OAI_users__id__put_request::setPermissionGroupId(const double &permission_group_id) {
    m_permission_group_id = permission_group_id;
    m_permission_group_id_isSet = true;
}

bool OAI_users__id__put_request::is_permission_group_id_Set() const{
    return m_permission_group_id_isSet;
}

bool OAI_users__id__put_request::is_permission_group_id_Valid() const{
    return m_permission_group_id_isValid;
}

bool OAI_users__id__put_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_users__id__put_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
