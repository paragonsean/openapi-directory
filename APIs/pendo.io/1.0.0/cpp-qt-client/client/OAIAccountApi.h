/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIObject.h"
#include "OAI_accounts__id__put_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit double [optional]
    * @param[in]  start double [optional]
    * @param[in]  order_dir QString [optional]
    * @param[in]  order_by QString [optional]
    */
    virtual void accountsGet(const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &order_dir = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id double [required]
    */
    virtual void accountsIdDelete(const double &id);

    /**
    * @param[in]  id double [required]
    */
    virtual void accountsIdGet(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  account OAI_accounts__id__put_request [optional]
    */
    virtual void accountsIdPut(const double &id, const ::OpenAPI::OptionalParam<OAI_accounts__id__put_request> &account = ::OpenAPI::OptionalParam<OAI_accounts__id__put_request>());

    /**
    * @param[in]  id double [required]
    */
    virtual void accountsIdTagsDelete(const double &id);

    /**
    * @param[in]  id double [required]
    */
    virtual void accountsIdTagsGet(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  tags OAIObject [required]
    */
    virtual void accountsIdTagsPost(const double &id, const OAIObject &tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsGetCallback(OAIHttpRequestWorker *worker);
    void accountsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void accountsIdGetCallback(OAIHttpRequestWorker *worker);
    void accountsIdPutCallback(OAIHttpRequestWorker *worker);
    void accountsIdTagsDeleteCallback(OAIHttpRequestWorker *worker);
    void accountsIdTagsGetCallback(OAIHttpRequestWorker *worker);
    void accountsIdTagsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsGetSignal(QList<OAIAccount> summary);
    void accountsIdDeleteSignal(OAIAccount summary);
    void accountsIdGetSignal(OAIAccount summary);
    void accountsIdPutSignal();
    void accountsIdTagsDeleteSignal();
    void accountsIdTagsGetSignal();
    void accountsIdTagsPostSignal();


    void accountsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void accountsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void accountsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void accountsIdPutSignalFull(OAIHttpRequestWorker *worker);
    void accountsIdTagsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accountsIdTagsGetSignalFull(OAIHttpRequestWorker *worker);
    void accountsIdTagsPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use accountsGetSignalError() instead")
    void accountsGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdDeleteSignalError() instead")
    void accountsIdDeleteSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdDeleteSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdGetSignalError() instead")
    void accountsIdGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdPutSignalError() instead")
    void accountsIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdTagsDeleteSignalError() instead")
    void accountsIdTagsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTagsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdTagsGetSignalError() instead")
    void accountsIdTagsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTagsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdTagsPostSignalError() instead")
    void accountsIdTagsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTagsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsGetSignalErrorFull() instead")
    void accountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdDeleteSignalErrorFull() instead")
    void accountsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdGetSignalErrorFull() instead")
    void accountsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdPutSignalErrorFull() instead")
    void accountsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdTagsDeleteSignalErrorFull() instead")
    void accountsIdTagsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTagsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdTagsGetSignalErrorFull() instead")
    void accountsIdTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdTagsPostSignalErrorFull() instead")
    void accountsIdTagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
