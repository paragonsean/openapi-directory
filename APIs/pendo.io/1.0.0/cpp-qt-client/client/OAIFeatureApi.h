/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeatureApi_H
#define OAI_OAIFeatureApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFeature.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeatureApi : public QObject {
    Q_OBJECT

public:
    OAIFeatureApi(const int timeOut = 0);
    ~OAIFeatureApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit double [optional]
    * @param[in]  start double [optional]
    * @param[in]  order_dir QString [optional]
    * @param[in]  is_private bool [optional]
    * @param[in]  wanted_by qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  products QString [optional]
    */
    virtual void featuresGet(const ::OpenAPI::OptionalParam<double> &limit = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &order_dir = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &wanted_by = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &products = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void featuresIdGet(const qint32 &id);

    /**
    * @param[in]  id double [required]
    */
    virtual void featuresIdTagsDelete(const double &id);

    /**
    * @param[in]  id double [required]
    */
    virtual void featuresIdTagsGet(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  tags OAIObject [required]
    */
    virtual void featuresIdTagsPost(const double &id, const OAIObject &tags);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  q QString [required]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  products QString [optional]
    */
    virtual void searchGet(const QString &scope, const QString &q, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &products = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void featuresGetCallback(OAIHttpRequestWorker *worker);
    void featuresIdGetCallback(OAIHttpRequestWorker *worker);
    void featuresIdTagsDeleteCallback(OAIHttpRequestWorker *worker);
    void featuresIdTagsGetCallback(OAIHttpRequestWorker *worker);
    void featuresIdTagsPostCallback(OAIHttpRequestWorker *worker);
    void searchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void featuresGetSignal(QList<OAIFeature> summary);
    void featuresIdGetSignal(OAIFeature summary);
    void featuresIdTagsDeleteSignal();
    void featuresIdTagsGetSignal();
    void featuresIdTagsPostSignal();
    void searchGetSignal(QList<OAIFeature> summary);


    void featuresGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeature> summary);
    void featuresIdGetSignalFull(OAIHttpRequestWorker *worker, OAIFeature summary);
    void featuresIdTagsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void featuresIdTagsGetSignalFull(OAIHttpRequestWorker *worker);
    void featuresIdTagsPostSignalFull(OAIHttpRequestWorker *worker);
    void searchGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeature> summary);

    Q_DECL_DEPRECATED_X("Use featuresGetSignalError() instead")
    void featuresGetSignalE(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresGetSignalError(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdGetSignalError() instead")
    void featuresIdGetSignalE(OAIFeature summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdGetSignalError(OAIFeature summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdTagsDeleteSignalError() instead")
    void featuresIdTagsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdTagsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdTagsGetSignalError() instead")
    void featuresIdTagsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdTagsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdTagsPostSignalError() instead")
    void featuresIdTagsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdTagsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGetSignalError() instead")
    void searchGetSignalE(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGetSignalError(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use featuresGetSignalErrorFull() instead")
    void featuresGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdGetSignalErrorFull() instead")
    void featuresIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdTagsDeleteSignalErrorFull() instead")
    void featuresIdTagsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdTagsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdTagsGetSignalErrorFull() instead")
    void featuresIdTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresIdTagsPostSignalErrorFull() instead")
    void featuresIdTagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresIdTagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGetSignalErrorFull() instead")
    void searchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
