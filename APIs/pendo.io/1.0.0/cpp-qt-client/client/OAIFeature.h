/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeature.h
 *
 * 
 */

#ifndef OAIFeature_H
#define OAIFeature_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFeature : public OAIObject {
public:
    OAIFeature();
    OAIFeature(QString json);
    ~OAIFeature() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppUrl() const;
    void setAppUrl(const QString &app_url);
    bool is_app_url_Set() const;
    bool is_app_url_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    qint32 getCreatedByUserId() const;
    void setCreatedByUserId(const qint32 &created_by_user_id);
    bool is_created_by_user_id_Set() const;
    bool is_created_by_user_id_Valid() const;

    QString getDeclinedAt() const;
    void setDeclinedAt(const QString &declined_at);
    bool is_declined_at_Set() const;
    bool is_declined_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDevelopingAt() const;
    void setDevelopingAt(const QString &developing_at);
    bool is_developing_at_Set() const;
    bool is_developing_at_Valid() const;

    qint32 getEffort() const;
    void setEffort(const qint32 &effort);
    bool is_effort_Set() const;
    bool is_effort_Valid() const;

    QString getFormEntry() const;
    void setFormEntry(const QString &form_entry);
    bool is_form_entry_Set() const;
    bool is_form_entry_Valid() const;

    double getId() const;
    void setId(const double &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    qint32 getMergedToFeatureId() const;
    void setMergedToFeatureId(const qint32 &merged_to_feature_id);
    bool is_merged_to_feature_id_Set() const;
    bool is_merged_to_feature_id_Valid() const;

    QString getPlannedAt() const;
    void setPlannedAt(const QString &planned_at);
    bool is_planned_at_Set() const;
    bool is_planned_at_Valid() const;

    QList<QString> getProducts() const;
    void setProducts(const QList<QString> &products);
    bool is_products_Set() const;
    bool is_products_Valid() const;

    QString getReleasedAt() const;
    void setReleasedAt(const QString &released_at);
    bool is_released_at_Set() const;
    bool is_released_at_Valid() const;

    QString getResolution() const;
    void setResolution(const QString &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    qint32 getResolvedByUserId() const;
    void setResolvedByUserId(const qint32 &resolved_by_user_id);
    bool is_resolved_by_user_id_Set() const;
    bool is_resolved_by_user_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusChangedAt() const;
    void setStatusChangedAt(const QString &status_changed_at);
    bool is_status_changed_at_Set() const;
    bool is_status_changed_at_Valid() const;

    OAIObject getTags() const;
    void setTags(const OAIObject &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    qint32 getUpdatedByUserId() const;
    void setUpdatedByUserId(const qint32 &updated_by_user_id);
    bool is_updated_by_user_id_Set() const;
    bool is_updated_by_user_id_Valid() const;

    QList<QString> getUploads() const;
    void setUploads(const QList<QString> &uploads);
    bool is_uploads_Set() const;
    bool is_uploads_Valid() const;

    qint32 getVendorId() const;
    void setVendorId(const qint32 &vendor_id);
    bool is_vendor_id_Set() const;
    bool is_vendor_id_Valid() const;

    qint32 getViewCount() const;
    void setViewCount(const qint32 &view_count);
    bool is_view_count_Set() const;
    bool is_view_count_Valid() const;

    QString getWaitingAt() const;
    void setWaitingAt(const QString &waiting_at);
    bool is_waiting_at_Set() const;
    bool is_waiting_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_url;
    bool m_app_url_isSet;
    bool m_app_url_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    qint32 m_created_by_user_id;
    bool m_created_by_user_id_isSet;
    bool m_created_by_user_id_isValid;

    QString m_declined_at;
    bool m_declined_at_isSet;
    bool m_declined_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_developing_at;
    bool m_developing_at_isSet;
    bool m_developing_at_isValid;

    qint32 m_effort;
    bool m_effort_isSet;
    bool m_effort_isValid;

    QString m_form_entry;
    bool m_form_entry_isSet;
    bool m_form_entry_isValid;

    double m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    qint32 m_merged_to_feature_id;
    bool m_merged_to_feature_id_isSet;
    bool m_merged_to_feature_id_isValid;

    QString m_planned_at;
    bool m_planned_at_isSet;
    bool m_planned_at_isValid;

    QList<QString> m_products;
    bool m_products_isSet;
    bool m_products_isValid;

    QString m_released_at;
    bool m_released_at_isSet;
    bool m_released_at_isValid;

    QString m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    qint32 m_resolved_by_user_id;
    bool m_resolved_by_user_id_isSet;
    bool m_resolved_by_user_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_changed_at;
    bool m_status_changed_at_isSet;
    bool m_status_changed_at_isValid;

    OAIObject m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    qint32 m_updated_by_user_id;
    bool m_updated_by_user_id_isSet;
    bool m_updated_by_user_id_isValid;

    QList<QString> m_uploads;
    bool m_uploads_isSet;
    bool m_uploads_isValid;

    qint32 m_vendor_id;
    bool m_vendor_id_isSet;
    bool m_vendor_id_isValid;

    qint32 m_view_count;
    bool m_view_count_isSet;
    bool m_view_count_isValid;

    QString m_waiting_at;
    bool m_waiting_at_isSet;
    bool m_waiting_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeature)

#endif // OAIFeature_H
