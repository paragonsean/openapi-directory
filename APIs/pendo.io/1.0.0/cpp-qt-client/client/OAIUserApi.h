/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndUserPing.h"
#include "OAIObject.h"
#include "OAIUser.h"
#include "OAI_users__id__put_request.h"
#include "OAI_users_invite_end_user_post_request.h"
#include "OAI_users_invite_vendor_user_post_request.h"
#include "OAI_vendor_users_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  role QString [required]
    * @param[in]  account qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_dir QString [optional]
    */
    virtual void usersGet(const QString &role, const ::OpenAPI::OptionalParam<qint32> &account = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_dir = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id double [required]
    */
    virtual void usersIdDelete(const double &id);

    /**
    * @param[in]  id double [required]
    */
    virtual void usersIdGet(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  user OAI_users__id__put_request [optional]
    */
    virtual void usersIdPut(const double &id, const ::OpenAPI::OptionalParam<OAI_users__id__put_request> &user = ::OpenAPI::OptionalParam<OAI_users__id__put_request>());

    /**
    * @param[in]  id double [required]
    */
    virtual void usersIdTagsDelete(const double &id);

    /**
    * @param[in]  id double [required]
    */
    virtual void usersIdTagsGet(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  tags OAIObject [required]
    */
    virtual void usersIdTagsPost(const double &id, const OAIObject &tags);

    /**
    * @param[in]  data OAI_users_invite_end_user_post_request [required]
    */
    virtual void usersInviteEndUserPost(const OAI_users_invite_end_user_post_request &data);

    /**
    * @param[in]  data OAI_users_invite_vendor_user_post_request [required]
    */
    virtual void usersInviteVendorUserPost(const OAI_users_invite_vendor_user_post_request &data);

    /**
    * @param[in]  data OAIEndUserPing [required]
    */
    virtual void usersPost(const OAIEndUserPing &data);

    /**
    * @param[in]  external_id QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  role QString [optional]
    */
    virtual void usersSearchGet(const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data OAI_vendor_users_post_request [required]
    */
    virtual void vendorUsersPost(const OAI_vendor_users_post_request &data);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersIdDeleteCallback(OAIHttpRequestWorker *worker);
    void usersIdGetCallback(OAIHttpRequestWorker *worker);
    void usersIdPutCallback(OAIHttpRequestWorker *worker);
    void usersIdTagsDeleteCallback(OAIHttpRequestWorker *worker);
    void usersIdTagsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdTagsPostCallback(OAIHttpRequestWorker *worker);
    void usersInviteEndUserPostCallback(OAIHttpRequestWorker *worker);
    void usersInviteVendorUserPostCallback(OAIHttpRequestWorker *worker);
    void usersPostCallback(OAIHttpRequestWorker *worker);
    void usersSearchGetCallback(OAIHttpRequestWorker *worker);
    void vendorUsersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersGetSignal(QList<OAIUser> summary);
    void usersIdDeleteSignal(OAIUser summary);
    void usersIdGetSignal(OAIUser summary);
    void usersIdPutSignal(OAIUser summary);
    void usersIdTagsDeleteSignal();
    void usersIdTagsGetSignal();
    void usersIdTagsPostSignal();
    void usersInviteEndUserPostSignal();
    void usersInviteVendorUserPostSignal();
    void usersPostSignal();
    void usersSearchGetSignal(OAIUser summary);
    void vendorUsersPostSignal();


    void usersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void usersIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersIdPutSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersIdTagsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersIdTagsGetSignalFull(OAIHttpRequestWorker *worker);
    void usersIdTagsPostSignalFull(OAIHttpRequestWorker *worker);
    void usersInviteEndUserPostSignalFull(OAIHttpRequestWorker *worker);
    void usersInviteVendorUserPostSignalFull(OAIHttpRequestWorker *worker);
    void usersPostSignalFull(OAIHttpRequestWorker *worker);
    void usersSearchGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void vendorUsersPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdDeleteSignalError() instead")
    void usersIdDeleteSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdDeleteSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdGetSignalError() instead")
    void usersIdGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdPutSignalError() instead")
    void usersIdPutSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdPutSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsDeleteSignalError() instead")
    void usersIdTagsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsGetSignalError() instead")
    void usersIdTagsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsPostSignalError() instead")
    void usersIdTagsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInviteEndUserPostSignalError() instead")
    void usersInviteEndUserPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersInviteEndUserPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInviteVendorUserPostSignalError() instead")
    void usersInviteVendorUserPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersInviteVendorUserPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalError() instead")
    void usersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSearchGetSignalError() instead")
    void usersSearchGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSearchGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorUsersPostSignalError() instead")
    void vendorUsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorUsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdDeleteSignalErrorFull() instead")
    void usersIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdGetSignalErrorFull() instead")
    void usersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdPutSignalErrorFull() instead")
    void usersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsDeleteSignalErrorFull() instead")
    void usersIdTagsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsGetSignalErrorFull() instead")
    void usersIdTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsPostSignalErrorFull() instead")
    void usersIdTagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInviteEndUserPostSignalErrorFull() instead")
    void usersInviteEndUserPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInviteEndUserPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInviteVendorUserPostSignalErrorFull() instead")
    void usersInviteVendorUserPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInviteVendorUserPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPostSignalErrorFull() instead")
    void usersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSearchGetSignalErrorFull() instead")
    void usersSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorUsersPostSignalErrorFull() instead")
    void vendorUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
