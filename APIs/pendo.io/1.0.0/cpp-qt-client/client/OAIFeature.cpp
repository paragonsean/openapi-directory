/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeature::OAIFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeature::OAIFeature() {
    this->initializeModel();
}

OAIFeature::~OAIFeature() {}

void OAIFeature::initializeModel() {

    m_app_url_isSet = false;
    m_app_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_user_id_isSet = false;
    m_created_by_user_id_isValid = false;

    m_declined_at_isSet = false;
    m_declined_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_developing_at_isSet = false;
    m_developing_at_isValid = false;

    m_effort_isSet = false;
    m_effort_isValid = false;

    m_form_entry_isSet = false;
    m_form_entry_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_merged_to_feature_id_isSet = false;
    m_merged_to_feature_id_isValid = false;

    m_planned_at_isSet = false;
    m_planned_at_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_released_at_isSet = false;
    m_released_at_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_resolved_by_user_id_isSet = false;
    m_resolved_by_user_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_changed_at_isSet = false;
    m_status_changed_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_user_id_isSet = false;
    m_updated_by_user_id_isValid = false;

    m_uploads_isSet = false;
    m_uploads_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;

    m_waiting_at_isSet = false;
    m_waiting_at_isValid = false;
}

void OAIFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeature::fromJsonObject(QJsonObject json) {

    m_app_url_isValid = ::OpenAPI::fromJsonValue(m_app_url, json[QString("app_url")]);
    m_app_url_isSet = !json[QString("app_url")].isNull() && m_app_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_user_id, json[QString("created_by_user_id")]);
    m_created_by_user_id_isSet = !json[QString("created_by_user_id")].isNull() && m_created_by_user_id_isValid;

    m_declined_at_isValid = ::OpenAPI::fromJsonValue(m_declined_at, json[QString("declined_at")]);
    m_declined_at_isSet = !json[QString("declined_at")].isNull() && m_declined_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_developing_at_isValid = ::OpenAPI::fromJsonValue(m_developing_at, json[QString("developing_at")]);
    m_developing_at_isSet = !json[QString("developing_at")].isNull() && m_developing_at_isValid;

    m_effort_isValid = ::OpenAPI::fromJsonValue(m_effort, json[QString("effort")]);
    m_effort_isSet = !json[QString("effort")].isNull() && m_effort_isValid;

    m_form_entry_isValid = ::OpenAPI::fromJsonValue(m_form_entry, json[QString("form_entry")]);
    m_form_entry_isSet = !json[QString("form_entry")].isNull() && m_form_entry_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("is_private")]);
    m_is_private_isSet = !json[QString("is_private")].isNull() && m_is_private_isValid;

    m_merged_to_feature_id_isValid = ::OpenAPI::fromJsonValue(m_merged_to_feature_id, json[QString("merged_to_feature_id")]);
    m_merged_to_feature_id_isSet = !json[QString("merged_to_feature_id")].isNull() && m_merged_to_feature_id_isValid;

    m_planned_at_isValid = ::OpenAPI::fromJsonValue(m_planned_at, json[QString("planned_at")]);
    m_planned_at_isSet = !json[QString("planned_at")].isNull() && m_planned_at_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_released_at_isValid = ::OpenAPI::fromJsonValue(m_released_at, json[QString("released_at")]);
    m_released_at_isSet = !json[QString("released_at")].isNull() && m_released_at_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_resolved_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_resolved_by_user_id, json[QString("resolved_by_user_id")]);
    m_resolved_by_user_id_isSet = !json[QString("resolved_by_user_id")].isNull() && m_resolved_by_user_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_changed_at_isValid = ::OpenAPI::fromJsonValue(m_status_changed_at, json[QString("status_changed_at")]);
    m_status_changed_at_isSet = !json[QString("status_changed_at")].isNull() && m_status_changed_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_updated_by_user_id, json[QString("updated_by_user_id")]);
    m_updated_by_user_id_isSet = !json[QString("updated_by_user_id")].isNull() && m_updated_by_user_id_isValid;

    m_uploads_isValid = ::OpenAPI::fromJsonValue(m_uploads, json[QString("uploads")]);
    m_uploads_isSet = !json[QString("uploads")].isNull() && m_uploads_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("view_count")]);
    m_view_count_isSet = !json[QString("view_count")].isNull() && m_view_count_isValid;

    m_waiting_at_isValid = ::OpenAPI::fromJsonValue(m_waiting_at, json[QString("waiting_at")]);
    m_waiting_at_isSet = !json[QString("waiting_at")].isNull() && m_waiting_at_isValid;
}

QString OAIFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_app_url_isSet) {
        obj.insert(QString("app_url"), ::OpenAPI::toJsonValue(m_app_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_user_id_isSet) {
        obj.insert(QString("created_by_user_id"), ::OpenAPI::toJsonValue(m_created_by_user_id));
    }
    if (m_declined_at_isSet) {
        obj.insert(QString("declined_at"), ::OpenAPI::toJsonValue(m_declined_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_developing_at_isSet) {
        obj.insert(QString("developing_at"), ::OpenAPI::toJsonValue(m_developing_at));
    }
    if (m_effort_isSet) {
        obj.insert(QString("effort"), ::OpenAPI::toJsonValue(m_effort));
    }
    if (m_form_entry_isSet) {
        obj.insert(QString("form_entry"), ::OpenAPI::toJsonValue(m_form_entry));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("is_private"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_merged_to_feature_id_isSet) {
        obj.insert(QString("merged_to_feature_id"), ::OpenAPI::toJsonValue(m_merged_to_feature_id));
    }
    if (m_planned_at_isSet) {
        obj.insert(QString("planned_at"), ::OpenAPI::toJsonValue(m_planned_at));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_released_at_isSet) {
        obj.insert(QString("released_at"), ::OpenAPI::toJsonValue(m_released_at));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_resolved_by_user_id_isSet) {
        obj.insert(QString("resolved_by_user_id"), ::OpenAPI::toJsonValue(m_resolved_by_user_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_changed_at_isSet) {
        obj.insert(QString("status_changed_at"), ::OpenAPI::toJsonValue(m_status_changed_at));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_user_id_isSet) {
        obj.insert(QString("updated_by_user_id"), ::OpenAPI::toJsonValue(m_updated_by_user_id));
    }
    if (m_uploads.size() > 0) {
        obj.insert(QString("uploads"), ::OpenAPI::toJsonValue(m_uploads));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("view_count"), ::OpenAPI::toJsonValue(m_view_count));
    }
    if (m_waiting_at_isSet) {
        obj.insert(QString("waiting_at"), ::OpenAPI::toJsonValue(m_waiting_at));
    }
    return obj;
}

QString OAIFeature::getAppUrl() const {
    return m_app_url;
}
void OAIFeature::setAppUrl(const QString &app_url) {
    m_app_url = app_url;
    m_app_url_isSet = true;
}

bool OAIFeature::is_app_url_Set() const{
    return m_app_url_isSet;
}

bool OAIFeature::is_app_url_Valid() const{
    return m_app_url_isValid;
}

QString OAIFeature::getCreatedAt() const {
    return m_created_at;
}
void OAIFeature::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFeature::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFeature::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIFeature::getCreatedByUserId() const {
    return m_created_by_user_id;
}
void OAIFeature::setCreatedByUserId(const qint32 &created_by_user_id) {
    m_created_by_user_id = created_by_user_id;
    m_created_by_user_id_isSet = true;
}

bool OAIFeature::is_created_by_user_id_Set() const{
    return m_created_by_user_id_isSet;
}

bool OAIFeature::is_created_by_user_id_Valid() const{
    return m_created_by_user_id_isValid;
}

QString OAIFeature::getDeclinedAt() const {
    return m_declined_at;
}
void OAIFeature::setDeclinedAt(const QString &declined_at) {
    m_declined_at = declined_at;
    m_declined_at_isSet = true;
}

bool OAIFeature::is_declined_at_Set() const{
    return m_declined_at_isSet;
}

bool OAIFeature::is_declined_at_Valid() const{
    return m_declined_at_isValid;
}

QString OAIFeature::getDescription() const {
    return m_description;
}
void OAIFeature::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFeature::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFeature::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFeature::getDevelopingAt() const {
    return m_developing_at;
}
void OAIFeature::setDevelopingAt(const QString &developing_at) {
    m_developing_at = developing_at;
    m_developing_at_isSet = true;
}

bool OAIFeature::is_developing_at_Set() const{
    return m_developing_at_isSet;
}

bool OAIFeature::is_developing_at_Valid() const{
    return m_developing_at_isValid;
}

qint32 OAIFeature::getEffort() const {
    return m_effort;
}
void OAIFeature::setEffort(const qint32 &effort) {
    m_effort = effort;
    m_effort_isSet = true;
}

bool OAIFeature::is_effort_Set() const{
    return m_effort_isSet;
}

bool OAIFeature::is_effort_Valid() const{
    return m_effort_isValid;
}

QString OAIFeature::getFormEntry() const {
    return m_form_entry;
}
void OAIFeature::setFormEntry(const QString &form_entry) {
    m_form_entry = form_entry;
    m_form_entry_isSet = true;
}

bool OAIFeature::is_form_entry_Set() const{
    return m_form_entry_isSet;
}

bool OAIFeature::is_form_entry_Valid() const{
    return m_form_entry_isValid;
}

double OAIFeature::getId() const {
    return m_id;
}
void OAIFeature::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeature::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeature::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFeature::isIsPrivate() const {
    return m_is_private;
}
void OAIFeature::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIFeature::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIFeature::is_is_private_Valid() const{
    return m_is_private_isValid;
}

qint32 OAIFeature::getMergedToFeatureId() const {
    return m_merged_to_feature_id;
}
void OAIFeature::setMergedToFeatureId(const qint32 &merged_to_feature_id) {
    m_merged_to_feature_id = merged_to_feature_id;
    m_merged_to_feature_id_isSet = true;
}

bool OAIFeature::is_merged_to_feature_id_Set() const{
    return m_merged_to_feature_id_isSet;
}

bool OAIFeature::is_merged_to_feature_id_Valid() const{
    return m_merged_to_feature_id_isValid;
}

QString OAIFeature::getPlannedAt() const {
    return m_planned_at;
}
void OAIFeature::setPlannedAt(const QString &planned_at) {
    m_planned_at = planned_at;
    m_planned_at_isSet = true;
}

bool OAIFeature::is_planned_at_Set() const{
    return m_planned_at_isSet;
}

bool OAIFeature::is_planned_at_Valid() const{
    return m_planned_at_isValid;
}

QList<QString> OAIFeature::getProducts() const {
    return m_products;
}
void OAIFeature::setProducts(const QList<QString> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIFeature::is_products_Set() const{
    return m_products_isSet;
}

bool OAIFeature::is_products_Valid() const{
    return m_products_isValid;
}

QString OAIFeature::getReleasedAt() const {
    return m_released_at;
}
void OAIFeature::setReleasedAt(const QString &released_at) {
    m_released_at = released_at;
    m_released_at_isSet = true;
}

bool OAIFeature::is_released_at_Set() const{
    return m_released_at_isSet;
}

bool OAIFeature::is_released_at_Valid() const{
    return m_released_at_isValid;
}

QString OAIFeature::getResolution() const {
    return m_resolution;
}
void OAIFeature::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIFeature::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIFeature::is_resolution_Valid() const{
    return m_resolution_isValid;
}

qint32 OAIFeature::getResolvedByUserId() const {
    return m_resolved_by_user_id;
}
void OAIFeature::setResolvedByUserId(const qint32 &resolved_by_user_id) {
    m_resolved_by_user_id = resolved_by_user_id;
    m_resolved_by_user_id_isSet = true;
}

bool OAIFeature::is_resolved_by_user_id_Set() const{
    return m_resolved_by_user_id_isSet;
}

bool OAIFeature::is_resolved_by_user_id_Valid() const{
    return m_resolved_by_user_id_isValid;
}

QString OAIFeature::getStatus() const {
    return m_status;
}
void OAIFeature::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeature::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeature::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFeature::getStatusChangedAt() const {
    return m_status_changed_at;
}
void OAIFeature::setStatusChangedAt(const QString &status_changed_at) {
    m_status_changed_at = status_changed_at;
    m_status_changed_at_isSet = true;
}

bool OAIFeature::is_status_changed_at_Set() const{
    return m_status_changed_at_isSet;
}

bool OAIFeature::is_status_changed_at_Valid() const{
    return m_status_changed_at_isValid;
}

OAIObject OAIFeature::getTags() const {
    return m_tags;
}
void OAIFeature::setTags(const OAIObject &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFeature::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFeature::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIFeature::getTitle() const {
    return m_title;
}
void OAIFeature::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFeature::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFeature::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFeature::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFeature::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFeature::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFeature::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIFeature::getUpdatedByUserId() const {
    return m_updated_by_user_id;
}
void OAIFeature::setUpdatedByUserId(const qint32 &updated_by_user_id) {
    m_updated_by_user_id = updated_by_user_id;
    m_updated_by_user_id_isSet = true;
}

bool OAIFeature::is_updated_by_user_id_Set() const{
    return m_updated_by_user_id_isSet;
}

bool OAIFeature::is_updated_by_user_id_Valid() const{
    return m_updated_by_user_id_isValid;
}

QList<QString> OAIFeature::getUploads() const {
    return m_uploads;
}
void OAIFeature::setUploads(const QList<QString> &uploads) {
    m_uploads = uploads;
    m_uploads_isSet = true;
}

bool OAIFeature::is_uploads_Set() const{
    return m_uploads_isSet;
}

bool OAIFeature::is_uploads_Valid() const{
    return m_uploads_isValid;
}

qint32 OAIFeature::getVendorId() const {
    return m_vendor_id;
}
void OAIFeature::setVendorId(const qint32 &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIFeature::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIFeature::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

qint32 OAIFeature::getViewCount() const {
    return m_view_count;
}
void OAIFeature::setViewCount(const qint32 &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIFeature::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIFeature::is_view_count_Valid() const{
    return m_view_count_isValid;
}

QString OAIFeature::getWaitingAt() const {
    return m_waiting_at;
}
void OAIFeature::setWaitingAt(const QString &waiting_at) {
    m_waiting_at = waiting_at;
    m_waiting_at_isSet = true;
}

bool OAIFeature::is_waiting_at_Set() const{
    return m_waiting_at_isSet;
}

bool OAIFeature::is_waiting_at_Valid() const{
    return m_waiting_at_isValid;
}

bool OAIFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declined_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developing_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_to_feature_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_changed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waiting_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
