/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndUserPing_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndUserPing_user::OAIEndUserPing_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndUserPing_user::OAIEndUserPing_user() {
    this->initializeModel();
}

OAIEndUserPing_user::~OAIEndUserPing_user() {}

void OAIEndUserPing_user::initializeModel() {

    m_allowed_products_isSet = false;
    m_allowed_products_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIEndUserPing_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndUserPing_user::fromJsonObject(QJsonObject json) {

    m_allowed_products_isValid = ::OpenAPI::fromJsonValue(m_allowed_products, json[QString("allowed_products")]);
    m_allowed_products_isSet = !json[QString("allowed_products")].isNull() && m_allowed_products_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIEndUserPing_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndUserPing_user::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_products.size() > 0) {
        obj.insert(QString("allowed_products"), ::OpenAPI::toJsonValue(m_allowed_products));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_roles_isSet) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<QString> OAIEndUserPing_user::getAllowedProducts() const {
    return m_allowed_products;
}
void OAIEndUserPing_user::setAllowedProducts(const QList<QString> &allowed_products) {
    m_allowed_products = allowed_products;
    m_allowed_products_isSet = true;
}

bool OAIEndUserPing_user::is_allowed_products_Set() const{
    return m_allowed_products_isSet;
}

bool OAIEndUserPing_user::is_allowed_products_Valid() const{
    return m_allowed_products_isValid;
}

QString OAIEndUserPing_user::getCreatedAt() const {
    return m_created_at;
}
void OAIEndUserPing_user::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEndUserPing_user::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEndUserPing_user::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEndUserPing_user::getEmail() const {
    return m_email;
}
void OAIEndUserPing_user::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEndUserPing_user::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEndUserPing_user::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEndUserPing_user::getFullName() const {
    return m_full_name;
}
void OAIEndUserPing_user::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIEndUserPing_user::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIEndUserPing_user::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIEndUserPing_user::getId() const {
    return m_id;
}
void OAIEndUserPing_user::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEndUserPing_user::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEndUserPing_user::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEndUserPing_user::getRoles() const {
    return m_roles;
}
void OAIEndUserPing_user::setRoles(const QString &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIEndUserPing_user::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIEndUserPing_user::is_roles_Valid() const{
    return m_roles_isValid;
}

OAIObject OAIEndUserPing_user::getTags() const {
    return m_tags;
}
void OAIEndUserPing_user::setTags(const OAIObject &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIEndUserPing_user::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIEndUserPing_user::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIEndUserPing_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndUserPing_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
