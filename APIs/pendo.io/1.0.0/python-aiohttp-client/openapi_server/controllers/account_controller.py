from typing import List, Dict
from aiohttp import web

from openapi_server.models.account import Account
from openapi_server.models.accounts_id_put_request import AccountsIdPutRequest
from openapi_server import util


async def accounts_get(request: web.Request, limit=None, start=None, order_dir=None, order_by=None) -> web.Response:
    """Query accounts

    

    :param limit: Limit the number of records returned
    :type limit: 
    :param start: Offset to start at
    :type start: 
    :param order_dir: The sort direction
    :type order_dir: str
    :param order_by: The field to use for sort
    :type order_by: str

    """
    return web.Response(status=200)


async def accounts_id_delete(request: web.Request, id) -> web.Response:
    """Delete an Account

    This removes most traces of an Accounts existence from the system.

    :param id: 
    :type id: 

    """
    return web.Response(status=200)


async def accounts_id_get(request: web.Request, id) -> web.Response:
    """Get an Account

    

    :param id: Account ID (generated by Feedback)
    :type id: 

    """
    return web.Response(status=200)


async def accounts_id_put(request: web.Request, id, account=None) -> web.Response:
    """Update an Account

    

    :param id: Account ID (generated by Feedback)
    :type id: 
    :param account: Updated Account values
    :type account: dict | bytes

    """
    account = AccountsIdPutRequest.from_dict(account)
    return web.Response(status=200)


async def accounts_id_tags_delete(request: web.Request, id) -> web.Response:
    """Delete custom Account tags

    Removes all custom tags associated with the Account

    :param id: Account ID (generated by Feedback)
    :type id: 

    """
    return web.Response(status=200)


async def accounts_id_tags_get(request: web.Request, id) -> web.Response:
    """Get custom Account tags

    

    :param id: Account ID (generated by Feedback)
    :type id: 

    """
    return web.Response(status=200)


async def accounts_id_tags_post(request: web.Request, id, tags) -> web.Response:
    """Overwrite current custom Account tags with the given tags

    

    :param id: Account ID (generated by Feedback)
    :type id: 
    :param tags: An array of maps specifying tags under each tag group, for example:  [  {&#39;impacts&#39; &#x3D;&gt; [&#39;sales&#39;]},  {&#39;resources&#39; &#x3D;&gt; [&#39;dev&#39;, &#39;test&#39;, &#39;support&#39;]}  ]
    :type tags: 

    """
    return web.Response(status=200)
