from typing import List, Dict
from aiohttp import web

from openapi_server.models.feature import Feature
from openapi_server import util


async def features_get(request: web.Request, limit=None, start=None, order_dir=None, is_private=None, wanted_by=None, order_by=None, tags=None, products=None) -> web.Response:
    """Query features

    

    :param limit: Limit the number of records returned
    :type limit: 
    :param start: Offset to start at
    :type start: 
    :param order_dir: The sort direction
    :type order_dir: str
    :param is_private: Filter by whether the features are shown/hidden from customer, if supplied.
    :type is_private: bool
    :param wanted_by: Filter by User ID, if supplied.
    :type wanted_by: int
    :param order_by: The field to use for sort
    :type order_by: str
    :param tags: Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;.
    :type tags: str
    :param products: Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;.
    :type products: str

    """
    return web.Response(status=200)


async def features_id_get(request: web.Request, id) -> web.Response:
    """Get a Feature by ID

    

    :param id: ID of the feature
    :type id: int

    """
    return web.Response(status=200)


async def features_id_tags_delete(request: web.Request, id) -> web.Response:
    """Delete custom Feature tags

    Removes all custom tags associated with the Feature

    :param id: Feedback&#39;s Feature ID
    :type id: 

    """
    return web.Response(status=200)


async def features_id_tags_get(request: web.Request, id) -> web.Response:
    """Get custom Feature tags

    

    :param id: Account ID (generated by Feedback)
    :type id: 

    """
    return web.Response(status=200)


async def features_id_tags_post(request: web.Request, id, tags) -> web.Response:
    """Overwrite current custom Feature tags with the given tags

    

    :param id: Feedback&#39;s Feature ID
    :type id: 
    :param tags: 
    :type tags: 

    """
    return web.Response(status=200)


async def search_get(request: web.Request, scope, q, status=None, tags=None, products=None) -> web.Response:
    """Search features

    

    :param scope: Specifies the type of entity being searched for. Must be set to &#39;feature&#39;
    :type scope: str
    :param q: The search term.
    :type q: str
    :param status: A comma seperated list of status values to filter by, if required. Valid values: &#39;new&#39;, &#39;waiting&#39;, &#39;planned&#39;, &#39;developing&#39;, &#39;released&#39;, &#39;declined&#39;.
    :type status: str
    :param tags: Tags to limit results by - only applies when scope is &#39;case&#39; or &#39;feature&#39;. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;.
    :type tags: str
    :param products: Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;.
    :type products: str

    """
    return web.Response(status=200)
