# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsersInviteEndUserPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_external_id: str=None, account_name: str=None, account_status: str=None, email: str=None, full_name: str=None, monthly_value: float=None, send_invite: bool=None, user_external_id: str=None):
        """UsersInviteEndUserPostRequest - a model defined in OpenAPI

        :param account_external_id: The account_external_id of this UsersInviteEndUserPostRequest.
        :param account_name: The account_name of this UsersInviteEndUserPostRequest.
        :param account_status: The account_status of this UsersInviteEndUserPostRequest.
        :param email: The email of this UsersInviteEndUserPostRequest.
        :param full_name: The full_name of this UsersInviteEndUserPostRequest.
        :param monthly_value: The monthly_value of this UsersInviteEndUserPostRequest.
        :param send_invite: The send_invite of this UsersInviteEndUserPostRequest.
        :param user_external_id: The user_external_id of this UsersInviteEndUserPostRequest.
        """
        self.openapi_types = {
            'account_external_id': str,
            'account_name': str,
            'account_status': str,
            'email': str,
            'full_name': str,
            'monthly_value': float,
            'send_invite': bool,
            'user_external_id': str
        }

        self.attribute_map = {
            'account_external_id': 'account_external_id',
            'account_name': 'account_name',
            'account_status': 'account_status',
            'email': 'email',
            'full_name': 'full_name',
            'monthly_value': 'monthly_value',
            'send_invite': 'send_invite',
            'user_external_id': 'user_external_id'
        }

        self._account_external_id = account_external_id
        self._account_name = account_name
        self._account_status = account_status
        self._email = email
        self._full_name = full_name
        self._monthly_value = monthly_value
        self._send_invite = send_invite
        self._user_external_id = user_external_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersInviteEndUserPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _users_invite_end_user_post_request of this UsersInviteEndUserPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_external_id(self):
        """Gets the account_external_id of this UsersInviteEndUserPostRequest.


        :return: The account_external_id of this UsersInviteEndUserPostRequest.
        :rtype: str
        """
        return self._account_external_id

    @account_external_id.setter
    def account_external_id(self, account_external_id):
        """Sets the account_external_id of this UsersInviteEndUserPostRequest.


        :param account_external_id: The account_external_id of this UsersInviteEndUserPostRequest.
        :type account_external_id: str
        """

        self._account_external_id = account_external_id

    @property
    def account_name(self):
        """Gets the account_name of this UsersInviteEndUserPostRequest.


        :return: The account_name of this UsersInviteEndUserPostRequest.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this UsersInviteEndUserPostRequest.


        :param account_name: The account_name of this UsersInviteEndUserPostRequest.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_status(self):
        """Gets the account_status of this UsersInviteEndUserPostRequest.


        :return: The account_status of this UsersInviteEndUserPostRequest.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this UsersInviteEndUserPostRequest.


        :param account_status: The account_status of this UsersInviteEndUserPostRequest.
        :type account_status: str
        """
        allowed_values = ["prospect", "not_paying", "paying"]  # noqa: E501
        if account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def email(self):
        """Gets the email of this UsersInviteEndUserPostRequest.


        :return: The email of this UsersInviteEndUserPostRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsersInviteEndUserPostRequest.


        :param email: The email of this UsersInviteEndUserPostRequest.
        :type email: str
        """

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this UsersInviteEndUserPostRequest.


        :return: The full_name of this UsersInviteEndUserPostRequest.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UsersInviteEndUserPostRequest.


        :param full_name: The full_name of this UsersInviteEndUserPostRequest.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def monthly_value(self):
        """Gets the monthly_value of this UsersInviteEndUserPostRequest.


        :return: The monthly_value of this UsersInviteEndUserPostRequest.
        :rtype: float
        """
        return self._monthly_value

    @monthly_value.setter
    def monthly_value(self, monthly_value):
        """Sets the monthly_value of this UsersInviteEndUserPostRequest.


        :param monthly_value: The monthly_value of this UsersInviteEndUserPostRequest.
        :type monthly_value: float
        """

        self._monthly_value = monthly_value

    @property
    def send_invite(self):
        """Gets the send_invite of this UsersInviteEndUserPostRequest.


        :return: The send_invite of this UsersInviteEndUserPostRequest.
        :rtype: bool
        """
        return self._send_invite

    @send_invite.setter
    def send_invite(self, send_invite):
        """Sets the send_invite of this UsersInviteEndUserPostRequest.


        :param send_invite: The send_invite of this UsersInviteEndUserPostRequest.
        :type send_invite: bool
        """

        self._send_invite = send_invite

    @property
    def user_external_id(self):
        """Gets the user_external_id of this UsersInviteEndUserPostRequest.


        :return: The user_external_id of this UsersInviteEndUserPostRequest.
        :rtype: str
        """
        return self._user_external_id

    @user_external_id.setter
    def user_external_id(self, user_external_id):
        """Sets the user_external_id of this UsersInviteEndUserPostRequest.


        :param user_external_id: The user_external_id of this UsersInviteEndUserPostRequest.
        :type user_external_id: str
        """

        self._user_external_id = user_external_id
