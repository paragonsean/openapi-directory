# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_account import UserAccount
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: UserAccount=None, created_at: str=None, email: str=None, external_id: str=None, id: str=None, name: str=None, roles: str=None):
        """User - a model defined in OpenAPI

        :param account: The account of this User.
        :param created_at: The created_at of this User.
        :param email: The email of this User.
        :param external_id: The external_id of this User.
        :param id: The id of this User.
        :param name: The name of this User.
        :param roles: The roles of this User.
        """
        self.openapi_types = {
            'account': UserAccount,
            'created_at': str,
            'email': str,
            'external_id': str,
            'id': str,
            'name': str,
            'roles': str
        }

        self.attribute_map = {
            'account': 'account',
            'created_at': 'created_at',
            'email': 'email',
            'external_id': 'external_id',
            'id': 'id',
            'name': 'name',
            'roles': 'roles'
        }

        self._account = account
        self._created_at = created_at
        self._email = email
        self._external_id = external_id
        self._id = id
        self._name = name
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this User.


        :return: The account of this User.
        :rtype: UserAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this User.


        :param account: The account of this User.
        :type account: UserAccount
        """

        self._account = account

    @property
    def created_at(self):
        """Gets the created_at of this User.


        :return: The created_at of this User.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def external_id(self):
        """Gets the external_id of this User.


        :return: The external_id of this User.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User.


        :param external_id: The external_id of this User.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this User.


        :return: The roles of this User.
        :rtype: str
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.


        :param roles: The roles of this User.
        :type roles: str
        """
        allowed_values = ["endUser"]  # noqa: E501
        if roles not in allowed_values:
            raise ValueError(
                "Invalid value for `roles` ({0}), must be one of {1}"
                .format(roles, allowed_values)
            )

        self._roles = roles
