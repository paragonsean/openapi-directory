# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HooksPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, target_url: str=None):
        """HooksPostRequest - a model defined in OpenAPI

        :param event: The event of this HooksPostRequest.
        :param target_url: The target_url of this HooksPostRequest.
        """
        self.openapi_types = {
            'event': str,
            'target_url': str
        }

        self.attribute_map = {
            'event': 'event',
            'target_url': 'target_url'
        }

        self._event = event
        self._target_url = target_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HooksPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _hooks_post_request of this HooksPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this HooksPostRequest.

        The event field can contain one of the following values- 1) 'feature_created' - When a new feature is created a webhook will be triggered with the details of the feature. Feature details can be found in the model section under Feature object 2) 'feature_status_changed' - When a feature status is updated a webhook will be triggered with the updated Feature details. Feature details can be found in the model section under Feature object. 3) 'feature_comment_created' - When a commment is created on a feature, a webhook will be triggered with the details about the Feature and the new comment. Feature and Comment details can be found in the model section under Feature object and Comment object.

        :return: The event of this HooksPostRequest.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this HooksPostRequest.

        The event field can contain one of the following values- 1) 'feature_created' - When a new feature is created a webhook will be triggered with the details of the feature. Feature details can be found in the model section under Feature object 2) 'feature_status_changed' - When a feature status is updated a webhook will be triggered with the updated Feature details. Feature details can be found in the model section under Feature object. 3) 'feature_comment_created' - When a commment is created on a feature, a webhook will be triggered with the details about the Feature and the new comment. Feature and Comment details can be found in the model section under Feature object and Comment object.

        :param event: The event of this HooksPostRequest.
        :type event: str
        """

        self._event = event

    @property
    def target_url(self):
        """Gets the target_url of this HooksPostRequest.

        The target URL where the events will be sent to.

        :return: The target_url of this HooksPostRequest.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this HooksPostRequest.

        The target URL where the events will be sent to.

        :param target_url: The target_url of this HooksPostRequest.
        :type target_url: str
        """

        self._target_url = target_url
