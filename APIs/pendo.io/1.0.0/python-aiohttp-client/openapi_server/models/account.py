# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, external_id: str=None, id: str=None, is_paying: bool=None, monthly_value: float=None, name: str=None, status: str=None):
        """Account - a model defined in OpenAPI

        :param created_at: The created_at of this Account.
        :param external_id: The external_id of this Account.
        :param id: The id of this Account.
        :param is_paying: The is_paying of this Account.
        :param monthly_value: The monthly_value of this Account.
        :param name: The name of this Account.
        :param status: The status of this Account.
        """
        self.openapi_types = {
            'created_at': str,
            'external_id': str,
            'id': str,
            'is_paying': bool,
            'monthly_value': float,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'external_id': 'external_id',
            'id': 'id',
            'is_paying': 'is_paying',
            'monthly_value': 'monthly_value',
            'name': 'name',
            'status': 'status'
        }

        self._created_at = created_at
        self._external_id = external_id
        self._id = id
        self._is_paying = is_paying
        self._monthly_value = monthly_value
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Account.


        :return: The created_at of this Account.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.


        :param created_at: The created_at of this Account.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def external_id(self):
        """Gets the external_id of this Account.

        ID for the Account, provided by the Feedback Customer

        :return: The external_id of this Account.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Account.

        ID for the Account, provided by the Feedback Customer

        :param external_id: The external_id of this Account.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this Account.


        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.
        :type id: str
        """

        self._id = id

    @property
    def is_paying(self):
        """Gets the is_paying of this Account.


        :return: The is_paying of this Account.
        :rtype: bool
        """
        return self._is_paying

    @is_paying.setter
    def is_paying(self, is_paying):
        """Sets the is_paying of this Account.


        :param is_paying: The is_paying of this Account.
        :type is_paying: bool
        """

        self._is_paying = is_paying

    @property
    def monthly_value(self):
        """Gets the monthly_value of this Account.


        :return: The monthly_value of this Account.
        :rtype: float
        """
        return self._monthly_value

    @monthly_value.setter
    def monthly_value(self, monthly_value):
        """Sets the monthly_value of this Account.


        :param monthly_value: The monthly_value of this Account.
        :type monthly_value: float
        """

        self._monthly_value = monthly_value

    @property
    def name(self):
        """Gets the name of this Account.


        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Account.


        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.


        :param status: The status of this Account.
        :type status: str
        """

        self._status = status
