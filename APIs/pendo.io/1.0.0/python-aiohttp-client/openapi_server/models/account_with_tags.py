# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountWithTags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, id: str=None, is_paying: bool=None, monthly_value: float=None, name: str=None, status: str=None, tags: object=None):
        """AccountWithTags - a model defined in OpenAPI

        :param created_at: The created_at of this AccountWithTags.
        :param id: The id of this AccountWithTags.
        :param is_paying: The is_paying of this AccountWithTags.
        :param monthly_value: The monthly_value of this AccountWithTags.
        :param name: The name of this AccountWithTags.
        :param status: The status of this AccountWithTags.
        :param tags: The tags of this AccountWithTags.
        """
        self.openapi_types = {
            'created_at': str,
            'id': str,
            'is_paying': bool,
            'monthly_value': float,
            'name': str,
            'status': str,
            'tags': object
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'is_paying': 'is_paying',
            'monthly_value': 'monthly_value',
            'name': 'name',
            'status': 'status',
            'tags': 'tags'
        }

        self._created_at = created_at
        self._id = id
        self._is_paying = is_paying
        self._monthly_value = monthly_value
        self._name = name
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountWithTags':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountWithTags of this AccountWithTags.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this AccountWithTags.


        :return: The created_at of this AccountWithTags.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AccountWithTags.


        :param created_at: The created_at of this AccountWithTags.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this AccountWithTags.


        :return: The id of this AccountWithTags.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountWithTags.


        :param id: The id of this AccountWithTags.
        :type id: str
        """

        self._id = id

    @property
    def is_paying(self):
        """Gets the is_paying of this AccountWithTags.


        :return: The is_paying of this AccountWithTags.
        :rtype: bool
        """
        return self._is_paying

    @is_paying.setter
    def is_paying(self, is_paying):
        """Sets the is_paying of this AccountWithTags.


        :param is_paying: The is_paying of this AccountWithTags.
        :type is_paying: bool
        """

        self._is_paying = is_paying

    @property
    def monthly_value(self):
        """Gets the monthly_value of this AccountWithTags.


        :return: The monthly_value of this AccountWithTags.
        :rtype: float
        """
        return self._monthly_value

    @monthly_value.setter
    def monthly_value(self, monthly_value):
        """Sets the monthly_value of this AccountWithTags.


        :param monthly_value: The monthly_value of this AccountWithTags.
        :type monthly_value: float
        """

        self._monthly_value = monthly_value

    @property
    def name(self):
        """Gets the name of this AccountWithTags.


        :return: The name of this AccountWithTags.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountWithTags.


        :param name: The name of this AccountWithTags.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this AccountWithTags.


        :return: The status of this AccountWithTags.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountWithTags.


        :param status: The status of this AccountWithTags.
        :type status: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this AccountWithTags.

        Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: ['Foo', 'Bar'].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {'Color':['Red', 'Yellow']},  {'Flavor':['Cherry']} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > 

        :return: The tags of this AccountWithTags.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AccountWithTags.

        Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: ['Foo', 'Bar'].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {'Color':['Red', 'Yellow']},  {'Flavor':['Cherry']} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > 

        :param tags: The tags of this AccountWithTags.
        :type tags: object
        """

        self._tags = tags
