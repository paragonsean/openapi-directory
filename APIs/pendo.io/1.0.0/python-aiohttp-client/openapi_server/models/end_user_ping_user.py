# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndUserPingUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_products: List[str]=None, created_at: str=None, email: str=None, full_name: str=None, id: str=None, roles: str=None, tags: object=None):
        """EndUserPingUser - a model defined in OpenAPI

        :param allowed_products: The allowed_products of this EndUserPingUser.
        :param created_at: The created_at of this EndUserPingUser.
        :param email: The email of this EndUserPingUser.
        :param full_name: The full_name of this EndUserPingUser.
        :param id: The id of this EndUserPingUser.
        :param roles: The roles of this EndUserPingUser.
        :param tags: The tags of this EndUserPingUser.
        """
        self.openapi_types = {
            'allowed_products': List[str],
            'created_at': str,
            'email': str,
            'full_name': str,
            'id': str,
            'roles': str,
            'tags': object
        }

        self.attribute_map = {
            'allowed_products': 'allowed_products',
            'created_at': 'created_at',
            'email': 'email',
            'full_name': 'full_name',
            'id': 'id',
            'roles': 'roles',
            'tags': 'tags'
        }

        self._allowed_products = allowed_products
        self._created_at = created_at
        self._email = email
        self._full_name = full_name
        self._id = id
        self._roles = roles
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndUserPingUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndUserPing_user of this EndUserPingUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_products(self):
        """Gets the allowed_products of this EndUserPingUser.

        Supplied as an array of maps where each map describes an existing or new product e.g [{id:exising_product_id, name:existing name}, {id:new_product_id, name: new product name}].  Existing product id/names held in your account can be referenced at https://feedback.pendo.io/app/#/vendor/products

        :return: The allowed_products of this EndUserPingUser.
        :rtype: List[str]
        """
        return self._allowed_products

    @allowed_products.setter
    def allowed_products(self, allowed_products):
        """Sets the allowed_products of this EndUserPingUser.

        Supplied as an array of maps where each map describes an existing or new product e.g [{id:exising_product_id, name:existing name}, {id:new_product_id, name: new product name}].  Existing product id/names held in your account can be referenced at https://feedback.pendo.io/app/#/vendor/products

        :param allowed_products: The allowed_products of this EndUserPingUser.
        :type allowed_products: List[str]
        """

        self._allowed_products = allowed_products

    @property
    def created_at(self):
        """Gets the created_at of this EndUserPingUser.


        :return: The created_at of this EndUserPingUser.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EndUserPingUser.


        :param created_at: The created_at of this EndUserPingUser.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this EndUserPingUser.


        :return: The email of this EndUserPingUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EndUserPingUser.


        :param email: The email of this EndUserPingUser.
        :type email: str
        """

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this EndUserPingUser.


        :return: The full_name of this EndUserPingUser.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this EndUserPingUser.


        :param full_name: The full_name of this EndUserPingUser.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this EndUserPingUser.


        :return: The id of this EndUserPingUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EndUserPingUser.


        :param id: The id of this EndUserPingUser.
        :type id: str
        """

        self._id = id

    @property
    def roles(self):
        """Gets the roles of this EndUserPingUser.


        :return: The roles of this EndUserPingUser.
        :rtype: str
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this EndUserPingUser.


        :param roles: The roles of this EndUserPingUser.
        :type roles: str
        """
        allowed_values = ["endUser"]  # noqa: E501
        if roles not in allowed_values:
            raise ValueError(
                "Invalid value for `roles` ({0}), must be one of {1}"
                .format(roles, allowed_values)
            )

        self._roles = roles

    @property
    def tags(self):
        """Gets the tags of this EndUserPingUser.

        Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: ['Foo', 'Bar'].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {'Color':['Red', 'Yellow']},  {'Flavor':['Cherry']} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > 

        :return: The tags of this EndUserPingUser.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EndUserPingUser.

        Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: ['Foo', 'Bar'].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {'Color':['Red', 'Yellow']},  {'Flavor':['Cherry']} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > 

        :param tags: The tags of this EndUserPingUser.
        :type tags: object
        """

        self._tags = tags
