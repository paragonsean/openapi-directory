# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Feature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_url: str=None, created_at: str=None, created_by_user_id: int=None, declined_at: str=None, description: str=None, developing_at: str=None, effort: int=None, form_entry: str=None, id: float=None, is_private: bool=None, merged_to_feature_id: int=None, planned_at: str=None, products: List[str]=None, released_at: str=None, resolution: str=None, resolved_by_user_id: int=None, status: str=None, status_changed_at: str=None, tags: object=None, title: str=None, updated_at: str=None, updated_by_user_id: int=None, uploads: List[str]=None, vendor_id: int=None, view_count: int=None, waiting_at: str=None):
        """Feature - a model defined in OpenAPI

        :param app_url: The app_url of this Feature.
        :param created_at: The created_at of this Feature.
        :param created_by_user_id: The created_by_user_id of this Feature.
        :param declined_at: The declined_at of this Feature.
        :param description: The description of this Feature.
        :param developing_at: The developing_at of this Feature.
        :param effort: The effort of this Feature.
        :param form_entry: The form_entry of this Feature.
        :param id: The id of this Feature.
        :param is_private: The is_private of this Feature.
        :param merged_to_feature_id: The merged_to_feature_id of this Feature.
        :param planned_at: The planned_at of this Feature.
        :param products: The products of this Feature.
        :param released_at: The released_at of this Feature.
        :param resolution: The resolution of this Feature.
        :param resolved_by_user_id: The resolved_by_user_id of this Feature.
        :param status: The status of this Feature.
        :param status_changed_at: The status_changed_at of this Feature.
        :param tags: The tags of this Feature.
        :param title: The title of this Feature.
        :param updated_at: The updated_at of this Feature.
        :param updated_by_user_id: The updated_by_user_id of this Feature.
        :param uploads: The uploads of this Feature.
        :param vendor_id: The vendor_id of this Feature.
        :param view_count: The view_count of this Feature.
        :param waiting_at: The waiting_at of this Feature.
        """
        self.openapi_types = {
            'app_url': str,
            'created_at': str,
            'created_by_user_id': int,
            'declined_at': str,
            'description': str,
            'developing_at': str,
            'effort': int,
            'form_entry': str,
            'id': float,
            'is_private': bool,
            'merged_to_feature_id': int,
            'planned_at': str,
            'products': List[str],
            'released_at': str,
            'resolution': str,
            'resolved_by_user_id': int,
            'status': str,
            'status_changed_at': str,
            'tags': object,
            'title': str,
            'updated_at': str,
            'updated_by_user_id': int,
            'uploads': List[str],
            'vendor_id': int,
            'view_count': int,
            'waiting_at': str
        }

        self.attribute_map = {
            'app_url': 'app_url',
            'created_at': 'created_at',
            'created_by_user_id': 'created_by_user_id',
            'declined_at': 'declined_at',
            'description': 'description',
            'developing_at': 'developing_at',
            'effort': 'effort',
            'form_entry': 'form_entry',
            'id': 'id',
            'is_private': 'is_private',
            'merged_to_feature_id': 'merged_to_feature_id',
            'planned_at': 'planned_at',
            'products': 'products',
            'released_at': 'released_at',
            'resolution': 'resolution',
            'resolved_by_user_id': 'resolved_by_user_id',
            'status': 'status',
            'status_changed_at': 'status_changed_at',
            'tags': 'tags',
            'title': 'title',
            'updated_at': 'updated_at',
            'updated_by_user_id': 'updated_by_user_id',
            'uploads': 'uploads',
            'vendor_id': 'vendor_id',
            'view_count': 'view_count',
            'waiting_at': 'waiting_at'
        }

        self._app_url = app_url
        self._created_at = created_at
        self._created_by_user_id = created_by_user_id
        self._declined_at = declined_at
        self._description = description
        self._developing_at = developing_at
        self._effort = effort
        self._form_entry = form_entry
        self._id = id
        self._is_private = is_private
        self._merged_to_feature_id = merged_to_feature_id
        self._planned_at = planned_at
        self._products = products
        self._released_at = released_at
        self._resolution = resolution
        self._resolved_by_user_id = resolved_by_user_id
        self._status = status
        self._status_changed_at = status_changed_at
        self._tags = tags
        self._title = title
        self._updated_at = updated_at
        self._updated_by_user_id = updated_by_user_id
        self._uploads = uploads
        self._vendor_id = vendor_id
        self._view_count = view_count
        self._waiting_at = waiting_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feature of this Feature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_url(self):
        """Gets the app_url of this Feature.

        URL for this Feature

        :return: The app_url of this Feature.
        :rtype: str
        """
        return self._app_url

    @app_url.setter
    def app_url(self, app_url):
        """Sets the app_url of this Feature.

        URL for this Feature

        :param app_url: The app_url of this Feature.
        :type app_url: str
        """

        self._app_url = app_url

    @property
    def created_at(self):
        """Gets the created_at of this Feature.


        :return: The created_at of this Feature.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Feature.


        :param created_at: The created_at of this Feature.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this Feature.


        :return: The created_by_user_id of this Feature.
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this Feature.


        :param created_by_user_id: The created_by_user_id of this Feature.
        :type created_by_user_id: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def declined_at(self):
        """Gets the declined_at of this Feature.


        :return: The declined_at of this Feature.
        :rtype: str
        """
        return self._declined_at

    @declined_at.setter
    def declined_at(self, declined_at):
        """Sets the declined_at of this Feature.


        :param declined_at: The declined_at of this Feature.
        :type declined_at: str
        """

        self._declined_at = declined_at

    @property
    def description(self):
        """Gets the description of this Feature.


        :return: The description of this Feature.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Feature.


        :param description: The description of this Feature.
        :type description: str
        """

        self._description = description

    @property
    def developing_at(self):
        """Gets the developing_at of this Feature.


        :return: The developing_at of this Feature.
        :rtype: str
        """
        return self._developing_at

    @developing_at.setter
    def developing_at(self, developing_at):
        """Sets the developing_at of this Feature.


        :param developing_at: The developing_at of this Feature.
        :type developing_at: str
        """

        self._developing_at = developing_at

    @property
    def effort(self):
        """Gets the effort of this Feature.

        How much Effort is assigned to the development of this Feature. Not visible to EndUsers

        :return: The effort of this Feature.
        :rtype: int
        """
        return self._effort

    @effort.setter
    def effort(self, effort):
        """Sets the effort of this Feature.

        How much Effort is assigned to the development of this Feature. Not visible to EndUsers

        :param effort: The effort of this Feature.
        :type effort: int
        """

        self._effort = effort

    @property
    def form_entry(self):
        """Gets the form_entry of this Feature.

        a JSON serialized version of the Form containing the description and other fields for this Feature.

        :return: The form_entry of this Feature.
        :rtype: str
        """
        return self._form_entry

    @form_entry.setter
    def form_entry(self, form_entry):
        """Sets the form_entry of this Feature.

        a JSON serialized version of the Form containing the description and other fields for this Feature.

        :param form_entry: The form_entry of this Feature.
        :type form_entry: str
        """

        self._form_entry = form_entry

    @property
    def id(self):
        """Gets the id of this Feature.


        :return: The id of this Feature.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feature.


        :param id: The id of this Feature.
        :type id: float
        """

        self._id = id

    @property
    def is_private(self):
        """Gets the is_private of this Feature.

        Is this Feature hidden from EndUsers?

        :return: The is_private of this Feature.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Feature.

        Is this Feature hidden from EndUsers?

        :param is_private: The is_private of this Feature.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def merged_to_feature_id(self):
        """Gets the merged_to_feature_id of this Feature.

        If this Feature was merged into another, the ID of the preserved Feature

        :return: The merged_to_feature_id of this Feature.
        :rtype: int
        """
        return self._merged_to_feature_id

    @merged_to_feature_id.setter
    def merged_to_feature_id(self, merged_to_feature_id):
        """Sets the merged_to_feature_id of this Feature.

        If this Feature was merged into another, the ID of the preserved Feature

        :param merged_to_feature_id: The merged_to_feature_id of this Feature.
        :type merged_to_feature_id: int
        """

        self._merged_to_feature_id = merged_to_feature_id

    @property
    def planned_at(self):
        """Gets the planned_at of this Feature.


        :return: The planned_at of this Feature.
        :rtype: str
        """
        return self._planned_at

    @planned_at.setter
    def planned_at(self, planned_at):
        """Sets the planned_at of this Feature.


        :param planned_at: The planned_at of this Feature.
        :type planned_at: str
        """

        self._planned_at = planned_at

    @property
    def products(self):
        """Gets the products of this Feature.


        :return: The products of this Feature.
        :rtype: List[str]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Feature.


        :param products: The products of this Feature.
        :type products: List[str]
        """

        self._products = products

    @property
    def released_at(self):
        """Gets the released_at of this Feature.


        :return: The released_at of this Feature.
        :rtype: str
        """
        return self._released_at

    @released_at.setter
    def released_at(self, released_at):
        """Sets the released_at of this Feature.


        :param released_at: The released_at of this Feature.
        :type released_at: str
        """

        self._released_at = released_at

    @property
    def resolution(self):
        """Gets the resolution of this Feature.

        The latest Resolution set by the VendorUser

        :return: The resolution of this Feature.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Feature.

        The latest Resolution set by the VendorUser

        :param resolution: The resolution of this Feature.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def resolved_by_user_id(self):
        """Gets the resolved_by_user_id of this Feature.


        :return: The resolved_by_user_id of this Feature.
        :rtype: int
        """
        return self._resolved_by_user_id

    @resolved_by_user_id.setter
    def resolved_by_user_id(self, resolved_by_user_id):
        """Sets the resolved_by_user_id of this Feature.


        :param resolved_by_user_id: The resolved_by_user_id of this Feature.
        :type resolved_by_user_id: int
        """

        self._resolved_by_user_id = resolved_by_user_id

    @property
    def status(self):
        """Gets the status of this Feature.


        :return: The status of this Feature.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Feature.


        :param status: The status of this Feature.
        :type status: str
        """
        allowed_values = ["new", "waiting", "planned", "developing", "released", "declined"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_changed_at(self):
        """Gets the status_changed_at of this Feature.


        :return: The status_changed_at of this Feature.
        :rtype: str
        """
        return self._status_changed_at

    @status_changed_at.setter
    def status_changed_at(self, status_changed_at):
        """Sets the status_changed_at of this Feature.


        :param status_changed_at: The status_changed_at of this Feature.
        :type status_changed_at: str
        """

        self._status_changed_at = status_changed_at

    @property
    def tags(self):
        """Gets the tags of this Feature.

        Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: ['Foo', 'Bar'].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {'Color':['Red', 'Yellow']},  {'Flavor':['Cherry']} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > 

        :return: The tags of this Feature.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Feature.

        Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: ['Foo', 'Bar'].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {'Color':['Red', 'Yellow']},  {'Flavor':['Cherry']} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > 

        :param tags: The tags of this Feature.
        :type tags: object
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Feature.


        :return: The title of this Feature.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Feature.


        :param title: The title of this Feature.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Feature.


        :return: The updated_at of this Feature.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Feature.


        :param updated_at: The updated_at of this Feature.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def updated_by_user_id(self):
        """Gets the updated_by_user_id of this Feature.


        :return: The updated_by_user_id of this Feature.
        :rtype: int
        """
        return self._updated_by_user_id

    @updated_by_user_id.setter
    def updated_by_user_id(self, updated_by_user_id):
        """Sets the updated_by_user_id of this Feature.


        :param updated_by_user_id: The updated_by_user_id of this Feature.
        :type updated_by_user_id: int
        """

        self._updated_by_user_id = updated_by_user_id

    @property
    def uploads(self):
        """Gets the uploads of this Feature.


        :return: The uploads of this Feature.
        :rtype: List[str]
        """
        return self._uploads

    @uploads.setter
    def uploads(self, uploads):
        """Sets the uploads of this Feature.


        :param uploads: The uploads of this Feature.
        :type uploads: List[str]
        """

        self._uploads = uploads

    @property
    def vendor_id(self):
        """Gets the vendor_id of this Feature.


        :return: The vendor_id of this Feature.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this Feature.


        :param vendor_id: The vendor_id of this Feature.
        :type vendor_id: int
        """

        self._vendor_id = vendor_id

    @property
    def view_count(self):
        """Gets the view_count of this Feature.

        How many times has this Feature been viewed. May only be visible to VendorUsers, depending on config

        :return: The view_count of this Feature.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this Feature.

        How many times has this Feature been viewed. May only be visible to VendorUsers, depending on config

        :param view_count: The view_count of this Feature.
        :type view_count: int
        """

        self._view_count = view_count

    @property
    def waiting_at(self):
        """Gets the waiting_at of this Feature.


        :return: The waiting_at of this Feature.
        :rtype: str
        """
        return self._waiting_at

    @waiting_at.setter
    def waiting_at(self, waiting_at):
        """Sets the waiting_at of this Feature.


        :param waiting_at: The waiting_at of this Feature.
        :type waiting_at: str
        """

        self._waiting_at = waiting_at
