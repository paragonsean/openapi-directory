/*
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.EndUserPing;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UsersIdPutRequest;
import org.openapitools.client.model.UsersInviteEndUserPostRequest;
import org.openapitools.client.model.UsersInviteVendorUserPostRequest;
import org.openapitools.client.model.VendorUsersPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * fetch User records
     *
     * get a list of User records
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String role = null;
        Integer account = null;
        Integer start = null;
        Integer limit = null;
        String orderBy = null;
        String orderDir = null;
        List<User> response = api.usersGet(role, account, start, limit, orderBy, orderDir);
        // TODO: test validations
    }

    /**
     * Delete a User
     *
     * This removes most traces of a User&#39;s existence from the system. For an EndUser you might want to consider just letting them churn after a period of inactivity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdDeleteTest() throws ApiException {
        BigDecimal id = null;
        User response = api.usersIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get a User record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdGetTest() throws ApiException {
        BigDecimal id = null;
        User response = api.usersIdGet(id);
        // TODO: test validations
    }

    /**
     * Update a User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdPutTest() throws ApiException {
        BigDecimal id = null;
        UsersIdPutRequest user = null;
        User response = api.usersIdPut(id, user);
        // TODO: test validations
    }

    /**
     * Delete custom User tags
     *
     * Removes all custom tags associated with the User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdTagsDeleteTest() throws ApiException {
        BigDecimal id = null;
        api.usersIdTagsDelete(id);
        // TODO: test validations
    }

    /**
     * Get custom User tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdTagsGetTest() throws ApiException {
        BigDecimal id = null;
        api.usersIdTagsGet(id);
        // TODO: test validations
    }

    /**
     * Overwrite current custom User tags with the given tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdTagsPostTest() throws ApiException {
        BigDecimal id = null;
        Object tags = null;
        api.usersIdTagsPost(id, tags);
        // TODO: test validations
    }

    /**
     * Invite an EndUser (customer)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersInviteEndUserPostTest() throws ApiException {
        UsersInviteEndUserPostRequest data = null;
        api.usersInviteEndUserPost(data);
        // TODO: test validations
    }

    /**
     * Invite a VendorUser (Team member)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersInviteVendorUserPostTest() throws ApiException {
        UsersInviteVendorUserPostRequest data = null;
        api.usersInviteVendorUserPost(data);
        // TODO: test validations
    }

    /**
     * Ping to create or update an EndUser and Account in one call
     *
     * Replicates much of the functionality of the widget ping, allowing callers to create or update User records for End Users. If you call this with a new User and/or Account, the record will be created. If you call for an existing User/Account, the record will be updated. You can also call this at EndUser login time, or more frequently, to notify Feedback that the EndUser has been seen. This keeps Feedback&#39;s &#39;last seen&#39; data fresh and updates your reporting. This endpoint is used by our Zapier integration. The only value allowed in user.roles is &#39;endUser&#39;. The id you supply here for the User and Account should be your own unique id, which Feedback calls external_id. This probably isn&#39;t the same as Feedback&#39;s id seen elsewhere in the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        EndUserPing data = null;
        api.usersPost(data);
        // TODO: test validations
    }

    /**
     * Find a User with a query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSearchGetTest() throws ApiException {
        String externalId = null;
        String email = null;
        String role = null;
        User response = api.usersSearchGet(externalId, email, role);
        // TODO: test validations
    }

    /**
     * Create or update a team member by their external_id
     *
     * the POST /vendor_users is very similar to the POST /users/invite_vendor_user but /vendor_users is intended for consumers to refresh team member data periodically, rather than just a one-off user creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vendorUsersPostTest() throws ApiException {
        VendorUsersPostRequest data = null;
        api.vendorUsersPost(data);
        // TODO: test validations
    }

}
