/*
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersInviteEndUserPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:13.433021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsersInviteEndUserPostRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_EXTERNAL_ID = "account_external_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_EXTERNAL_ID)
  private String accountExternalId;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "account_name";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  /**
   * Gets or Sets accountStatus
   */
  @JsonAdapter(AccountStatusEnum.Adapter.class)
  public enum AccountStatusEnum {
    PROSPECT("prospect"),
    
    NOT_PAYING("not_paying"),
    
    PAYING("paying");

    private String value;

    AccountStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountStatusEnum fromValue(String value) {
      for (AccountStatusEnum b : AccountStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_STATUS = "account_status";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS)
  private AccountStatusEnum accountStatus;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_MONTHLY_VALUE = "monthly_value";
  @SerializedName(SERIALIZED_NAME_MONTHLY_VALUE)
  private Float monthlyValue;

  public static final String SERIALIZED_NAME_SEND_INVITE = "send_invite";
  @SerializedName(SERIALIZED_NAME_SEND_INVITE)
  private Boolean sendInvite;

  public static final String SERIALIZED_NAME_USER_EXTERNAL_ID = "user_external_id";
  @SerializedName(SERIALIZED_NAME_USER_EXTERNAL_ID)
  private String userExternalId;

  public UsersInviteEndUserPostRequest() {
  }

  public UsersInviteEndUserPostRequest accountExternalId(String accountExternalId) {
    this.accountExternalId = accountExternalId;
    return this;
  }

  /**
   * Get accountExternalId
   * @return accountExternalId
   */
  @javax.annotation.Nullable
  public String getAccountExternalId() {
    return accountExternalId;
  }

  public void setAccountExternalId(String accountExternalId) {
    this.accountExternalId = accountExternalId;
  }


  public UsersInviteEndUserPostRequest accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public UsersInviteEndUserPostRequest accountStatus(AccountStatusEnum accountStatus) {
    this.accountStatus = accountStatus;
    return this;
  }

  /**
   * Get accountStatus
   * @return accountStatus
   */
  @javax.annotation.Nonnull
  public AccountStatusEnum getAccountStatus() {
    return accountStatus;
  }

  public void setAccountStatus(AccountStatusEnum accountStatus) {
    this.accountStatus = accountStatus;
  }


  public UsersInviteEndUserPostRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UsersInviteEndUserPostRequest fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public UsersInviteEndUserPostRequest monthlyValue(Float monthlyValue) {
    this.monthlyValue = monthlyValue;
    return this;
  }

  /**
   * Get monthlyValue
   * @return monthlyValue
   */
  @javax.annotation.Nullable
  public Float getMonthlyValue() {
    return monthlyValue;
  }

  public void setMonthlyValue(Float monthlyValue) {
    this.monthlyValue = monthlyValue;
  }


  public UsersInviteEndUserPostRequest sendInvite(Boolean sendInvite) {
    this.sendInvite = sendInvite;
    return this;
  }

  /**
   * Get sendInvite
   * @return sendInvite
   */
  @javax.annotation.Nullable
  public Boolean getSendInvite() {
    return sendInvite;
  }

  public void setSendInvite(Boolean sendInvite) {
    this.sendInvite = sendInvite;
  }


  public UsersInviteEndUserPostRequest userExternalId(String userExternalId) {
    this.userExternalId = userExternalId;
    return this;
  }

  /**
   * Get userExternalId
   * @return userExternalId
   */
  @javax.annotation.Nullable
  public String getUserExternalId() {
    return userExternalId;
  }

  public void setUserExternalId(String userExternalId) {
    this.userExternalId = userExternalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersInviteEndUserPostRequest usersInviteEndUserPostRequest = (UsersInviteEndUserPostRequest) o;
    return Objects.equals(this.accountExternalId, usersInviteEndUserPostRequest.accountExternalId) &&
        Objects.equals(this.accountName, usersInviteEndUserPostRequest.accountName) &&
        Objects.equals(this.accountStatus, usersInviteEndUserPostRequest.accountStatus) &&
        Objects.equals(this.email, usersInviteEndUserPostRequest.email) &&
        Objects.equals(this.fullName, usersInviteEndUserPostRequest.fullName) &&
        Objects.equals(this.monthlyValue, usersInviteEndUserPostRequest.monthlyValue) &&
        Objects.equals(this.sendInvite, usersInviteEndUserPostRequest.sendInvite) &&
        Objects.equals(this.userExternalId, usersInviteEndUserPostRequest.userExternalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountExternalId, accountName, accountStatus, email, fullName, monthlyValue, sendInvite, userExternalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersInviteEndUserPostRequest {\n");
    sb.append("    accountExternalId: ").append(toIndentedString(accountExternalId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountStatus: ").append(toIndentedString(accountStatus)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    monthlyValue: ").append(toIndentedString(monthlyValue)).append("\n");
    sb.append("    sendInvite: ").append(toIndentedString(sendInvite)).append("\n");
    sb.append("    userExternalId: ").append(toIndentedString(userExternalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_external_id");
    openapiFields.add("account_name");
    openapiFields.add("account_status");
    openapiFields.add("email");
    openapiFields.add("full_name");
    openapiFields.add("monthly_value");
    openapiFields.add("send_invite");
    openapiFields.add("user_external_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsersInviteEndUserPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsersInviteEndUserPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersInviteEndUserPostRequest is not found in the empty JSON string", UsersInviteEndUserPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsersInviteEndUserPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersInviteEndUserPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersInviteEndUserPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_external_id") != null && !jsonObj.get("account_external_id").isJsonNull()) && !jsonObj.get("account_external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_external_id").toString()));
      }
      if ((jsonObj.get("account_name") != null && !jsonObj.get("account_name").isJsonNull()) && !jsonObj.get("account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_name").toString()));
      }
      if (!jsonObj.get("account_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_status").toString()));
      }
      // validate the required field `account_status`
      AccountStatusEnum.validateJsonElement(jsonObj.get("account_status"));
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("user_external_id") != null && !jsonObj.get("user_external_id").isJsonNull()) && !jsonObj.get("user_external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_external_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersInviteEndUserPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersInviteEndUserPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersInviteEndUserPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersInviteEndUserPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersInviteEndUserPostRequest>() {
           @Override
           public void write(JsonWriter out, UsersInviteEndUserPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersInviteEndUserPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsersInviteEndUserPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsersInviteEndUserPostRequest
   * @throws IOException if the JSON string is invalid with respect to UsersInviteEndUserPostRequest
   */
  public static UsersInviteEndUserPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersInviteEndUserPostRequest.class);
  }

  /**
   * Convert an instance of UsersInviteEndUserPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

