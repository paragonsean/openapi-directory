/*
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Vote;
import org.openapitools.client.model.VotesPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VotesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VotesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for votesGet
     * @param userId Include only votes by User that voted on a feature. (optional)
     * @param featureId Include only votes for Feature with this Feature ID (optional)
     * @param positive Include only votes that are positive (optional)
     * @param negative Include only votes that are negative (optional)
     * @param offset Offset to start at (optional)
     * @param limit Limit the number of records returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vote records </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesGetCall(Integer userId, Integer featureId, Boolean positive, Boolean negative, BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/votes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (featureId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feature_id", featureId));
        }

        if (positive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positive", positive));
        }

        if (negative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("negative", negative));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call votesGetValidateBeforeCall(Integer userId, Integer featureId, Boolean positive, Boolean negative, BigDecimal offset, BigDecimal limit, final ApiCallback _callback) throws ApiException {
        return votesGetCall(userId, featureId, positive, negative, offset, limit, _callback);

    }

    /**
     * 
     * 
     * @param userId Include only votes by User that voted on a feature. (optional)
     * @param featureId Include only votes for Feature with this Feature ID (optional)
     * @param positive Include only votes that are positive (optional)
     * @param negative Include only votes that are negative (optional)
     * @param offset Offset to start at (optional)
     * @param limit Limit the number of records returned (optional)
     * @return List&lt;Vote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vote records </td><td>  -  </td></tr>
     </table>
     */
    public List<Vote> votesGet(Integer userId, Integer featureId, Boolean positive, Boolean negative, BigDecimal offset, BigDecimal limit) throws ApiException {
        ApiResponse<List<Vote>> localVarResp = votesGetWithHttpInfo(userId, featureId, positive, negative, offset, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Include only votes by User that voted on a feature. (optional)
     * @param featureId Include only votes for Feature with this Feature ID (optional)
     * @param positive Include only votes that are positive (optional)
     * @param negative Include only votes that are negative (optional)
     * @param offset Offset to start at (optional)
     * @param limit Limit the number of records returned (optional)
     * @return ApiResponse&lt;List&lt;Vote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vote records </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vote>> votesGetWithHttpInfo(Integer userId, Integer featureId, Boolean positive, Boolean negative, BigDecimal offset, BigDecimal limit) throws ApiException {
        okhttp3.Call localVarCall = votesGetValidateBeforeCall(userId, featureId, positive, negative, offset, limit, null);
        Type localVarReturnType = new TypeToken<List<Vote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Include only votes by User that voted on a feature. (optional)
     * @param featureId Include only votes for Feature with this Feature ID (optional)
     * @param positive Include only votes that are positive (optional)
     * @param negative Include only votes that are negative (optional)
     * @param offset Offset to start at (optional)
     * @param limit Limit the number of records returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vote records </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesGetAsync(Integer userId, Integer featureId, Boolean positive, Boolean negative, BigDecimal offset, BigDecimal limit, final ApiCallback<List<Vote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = votesGetValidateBeforeCall(userId, featureId, positive, negative, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Vote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for votesPost
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated votes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesPostCall(VotesPostRequest data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/votes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call votesPostValidateBeforeCall(VotesPostRequest data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling votesPost(Async)");
        }

        return votesPostCall(data, _callback);

    }

    /**
     * update specified votes for a User
     * Automatically subscribes/unsubscribes the User to the specifed feature depending on the quantity value
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated votes </td><td>  -  </td></tr>
     </table>
     */
    public void votesPost(VotesPostRequest data) throws ApiException {
        votesPostWithHttpInfo(data);
    }

    /**
     * update specified votes for a User
     * Automatically subscribes/unsubscribes the User to the specifed feature depending on the quantity value
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated votes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> votesPostWithHttpInfo(VotesPostRequest data) throws ApiException {
        okhttp3.Call localVarCall = votesPostValidateBeforeCall(data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update specified votes for a User (asynchronously)
     * Automatically subscribes/unsubscribes the User to the specifed feature depending on the quantity value
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated votes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call votesPostAsync(VotesPostRequest data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = votesPostValidateBeforeCall(data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
