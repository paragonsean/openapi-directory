/*
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Feature;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeatureApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeatureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeatureApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for featuresGet
     * @param limit Limit the number of records returned (optional)
     * @param start Offset to start at (optional)
     * @param orderDir The sort direction (optional)
     * @param isPrivate Filter by whether the features are shown/hidden from customer, if supplied. (optional)
     * @param wantedBy Filter by User ID, if supplied. (optional)
     * @param orderBy The field to use for sort (optional)
     * @param tags Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresGetCall(BigDecimal limit, BigDecimal start, String orderDir, Boolean isPrivate, Integer wantedBy, String orderBy, String tags, String products, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (orderDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_dir", orderDir));
        }

        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_private", isPrivate));
        }

        if (wantedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wanted_by", wantedBy));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (products != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("products", products));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresGetValidateBeforeCall(BigDecimal limit, BigDecimal start, String orderDir, Boolean isPrivate, Integer wantedBy, String orderBy, String tags, String products, final ApiCallback _callback) throws ApiException {
        return featuresGetCall(limit, start, orderDir, isPrivate, wantedBy, orderBy, tags, products, _callback);

    }

    /**
     * Query features
     * 
     * @param limit Limit the number of records returned (optional)
     * @param start Offset to start at (optional)
     * @param orderDir The sort direction (optional)
     * @param isPrivate Filter by whether the features are shown/hidden from customer, if supplied. (optional)
     * @param wantedBy Filter by User ID, if supplied. (optional)
     * @param orderBy The field to use for sort (optional)
     * @param tags Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @return List&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Feature> featuresGet(BigDecimal limit, BigDecimal start, String orderDir, Boolean isPrivate, Integer wantedBy, String orderBy, String tags, String products) throws ApiException {
        ApiResponse<List<Feature>> localVarResp = featuresGetWithHttpInfo(limit, start, orderDir, isPrivate, wantedBy, orderBy, tags, products);
        return localVarResp.getData();
    }

    /**
     * Query features
     * 
     * @param limit Limit the number of records returned (optional)
     * @param start Offset to start at (optional)
     * @param orderDir The sort direction (optional)
     * @param isPrivate Filter by whether the features are shown/hidden from customer, if supplied. (optional)
     * @param wantedBy Filter by User ID, if supplied. (optional)
     * @param orderBy The field to use for sort (optional)
     * @param tags Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Feature>> featuresGetWithHttpInfo(BigDecimal limit, BigDecimal start, String orderDir, Boolean isPrivate, Integer wantedBy, String orderBy, String tags, String products) throws ApiException {
        okhttp3.Call localVarCall = featuresGetValidateBeforeCall(limit, start, orderDir, isPrivate, wantedBy, orderBy, tags, products, null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query features (asynchronously)
     * 
     * @param limit Limit the number of records returned (optional)
     * @param start Offset to start at (optional)
     * @param orderDir The sort direction (optional)
     * @param isPrivate Filter by whether the features are shown/hidden from customer, if supplied. (optional)
     * @param wantedBy Filter by User ID, if supplied. (optional)
     * @param orderBy The field to use for sort (optional)
     * @param tags Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresGetAsync(BigDecimal limit, BigDecimal start, String orderDir, Boolean isPrivate, Integer wantedBy, String orderBy, String tags, String products, final ApiCallback<List<Feature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresGetValidateBeforeCall(limit, start, orderDir, isPrivate, wantedBy, orderBy, tags, products, _callback);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresIdGet
     * @param id ID of the feature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/features/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling featuresIdGet(Async)");
        }

        return featuresIdGetCall(id, _callback);

    }

    /**
     * Get a Feature by ID
     * 
     * @param id ID of the feature (required)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public Feature featuresIdGet(Integer id) throws ApiException {
        ApiResponse<Feature> localVarResp = featuresIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a Feature by ID
     * 
     * @param id ID of the feature (required)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Feature> featuresIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = featuresIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Feature by ID (asynchronously)
     * 
     * @param id ID of the feature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdGetAsync(Integer id, final ApiCallback<Feature> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresIdTagsDelete
     * @param id Feedback&#39;s Feature ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdTagsDeleteCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/features/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresIdTagsDeleteValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling featuresIdTagsDelete(Async)");
        }

        return featuresIdTagsDeleteCall(id, _callback);

    }

    /**
     * Delete custom Feature tags
     * Removes all custom tags associated with the Feature
     * @param id Feedback&#39;s Feature ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void featuresIdTagsDelete(BigDecimal id) throws ApiException {
        featuresIdTagsDeleteWithHttpInfo(id);
    }

    /**
     * Delete custom Feature tags
     * Removes all custom tags associated with the Feature
     * @param id Feedback&#39;s Feature ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> featuresIdTagsDeleteWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = featuresIdTagsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete custom Feature tags (asynchronously)
     * Removes all custom tags associated with the Feature
     * @param id Feedback&#39;s Feature ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdTagsDeleteAsync(BigDecimal id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresIdTagsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresIdTagsGet
     * @param id Account ID (generated by Feedback) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of maps specifying tags under each tag group, for example:  [  {&#39;impacts&#39; &#x3D;&gt; [&#39;sales&#39;]},  {&#39;resources&#39; &#x3D;&gt; [&#39;dev&#39;, &#39;test&#39;, &#39;support&#39;]}  ] </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdTagsGetCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/features/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresIdTagsGetValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling featuresIdTagsGet(Async)");
        }

        return featuresIdTagsGetCall(id, _callback);

    }

    /**
     * Get custom Feature tags
     * 
     * @param id Account ID (generated by Feedback) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of maps specifying tags under each tag group, for example:  [  {&#39;impacts&#39; &#x3D;&gt; [&#39;sales&#39;]},  {&#39;resources&#39; &#x3D;&gt; [&#39;dev&#39;, &#39;test&#39;, &#39;support&#39;]}  ] </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public void featuresIdTagsGet(BigDecimal id) throws ApiException {
        featuresIdTagsGetWithHttpInfo(id);
    }

    /**
     * Get custom Feature tags
     * 
     * @param id Account ID (generated by Feedback) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of maps specifying tags under each tag group, for example:  [  {&#39;impacts&#39; &#x3D;&gt; [&#39;sales&#39;]},  {&#39;resources&#39; &#x3D;&gt; [&#39;dev&#39;, &#39;test&#39;, &#39;support&#39;]}  ] </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> featuresIdTagsGetWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = featuresIdTagsGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get custom Feature tags (asynchronously)
     * 
     * @param id Account ID (generated by Feedback) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of maps specifying tags under each tag group, for example:  [  {&#39;impacts&#39; &#x3D;&gt; [&#39;sales&#39;]},  {&#39;resources&#39; &#x3D;&gt; [&#39;dev&#39;, &#39;test&#39;, &#39;support&#39;]}  ] </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdTagsGetAsync(BigDecimal id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresIdTagsGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresIdTagsPost
     * @param id Feedback&#39;s Feature ID (required)
     * @param tags  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Feature tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdTagsPostCall(BigDecimal id, Object tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tags;

        // create path and map variables
        String localVarPath = "/features/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresIdTagsPostValidateBeforeCall(BigDecimal id, Object tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling featuresIdTagsPost(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling featuresIdTagsPost(Async)");
        }

        return featuresIdTagsPostCall(id, tags, _callback);

    }

    /**
     * Overwrite current custom Feature tags with the given tags
     * 
     * @param id Feedback&#39;s Feature ID (required)
     * @param tags  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Feature tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public void featuresIdTagsPost(BigDecimal id, Object tags) throws ApiException {
        featuresIdTagsPostWithHttpInfo(id, tags);
    }

    /**
     * Overwrite current custom Feature tags with the given tags
     * 
     * @param id Feedback&#39;s Feature ID (required)
     * @param tags  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Feature tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> featuresIdTagsPostWithHttpInfo(BigDecimal id, Object tags) throws ApiException {
        okhttp3.Call localVarCall = featuresIdTagsPostValidateBeforeCall(id, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Overwrite current custom Feature tags with the given tags (asynchronously)
     * 
     * @param id Feedback&#39;s Feature ID (required)
     * @param tags  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Feature tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Feature not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresIdTagsPostAsync(BigDecimal id, Object tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresIdTagsPostValidateBeforeCall(id, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGet
     * @param scope Specifies the type of entity being searched for. Must be set to &#39;feature&#39; (required)
     * @param q The search term. (required)
     * @param status A comma seperated list of status values to filter by, if required. Valid values: &#39;new&#39;, &#39;waiting&#39;, &#39;planned&#39;, &#39;developing&#39;, &#39;released&#39;, &#39;declined&#39;. (optional)
     * @param tags Tags to limit results by - only applies when scope is &#39;case&#39; or &#39;feature&#39;. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGetCall(String scope, String q, String status, String tags, String products, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (products != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("products", products));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "userApiKey (request header)", "userApiKey (query parameter)" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGetValidateBeforeCall(String scope, String q, String status, String tags, String products, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling searchGet(Async)");
        }

        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchGet(Async)");
        }

        return searchGetCall(scope, q, status, tags, products, _callback);

    }

    /**
     * Search features
     * 
     * @param scope Specifies the type of entity being searched for. Must be set to &#39;feature&#39; (required)
     * @param q The search term. (required)
     * @param status A comma seperated list of status values to filter by, if required. Valid values: &#39;new&#39;, &#39;waiting&#39;, &#39;planned&#39;, &#39;developing&#39;, &#39;released&#39;, &#39;declined&#39;. (optional)
     * @param tags Tags to limit results by - only applies when scope is &#39;case&#39; or &#39;feature&#39;. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @return List&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Feature> searchGet(String scope, String q, String status, String tags, String products) throws ApiException {
        ApiResponse<List<Feature>> localVarResp = searchGetWithHttpInfo(scope, q, status, tags, products);
        return localVarResp.getData();
    }

    /**
     * Search features
     * 
     * @param scope Specifies the type of entity being searched for. Must be set to &#39;feature&#39; (required)
     * @param q The search term. (required)
     * @param status A comma seperated list of status values to filter by, if required. Valid values: &#39;new&#39;, &#39;waiting&#39;, &#39;planned&#39;, &#39;developing&#39;, &#39;released&#39;, &#39;declined&#39;. (optional)
     * @param tags Tags to limit results by - only applies when scope is &#39;case&#39; or &#39;feature&#39;. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Feature>> searchGetWithHttpInfo(String scope, String q, String status, String tags, String products) throws ApiException {
        okhttp3.Call localVarCall = searchGetValidateBeforeCall(scope, q, status, tags, products, null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search features (asynchronously)
     * 
     * @param scope Specifies the type of entity being searched for. Must be set to &#39;feature&#39; (required)
     * @param q The search term. (required)
     * @param status A comma seperated list of status values to filter by, if required. Valid values: &#39;new&#39;, &#39;waiting&#39;, &#39;planned&#39;, &#39;developing&#39;, &#39;released&#39;, &#39;declined&#39;. (optional)
     * @param tags Tags to limit results by - only applies when scope is &#39;case&#39; or &#39;feature&#39;. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \&quot;....&amp;tags&#x3D;TagExample,Multi:TagThis,Multi:TagThat\&quot;. (optional)
     * @param products Products to limit results by. Comma delimeted string of either ids or names. E.g. \&quot;...&amp;products&#x3D;1,2,3\&quot; or \&quot;...products&#x3D;Product1,Product2\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGetAsync(String scope, String q, String status, String tags, String products, final ApiCallback<List<Feature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGetValidateBeforeCall(scope, q, status, tags, products, _callback);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
