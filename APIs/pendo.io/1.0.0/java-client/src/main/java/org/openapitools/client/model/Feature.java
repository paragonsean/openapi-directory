/*
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Feature
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:13.433021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Feature {
  public static final String SERIALIZED_NAME_APP_URL = "app_url";
  @SerializedName(SERIALIZED_NAME_APP_URL)
  private String appUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_ID = "created_by_user_id";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_ID)
  private Integer createdByUserId;

  public static final String SERIALIZED_NAME_DECLINED_AT = "declined_at";
  @SerializedName(SERIALIZED_NAME_DECLINED_AT)
  private String declinedAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVELOPING_AT = "developing_at";
  @SerializedName(SERIALIZED_NAME_DEVELOPING_AT)
  private String developingAt;

  public static final String SERIALIZED_NAME_EFFORT = "effort";
  @SerializedName(SERIALIZED_NAME_EFFORT)
  private Integer effort;

  public static final String SERIALIZED_NAME_FORM_ENTRY = "form_entry";
  @SerializedName(SERIALIZED_NAME_FORM_ENTRY)
  private String formEntry;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "is_private";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_MERGED_TO_FEATURE_ID = "merged_to_feature_id";
  @SerializedName(SERIALIZED_NAME_MERGED_TO_FEATURE_ID)
  private Integer mergedToFeatureId;

  public static final String SERIALIZED_NAME_PLANNED_AT = "planned_at";
  @SerializedName(SERIALIZED_NAME_PLANNED_AT)
  private String plannedAt;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<String> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASED_AT = "released_at";
  @SerializedName(SERIALIZED_NAME_RELEASED_AT)
  private String releasedAt;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private String resolution;

  public static final String SERIALIZED_NAME_RESOLVED_BY_USER_ID = "resolved_by_user_id";
  @SerializedName(SERIALIZED_NAME_RESOLVED_BY_USER_ID)
  private Integer resolvedByUserId;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("new"),
    
    WAITING("waiting"),
    
    PLANNED("planned"),
    
    DEVELOPING("developing"),
    
    RELEASED("released"),
    
    DECLINED("declined");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_CHANGED_AT = "status_changed_at";
  @SerializedName(SERIALIZED_NAME_STATUS_CHANGED_AT)
  private String statusChangedAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Object tags;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY_USER_ID = "updated_by_user_id";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY_USER_ID)
  private Integer updatedByUserId;

  public static final String SERIALIZED_NAME_UPLOADS = "uploads";
  @SerializedName(SERIALIZED_NAME_UPLOADS)
  private List<String> uploads = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendor_id";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private Integer vendorId;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "view_count";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private Integer viewCount;

  public static final String SERIALIZED_NAME_WAITING_AT = "waiting_at";
  @SerializedName(SERIALIZED_NAME_WAITING_AT)
  private String waitingAt;

  public Feature() {
  }

  public Feature appUrl(String appUrl) {
    this.appUrl = appUrl;
    return this;
  }

  /**
   * URL for this Feature
   * @return appUrl
   */
  @javax.annotation.Nullable
  public String getAppUrl() {
    return appUrl;
  }

  public void setAppUrl(String appUrl) {
    this.appUrl = appUrl;
  }


  public Feature createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Feature createdByUserId(Integer createdByUserId) {
    this.createdByUserId = createdByUserId;
    return this;
  }

  /**
   * Get createdByUserId
   * @return createdByUserId
   */
  @javax.annotation.Nullable
  public Integer getCreatedByUserId() {
    return createdByUserId;
  }

  public void setCreatedByUserId(Integer createdByUserId) {
    this.createdByUserId = createdByUserId;
  }


  public Feature declinedAt(String declinedAt) {
    this.declinedAt = declinedAt;
    return this;
  }

  /**
   * Get declinedAt
   * @return declinedAt
   */
  @javax.annotation.Nullable
  public String getDeclinedAt() {
    return declinedAt;
  }

  public void setDeclinedAt(String declinedAt) {
    this.declinedAt = declinedAt;
  }


  public Feature description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Feature developingAt(String developingAt) {
    this.developingAt = developingAt;
    return this;
  }

  /**
   * Get developingAt
   * @return developingAt
   */
  @javax.annotation.Nullable
  public String getDevelopingAt() {
    return developingAt;
  }

  public void setDevelopingAt(String developingAt) {
    this.developingAt = developingAt;
  }


  public Feature effort(Integer effort) {
    this.effort = effort;
    return this;
  }

  /**
   * How much Effort is assigned to the development of this Feature. Not visible to EndUsers
   * @return effort
   */
  @javax.annotation.Nullable
  public Integer getEffort() {
    return effort;
  }

  public void setEffort(Integer effort) {
    this.effort = effort;
  }


  public Feature formEntry(String formEntry) {
    this.formEntry = formEntry;
    return this;
  }

  /**
   * a JSON serialized version of the Form containing the description and other fields for this Feature.
   * @return formEntry
   */
  @javax.annotation.Nullable
  public String getFormEntry() {
    return formEntry;
  }

  public void setFormEntry(String formEntry) {
    this.formEntry = formEntry;
  }


  public Feature id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public Feature isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Is this Feature hidden from EndUsers?
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public Feature mergedToFeatureId(Integer mergedToFeatureId) {
    this.mergedToFeatureId = mergedToFeatureId;
    return this;
  }

  /**
   * If this Feature was merged into another, the ID of the preserved Feature
   * @return mergedToFeatureId
   */
  @javax.annotation.Nullable
  public Integer getMergedToFeatureId() {
    return mergedToFeatureId;
  }

  public void setMergedToFeatureId(Integer mergedToFeatureId) {
    this.mergedToFeatureId = mergedToFeatureId;
  }


  public Feature plannedAt(String plannedAt) {
    this.plannedAt = plannedAt;
    return this;
  }

  /**
   * Get plannedAt
   * @return plannedAt
   */
  @javax.annotation.Nullable
  public String getPlannedAt() {
    return plannedAt;
  }

  public void setPlannedAt(String plannedAt) {
    this.plannedAt = plannedAt;
  }


  public Feature products(List<String> products) {
    this.products = products;
    return this;
  }

  public Feature addProductsItem(String productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public List<String> getProducts() {
    return products;
  }

  public void setProducts(List<String> products) {
    this.products = products;
  }


  public Feature releasedAt(String releasedAt) {
    this.releasedAt = releasedAt;
    return this;
  }

  /**
   * Get releasedAt
   * @return releasedAt
   */
  @javax.annotation.Nullable
  public String getReleasedAt() {
    return releasedAt;
  }

  public void setReleasedAt(String releasedAt) {
    this.releasedAt = releasedAt;
  }


  public Feature resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * The latest Resolution set by the VendorUser
   * @return resolution
   */
  @javax.annotation.Nullable
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }


  public Feature resolvedByUserId(Integer resolvedByUserId) {
    this.resolvedByUserId = resolvedByUserId;
    return this;
  }

  /**
   * Get resolvedByUserId
   * @return resolvedByUserId
   */
  @javax.annotation.Nullable
  public Integer getResolvedByUserId() {
    return resolvedByUserId;
  }

  public void setResolvedByUserId(Integer resolvedByUserId) {
    this.resolvedByUserId = resolvedByUserId;
  }


  public Feature status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Feature statusChangedAt(String statusChangedAt) {
    this.statusChangedAt = statusChangedAt;
    return this;
  }

  /**
   * Get statusChangedAt
   * @return statusChangedAt
   */
  @javax.annotation.Nullable
  public String getStatusChangedAt() {
    return statusChangedAt;
  }

  public void setStatusChangedAt(String statusChangedAt) {
    this.statusChangedAt = statusChangedAt;
  }


  public Feature tags(Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: [&#39;Foo&#39;, &#39;Bar&#39;].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {&#39;Color&#39;:[&#39;Red&#39;, &#39;Yellow&#39;]},  {&#39;Flavor&#39;:[&#39;Cherry&#39;]} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : &lt; &gt; 
   * @return tags
   */
  @javax.annotation.Nullable
  public Object getTags() {
    return tags;
  }

  public void setTags(Object tags) {
    this.tags = tags;
  }


  public Feature title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Feature updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Feature updatedByUserId(Integer updatedByUserId) {
    this.updatedByUserId = updatedByUserId;
    return this;
  }

  /**
   * Get updatedByUserId
   * @return updatedByUserId
   */
  @javax.annotation.Nullable
  public Integer getUpdatedByUserId() {
    return updatedByUserId;
  }

  public void setUpdatedByUserId(Integer updatedByUserId) {
    this.updatedByUserId = updatedByUserId;
  }


  public Feature uploads(List<String> uploads) {
    this.uploads = uploads;
    return this;
  }

  public Feature addUploadsItem(String uploadsItem) {
    if (this.uploads == null) {
      this.uploads = new ArrayList<>();
    }
    this.uploads.add(uploadsItem);
    return this;
  }

  /**
   * Get uploads
   * @return uploads
   */
  @javax.annotation.Nullable
  public List<String> getUploads() {
    return uploads;
  }

  public void setUploads(List<String> uploads) {
    this.uploads = uploads;
  }


  public Feature vendorId(Integer vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * Get vendorId
   * @return vendorId
   */
  @javax.annotation.Nullable
  public Integer getVendorId() {
    return vendorId;
  }

  public void setVendorId(Integer vendorId) {
    this.vendorId = vendorId;
  }


  public Feature viewCount(Integer viewCount) {
    this.viewCount = viewCount;
    return this;
  }

  /**
   * How many times has this Feature been viewed. May only be visible to VendorUsers, depending on config
   * @return viewCount
   */
  @javax.annotation.Nullable
  public Integer getViewCount() {
    return viewCount;
  }

  public void setViewCount(Integer viewCount) {
    this.viewCount = viewCount;
  }


  public Feature waitingAt(String waitingAt) {
    this.waitingAt = waitingAt;
    return this;
  }

  /**
   * Get waitingAt
   * @return waitingAt
   */
  @javax.annotation.Nullable
  public String getWaitingAt() {
    return waitingAt;
  }

  public void setWaitingAt(String waitingAt) {
    this.waitingAt = waitingAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feature feature = (Feature) o;
    return Objects.equals(this.appUrl, feature.appUrl) &&
        Objects.equals(this.createdAt, feature.createdAt) &&
        Objects.equals(this.createdByUserId, feature.createdByUserId) &&
        Objects.equals(this.declinedAt, feature.declinedAt) &&
        Objects.equals(this.description, feature.description) &&
        Objects.equals(this.developingAt, feature.developingAt) &&
        Objects.equals(this.effort, feature.effort) &&
        Objects.equals(this.formEntry, feature.formEntry) &&
        Objects.equals(this.id, feature.id) &&
        Objects.equals(this.isPrivate, feature.isPrivate) &&
        Objects.equals(this.mergedToFeatureId, feature.mergedToFeatureId) &&
        Objects.equals(this.plannedAt, feature.plannedAt) &&
        Objects.equals(this.products, feature.products) &&
        Objects.equals(this.releasedAt, feature.releasedAt) &&
        Objects.equals(this.resolution, feature.resolution) &&
        Objects.equals(this.resolvedByUserId, feature.resolvedByUserId) &&
        Objects.equals(this.status, feature.status) &&
        Objects.equals(this.statusChangedAt, feature.statusChangedAt) &&
        Objects.equals(this.tags, feature.tags) &&
        Objects.equals(this.title, feature.title) &&
        Objects.equals(this.updatedAt, feature.updatedAt) &&
        Objects.equals(this.updatedByUserId, feature.updatedByUserId) &&
        Objects.equals(this.uploads, feature.uploads) &&
        Objects.equals(this.vendorId, feature.vendorId) &&
        Objects.equals(this.viewCount, feature.viewCount) &&
        Objects.equals(this.waitingAt, feature.waitingAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appUrl, createdAt, createdByUserId, declinedAt, description, developingAt, effort, formEntry, id, isPrivate, mergedToFeatureId, plannedAt, products, releasedAt, resolution, resolvedByUserId, status, statusChangedAt, tags, title, updatedAt, updatedByUserId, uploads, vendorId, viewCount, waitingAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feature {\n");
    sb.append("    appUrl: ").append(toIndentedString(appUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdByUserId: ").append(toIndentedString(createdByUserId)).append("\n");
    sb.append("    declinedAt: ").append(toIndentedString(declinedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    developingAt: ").append(toIndentedString(developingAt)).append("\n");
    sb.append("    effort: ").append(toIndentedString(effort)).append("\n");
    sb.append("    formEntry: ").append(toIndentedString(formEntry)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    mergedToFeatureId: ").append(toIndentedString(mergedToFeatureId)).append("\n");
    sb.append("    plannedAt: ").append(toIndentedString(plannedAt)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    releasedAt: ").append(toIndentedString(releasedAt)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    resolvedByUserId: ").append(toIndentedString(resolvedByUserId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusChangedAt: ").append(toIndentedString(statusChangedAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedByUserId: ").append(toIndentedString(updatedByUserId)).append("\n");
    sb.append("    uploads: ").append(toIndentedString(uploads)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    waitingAt: ").append(toIndentedString(waitingAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_url");
    openapiFields.add("created_at");
    openapiFields.add("created_by_user_id");
    openapiFields.add("declined_at");
    openapiFields.add("description");
    openapiFields.add("developing_at");
    openapiFields.add("effort");
    openapiFields.add("form_entry");
    openapiFields.add("id");
    openapiFields.add("is_private");
    openapiFields.add("merged_to_feature_id");
    openapiFields.add("planned_at");
    openapiFields.add("products");
    openapiFields.add("released_at");
    openapiFields.add("resolution");
    openapiFields.add("resolved_by_user_id");
    openapiFields.add("status");
    openapiFields.add("status_changed_at");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("updated_by_user_id");
    openapiFields.add("uploads");
    openapiFields.add("vendor_id");
    openapiFields.add("view_count");
    openapiFields.add("waiting_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Feature
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Feature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feature is not found in the empty JSON string", Feature.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Feature.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feature` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("app_url") != null && !jsonObj.get("app_url").isJsonNull()) && !jsonObj.get("app_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("declined_at") != null && !jsonObj.get("declined_at").isJsonNull()) && !jsonObj.get("declined_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `declined_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("declined_at").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("developing_at") != null && !jsonObj.get("developing_at").isJsonNull()) && !jsonObj.get("developing_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developing_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developing_at").toString()));
      }
      if ((jsonObj.get("form_entry") != null && !jsonObj.get("form_entry").isJsonNull()) && !jsonObj.get("form_entry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_entry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_entry").toString()));
      }
      if ((jsonObj.get("planned_at") != null && !jsonObj.get("planned_at").isJsonNull()) && !jsonObj.get("planned_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planned_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planned_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      if ((jsonObj.get("released_at") != null && !jsonObj.get("released_at").isJsonNull()) && !jsonObj.get("released_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `released_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("released_at").toString()));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("status_changed_at") != null && !jsonObj.get("status_changed_at").isJsonNull()) && !jsonObj.get("status_changed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_changed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_changed_at").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uploads") != null && !jsonObj.get("uploads").isJsonNull() && !jsonObj.get("uploads").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploads` to be an array in the JSON string but got `%s`", jsonObj.get("uploads").toString()));
      }
      if ((jsonObj.get("waiting_at") != null && !jsonObj.get("waiting_at").isJsonNull()) && !jsonObj.get("waiting_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waiting_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waiting_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feature.class));

       return (TypeAdapter<T>) new TypeAdapter<Feature>() {
           @Override
           public void write(JsonWriter out, Feature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feature read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Feature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Feature
   * @throws IOException if the JSON string is invalid with respect to Feature
   */
  public static Feature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feature.class);
  }

  /**
   * Convert an instance of Feature to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

