/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Vote from '../model/Vote';
import VotesPostRequest from '../model/VotesPostRequest';

/**
* Votes service.
* @module api/VotesApi
* @version 1.0.0
*/
export default class VotesApi {

    /**
    * Constructs a new VotesApi. 
    * @alias module:api/VotesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the votesGet operation.
     * @callback module:api/VotesApi~votesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vote>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] Include only votes by User that voted on a feature.
     * @param {Number} [featureId] Include only votes for Feature with this Feature ID
     * @param {Boolean} [positive] Include only votes that are positive
     * @param {Boolean} [negative] Include only votes that are negative
     * @param {Number} [offset] Offset to start at
     * @param {Number} [limit] Limit the number of records returned
     * @param {module:api/VotesApi~votesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vote>}
     */
    votesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'feature_id': opts['featureId'],
        'positive': opts['positive'],
        'negative': opts['negative'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vote];
      return this.apiClient.callApi(
        '/votes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the votesPost operation.
     * @callback module:api/VotesApi~votesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update specified votes for a User
     * Automatically subscribes/unsubscribes the User to the specifed feature depending on the quantity value
     * @param {module:model/VotesPostRequest} data 
     * @param {module:api/VotesApi~votesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    votesPost(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling votesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/votes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
