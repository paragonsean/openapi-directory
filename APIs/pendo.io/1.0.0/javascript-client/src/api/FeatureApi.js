/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Feature from '../model/Feature';

/**
* Feature service.
* @module api/FeatureApi
* @version 1.0.0
*/
export default class FeatureApi {

    /**
    * Constructs a new FeatureApi. 
    * @alias module:api/FeatureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the featuresGet operation.
     * @callback module:api/FeatureApi~featuresGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feature>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query features
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit the number of records returned
     * @param {Number} [start] Offset to start at
     * @param {module:model/String} [orderDir] The sort direction
     * @param {Boolean} [isPrivate] Filter by whether the features are shown/hidden from customer, if supplied.
     * @param {Number} [wantedBy] Filter by User ID, if supplied.
     * @param {module:model/String} [orderBy] The field to use for sort
     * @param {String} [tags] Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\".
     * @param {String} [products] Products to limit results by. Comma delimeted string of either ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\".
     * @param {module:api/FeatureApi~featuresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feature>}
     */
    featuresGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'start': opts['start'],
        'order_dir': opts['orderDir'],
        'is_private': opts['isPrivate'],
        'wanted_by': opts['wantedBy'],
        'order_by': opts['orderBy'],
        'tags': opts['tags'],
        'products': opts['products']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Feature];
      return this.apiClient.callApi(
        '/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresIdGet operation.
     * @callback module:api/FeatureApi~featuresIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Feature by ID
     * @param {Number} id ID of the feature
     * @param {module:api/FeatureApi~featuresIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feature}
     */
    featuresIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling featuresIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Feature;
      return this.apiClient.callApi(
        '/features/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresIdTagsDelete operation.
     * @callback module:api/FeatureApi~featuresIdTagsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete custom Feature tags
     * Removes all custom tags associated with the Feature
     * @param {Number} id Feedback's Feature ID
     * @param {module:api/FeatureApi~featuresIdTagsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featuresIdTagsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling featuresIdTagsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/features/{id}/tags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresIdTagsGet operation.
     * @callback module:api/FeatureApi~featuresIdTagsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom Feature tags
     * @param {Number} id Account ID (generated by Feedback)
     * @param {module:api/FeatureApi~featuresIdTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featuresIdTagsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling featuresIdTagsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/features/{id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresIdTagsPost operation.
     * @callback module:api/FeatureApi~featuresIdTagsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Overwrite current custom Feature tags with the given tags
     * @param {Number} id Feedback's Feature ID
     * @param {Object.<String, Object>} tags 
     * @param {module:api/FeatureApi~featuresIdTagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featuresIdTagsPost(id, tags, callback) {
      let postBody = tags;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling featuresIdTagsPost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling featuresIdTagsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/features/{id}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGet operation.
     * @callback module:api/FeatureApi~searchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feature>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search features
     * @param {module:model/String} scope Specifies the type of entity being searched for. Must be set to 'feature'
     * @param {String} q The search term.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] A comma seperated list of status values to filter by, if required. Valid values: 'new', 'waiting', 'planned', 'developing', 'released', 'declined'.
     * @param {String} [tags] Tags to limit results by - only applies when scope is 'case' or 'feature'. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\".
     * @param {String} [products] Products to limit results by. Comma delimeted string of either ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\".
     * @param {module:api/FeatureApi~searchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feature>}
     */
    searchGet(scope, q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchGet");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'scope': scope,
        'q': q,
        'status': opts['status'],
        'tags': opts['tags'],
        'products': opts['products']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['userApiKey (request header)', 'userApiKey (query parameter)'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Feature];
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
