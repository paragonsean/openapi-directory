/**
 * Pendo Feedback API
 * ## Who is this for?  This documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.  ## Authentication  API calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.  ## Endpoint  API endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.  ## Notes  API endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.  ## Generating client code  This documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@receptive.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Feature model module.
 * @module model/Feature
 * @version 1.0.0
 */
class Feature {
    /**
     * Constructs a new <code>Feature</code>.
     * @alias module:model/Feature
     */
    constructor() { 
        
        Feature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feature} obj Optional instance to populate.
     * @return {module:model/Feature} The populated <code>Feature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feature();

            if (data.hasOwnProperty('app_url')) {
                obj['app_url'] = ApiClient.convertToType(data['app_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('created_by_user_id')) {
                obj['created_by_user_id'] = ApiClient.convertToType(data['created_by_user_id'], 'Number');
            }
            if (data.hasOwnProperty('declined_at')) {
                obj['declined_at'] = ApiClient.convertToType(data['declined_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('developing_at')) {
                obj['developing_at'] = ApiClient.convertToType(data['developing_at'], 'String');
            }
            if (data.hasOwnProperty('effort')) {
                obj['effort'] = ApiClient.convertToType(data['effort'], 'Number');
            }
            if (data.hasOwnProperty('form_entry')) {
                obj['form_entry'] = ApiClient.convertToType(data['form_entry'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_private')) {
                obj['is_private'] = ApiClient.convertToType(data['is_private'], 'Boolean');
            }
            if (data.hasOwnProperty('merged_to_feature_id')) {
                obj['merged_to_feature_id'] = ApiClient.convertToType(data['merged_to_feature_id'], 'Number');
            }
            if (data.hasOwnProperty('planned_at')) {
                obj['planned_at'] = ApiClient.convertToType(data['planned_at'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], ['String']);
            }
            if (data.hasOwnProperty('released_at')) {
                obj['released_at'] = ApiClient.convertToType(data['released_at'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('resolved_by_user_id')) {
                obj['resolved_by_user_id'] = ApiClient.convertToType(data['resolved_by_user_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_changed_at')) {
                obj['status_changed_at'] = ApiClient.convertToType(data['status_changed_at'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('updated_by_user_id')) {
                obj['updated_by_user_id'] = ApiClient.convertToType(data['updated_by_user_id'], 'Number');
            }
            if (data.hasOwnProperty('uploads')) {
                obj['uploads'] = ApiClient.convertToType(data['uploads'], ['String']);
            }
            if (data.hasOwnProperty('vendor_id')) {
                obj['vendor_id'] = ApiClient.convertToType(data['vendor_id'], 'Number');
            }
            if (data.hasOwnProperty('view_count')) {
                obj['view_count'] = ApiClient.convertToType(data['view_count'], 'Number');
            }
            if (data.hasOwnProperty('waiting_at')) {
                obj['waiting_at'] = ApiClient.convertToType(data['waiting_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['app_url'] && !(typeof data['app_url'] === 'string' || data['app_url'] instanceof String)) {
            throw new Error("Expected the field `app_url` to be a primitive type in the JSON string but got " + data['app_url']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['declined_at'] && !(typeof data['declined_at'] === 'string' || data['declined_at'] instanceof String)) {
            throw new Error("Expected the field `declined_at` to be a primitive type in the JSON string but got " + data['declined_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['developing_at'] && !(typeof data['developing_at'] === 'string' || data['developing_at'] instanceof String)) {
            throw new Error("Expected the field `developing_at` to be a primitive type in the JSON string but got " + data['developing_at']);
        }
        // ensure the json data is a string
        if (data['form_entry'] && !(typeof data['form_entry'] === 'string' || data['form_entry'] instanceof String)) {
            throw new Error("Expected the field `form_entry` to be a primitive type in the JSON string but got " + data['form_entry']);
        }
        // ensure the json data is a string
        if (data['planned_at'] && !(typeof data['planned_at'] === 'string' || data['planned_at'] instanceof String)) {
            throw new Error("Expected the field `planned_at` to be a primitive type in the JSON string but got " + data['planned_at']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is a string
        if (data['released_at'] && !(typeof data['released_at'] === 'string' || data['released_at'] instanceof String)) {
            throw new Error("Expected the field `released_at` to be a primitive type in the JSON string but got " + data['released_at']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_changed_at'] && !(typeof data['status_changed_at'] === 'string' || data['status_changed_at'] instanceof String)) {
            throw new Error("Expected the field `status_changed_at` to be a primitive type in the JSON string but got " + data['status_changed_at']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uploads'])) {
            throw new Error("Expected the field `uploads` to be an array in the JSON data but got " + data['uploads']);
        }
        // ensure the json data is a string
        if (data['waiting_at'] && !(typeof data['waiting_at'] === 'string' || data['waiting_at'] instanceof String)) {
            throw new Error("Expected the field `waiting_at` to be a primitive type in the JSON string but got " + data['waiting_at']);
        }

        return true;
    }


}



/**
 * URL for this Feature
 * @member {String} app_url
 */
Feature.prototype['app_url'] = undefined;

/**
 * @member {String} created_at
 */
Feature.prototype['created_at'] = undefined;

/**
 * @member {Number} created_by_user_id
 */
Feature.prototype['created_by_user_id'] = undefined;

/**
 * @member {String} declined_at
 */
Feature.prototype['declined_at'] = undefined;

/**
 * @member {String} description
 */
Feature.prototype['description'] = undefined;

/**
 * @member {String} developing_at
 */
Feature.prototype['developing_at'] = undefined;

/**
 * How much Effort is assigned to the development of this Feature. Not visible to EndUsers
 * @member {Number} effort
 */
Feature.prototype['effort'] = undefined;

/**
 * a JSON serialized version of the Form containing the description and other fields for this Feature.
 * @member {String} form_entry
 */
Feature.prototype['form_entry'] = undefined;

/**
 * @member {Number} id
 */
Feature.prototype['id'] = undefined;

/**
 * Is this Feature hidden from EndUsers?
 * @member {Boolean} is_private
 */
Feature.prototype['is_private'] = undefined;

/**
 * If this Feature was merged into another, the ID of the preserved Feature
 * @member {Number} merged_to_feature_id
 */
Feature.prototype['merged_to_feature_id'] = undefined;

/**
 * @member {String} planned_at
 */
Feature.prototype['planned_at'] = undefined;

/**
 * @member {Array.<String>} products
 */
Feature.prototype['products'] = undefined;

/**
 * @member {String} released_at
 */
Feature.prototype['released_at'] = undefined;

/**
 * The latest Resolution set by the VendorUser
 * @member {String} resolution
 */
Feature.prototype['resolution'] = undefined;

/**
 * @member {Number} resolved_by_user_id
 */
Feature.prototype['resolved_by_user_id'] = undefined;

/**
 * @member {module:model/Feature.StatusEnum} status
 */
Feature.prototype['status'] = undefined;

/**
 * @member {String} status_changed_at
 */
Feature.prototype['status_changed_at'] = undefined;

/**
 * Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings Simple Tag Example: ['Foo', 'Bar'].  To put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g Categorised Tag Example: [ {'Color':['Red', 'Yellow']},  {'Flavor':['Cherry']} ]  Simple and categorised tags can be mixed in the same array. Below validations are done on the tag values of both simple and categorised tags: 1. Tag values must be strings 2. Tags must be at least 2 characters in length 3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > 
 * @member {Object} tags
 */
Feature.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
Feature.prototype['title'] = undefined;

/**
 * @member {String} updated_at
 */
Feature.prototype['updated_at'] = undefined;

/**
 * @member {Number} updated_by_user_id
 */
Feature.prototype['updated_by_user_id'] = undefined;

/**
 * @member {Array.<String>} uploads
 */
Feature.prototype['uploads'] = undefined;

/**
 * @member {Number} vendor_id
 */
Feature.prototype['vendor_id'] = undefined;

/**
 * How many times has this Feature been viewed. May only be visible to VendorUsers, depending on config
 * @member {Number} view_count
 */
Feature.prototype['view_count'] = undefined;

/**
 * @member {String} waiting_at
 */
Feature.prototype['waiting_at'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Feature['StatusEnum'] = {

    /**
     * value: "new"
     * @const
     */
    "new": "new",

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting",

    /**
     * value: "planned"
     * @const
     */
    "planned": "planned",

    /**
     * value: "developing"
     * @const
     */
    "developing": "developing",

    /**
     * value: "released"
     * @const
     */
    "released": "released",

    /**
     * value: "declined"
     * @const
     */
    "declined": "declined"
};



export default Feature;

