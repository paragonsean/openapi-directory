/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindPlacesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindPlacesModel::OAIFindPlacesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindPlacesModel::OAIFindPlacesModel() {
    this->initializeModel();
}

OAIFindPlacesModel::~OAIFindPlacesModel() {}

void OAIFindPlacesModel::initializeModel() {

    m_adm_area1_isSet = false;
    m_adm_area1_isValid = false;

    m_adm_area2_isSet = false;
    m_adm_area2_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFindPlacesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindPlacesModel::fromJsonObject(QJsonObject json) {

    m_adm_area1_isValid = ::OpenAPI::fromJsonValue(m_adm_area1, json[QString("adm_area1")]);
    m_adm_area1_isSet = !json[QString("adm_area1")].isNull() && m_adm_area1_isValid;

    m_adm_area2_isValid = ::OpenAPI::fromJsonValue(m_adm_area2, json[QString("adm_area2")]);
    m_adm_area2_isSet = !json[QString("adm_area2")].isNull() && m_adm_area2_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("place_id")]);
    m_place_id_isSet = !json[QString("place_id")].isNull() && m_place_id_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFindPlacesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindPlacesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_adm_area1_isSet) {
        obj.insert(QString("adm_area1"), ::OpenAPI::toJsonValue(m_adm_area1));
    }
    if (m_adm_area2_isSet) {
        obj.insert(QString("adm_area2"), ::OpenAPI::toJsonValue(m_adm_area2));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("place_id"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFindPlacesModel::getAdmArea1() const {
    return m_adm_area1;
}
void OAIFindPlacesModel::setAdmArea1(const QString &adm_area1) {
    m_adm_area1 = adm_area1;
    m_adm_area1_isSet = true;
}

bool OAIFindPlacesModel::is_adm_area1_Set() const{
    return m_adm_area1_isSet;
}

bool OAIFindPlacesModel::is_adm_area1_Valid() const{
    return m_adm_area1_isValid;
}

QString OAIFindPlacesModel::getAdmArea2() const {
    return m_adm_area2;
}
void OAIFindPlacesModel::setAdmArea2(const QString &adm_area2) {
    m_adm_area2 = adm_area2;
    m_adm_area2_isSet = true;
}

bool OAIFindPlacesModel::is_adm_area2_Set() const{
    return m_adm_area2_isSet;
}

bool OAIFindPlacesModel::is_adm_area2_Valid() const{
    return m_adm_area2_isValid;
}

QString OAIFindPlacesModel::getCountry() const {
    return m_country;
}
void OAIFindPlacesModel::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIFindPlacesModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAIFindPlacesModel::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIFindPlacesModel::getLat() const {
    return m_lat;
}
void OAIFindPlacesModel::setLat(const QString &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIFindPlacesModel::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIFindPlacesModel::is_lat_Valid() const{
    return m_lat_isValid;
}

QString OAIFindPlacesModel::getLon() const {
    return m_lon;
}
void OAIFindPlacesModel::setLon(const QString &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIFindPlacesModel::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIFindPlacesModel::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAIFindPlacesModel::getName() const {
    return m_name;
}
void OAIFindPlacesModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFindPlacesModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFindPlacesModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFindPlacesModel::getPlaceId() const {
    return m_place_id;
}
void OAIFindPlacesModel::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIFindPlacesModel::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIFindPlacesModel::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QString OAIFindPlacesModel::getTimezone() const {
    return m_timezone;
}
void OAIFindPlacesModel::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIFindPlacesModel::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIFindPlacesModel::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIFindPlacesModel::getType() const {
    return m_type;
}
void OAIFindPlacesModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFindPlacesModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFindPlacesModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFindPlacesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adm_area1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adm_area2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindPlacesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
