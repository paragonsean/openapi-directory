/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITimeMachine_TimeMachine.h
 *
 * 
 */

#ifndef OAITimeMachine_TimeMachine_H
#define OAITimeMachine_TimeMachine_H

#include <QJsonObject>

#include "OAITimeMachine_PointDailyStatsData.h"
#include "OAITimeMachine_TimeMachineHourlyData.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITimeMachine_TimeMachineHourlyData;
class OAITimeMachine_PointDailyStatsData;

class OAITimeMachine_TimeMachine : public OAIObject {
public:
    OAITimeMachine_TimeMachine();
    OAITimeMachine_TimeMachine(QString json);
    ~OAITimeMachine_TimeMachine() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAITimeMachine_TimeMachineHourlyData> getData() const;
    void setData(const QList<OAITimeMachine_TimeMachineHourlyData> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    qint32 getElevation() const;
    void setElevation(const qint32 &elevation);
    bool is_elevation_Set() const;
    bool is_elevation_Valid() const;

    QString getLat() const;
    void setLat(const QString &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    QString getLon() const;
    void setLon(const QString &lon);
    bool is_lon_Set() const;
    bool is_lon_Valid() const;

    OAITimeMachine_PointDailyStatsData getStatistics() const;
    void setStatistics(const OAITimeMachine_PointDailyStatsData &statistics);
    bool is_statistics_Set() const;
    bool is_statistics_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QString getUnits() const;
    void setUnits(const QString &units);
    bool is_units_Set() const;
    bool is_units_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAITimeMachine_TimeMachineHourlyData> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    qint32 m_elevation;
    bool m_elevation_isSet;
    bool m_elevation_isValid;

    QString m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    QString m_lon;
    bool m_lon_isSet;
    bool m_lon_isValid;

    OAITimeMachine_PointDailyStatsData m_statistics;
    bool m_statistics_isSet;
    bool m_statistics_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QString m_units;
    bool m_units_isSet;
    bool m_units_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITimeMachine_TimeMachine)

#endif // OAITimeMachine_TimeMachine_H
