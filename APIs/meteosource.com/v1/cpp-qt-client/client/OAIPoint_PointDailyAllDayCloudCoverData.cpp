/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint_PointDailyAllDayCloudCoverData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint_PointDailyAllDayCloudCoverData::OAIPoint_PointDailyAllDayCloudCoverData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint_PointDailyAllDayCloudCoverData::OAIPoint_PointDailyAllDayCloudCoverData() {
    this->initializeModel();
}

OAIPoint_PointDailyAllDayCloudCoverData::~OAIPoint_PointDailyAllDayCloudCoverData() {}

void OAIPoint_PointDailyAllDayCloudCoverData::initializeModel() {

    m_high_isSet = false;
    m_high_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;

    m_middle_isSet = false;
    m_middle_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPoint_PointDailyAllDayCloudCoverData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint_PointDailyAllDayCloudCoverData::fromJsonObject(QJsonObject json) {

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(m_low, json[QString("low")]);
    m_low_isSet = !json[QString("low")].isNull() && m_low_isValid;

    m_middle_isValid = ::OpenAPI::fromJsonValue(m_middle, json[QString("middle")]);
    m_middle_isSet = !json[QString("middle")].isNull() && m_middle_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPoint_PointDailyAllDayCloudCoverData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint_PointDailyAllDayCloudCoverData::asJsonObject() const {
    QJsonObject obj;
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_low_isSet) {
        obj.insert(QString("low"), ::OpenAPI::toJsonValue(m_low));
    }
    if (m_middle_isSet) {
        obj.insert(QString("middle"), ::OpenAPI::toJsonValue(m_middle));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIPoint_PointDailyAllDayCloudCoverData::getHigh() const {
    return m_high;
}
void OAIPoint_PointDailyAllDayCloudCoverData::setHigh(const double &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_high_Set() const{
    return m_high_isSet;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_high_Valid() const{
    return m_high_isValid;
}

double OAIPoint_PointDailyAllDayCloudCoverData::getLow() const {
    return m_low;
}
void OAIPoint_PointDailyAllDayCloudCoverData::setLow(const double &low) {
    m_low = low;
    m_low_isSet = true;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_low_Set() const{
    return m_low_isSet;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_low_Valid() const{
    return m_low_isValid;
}

double OAIPoint_PointDailyAllDayCloudCoverData::getMiddle() const {
    return m_middle;
}
void OAIPoint_PointDailyAllDayCloudCoverData::setMiddle(const double &middle) {
    m_middle = middle;
    m_middle_isSet = true;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_middle_Set() const{
    return m_middle_isSet;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_middle_Valid() const{
    return m_middle_isValid;
}

double OAIPoint_PointDailyAllDayCloudCoverData::getTotal() const {
    return m_total;
}
void OAIPoint_PointDailyAllDayCloudCoverData::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint_PointDailyAllDayCloudCoverData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
