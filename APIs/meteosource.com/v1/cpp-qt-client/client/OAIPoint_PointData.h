/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPoint_PointData.h
 *
 * 
 */

#ifndef OAIPoint_PointData_H
#define OAIPoint_PointData_H

#include <QJsonObject>

#include "OAIPoint_PointAlerts.h"
#include "OAIPoint_PointCurrentData.h"
#include "OAIPoint_PointDaily.h"
#include "OAIPoint_PointHourly.h"
#include "OAIPoint_PointMinutely.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPoint_PointAlerts;
class OAIPoint_PointCurrentData;
class OAIPoint_PointDaily;
class OAIPoint_PointHourly;
class OAIPoint_PointMinutely;

class OAIPoint_PointData : public OAIObject {
public:
    OAIPoint_PointData();
    OAIPoint_PointData(QString json);
    ~OAIPoint_PointData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPoint_PointAlerts getAlerts() const;
    void setAlerts(const OAIPoint_PointAlerts &alerts);
    bool is_alerts_Set() const;
    bool is_alerts_Valid() const;

    OAIPoint_PointCurrentData getCurrent() const;
    void setCurrent(const OAIPoint_PointCurrentData &current);
    bool is_current_Set() const;
    bool is_current_Valid() const;

    OAIPoint_PointDaily getDaily() const;
    void setDaily(const OAIPoint_PointDaily &daily);
    bool is_daily_Set() const;
    bool is_daily_Valid() const;

    qint32 getElevation() const;
    void setElevation(const qint32 &elevation);
    bool is_elevation_Set() const;
    bool is_elevation_Valid() const;

    OAIPoint_PointHourly getHourly() const;
    void setHourly(const OAIPoint_PointHourly &hourly);
    bool is_hourly_Set() const;
    bool is_hourly_Valid() const;

    QString getLat() const;
    void setLat(const QString &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    QString getLon() const;
    void setLon(const QString &lon);
    bool is_lon_Set() const;
    bool is_lon_Valid() const;

    OAIPoint_PointMinutely getMinutely() const;
    void setMinutely(const OAIPoint_PointMinutely &minutely);
    bool is_minutely_Set() const;
    bool is_minutely_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    QString getUnits() const;
    void setUnits(const QString &units);
    bool is_units_Set() const;
    bool is_units_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPoint_PointAlerts m_alerts;
    bool m_alerts_isSet;
    bool m_alerts_isValid;

    OAIPoint_PointCurrentData m_current;
    bool m_current_isSet;
    bool m_current_isValid;

    OAIPoint_PointDaily m_daily;
    bool m_daily_isSet;
    bool m_daily_isValid;

    qint32 m_elevation;
    bool m_elevation_isSet;
    bool m_elevation_isValid;

    OAIPoint_PointHourly m_hourly;
    bool m_hourly_isSet;
    bool m_hourly_isValid;

    QString m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    QString m_lon;
    bool m_lon_isSet;
    bool m_lon_isValid;

    OAIPoint_PointMinutely m_minutely;
    bool m_minutely_isSet;
    bool m_minutely_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    QString m_units;
    bool m_units_isSet;
    bool m_units_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPoint_PointData)

#endif // OAIPoint_PointData_H
