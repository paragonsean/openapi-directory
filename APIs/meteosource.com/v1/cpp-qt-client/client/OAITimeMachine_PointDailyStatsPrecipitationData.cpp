/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeMachine_PointDailyStatsPrecipitationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeMachine_PointDailyStatsPrecipitationData::OAITimeMachine_PointDailyStatsPrecipitationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeMachine_PointDailyStatsPrecipitationData::OAITimeMachine_PointDailyStatsPrecipitationData() {
    this->initializeModel();
}

OAITimeMachine_PointDailyStatsPrecipitationData::~OAITimeMachine_PointDailyStatsPrecipitationData() {}

void OAITimeMachine_PointDailyStatsPrecipitationData::initializeModel() {

    m_avg_isSet = false;
    m_avg_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;
}

void OAITimeMachine_PointDailyStatsPrecipitationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeMachine_PointDailyStatsPrecipitationData::fromJsonObject(QJsonObject json) {

    m_avg_isValid = ::OpenAPI::fromJsonValue(m_avg, json[QString("avg")]);
    m_avg_isSet = !json[QString("avg")].isNull() && m_avg_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;
}

QString OAITimeMachine_PointDailyStatsPrecipitationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeMachine_PointDailyStatsPrecipitationData::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_isSet) {
        obj.insert(QString("avg"), ::OpenAPI::toJsonValue(m_avg));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    return obj;
}

double OAITimeMachine_PointDailyStatsPrecipitationData::getAvg() const {
    return m_avg;
}
void OAITimeMachine_PointDailyStatsPrecipitationData::setAvg(const double &avg) {
    m_avg = avg;
    m_avg_isSet = true;
}

bool OAITimeMachine_PointDailyStatsPrecipitationData::is_avg_Set() const{
    return m_avg_isSet;
}

bool OAITimeMachine_PointDailyStatsPrecipitationData::is_avg_Valid() const{
    return m_avg_isValid;
}

qint32 OAITimeMachine_PointDailyStatsPrecipitationData::getProbability() const {
    return m_probability;
}
void OAITimeMachine_PointDailyStatsPrecipitationData::setProbability(const qint32 &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAITimeMachine_PointDailyStatsPrecipitationData::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAITimeMachine_PointDailyStatsPrecipitationData::is_probability_Valid() const{
    return m_probability_isValid;
}

bool OAITimeMachine_PointDailyStatsPrecipitationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeMachine_PointDailyStatsPrecipitationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
