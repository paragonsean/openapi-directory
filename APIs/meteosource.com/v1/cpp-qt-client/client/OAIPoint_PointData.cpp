/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint_PointData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint_PointData::OAIPoint_PointData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint_PointData::OAIPoint_PointData() {
    this->initializeModel();
}

OAIPoint_PointData::~OAIPoint_PointData() {}

void OAIPoint_PointData::initializeModel() {

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_daily_isSet = false;
    m_daily_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_hourly_isSet = false;
    m_hourly_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_minutely_isSet = false;
    m_minutely_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIPoint_PointData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint_PointData::fromJsonObject(QJsonObject json) {

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_daily_isValid = ::OpenAPI::fromJsonValue(m_daily, json[QString("daily")]);
    m_daily_isSet = !json[QString("daily")].isNull() && m_daily_isValid;

    m_elevation_isValid = ::OpenAPI::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_hourly_isValid = ::OpenAPI::fromJsonValue(m_hourly, json[QString("hourly")]);
    m_hourly_isSet = !json[QString("hourly")].isNull() && m_hourly_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_minutely_isValid = ::OpenAPI::fromJsonValue(m_minutely, json[QString("minutely")]);
    m_minutely_isSet = !json[QString("minutely")].isNull() && m_minutely_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIPoint_PointData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint_PointData::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts.isSet()) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_current.isSet()) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_daily.isSet()) {
        obj.insert(QString("daily"), ::OpenAPI::toJsonValue(m_daily));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OpenAPI::toJsonValue(m_elevation));
    }
    if (m_hourly.isSet()) {
        obj.insert(QString("hourly"), ::OpenAPI::toJsonValue(m_hourly));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_minutely.isSet()) {
        obj.insert(QString("minutely"), ::OpenAPI::toJsonValue(m_minutely));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

OAIPoint_PointAlerts OAIPoint_PointData::getAlerts() const {
    return m_alerts;
}
void OAIPoint_PointData::setAlerts(const OAIPoint_PointAlerts &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAIPoint_PointData::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAIPoint_PointData::is_alerts_Valid() const{
    return m_alerts_isValid;
}

OAIPoint_PointCurrentData OAIPoint_PointData::getCurrent() const {
    return m_current;
}
void OAIPoint_PointData::setCurrent(const OAIPoint_PointCurrentData &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIPoint_PointData::is_current_Set() const{
    return m_current_isSet;
}

bool OAIPoint_PointData::is_current_Valid() const{
    return m_current_isValid;
}

OAIPoint_PointDaily OAIPoint_PointData::getDaily() const {
    return m_daily;
}
void OAIPoint_PointData::setDaily(const OAIPoint_PointDaily &daily) {
    m_daily = daily;
    m_daily_isSet = true;
}

bool OAIPoint_PointData::is_daily_Set() const{
    return m_daily_isSet;
}

bool OAIPoint_PointData::is_daily_Valid() const{
    return m_daily_isValid;
}

qint32 OAIPoint_PointData::getElevation() const {
    return m_elevation;
}
void OAIPoint_PointData::setElevation(const qint32 &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAIPoint_PointData::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAIPoint_PointData::is_elevation_Valid() const{
    return m_elevation_isValid;
}

OAIPoint_PointHourly OAIPoint_PointData::getHourly() const {
    return m_hourly;
}
void OAIPoint_PointData::setHourly(const OAIPoint_PointHourly &hourly) {
    m_hourly = hourly;
    m_hourly_isSet = true;
}

bool OAIPoint_PointData::is_hourly_Set() const{
    return m_hourly_isSet;
}

bool OAIPoint_PointData::is_hourly_Valid() const{
    return m_hourly_isValid;
}

QString OAIPoint_PointData::getLat() const {
    return m_lat;
}
void OAIPoint_PointData::setLat(const QString &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIPoint_PointData::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIPoint_PointData::is_lat_Valid() const{
    return m_lat_isValid;
}

QString OAIPoint_PointData::getLon() const {
    return m_lon;
}
void OAIPoint_PointData::setLon(const QString &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIPoint_PointData::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIPoint_PointData::is_lon_Valid() const{
    return m_lon_isValid;
}

OAIPoint_PointMinutely OAIPoint_PointData::getMinutely() const {
    return m_minutely;
}
void OAIPoint_PointData::setMinutely(const OAIPoint_PointMinutely &minutely) {
    m_minutely = minutely;
    m_minutely_isSet = true;
}

bool OAIPoint_PointData::is_minutely_Set() const{
    return m_minutely_isSet;
}

bool OAIPoint_PointData::is_minutely_Valid() const{
    return m_minutely_isValid;
}

QString OAIPoint_PointData::getTimezone() const {
    return m_timezone;
}
void OAIPoint_PointData::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIPoint_PointData::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIPoint_PointData::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIPoint_PointData::getUnits() const {
    return m_units;
}
void OAIPoint_PointData::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIPoint_PointData::is_units_Set() const{
    return m_units_isSet;
}

bool OAIPoint_PointData::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIPoint_PointData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutely.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint_PointData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alerts_isValid && m_elevation_isValid && m_lat_isValid && m_lon_isValid && m_units_isValid && true;
}

} // namespace OpenAPI
