/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint_PointDailyMoonData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint_PointDailyMoonData::OAIPoint_PointDailyMoonData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint_PointDailyMoonData::OAIPoint_PointDailyMoonData() {
    this->initializeModel();
}

OAIPoint_PointDailyMoonData::~OAIPoint_PointDailyMoonData() {}

void OAIPoint_PointDailyMoonData::initializeModel() {

    m_always_down_isSet = false;
    m_always_down_isValid = false;

    m_always_up_isSet = false;
    m_always_up_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_rise_isSet = false;
    m_rise_isValid = false;

    m_r_set_isSet = false;
    m_r_set_isValid = false;
}

void OAIPoint_PointDailyMoonData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint_PointDailyMoonData::fromJsonObject(QJsonObject json) {

    m_always_down_isValid = ::OpenAPI::fromJsonValue(m_always_down, json[QString("always_down")]);
    m_always_down_isSet = !json[QString("always_down")].isNull() && m_always_down_isValid;

    m_always_up_isValid = ::OpenAPI::fromJsonValue(m_always_up, json[QString("always_up")]);
    m_always_up_isSet = !json[QString("always_up")].isNull() && m_always_up_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_rise_isValid = ::OpenAPI::fromJsonValue(m_rise, json[QString("rise")]);
    m_rise_isSet = !json[QString("rise")].isNull() && m_rise_isValid;

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;
}

QString OAIPoint_PointDailyMoonData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint_PointDailyMoonData::asJsonObject() const {
    QJsonObject obj;
    if (m_always_down_isSet) {
        obj.insert(QString("always_down"), ::OpenAPI::toJsonValue(m_always_down));
    }
    if (m_always_up_isSet) {
        obj.insert(QString("always_up"), ::OpenAPI::toJsonValue(m_always_up));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_rise_isSet) {
        obj.insert(QString("rise"), ::OpenAPI::toJsonValue(m_rise));
    }
    if (m_r_set_isSet) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    return obj;
}

bool OAIPoint_PointDailyMoonData::isAlwaysDown() const {
    return m_always_down;
}
void OAIPoint_PointDailyMoonData::setAlwaysDown(const bool &always_down) {
    m_always_down = always_down;
    m_always_down_isSet = true;
}

bool OAIPoint_PointDailyMoonData::is_always_down_Set() const{
    return m_always_down_isSet;
}

bool OAIPoint_PointDailyMoonData::is_always_down_Valid() const{
    return m_always_down_isValid;
}

bool OAIPoint_PointDailyMoonData::isAlwaysUp() const {
    return m_always_up;
}
void OAIPoint_PointDailyMoonData::setAlwaysUp(const bool &always_up) {
    m_always_up = always_up;
    m_always_up_isSet = true;
}

bool OAIPoint_PointDailyMoonData::is_always_up_Set() const{
    return m_always_up_isSet;
}

bool OAIPoint_PointDailyMoonData::is_always_up_Valid() const{
    return m_always_up_isValid;
}

OAIHttpFileElement OAIPoint_PointDailyMoonData::getPhase() const {
    return m_phase;
}
void OAIPoint_PointDailyMoonData::setPhase(const OAIHttpFileElement &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIPoint_PointDailyMoonData::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIPoint_PointDailyMoonData::is_phase_Valid() const{
    return m_phase_isValid;
}

QDateTime OAIPoint_PointDailyMoonData::getRise() const {
    return m_rise;
}
void OAIPoint_PointDailyMoonData::setRise(const QDateTime &rise) {
    m_rise = rise;
    m_rise_isSet = true;
}

bool OAIPoint_PointDailyMoonData::is_rise_Set() const{
    return m_rise_isSet;
}

bool OAIPoint_PointDailyMoonData::is_rise_Valid() const{
    return m_rise_isValid;
}

QDateTime OAIPoint_PointDailyMoonData::getRSet() const {
    return m_r_set;
}
void OAIPoint_PointDailyMoonData::setRSet(const QDateTime &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAIPoint_PointDailyMoonData::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAIPoint_PointDailyMoonData::is_r_set_Valid() const{
    return m_r_set_isValid;
}

bool OAIPoint_PointDailyMoonData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_always_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_set_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint_PointDailyMoonData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
