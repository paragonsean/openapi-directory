/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationEndpointsApi_H
#define OAI_OAILocationEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFindPlacesModel.h"
#include "OAIGeneralRequestError.h"
#include "OAIHTTPValidationError.h"
#include "OAILanguage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAILocationEndpointsApi(const int timeOut = 0);
    ~OAILocationEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  text QString [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  key QString [optional]
    */
    virtual void findPlacesFindPlacesGet(const QString &text, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  text QString [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  key QString [optional]
    */
    virtual void findPlacesPrefixFindPlacesPrefixGet(const QString &text, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat QString [required]
    * @param[in]  lon QString [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  key QString [optional]
    */
    virtual void nearestPlaceNearestPlaceGet(const QString &lat, const QString &lon, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void findPlacesFindPlacesGetCallback(OAIHttpRequestWorker *worker);
    void findPlacesPrefixFindPlacesPrefixGetCallback(OAIHttpRequestWorker *worker);
    void nearestPlaceNearestPlaceGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void findPlacesFindPlacesGetSignal(QList<OAIFindPlacesModel> summary);
    void findPlacesPrefixFindPlacesPrefixGetSignal(QList<OAIFindPlacesModel> summary);
    void nearestPlaceNearestPlaceGetSignal(OAIFindPlacesModel summary);


    void findPlacesFindPlacesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFindPlacesModel> summary);
    void findPlacesPrefixFindPlacesPrefixGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFindPlacesModel> summary);
    void nearestPlaceNearestPlaceGetSignalFull(OAIHttpRequestWorker *worker, OAIFindPlacesModel summary);

    Q_DECL_DEPRECATED_X("Use findPlacesFindPlacesGetSignalError() instead")
    void findPlacesFindPlacesGetSignalE(QList<OAIFindPlacesModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findPlacesFindPlacesGetSignalError(QList<OAIFindPlacesModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findPlacesPrefixFindPlacesPrefixGetSignalError() instead")
    void findPlacesPrefixFindPlacesPrefixGetSignalE(QList<OAIFindPlacesModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findPlacesPrefixFindPlacesPrefixGetSignalError(QList<OAIFindPlacesModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nearestPlaceNearestPlaceGetSignalError() instead")
    void nearestPlaceNearestPlaceGetSignalE(OAIFindPlacesModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nearestPlaceNearestPlaceGetSignalError(OAIFindPlacesModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use findPlacesFindPlacesGetSignalErrorFull() instead")
    void findPlacesFindPlacesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findPlacesFindPlacesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findPlacesPrefixFindPlacesPrefixGetSignalErrorFull() instead")
    void findPlacesPrefixFindPlacesPrefixGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findPlacesPrefixFindPlacesPrefixGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nearestPlaceNearestPlaceGetSignalErrorFull() instead")
    void nearestPlaceNearestPlaceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nearestPlaceNearestPlaceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
