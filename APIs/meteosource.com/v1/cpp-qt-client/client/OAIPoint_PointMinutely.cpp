/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint_PointMinutely.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint_PointMinutely::OAIPoint_PointMinutely(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint_PointMinutely::OAIPoint_PointMinutely() {
    this->initializeModel();
}

OAIPoint_PointMinutely::~OAIPoint_PointMinutely() {}

void OAIPoint_PointMinutely::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIPoint_PointMinutely::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint_PointMinutely::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIPoint_PointMinutely::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint_PointMinutely::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAIPoint_PointMinutelyPrecipitationData> OAIPoint_PointMinutely::getData() const {
    return m_data;
}
void OAIPoint_PointMinutely::setData(const QList<OAIPoint_PointMinutelyPrecipitationData> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPoint_PointMinutely::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPoint_PointMinutely::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIPoint_PointMinutely::getSummary() const {
    return m_summary;
}
void OAIPoint_PointMinutely::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPoint_PointMinutely::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPoint_PointMinutely::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIPoint_PointMinutely::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint_PointMinutely::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
