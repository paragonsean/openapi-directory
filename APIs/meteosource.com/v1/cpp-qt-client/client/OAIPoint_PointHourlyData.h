/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPoint_PointHourlyData.h
 *
 * 
 */

#ifndef OAIPoint_PointHourlyData_H
#define OAIPoint_PointHourlyData_H

#include <QJsonObject>

#include "OAIPoint_PointHourlyCloudCoverData.h"
#include "OAIPoint_PointHourlyPrecipitationData.h"
#include "OAIPoint_PointHourlyProbData.h"
#include "OAIPoint_PointHourlyWindData.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPoint_PointHourlyCloudCoverData;
class OAIPoint_PointHourlyPrecipitationData;
class OAIPoint_PointHourlyProbData;
class OAIPoint_PointHourlyWindData;

class OAIPoint_PointHourlyData : public OAIObject {
public:
    OAIPoint_PointHourlyData();
    OAIPoint_PointHourlyData(QString json);
    ~OAIPoint_PointHourlyData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCape() const;
    void setCape(const double &cape);
    bool is_cape_Set() const;
    bool is_cape_Valid() const;

    OAIPoint_PointHourlyCloudCoverData getCloudCover() const;
    void setCloudCover(const OAIPoint_PointHourlyCloudCoverData &cloud_cover);
    bool is_cloud_cover_Set() const;
    bool is_cloud_cover_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    double getDewPoint() const;
    void setDewPoint(const double &dew_point);
    bool is_dew_point_Set() const;
    bool is_dew_point_Valid() const;

    double getEvaporation() const;
    void setEvaporation(const double &evaporation);
    bool is_evaporation_Set() const;
    bool is_evaporation_Valid() const;

    double getFeelsLike() const;
    void setFeelsLike(const double &feels_like);
    bool is_feels_like_Set() const;
    bool is_feels_like_Valid() const;

    qint32 getHumidity() const;
    void setHumidity(const qint32 &humidity);
    bool is_humidity_Set() const;
    bool is_humidity_Valid() const;

    qint32 getIcon() const;
    void setIcon(const qint32 &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    double getIrradiance() const;
    void setIrradiance(const double &irradiance);
    bool is_irradiance_Set() const;
    bool is_irradiance_Valid() const;

    double getLftx() const;
    void setLftx(const double &lftx);
    bool is_lftx_Set() const;
    bool is_lftx_Valid() const;

    double getOzone() const;
    void setOzone(const double &ozone);
    bool is_ozone_Set() const;
    bool is_ozone_Valid() const;

    OAIPoint_PointHourlyPrecipitationData getPrecipitation() const;
    void setPrecipitation(const OAIPoint_PointHourlyPrecipitationData &precipitation);
    bool is_precipitation_Set() const;
    bool is_precipitation_Valid() const;

    double getPressure() const;
    void setPressure(const double &pressure);
    bool is_pressure_Set() const;
    bool is_pressure_Valid() const;

    OAIPoint_PointHourlyProbData getProbability() const;
    void setProbability(const OAIPoint_PointHourlyProbData &probability);
    bool is_probability_Set() const;
    bool is_probability_Valid() const;

    double getSnowDepth() const;
    void setSnowDepth(const double &snow_depth);
    bool is_snow_depth_Set() const;
    bool is_snow_depth_Valid() const;

    double getSoilTemperature() const;
    void setSoilTemperature(const double &soil_temperature);
    bool is_soil_temperature_Set() const;
    bool is_soil_temperature_Valid() const;

    QString getSummary() const;
    void setSummary(const QString &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    double getSunshineDuration() const;
    void setSunshineDuration(const double &sunshine_duration);
    bool is_sunshine_duration_Set() const;
    bool is_sunshine_duration_Valid() const;

    double getSurfaceTemperature() const;
    void setSurfaceTemperature(const double &surface_temperature);
    bool is_surface_temperature_Set() const;
    bool is_surface_temperature_Valid() const;

    double getTemperature() const;
    void setTemperature(const double &temperature);
    bool is_temperature_Set() const;
    bool is_temperature_Valid() const;

    double getUvIndex() const;
    void setUvIndex(const double &uv_index);
    bool is_uv_index_Set() const;
    bool is_uv_index_Valid() const;

    double getVisibility() const;
    void setVisibility(const double &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    QString getWeather() const;
    void setWeather(const QString &weather);
    bool is_weather_Set() const;
    bool is_weather_Valid() const;

    OAIPoint_PointHourlyWindData getWind() const;
    void setWind(const OAIPoint_PointHourlyWindData &wind);
    bool is_wind_Set() const;
    bool is_wind_Valid() const;

    double getWindChill() const;
    void setWindChill(const double &wind_chill);
    bool is_wind_chill_Set() const;
    bool is_wind_chill_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cape;
    bool m_cape_isSet;
    bool m_cape_isValid;

    OAIPoint_PointHourlyCloudCoverData m_cloud_cover;
    bool m_cloud_cover_isSet;
    bool m_cloud_cover_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    double m_dew_point;
    bool m_dew_point_isSet;
    bool m_dew_point_isValid;

    double m_evaporation;
    bool m_evaporation_isSet;
    bool m_evaporation_isValid;

    double m_feels_like;
    bool m_feels_like_isSet;
    bool m_feels_like_isValid;

    qint32 m_humidity;
    bool m_humidity_isSet;
    bool m_humidity_isValid;

    qint32 m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    double m_irradiance;
    bool m_irradiance_isSet;
    bool m_irradiance_isValid;

    double m_lftx;
    bool m_lftx_isSet;
    bool m_lftx_isValid;

    double m_ozone;
    bool m_ozone_isSet;
    bool m_ozone_isValid;

    OAIPoint_PointHourlyPrecipitationData m_precipitation;
    bool m_precipitation_isSet;
    bool m_precipitation_isValid;

    double m_pressure;
    bool m_pressure_isSet;
    bool m_pressure_isValid;

    OAIPoint_PointHourlyProbData m_probability;
    bool m_probability_isSet;
    bool m_probability_isValid;

    double m_snow_depth;
    bool m_snow_depth_isSet;
    bool m_snow_depth_isValid;

    double m_soil_temperature;
    bool m_soil_temperature_isSet;
    bool m_soil_temperature_isValid;

    QString m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;

    double m_sunshine_duration;
    bool m_sunshine_duration_isSet;
    bool m_sunshine_duration_isValid;

    double m_surface_temperature;
    bool m_surface_temperature_isSet;
    bool m_surface_temperature_isValid;

    double m_temperature;
    bool m_temperature_isSet;
    bool m_temperature_isValid;

    double m_uv_index;
    bool m_uv_index_isSet;
    bool m_uv_index_isValid;

    double m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;

    QString m_weather;
    bool m_weather_isSet;
    bool m_weather_isValid;

    OAIPoint_PointHourlyWindData m_wind;
    bool m_wind_isSet;
    bool m_wind_isValid;

    double m_wind_chill;
    bool m_wind_chill_isSet;
    bool m_wind_chill_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPoint_PointHourlyData)

#endif // OAIPoint_PointHourlyData_H
