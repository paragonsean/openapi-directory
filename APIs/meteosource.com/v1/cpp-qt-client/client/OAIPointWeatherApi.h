/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPointWeatherApi_H
#define OAI_OAIPointWeatherApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAirQuality_PointData.h"
#include "OAIGeneralRequestError.h"
#include "OAIHTTPValidationError.h"
#include "OAILanguage.h"
#include "OAIPoint_PointData.h"
#include "OAIUnits.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPointWeatherApi : public QObject {
    Q_OBJECT

public:
    OAIPointWeatherApi(const int timeOut = 0);
    ~OAIPointWeatherApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  place_id QString [optional]
    * @param[in]  lat QString [optional]
    * @param[in]  lon QString [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void airQualityAirQualityGet(const ::OpenAPI::OptionalParam<QString> &place_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  place_id QString [optional]
    * @param[in]  lat QString [optional]
    * @param[in]  lon QString [optional]
    * @param[in]  sections QString [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  units OAIUnits [optional]
    * @param[in]  key QString [optional]
    */
    virtual void pointPointGet(const ::OpenAPI::OptionalParam<QString> &place_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sections = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<OAIUnits> &units = ::OpenAPI::OptionalParam<OAIUnits>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void airQualityAirQualityGetCallback(OAIHttpRequestWorker *worker);
    void pointPointGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void airQualityAirQualityGetSignal(OAIAirQuality_PointData summary);
    void pointPointGetSignal(OAIPoint_PointData summary);


    void airQualityAirQualityGetSignalFull(OAIHttpRequestWorker *worker, OAIAirQuality_PointData summary);
    void pointPointGetSignalFull(OAIHttpRequestWorker *worker, OAIPoint_PointData summary);

    Q_DECL_DEPRECATED_X("Use airQualityAirQualityGetSignalError() instead")
    void airQualityAirQualityGetSignalE(OAIAirQuality_PointData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void airQualityAirQualityGetSignalError(OAIAirQuality_PointData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pointPointGetSignalError() instead")
    void pointPointGetSignalE(OAIPoint_PointData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pointPointGetSignalError(OAIPoint_PointData summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use airQualityAirQualityGetSignalErrorFull() instead")
    void airQualityAirQualityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airQualityAirQualityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pointPointGetSignalErrorFull() instead")
    void pointPointGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pointPointGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
