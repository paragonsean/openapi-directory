/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint_PointDailyStatsWindData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint_PointDailyStatsWindData::OAIPoint_PointDailyStatsWindData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint_PointDailyStatsWindData::OAIPoint_PointDailyStatsWindData() {
    this->initializeModel();
}

OAIPoint_PointDailyStatsWindData::~OAIPoint_PointDailyStatsWindData() {}

void OAIPoint_PointDailyStatsWindData::initializeModel() {

    m_avg_angle_isSet = false;
    m_avg_angle_isValid = false;

    m_avg_dir_isSet = false;
    m_avg_dir_isValid = false;

    m_avg_speed_isSet = false;
    m_avg_speed_isValid = false;

    m_max_gust_isSet = false;
    m_max_gust_isValid = false;

    m_max_speed_isSet = false;
    m_max_speed_isValid = false;
}

void OAIPoint_PointDailyStatsWindData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint_PointDailyStatsWindData::fromJsonObject(QJsonObject json) {

    m_avg_angle_isValid = ::OpenAPI::fromJsonValue(m_avg_angle, json[QString("avg_angle")]);
    m_avg_angle_isSet = !json[QString("avg_angle")].isNull() && m_avg_angle_isValid;

    m_avg_dir_isValid = ::OpenAPI::fromJsonValue(m_avg_dir, json[QString("avg_dir")]);
    m_avg_dir_isSet = !json[QString("avg_dir")].isNull() && m_avg_dir_isValid;

    m_avg_speed_isValid = ::OpenAPI::fromJsonValue(m_avg_speed, json[QString("avg_speed")]);
    m_avg_speed_isSet = !json[QString("avg_speed")].isNull() && m_avg_speed_isValid;

    m_max_gust_isValid = ::OpenAPI::fromJsonValue(m_max_gust, json[QString("max_gust")]);
    m_max_gust_isSet = !json[QString("max_gust")].isNull() && m_max_gust_isValid;

    m_max_speed_isValid = ::OpenAPI::fromJsonValue(m_max_speed, json[QString("max_speed")]);
    m_max_speed_isSet = !json[QString("max_speed")].isNull() && m_max_speed_isValid;
}

QString OAIPoint_PointDailyStatsWindData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint_PointDailyStatsWindData::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_angle_isSet) {
        obj.insert(QString("avg_angle"), ::OpenAPI::toJsonValue(m_avg_angle));
    }
    if (m_avg_dir.isSet()) {
        obj.insert(QString("avg_dir"), ::OpenAPI::toJsonValue(m_avg_dir));
    }
    if (m_avg_speed_isSet) {
        obj.insert(QString("avg_speed"), ::OpenAPI::toJsonValue(m_avg_speed));
    }
    if (m_max_gust_isSet) {
        obj.insert(QString("max_gust"), ::OpenAPI::toJsonValue(m_max_gust));
    }
    if (m_max_speed_isSet) {
        obj.insert(QString("max_speed"), ::OpenAPI::toJsonValue(m_max_speed));
    }
    return obj;
}

double OAIPoint_PointDailyStatsWindData::getAvgAngle() const {
    return m_avg_angle;
}
void OAIPoint_PointDailyStatsWindData::setAvgAngle(const double &avg_angle) {
    m_avg_angle = avg_angle;
    m_avg_angle_isSet = true;
}

bool OAIPoint_PointDailyStatsWindData::is_avg_angle_Set() const{
    return m_avg_angle_isSet;
}

bool OAIPoint_PointDailyStatsWindData::is_avg_angle_Valid() const{
    return m_avg_angle_isValid;
}

OAIHttpFileElement OAIPoint_PointDailyStatsWindData::getAvgDir() const {
    return m_avg_dir;
}
void OAIPoint_PointDailyStatsWindData::setAvgDir(const OAIHttpFileElement &avg_dir) {
    m_avg_dir = avg_dir;
    m_avg_dir_isSet = true;
}

bool OAIPoint_PointDailyStatsWindData::is_avg_dir_Set() const{
    return m_avg_dir_isSet;
}

bool OAIPoint_PointDailyStatsWindData::is_avg_dir_Valid() const{
    return m_avg_dir_isValid;
}

double OAIPoint_PointDailyStatsWindData::getAvgSpeed() const {
    return m_avg_speed;
}
void OAIPoint_PointDailyStatsWindData::setAvgSpeed(const double &avg_speed) {
    m_avg_speed = avg_speed;
    m_avg_speed_isSet = true;
}

bool OAIPoint_PointDailyStatsWindData::is_avg_speed_Set() const{
    return m_avg_speed_isSet;
}

bool OAIPoint_PointDailyStatsWindData::is_avg_speed_Valid() const{
    return m_avg_speed_isValid;
}

double OAIPoint_PointDailyStatsWindData::getMaxGust() const {
    return m_max_gust;
}
void OAIPoint_PointDailyStatsWindData::setMaxGust(const double &max_gust) {
    m_max_gust = max_gust;
    m_max_gust_isSet = true;
}

bool OAIPoint_PointDailyStatsWindData::is_max_gust_Set() const{
    return m_max_gust_isSet;
}

bool OAIPoint_PointDailyStatsWindData::is_max_gust_Valid() const{
    return m_max_gust_isValid;
}

double OAIPoint_PointDailyStatsWindData::getMaxSpeed() const {
    return m_max_speed;
}
void OAIPoint_PointDailyStatsWindData::setMaxSpeed(const double &max_speed) {
    m_max_speed = max_speed;
    m_max_speed_isSet = true;
}

bool OAIPoint_PointDailyStatsWindData::is_max_speed_Set() const{
    return m_max_speed_isSet;
}

bool OAIPoint_PointDailyStatsWindData::is_max_speed_Valid() const{
    return m_max_speed_isValid;
}

bool OAIPoint_PointDailyStatsWindData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_dir.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_gust_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint_PointDailyStatsWindData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
