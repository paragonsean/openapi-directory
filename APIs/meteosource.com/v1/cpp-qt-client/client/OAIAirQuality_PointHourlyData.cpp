/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirQuality_PointHourlyData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirQuality_PointHourlyData::OAIAirQuality_PointHourlyData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirQuality_PointHourlyData::OAIAirQuality_PointHourlyData() {
    this->initializeModel();
}

OAIAirQuality_PointHourlyData::~OAIAirQuality_PointHourlyData() {}

void OAIAirQuality_PointHourlyData::initializeModel() {

    m_aerosol_550_isSet = false;
    m_aerosol_550_isValid = false;

    m_air_quality_isSet = false;
    m_air_quality_isValid = false;

    m_co_surface_isSet = false;
    m_co_surface_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_dust_550nm_isSet = false;
    m_dust_550nm_isValid = false;

    m_dust_mixing_ratio_05_isSet = false;
    m_dust_mixing_ratio_05_isValid = false;

    m_no2_surface_isSet = false;
    m_no2_surface_isValid = false;

    m_no_surface_isSet = false;
    m_no_surface_isValid = false;

    m_ozone_surface_isSet = false;
    m_ozone_surface_isValid = false;

    m_ozone_total_isSet = false;
    m_ozone_total_isValid = false;

    m_pm10_isSet = false;
    m_pm10_isValid = false;

    m_pm25_isSet = false;
    m_pm25_isValid = false;

    m_so2_surface_isSet = false;
    m_so2_surface_isValid = false;
}

void OAIAirQuality_PointHourlyData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirQuality_PointHourlyData::fromJsonObject(QJsonObject json) {

    m_aerosol_550_isValid = ::OpenAPI::fromJsonValue(m_aerosol_550, json[QString("aerosol_550")]);
    m_aerosol_550_isSet = !json[QString("aerosol_550")].isNull() && m_aerosol_550_isValid;

    m_air_quality_isValid = ::OpenAPI::fromJsonValue(m_air_quality, json[QString("air_quality")]);
    m_air_quality_isSet = !json[QString("air_quality")].isNull() && m_air_quality_isValid;

    m_co_surface_isValid = ::OpenAPI::fromJsonValue(m_co_surface, json[QString("co_surface")]);
    m_co_surface_isSet = !json[QString("co_surface")].isNull() && m_co_surface_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_dust_550nm_isValid = ::OpenAPI::fromJsonValue(m_dust_550nm, json[QString("dust_550nm")]);
    m_dust_550nm_isSet = !json[QString("dust_550nm")].isNull() && m_dust_550nm_isValid;

    m_dust_mixing_ratio_05_isValid = ::OpenAPI::fromJsonValue(m_dust_mixing_ratio_05, json[QString("dust_mixing_ratio_05")]);
    m_dust_mixing_ratio_05_isSet = !json[QString("dust_mixing_ratio_05")].isNull() && m_dust_mixing_ratio_05_isValid;

    m_no2_surface_isValid = ::OpenAPI::fromJsonValue(m_no2_surface, json[QString("no2_surface")]);
    m_no2_surface_isSet = !json[QString("no2_surface")].isNull() && m_no2_surface_isValid;

    m_no_surface_isValid = ::OpenAPI::fromJsonValue(m_no_surface, json[QString("no_surface")]);
    m_no_surface_isSet = !json[QString("no_surface")].isNull() && m_no_surface_isValid;

    m_ozone_surface_isValid = ::OpenAPI::fromJsonValue(m_ozone_surface, json[QString("ozone_surface")]);
    m_ozone_surface_isSet = !json[QString("ozone_surface")].isNull() && m_ozone_surface_isValid;

    m_ozone_total_isValid = ::OpenAPI::fromJsonValue(m_ozone_total, json[QString("ozone_total")]);
    m_ozone_total_isSet = !json[QString("ozone_total")].isNull() && m_ozone_total_isValid;

    m_pm10_isValid = ::OpenAPI::fromJsonValue(m_pm10, json[QString("pm10")]);
    m_pm10_isSet = !json[QString("pm10")].isNull() && m_pm10_isValid;

    m_pm25_isValid = ::OpenAPI::fromJsonValue(m_pm25, json[QString("pm25")]);
    m_pm25_isSet = !json[QString("pm25")].isNull() && m_pm25_isValid;

    m_so2_surface_isValid = ::OpenAPI::fromJsonValue(m_so2_surface, json[QString("so2_surface")]);
    m_so2_surface_isSet = !json[QString("so2_surface")].isNull() && m_so2_surface_isValid;
}

QString OAIAirQuality_PointHourlyData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirQuality_PointHourlyData::asJsonObject() const {
    QJsonObject obj;
    if (m_aerosol_550_isSet) {
        obj.insert(QString("aerosol_550"), ::OpenAPI::toJsonValue(m_aerosol_550));
    }
    if (m_air_quality_isSet) {
        obj.insert(QString("air_quality"), ::OpenAPI::toJsonValue(m_air_quality));
    }
    if (m_co_surface_isSet) {
        obj.insert(QString("co_surface"), ::OpenAPI::toJsonValue(m_co_surface));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_dust_550nm_isSet) {
        obj.insert(QString("dust_550nm"), ::OpenAPI::toJsonValue(m_dust_550nm));
    }
    if (m_dust_mixing_ratio_05_isSet) {
        obj.insert(QString("dust_mixing_ratio_05"), ::OpenAPI::toJsonValue(m_dust_mixing_ratio_05));
    }
    if (m_no2_surface_isSet) {
        obj.insert(QString("no2_surface"), ::OpenAPI::toJsonValue(m_no2_surface));
    }
    if (m_no_surface_isSet) {
        obj.insert(QString("no_surface"), ::OpenAPI::toJsonValue(m_no_surface));
    }
    if (m_ozone_surface_isSet) {
        obj.insert(QString("ozone_surface"), ::OpenAPI::toJsonValue(m_ozone_surface));
    }
    if (m_ozone_total_isSet) {
        obj.insert(QString("ozone_total"), ::OpenAPI::toJsonValue(m_ozone_total));
    }
    if (m_pm10_isSet) {
        obj.insert(QString("pm10"), ::OpenAPI::toJsonValue(m_pm10));
    }
    if (m_pm25_isSet) {
        obj.insert(QString("pm25"), ::OpenAPI::toJsonValue(m_pm25));
    }
    if (m_so2_surface_isSet) {
        obj.insert(QString("so2_surface"), ::OpenAPI::toJsonValue(m_so2_surface));
    }
    return obj;
}

double OAIAirQuality_PointHourlyData::getAerosol550() const {
    return m_aerosol_550;
}
void OAIAirQuality_PointHourlyData::setAerosol550(const double &aerosol_550) {
    m_aerosol_550 = aerosol_550;
    m_aerosol_550_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_aerosol_550_Set() const{
    return m_aerosol_550_isSet;
}

bool OAIAirQuality_PointHourlyData::is_aerosol_550_Valid() const{
    return m_aerosol_550_isValid;
}

double OAIAirQuality_PointHourlyData::getAirQuality() const {
    return m_air_quality;
}
void OAIAirQuality_PointHourlyData::setAirQuality(const double &air_quality) {
    m_air_quality = air_quality;
    m_air_quality_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_air_quality_Set() const{
    return m_air_quality_isSet;
}

bool OAIAirQuality_PointHourlyData::is_air_quality_Valid() const{
    return m_air_quality_isValid;
}

double OAIAirQuality_PointHourlyData::getCoSurface() const {
    return m_co_surface;
}
void OAIAirQuality_PointHourlyData::setCoSurface(const double &co_surface) {
    m_co_surface = co_surface;
    m_co_surface_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_co_surface_Set() const{
    return m_co_surface_isSet;
}

bool OAIAirQuality_PointHourlyData::is_co_surface_Valid() const{
    return m_co_surface_isValid;
}

QDateTime OAIAirQuality_PointHourlyData::getDate() const {
    return m_date;
}
void OAIAirQuality_PointHourlyData::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAirQuality_PointHourlyData::is_date_Valid() const{
    return m_date_isValid;
}

double OAIAirQuality_PointHourlyData::getDust550nm() const {
    return m_dust_550nm;
}
void OAIAirQuality_PointHourlyData::setDust550nm(const double &dust_550nm) {
    m_dust_550nm = dust_550nm;
    m_dust_550nm_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_dust_550nm_Set() const{
    return m_dust_550nm_isSet;
}

bool OAIAirQuality_PointHourlyData::is_dust_550nm_Valid() const{
    return m_dust_550nm_isValid;
}

double OAIAirQuality_PointHourlyData::getDustMixingRatio05() const {
    return m_dust_mixing_ratio_05;
}
void OAIAirQuality_PointHourlyData::setDustMixingRatio05(const double &dust_mixing_ratio_05) {
    m_dust_mixing_ratio_05 = dust_mixing_ratio_05;
    m_dust_mixing_ratio_05_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_dust_mixing_ratio_05_Set() const{
    return m_dust_mixing_ratio_05_isSet;
}

bool OAIAirQuality_PointHourlyData::is_dust_mixing_ratio_05_Valid() const{
    return m_dust_mixing_ratio_05_isValid;
}

double OAIAirQuality_PointHourlyData::getNo2Surface() const {
    return m_no2_surface;
}
void OAIAirQuality_PointHourlyData::setNo2Surface(const double &no2_surface) {
    m_no2_surface = no2_surface;
    m_no2_surface_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_no2_surface_Set() const{
    return m_no2_surface_isSet;
}

bool OAIAirQuality_PointHourlyData::is_no2_surface_Valid() const{
    return m_no2_surface_isValid;
}

double OAIAirQuality_PointHourlyData::getNoSurface() const {
    return m_no_surface;
}
void OAIAirQuality_PointHourlyData::setNoSurface(const double &no_surface) {
    m_no_surface = no_surface;
    m_no_surface_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_no_surface_Set() const{
    return m_no_surface_isSet;
}

bool OAIAirQuality_PointHourlyData::is_no_surface_Valid() const{
    return m_no_surface_isValid;
}

double OAIAirQuality_PointHourlyData::getOzoneSurface() const {
    return m_ozone_surface;
}
void OAIAirQuality_PointHourlyData::setOzoneSurface(const double &ozone_surface) {
    m_ozone_surface = ozone_surface;
    m_ozone_surface_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_ozone_surface_Set() const{
    return m_ozone_surface_isSet;
}

bool OAIAirQuality_PointHourlyData::is_ozone_surface_Valid() const{
    return m_ozone_surface_isValid;
}

double OAIAirQuality_PointHourlyData::getOzoneTotal() const {
    return m_ozone_total;
}
void OAIAirQuality_PointHourlyData::setOzoneTotal(const double &ozone_total) {
    m_ozone_total = ozone_total;
    m_ozone_total_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_ozone_total_Set() const{
    return m_ozone_total_isSet;
}

bool OAIAirQuality_PointHourlyData::is_ozone_total_Valid() const{
    return m_ozone_total_isValid;
}

double OAIAirQuality_PointHourlyData::getPm10() const {
    return m_pm10;
}
void OAIAirQuality_PointHourlyData::setPm10(const double &pm10) {
    m_pm10 = pm10;
    m_pm10_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_pm10_Set() const{
    return m_pm10_isSet;
}

bool OAIAirQuality_PointHourlyData::is_pm10_Valid() const{
    return m_pm10_isValid;
}

double OAIAirQuality_PointHourlyData::getPm25() const {
    return m_pm25;
}
void OAIAirQuality_PointHourlyData::setPm25(const double &pm25) {
    m_pm25 = pm25;
    m_pm25_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_pm25_Set() const{
    return m_pm25_isSet;
}

bool OAIAirQuality_PointHourlyData::is_pm25_Valid() const{
    return m_pm25_isValid;
}

double OAIAirQuality_PointHourlyData::getSo2Surface() const {
    return m_so2_surface;
}
void OAIAirQuality_PointHourlyData::setSo2Surface(const double &so2_surface) {
    m_so2_surface = so2_surface;
    m_so2_surface_isSet = true;
}

bool OAIAirQuality_PointHourlyData::is_so2_surface_Set() const{
    return m_so2_surface_isSet;
}

bool OAIAirQuality_PointHourlyData::is_so2_surface_Valid() const{
    return m_so2_surface_isValid;
}

bool OAIAirQuality_PointHourlyData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aerosol_550_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_air_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_surface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dust_550nm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dust_mixing_ratio_05_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no2_surface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_surface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ozone_surface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ozone_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pm10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pm25_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_so2_surface_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirQuality_PointHourlyData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
