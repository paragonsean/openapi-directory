/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint_PointMinutelyPrecipitationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint_PointMinutelyPrecipitationData::OAIPoint_PointMinutelyPrecipitationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint_PointMinutelyPrecipitationData::OAIPoint_PointMinutelyPrecipitationData() {
    this->initializeModel();
}

OAIPoint_PointMinutelyPrecipitationData::~OAIPoint_PointMinutelyPrecipitationData() {}

void OAIPoint_PointMinutelyPrecipitationData::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_precipitation_isSet = false;
    m_precipitation_isValid = false;
}

void OAIPoint_PointMinutelyPrecipitationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint_PointMinutelyPrecipitationData::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_precipitation_isValid = ::OpenAPI::fromJsonValue(m_precipitation, json[QString("precipitation")]);
    m_precipitation_isSet = !json[QString("precipitation")].isNull() && m_precipitation_isValid;
}

QString OAIPoint_PointMinutelyPrecipitationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint_PointMinutelyPrecipitationData::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_precipitation_isSet) {
        obj.insert(QString("precipitation"), ::OpenAPI::toJsonValue(m_precipitation));
    }
    return obj;
}

QDateTime OAIPoint_PointMinutelyPrecipitationData::getDate() const {
    return m_date;
}
void OAIPoint_PointMinutelyPrecipitationData::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPoint_PointMinutelyPrecipitationData::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPoint_PointMinutelyPrecipitationData::is_date_Valid() const{
    return m_date_isValid;
}

double OAIPoint_PointMinutelyPrecipitationData::getPrecipitation() const {
    return m_precipitation;
}
void OAIPoint_PointMinutelyPrecipitationData::setPrecipitation(const double &precipitation) {
    m_precipitation = precipitation;
    m_precipitation_isSet = true;
}

bool OAIPoint_PointMinutelyPrecipitationData::is_precipitation_Set() const{
    return m_precipitation_isSet;
}

bool OAIPoint_PointMinutelyPrecipitationData::is_precipitation_Valid() const{
    return m_precipitation_isValid;
}

bool OAIPoint_PointMinutelyPrecipitationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precipitation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint_PointMinutelyPrecipitationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
