/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint_PointDailyAstroData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint_PointDailyAstroData::OAIPoint_PointDailyAstroData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint_PointDailyAstroData::OAIPoint_PointDailyAstroData() {
    this->initializeModel();
}

OAIPoint_PointDailyAstroData::~OAIPoint_PointDailyAstroData() {}

void OAIPoint_PointDailyAstroData::initializeModel() {

    m_moon_isSet = false;
    m_moon_isValid = false;

    m_sun_isSet = false;
    m_sun_isValid = false;
}

void OAIPoint_PointDailyAstroData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint_PointDailyAstroData::fromJsonObject(QJsonObject json) {

    m_moon_isValid = ::OpenAPI::fromJsonValue(m_moon, json[QString("moon")]);
    m_moon_isSet = !json[QString("moon")].isNull() && m_moon_isValid;

    m_sun_isValid = ::OpenAPI::fromJsonValue(m_sun, json[QString("sun")]);
    m_sun_isSet = !json[QString("sun")].isNull() && m_sun_isValid;
}

QString OAIPoint_PointDailyAstroData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint_PointDailyAstroData::asJsonObject() const {
    QJsonObject obj;
    if (m_moon.isSet()) {
        obj.insert(QString("moon"), ::OpenAPI::toJsonValue(m_moon));
    }
    if (m_sun.isSet()) {
        obj.insert(QString("sun"), ::OpenAPI::toJsonValue(m_sun));
    }
    return obj;
}

OAIPoint_PointDailyMoonData OAIPoint_PointDailyAstroData::getMoon() const {
    return m_moon;
}
void OAIPoint_PointDailyAstroData::setMoon(const OAIPoint_PointDailyMoonData &moon) {
    m_moon = moon;
    m_moon_isSet = true;
}

bool OAIPoint_PointDailyAstroData::is_moon_Set() const{
    return m_moon_isSet;
}

bool OAIPoint_PointDailyAstroData::is_moon_Valid() const{
    return m_moon_isValid;
}

OAIPoint_PointDailySunData OAIPoint_PointDailyAstroData::getSun() const {
    return m_sun;
}
void OAIPoint_PointDailyAstroData::setSun(const OAIPoint_PointDailySunData &sun) {
    m_sun = sun;
    m_sun_isSet = true;
}

bool OAIPoint_PointDailyAstroData::is_sun_Set() const{
    return m_sun_isSet;
}

bool OAIPoint_PointDailyAstroData::is_sun_Valid() const{
    return m_sun_isValid;
}

bool OAIPoint_PointDailyAstroData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_moon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sun.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint_PointDailyAstroData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_moon_isValid && m_sun_isValid && true;
}

} // namespace OpenAPI
