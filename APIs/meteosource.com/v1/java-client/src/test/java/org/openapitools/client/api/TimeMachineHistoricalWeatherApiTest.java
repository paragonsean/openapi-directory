/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GeneralRequestError;
import org.openapitools.client.model.HTTPValidationError;
import java.time.LocalDate;
import org.openapitools.client.model.TimeMachineTimeMachine;
import org.openapitools.client.model.Units;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeMachineHistoricalWeatherApi
 */
@Disabled
public class TimeMachineHistoricalWeatherApiTest {

    private final TimeMachineHistoricalWeatherApi api = new TimeMachineHistoricalWeatherApi();

    /**
     * Returns weather data for a single location and given day in the past
     *
     * ## Actual weather data for a single location and day in the past  The output contains actual weather data for each day up to 20 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.  ### Location specification The location of the weather data must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters &#x60;lat&#x60; and &#x60;lon&#x60;. 2. **OR** specify the name of the place using the parameter &#x60;place_id&#x60;. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name).  *Note: For mountains, it is usually better to specify the &#x60;place_id&#x60; rather than the &#x60;lat&#x60; and &#x60;lon&#x60;. When you use &#x60;place_id&#x60;, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeMachineTimeMachineGetTest() throws ApiException {
        LocalDate date = null;
        String placeId = null;
        String lat = null;
        String lon = null;
        String timezone = null;
        Units units = null;
        String key = null;
        TimeMachineTimeMachine response = api.timeMachineTimeMachineGet(date, placeId, lat, lon, timezone, units, key);
        // TODO: test validations
    }

}
