/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FindPlacesModel;
import org.openapitools.client.model.GeneralRequestError;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Language;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationEndpointsApi
 */
@Disabled
public class LocationEndpointsApiTest {

    private final LocationEndpointsApi api = new LocationEndpointsApi();

    /**
     * Search for places. Complete words required.
     *
     * ## Search for places  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_place_prefix&#x60; endpoint, complete words are required here. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPlacesFindPlacesGetTest() throws ApiException {
        String text = null;
        Language language = null;
        String key = null;
        List<FindPlacesModel> response = api.findPlacesFindPlacesGet(text, language, key);
        // TODO: test validations
    }

    /**
     * Prefix search for places. Useful for autocomplete forms.
     *
     * ## Search for places by prefix  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_places&#x60; endpoint, you should only specify the prefix of the place you are looking for. This is particularly useful for autocomplete forms. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPlacesPrefixFindPlacesPrefixGetTest() throws ApiException {
        String text = null;
        Language language = null;
        String key = null;
        List<FindPlacesModel> response = api.findPlacesPrefixFindPlacesPrefixGet(text, language, key);
        // TODO: test validations
    }

    /**
     * Returns the nearest named location for a given GPS coordinates.
     *
     * ## Search for nearest place by coordinates  You can use this endpoint to find the nearest place from given coordinates.  *Note: If you specify coordinates of a secluded place (e.g. middle of the ocean), the nearest point can be very far from the coordinates.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nearestPlaceNearestPlaceGetTest() throws ApiException {
        String lat = null;
        String lon = null;
        Language language = null;
        String key = null;
        FindPlacesModel response = api.nearestPlaceNearestPlaceGet(lat, lon, language, key);
        // TODO: test validations
    }

}
