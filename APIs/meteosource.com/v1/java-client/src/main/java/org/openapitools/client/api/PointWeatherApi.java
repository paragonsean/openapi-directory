/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AirQualityPointData;
import org.openapitools.client.model.GeneralRequestError;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.PointPointData;
import org.openapitools.client.model.Units;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PointWeatherApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PointWeatherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PointWeatherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for airQualityAirQualityGet
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airQualityAirQualityGetCall(String placeId, String lat, String lon, String timezone, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/air_quality";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (placeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("place_id", placeId));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airQualityAirQualityGetValidateBeforeCall(String placeId, String lat, String lon, String timezone, String key, final ApiCallback _callback) throws ApiException {
        return airQualityAirQualityGetCall(placeId, lat, lon, timezone, key, _callback);

    }

    /**
     * Returns air quality data for a single point (geographic name or GPS)
     * ## Air quality forecast for a single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters &#x60;lat&#x60; and &#x60;lon&#x60;. 2. **OR** specify the name of the place using the parameter &#x60;place_id&#x60;. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name).  ### Notes * **For a detailed description of variables, please consult ⚠️ &lt;a href&#x3D;\&quot;https://www.meteosource.com/documentation#description_aq\&quot; target&#x3D;\&quot;_blank\&quot;&gt;description of variables&lt;/a&gt; ⚠️ in Documentation or &#x60;Schema&#x60; of the response (link next to Example value in the Responses section below).** * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an &#x60;Expires&#x60; header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an &#x60;Accept-Encoding: gzip&#x60; header to your request. * When daylight saving time starts, one hourly record will be missing (typically &#x60;2:00:00 AM&#x60;). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically &#x60;2:00:00 AM&#x60;).
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return AirQualityPointData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public AirQualityPointData airQualityAirQualityGet(String placeId, String lat, String lon, String timezone, String key) throws ApiException {
        ApiResponse<AirQualityPointData> localVarResp = airQualityAirQualityGetWithHttpInfo(placeId, lat, lon, timezone, key);
        return localVarResp.getData();
    }

    /**
     * Returns air quality data for a single point (geographic name or GPS)
     * ## Air quality forecast for a single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters &#x60;lat&#x60; and &#x60;lon&#x60;. 2. **OR** specify the name of the place using the parameter &#x60;place_id&#x60;. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name).  ### Notes * **For a detailed description of variables, please consult ⚠️ &lt;a href&#x3D;\&quot;https://www.meteosource.com/documentation#description_aq\&quot; target&#x3D;\&quot;_blank\&quot;&gt;description of variables&lt;/a&gt; ⚠️ in Documentation or &#x60;Schema&#x60; of the response (link next to Example value in the Responses section below).** * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an &#x60;Expires&#x60; header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an &#x60;Accept-Encoding: gzip&#x60; header to your request. * When daylight saving time starts, one hourly record will be missing (typically &#x60;2:00:00 AM&#x60;). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically &#x60;2:00:00 AM&#x60;).
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return ApiResponse&lt;AirQualityPointData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirQualityPointData> airQualityAirQualityGetWithHttpInfo(String placeId, String lat, String lon, String timezone, String key) throws ApiException {
        okhttp3.Call localVarCall = airQualityAirQualityGetValidateBeforeCall(placeId, lat, lon, timezone, key, null);
        Type localVarReturnType = new TypeToken<AirQualityPointData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns air quality data for a single point (geographic name or GPS) (asynchronously)
     * ## Air quality forecast for a single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters &#x60;lat&#x60; and &#x60;lon&#x60;. 2. **OR** specify the name of the place using the parameter &#x60;place_id&#x60;. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name).  ### Notes * **For a detailed description of variables, please consult ⚠️ &lt;a href&#x3D;\&quot;https://www.meteosource.com/documentation#description_aq\&quot; target&#x3D;\&quot;_blank\&quot;&gt;description of variables&lt;/a&gt; ⚠️ in Documentation or &#x60;Schema&#x60; of the response (link next to Example value in the Responses section below).** * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an &#x60;Expires&#x60; header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an &#x60;Accept-Encoding: gzip&#x60; header to your request. * When daylight saving time starts, one hourly record will be missing (typically &#x60;2:00:00 AM&#x60;). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically &#x60;2:00:00 AM&#x60;).
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airQualityAirQualityGetAsync(String placeId, String lat, String lon, String timezone, String key, final ApiCallback<AirQualityPointData> _callback) throws ApiException {

        okhttp3.Call localVarCall = airQualityAirQualityGetValidateBeforeCall(placeId, lat, lon, timezone, key, _callback);
        Type localVarReturnType = new TypeToken<AirQualityPointData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pointPointGet
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param sections Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * &#x60;&#x60;current&#x60;&#x60;: Current weather situation * &#x60;&#x60;daily&#x60;&#x60;: Forecasts for each whole day, without the daily parts * &#x60;&#x60;daily-parts&#x60;&#x60;: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * &#x60;&#x60;hourly&#x60;&#x60;: Forecasts with hourly resolution * &#x60;&#x60;minutely&#x60;&#x60;: Precipitation forecast with 1 minute resolution * &#x60;&#x60;alerts&#x60;&#x60;: The weather alerts * &#x60;&#x60;all&#x60;&#x60;: All sections  (optional, default to current,hourly)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param units Unit system to be used. The available values are:  * &#x60;auto&#x60;: Select the system automatically, based on the forecast location. * &#x60;metric&#x60;: Metric (SI) units (&#x60;°C&#x60;, &#x60;mm/h&#x60;, &#x60;m/s&#x60;, &#x60;cm&#x60;, &#x60;km&#x60;, &#x60;hPa&#x60;). * &#x60;us&#x60;: Imperial units (&#x60;°F&#x60;, &#x60;in/h&#x60;, &#x60;mph&#x60;, &#x60;in&#x60;, &#x60;mi&#x60;, &#x60;Hg&#x60;). * &#x60;uk&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that visibility is in &#x60;miles&#x60; and wind speeds are in &#x60;mph&#x60;. * &#x60;ca&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that wind speeds are in &#x60;km/h&#x60; and pressure is in &#x60;kPa&#x60;.  (optional, default to auto)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pointPointGetCall(String placeId, String lat, String lon, String sections, String timezone, Language language, Units units, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/point";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (placeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("place_id", placeId));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (sections != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sections", sections));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (units != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("units", units));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pointPointGetValidateBeforeCall(String placeId, String lat, String lon, String sections, String timezone, Language language, Units units, String key, final ApiCallback _callback) throws ApiException {
        return pointPointGetCall(placeId, lat, lon, sections, timezone, language, units, key, _callback);

    }

    /**
     * Returns weather data for a single point (geographic name or GPS)
     * ## Current weather and forecast for single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters &#x60;lat&#x60; and &#x60;lon&#x60;. 2. **OR** specify the name of the place using the parameter &#x60;place_id&#x60;. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name).  *Note: For mountains, it is usually better to specify the &#x60;place_id&#x60; rather than the &#x60;lat&#x60; and &#x60;lon&#x60;. When you use &#x60;place_id&#x60;, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*  ### Sections The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:  * Current weather situation * Hourly forecast (for 24/48/96/168 hours, depending on the tier) * Daily forecast (for 7/10/30 days, depending on the tier) * Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers) * Weather alerts (only for higher tiers)  By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.  ### Notes * **For a detailed description of variables (e.g. icons), please consult ⚠️ &lt;a href&#x3D;\&quot;https://www.meteosource.com/documentation#description\&quot; target&#x3D;\&quot;_blank\&quot;&gt;description of variables&lt;/a&gt; ⚠️ in Documentation or &#x60;Schema&#x60; of the response (link next to Example value in the Responses section below).** * Variables can be instantaneous, averaged, or accumulated over certain time. For example, &#x60;precipitation&#x60; forecast provides the precipitation accumulated until the next hour (data with timestamp as &#x60;12:00:00&#x60; is rain accumulated from &#x60;12:00:00&#x60; to &#x60;13:00:00&#x60;). * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an &#x60;Expires&#x60; header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an &#x60;Accept-Encoding: gzip&#x60; header to your request. * When daylight saving time starts, one hourly record will be missing (typically &#x60;2:00:00 AM&#x60;). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically &#x60;2:00:00 AM&#x60;). * The detailed description of weather alerts is only available in English. The alert category is translated into selected language.
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param sections Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * &#x60;&#x60;current&#x60;&#x60;: Current weather situation * &#x60;&#x60;daily&#x60;&#x60;: Forecasts for each whole day, without the daily parts * &#x60;&#x60;daily-parts&#x60;&#x60;: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * &#x60;&#x60;hourly&#x60;&#x60;: Forecasts with hourly resolution * &#x60;&#x60;minutely&#x60;&#x60;: Precipitation forecast with 1 minute resolution * &#x60;&#x60;alerts&#x60;&#x60;: The weather alerts * &#x60;&#x60;all&#x60;&#x60;: All sections  (optional, default to current,hourly)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param units Unit system to be used. The available values are:  * &#x60;auto&#x60;: Select the system automatically, based on the forecast location. * &#x60;metric&#x60;: Metric (SI) units (&#x60;°C&#x60;, &#x60;mm/h&#x60;, &#x60;m/s&#x60;, &#x60;cm&#x60;, &#x60;km&#x60;, &#x60;hPa&#x60;). * &#x60;us&#x60;: Imperial units (&#x60;°F&#x60;, &#x60;in/h&#x60;, &#x60;mph&#x60;, &#x60;in&#x60;, &#x60;mi&#x60;, &#x60;Hg&#x60;). * &#x60;uk&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that visibility is in &#x60;miles&#x60; and wind speeds are in &#x60;mph&#x60;. * &#x60;ca&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that wind speeds are in &#x60;km/h&#x60; and pressure is in &#x60;kPa&#x60;.  (optional, default to auto)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return PointPointData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public PointPointData pointPointGet(String placeId, String lat, String lon, String sections, String timezone, Language language, Units units, String key) throws ApiException {
        ApiResponse<PointPointData> localVarResp = pointPointGetWithHttpInfo(placeId, lat, lon, sections, timezone, language, units, key);
        return localVarResp.getData();
    }

    /**
     * Returns weather data for a single point (geographic name or GPS)
     * ## Current weather and forecast for single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters &#x60;lat&#x60; and &#x60;lon&#x60;. 2. **OR** specify the name of the place using the parameter &#x60;place_id&#x60;. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name).  *Note: For mountains, it is usually better to specify the &#x60;place_id&#x60; rather than the &#x60;lat&#x60; and &#x60;lon&#x60;. When you use &#x60;place_id&#x60;, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*  ### Sections The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:  * Current weather situation * Hourly forecast (for 24/48/96/168 hours, depending on the tier) * Daily forecast (for 7/10/30 days, depending on the tier) * Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers) * Weather alerts (only for higher tiers)  By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.  ### Notes * **For a detailed description of variables (e.g. icons), please consult ⚠️ &lt;a href&#x3D;\&quot;https://www.meteosource.com/documentation#description\&quot; target&#x3D;\&quot;_blank\&quot;&gt;description of variables&lt;/a&gt; ⚠️ in Documentation or &#x60;Schema&#x60; of the response (link next to Example value in the Responses section below).** * Variables can be instantaneous, averaged, or accumulated over certain time. For example, &#x60;precipitation&#x60; forecast provides the precipitation accumulated until the next hour (data with timestamp as &#x60;12:00:00&#x60; is rain accumulated from &#x60;12:00:00&#x60; to &#x60;13:00:00&#x60;). * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an &#x60;Expires&#x60; header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an &#x60;Accept-Encoding: gzip&#x60; header to your request. * When daylight saving time starts, one hourly record will be missing (typically &#x60;2:00:00 AM&#x60;). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically &#x60;2:00:00 AM&#x60;). * The detailed description of weather alerts is only available in English. The alert category is translated into selected language.
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param sections Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * &#x60;&#x60;current&#x60;&#x60;: Current weather situation * &#x60;&#x60;daily&#x60;&#x60;: Forecasts for each whole day, without the daily parts * &#x60;&#x60;daily-parts&#x60;&#x60;: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * &#x60;&#x60;hourly&#x60;&#x60;: Forecasts with hourly resolution * &#x60;&#x60;minutely&#x60;&#x60;: Precipitation forecast with 1 minute resolution * &#x60;&#x60;alerts&#x60;&#x60;: The weather alerts * &#x60;&#x60;all&#x60;&#x60;: All sections  (optional, default to current,hourly)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param units Unit system to be used. The available values are:  * &#x60;auto&#x60;: Select the system automatically, based on the forecast location. * &#x60;metric&#x60;: Metric (SI) units (&#x60;°C&#x60;, &#x60;mm/h&#x60;, &#x60;m/s&#x60;, &#x60;cm&#x60;, &#x60;km&#x60;, &#x60;hPa&#x60;). * &#x60;us&#x60;: Imperial units (&#x60;°F&#x60;, &#x60;in/h&#x60;, &#x60;mph&#x60;, &#x60;in&#x60;, &#x60;mi&#x60;, &#x60;Hg&#x60;). * &#x60;uk&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that visibility is in &#x60;miles&#x60; and wind speeds are in &#x60;mph&#x60;. * &#x60;ca&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that wind speeds are in &#x60;km/h&#x60; and pressure is in &#x60;kPa&#x60;.  (optional, default to auto)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return ApiResponse&lt;PointPointData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PointPointData> pointPointGetWithHttpInfo(String placeId, String lat, String lon, String sections, String timezone, Language language, Units units, String key) throws ApiException {
        okhttp3.Call localVarCall = pointPointGetValidateBeforeCall(placeId, lat, lon, sections, timezone, language, units, key, null);
        Type localVarReturnType = new TypeToken<PointPointData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns weather data for a single point (geographic name or GPS) (asynchronously)
     * ## Current weather and forecast for single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters &#x60;lat&#x60; and &#x60;lon&#x60;. 2. **OR** specify the name of the place using the parameter &#x60;place_id&#x60;. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name).  *Note: For mountains, it is usually better to specify the &#x60;place_id&#x60; rather than the &#x60;lat&#x60; and &#x60;lon&#x60;. When you use &#x60;place_id&#x60;, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*  ### Sections The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:  * Current weather situation * Hourly forecast (for 24/48/96/168 hours, depending on the tier) * Daily forecast (for 7/10/30 days, depending on the tier) * Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers) * Weather alerts (only for higher tiers)  By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.  ### Notes * **For a detailed description of variables (e.g. icons), please consult ⚠️ &lt;a href&#x3D;\&quot;https://www.meteosource.com/documentation#description\&quot; target&#x3D;\&quot;_blank\&quot;&gt;description of variables&lt;/a&gt; ⚠️ in Documentation or &#x60;Schema&#x60; of the response (link next to Example value in the Responses section below).** * Variables can be instantaneous, averaged, or accumulated over certain time. For example, &#x60;precipitation&#x60; forecast provides the precipitation accumulated until the next hour (data with timestamp as &#x60;12:00:00&#x60; is rain accumulated from &#x60;12:00:00&#x60; to &#x60;13:00:00&#x60;). * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an &#x60;Expires&#x60; header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an &#x60;Accept-Encoding: gzip&#x60; header to your request. * When daylight saving time starts, one hourly record will be missing (typically &#x60;2:00:00 AM&#x60;). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically &#x60;2:00:00 AM&#x60;). * The detailed description of weather alerts is only available in English. The alert category is translated into selected language.
     * @param placeId Identifier of a place. To obtain the &#x60;place_id&#x60; for the location you want, please use endpoints &#x60;/find_places_prefix&#x60; (search by prefix) or &#x60;/find_places&#x60; (search by full name). (optional)
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (optional)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (optional)
     * @param sections Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * &#x60;&#x60;current&#x60;&#x60;: Current weather situation * &#x60;&#x60;daily&#x60;&#x60;: Forecasts for each whole day, without the daily parts * &#x60;&#x60;daily-parts&#x60;&#x60;: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * &#x60;&#x60;hourly&#x60;&#x60;: Forecasts with hourly resolution * &#x60;&#x60;minutely&#x60;&#x60;: Precipitation forecast with 1 minute resolution * &#x60;&#x60;alerts&#x60;&#x60;: The weather alerts * &#x60;&#x60;all&#x60;&#x60;: All sections  (optional, default to current,hourly)
     * @param timezone Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like &#x60;Europe/Prague&#x60; or &#x60;UTC&#x60; can be used. Alternatively you may use the value &#x60;&#x60;auto&#x60;&#x60; in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).  (optional)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param units Unit system to be used. The available values are:  * &#x60;auto&#x60;: Select the system automatically, based on the forecast location. * &#x60;metric&#x60;: Metric (SI) units (&#x60;°C&#x60;, &#x60;mm/h&#x60;, &#x60;m/s&#x60;, &#x60;cm&#x60;, &#x60;km&#x60;, &#x60;hPa&#x60;). * &#x60;us&#x60;: Imperial units (&#x60;°F&#x60;, &#x60;in/h&#x60;, &#x60;mph&#x60;, &#x60;in&#x60;, &#x60;mi&#x60;, &#x60;Hg&#x60;). * &#x60;uk&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that visibility is in &#x60;miles&#x60; and wind speeds are in &#x60;mph&#x60;. * &#x60;ca&#x60;: Same as &#x60;&#x60;metric&#x60;&#x60;, except that wind speeds are in &#x60;km/h&#x60; and pressure is in &#x60;kPa&#x60;.  (optional, default to auto)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pointPointGetAsync(String placeId, String lat, String lon, String sections, String timezone, Language language, Units units, String key, final ApiCallback<PointPointData> _callback) throws ApiException {

        okhttp3.Call localVarCall = pointPointGetValidateBeforeCall(placeId, lat, lon, sections, timezone, language, units, key, _callback);
        Type localVarReturnType = new TypeToken<PointPointData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
