/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointPointDailyStatsWindData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointPointDailyStatsWindData {
  public static final String SERIALIZED_NAME_AVG_ANGLE = "avg_angle";
  @SerializedName(SERIALIZED_NAME_AVG_ANGLE)
  private BigDecimal avgAngle;

  public static final String SERIALIZED_NAME_AVG_DIR = "avg_dir";
  @SerializedName(SERIALIZED_NAME_AVG_DIR)
  private File avgDir;

  public static final String SERIALIZED_NAME_AVG_SPEED = "avg_speed";
  @SerializedName(SERIALIZED_NAME_AVG_SPEED)
  private BigDecimal avgSpeed;

  public static final String SERIALIZED_NAME_MAX_GUST = "max_gust";
  @SerializedName(SERIALIZED_NAME_MAX_GUST)
  private BigDecimal maxGust;

  public static final String SERIALIZED_NAME_MAX_SPEED = "max_speed";
  @SerializedName(SERIALIZED_NAME_MAX_SPEED)
  private BigDecimal maxSpeed;

  public PointPointDailyStatsWindData() {
  }

  public PointPointDailyStatsWindData avgAngle(BigDecimal avgAngle) {
    this.avgAngle = avgAngle;
    return this;
  }

  /**
   * Long-term average wind angle. Unit: deg
   * @return avgAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getAvgAngle() {
    return avgAngle;
  }

  public void setAvgAngle(BigDecimal avgAngle) {
    this.avgAngle = avgAngle;
  }


  public PointPointDailyStatsWindData avgDir(File avgDir) {
    this.avgDir = avgDir;
    return this;
  }

  /**
   * Long-term average wind direction in &#39;N&#39;, &#39;NNE&#39;, &#39;NE&#39;, ... &#39;NNW&#39; format. Unit: 16dir
   * @return avgDir
   */
  @javax.annotation.Nullable
  public File getAvgDir() {
    return avgDir;
  }

  public void setAvgDir(File avgDir) {
    this.avgDir = avgDir;
  }


  public PointPointDailyStatsWindData avgSpeed(BigDecimal avgSpeed) {
    this.avgSpeed = avgSpeed;
    return this;
  }

  /**
   * Long-term average wind speed. Units: metric &#x3D; m/s, us &#x3D; mph, uk &#x3D; mph, ca &#x3D; km/h
   * @return avgSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getAvgSpeed() {
    return avgSpeed;
  }

  public void setAvgSpeed(BigDecimal avgSpeed) {
    this.avgSpeed = avgSpeed;
  }


  public PointPointDailyStatsWindData maxGust(BigDecimal maxGust) {
    this.maxGust = maxGust;
    return this;
  }

  /**
   * Historical daily maximum wind gust speed. Units: metric &#x3D; m/s, us &#x3D; mph, uk &#x3D; mph, ca &#x3D; km/h
   * @return maxGust
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxGust() {
    return maxGust;
  }

  public void setMaxGust(BigDecimal maxGust) {
    this.maxGust = maxGust;
  }


  public PointPointDailyStatsWindData maxSpeed(BigDecimal maxSpeed) {
    this.maxSpeed = maxSpeed;
    return this;
  }

  /**
   * Historical daily maximum wind speed. Units: metric &#x3D; m/s, us &#x3D; mph, uk &#x3D; mph, ca &#x3D; km/h
   * @return maxSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxSpeed() {
    return maxSpeed;
  }

  public void setMaxSpeed(BigDecimal maxSpeed) {
    this.maxSpeed = maxSpeed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointPointDailyStatsWindData pointPointDailyStatsWindData = (PointPointDailyStatsWindData) o;
    return Objects.equals(this.avgAngle, pointPointDailyStatsWindData.avgAngle) &&
        Objects.equals(this.avgDir, pointPointDailyStatsWindData.avgDir) &&
        Objects.equals(this.avgSpeed, pointPointDailyStatsWindData.avgSpeed) &&
        Objects.equals(this.maxGust, pointPointDailyStatsWindData.maxGust) &&
        Objects.equals(this.maxSpeed, pointPointDailyStatsWindData.maxSpeed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgAngle, avgDir, avgSpeed, maxGust, maxSpeed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointPointDailyStatsWindData {\n");
    sb.append("    avgAngle: ").append(toIndentedString(avgAngle)).append("\n");
    sb.append("    avgDir: ").append(toIndentedString(avgDir)).append("\n");
    sb.append("    avgSpeed: ").append(toIndentedString(avgSpeed)).append("\n");
    sb.append("    maxGust: ").append(toIndentedString(maxGust)).append("\n");
    sb.append("    maxSpeed: ").append(toIndentedString(maxSpeed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avg_angle");
    openapiFields.add("avg_dir");
    openapiFields.add("avg_speed");
    openapiFields.add("max_gust");
    openapiFields.add("max_speed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointPointDailyStatsWindData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointPointDailyStatsWindData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointPointDailyStatsWindData is not found in the empty JSON string", PointPointDailyStatsWindData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointPointDailyStatsWindData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointPointDailyStatsWindData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointPointDailyStatsWindData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointPointDailyStatsWindData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointPointDailyStatsWindData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointPointDailyStatsWindData.class));

       return (TypeAdapter<T>) new TypeAdapter<PointPointDailyStatsWindData>() {
           @Override
           public void write(JsonWriter out, PointPointDailyStatsWindData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointPointDailyStatsWindData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointPointDailyStatsWindData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointPointDailyStatsWindData
   * @throws IOException if the JSON string is invalid with respect to PointPointDailyStatsWindData
   */
  public static PointPointDailyStatsWindData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointPointDailyStatsWindData.class);
  }

  /**
   * Convert an instance of PointPointDailyStatsWindData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

