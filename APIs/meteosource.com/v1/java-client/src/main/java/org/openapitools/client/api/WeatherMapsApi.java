/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GeneralRequestError;
import org.openapitools.client.model.HTTPValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WeatherMapsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WeatherMapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WeatherMapsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapMapGet
     * @param variable Name of the variable for your map. Available values are:  * &#x60;temperature&#x60;: Temperature 2 metres above ground * &#x60;feels_like_temperature&#x60;: Feels like temperature * &#x60;clouds&#x60;: Percentage of sky covered by clouds * &#x60;precipitation&#x60;: Total precipitation amount accumulated since last hour * &#x60;wind_speed&#x60;: Wind speed 10 metres above the ground * &#x60;wind_gust&#x60;: Wind gust speed * &#x60;pressure&#x60;: Atmospheric pressure at mean sea level * &#x60;humidity&#x60;: Relative humidity * &#x60;wave_height&#x60;: Wave height * &#x60;wave_period&#x60;: Wave period * &#x60;sea_temperature&#x60;: Sea temperature (available only for +-24 hours) * &#x60;air_quality&#x60;: Air quality index * &#x60;ozone_surface&#x60;: Ozone at surface level * &#x60;ozone_total&#x60;: Total column ozone * &#x60;no2&#x60;: Nitrogen dioxide at surface level * &#x60;pm2.5&#x60;: Particulate matter d &lt; 2.5 Âµm (PM2.5)  (required)
     * @param datetime There are two ways to specify date and time for your map:  1. Datetime in &#x60;YYYY-MM-DDTHH:MM&#x60; format and &#x60;UTC&#x60; timezone, e.g. &#x60;2021-08-24T12:00&#x60; 2. Offset from current time in &#x60;[+-]&lt;minutes|hours|days&gt;&#x60; format, e.g. &#x60;+10minutes&#x60;, &#x60;-2hours&#x60; or &#x60;+1days&#x60;  (required)
     * @param tileX The X coordinate of Google Maps tile (optional)
     * @param tileY The Y coordinate of Google Maps tile (optional)
     * @param tileZoom The zoom level of Google Maps tile (optional)
     * @param minLat Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2  (optional)
     * @param minLon Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param maxLat Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2.  (optional)
     * @param maxLon Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapMapGetCall(String variable, String datetime, Integer tileX, Integer tileY, Integer tileZoom, String minLat, String minLon, String maxLat, String maxLon, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tileX != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tile_x", tileX));
        }

        if (tileY != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tile_y", tileY));
        }

        if (tileZoom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tile_zoom", tileZoom));
        }

        if (minLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lat", minLat));
        }

        if (minLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_lon", minLon));
        }

        if (maxLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lat", maxLat));
        }

        if (maxLon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_lon", maxLon));
        }

        if (variable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variable", variable));
        }

        if (datetime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datetime", datetime));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapMapGetValidateBeforeCall(String variable, String datetime, Integer tileX, Integer tileY, Integer tileZoom, String minLat, String minLon, String maxLat, String maxLon, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling mapMapGet(Async)");
        }

        // verify the required parameter 'datetime' is set
        if (datetime == null) {
            throw new ApiException("Missing the required parameter 'datetime' when calling mapMapGet(Async)");
        }

        return mapMapGetCall(variable, datetime, tileX, tileY, tileZoom, minLat, minLon, maxLat, maxLon, key, _callback);

    }

    /**
     * Returns PNG weather map for given area and variable
     * ## PNG weather forecast maps for given area and variable  ### Area specification There are two ways to specify geographical area you need for your map: 1. Specify &#x60;X&#x60; and &#x60;Y&#x60; coordinates and zoom level &#x60;Z&#x60; of desired tile in &lt;a href&#x3D;\&quot;https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\&quot; rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Google Maps Tile notation&lt;/a&gt;. 2. Specify latitude and longitude bounds of the area you want to cover.  ### Notes * The resulting PNG maps are **always** in &lt;a href&#x3D;\&quot;https://epsg.io/3857\&quot; rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Google Mercator projection (EPSG:3857)&lt;/a&gt;. * As Meteosource only covers areas between latitudes 80Â° and -80Â°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent. * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses. * Weather maps are only supported for forecasts, not for archive data.
     * @param variable Name of the variable for your map. Available values are:  * &#x60;temperature&#x60;: Temperature 2 metres above ground * &#x60;feels_like_temperature&#x60;: Feels like temperature * &#x60;clouds&#x60;: Percentage of sky covered by clouds * &#x60;precipitation&#x60;: Total precipitation amount accumulated since last hour * &#x60;wind_speed&#x60;: Wind speed 10 metres above the ground * &#x60;wind_gust&#x60;: Wind gust speed * &#x60;pressure&#x60;: Atmospheric pressure at mean sea level * &#x60;humidity&#x60;: Relative humidity * &#x60;wave_height&#x60;: Wave height * &#x60;wave_period&#x60;: Wave period * &#x60;sea_temperature&#x60;: Sea temperature (available only for +-24 hours) * &#x60;air_quality&#x60;: Air quality index * &#x60;ozone_surface&#x60;: Ozone at surface level * &#x60;ozone_total&#x60;: Total column ozone * &#x60;no2&#x60;: Nitrogen dioxide at surface level * &#x60;pm2.5&#x60;: Particulate matter d &lt; 2.5 Âµm (PM2.5)  (required)
     * @param datetime There are two ways to specify date and time for your map:  1. Datetime in &#x60;YYYY-MM-DDTHH:MM&#x60; format and &#x60;UTC&#x60; timezone, e.g. &#x60;2021-08-24T12:00&#x60; 2. Offset from current time in &#x60;[+-]&lt;minutes|hours|days&gt;&#x60; format, e.g. &#x60;+10minutes&#x60;, &#x60;-2hours&#x60; or &#x60;+1days&#x60;  (required)
     * @param tileX The X coordinate of Google Maps tile (optional)
     * @param tileY The Y coordinate of Google Maps tile (optional)
     * @param tileZoom The zoom level of Google Maps tile (optional)
     * @param minLat Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2  (optional)
     * @param minLon Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param maxLat Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2.  (optional)
     * @param maxLon Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public String mapMapGet(String variable, String datetime, Integer tileX, Integer tileY, Integer tileZoom, String minLat, String minLon, String maxLat, String maxLon, String key) throws ApiException {
        ApiResponse<String> localVarResp = mapMapGetWithHttpInfo(variable, datetime, tileX, tileY, tileZoom, minLat, minLon, maxLat, maxLon, key);
        return localVarResp.getData();
    }

    /**
     * Returns PNG weather map for given area and variable
     * ## PNG weather forecast maps for given area and variable  ### Area specification There are two ways to specify geographical area you need for your map: 1. Specify &#x60;X&#x60; and &#x60;Y&#x60; coordinates and zoom level &#x60;Z&#x60; of desired tile in &lt;a href&#x3D;\&quot;https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\&quot; rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Google Maps Tile notation&lt;/a&gt;. 2. Specify latitude and longitude bounds of the area you want to cover.  ### Notes * The resulting PNG maps are **always** in &lt;a href&#x3D;\&quot;https://epsg.io/3857\&quot; rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Google Mercator projection (EPSG:3857)&lt;/a&gt;. * As Meteosource only covers areas between latitudes 80Â° and -80Â°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent. * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses. * Weather maps are only supported for forecasts, not for archive data.
     * @param variable Name of the variable for your map. Available values are:  * &#x60;temperature&#x60;: Temperature 2 metres above ground * &#x60;feels_like_temperature&#x60;: Feels like temperature * &#x60;clouds&#x60;: Percentage of sky covered by clouds * &#x60;precipitation&#x60;: Total precipitation amount accumulated since last hour * &#x60;wind_speed&#x60;: Wind speed 10 metres above the ground * &#x60;wind_gust&#x60;: Wind gust speed * &#x60;pressure&#x60;: Atmospheric pressure at mean sea level * &#x60;humidity&#x60;: Relative humidity * &#x60;wave_height&#x60;: Wave height * &#x60;wave_period&#x60;: Wave period * &#x60;sea_temperature&#x60;: Sea temperature (available only for +-24 hours) * &#x60;air_quality&#x60;: Air quality index * &#x60;ozone_surface&#x60;: Ozone at surface level * &#x60;ozone_total&#x60;: Total column ozone * &#x60;no2&#x60;: Nitrogen dioxide at surface level * &#x60;pm2.5&#x60;: Particulate matter d &lt; 2.5 Âµm (PM2.5)  (required)
     * @param datetime There are two ways to specify date and time for your map:  1. Datetime in &#x60;YYYY-MM-DDTHH:MM&#x60; format and &#x60;UTC&#x60; timezone, e.g. &#x60;2021-08-24T12:00&#x60; 2. Offset from current time in &#x60;[+-]&lt;minutes|hours|days&gt;&#x60; format, e.g. &#x60;+10minutes&#x60;, &#x60;-2hours&#x60; or &#x60;+1days&#x60;  (required)
     * @param tileX The X coordinate of Google Maps tile (optional)
     * @param tileY The Y coordinate of Google Maps tile (optional)
     * @param tileZoom The zoom level of Google Maps tile (optional)
     * @param minLat Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2  (optional)
     * @param minLon Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param maxLat Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2.  (optional)
     * @param maxLon Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> mapMapGetWithHttpInfo(String variable, String datetime, Integer tileX, Integer tileY, Integer tileZoom, String minLat, String minLon, String maxLat, String maxLon, String key) throws ApiException {
        okhttp3.Call localVarCall = mapMapGetValidateBeforeCall(variable, datetime, tileX, tileY, tileZoom, minLat, minLon, maxLat, maxLon, key, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns PNG weather map for given area and variable (asynchronously)
     * ## PNG weather forecast maps for given area and variable  ### Area specification There are two ways to specify geographical area you need for your map: 1. Specify &#x60;X&#x60; and &#x60;Y&#x60; coordinates and zoom level &#x60;Z&#x60; of desired tile in &lt;a href&#x3D;\&quot;https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\&quot; rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Google Maps Tile notation&lt;/a&gt;. 2. Specify latitude and longitude bounds of the area you want to cover.  ### Notes * The resulting PNG maps are **always** in &lt;a href&#x3D;\&quot;https://epsg.io/3857\&quot; rel&#x3D;\&quot;nofollow\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Google Mercator projection (EPSG:3857)&lt;/a&gt;. * As Meteosource only covers areas between latitudes 80Â° and -80Â°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent. * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses. * Weather maps are only supported for forecasts, not for archive data.
     * @param variable Name of the variable for your map. Available values are:  * &#x60;temperature&#x60;: Temperature 2 metres above ground * &#x60;feels_like_temperature&#x60;: Feels like temperature * &#x60;clouds&#x60;: Percentage of sky covered by clouds * &#x60;precipitation&#x60;: Total precipitation amount accumulated since last hour * &#x60;wind_speed&#x60;: Wind speed 10 metres above the ground * &#x60;wind_gust&#x60;: Wind gust speed * &#x60;pressure&#x60;: Atmospheric pressure at mean sea level * &#x60;humidity&#x60;: Relative humidity * &#x60;wave_height&#x60;: Wave height * &#x60;wave_period&#x60;: Wave period * &#x60;sea_temperature&#x60;: Sea temperature (available only for +-24 hours) * &#x60;air_quality&#x60;: Air quality index * &#x60;ozone_surface&#x60;: Ozone at surface level * &#x60;ozone_total&#x60;: Total column ozone * &#x60;no2&#x60;: Nitrogen dioxide at surface level * &#x60;pm2.5&#x60;: Particulate matter d &lt; 2.5 Âµm (PM2.5)  (required)
     * @param datetime There are two ways to specify date and time for your map:  1. Datetime in &#x60;YYYY-MM-DDTHH:MM&#x60; format and &#x60;UTC&#x60; timezone, e.g. &#x60;2021-08-24T12:00&#x60; 2. Offset from current time in &#x60;[+-]&lt;minutes|hours|days&gt;&#x60; format, e.g. &#x60;+10minutes&#x60;, &#x60;-2hours&#x60; or &#x60;+1days&#x60;  (required)
     * @param tileX The X coordinate of Google Maps tile (optional)
     * @param tileY The Y coordinate of Google Maps tile (optional)
     * @param tileZoom The zoom level of Google Maps tile (optional)
     * @param minLat Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2  (optional)
     * @param minLon Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param maxLat Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2.  (optional)
     * @param maxLon Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2  (optional)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapMapGetAsync(String variable, String datetime, Integer tileX, Integer tileY, Integer tileZoom, String minLat, String minLon, String maxLat, String maxLon, String key, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapMapGetValidateBeforeCall(variable, datetime, tileX, tileY, tileZoom, minLat, minLon, maxLat, maxLon, key, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
