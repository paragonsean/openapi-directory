/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AirQualityPointHourlyData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirQualityPointHourlyData {
  public static final String SERIALIZED_NAME_AEROSOL550 = "aerosol_550";
  @SerializedName(SERIALIZED_NAME_AEROSOL550)
  private BigDecimal aerosol550;

  public static final String SERIALIZED_NAME_AIR_QUALITY = "air_quality";
  @SerializedName(SERIALIZED_NAME_AIR_QUALITY)
  private BigDecimal airQuality;

  public static final String SERIALIZED_NAME_CO_SURFACE = "co_surface";
  @SerializedName(SERIALIZED_NAME_CO_SURFACE)
  private BigDecimal coSurface;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DUST550NM = "dust_550nm";
  @SerializedName(SERIALIZED_NAME_DUST550NM)
  private BigDecimal dust550nm;

  public static final String SERIALIZED_NAME_DUST_MIXING_RATIO05 = "dust_mixing_ratio_05";
  @SerializedName(SERIALIZED_NAME_DUST_MIXING_RATIO05)
  private BigDecimal dustMixingRatio05;

  public static final String SERIALIZED_NAME_NO2_SURFACE = "no2_surface";
  @SerializedName(SERIALIZED_NAME_NO2_SURFACE)
  private BigDecimal no2Surface;

  public static final String SERIALIZED_NAME_NO_SURFACE = "no_surface";
  @SerializedName(SERIALIZED_NAME_NO_SURFACE)
  private BigDecimal noSurface;

  public static final String SERIALIZED_NAME_OZONE_SURFACE = "ozone_surface";
  @SerializedName(SERIALIZED_NAME_OZONE_SURFACE)
  private BigDecimal ozoneSurface;

  public static final String SERIALIZED_NAME_OZONE_TOTAL = "ozone_total";
  @SerializedName(SERIALIZED_NAME_OZONE_TOTAL)
  private BigDecimal ozoneTotal;

  public static final String SERIALIZED_NAME_PM10 = "pm10";
  @SerializedName(SERIALIZED_NAME_PM10)
  private BigDecimal pm10;

  public static final String SERIALIZED_NAME_PM25 = "pm25";
  @SerializedName(SERIALIZED_NAME_PM25)
  private BigDecimal pm25;

  public static final String SERIALIZED_NAME_SO2_SURFACE = "so2_surface";
  @SerializedName(SERIALIZED_NAME_SO2_SURFACE)
  private BigDecimal so2Surface;

  public AirQualityPointHourlyData() {
  }

  public AirQualityPointHourlyData aerosol550(BigDecimal aerosol550) {
    this.aerosol550 = aerosol550;
    return this;
  }

  /**
   * Total aerosol optical depth at 550 nm. Unit: dimensionless
   * @return aerosol550
   */
  @javax.annotation.Nullable
  public BigDecimal getAerosol550() {
    return aerosol550;
  }

  public void setAerosol550(BigDecimal aerosol550) {
    this.aerosol550 = aerosol550;
  }


  public AirQualityPointHourlyData airQuality(BigDecimal airQuality) {
    this.airQuality = airQuality;
    return this;
  }

  /**
   * Air quality index. The following values can appear:  * 1 - Very good * 2 - Good * 3 - Medium * 4 - Poor * 5 - Very poor * 6 - Extremely poor  Unit: index
   * @return airQuality
   */
  @javax.annotation.Nullable
  public BigDecimal getAirQuality() {
    return airQuality;
  }

  public void setAirQuality(BigDecimal airQuality) {
    this.airQuality = airQuality;
  }


  public AirQualityPointHourlyData coSurface(BigDecimal coSurface) {
    this.coSurface = coSurface;
    return this;
  }

  /**
   * Carbon monoxide at surface level. Unit: µg/m3
   * @return coSurface
   */
  @javax.annotation.Nullable
  public BigDecimal getCoSurface() {
    return coSurface;
  }

  public void setCoSurface(BigDecimal coSurface) {
    this.coSurface = coSurface;
  }


  public AirQualityPointHourlyData date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Datetime in YYYY-MM-DDTHH:MM:SS format.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public AirQualityPointHourlyData dust550nm(BigDecimal dust550nm) {
    this.dust550nm = dust550nm;
    return this;
  }

  /**
   * Dust aerosol optical depth at 550 nm. Unit: dimensionless
   * @return dust550nm
   */
  @javax.annotation.Nullable
  public BigDecimal getDust550nm() {
    return dust550nm;
  }

  public void setDust550nm(BigDecimal dust550nm) {
    this.dust550nm = dust550nm;
  }


  public AirQualityPointHourlyData dustMixingRatio05(BigDecimal dustMixingRatio05) {
    this.dustMixingRatio05 = dustMixingRatio05;
    return this;
  }

  /**
   * Dust aerosol (0.55 - 0.9 µm) mixing ratio. Unit: kg/kg
   * @return dustMixingRatio05
   */
  @javax.annotation.Nullable
  public BigDecimal getDustMixingRatio05() {
    return dustMixingRatio05;
  }

  public void setDustMixingRatio05(BigDecimal dustMixingRatio05) {
    this.dustMixingRatio05 = dustMixingRatio05;
  }


  public AirQualityPointHourlyData no2Surface(BigDecimal no2Surface) {
    this.no2Surface = no2Surface;
    return this;
  }

  /**
   * Nitrogen dioxide at surface level. Unit: µg/m3
   * @return no2Surface
   */
  @javax.annotation.Nullable
  public BigDecimal getNo2Surface() {
    return no2Surface;
  }

  public void setNo2Surface(BigDecimal no2Surface) {
    this.no2Surface = no2Surface;
  }


  public AirQualityPointHourlyData noSurface(BigDecimal noSurface) {
    this.noSurface = noSurface;
    return this;
  }

  /**
   * Nitrogen monoxide at surface level. Unit: µg/m3
   * @return noSurface
   */
  @javax.annotation.Nullable
  public BigDecimal getNoSurface() {
    return noSurface;
  }

  public void setNoSurface(BigDecimal noSurface) {
    this.noSurface = noSurface;
  }


  public AirQualityPointHourlyData ozoneSurface(BigDecimal ozoneSurface) {
    this.ozoneSurface = ozoneSurface;
    return this;
  }

  /**
   * Ozone. Unit: µg/m3
   * @return ozoneSurface
   */
  @javax.annotation.Nullable
  public BigDecimal getOzoneSurface() {
    return ozoneSurface;
  }

  public void setOzoneSurface(BigDecimal ozoneSurface) {
    this.ozoneSurface = ozoneSurface;
  }


  public AirQualityPointHourlyData ozoneTotal(BigDecimal ozoneTotal) {
    this.ozoneTotal = ozoneTotal;
    return this;
  }

  /**
   * Total column ozone. Unit: Dobson
   * @return ozoneTotal
   */
  @javax.annotation.Nullable
  public BigDecimal getOzoneTotal() {
    return ozoneTotal;
  }

  public void setOzoneTotal(BigDecimal ozoneTotal) {
    this.ozoneTotal = ozoneTotal;
  }


  public AirQualityPointHourlyData pm10(BigDecimal pm10) {
    this.pm10 = pm10;
    return this;
  }

  /**
   * Particulate matter d &lt; 10 µm (PM10). Unit: µg/m3
   * @return pm10
   */
  @javax.annotation.Nullable
  public BigDecimal getPm10() {
    return pm10;
  }

  public void setPm10(BigDecimal pm10) {
    this.pm10 = pm10;
  }


  public AirQualityPointHourlyData pm25(BigDecimal pm25) {
    this.pm25 = pm25;
    return this;
  }

  /**
   * Particulate matter d &lt; 2.5 µm (PM2.5). Unit: µg/m3
   * @return pm25
   */
  @javax.annotation.Nullable
  public BigDecimal getPm25() {
    return pm25;
  }

  public void setPm25(BigDecimal pm25) {
    this.pm25 = pm25;
  }


  public AirQualityPointHourlyData so2Surface(BigDecimal so2Surface) {
    this.so2Surface = so2Surface;
    return this;
  }

  /**
   * Sulphur dioxide at surface level. Unit: µg/m3
   * @return so2Surface
   */
  @javax.annotation.Nullable
  public BigDecimal getSo2Surface() {
    return so2Surface;
  }

  public void setSo2Surface(BigDecimal so2Surface) {
    this.so2Surface = so2Surface;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirQualityPointHourlyData airQualityPointHourlyData = (AirQualityPointHourlyData) o;
    return Objects.equals(this.aerosol550, airQualityPointHourlyData.aerosol550) &&
        Objects.equals(this.airQuality, airQualityPointHourlyData.airQuality) &&
        Objects.equals(this.coSurface, airQualityPointHourlyData.coSurface) &&
        Objects.equals(this.date, airQualityPointHourlyData.date) &&
        Objects.equals(this.dust550nm, airQualityPointHourlyData.dust550nm) &&
        Objects.equals(this.dustMixingRatio05, airQualityPointHourlyData.dustMixingRatio05) &&
        Objects.equals(this.no2Surface, airQualityPointHourlyData.no2Surface) &&
        Objects.equals(this.noSurface, airQualityPointHourlyData.noSurface) &&
        Objects.equals(this.ozoneSurface, airQualityPointHourlyData.ozoneSurface) &&
        Objects.equals(this.ozoneTotal, airQualityPointHourlyData.ozoneTotal) &&
        Objects.equals(this.pm10, airQualityPointHourlyData.pm10) &&
        Objects.equals(this.pm25, airQualityPointHourlyData.pm25) &&
        Objects.equals(this.so2Surface, airQualityPointHourlyData.so2Surface);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aerosol550, airQuality, coSurface, date, dust550nm, dustMixingRatio05, no2Surface, noSurface, ozoneSurface, ozoneTotal, pm10, pm25, so2Surface);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirQualityPointHourlyData {\n");
    sb.append("    aerosol550: ").append(toIndentedString(aerosol550)).append("\n");
    sb.append("    airQuality: ").append(toIndentedString(airQuality)).append("\n");
    sb.append("    coSurface: ").append(toIndentedString(coSurface)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dust550nm: ").append(toIndentedString(dust550nm)).append("\n");
    sb.append("    dustMixingRatio05: ").append(toIndentedString(dustMixingRatio05)).append("\n");
    sb.append("    no2Surface: ").append(toIndentedString(no2Surface)).append("\n");
    sb.append("    noSurface: ").append(toIndentedString(noSurface)).append("\n");
    sb.append("    ozoneSurface: ").append(toIndentedString(ozoneSurface)).append("\n");
    sb.append("    ozoneTotal: ").append(toIndentedString(ozoneTotal)).append("\n");
    sb.append("    pm10: ").append(toIndentedString(pm10)).append("\n");
    sb.append("    pm25: ").append(toIndentedString(pm25)).append("\n");
    sb.append("    so2Surface: ").append(toIndentedString(so2Surface)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aerosol_550");
    openapiFields.add("air_quality");
    openapiFields.add("co_surface");
    openapiFields.add("date");
    openapiFields.add("dust_550nm");
    openapiFields.add("dust_mixing_ratio_05");
    openapiFields.add("no2_surface");
    openapiFields.add("no_surface");
    openapiFields.add("ozone_surface");
    openapiFields.add("ozone_total");
    openapiFields.add("pm10");
    openapiFields.add("pm25");
    openapiFields.add("so2_surface");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirQualityPointHourlyData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirQualityPointHourlyData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirQualityPointHourlyData is not found in the empty JSON string", AirQualityPointHourlyData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirQualityPointHourlyData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirQualityPointHourlyData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirQualityPointHourlyData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirQualityPointHourlyData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirQualityPointHourlyData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirQualityPointHourlyData.class));

       return (TypeAdapter<T>) new TypeAdapter<AirQualityPointHourlyData>() {
           @Override
           public void write(JsonWriter out, AirQualityPointHourlyData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirQualityPointHourlyData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirQualityPointHourlyData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirQualityPointHourlyData
   * @throws IOException if the JSON string is invalid with respect to AirQualityPointHourlyData
   */
  public static AirQualityPointHourlyData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirQualityPointHourlyData.class);
  }

  /**
   * Convert an instance of AirQualityPointHourlyData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

