/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PointPointDailyAfternoonData;
import org.openapitools.client.model.PointPointDailyAllDayData;
import org.openapitools.client.model.PointPointDailyAstroData;
import org.openapitools.client.model.PointPointDailyEveningData;
import org.openapitools.client.model.PointPointDailyMorningData;
import org.openapitools.client.model.PointPointDailyStatsData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointPointDailyData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointPointDailyData {
  public static final String SERIALIZED_NAME_AFTERNOON = "afternoon";
  @SerializedName(SERIALIZED_NAME_AFTERNOON)
  private PointPointDailyAfternoonData afternoon;

  public static final String SERIALIZED_NAME_ALL_DAY = "all_day";
  @SerializedName(SERIALIZED_NAME_ALL_DAY)
  private PointPointDailyAllDayData allDay;

  public static final String SERIALIZED_NAME_ASTRO = "astro";
  @SerializedName(SERIALIZED_NAME_ASTRO)
  private PointPointDailyAstroData astro;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private File day;

  public static final String SERIALIZED_NAME_EVENING = "evening";
  @SerializedName(SERIALIZED_NAME_EVENING)
  private PointPointDailyEveningData evening;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private Integer icon;

  public static final String SERIALIZED_NAME_MORNING = "morning";
  @SerializedName(SERIALIZED_NAME_MORNING)
  private PointPointDailyMorningData morning;

  public static final String SERIALIZED_NAME_PREDICTABILITY = "predictability";
  @SerializedName(SERIALIZED_NAME_PREDICTABILITY)
  private Integer predictability;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private PointPointDailyStatsData statistics;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_WEATHER = "weather";
  @SerializedName(SERIALIZED_NAME_WEATHER)
  private String weather;

  public PointPointDailyData() {
  }

  public PointPointDailyData afternoon(PointPointDailyAfternoonData afternoon) {
    this.afternoon = afternoon;
    return this;
  }

  /**
   * Get afternoon
   * @return afternoon
   */
  @javax.annotation.Nullable
  public PointPointDailyAfternoonData getAfternoon() {
    return afternoon;
  }

  public void setAfternoon(PointPointDailyAfternoonData afternoon) {
    this.afternoon = afternoon;
  }


  public PointPointDailyData allDay(PointPointDailyAllDayData allDay) {
    this.allDay = allDay;
    return this;
  }

  /**
   * Get allDay
   * @return allDay
   */
  @javax.annotation.Nonnull
  public PointPointDailyAllDayData getAllDay() {
    return allDay;
  }

  public void setAllDay(PointPointDailyAllDayData allDay) {
    this.allDay = allDay;
  }


  public PointPointDailyData astro(PointPointDailyAstroData astro) {
    this.astro = astro;
    return this;
  }

  /**
   * Get astro
   * @return astro
   */
  @javax.annotation.Nonnull
  public PointPointDailyAstroData getAstro() {
    return astro;
  }

  public void setAstro(PointPointDailyAstroData astro) {
    this.astro = astro;
  }


  public PointPointDailyData day(File day) {
    this.day = day;
    return this;
  }

  /**
   * Datetime in YYYY-MM-DDTHH:MM:SS format.
   * @return day
   */
  @javax.annotation.Nullable
  public File getDay() {
    return day;
  }

  public void setDay(File day) {
    this.day = day;
  }


  public PointPointDailyData evening(PointPointDailyEveningData evening) {
    this.evening = evening;
    return this;
  }

  /**
   * Get evening
   * @return evening
   */
  @javax.annotation.Nullable
  public PointPointDailyEveningData getEvening() {
    return evening;
  }

  public void setEvening(PointPointDailyEveningData evening) {
    this.evening = evening;
  }


  public PointPointDailyData icon(Integer icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: icon
   * @return icon
   */
  @javax.annotation.Nullable
  public Integer getIcon() {
    return icon;
  }

  public void setIcon(Integer icon) {
    this.icon = icon;
  }


  public PointPointDailyData morning(PointPointDailyMorningData morning) {
    this.morning = morning;
    return this;
  }

  /**
   * Get morning
   * @return morning
   */
  @javax.annotation.Nullable
  public PointPointDailyMorningData getMorning() {
    return morning;
  }

  public void setMorning(PointPointDailyMorningData morning) {
    this.morning = morning;
  }


  public PointPointDailyData predictability(Integer predictability) {
    this.predictability = predictability;
    return this;
  }

  /**
   * Weather predictability. Values from 1 (very high predictability) to 5 (very low predictability). Unit: 1-5
   * @return predictability
   */
  @javax.annotation.Nullable
  public Integer getPredictability() {
    return predictability;
  }

  public void setPredictability(Integer predictability) {
    this.predictability = predictability;
  }


  public PointPointDailyData statistics(PointPointDailyStatsData statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nonnull
  public PointPointDailyStatsData getStatistics() {
    return statistics;
  }

  public void setStatistics(PointPointDailyStatsData statistics) {
    this.statistics = statistics;
  }


  public PointPointDailyData summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Short text summary of the weather, e.g. &#x60;Light rain&#x60;.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public PointPointDailyData weather(String weather) {
    this.weather = weather;
    return this;
  }

  /**
   * All day string identifier of the weather icon, e.g. &#x60;light_rain&#x60;.
   * @return weather
   */
  @javax.annotation.Nullable
  public String getWeather() {
    return weather;
  }

  public void setWeather(String weather) {
    this.weather = weather;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointPointDailyData pointPointDailyData = (PointPointDailyData) o;
    return Objects.equals(this.afternoon, pointPointDailyData.afternoon) &&
        Objects.equals(this.allDay, pointPointDailyData.allDay) &&
        Objects.equals(this.astro, pointPointDailyData.astro) &&
        Objects.equals(this.day, pointPointDailyData.day) &&
        Objects.equals(this.evening, pointPointDailyData.evening) &&
        Objects.equals(this.icon, pointPointDailyData.icon) &&
        Objects.equals(this.morning, pointPointDailyData.morning) &&
        Objects.equals(this.predictability, pointPointDailyData.predictability) &&
        Objects.equals(this.statistics, pointPointDailyData.statistics) &&
        Objects.equals(this.summary, pointPointDailyData.summary) &&
        Objects.equals(this.weather, pointPointDailyData.weather);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afternoon, allDay, astro, day, evening, icon, morning, predictability, statistics, summary, weather);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointPointDailyData {\n");
    sb.append("    afternoon: ").append(toIndentedString(afternoon)).append("\n");
    sb.append("    allDay: ").append(toIndentedString(allDay)).append("\n");
    sb.append("    astro: ").append(toIndentedString(astro)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    evening: ").append(toIndentedString(evening)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    morning: ").append(toIndentedString(morning)).append("\n");
    sb.append("    predictability: ").append(toIndentedString(predictability)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("afternoon");
    openapiFields.add("all_day");
    openapiFields.add("astro");
    openapiFields.add("day");
    openapiFields.add("evening");
    openapiFields.add("icon");
    openapiFields.add("morning");
    openapiFields.add("predictability");
    openapiFields.add("statistics");
    openapiFields.add("summary");
    openapiFields.add("weather");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("all_day");
    openapiRequiredFields.add("astro");
    openapiRequiredFields.add("statistics");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointPointDailyData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointPointDailyData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointPointDailyData is not found in the empty JSON string", PointPointDailyData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointPointDailyData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointPointDailyData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PointPointDailyData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `afternoon`
      if (jsonObj.get("afternoon") != null && !jsonObj.get("afternoon").isJsonNull()) {
        PointPointDailyAfternoonData.validateJsonElement(jsonObj.get("afternoon"));
      }
      // validate the required field `all_day`
      PointPointDailyAllDayData.validateJsonElement(jsonObj.get("all_day"));
      // validate the required field `astro`
      PointPointDailyAstroData.validateJsonElement(jsonObj.get("astro"));
      // validate the optional field `evening`
      if (jsonObj.get("evening") != null && !jsonObj.get("evening").isJsonNull()) {
        PointPointDailyEveningData.validateJsonElement(jsonObj.get("evening"));
      }
      // validate the optional field `morning`
      if (jsonObj.get("morning") != null && !jsonObj.get("morning").isJsonNull()) {
        PointPointDailyMorningData.validateJsonElement(jsonObj.get("morning"));
      }
      // validate the required field `statistics`
      PointPointDailyStatsData.validateJsonElement(jsonObj.get("statistics"));
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("weather") != null && !jsonObj.get("weather").isJsonNull()) && !jsonObj.get("weather").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weather` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weather").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointPointDailyData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointPointDailyData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointPointDailyData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointPointDailyData.class));

       return (TypeAdapter<T>) new TypeAdapter<PointPointDailyData>() {
           @Override
           public void write(JsonWriter out, PointPointDailyData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointPointDailyData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointPointDailyData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointPointDailyData
   * @throws IOException if the JSON string is invalid with respect to PointPointDailyData
   */
  public static PointPointDailyData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointPointDailyData.class);
  }

  /**
   * Convert an instance of PointPointDailyData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

