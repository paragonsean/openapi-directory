/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointPointHourlyPrecipitationData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointPointHourlyPrecipitationData {
  public static final String SERIALIZED_NAME_CONVECTIVE = "convective";
  @SerializedName(SERIALIZED_NAME_CONVECTIVE)
  private BigDecimal convective;

  public static final String SERIALIZED_NAME_RAINSPOT = "rainspot";
  @SerializedName(SERIALIZED_NAME_RAINSPOT)
  private File rainspot;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private File type;

  public PointPointHourlyPrecipitationData() {
  }

  public PointPointHourlyPrecipitationData convective(BigDecimal convective) {
    this.convective = convective;
    return this;
  }

  /**
   * Total precipitation amount accumulated since last hour. Units: metric &#x3D; mm/h, us &#x3D; inches per hour, uk &#x3D; mm/h, ca &#x3D; mm/h
   * @return convective
   */
  @javax.annotation.Nullable
  public BigDecimal getConvective() {
    return convective;
  }

  public void setConvective(BigDecimal convective) {
    this.convective = convective;
  }


  public PointPointHourlyPrecipitationData rainspot(File rainspot) {
    this.rainspot = rainspot;
    return this;
  }

  /**
   * Precipitation in the surrounding of queried location. The data is 7x7 ASCII art string, queried location being in the center. Character &#x60;#&#x60; means there is precipitation, &#x60;.&#x60; means no precipitation. The distance between neighboring cells is 0.25Â°. Unit: rainspot
   * @return rainspot
   */
  @javax.annotation.Nullable
  public File getRainspot() {
    return rainspot;
  }

  public void setRainspot(File rainspot) {
    this.rainspot = rainspot;
  }


  public PointPointHourlyPrecipitationData total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Total precipitation amount accumulated since last hour. Units: metric &#x3D; mm/h, us &#x3D; inches per hour, uk &#x3D; mm/h, ca &#x3D; mm/h
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public PointPointHourlyPrecipitationData type(File type) {
    this.type = type;
    return this;
  }

  /**
   * Precipitation type, may be one of:  * &#x60;none&#x60;, it there is no precipitation * &#x60;rain&#x60; * &#x60;snow&#x60; * &#x60;rain_snow&#x60; * &#x60;ice pellets&#x60; * &#x60;frozen rain&#x60;  Unit: precipitation type
   * @return type
   */
  @javax.annotation.Nullable
  public File getType() {
    return type;
  }

  public void setType(File type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointPointHourlyPrecipitationData pointPointHourlyPrecipitationData = (PointPointHourlyPrecipitationData) o;
    return Objects.equals(this.convective, pointPointHourlyPrecipitationData.convective) &&
        Objects.equals(this.rainspot, pointPointHourlyPrecipitationData.rainspot) &&
        Objects.equals(this.total, pointPointHourlyPrecipitationData.total) &&
        Objects.equals(this.type, pointPointHourlyPrecipitationData.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convective, rainspot, total, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointPointHourlyPrecipitationData {\n");
    sb.append("    convective: ").append(toIndentedString(convective)).append("\n");
    sb.append("    rainspot: ").append(toIndentedString(rainspot)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("convective");
    openapiFields.add("rainspot");
    openapiFields.add("total");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointPointHourlyPrecipitationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointPointHourlyPrecipitationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointPointHourlyPrecipitationData is not found in the empty JSON string", PointPointHourlyPrecipitationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointPointHourlyPrecipitationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointPointHourlyPrecipitationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointPointHourlyPrecipitationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointPointHourlyPrecipitationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointPointHourlyPrecipitationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointPointHourlyPrecipitationData.class));

       return (TypeAdapter<T>) new TypeAdapter<PointPointHourlyPrecipitationData>() {
           @Override
           public void write(JsonWriter out, PointPointHourlyPrecipitationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointPointHourlyPrecipitationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointPointHourlyPrecipitationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointPointHourlyPrecipitationData
   * @throws IOException if the JSON string is invalid with respect to PointPointHourlyPrecipitationData
   */
  public static PointPointHourlyPrecipitationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointPointHourlyPrecipitationData.class);
  }

  /**
   * Convert an instance of PointPointHourlyPrecipitationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

