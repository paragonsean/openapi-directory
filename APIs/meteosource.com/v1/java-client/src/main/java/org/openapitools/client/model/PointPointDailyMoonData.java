/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointPointDailyMoonData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointPointDailyMoonData {
  public static final String SERIALIZED_NAME_ALWAYS_DOWN = "always_down";
  @SerializedName(SERIALIZED_NAME_ALWAYS_DOWN)
  private Boolean alwaysDown;

  public static final String SERIALIZED_NAME_ALWAYS_UP = "always_up";
  @SerializedName(SERIALIZED_NAME_ALWAYS_UP)
  private Boolean alwaysUp;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private File phase;

  public static final String SERIALIZED_NAME_RISE = "rise";
  @SerializedName(SERIALIZED_NAME_RISE)
  private OffsetDateTime rise;

  public static final String SERIALIZED_NAME_SET = "set";
  @SerializedName(SERIALIZED_NAME_SET)
  private OffsetDateTime set;

  public PointPointDailyMoonData() {
  }

  public PointPointDailyMoonData alwaysDown(Boolean alwaysDown) {
    this.alwaysDown = alwaysDown;
    return this;
  }

  /**
   * True if the moon never rises on given day, false otherwise.
   * @return alwaysDown
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysDown() {
    return alwaysDown;
  }

  public void setAlwaysDown(Boolean alwaysDown) {
    this.alwaysDown = alwaysDown;
  }


  public PointPointDailyMoonData alwaysUp(Boolean alwaysUp) {
    this.alwaysUp = alwaysUp;
    return this;
  }

  /**
   * True if the moon never sets on given day, false otherwise.
   * @return alwaysUp
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysUp() {
    return alwaysUp;
  }

  public void setAlwaysUp(Boolean alwaysUp) {
    this.alwaysUp = alwaysUp;
  }


  public PointPointDailyMoonData phase(File phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Name of the moon phase, one of &#39;new_moon&#39;, &#39;first_quarter&#39;, &#39;full_moon&#39;, &#39;last_quarter&#39;.
   * @return phase
   */
  @javax.annotation.Nullable
  public File getPhase() {
    return phase;
  }

  public void setPhase(File phase) {
    this.phase = phase;
  }


  public PointPointDailyMoonData rise(OffsetDateTime rise) {
    this.rise = rise;
    return this;
  }

  /**
   * Datetime of the moonrise or null if the moon does not rise on given day.
   * @return rise
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRise() {
    return rise;
  }

  public void setRise(OffsetDateTime rise) {
    this.rise = rise;
  }


  public PointPointDailyMoonData set(OffsetDateTime set) {
    this.set = set;
    return this;
  }

  /**
   * Datetime of the moonset or null if the moon does not set on given day.
   * @return set
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSet() {
    return set;
  }

  public void setSet(OffsetDateTime set) {
    this.set = set;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointPointDailyMoonData pointPointDailyMoonData = (PointPointDailyMoonData) o;
    return Objects.equals(this.alwaysDown, pointPointDailyMoonData.alwaysDown) &&
        Objects.equals(this.alwaysUp, pointPointDailyMoonData.alwaysUp) &&
        Objects.equals(this.phase, pointPointDailyMoonData.phase) &&
        Objects.equals(this.rise, pointPointDailyMoonData.rise) &&
        Objects.equals(this.set, pointPointDailyMoonData.set);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysDown, alwaysUp, phase, rise, set);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointPointDailyMoonData {\n");
    sb.append("    alwaysDown: ").append(toIndentedString(alwaysDown)).append("\n");
    sb.append("    alwaysUp: ").append(toIndentedString(alwaysUp)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    rise: ").append(toIndentedString(rise)).append("\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("always_down");
    openapiFields.add("always_up");
    openapiFields.add("phase");
    openapiFields.add("rise");
    openapiFields.add("set");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointPointDailyMoonData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointPointDailyMoonData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointPointDailyMoonData is not found in the empty JSON string", PointPointDailyMoonData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointPointDailyMoonData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointPointDailyMoonData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointPointDailyMoonData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointPointDailyMoonData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointPointDailyMoonData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointPointDailyMoonData.class));

       return (TypeAdapter<T>) new TypeAdapter<PointPointDailyMoonData>() {
           @Override
           public void write(JsonWriter out, PointPointDailyMoonData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointPointDailyMoonData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointPointDailyMoonData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointPointDailyMoonData
   * @throws IOException if the JSON string is invalid with respect to PointPointDailyMoonData
   */
  public static PointPointDailyMoonData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointPointDailyMoonData.class);
  }

  /**
   * Convert an instance of PointPointDailyMoonData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

