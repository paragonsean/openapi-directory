/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointPointDailyMorningProbData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointPointDailyMorningProbData {
  public static final String SERIALIZED_NAME_FREEZE = "freeze";
  @SerializedName(SERIALIZED_NAME_FREEZE)
  private BigDecimal freeze;

  public static final String SERIALIZED_NAME_PRECIPITATION = "precipitation";
  @SerializedName(SERIALIZED_NAME_PRECIPITATION)
  private Integer precipitation;

  public static final String SERIALIZED_NAME_STORM = "storm";
  @SerializedName(SERIALIZED_NAME_STORM)
  private BigDecimal storm;

  public PointPointDailyMorningProbData() {
  }

  public PointPointDailyMorningProbData freeze(BigDecimal freeze) {
    this.freeze = freeze;
    return this;
  }

  /**
   * Probability the temperature drops below 0 Â°C. (morning avg) Unit: %
   * @return freeze
   */
  @javax.annotation.Nullable
  public BigDecimal getFreeze() {
    return freeze;
  }

  public void setFreeze(BigDecimal freeze) {
    this.freeze = freeze;
  }


  public PointPointDailyMorningProbData precipitation(Integer precipitation) {
    this.precipitation = precipitation;
    return this;
  }

  /**
   * Probability of non-zero precipitation. Unit: \\%
   * @return precipitation
   */
  @javax.annotation.Nullable
  public Integer getPrecipitation() {
    return precipitation;
  }

  public void setPrecipitation(Integer precipitation) {
    this.precipitation = precipitation;
  }


  public PointPointDailyMorningProbData storm(BigDecimal storm) {
    this.storm = storm;
    return this;
  }

  /**
   * Total precipitation amount accumulated since last hour. Unit: mm/h
   * @return storm
   */
  @javax.annotation.Nullable
  public BigDecimal getStorm() {
    return storm;
  }

  public void setStorm(BigDecimal storm) {
    this.storm = storm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointPointDailyMorningProbData pointPointDailyMorningProbData = (PointPointDailyMorningProbData) o;
    return Objects.equals(this.freeze, pointPointDailyMorningProbData.freeze) &&
        Objects.equals(this.precipitation, pointPointDailyMorningProbData.precipitation) &&
        Objects.equals(this.storm, pointPointDailyMorningProbData.storm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freeze, precipitation, storm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointPointDailyMorningProbData {\n");
    sb.append("    freeze: ").append(toIndentedString(freeze)).append("\n");
    sb.append("    precipitation: ").append(toIndentedString(precipitation)).append("\n");
    sb.append("    storm: ").append(toIndentedString(storm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("freeze");
    openapiFields.add("precipitation");
    openapiFields.add("storm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointPointDailyMorningProbData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointPointDailyMorningProbData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointPointDailyMorningProbData is not found in the empty JSON string", PointPointDailyMorningProbData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointPointDailyMorningProbData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointPointDailyMorningProbData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointPointDailyMorningProbData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointPointDailyMorningProbData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointPointDailyMorningProbData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointPointDailyMorningProbData.class));

       return (TypeAdapter<T>) new TypeAdapter<PointPointDailyMorningProbData>() {
           @Override
           public void write(JsonWriter out, PointPointDailyMorningProbData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointPointDailyMorningProbData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointPointDailyMorningProbData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointPointDailyMorningProbData
   * @throws IOException if the JSON string is invalid with respect to PointPointDailyMorningProbData
   */
  public static PointPointDailyMorningProbData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointPointDailyMorningProbData.class);
  }

  /**
   * Convert an instance of PointPointDailyMorningProbData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

