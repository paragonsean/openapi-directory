/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FindPlacesModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindPlacesModel {
  public static final String SERIALIZED_NAME_ADM_AREA1 = "adm_area1";
  @SerializedName(SERIALIZED_NAME_ADM_AREA1)
  private String admArea1 = "England";

  public static final String SERIALIZED_NAME_ADM_AREA2 = "adm_area2";
  @SerializedName(SERIALIZED_NAME_ADM_AREA2)
  private String admArea2 = "Greater London";

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country = "United Kingdom";

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private String lat = "23.2N";

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private String lon = "15.3E";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "London";

  public static final String SERIALIZED_NAME_PLACE_ID = "place_id";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId = "london";

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone = "Europe/London";

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type = "settlement";

  public FindPlacesModel() {
  }

  public FindPlacesModel admArea1(String admArea1) {
    this.admArea1 = admArea1;
    return this;
  }

  /**
   * first-level administrative area (a US state, for example)
   * @return admArea1
   */
  @javax.annotation.Nullable
  public String getAdmArea1() {
    return admArea1;
  }

  public void setAdmArea1(String admArea1) {
    this.admArea1 = admArea1;
  }


  public FindPlacesModel admArea2(String admArea2) {
    this.admArea2 = admArea2;
    return this;
  }

  /**
   * second-level administrative area (a US county, for example)
   * @return admArea2
   */
  @javax.annotation.Nullable
  public String getAdmArea2() {
    return admArea2;
  }

  public void setAdmArea2(String admArea2) {
    this.admArea2 = admArea2;
  }


  public FindPlacesModel country(String country) {
    this.country = country;
    return this;
  }

  /**
   * name of the country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public FindPlacesModel lat(String lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitude of the point, always in the format \\&lt;float&gt;&lt;N/S&gt;, for example &#x60;&#x60;23.5S&#x60;&#x60;
   * @return lat
   */
  @javax.annotation.Nullable
  public String getLat() {
    return lat;
  }

  public void setLat(String lat) {
    this.lat = lat;
  }


  public FindPlacesModel lon(String lon) {
    this.lon = lon;
    return this;
  }

  /**
   * Longitude of the point, always in format \\&lt;float&gt;&lt;E/W&gt;, for example &#x60;&#x60;23.5W&#x60;&#x60;
   * @return lon
   */
  @javax.annotation.Nullable
  public String getLon() {
    return lon;
  }

  public void setLon(String lon) {
    this.lon = lon;
  }


  public FindPlacesModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the place
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FindPlacesModel placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * unique identifier of the place, which can be used in /point and /map endpoints
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public FindPlacesModel timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone of the point in tzinfo format.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public FindPlacesModel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The character of the place. May be one of the following values:  * administrative areas (states, counties, districts...): &#x60;&#x60;administrative_area&#x60;&#x60; * country: &#x60;&#x60;country&#x60;&#x60; * a different political entity from a country (for example, a dependent teritory): &#x60;&#x60;political_entity&#x60;&#x60; * villages, towns and cities: &#x60;&#x60;settlement&#x60;&#x60; * air industry locations: &#x60;&#x60;airbase&#x60;&#x60;, &#x60;&#x60;airfield&#x60;&#x60;, &#x60;&#x60;heliport&#x60;&#x60;, &#x60;&#x60;airport&#x60;&#x60;, &#x60;&#x60;airport_terminal&#x60;&#x60; * places related to water: &#x60;&#x60;bay&#x60;&#x60;, &#x60;&#x60;channel&#x60;&#x60;, &#x60;&#x60;fjord&#x60;&#x60;, &#x60;&#x60;lake&#x60;&#x60;, &#x60;&#x60;pond&#x60;&#x60;, &#x60;&#x60;falls&#x60;&#x60;, &#x60;&#x60;gulf&#x60;&#x60;,     &#x60;&#x60;harbor&#x60;&#x60;, &#x60;&#x60;reservoir&#x60;&#x60;, &#x60;&#x60;sea&#x60;&#x60;, &#x60;&#x60;dam&#x60;&#x60;, &#x60;&#x60;cape&#x60;&#x60;, &#x60;&#x60;island&#x60;&#x60;, &#x60;&#x60;peninsula&#x60;&#x60; * places related to mountain areas: &#x60;&#x60;hill&#x60;&#x60;, &#x60;&#x60;mountain&#x60;&#x60;, &#x60;&#x60;peak&#x60;&#x60;, &#x60;&#x60;valley&#x60;&#x60;, &#x60;&#x60;volcano&#x60;&#x60;, &#x60;&#x60;canyon&#x60;&#x60; * other places related to nature: &#x60;&#x60;park&#x60;&#x60;, &#x60;&#x60;reserve&#x60;&#x60;, &#x60;&#x60;resort&#x60;&#x60;, &#x60;&#x60;desert&#x60;&#x60; * places based on postcodes: &#x60;&#x60;postcode&#x60;&#x60;         
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindPlacesModel findPlacesModel = (FindPlacesModel) o;
    return Objects.equals(this.admArea1, findPlacesModel.admArea1) &&
        Objects.equals(this.admArea2, findPlacesModel.admArea2) &&
        Objects.equals(this.country, findPlacesModel.country) &&
        Objects.equals(this.lat, findPlacesModel.lat) &&
        Objects.equals(this.lon, findPlacesModel.lon) &&
        Objects.equals(this.name, findPlacesModel.name) &&
        Objects.equals(this.placeId, findPlacesModel.placeId) &&
        Objects.equals(this.timezone, findPlacesModel.timezone) &&
        Objects.equals(this.type, findPlacesModel.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admArea1, admArea2, country, lat, lon, name, placeId, timezone, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindPlacesModel {\n");
    sb.append("    admArea1: ").append(toIndentedString(admArea1)).append("\n");
    sb.append("    admArea2: ").append(toIndentedString(admArea2)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adm_area1");
    openapiFields.add("adm_area2");
    openapiFields.add("country");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("name");
    openapiFields.add("place_id");
    openapiFields.add("timezone");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindPlacesModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindPlacesModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindPlacesModel is not found in the empty JSON string", FindPlacesModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindPlacesModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindPlacesModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adm_area1") != null && !jsonObj.get("adm_area1").isJsonNull()) && !jsonObj.get("adm_area1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm_area1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm_area1").toString()));
      }
      if ((jsonObj.get("adm_area2") != null && !jsonObj.get("adm_area2").isJsonNull()) && !jsonObj.get("adm_area2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adm_area2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adm_area2").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("lat") != null && !jsonObj.get("lat").isJsonNull()) && !jsonObj.get("lat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lat").toString()));
      }
      if ((jsonObj.get("lon") != null && !jsonObj.get("lon").isJsonNull()) && !jsonObj.get("lon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lon").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("place_id") != null && !jsonObj.get("place_id").isJsonNull()) && !jsonObj.get("place_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `place_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("place_id").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindPlacesModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindPlacesModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindPlacesModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindPlacesModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FindPlacesModel>() {
           @Override
           public void write(JsonWriter out, FindPlacesModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindPlacesModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindPlacesModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindPlacesModel
   * @throws IOException if the JSON string is invalid with respect to FindPlacesModel
   */
  public static FindPlacesModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindPlacesModel.class);
  }

  /**
   * Convert an instance of FindPlacesModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

