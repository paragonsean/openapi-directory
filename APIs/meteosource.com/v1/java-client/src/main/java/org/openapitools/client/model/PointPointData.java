/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PointPointAlerts;
import org.openapitools.client.model.PointPointCurrentData;
import org.openapitools.client.model.PointPointDaily;
import org.openapitools.client.model.PointPointHourly;
import org.openapitools.client.model.PointPointMinutely;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointPointData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:13.236583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointPointData {
  public static final String SERIALIZED_NAME_ALERTS = "alerts";
  @SerializedName(SERIALIZED_NAME_ALERTS)
  private PointPointAlerts alerts;

  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private PointPointCurrentData current;

  public static final String SERIALIZED_NAME_DAILY = "daily";
  @SerializedName(SERIALIZED_NAME_DAILY)
  private PointPointDaily daily;

  public static final String SERIALIZED_NAME_ELEVATION = "elevation";
  @SerializedName(SERIALIZED_NAME_ELEVATION)
  private Integer elevation;

  public static final String SERIALIZED_NAME_HOURLY = "hourly";
  @SerializedName(SERIALIZED_NAME_HOURLY)
  private PointPointHourly hourly;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private String lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private String lon;

  public static final String SERIALIZED_NAME_MINUTELY = "minutely";
  @SerializedName(SERIALIZED_NAME_MINUTELY)
  private PointPointMinutely minutely;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public PointPointData() {
  }

  public PointPointData alerts(PointPointAlerts alerts) {
    this.alerts = alerts;
    return this;
  }

  /**
   * Get alerts
   * @return alerts
   */
  @javax.annotation.Nonnull
  public PointPointAlerts getAlerts() {
    return alerts;
  }

  public void setAlerts(PointPointAlerts alerts) {
    this.alerts = alerts;
  }


  public PointPointData current(PointPointCurrentData current) {
    this.current = current;
    return this;
  }

  /**
   * Get current
   * @return current
   */
  @javax.annotation.Nullable
  public PointPointCurrentData getCurrent() {
    return current;
  }

  public void setCurrent(PointPointCurrentData current) {
    this.current = current;
  }


  public PointPointData daily(PointPointDaily daily) {
    this.daily = daily;
    return this;
  }

  /**
   * Get daily
   * @return daily
   */
  @javax.annotation.Nullable
  public PointPointDaily getDaily() {
    return daily;
  }

  public void setDaily(PointPointDaily daily) {
    this.daily = daily;
  }


  public PointPointData elevation(Integer elevation) {
    this.elevation = elevation;
    return this;
  }

  /**
   * Elevation above sea level in metres (for units &#39;metric&#39;, &#39;uk&#39;, &#39;ca&#39;) or feet (for units &#39;us&#39;)
   * @return elevation
   */
  @javax.annotation.Nonnull
  public Integer getElevation() {
    return elevation;
  }

  public void setElevation(Integer elevation) {
    this.elevation = elevation;
  }


  public PointPointData hourly(PointPointHourly hourly) {
    this.hourly = hourly;
    return this;
  }

  /**
   * Get hourly
   * @return hourly
   */
  @javax.annotation.Nullable
  public PointPointHourly getHourly() {
    return hourly;
  }

  public void setHourly(PointPointHourly hourly) {
    this.hourly = hourly;
  }


  public PointPointData lat(String lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitude of the point, always in the format &lt;float&gt;&lt;N/S&gt;, for example &#x60;&#x60;23.5S&#x60;&#x60;
   * @return lat
   */
  @javax.annotation.Nonnull
  public String getLat() {
    return lat;
  }

  public void setLat(String lat) {
    this.lat = lat;
  }


  public PointPointData lon(String lon) {
    this.lon = lon;
    return this;
  }

  /**
   * Longitude of the point, always in the format &lt;float&gt;&lt;E/W&gt;, for example &#x60;&#x60;23.5W&#x60;&#x60;
   * @return lon
   */
  @javax.annotation.Nonnull
  public String getLon() {
    return lon;
  }

  public void setLon(String lon) {
    this.lon = lon;
  }


  public PointPointData minutely(PointPointMinutely minutely) {
    this.minutely = minutely;
    return this;
  }

  /**
   * Get minutely
   * @return minutely
   */
  @javax.annotation.Nullable
  public PointPointMinutely getMinutely() {
    return minutely;
  }

  public void setMinutely(PointPointMinutely minutely) {
    this.minutely = minutely;
  }


  public PointPointData timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Name of the timezone in format like &#39;Europe/London&#39;. Available only when the place is specified through place ID.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public PointPointData units(String units) {
    this.units = units;
    return this;
  }

  /**
   * Unit system (metric, uk, ca or us)
   * @return units
   */
  @javax.annotation.Nonnull
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointPointData pointPointData = (PointPointData) o;
    return Objects.equals(this.alerts, pointPointData.alerts) &&
        Objects.equals(this.current, pointPointData.current) &&
        Objects.equals(this.daily, pointPointData.daily) &&
        Objects.equals(this.elevation, pointPointData.elevation) &&
        Objects.equals(this.hourly, pointPointData.hourly) &&
        Objects.equals(this.lat, pointPointData.lat) &&
        Objects.equals(this.lon, pointPointData.lon) &&
        Objects.equals(this.minutely, pointPointData.minutely) &&
        Objects.equals(this.timezone, pointPointData.timezone) &&
        Objects.equals(this.units, pointPointData.units);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alerts, current, daily, elevation, hourly, lat, lon, minutely, timezone, units);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointPointData {\n");
    sb.append("    alerts: ").append(toIndentedString(alerts)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    daily: ").append(toIndentedString(daily)).append("\n");
    sb.append("    elevation: ").append(toIndentedString(elevation)).append("\n");
    sb.append("    hourly: ").append(toIndentedString(hourly)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    minutely: ").append(toIndentedString(minutely)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alerts");
    openapiFields.add("current");
    openapiFields.add("daily");
    openapiFields.add("elevation");
    openapiFields.add("hourly");
    openapiFields.add("lat");
    openapiFields.add("lon");
    openapiFields.add("minutely");
    openapiFields.add("timezone");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alerts");
    openapiRequiredFields.add("elevation");
    openapiRequiredFields.add("lat");
    openapiRequiredFields.add("lon");
    openapiRequiredFields.add("units");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointPointData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointPointData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointPointData is not found in the empty JSON string", PointPointData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointPointData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointPointData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PointPointData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `alerts`
      PointPointAlerts.validateJsonElement(jsonObj.get("alerts"));
      // validate the optional field `current`
      if (jsonObj.get("current") != null && !jsonObj.get("current").isJsonNull()) {
        PointPointCurrentData.validateJsonElement(jsonObj.get("current"));
      }
      // validate the optional field `daily`
      if (jsonObj.get("daily") != null && !jsonObj.get("daily").isJsonNull()) {
        PointPointDaily.validateJsonElement(jsonObj.get("daily"));
      }
      // validate the optional field `hourly`
      if (jsonObj.get("hourly") != null && !jsonObj.get("hourly").isJsonNull()) {
        PointPointHourly.validateJsonElement(jsonObj.get("hourly"));
      }
      if (!jsonObj.get("lat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lat").toString()));
      }
      if (!jsonObj.get("lon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lon").toString()));
      }
      // validate the optional field `minutely`
      if (jsonObj.get("minutely") != null && !jsonObj.get("minutely").isJsonNull()) {
        PointPointMinutely.validateJsonElement(jsonObj.get("minutely"));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (!jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointPointData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointPointData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointPointData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointPointData.class));

       return (TypeAdapter<T>) new TypeAdapter<PointPointData>() {
           @Override
           public void write(JsonWriter out, PointPointData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointPointData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointPointData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointPointData
   * @throws IOException if the JSON string is invalid with respect to PointPointData
   */
  public static PointPointData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointPointData.class);
  }

  /**
   * Convert an instance of PointPointData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

