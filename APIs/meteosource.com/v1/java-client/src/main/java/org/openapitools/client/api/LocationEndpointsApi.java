/*
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FindPlacesModel;
import org.openapitools.client.model.GeneralRequestError;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Language;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationEndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationEndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for findPlacesFindPlacesGet
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlacesFindPlacesGetCall(String text, Language language, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/find_places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlacesFindPlacesGetValidateBeforeCall(String text, Language language, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling findPlacesFindPlacesGet(Async)");
        }

        return findPlacesFindPlacesGetCall(text, language, key, _callback);

    }

    /**
     * Search for places. Complete words required.
     * ## Search for places  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_place_prefix&#x60; endpoint, complete words are required here. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return List&lt;FindPlacesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public List<FindPlacesModel> findPlacesFindPlacesGet(String text, Language language, String key) throws ApiException {
        ApiResponse<List<FindPlacesModel>> localVarResp = findPlacesFindPlacesGetWithHttpInfo(text, language, key);
        return localVarResp.getData();
    }

    /**
     * Search for places. Complete words required.
     * ## Search for places  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_place_prefix&#x60; endpoint, complete words are required here. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return ApiResponse&lt;List&lt;FindPlacesModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FindPlacesModel>> findPlacesFindPlacesGetWithHttpInfo(String text, Language language, String key) throws ApiException {
        okhttp3.Call localVarCall = findPlacesFindPlacesGetValidateBeforeCall(text, language, key, null);
        Type localVarReturnType = new TypeToken<List<FindPlacesModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for places. Complete words required. (asynchronously)
     * ## Search for places  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_place_prefix&#x60; endpoint, complete words are required here. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlacesFindPlacesGetAsync(String text, Language language, String key, final ApiCallback<List<FindPlacesModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlacesFindPlacesGetValidateBeforeCall(text, language, key, _callback);
        Type localVarReturnType = new TypeToken<List<FindPlacesModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlacesPrefixFindPlacesPrefixGet
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlacesPrefixFindPlacesPrefixGetCall(String text, Language language, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/find_places_prefix";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlacesPrefixFindPlacesPrefixGetValidateBeforeCall(String text, Language language, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling findPlacesPrefixFindPlacesPrefixGet(Async)");
        }

        return findPlacesPrefixFindPlacesPrefixGetCall(text, language, key, _callback);

    }

    /**
     * Prefix search for places. Useful for autocomplete forms.
     * ## Search for places by prefix  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_places&#x60; endpoint, you should only specify the prefix of the place you are looking for. This is particularly useful for autocomplete forms. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return List&lt;FindPlacesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public List<FindPlacesModel> findPlacesPrefixFindPlacesPrefixGet(String text, Language language, String key) throws ApiException {
        ApiResponse<List<FindPlacesModel>> localVarResp = findPlacesPrefixFindPlacesPrefixGetWithHttpInfo(text, language, key);
        return localVarResp.getData();
    }

    /**
     * Prefix search for places. Useful for autocomplete forms.
     * ## Search for places by prefix  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_places&#x60; endpoint, you should only specify the prefix of the place you are looking for. This is particularly useful for autocomplete forms. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return ApiResponse&lt;List&lt;FindPlacesModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FindPlacesModel>> findPlacesPrefixFindPlacesPrefixGetWithHttpInfo(String text, Language language, String key) throws ApiException {
        okhttp3.Call localVarCall = findPlacesPrefixFindPlacesPrefixGetValidateBeforeCall(text, language, key, null);
        Type localVarReturnType = new TypeToken<List<FindPlacesModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prefix search for places. Useful for autocomplete forms. (asynchronously)
     * ## Search for places by prefix  You can use this endpoint to obtain &#x60;place_id&#x60; of the location you want, to be used in &#x60;point&#x60; endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the &#x60;/find_places&#x60; endpoint, you should only specify the prefix of the place you are looking for. This is particularly useful for autocomplete forms. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param text Place name or ZIP code (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlacesPrefixFindPlacesPrefixGetAsync(String text, Language language, String key, final ApiCallback<List<FindPlacesModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlacesPrefixFindPlacesPrefixGetValidateBeforeCall(text, language, key, _callback);
        Type localVarReturnType = new TypeToken<List<FindPlacesModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nearestPlaceNearestPlaceGet
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (required)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nearestPlaceNearestPlaceGetCall(String lat, String lon, Language language, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nearest_place";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nearestPlaceNearestPlaceGetValidateBeforeCall(String lat, String lon, Language language, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling nearestPlaceNearestPlaceGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling nearestPlaceNearestPlaceGet(Async)");
        }

        return nearestPlaceNearestPlaceGetCall(lat, lon, language, key, _callback);

    }

    /**
     * Returns the nearest named location for a given GPS coordinates.
     * ## Search for nearest place by coordinates  You can use this endpoint to find the nearest place from given coordinates.  *Note: If you specify coordinates of a secluded place (e.g. middle of the ocean), the nearest point can be very far from the coordinates.*
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (required)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return FindPlacesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public FindPlacesModel nearestPlaceNearestPlaceGet(String lat, String lon, Language language, String key) throws ApiException {
        ApiResponse<FindPlacesModel> localVarResp = nearestPlaceNearestPlaceGetWithHttpInfo(lat, lon, language, key);
        return localVarResp.getData();
    }

    /**
     * Returns the nearest named location for a given GPS coordinates.
     * ## Search for nearest place by coordinates  You can use this endpoint to find the nearest place from given coordinates.  *Note: If you specify coordinates of a secluded place (e.g. middle of the ocean), the nearest point can be very far from the coordinates.*
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (required)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @return ApiResponse&lt;FindPlacesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FindPlacesModel> nearestPlaceNearestPlaceGetWithHttpInfo(String lat, String lon, Language language, String key) throws ApiException {
        okhttp3.Call localVarCall = nearestPlaceNearestPlaceGetValidateBeforeCall(lat, lon, language, key, null);
        Type localVarReturnType = new TypeToken<FindPlacesModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the nearest named location for a given GPS coordinates. (asynchronously)
     * ## Search for nearest place by coordinates  You can use this endpoint to find the nearest place from given coordinates.  *Note: If you specify coordinates of a secluded place (e.g. middle of the ocean), the nearest point can be very far from the coordinates.*
     * @param lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4 (required)
     * @param lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4 (required)
     * @param language The language of text summaries and place names (variable names are never translated). Available languages are:     * &#x60;&#x60;en&#x60;&#x60;: English    * &#x60;&#x60;es&#x60;&#x60;: Spanish    * &#x60;&#x60;fr&#x60;&#x60;: French    * &#x60;&#x60;de&#x60;&#x60;: German    * &#x60;&#x60;pl&#x60;&#x60;: Polish    * &#x60;&#x60;pt&#x60;&#x60;: Portuguese    * &#x60;&#x60;cs&#x60;&#x60;: Czech  (optional, default to en)
     * @param key Your unique API key. You can either specify it in this parameter, or set it in &#x60;X-API-Key&#x60; header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error in passed parameter. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Maximum requests per day limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> API key not not specified or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Maximum requests per minute limit exceeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nearestPlaceNearestPlaceGetAsync(String lat, String lon, Language language, String key, final ApiCallback<FindPlacesModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = nearestPlaceNearestPlaceGetValidateBeforeCall(lat, lon, language, key, _callback);
        Type localVarReturnType = new TypeToken<FindPlacesModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
