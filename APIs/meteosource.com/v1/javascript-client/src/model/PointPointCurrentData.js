/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PointPointCurrentPrecipitationData from './PointPointCurrentPrecipitationData';
import PointPointCurrentWindData from './PointPointCurrentWindData';

/**
 * The PointPointCurrentData model module.
 * @module model/PointPointCurrentData
 * @version v1
 */
class PointPointCurrentData {
    /**
     * Constructs a new <code>PointPointCurrentData</code>.
     * @alias module:model/PointPointCurrentData
     * @param precipitation {module:model/PointPointCurrentPrecipitationData} 
     * @param wind {module:model/PointPointCurrentWindData} 
     */
    constructor(precipitation, wind) { 
        
        PointPointCurrentData.initialize(this, precipitation, wind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, precipitation, wind) { 
        obj['precipitation'] = precipitation;
        obj['wind'] = wind;
    }

    /**
     * Constructs a <code>PointPointCurrentData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointPointCurrentData} obj Optional instance to populate.
     * @return {module:model/PointPointCurrentData} The populated <code>PointPointCurrentData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointPointCurrentData();

            if (data.hasOwnProperty('cloud_cover')) {
                obj['cloud_cover'] = ApiClient.convertToType(data['cloud_cover'], 'Number');
            }
            if (data.hasOwnProperty('dew_point')) {
                obj['dew_point'] = ApiClient.convertToType(data['dew_point'], 'Number');
            }
            if (data.hasOwnProperty('feels_like')) {
                obj['feels_like'] = ApiClient.convertToType(data['feels_like'], 'Number');
            }
            if (data.hasOwnProperty('humidity')) {
                obj['humidity'] = ApiClient.convertToType(data['humidity'], 'Number');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('icon_num')) {
                obj['icon_num'] = ApiClient.convertToType(data['icon_num'], 'Number');
            }
            if (data.hasOwnProperty('irradiance')) {
                obj['irradiance'] = ApiClient.convertToType(data['irradiance'], 'Number');
            }
            if (data.hasOwnProperty('ozone')) {
                obj['ozone'] = ApiClient.convertToType(data['ozone'], 'Number');
            }
            if (data.hasOwnProperty('precipitation')) {
                obj['precipitation'] = PointPointCurrentPrecipitationData.constructFromObject(data['precipitation']);
            }
            if (data.hasOwnProperty('pressure')) {
                obj['pressure'] = ApiClient.convertToType(data['pressure'], 'Number');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('uv_index')) {
                obj['uv_index'] = ApiClient.convertToType(data['uv_index'], 'Number');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'Number');
            }
            if (data.hasOwnProperty('wind')) {
                obj['wind'] = PointPointCurrentWindData.constructFromObject(data['wind']);
            }
            if (data.hasOwnProperty('wind_chill')) {
                obj['wind_chill'] = ApiClient.convertToType(data['wind_chill'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PointPointCurrentData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PointPointCurrentData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PointPointCurrentData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        // validate the optional field `precipitation`
        if (data['precipitation']) { // data not null
          PointPointCurrentPrecipitationData.validateJSON(data['precipitation']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // validate the optional field `wind`
        if (data['wind']) { // data not null
          PointPointCurrentWindData.validateJSON(data['wind']);
        }

        return true;
    }


}

PointPointCurrentData.RequiredProperties = ["precipitation", "wind"];

/**
 * Percentage of sky covered by clouds. Unit: \\%
 * @member {Number} cloud_cover
 */
PointPointCurrentData.prototype['cloud_cover'] = undefined;

/**
 * Current dew point temperature. Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} dew_point
 */
PointPointCurrentData.prototype['dew_point'] = undefined;

/**
 * Feels like temperature. Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} feels_like
 */
PointPointCurrentData.prototype['feels_like'] = undefined;

/**
 * Relative humidity. Unit: \\%
 * @member {Number} humidity
 */
PointPointCurrentData.prototype['humidity'] = undefined;

/**
 * String identifier of current weather icon, e.g. `light_rain`.
 * @member {String} icon
 */
PointPointCurrentData.prototype['icon'] = undefined;

/**
 * Numeric identifier of current weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: weather_ico0_36
 * @member {Number} icon_num
 */
PointPointCurrentData.prototype['icon_num'] = undefined;

/**
 * Global downward short-wave radiation flux. Unit: W/m2
 * @member {Number} irradiance
 */
PointPointCurrentData.prototype['irradiance'] = undefined;

/**
 * Total column of ozone. Unit: Dobson
 * @member {Number} ozone
 */
PointPointCurrentData.prototype['ozone'] = undefined;

/**
 * @member {module:model/PointPointCurrentPrecipitationData} precipitation
 */
PointPointCurrentData.prototype['precipitation'] = undefined;

/**
 * Atmospheric pressure at mean sea level. Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
 * @member {Number} pressure
 */
PointPointCurrentData.prototype['pressure'] = undefined;

/**
 * Short text summary of current weather, e.g. `Light rain`.
 * @member {String} summary
 */
PointPointCurrentData.prototype['summary'] = undefined;

/**
 * Current temperature 2 metres above ground. Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} temperature
 */
PointPointCurrentData.prototype['temperature'] = undefined;

/**
 * UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm). Unit: uv_index
 * @member {Number} uv_index
 */
PointPointCurrentData.prototype['uv_index'] = undefined;

/**
 * Visibility. Units: metric = km, us = mi, uk = mi, ca = km
 * @member {Number} visibility
 */
PointPointCurrentData.prototype['visibility'] = undefined;

/**
 * @member {module:model/PointPointCurrentWindData} wind
 */
PointPointCurrentData.prototype['wind'] = undefined;

/**
 * Windchill temperature. Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} wind_chill
 */
PointPointCurrentData.prototype['wind_chill'] = undefined;






export default PointPointCurrentData;

