/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PointPointDailyMorningCloudCoverData from './PointPointDailyMorningCloudCoverData';
import PointPointDailyMorningPrecipitationData from './PointPointDailyMorningPrecipitationData';
import PointPointDailyMorningProbData from './PointPointDailyMorningProbData';
import PointPointDailyMorningWindData from './PointPointDailyMorningWindData';

/**
 * The PointPointDailyMorningData model module.
 * @module model/PointPointDailyMorningData
 * @version v1
 */
class PointPointDailyMorningData {
    /**
     * Constructs a new <code>PointPointDailyMorningData</code>.
     * @alias module:model/PointPointDailyMorningData
     * @param cloudCover {module:model/PointPointDailyMorningCloudCoverData} 
     * @param precipitation {module:model/PointPointDailyMorningPrecipitationData} 
     * @param probability {module:model/PointPointDailyMorningProbData} 
     * @param wind {module:model/PointPointDailyMorningWindData} 
     */
    constructor(cloudCover, precipitation, probability, wind) { 
        
        PointPointDailyMorningData.initialize(this, cloudCover, precipitation, probability, wind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cloudCover, precipitation, probability, wind) { 
        obj['cloud_cover'] = cloudCover;
        obj['precipitation'] = precipitation;
        obj['probability'] = probability;
        obj['wind'] = wind;
    }

    /**
     * Constructs a <code>PointPointDailyMorningData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointPointDailyMorningData} obj Optional instance to populate.
     * @return {module:model/PointPointDailyMorningData} The populated <code>PointPointDailyMorningData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointPointDailyMorningData();

            if (data.hasOwnProperty('cloud_cover')) {
                obj['cloud_cover'] = PointPointDailyMorningCloudCoverData.constructFromObject(data['cloud_cover']);
            }
            if (data.hasOwnProperty('dew_point')) {
                obj['dew_point'] = ApiClient.convertToType(data['dew_point'], 'Number');
            }
            if (data.hasOwnProperty('feels_like')) {
                obj['feels_like'] = ApiClient.convertToType(data['feels_like'], 'Number');
            }
            if (data.hasOwnProperty('humidity')) {
                obj['humidity'] = ApiClient.convertToType(data['humidity'], 'Number');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'Number');
            }
            if (data.hasOwnProperty('ozone')) {
                obj['ozone'] = ApiClient.convertToType(data['ozone'], 'Number');
            }
            if (data.hasOwnProperty('precipitation')) {
                obj['precipitation'] = PointPointDailyMorningPrecipitationData.constructFromObject(data['precipitation']);
            }
            if (data.hasOwnProperty('pressure')) {
                obj['pressure'] = ApiClient.convertToType(data['pressure'], 'Number');
            }
            if (data.hasOwnProperty('probability')) {
                obj['probability'] = PointPointDailyMorningProbData.constructFromObject(data['probability']);
            }
            if (data.hasOwnProperty('snow_depth')) {
                obj['snow_depth'] = ApiClient.convertToType(data['snow_depth'], 'Number');
            }
            if (data.hasOwnProperty('soil_temperature')) {
                obj['soil_temperature'] = ApiClient.convertToType(data['soil_temperature'], 'Number');
            }
            if (data.hasOwnProperty('surface_temperature')) {
                obj['surface_temperature'] = ApiClient.convertToType(data['surface_temperature'], 'Number');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'Number');
            }
            if (data.hasOwnProperty('weather')) {
                obj['weather'] = ApiClient.convertToType(data['weather'], 'String');
            }
            if (data.hasOwnProperty('wind')) {
                obj['wind'] = PointPointDailyMorningWindData.constructFromObject(data['wind']);
            }
            if (data.hasOwnProperty('wind_chill')) {
                obj['wind_chill'] = ApiClient.convertToType(data['wind_chill'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PointPointDailyMorningData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PointPointDailyMorningData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PointPointDailyMorningData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cloud_cover`
        if (data['cloud_cover']) { // data not null
          PointPointDailyMorningCloudCoverData.validateJSON(data['cloud_cover']);
        }
        // validate the optional field `precipitation`
        if (data['precipitation']) { // data not null
          PointPointDailyMorningPrecipitationData.validateJSON(data['precipitation']);
        }
        // validate the optional field `probability`
        if (data['probability']) { // data not null
          PointPointDailyMorningProbData.validateJSON(data['probability']);
        }
        // ensure the json data is a string
        if (data['weather'] && !(typeof data['weather'] === 'string' || data['weather'] instanceof String)) {
            throw new Error("Expected the field `weather` to be a primitive type in the JSON string but got " + data['weather']);
        }
        // validate the optional field `wind`
        if (data['wind']) { // data not null
          PointPointDailyMorningWindData.validateJSON(data['wind']);
        }

        return true;
    }


}

PointPointDailyMorningData.RequiredProperties = ["cloud_cover", "precipitation", "probability", "wind"];

/**
 * @member {module:model/PointPointDailyMorningCloudCoverData} cloud_cover
 */
PointPointDailyMorningData.prototype['cloud_cover'] = undefined;

/**
 * Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} dew_point
 */
PointPointDailyMorningData.prototype['dew_point'] = undefined;

/**
 * Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} feels_like
 */
PointPointDailyMorningData.prototype['feels_like'] = undefined;

/**
 * Relative humidity. (morning avg) Unit: \\%
 * @member {Number} humidity
 */
PointPointDailyMorningData.prototype['humidity'] = undefined;

/**
 * Morning numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: icon
 * @member {Number} icon
 */
PointPointDailyMorningData.prototype['icon'] = undefined;

/**
 * Total column of ozone. (morning avg) Unit: Dobson
 * @member {Number} ozone
 */
PointPointDailyMorningData.prototype['ozone'] = undefined;

/**
 * @member {module:model/PointPointDailyMorningPrecipitationData} precipitation
 */
PointPointDailyMorningData.prototype['precipitation'] = undefined;

/**
 * Atmospheric pressure at mean sea level. (morning avg) Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
 * @member {Number} pressure
 */
PointPointDailyMorningData.prototype['pressure'] = undefined;

/**
 * @member {module:model/PointPointDailyMorningProbData} probability
 */
PointPointDailyMorningData.prototype['probability'] = undefined;

/**
 * Snow depth. (morning avg) Units: metric = cm, us = inch, uk = cm, ca = cm
 * @member {Number} snow_depth
 */
PointPointDailyMorningData.prototype['snow_depth'] = undefined;

/**
 * Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} soil_temperature
 */
PointPointDailyMorningData.prototype['soil_temperature'] = undefined;

/**
 * Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} surface_temperature
 */
PointPointDailyMorningData.prototype['surface_temperature'] = undefined;

/**
 * Temperature 2 metres above ground. (morning avg) Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} temperature
 */
PointPointDailyMorningData.prototype['temperature'] = undefined;

/**
 * Visibility. (morning avg) Units: metric = km, us = mi, uk = mi, ca = km
 * @member {Number} visibility
 */
PointPointDailyMorningData.prototype['visibility'] = undefined;

/**
 * Morning day string identifier of the weather icon, e.g. `light_rain`.
 * @member {String} weather
 */
PointPointDailyMorningData.prototype['weather'] = undefined;

/**
 * @member {module:model/PointPointDailyMorningWindData} wind
 */
PointPointDailyMorningData.prototype['wind'] = undefined;

/**
 * Temperature 2 metres above ground. (morning avg) Units: metric = °C, us = °F, uk = °C, ca = °C
 * @member {Number} wind_chill
 */
PointPointDailyMorningData.prototype['wind_chill'] = undefined;






export default PointPointDailyMorningData;

