/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FindPlacesModel model module.
 * @module model/FindPlacesModel
 * @version v1
 */
class FindPlacesModel {
    /**
     * Constructs a new <code>FindPlacesModel</code>.
     * @alias module:model/FindPlacesModel
     */
    constructor() { 
        
        FindPlacesModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['adm_area1'] = 'England';
        obj['adm_area2'] = 'Greater London';
        obj['country'] = 'United Kingdom';
        obj['lat'] = '23.2N';
        obj['lon'] = '15.3E';
        obj['name'] = 'London';
        obj['place_id'] = 'london';
        obj['timezone'] = 'Europe/London';
        obj['type'] = 'settlement';
    }

    /**
     * Constructs a <code>FindPlacesModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindPlacesModel} obj Optional instance to populate.
     * @return {module:model/FindPlacesModel} The populated <code>FindPlacesModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindPlacesModel();

            if (data.hasOwnProperty('adm_area1')) {
                obj['adm_area1'] = ApiClient.convertToType(data['adm_area1'], 'String');
            }
            if (data.hasOwnProperty('adm_area2')) {
                obj['adm_area2'] = ApiClient.convertToType(data['adm_area2'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'String');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('place_id')) {
                obj['place_id'] = ApiClient.convertToType(data['place_id'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindPlacesModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindPlacesModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adm_area1'] && !(typeof data['adm_area1'] === 'string' || data['adm_area1'] instanceof String)) {
            throw new Error("Expected the field `adm_area1` to be a primitive type in the JSON string but got " + data['adm_area1']);
        }
        // ensure the json data is a string
        if (data['adm_area2'] && !(typeof data['adm_area2'] === 'string' || data['adm_area2'] instanceof String)) {
            throw new Error("Expected the field `adm_area2` to be a primitive type in the JSON string but got " + data['adm_area2']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['lat'] && !(typeof data['lat'] === 'string' || data['lat'] instanceof String)) {
            throw new Error("Expected the field `lat` to be a primitive type in the JSON string but got " + data['lat']);
        }
        // ensure the json data is a string
        if (data['lon'] && !(typeof data['lon'] === 'string' || data['lon'] instanceof String)) {
            throw new Error("Expected the field `lon` to be a primitive type in the JSON string but got " + data['lon']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['place_id'] && !(typeof data['place_id'] === 'string' || data['place_id'] instanceof String)) {
            throw new Error("Expected the field `place_id` to be a primitive type in the JSON string but got " + data['place_id']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * first-level administrative area (a US state, for example)
 * @member {String} adm_area1
 * @default 'England'
 */
FindPlacesModel.prototype['adm_area1'] = 'England';

/**
 * second-level administrative area (a US county, for example)
 * @member {String} adm_area2
 * @default 'Greater London'
 */
FindPlacesModel.prototype['adm_area2'] = 'Greater London';

/**
 * name of the country
 * @member {String} country
 * @default 'United Kingdom'
 */
FindPlacesModel.prototype['country'] = 'United Kingdom';

/**
 * Latitude of the point, always in the format \\<float><N/S>, for example ``23.5S``
 * @member {String} lat
 * @default '23.2N'
 */
FindPlacesModel.prototype['lat'] = '23.2N';

/**
 * Longitude of the point, always in format \\<float><E/W>, for example ``23.5W``
 * @member {String} lon
 * @default '15.3E'
 */
FindPlacesModel.prototype['lon'] = '15.3E';

/**
 * name of the place
 * @member {String} name
 * @default 'London'
 */
FindPlacesModel.prototype['name'] = 'London';

/**
 * unique identifier of the place, which can be used in /point and /map endpoints
 * @member {String} place_id
 * @default 'london'
 */
FindPlacesModel.prototype['place_id'] = 'london';

/**
 * Timezone of the point in tzinfo format.
 * @member {String} timezone
 * @default 'Europe/London'
 */
FindPlacesModel.prototype['timezone'] = 'Europe/London';

/**
 * The character of the place. May be one of the following values:  * administrative areas (states, counties, districts...): ``administrative_area`` * country: ``country`` * a different political entity from a country (for example, a dependent teritory): ``political_entity`` * villages, towns and cities: ``settlement`` * air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal`` * places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,     ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula`` * places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon`` * other places related to nature: ``park``, ``reserve``, ``resort``, ``desert`` * places based on postcodes: ``postcode``         
 * @member {String} type
 * @default 'settlement'
 */
FindPlacesModel.prototype['type'] = 'settlement';






export default FindPlacesModel;

