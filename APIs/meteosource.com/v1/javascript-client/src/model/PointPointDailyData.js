/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PointPointDailyAfternoonData from './PointPointDailyAfternoonData';
import PointPointDailyAllDayData from './PointPointDailyAllDayData';
import PointPointDailyAstroData from './PointPointDailyAstroData';
import PointPointDailyEveningData from './PointPointDailyEveningData';
import PointPointDailyMorningData from './PointPointDailyMorningData';
import PointPointDailyStatsData from './PointPointDailyStatsData';

/**
 * The PointPointDailyData model module.
 * @module model/PointPointDailyData
 * @version v1
 */
class PointPointDailyData {
    /**
     * Constructs a new <code>PointPointDailyData</code>.
     * @alias module:model/PointPointDailyData
     * @param allDay {module:model/PointPointDailyAllDayData} 
     * @param astro {module:model/PointPointDailyAstroData} 
     * @param statistics {module:model/PointPointDailyStatsData} 
     */
    constructor(allDay, astro, statistics) { 
        
        PointPointDailyData.initialize(this, allDay, astro, statistics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allDay, astro, statistics) { 
        obj['all_day'] = allDay;
        obj['astro'] = astro;
        obj['statistics'] = statistics;
    }

    /**
     * Constructs a <code>PointPointDailyData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointPointDailyData} obj Optional instance to populate.
     * @return {module:model/PointPointDailyData} The populated <code>PointPointDailyData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointPointDailyData();

            if (data.hasOwnProperty('afternoon')) {
                obj['afternoon'] = PointPointDailyAfternoonData.constructFromObject(data['afternoon']);
            }
            if (data.hasOwnProperty('all_day')) {
                obj['all_day'] = PointPointDailyAllDayData.constructFromObject(data['all_day']);
            }
            if (data.hasOwnProperty('astro')) {
                obj['astro'] = PointPointDailyAstroData.constructFromObject(data['astro']);
            }
            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], File);
            }
            if (data.hasOwnProperty('evening')) {
                obj['evening'] = PointPointDailyEveningData.constructFromObject(data['evening']);
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'Number');
            }
            if (data.hasOwnProperty('morning')) {
                obj['morning'] = PointPointDailyMorningData.constructFromObject(data['morning']);
            }
            if (data.hasOwnProperty('predictability')) {
                obj['predictability'] = ApiClient.convertToType(data['predictability'], 'Number');
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = PointPointDailyStatsData.constructFromObject(data['statistics']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('weather')) {
                obj['weather'] = ApiClient.convertToType(data['weather'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PointPointDailyData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PointPointDailyData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PointPointDailyData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `afternoon`
        if (data['afternoon']) { // data not null
          PointPointDailyAfternoonData.validateJSON(data['afternoon']);
        }
        // validate the optional field `all_day`
        if (data['all_day']) { // data not null
          PointPointDailyAllDayData.validateJSON(data['all_day']);
        }
        // validate the optional field `astro`
        if (data['astro']) { // data not null
          PointPointDailyAstroData.validateJSON(data['astro']);
        }
        // validate the optional field `evening`
        if (data['evening']) { // data not null
          PointPointDailyEveningData.validateJSON(data['evening']);
        }
        // validate the optional field `morning`
        if (data['morning']) { // data not null
          PointPointDailyMorningData.validateJSON(data['morning']);
        }
        // validate the optional field `statistics`
        if (data['statistics']) { // data not null
          PointPointDailyStatsData.validateJSON(data['statistics']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['weather'] && !(typeof data['weather'] === 'string' || data['weather'] instanceof String)) {
            throw new Error("Expected the field `weather` to be a primitive type in the JSON string but got " + data['weather']);
        }

        return true;
    }


}

PointPointDailyData.RequiredProperties = ["all_day", "astro", "statistics"];

/**
 * @member {module:model/PointPointDailyAfternoonData} afternoon
 */
PointPointDailyData.prototype['afternoon'] = undefined;

/**
 * @member {module:model/PointPointDailyAllDayData} all_day
 */
PointPointDailyData.prototype['all_day'] = undefined;

/**
 * @member {module:model/PointPointDailyAstroData} astro
 */
PointPointDailyData.prototype['astro'] = undefined;

/**
 * Datetime in YYYY-MM-DDTHH:MM:SS format.
 * @member {File} day
 */
PointPointDailyData.prototype['day'] = undefined;

/**
 * @member {module:model/PointPointDailyEveningData} evening
 */
PointPointDailyData.prototype['evening'] = undefined;

/**
 * Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: icon
 * @member {Number} icon
 */
PointPointDailyData.prototype['icon'] = undefined;

/**
 * @member {module:model/PointPointDailyMorningData} morning
 */
PointPointDailyData.prototype['morning'] = undefined;

/**
 * Weather predictability. Values from 1 (very high predictability) to 5 (very low predictability). Unit: 1-5
 * @member {Number} predictability
 */
PointPointDailyData.prototype['predictability'] = undefined;

/**
 * @member {module:model/PointPointDailyStatsData} statistics
 */
PointPointDailyData.prototype['statistics'] = undefined;

/**
 * Short text summary of the weather, e.g. `Light rain`.
 * @member {String} summary
 */
PointPointDailyData.prototype['summary'] = undefined;

/**
 * All day string identifier of the weather icon, e.g. `light_rain`.
 * @member {String} weather
 */
PointPointDailyData.prototype['weather'] = undefined;






export default PointPointDailyData;

