/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeMachinePointDailyStatsPrecipitationData from './TimeMachinePointDailyStatsPrecipitationData';
import TimeMachinePointDailyStatsTemperatureData from './TimeMachinePointDailyStatsTemperatureData';
import TimeMachinePointDailyStatsWindData from './TimeMachinePointDailyStatsWindData';

/**
 * The TimeMachinePointDailyStatsData model module.
 * @module model/TimeMachinePointDailyStatsData
 * @version v1
 */
class TimeMachinePointDailyStatsData {
    /**
     * Constructs a new <code>TimeMachinePointDailyStatsData</code>.
     * @alias module:model/TimeMachinePointDailyStatsData
     * @param precipitation {module:model/TimeMachinePointDailyStatsPrecipitationData} 
     * @param temperature {module:model/TimeMachinePointDailyStatsTemperatureData} 
     * @param wind {module:model/TimeMachinePointDailyStatsWindData} 
     */
    constructor(precipitation, temperature, wind) { 
        
        TimeMachinePointDailyStatsData.initialize(this, precipitation, temperature, wind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, precipitation, temperature, wind) { 
        obj['precipitation'] = precipitation;
        obj['temperature'] = temperature;
        obj['wind'] = wind;
    }

    /**
     * Constructs a <code>TimeMachinePointDailyStatsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeMachinePointDailyStatsData} obj Optional instance to populate.
     * @return {module:model/TimeMachinePointDailyStatsData} The populated <code>TimeMachinePointDailyStatsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeMachinePointDailyStatsData();

            if (data.hasOwnProperty('precipitation')) {
                obj['precipitation'] = TimeMachinePointDailyStatsPrecipitationData.constructFromObject(data['precipitation']);
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = TimeMachinePointDailyStatsTemperatureData.constructFromObject(data['temperature']);
            }
            if (data.hasOwnProperty('wind')) {
                obj['wind'] = TimeMachinePointDailyStatsWindData.constructFromObject(data['wind']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeMachinePointDailyStatsData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeMachinePointDailyStatsData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeMachinePointDailyStatsData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `precipitation`
        if (data['precipitation']) { // data not null
          TimeMachinePointDailyStatsPrecipitationData.validateJSON(data['precipitation']);
        }
        // validate the optional field `temperature`
        if (data['temperature']) { // data not null
          TimeMachinePointDailyStatsTemperatureData.validateJSON(data['temperature']);
        }
        // validate the optional field `wind`
        if (data['wind']) { // data not null
          TimeMachinePointDailyStatsWindData.validateJSON(data['wind']);
        }

        return true;
    }


}

TimeMachinePointDailyStatsData.RequiredProperties = ["precipitation", "temperature", "wind"];

/**
 * @member {module:model/TimeMachinePointDailyStatsPrecipitationData} precipitation
 */
TimeMachinePointDailyStatsData.prototype['precipitation'] = undefined;

/**
 * @member {module:model/TimeMachinePointDailyStatsTemperatureData} temperature
 */
TimeMachinePointDailyStatsData.prototype['temperature'] = undefined;

/**
 * @member {module:model/TimeMachinePointDailyStatsWindData} wind
 */
TimeMachinePointDailyStatsData.prototype['wind'] = undefined;






export default TimeMachinePointDailyStatsData;

