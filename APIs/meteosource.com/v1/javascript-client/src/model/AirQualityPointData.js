/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AirQualityPointHourlyData from './AirQualityPointHourlyData';

/**
 * The AirQualityPointData model module.
 * @module model/AirQualityPointData
 * @version v1
 */
class AirQualityPointData {
    /**
     * Constructs a new <code>AirQualityPointData</code>.
     * @alias module:model/AirQualityPointData
     * @param data {Array.<module:model/AirQualityPointHourlyData>} 
     * @param elevation {Number} Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')
     * @param lat {String} Latitude of the point, always in the format <float><N/S>, for example ``23.5S``
     * @param lon {String} Longitude of the point, always in the format <float><E/W>, for example ``23.5W``
     */
    constructor(data, elevation, lat, lon) { 
        
        AirQualityPointData.initialize(this, data, elevation, lat, lon);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, elevation, lat, lon) { 
        obj['data'] = data;
        obj['elevation'] = elevation;
        obj['lat'] = lat;
        obj['lon'] = lon;
    }

    /**
     * Constructs a <code>AirQualityPointData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AirQualityPointData} obj Optional instance to populate.
     * @return {module:model/AirQualityPointData} The populated <code>AirQualityPointData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AirQualityPointData();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [AirQualityPointHourlyData]);
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'String');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AirQualityPointData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AirQualityPointData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AirQualityPointData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                AirQualityPointHourlyData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lat'] && !(typeof data['lat'] === 'string' || data['lat'] instanceof String)) {
            throw new Error("Expected the field `lat` to be a primitive type in the JSON string but got " + data['lat']);
        }
        // ensure the json data is a string
        if (data['lon'] && !(typeof data['lon'] === 'string' || data['lon'] instanceof String)) {
            throw new Error("Expected the field `lon` to be a primitive type in the JSON string but got " + data['lon']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}

AirQualityPointData.RequiredProperties = ["data", "elevation", "lat", "lon"];

/**
 * @member {Array.<module:model/AirQualityPointHourlyData>} data
 */
AirQualityPointData.prototype['data'] = undefined;

/**
 * Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')
 * @member {Number} elevation
 */
AirQualityPointData.prototype['elevation'] = undefined;

/**
 * Latitude of the point, always in the format <float><N/S>, for example ``23.5S``
 * @member {String} lat
 */
AirQualityPointData.prototype['lat'] = undefined;

/**
 * Longitude of the point, always in the format <float><E/W>, for example ``23.5W``
 * @member {String} lon
 */
AirQualityPointData.prototype['lon'] = undefined;

/**
 * Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.
 * @member {String} timezone
 */
AirQualityPointData.prototype['timezone'] = undefined;






export default AirQualityPointData;

