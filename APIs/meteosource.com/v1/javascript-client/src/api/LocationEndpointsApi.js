/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FindPlacesModel from '../model/FindPlacesModel';
import GeneralRequestError from '../model/GeneralRequestError';
import HTTPValidationError from '../model/HTTPValidationError';
import Language from '../model/Language';

/**
* LocationEndpoints service.
* @module api/LocationEndpointsApi
* @version v1
*/
export default class LocationEndpointsApi {

    /**
    * Constructs a new LocationEndpointsApi. 
    * @alias module:api/LocationEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findPlacesFindPlacesGet operation.
     * @callback module:api/LocationEndpointsApi~findPlacesFindPlacesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FindPlacesModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for places. Complete words required.
     * ## Search for places  You can use this endpoint to obtain `place_id` of the location you want, to be used in `point` endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the `/find_place_prefix` endpoint, complete words are required here. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param {String} text Place name or ZIP code
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech 
     * @param {String} [key] Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
     * @param {module:api/LocationEndpointsApi~findPlacesFindPlacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FindPlacesModel>}
     */
    findPlacesFindPlacesGet(text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling findPlacesFindPlacesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text,
        'language': opts['language'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FindPlacesModel];
      return this.apiClient.callApi(
        '/find_places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findPlacesPrefixFindPlacesPrefixGet operation.
     * @callback module:api/LocationEndpointsApi~findPlacesPrefixFindPlacesPrefixGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FindPlacesModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prefix search for places. Useful for autocomplete forms.
     * ## Search for places by prefix  You can use this endpoint to obtain `place_id` of the location you want, to be used in `point` endpoint. The response also contains detailed information about the location, such as coordinates, timezone and the country the place belongs to.  Unlike the `/find_places` endpoint, you should only specify the prefix of the place you are looking for. This is particularly useful for autocomplete forms. You can search for cities, mountains, lakes, countries, ZIP codes, etc. The response can contain multiple places, sorted by relevance. You can then identify the one you want by coordinates, country, or the administrative area.
     * @param {String} text Place name or ZIP code
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech 
     * @param {String} [key] Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
     * @param {module:api/LocationEndpointsApi~findPlacesPrefixFindPlacesPrefixGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FindPlacesModel>}
     */
    findPlacesPrefixFindPlacesPrefixGet(text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling findPlacesPrefixFindPlacesPrefixGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text,
        'language': opts['language'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FindPlacesModel];
      return this.apiClient.callApi(
        '/find_places_prefix', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nearestPlaceNearestPlaceGet operation.
     * @callback module:api/LocationEndpointsApi~nearestPlaceNearestPlaceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FindPlacesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the nearest named location for a given GPS coordinates.
     * ## Search for nearest place by coordinates  You can use this endpoint to find the nearest place from given coordinates.  *Note: If you specify coordinates of a secluded place (e.g. middle of the ocean), the nearest point can be very far from the coordinates.*
     * @param {String} lat Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
     * @param {String} lon Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech 
     * @param {String} [key] Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
     * @param {module:api/LocationEndpointsApi~nearestPlaceNearestPlaceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FindPlacesModel}
     */
    nearestPlaceNearestPlaceGet(lat, lon, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling nearestPlaceNearestPlaceGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling nearestPlaceNearestPlaceGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'language': opts['language'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FindPlacesModel;
      return this.apiClient.callApi(
        '/nearest_place', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
