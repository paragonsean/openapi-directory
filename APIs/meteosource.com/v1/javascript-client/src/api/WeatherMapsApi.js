/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GeneralRequestError from '../model/GeneralRequestError';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* WeatherMaps service.
* @module api/WeatherMapsApi
* @version v1
*/
export default class WeatherMapsApi {

    /**
    * Constructs a new WeatherMapsApi. 
    * @alias module:api/WeatherMapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapMapGet operation.
     * @callback module:api/WeatherMapsApi~mapMapGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns PNG weather map for given area and variable
     * ## PNG weather forecast maps for given area and variable  ### Area specification There are two ways to specify geographical area you need for your map: 1. Specify `X` and `Y` coordinates and zoom level `Z` of desired tile in <a href=\"https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\" rel=\"nofollow\" target=\"_blank\">Google Maps Tile notation</a>. 2. Specify latitude and longitude bounds of the area you want to cover.  ### Notes * The resulting PNG maps are **always** in <a href=\"https://epsg.io/3857\" rel=\"nofollow\" target=\"_blank\">Google Mercator projection (EPSG:3857)</a>. * As Meteosource only covers areas between latitudes 80° and -80°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent. * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses. * Weather maps are only supported for forecasts, not for archive data.
     * @param {String} variable Name of the variable for your map. Available values are:  * `temperature`: Temperature 2 metres above ground * `feels_like_temperature`: Feels like temperature * `clouds`: Percentage of sky covered by clouds * `precipitation`: Total precipitation amount accumulated since last hour * `wind_speed`: Wind speed 10 metres above the ground * `wind_gust`: Wind gust speed * `pressure`: Atmospheric pressure at mean sea level * `humidity`: Relative humidity * `wave_height`: Wave height * `wave_period`: Wave period * `sea_temperature`: Sea temperature (available only for +-24 hours) * `air_quality`: Air quality index * `ozone_surface`: Ozone at surface level * `ozone_total`: Total column ozone * `no2`: Nitrogen dioxide at surface level * `pm2.5`: Particulate matter d < 2.5 µm (PM2.5) 
     * @param {String} datetime There are two ways to specify date and time for your map:  1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00` 2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days` 
     * @param {Object} opts Optional parameters
     * @param {Number} [tileX] The X coordinate of Google Maps tile
     * @param {Number} [tileY] The Y coordinate of Google Maps tile
     * @param {Number} [tileZoom] The zoom level of Google Maps tile
     * @param {String} [minLat] Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2 
     * @param {String} [minLon] Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
     * @param {String} [maxLat] Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2. 
     * @param {String} [maxLon] Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
     * @param {String} [key] Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
     * @param {module:api/WeatherMapsApi~mapMapGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    mapMapGet(variable, datetime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling mapMapGet");
      }
      // verify the required parameter 'datetime' is set
      if (datetime === undefined || datetime === null) {
        throw new Error("Missing the required parameter 'datetime' when calling mapMapGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tile_x': opts['tileX'],
        'tile_y': opts['tileY'],
        'tile_zoom': opts['tileZoom'],
        'min_lat': opts['minLat'],
        'min_lon': opts['minLon'],
        'max_lat': opts['maxLat'],
        'max_lon': opts['maxLon'],
        'variable': variable,
        'datetime': datetime,
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/map', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
