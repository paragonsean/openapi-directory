/**
 * Interactive documentation for your Premium plan
 *   This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GeneralRequestError from '../model/GeneralRequestError';
import HTTPValidationError from '../model/HTTPValidationError';
import TimeMachineTimeMachine from '../model/TimeMachineTimeMachine';
import Units from '../model/Units';

/**
* TimeMachineHistoricalWeather service.
* @module api/TimeMachineHistoricalWeatherApi
* @version v1
*/
export default class TimeMachineHistoricalWeatherApi {

    /**
    * Constructs a new TimeMachineHistoricalWeatherApi. 
    * @alias module:api/TimeMachineHistoricalWeatherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the timeMachineTimeMachineGet operation.
     * @callback module:api/TimeMachineHistoricalWeatherApi~timeMachineTimeMachineGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeMachineTimeMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns weather data for a single location and given day in the past
     * ## Actual weather data for a single location and day in the past  The output contains actual weather data for each day up to 20 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.  ### Location specification The location of the weather data must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*
     * @param {Date} date The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`. 
     * @param {Object} opts Optional parameters
     * @param {String} [placeId] Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
     * @param {String} [lat] Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
     * @param {String} [lon] Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
     * @param {String} [timezone] Timezone to be used for the date fields. If not specified, local timezone of the location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
     * @param {module:model/Units} [units] Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. 
     * @param {String} [key] Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
     * @param {module:api/TimeMachineHistoricalWeatherApi~timeMachineTimeMachineGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeMachineTimeMachine}
     */
    timeMachineTimeMachineGet(date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling timeMachineTimeMachineGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'place_id': opts['placeId'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'date': date,
        'timezone': opts['timezone'],
        'units': opts['units'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeMachineTimeMachine;
      return this.apiClient.callApi(
        '/time_machine', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
