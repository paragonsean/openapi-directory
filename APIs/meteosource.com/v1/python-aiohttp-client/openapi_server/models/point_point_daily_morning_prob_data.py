# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointPointDailyMorningProbData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, freeze: float=None, precipitation: int=None, storm: float=None):
        """PointPointDailyMorningProbData - a model defined in OpenAPI

        :param freeze: The freeze of this PointPointDailyMorningProbData.
        :param precipitation: The precipitation of this PointPointDailyMorningProbData.
        :param storm: The storm of this PointPointDailyMorningProbData.
        """
        self.openapi_types = {
            'freeze': float,
            'precipitation': int,
            'storm': float
        }

        self.attribute_map = {
            'freeze': 'freeze',
            'precipitation': 'precipitation',
            'storm': 'storm'
        }

        self._freeze = freeze
        self._precipitation = precipitation
        self._storm = storm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyMorningProbData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyMorningProbData of this PointPointDailyMorningProbData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def freeze(self):
        """Gets the freeze of this PointPointDailyMorningProbData.

        Probability the temperature drops below 0 °C. (morning avg) Unit: %

        :return: The freeze of this PointPointDailyMorningProbData.
        :rtype: float
        """
        return self._freeze

    @freeze.setter
    def freeze(self, freeze):
        """Sets the freeze of this PointPointDailyMorningProbData.

        Probability the temperature drops below 0 °C. (morning avg) Unit: %

        :param freeze: The freeze of this PointPointDailyMorningProbData.
        :type freeze: float
        """

        self._freeze = freeze

    @property
    def precipitation(self):
        """Gets the precipitation of this PointPointDailyMorningProbData.

        Probability of non-zero precipitation. Unit: \\%

        :return: The precipitation of this PointPointDailyMorningProbData.
        :rtype: int
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this PointPointDailyMorningProbData.

        Probability of non-zero precipitation. Unit: \\%

        :param precipitation: The precipitation of this PointPointDailyMorningProbData.
        :type precipitation: int
        """

        self._precipitation = precipitation

    @property
    def storm(self):
        """Gets the storm of this PointPointDailyMorningProbData.

        Total precipitation amount accumulated since last hour. Unit: mm/h

        :return: The storm of this PointPointDailyMorningProbData.
        :rtype: float
        """
        return self._storm

    @storm.setter
    def storm(self, storm):
        """Sets the storm of this PointPointDailyMorningProbData.

        Total precipitation amount accumulated since last hour. Unit: mm/h

        :param storm: The storm of this PointPointDailyMorningProbData.
        :type storm: float
        """

        self._storm = storm
