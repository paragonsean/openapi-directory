# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointPointDailyStatsTemperatureData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg: float=None, avg_max: float=None, avg_min: float=None, record_max: float=None, record_min: float=None):
        """PointPointDailyStatsTemperatureData - a model defined in OpenAPI

        :param avg: The avg of this PointPointDailyStatsTemperatureData.
        :param avg_max: The avg_max of this PointPointDailyStatsTemperatureData.
        :param avg_min: The avg_min of this PointPointDailyStatsTemperatureData.
        :param record_max: The record_max of this PointPointDailyStatsTemperatureData.
        :param record_min: The record_min of this PointPointDailyStatsTemperatureData.
        """
        self.openapi_types = {
            'avg': float,
            'avg_max': float,
            'avg_min': float,
            'record_max': float,
            'record_min': float
        }

        self.attribute_map = {
            'avg': 'avg',
            'avg_max': 'avg_max',
            'avg_min': 'avg_min',
            'record_max': 'record_max',
            'record_min': 'record_min'
        }

        self._avg = avg
        self._avg_max = avg_max
        self._avg_min = avg_min
        self._record_max = record_max
        self._record_min = record_min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyStatsTemperatureData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyStatsTemperatureData of this PointPointDailyStatsTemperatureData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg(self):
        """Gets the avg of this PointPointDailyStatsTemperatureData.

        Long-term temperature average. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The avg of this PointPointDailyStatsTemperatureData.
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this PointPointDailyStatsTemperatureData.

        Long-term temperature average. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param avg: The avg of this PointPointDailyStatsTemperatureData.
        :type avg: float
        """

        self._avg = avg

    @property
    def avg_max(self):
        """Gets the avg_max of this PointPointDailyStatsTemperatureData.

        Long-term daily maximum temperature average. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The avg_max of this PointPointDailyStatsTemperatureData.
        :rtype: float
        """
        return self._avg_max

    @avg_max.setter
    def avg_max(self, avg_max):
        """Sets the avg_max of this PointPointDailyStatsTemperatureData.

        Long-term daily maximum temperature average. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param avg_max: The avg_max of this PointPointDailyStatsTemperatureData.
        :type avg_max: float
        """

        self._avg_max = avg_max

    @property
    def avg_min(self):
        """Gets the avg_min of this PointPointDailyStatsTemperatureData.

        Long-term daily minimum temperature average. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The avg_min of this PointPointDailyStatsTemperatureData.
        :rtype: float
        """
        return self._avg_min

    @avg_min.setter
    def avg_min(self, avg_min):
        """Sets the avg_min of this PointPointDailyStatsTemperatureData.

        Long-term daily minimum temperature average. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param avg_min: The avg_min of this PointPointDailyStatsTemperatureData.
        :type avg_min: float
        """

        self._avg_min = avg_min

    @property
    def record_max(self):
        """Gets the record_max of this PointPointDailyStatsTemperatureData.

        Historical daily maximum. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The record_max of this PointPointDailyStatsTemperatureData.
        :rtype: float
        """
        return self._record_max

    @record_max.setter
    def record_max(self, record_max):
        """Sets the record_max of this PointPointDailyStatsTemperatureData.

        Historical daily maximum. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param record_max: The record_max of this PointPointDailyStatsTemperatureData.
        :type record_max: float
        """

        self._record_max = record_max

    @property
    def record_min(self):
        """Gets the record_min of this PointPointDailyStatsTemperatureData.

        Historical daily minimum temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The record_min of this PointPointDailyStatsTemperatureData.
        :rtype: float
        """
        return self._record_min

    @record_min.setter
    def record_min(self, record_min):
        """Sets the record_min of this PointPointDailyStatsTemperatureData.

        Historical daily minimum temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param record_min: The record_min of this PointPointDailyStatsTemperatureData.
        :type record_min: float
        """

        self._record_min = record_min
