# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeMachinePointDailyStatsPrecipitationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg: float=None, probability: int=None):
        """TimeMachinePointDailyStatsPrecipitationData - a model defined in OpenAPI

        :param avg: The avg of this TimeMachinePointDailyStatsPrecipitationData.
        :param probability: The probability of this TimeMachinePointDailyStatsPrecipitationData.
        """
        self.openapi_types = {
            'avg': float,
            'probability': int
        }

        self.attribute_map = {
            'avg': 'avg',
            'probability': 'probability'
        }

        self._avg = avg
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeMachinePointDailyStatsPrecipitationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeMachine_PointDailyStatsPrecipitationData of this TimeMachinePointDailyStatsPrecipitationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg(self):
        """Gets the avg of this TimeMachinePointDailyStatsPrecipitationData.

        Long-term average daily precipitation amount. Units: metric = mm/day, us = inches per day, uk = mm/day, ca = mm/day

        :return: The avg of this TimeMachinePointDailyStatsPrecipitationData.
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this TimeMachinePointDailyStatsPrecipitationData.

        Long-term average daily precipitation amount. Units: metric = mm/day, us = inches per day, uk = mm/day, ca = mm/day

        :param avg: The avg of this TimeMachinePointDailyStatsPrecipitationData.
        :type avg: float
        """

        self._avg = avg

    @property
    def probability(self):
        """Gets the probability of this TimeMachinePointDailyStatsPrecipitationData.

        Long-term average precipitation probability. Unit: \\%

        :return: The probability of this TimeMachinePointDailyStatsPrecipitationData.
        :rtype: int
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this TimeMachinePointDailyStatsPrecipitationData.

        Long-term average precipitation probability. Unit: \\%

        :param probability: The probability of this TimeMachinePointDailyStatsPrecipitationData.
        :type probability: int
        """

        self._probability = probability
