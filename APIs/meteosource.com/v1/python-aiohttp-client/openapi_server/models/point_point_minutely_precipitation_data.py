# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointPointMinutelyPrecipitationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, precipitation: float=None):
        """PointPointMinutelyPrecipitationData - a model defined in OpenAPI

        :param _date: The _date of this PointPointMinutelyPrecipitationData.
        :param precipitation: The precipitation of this PointPointMinutelyPrecipitationData.
        """
        self.openapi_types = {
            '_date': datetime,
            'precipitation': float
        }

        self.attribute_map = {
            '_date': 'date',
            'precipitation': 'precipitation'
        }

        self.__date = _date
        self._precipitation = precipitation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointMinutelyPrecipitationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointMinutelyPrecipitationData of this PointPointMinutelyPrecipitationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this PointPointMinutelyPrecipitationData.

        Datetime in YYYY-MM-DDTHH:MM:SS format.

        :return: The _date of this PointPointMinutelyPrecipitationData.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PointPointMinutelyPrecipitationData.

        Datetime in YYYY-MM-DDTHH:MM:SS format.

        :param _date: The _date of this PointPointMinutelyPrecipitationData.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def precipitation(self):
        """Gets the precipitation of this PointPointMinutelyPrecipitationData.

        Minutely precipitation amount (per hour). For the startup tier, showing one value per 10 minutes. For other tiers, showing one value per each minute.  Unit: mm/h

        :return: The precipitation of this PointPointMinutelyPrecipitationData.
        :rtype: float
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this PointPointMinutelyPrecipitationData.

        Minutely precipitation amount (per hour). For the startup tier, showing one value per 10 minutes. For other tiers, showing one value per each minute.  Unit: mm/h

        :param precipitation: The precipitation of this PointPointMinutelyPrecipitationData.
        :type precipitation: float
        """

        self._precipitation = precipitation
