# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_machine_time_machine_cloud_cover_data import TimeMachineTimeMachineCloudCoverData
from openapi_server.models.time_machine_time_machine_precipitation_data import TimeMachineTimeMachinePrecipitationData
from openapi_server.models.time_machine_time_machine_wind_data import TimeMachineTimeMachineWindData
from openapi_server import util


class TimeMachineTimeMachineHourlyData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cape: int=None, cloud_cover: TimeMachineTimeMachineCloudCoverData=None, _date: datetime=None, dew_point: float=None, evaporation: int=None, feels_like: float=None, humidity: int=None, icon: int=None, irradiance: int=None, ozone: int=None, precipitation: TimeMachineTimeMachinePrecipitationData=None, pressure: float=None, soil_temperature: float=None, surface_temperature: float=None, temperature: float=None, weather: str=None, wind: TimeMachineTimeMachineWindData=None, wind_chill: float=None):
        """TimeMachineTimeMachineHourlyData - a model defined in OpenAPI

        :param cape: The cape of this TimeMachineTimeMachineHourlyData.
        :param cloud_cover: The cloud_cover of this TimeMachineTimeMachineHourlyData.
        :param _date: The _date of this TimeMachineTimeMachineHourlyData.
        :param dew_point: The dew_point of this TimeMachineTimeMachineHourlyData.
        :param evaporation: The evaporation of this TimeMachineTimeMachineHourlyData.
        :param feels_like: The feels_like of this TimeMachineTimeMachineHourlyData.
        :param humidity: The humidity of this TimeMachineTimeMachineHourlyData.
        :param icon: The icon of this TimeMachineTimeMachineHourlyData.
        :param irradiance: The irradiance of this TimeMachineTimeMachineHourlyData.
        :param ozone: The ozone of this TimeMachineTimeMachineHourlyData.
        :param precipitation: The precipitation of this TimeMachineTimeMachineHourlyData.
        :param pressure: The pressure of this TimeMachineTimeMachineHourlyData.
        :param soil_temperature: The soil_temperature of this TimeMachineTimeMachineHourlyData.
        :param surface_temperature: The surface_temperature of this TimeMachineTimeMachineHourlyData.
        :param temperature: The temperature of this TimeMachineTimeMachineHourlyData.
        :param weather: The weather of this TimeMachineTimeMachineHourlyData.
        :param wind: The wind of this TimeMachineTimeMachineHourlyData.
        :param wind_chill: The wind_chill of this TimeMachineTimeMachineHourlyData.
        """
        self.openapi_types = {
            'cape': int,
            'cloud_cover': TimeMachineTimeMachineCloudCoverData,
            '_date': datetime,
            'dew_point': float,
            'evaporation': int,
            'feels_like': float,
            'humidity': int,
            'icon': int,
            'irradiance': int,
            'ozone': int,
            'precipitation': TimeMachineTimeMachinePrecipitationData,
            'pressure': float,
            'soil_temperature': float,
            'surface_temperature': float,
            'temperature': float,
            'weather': str,
            'wind': TimeMachineTimeMachineWindData,
            'wind_chill': float
        }

        self.attribute_map = {
            'cape': 'cape',
            'cloud_cover': 'cloud_cover',
            '_date': 'date',
            'dew_point': 'dew_point',
            'evaporation': 'evaporation',
            'feels_like': 'feels_like',
            'humidity': 'humidity',
            'icon': 'icon',
            'irradiance': 'irradiance',
            'ozone': 'ozone',
            'precipitation': 'precipitation',
            'pressure': 'pressure',
            'soil_temperature': 'soil_temperature',
            'surface_temperature': 'surface_temperature',
            'temperature': 'temperature',
            'weather': 'weather',
            'wind': 'wind',
            'wind_chill': 'wind_chill'
        }

        self._cape = cape
        self._cloud_cover = cloud_cover
        self.__date = _date
        self._dew_point = dew_point
        self._evaporation = evaporation
        self._feels_like = feels_like
        self._humidity = humidity
        self._icon = icon
        self._irradiance = irradiance
        self._ozone = ozone
        self._precipitation = precipitation
        self._pressure = pressure
        self._soil_temperature = soil_temperature
        self._surface_temperature = surface_temperature
        self._temperature = temperature
        self._weather = weather
        self._wind = wind
        self._wind_chill = wind_chill

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeMachineTimeMachineHourlyData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeMachine_TimeMachineHourlyData of this TimeMachineTimeMachineHourlyData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cape(self):
        """Gets the cape of this TimeMachineTimeMachineHourlyData.

        Convective available potential energy. Unit: J/kg

        :return: The cape of this TimeMachineTimeMachineHourlyData.
        :rtype: int
        """
        return self._cape

    @cape.setter
    def cape(self, cape):
        """Sets the cape of this TimeMachineTimeMachineHourlyData.

        Convective available potential energy. Unit: J/kg

        :param cape: The cape of this TimeMachineTimeMachineHourlyData.
        :type cape: int
        """

        self._cape = cape

    @property
    def cloud_cover(self):
        """Gets the cloud_cover of this TimeMachineTimeMachineHourlyData.


        :return: The cloud_cover of this TimeMachineTimeMachineHourlyData.
        :rtype: TimeMachineTimeMachineCloudCoverData
        """
        return self._cloud_cover

    @cloud_cover.setter
    def cloud_cover(self, cloud_cover):
        """Sets the cloud_cover of this TimeMachineTimeMachineHourlyData.


        :param cloud_cover: The cloud_cover of this TimeMachineTimeMachineHourlyData.
        :type cloud_cover: TimeMachineTimeMachineCloudCoverData
        """
        if cloud_cover is None:
            raise ValueError("Invalid value for `cloud_cover`, must not be `None`")

        self._cloud_cover = cloud_cover

    @property
    def _date(self):
        """Gets the _date of this TimeMachineTimeMachineHourlyData.

        Datetime in YYYY-MM-DDTHH:MM:SS format.

        :return: The _date of this TimeMachineTimeMachineHourlyData.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TimeMachineTimeMachineHourlyData.

        Datetime in YYYY-MM-DDTHH:MM:SS format.

        :param _date: The _date of this TimeMachineTimeMachineHourlyData.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def dew_point(self):
        """Gets the dew_point of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The dew_point of this TimeMachineTimeMachineHourlyData.
        :rtype: float
        """
        return self._dew_point

    @dew_point.setter
    def dew_point(self, dew_point):
        """Sets the dew_point of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param dew_point: The dew_point of this TimeMachineTimeMachineHourlyData.
        :type dew_point: float
        """

        self._dew_point = dew_point

    @property
    def evaporation(self):
        """Gets the evaporation of this TimeMachineTimeMachineHourlyData.

        Evaporation of liquid water into water vapor. Unit: mm/h

        :return: The evaporation of this TimeMachineTimeMachineHourlyData.
        :rtype: int
        """
        return self._evaporation

    @evaporation.setter
    def evaporation(self, evaporation):
        """Sets the evaporation of this TimeMachineTimeMachineHourlyData.

        Evaporation of liquid water into water vapor. Unit: mm/h

        :param evaporation: The evaporation of this TimeMachineTimeMachineHourlyData.
        :type evaporation: int
        """

        self._evaporation = evaporation

    @property
    def feels_like(self):
        """Gets the feels_like of this TimeMachineTimeMachineHourlyData.

        Feels like temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The feels_like of this TimeMachineTimeMachineHourlyData.
        :rtype: float
        """
        return self._feels_like

    @feels_like.setter
    def feels_like(self, feels_like):
        """Sets the feels_like of this TimeMachineTimeMachineHourlyData.

        Feels like temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param feels_like: The feels_like of this TimeMachineTimeMachineHourlyData.
        :type feels_like: float
        """

        self._feels_like = feels_like

    @property
    def humidity(self):
        """Gets the humidity of this TimeMachineTimeMachineHourlyData.

        Relative humidity. Unit: \\%

        :return: The humidity of this TimeMachineTimeMachineHourlyData.
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this TimeMachineTimeMachineHourlyData.

        Relative humidity. Unit: \\%

        :param humidity: The humidity of this TimeMachineTimeMachineHourlyData.
        :type humidity: int
        """

        self._humidity = humidity

    @property
    def icon(self):
        """Gets the icon of this TimeMachineTimeMachineHourlyData.

        Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: N/A

        :return: The icon of this TimeMachineTimeMachineHourlyData.
        :rtype: int
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this TimeMachineTimeMachineHourlyData.

        Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: N/A

        :param icon: The icon of this TimeMachineTimeMachineHourlyData.
        :type icon: int
        """

        self._icon = icon

    @property
    def irradiance(self):
        """Gets the irradiance of this TimeMachineTimeMachineHourlyData.

        Global downward short-wave radiation flux. Unit: W/m2

        :return: The irradiance of this TimeMachineTimeMachineHourlyData.
        :rtype: int
        """
        return self._irradiance

    @irradiance.setter
    def irradiance(self, irradiance):
        """Sets the irradiance of this TimeMachineTimeMachineHourlyData.

        Global downward short-wave radiation flux. Unit: W/m2

        :param irradiance: The irradiance of this TimeMachineTimeMachineHourlyData.
        :type irradiance: int
        """

        self._irradiance = irradiance

    @property
    def ozone(self):
        """Gets the ozone of this TimeMachineTimeMachineHourlyData.

        Total column of ozone. Unit: Dobson

        :return: The ozone of this TimeMachineTimeMachineHourlyData.
        :rtype: int
        """
        return self._ozone

    @ozone.setter
    def ozone(self, ozone):
        """Sets the ozone of this TimeMachineTimeMachineHourlyData.

        Total column of ozone. Unit: Dobson

        :param ozone: The ozone of this TimeMachineTimeMachineHourlyData.
        :type ozone: int
        """

        self._ozone = ozone

    @property
    def precipitation(self):
        """Gets the precipitation of this TimeMachineTimeMachineHourlyData.


        :return: The precipitation of this TimeMachineTimeMachineHourlyData.
        :rtype: TimeMachineTimeMachinePrecipitationData
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this TimeMachineTimeMachineHourlyData.


        :param precipitation: The precipitation of this TimeMachineTimeMachineHourlyData.
        :type precipitation: TimeMachineTimeMachinePrecipitationData
        """
        if precipitation is None:
            raise ValueError("Invalid value for `precipitation`, must not be `None`")

        self._precipitation = precipitation

    @property
    def pressure(self):
        """Gets the pressure of this TimeMachineTimeMachineHourlyData.

        Atmospheric pressure at mean sea level. Units: metric = hPa, us = Hg, uk = hPa, ca = kPa

        :return: The pressure of this TimeMachineTimeMachineHourlyData.
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this TimeMachineTimeMachineHourlyData.

        Atmospheric pressure at mean sea level. Units: metric = hPa, us = Hg, uk = hPa, ca = kPa

        :param pressure: The pressure of this TimeMachineTimeMachineHourlyData.
        :type pressure: float
        """

        self._pressure = pressure

    @property
    def soil_temperature(self):
        """Gets the soil_temperature of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The soil_temperature of this TimeMachineTimeMachineHourlyData.
        :rtype: float
        """
        return self._soil_temperature

    @soil_temperature.setter
    def soil_temperature(self, soil_temperature):
        """Sets the soil_temperature of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param soil_temperature: The soil_temperature of this TimeMachineTimeMachineHourlyData.
        :type soil_temperature: float
        """

        self._soil_temperature = soil_temperature

    @property
    def surface_temperature(self):
        """Gets the surface_temperature of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The surface_temperature of this TimeMachineTimeMachineHourlyData.
        :rtype: float
        """
        return self._surface_temperature

    @surface_temperature.setter
    def surface_temperature(self, surface_temperature):
        """Sets the surface_temperature of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param surface_temperature: The surface_temperature of this TimeMachineTimeMachineHourlyData.
        :type surface_temperature: float
        """

        self._surface_temperature = surface_temperature

    @property
    def temperature(self):
        """Gets the temperature of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The temperature of this TimeMachineTimeMachineHourlyData.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this TimeMachineTimeMachineHourlyData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param temperature: The temperature of this TimeMachineTimeMachineHourlyData.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def weather(self):
        """Gets the weather of this TimeMachineTimeMachineHourlyData.

        String identifier of the weather icon, e.g. `light_rain`.

        :return: The weather of this TimeMachineTimeMachineHourlyData.
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this TimeMachineTimeMachineHourlyData.

        String identifier of the weather icon, e.g. `light_rain`.

        :param weather: The weather of this TimeMachineTimeMachineHourlyData.
        :type weather: str
        """

        self._weather = weather

    @property
    def wind(self):
        """Gets the wind of this TimeMachineTimeMachineHourlyData.


        :return: The wind of this TimeMachineTimeMachineHourlyData.
        :rtype: TimeMachineTimeMachineWindData
        """
        return self._wind

    @wind.setter
    def wind(self, wind):
        """Sets the wind of this TimeMachineTimeMachineHourlyData.


        :param wind: The wind of this TimeMachineTimeMachineHourlyData.
        :type wind: TimeMachineTimeMachineWindData
        """
        if wind is None:
            raise ValueError("Invalid value for `wind`, must not be `None`")

        self._wind = wind

    @property
    def wind_chill(self):
        """Gets the wind_chill of this TimeMachineTimeMachineHourlyData.

        Windchill temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The wind_chill of this TimeMachineTimeMachineHourlyData.
        :rtype: float
        """
        return self._wind_chill

    @wind_chill.setter
    def wind_chill(self, wind_chill):
        """Sets the wind_chill of this TimeMachineTimeMachineHourlyData.

        Windchill temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param wind_chill: The wind_chill of this TimeMachineTimeMachineHourlyData.
        :type wind_chill: float
        """

        self._wind_chill = wind_chill
