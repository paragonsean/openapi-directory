# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FindPlacesModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adm_area1: str='England', adm_area2: str='Greater London', country: str='United Kingdom', lat: str='23.2N', lon: str='15.3E', name: str='London', place_id: str='london', timezone: str='Europe/London', type: str='settlement'):
        """FindPlacesModel - a model defined in OpenAPI

        :param adm_area1: The adm_area1 of this FindPlacesModel.
        :param adm_area2: The adm_area2 of this FindPlacesModel.
        :param country: The country of this FindPlacesModel.
        :param lat: The lat of this FindPlacesModel.
        :param lon: The lon of this FindPlacesModel.
        :param name: The name of this FindPlacesModel.
        :param place_id: The place_id of this FindPlacesModel.
        :param timezone: The timezone of this FindPlacesModel.
        :param type: The type of this FindPlacesModel.
        """
        self.openapi_types = {
            'adm_area1': str,
            'adm_area2': str,
            'country': str,
            'lat': str,
            'lon': str,
            'name': str,
            'place_id': str,
            'timezone': str,
            'type': str
        }

        self.attribute_map = {
            'adm_area1': 'adm_area1',
            'adm_area2': 'adm_area2',
            'country': 'country',
            'lat': 'lat',
            'lon': 'lon',
            'name': 'name',
            'place_id': 'place_id',
            'timezone': 'timezone',
            'type': 'type'
        }

        self._adm_area1 = adm_area1
        self._adm_area2 = adm_area2
        self._country = country
        self._lat = lat
        self._lon = lon
        self._name = name
        self._place_id = place_id
        self._timezone = timezone
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindPlacesModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FindPlacesModel of this FindPlacesModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adm_area1(self):
        """Gets the adm_area1 of this FindPlacesModel.

        first-level administrative area (a US state, for example)

        :return: The adm_area1 of this FindPlacesModel.
        :rtype: str
        """
        return self._adm_area1

    @adm_area1.setter
    def adm_area1(self, adm_area1):
        """Sets the adm_area1 of this FindPlacesModel.

        first-level administrative area (a US state, for example)

        :param adm_area1: The adm_area1 of this FindPlacesModel.
        :type adm_area1: str
        """

        self._adm_area1 = adm_area1

    @property
    def adm_area2(self):
        """Gets the adm_area2 of this FindPlacesModel.

        second-level administrative area (a US county, for example)

        :return: The adm_area2 of this FindPlacesModel.
        :rtype: str
        """
        return self._adm_area2

    @adm_area2.setter
    def adm_area2(self, adm_area2):
        """Sets the adm_area2 of this FindPlacesModel.

        second-level administrative area (a US county, for example)

        :param adm_area2: The adm_area2 of this FindPlacesModel.
        :type adm_area2: str
        """

        self._adm_area2 = adm_area2

    @property
    def country(self):
        """Gets the country of this FindPlacesModel.

        name of the country

        :return: The country of this FindPlacesModel.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FindPlacesModel.

        name of the country

        :param country: The country of this FindPlacesModel.
        :type country: str
        """

        self._country = country

    @property
    def lat(self):
        """Gets the lat of this FindPlacesModel.

        Latitude of the point, always in the format \\<float><N/S>, for example ``23.5S``

        :return: The lat of this FindPlacesModel.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this FindPlacesModel.

        Latitude of the point, always in the format \\<float><N/S>, for example ``23.5S``

        :param lat: The lat of this FindPlacesModel.
        :type lat: str
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this FindPlacesModel.

        Longitude of the point, always in format \\<float><E/W>, for example ``23.5W``

        :return: The lon of this FindPlacesModel.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this FindPlacesModel.

        Longitude of the point, always in format \\<float><E/W>, for example ``23.5W``

        :param lon: The lon of this FindPlacesModel.
        :type lon: str
        """

        self._lon = lon

    @property
    def name(self):
        """Gets the name of this FindPlacesModel.

        name of the place

        :return: The name of this FindPlacesModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FindPlacesModel.

        name of the place

        :param name: The name of this FindPlacesModel.
        :type name: str
        """

        self._name = name

    @property
    def place_id(self):
        """Gets the place_id of this FindPlacesModel.

        unique identifier of the place, which can be used in /point and /map endpoints

        :return: The place_id of this FindPlacesModel.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this FindPlacesModel.

        unique identifier of the place, which can be used in /point and /map endpoints

        :param place_id: The place_id of this FindPlacesModel.
        :type place_id: str
        """

        self._place_id = place_id

    @property
    def timezone(self):
        """Gets the timezone of this FindPlacesModel.

        Timezone of the point in tzinfo format.

        :return: The timezone of this FindPlacesModel.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this FindPlacesModel.

        Timezone of the point in tzinfo format.

        :param timezone: The timezone of this FindPlacesModel.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this FindPlacesModel.

        The character of the place. May be one of the following values:  * administrative areas (states, counties, districts...): ``administrative_area`` * country: ``country`` * a different political entity from a country (for example, a dependent teritory): ``political_entity`` * villages, towns and cities: ``settlement`` * air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal`` * places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,     ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula`` * places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon`` * other places related to nature: ``park``, ``reserve``, ``resort``, ``desert`` * places based on postcodes: ``postcode``         

        :return: The type of this FindPlacesModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FindPlacesModel.

        The character of the place. May be one of the following values:  * administrative areas (states, counties, districts...): ``administrative_area`` * country: ``country`` * a different political entity from a country (for example, a dependent teritory): ``political_entity`` * villages, towns and cities: ``settlement`` * air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal`` * places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,     ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula`` * places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon`` * other places related to nature: ``park``, ``reserve``, ``resort``, ``desert`` * places based on postcodes: ``postcode``         

        :param type: The type of this FindPlacesModel.
        :type type: str
        """

        self._type = type
