# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointPointDailyMoonData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_down: bool=None, always_up: bool=None, phase: file=None, rise: datetime=None, set: datetime=None):
        """PointPointDailyMoonData - a model defined in OpenAPI

        :param always_down: The always_down of this PointPointDailyMoonData.
        :param always_up: The always_up of this PointPointDailyMoonData.
        :param phase: The phase of this PointPointDailyMoonData.
        :param rise: The rise of this PointPointDailyMoonData.
        :param set: The set of this PointPointDailyMoonData.
        """
        self.openapi_types = {
            'always_down': bool,
            'always_up': bool,
            'phase': file,
            'rise': datetime,
            'set': datetime
        }

        self.attribute_map = {
            'always_down': 'always_down',
            'always_up': 'always_up',
            'phase': 'phase',
            'rise': 'rise',
            'set': 'set'
        }

        self._always_down = always_down
        self._always_up = always_up
        self._phase = phase
        self._rise = rise
        self._set = set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyMoonData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyMoonData of this PointPointDailyMoonData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_down(self):
        """Gets the always_down of this PointPointDailyMoonData.

        True if the moon never rises on given day, false otherwise.

        :return: The always_down of this PointPointDailyMoonData.
        :rtype: bool
        """
        return self._always_down

    @always_down.setter
    def always_down(self, always_down):
        """Sets the always_down of this PointPointDailyMoonData.

        True if the moon never rises on given day, false otherwise.

        :param always_down: The always_down of this PointPointDailyMoonData.
        :type always_down: bool
        """

        self._always_down = always_down

    @property
    def always_up(self):
        """Gets the always_up of this PointPointDailyMoonData.

        True if the moon never sets on given day, false otherwise.

        :return: The always_up of this PointPointDailyMoonData.
        :rtype: bool
        """
        return self._always_up

    @always_up.setter
    def always_up(self, always_up):
        """Sets the always_up of this PointPointDailyMoonData.

        True if the moon never sets on given day, false otherwise.

        :param always_up: The always_up of this PointPointDailyMoonData.
        :type always_up: bool
        """

        self._always_up = always_up

    @property
    def phase(self):
        """Gets the phase of this PointPointDailyMoonData.

        Name of the moon phase, one of 'new_moon', 'first_quarter', 'full_moon', 'last_quarter'.

        :return: The phase of this PointPointDailyMoonData.
        :rtype: file
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this PointPointDailyMoonData.

        Name of the moon phase, one of 'new_moon', 'first_quarter', 'full_moon', 'last_quarter'.

        :param phase: The phase of this PointPointDailyMoonData.
        :type phase: file
        """

        self._phase = phase

    @property
    def rise(self):
        """Gets the rise of this PointPointDailyMoonData.

        Datetime of the moonrise or null if the moon does not rise on given day.

        :return: The rise of this PointPointDailyMoonData.
        :rtype: datetime
        """
        return self._rise

    @rise.setter
    def rise(self, rise):
        """Sets the rise of this PointPointDailyMoonData.

        Datetime of the moonrise or null if the moon does not rise on given day.

        :param rise: The rise of this PointPointDailyMoonData.
        :type rise: datetime
        """

        self._rise = rise

    @property
    def set(self):
        """Gets the set of this PointPointDailyMoonData.

        Datetime of the moonset or null if the moon does not set on given day.

        :return: The set of this PointPointDailyMoonData.
        :rtype: datetime
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this PointPointDailyMoonData.

        Datetime of the moonset or null if the moon does not set on given day.

        :param set: The set of this PointPointDailyMoonData.
        :type set: datetime
        """

        self._set = set
