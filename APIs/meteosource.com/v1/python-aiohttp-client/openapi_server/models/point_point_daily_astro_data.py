# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point_point_daily_moon_data import PointPointDailyMoonData
from openapi_server.models.point_point_daily_sun_data import PointPointDailySunData
from openapi_server import util


class PointPointDailyAstroData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, moon: PointPointDailyMoonData=None, sun: PointPointDailySunData=None):
        """PointPointDailyAstroData - a model defined in OpenAPI

        :param moon: The moon of this PointPointDailyAstroData.
        :param sun: The sun of this PointPointDailyAstroData.
        """
        self.openapi_types = {
            'moon': PointPointDailyMoonData,
            'sun': PointPointDailySunData
        }

        self.attribute_map = {
            'moon': 'moon',
            'sun': 'sun'
        }

        self._moon = moon
        self._sun = sun

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyAstroData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyAstroData of this PointPointDailyAstroData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def moon(self):
        """Gets the moon of this PointPointDailyAstroData.


        :return: The moon of this PointPointDailyAstroData.
        :rtype: PointPointDailyMoonData
        """
        return self._moon

    @moon.setter
    def moon(self, moon):
        """Sets the moon of this PointPointDailyAstroData.


        :param moon: The moon of this PointPointDailyAstroData.
        :type moon: PointPointDailyMoonData
        """
        if moon is None:
            raise ValueError("Invalid value for `moon`, must not be `None`")

        self._moon = moon

    @property
    def sun(self):
        """Gets the sun of this PointPointDailyAstroData.


        :return: The sun of this PointPointDailyAstroData.
        :rtype: PointPointDailySunData
        """
        return self._sun

    @sun.setter
    def sun(self, sun):
        """Sets the sun of this PointPointDailyAstroData.


        :param sun: The sun of this PointPointDailyAstroData.
        :type sun: PointPointDailySunData
        """
        if sun is None:
            raise ValueError("Invalid value for `sun`, must not be `None`")

        self._sun = sun
