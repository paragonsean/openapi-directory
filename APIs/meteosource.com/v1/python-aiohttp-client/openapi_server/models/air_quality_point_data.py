# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.air_quality_point_hourly_data import AirQualityPointHourlyData
from openapi_server import util


class AirQualityPointData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[AirQualityPointHourlyData]=None, elevation: int=None, lat: str=None, lon: str=None, timezone: str=None):
        """AirQualityPointData - a model defined in OpenAPI

        :param data: The data of this AirQualityPointData.
        :param elevation: The elevation of this AirQualityPointData.
        :param lat: The lat of this AirQualityPointData.
        :param lon: The lon of this AirQualityPointData.
        :param timezone: The timezone of this AirQualityPointData.
        """
        self.openapi_types = {
            'data': List[AirQualityPointHourlyData],
            'elevation': int,
            'lat': str,
            'lon': str,
            'timezone': str
        }

        self.attribute_map = {
            'data': 'data',
            'elevation': 'elevation',
            'lat': 'lat',
            'lon': 'lon',
            'timezone': 'timezone'
        }

        self._data = data
        self._elevation = elevation
        self._lat = lat
        self._lon = lon
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirQualityPointData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AirQuality_PointData of this AirQualityPointData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AirQualityPointData.


        :return: The data of this AirQualityPointData.
        :rtype: List[AirQualityPointHourlyData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AirQualityPointData.


        :param data: The data of this AirQualityPointData.
        :type data: List[AirQualityPointHourlyData]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def elevation(self):
        """Gets the elevation of this AirQualityPointData.

        Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')

        :return: The elevation of this AirQualityPointData.
        :rtype: int
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this AirQualityPointData.

        Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')

        :param elevation: The elevation of this AirQualityPointData.
        :type elevation: int
        """
        if elevation is None:
            raise ValueError("Invalid value for `elevation`, must not be `None`")

        self._elevation = elevation

    @property
    def lat(self):
        """Gets the lat of this AirQualityPointData.

        Latitude of the point, always in the format <float><N/S>, for example ``23.5S``

        :return: The lat of this AirQualityPointData.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this AirQualityPointData.

        Latitude of the point, always in the format <float><N/S>, for example ``23.5S``

        :param lat: The lat of this AirQualityPointData.
        :type lat: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this AirQualityPointData.

        Longitude of the point, always in the format <float><E/W>, for example ``23.5W``

        :return: The lon of this AirQualityPointData.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this AirQualityPointData.

        Longitude of the point, always in the format <float><E/W>, for example ``23.5W``

        :param lon: The lon of this AirQualityPointData.
        :type lon: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def timezone(self):
        """Gets the timezone of this AirQualityPointData.

        Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.

        :return: The timezone of this AirQualityPointData.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AirQualityPointData.

        Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.

        :param timezone: The timezone of this AirQualityPointData.
        :type timezone: str
        """

        self._timezone = timezone
