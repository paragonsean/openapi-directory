# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point_point_current_precipitation_data import PointPointCurrentPrecipitationData
from openapi_server.models.point_point_current_wind_data import PointPointCurrentWindData
from openapi_server import util


class PointPointCurrentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_cover: float=None, dew_point: float=None, feels_like: float=None, humidity: int=None, icon: str=None, icon_num: int=None, irradiance: float=None, ozone: float=None, precipitation: PointPointCurrentPrecipitationData=None, pressure: float=None, summary: str=None, temperature: float=None, uv_index: float=None, visibility: float=None, wind: PointPointCurrentWindData=None, wind_chill: float=None):
        """PointPointCurrentData - a model defined in OpenAPI

        :param cloud_cover: The cloud_cover of this PointPointCurrentData.
        :param dew_point: The dew_point of this PointPointCurrentData.
        :param feels_like: The feels_like of this PointPointCurrentData.
        :param humidity: The humidity of this PointPointCurrentData.
        :param icon: The icon of this PointPointCurrentData.
        :param icon_num: The icon_num of this PointPointCurrentData.
        :param irradiance: The irradiance of this PointPointCurrentData.
        :param ozone: The ozone of this PointPointCurrentData.
        :param precipitation: The precipitation of this PointPointCurrentData.
        :param pressure: The pressure of this PointPointCurrentData.
        :param summary: The summary of this PointPointCurrentData.
        :param temperature: The temperature of this PointPointCurrentData.
        :param uv_index: The uv_index of this PointPointCurrentData.
        :param visibility: The visibility of this PointPointCurrentData.
        :param wind: The wind of this PointPointCurrentData.
        :param wind_chill: The wind_chill of this PointPointCurrentData.
        """
        self.openapi_types = {
            'cloud_cover': float,
            'dew_point': float,
            'feels_like': float,
            'humidity': int,
            'icon': str,
            'icon_num': int,
            'irradiance': float,
            'ozone': float,
            'precipitation': PointPointCurrentPrecipitationData,
            'pressure': float,
            'summary': str,
            'temperature': float,
            'uv_index': float,
            'visibility': float,
            'wind': PointPointCurrentWindData,
            'wind_chill': float
        }

        self.attribute_map = {
            'cloud_cover': 'cloud_cover',
            'dew_point': 'dew_point',
            'feels_like': 'feels_like',
            'humidity': 'humidity',
            'icon': 'icon',
            'icon_num': 'icon_num',
            'irradiance': 'irradiance',
            'ozone': 'ozone',
            'precipitation': 'precipitation',
            'pressure': 'pressure',
            'summary': 'summary',
            'temperature': 'temperature',
            'uv_index': 'uv_index',
            'visibility': 'visibility',
            'wind': 'wind',
            'wind_chill': 'wind_chill'
        }

        self._cloud_cover = cloud_cover
        self._dew_point = dew_point
        self._feels_like = feels_like
        self._humidity = humidity
        self._icon = icon
        self._icon_num = icon_num
        self._irradiance = irradiance
        self._ozone = ozone
        self._precipitation = precipitation
        self._pressure = pressure
        self._summary = summary
        self._temperature = temperature
        self._uv_index = uv_index
        self._visibility = visibility
        self._wind = wind
        self._wind_chill = wind_chill

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointCurrentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointCurrentData of this PointPointCurrentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_cover(self):
        """Gets the cloud_cover of this PointPointCurrentData.

        Percentage of sky covered by clouds. Unit: \\%

        :return: The cloud_cover of this PointPointCurrentData.
        :rtype: float
        """
        return self._cloud_cover

    @cloud_cover.setter
    def cloud_cover(self, cloud_cover):
        """Sets the cloud_cover of this PointPointCurrentData.

        Percentage of sky covered by clouds. Unit: \\%

        :param cloud_cover: The cloud_cover of this PointPointCurrentData.
        :type cloud_cover: float
        """

        self._cloud_cover = cloud_cover

    @property
    def dew_point(self):
        """Gets the dew_point of this PointPointCurrentData.

        Current dew point temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The dew_point of this PointPointCurrentData.
        :rtype: float
        """
        return self._dew_point

    @dew_point.setter
    def dew_point(self, dew_point):
        """Sets the dew_point of this PointPointCurrentData.

        Current dew point temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param dew_point: The dew_point of this PointPointCurrentData.
        :type dew_point: float
        """

        self._dew_point = dew_point

    @property
    def feels_like(self):
        """Gets the feels_like of this PointPointCurrentData.

        Feels like temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The feels_like of this PointPointCurrentData.
        :rtype: float
        """
        return self._feels_like

    @feels_like.setter
    def feels_like(self, feels_like):
        """Sets the feels_like of this PointPointCurrentData.

        Feels like temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param feels_like: The feels_like of this PointPointCurrentData.
        :type feels_like: float
        """

        self._feels_like = feels_like

    @property
    def humidity(self):
        """Gets the humidity of this PointPointCurrentData.

        Relative humidity. Unit: \\%

        :return: The humidity of this PointPointCurrentData.
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this PointPointCurrentData.

        Relative humidity. Unit: \\%

        :param humidity: The humidity of this PointPointCurrentData.
        :type humidity: int
        """

        self._humidity = humidity

    @property
    def icon(self):
        """Gets the icon of this PointPointCurrentData.

        String identifier of current weather icon, e.g. `light_rain`.

        :return: The icon of this PointPointCurrentData.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this PointPointCurrentData.

        String identifier of current weather icon, e.g. `light_rain`.

        :param icon: The icon of this PointPointCurrentData.
        :type icon: str
        """

        self._icon = icon

    @property
    def icon_num(self):
        """Gets the icon_num of this PointPointCurrentData.

        Numeric identifier of current weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: weather_ico0_36

        :return: The icon_num of this PointPointCurrentData.
        :rtype: int
        """
        return self._icon_num

    @icon_num.setter
    def icon_num(self, icon_num):
        """Sets the icon_num of this PointPointCurrentData.

        Numeric identifier of current weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: weather_ico0_36

        :param icon_num: The icon_num of this PointPointCurrentData.
        :type icon_num: int
        """

        self._icon_num = icon_num

    @property
    def irradiance(self):
        """Gets the irradiance of this PointPointCurrentData.

        Global downward short-wave radiation flux. Unit: W/m2

        :return: The irradiance of this PointPointCurrentData.
        :rtype: float
        """
        return self._irradiance

    @irradiance.setter
    def irradiance(self, irradiance):
        """Sets the irradiance of this PointPointCurrentData.

        Global downward short-wave radiation flux. Unit: W/m2

        :param irradiance: The irradiance of this PointPointCurrentData.
        :type irradiance: float
        """

        self._irradiance = irradiance

    @property
    def ozone(self):
        """Gets the ozone of this PointPointCurrentData.

        Total column of ozone. Unit: Dobson

        :return: The ozone of this PointPointCurrentData.
        :rtype: float
        """
        return self._ozone

    @ozone.setter
    def ozone(self, ozone):
        """Sets the ozone of this PointPointCurrentData.

        Total column of ozone. Unit: Dobson

        :param ozone: The ozone of this PointPointCurrentData.
        :type ozone: float
        """

        self._ozone = ozone

    @property
    def precipitation(self):
        """Gets the precipitation of this PointPointCurrentData.


        :return: The precipitation of this PointPointCurrentData.
        :rtype: PointPointCurrentPrecipitationData
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this PointPointCurrentData.


        :param precipitation: The precipitation of this PointPointCurrentData.
        :type precipitation: PointPointCurrentPrecipitationData
        """
        if precipitation is None:
            raise ValueError("Invalid value for `precipitation`, must not be `None`")

        self._precipitation = precipitation

    @property
    def pressure(self):
        """Gets the pressure of this PointPointCurrentData.

        Atmospheric pressure at mean sea level. Units: metric = hPa, us = Hg, uk = hPa, ca = kPa

        :return: The pressure of this PointPointCurrentData.
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this PointPointCurrentData.

        Atmospheric pressure at mean sea level. Units: metric = hPa, us = Hg, uk = hPa, ca = kPa

        :param pressure: The pressure of this PointPointCurrentData.
        :type pressure: float
        """

        self._pressure = pressure

    @property
    def summary(self):
        """Gets the summary of this PointPointCurrentData.

        Short text summary of current weather, e.g. `Light rain`.

        :return: The summary of this PointPointCurrentData.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this PointPointCurrentData.

        Short text summary of current weather, e.g. `Light rain`.

        :param summary: The summary of this PointPointCurrentData.
        :type summary: str
        """

        self._summary = summary

    @property
    def temperature(self):
        """Gets the temperature of this PointPointCurrentData.

        Current temperature 2 metres above ground. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The temperature of this PointPointCurrentData.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this PointPointCurrentData.

        Current temperature 2 metres above ground. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param temperature: The temperature of this PointPointCurrentData.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def uv_index(self):
        """Gets the uv_index of this PointPointCurrentData.

        UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm). Unit: uv_index

        :return: The uv_index of this PointPointCurrentData.
        :rtype: float
        """
        return self._uv_index

    @uv_index.setter
    def uv_index(self, uv_index):
        """Sets the uv_index of this PointPointCurrentData.

        UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm). Unit: uv_index

        :param uv_index: The uv_index of this PointPointCurrentData.
        :type uv_index: float
        """

        self._uv_index = uv_index

    @property
    def visibility(self):
        """Gets the visibility of this PointPointCurrentData.

        Visibility. Units: metric = km, us = mi, uk = mi, ca = km

        :return: The visibility of this PointPointCurrentData.
        :rtype: float
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this PointPointCurrentData.

        Visibility. Units: metric = km, us = mi, uk = mi, ca = km

        :param visibility: The visibility of this PointPointCurrentData.
        :type visibility: float
        """

        self._visibility = visibility

    @property
    def wind(self):
        """Gets the wind of this PointPointCurrentData.


        :return: The wind of this PointPointCurrentData.
        :rtype: PointPointCurrentWindData
        """
        return self._wind

    @wind.setter
    def wind(self, wind):
        """Sets the wind of this PointPointCurrentData.


        :param wind: The wind of this PointPointCurrentData.
        :type wind: PointPointCurrentWindData
        """
        if wind is None:
            raise ValueError("Invalid value for `wind`, must not be `None`")

        self._wind = wind

    @property
    def wind_chill(self):
        """Gets the wind_chill of this PointPointCurrentData.

        Windchill temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The wind_chill of this PointPointCurrentData.
        :rtype: float
        """
        return self._wind_chill

    @wind_chill.setter
    def wind_chill(self, wind_chill):
        """Sets the wind_chill of this PointPointCurrentData.

        Windchill temperature. Units: metric = °C, us = °F, uk = °C, ca = °C

        :param wind_chill: The wind_chill of this PointPointCurrentData.
        :type wind_chill: float
        """

        self._wind_chill = wind_chill
