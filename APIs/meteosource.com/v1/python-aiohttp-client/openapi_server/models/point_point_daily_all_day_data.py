# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point_point_daily_all_day_cloud_cover_data import PointPointDailyAllDayCloudCoverData
from openapi_server.models.point_point_daily_all_day_precipitation_data import PointPointDailyAllDayPrecipitationData
from openapi_server.models.point_point_daily_all_day_prob_data import PointPointDailyAllDayProbData
from openapi_server.models.point_point_daily_all_day_wind_data import PointPointDailyAllDayWindData
from openapi_server import util


class PointPointDailyAllDayData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_cover: PointPointDailyAllDayCloudCoverData=None, dew_point: float=None, dew_point_max: float=None, dew_point_min: float=None, feels_like: float=None, feels_like_max: float=None, feels_like_min: float=None, humidity: int=None, icon: int=None, ozone: float=None, precipitation: PointPointDailyAllDayPrecipitationData=None, pressure: float=None, probability: PointPointDailyAllDayProbData=None, snow_depth: float=None, soil_temperature: float=None, soil_temperature_max: float=None, soil_temperature_min: float=None, surface_temperature: float=None, surface_temperature_max: float=None, surface_temperature_min: float=None, temperature: float=None, temperature_max: float=None, temperature_min: float=None, visibility: float=None, weather: str=None, wind: PointPointDailyAllDayWindData=None, wind_chill: float=None, wind_chill_max: float=None, wind_chill_min: float=None):
        """PointPointDailyAllDayData - a model defined in OpenAPI

        :param cloud_cover: The cloud_cover of this PointPointDailyAllDayData.
        :param dew_point: The dew_point of this PointPointDailyAllDayData.
        :param dew_point_max: The dew_point_max of this PointPointDailyAllDayData.
        :param dew_point_min: The dew_point_min of this PointPointDailyAllDayData.
        :param feels_like: The feels_like of this PointPointDailyAllDayData.
        :param feels_like_max: The feels_like_max of this PointPointDailyAllDayData.
        :param feels_like_min: The feels_like_min of this PointPointDailyAllDayData.
        :param humidity: The humidity of this PointPointDailyAllDayData.
        :param icon: The icon of this PointPointDailyAllDayData.
        :param ozone: The ozone of this PointPointDailyAllDayData.
        :param precipitation: The precipitation of this PointPointDailyAllDayData.
        :param pressure: The pressure of this PointPointDailyAllDayData.
        :param probability: The probability of this PointPointDailyAllDayData.
        :param snow_depth: The snow_depth of this PointPointDailyAllDayData.
        :param soil_temperature: The soil_temperature of this PointPointDailyAllDayData.
        :param soil_temperature_max: The soil_temperature_max of this PointPointDailyAllDayData.
        :param soil_temperature_min: The soil_temperature_min of this PointPointDailyAllDayData.
        :param surface_temperature: The surface_temperature of this PointPointDailyAllDayData.
        :param surface_temperature_max: The surface_temperature_max of this PointPointDailyAllDayData.
        :param surface_temperature_min: The surface_temperature_min of this PointPointDailyAllDayData.
        :param temperature: The temperature of this PointPointDailyAllDayData.
        :param temperature_max: The temperature_max of this PointPointDailyAllDayData.
        :param temperature_min: The temperature_min of this PointPointDailyAllDayData.
        :param visibility: The visibility of this PointPointDailyAllDayData.
        :param weather: The weather of this PointPointDailyAllDayData.
        :param wind: The wind of this PointPointDailyAllDayData.
        :param wind_chill: The wind_chill of this PointPointDailyAllDayData.
        :param wind_chill_max: The wind_chill_max of this PointPointDailyAllDayData.
        :param wind_chill_min: The wind_chill_min of this PointPointDailyAllDayData.
        """
        self.openapi_types = {
            'cloud_cover': PointPointDailyAllDayCloudCoverData,
            'dew_point': float,
            'dew_point_max': float,
            'dew_point_min': float,
            'feels_like': float,
            'feels_like_max': float,
            'feels_like_min': float,
            'humidity': int,
            'icon': int,
            'ozone': float,
            'precipitation': PointPointDailyAllDayPrecipitationData,
            'pressure': float,
            'probability': PointPointDailyAllDayProbData,
            'snow_depth': float,
            'soil_temperature': float,
            'soil_temperature_max': float,
            'soil_temperature_min': float,
            'surface_temperature': float,
            'surface_temperature_max': float,
            'surface_temperature_min': float,
            'temperature': float,
            'temperature_max': float,
            'temperature_min': float,
            'visibility': float,
            'weather': str,
            'wind': PointPointDailyAllDayWindData,
            'wind_chill': float,
            'wind_chill_max': float,
            'wind_chill_min': float
        }

        self.attribute_map = {
            'cloud_cover': 'cloud_cover',
            'dew_point': 'dew_point',
            'dew_point_max': 'dew_point_max',
            'dew_point_min': 'dew_point_min',
            'feels_like': 'feels_like',
            'feels_like_max': 'feels_like_max',
            'feels_like_min': 'feels_like_min',
            'humidity': 'humidity',
            'icon': 'icon',
            'ozone': 'ozone',
            'precipitation': 'precipitation',
            'pressure': 'pressure',
            'probability': 'probability',
            'snow_depth': 'snow_depth',
            'soil_temperature': 'soil_temperature',
            'soil_temperature_max': 'soil_temperature_max',
            'soil_temperature_min': 'soil_temperature_min',
            'surface_temperature': 'surface_temperature',
            'surface_temperature_max': 'surface_temperature_max',
            'surface_temperature_min': 'surface_temperature_min',
            'temperature': 'temperature',
            'temperature_max': 'temperature_max',
            'temperature_min': 'temperature_min',
            'visibility': 'visibility',
            'weather': 'weather',
            'wind': 'wind',
            'wind_chill': 'wind_chill',
            'wind_chill_max': 'wind_chill_max',
            'wind_chill_min': 'wind_chill_min'
        }

        self._cloud_cover = cloud_cover
        self._dew_point = dew_point
        self._dew_point_max = dew_point_max
        self._dew_point_min = dew_point_min
        self._feels_like = feels_like
        self._feels_like_max = feels_like_max
        self._feels_like_min = feels_like_min
        self._humidity = humidity
        self._icon = icon
        self._ozone = ozone
        self._precipitation = precipitation
        self._pressure = pressure
        self._probability = probability
        self._snow_depth = snow_depth
        self._soil_temperature = soil_temperature
        self._soil_temperature_max = soil_temperature_max
        self._soil_temperature_min = soil_temperature_min
        self._surface_temperature = surface_temperature
        self._surface_temperature_max = surface_temperature_max
        self._surface_temperature_min = surface_temperature_min
        self._temperature = temperature
        self._temperature_max = temperature_max
        self._temperature_min = temperature_min
        self._visibility = visibility
        self._weather = weather
        self._wind = wind
        self._wind_chill = wind_chill
        self._wind_chill_max = wind_chill_max
        self._wind_chill_min = wind_chill_min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyAllDayData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyAllDayData of this PointPointDailyAllDayData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_cover(self):
        """Gets the cloud_cover of this PointPointDailyAllDayData.


        :return: The cloud_cover of this PointPointDailyAllDayData.
        :rtype: PointPointDailyAllDayCloudCoverData
        """
        return self._cloud_cover

    @cloud_cover.setter
    def cloud_cover(self, cloud_cover):
        """Sets the cloud_cover of this PointPointDailyAllDayData.


        :param cloud_cover: The cloud_cover of this PointPointDailyAllDayData.
        :type cloud_cover: PointPointDailyAllDayCloudCoverData
        """
        if cloud_cover is None:
            raise ValueError("Invalid value for `cloud_cover`, must not be `None`")

        self._cloud_cover = cloud_cover

    @property
    def dew_point(self):
        """Gets the dew_point of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The dew_point of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._dew_point

    @dew_point.setter
    def dew_point(self, dew_point):
        """Sets the dew_point of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param dew_point: The dew_point of this PointPointDailyAllDayData.
        :type dew_point: float
        """

        self._dew_point = dew_point

    @property
    def dew_point_max(self):
        """Gets the dew_point_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The dew_point_max of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._dew_point_max

    @dew_point_max.setter
    def dew_point_max(self, dew_point_max):
        """Sets the dew_point_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param dew_point_max: The dew_point_max of this PointPointDailyAllDayData.
        :type dew_point_max: float
        """

        self._dew_point_max = dew_point_max

    @property
    def dew_point_min(self):
        """Gets the dew_point_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The dew_point_min of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._dew_point_min

    @dew_point_min.setter
    def dew_point_min(self, dew_point_min):
        """Sets the dew_point_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param dew_point_min: The dew_point_min of this PointPointDailyAllDayData.
        :type dew_point_min: float
        """

        self._dew_point_min = dew_point_min

    @property
    def feels_like(self):
        """Gets the feels_like of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The feels_like of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._feels_like

    @feels_like.setter
    def feels_like(self, feels_like):
        """Sets the feels_like of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param feels_like: The feels_like of this PointPointDailyAllDayData.
        :type feels_like: float
        """

        self._feels_like = feels_like

    @property
    def feels_like_max(self):
        """Gets the feels_like_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The feels_like_max of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._feels_like_max

    @feels_like_max.setter
    def feels_like_max(self, feels_like_max):
        """Sets the feels_like_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param feels_like_max: The feels_like_max of this PointPointDailyAllDayData.
        :type feels_like_max: float
        """

        self._feels_like_max = feels_like_max

    @property
    def feels_like_min(self):
        """Gets the feels_like_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The feels_like_min of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._feels_like_min

    @feels_like_min.setter
    def feels_like_min(self, feels_like_min):
        """Sets the feels_like_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param feels_like_min: The feels_like_min of this PointPointDailyAllDayData.
        :type feels_like_min: float
        """

        self._feels_like_min = feels_like_min

    @property
    def humidity(self):
        """Gets the humidity of this PointPointDailyAllDayData.

        Relative humidity. (allday avg) Unit: \\%

        :return: The humidity of this PointPointDailyAllDayData.
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this PointPointDailyAllDayData.

        Relative humidity. (allday avg) Unit: \\%

        :param humidity: The humidity of this PointPointDailyAllDayData.
        :type humidity: int
        """

        self._humidity = humidity

    @property
    def icon(self):
        """Gets the icon of this PointPointDailyAllDayData.

        Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: icon

        :return: The icon of this PointPointDailyAllDayData.
        :rtype: int
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this PointPointDailyAllDayData.

        Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: icon

        :param icon: The icon of this PointPointDailyAllDayData.
        :type icon: int
        """

        self._icon = icon

    @property
    def ozone(self):
        """Gets the ozone of this PointPointDailyAllDayData.

        Total column of ozone. (allday avg) Unit: Dobson

        :return: The ozone of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._ozone

    @ozone.setter
    def ozone(self, ozone):
        """Sets the ozone of this PointPointDailyAllDayData.

        Total column of ozone. (allday avg) Unit: Dobson

        :param ozone: The ozone of this PointPointDailyAllDayData.
        :type ozone: float
        """

        self._ozone = ozone

    @property
    def precipitation(self):
        """Gets the precipitation of this PointPointDailyAllDayData.


        :return: The precipitation of this PointPointDailyAllDayData.
        :rtype: PointPointDailyAllDayPrecipitationData
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this PointPointDailyAllDayData.


        :param precipitation: The precipitation of this PointPointDailyAllDayData.
        :type precipitation: PointPointDailyAllDayPrecipitationData
        """
        if precipitation is None:
            raise ValueError("Invalid value for `precipitation`, must not be `None`")

        self._precipitation = precipitation

    @property
    def pressure(self):
        """Gets the pressure of this PointPointDailyAllDayData.

        Atmospheric pressure at mean sea level. (allday avg) Units: metric = hPa, us = Hg, uk = hPa, ca = kPa

        :return: The pressure of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this PointPointDailyAllDayData.

        Atmospheric pressure at mean sea level. (allday avg) Units: metric = hPa, us = Hg, uk = hPa, ca = kPa

        :param pressure: The pressure of this PointPointDailyAllDayData.
        :type pressure: float
        """

        self._pressure = pressure

    @property
    def probability(self):
        """Gets the probability of this PointPointDailyAllDayData.


        :return: The probability of this PointPointDailyAllDayData.
        :rtype: PointPointDailyAllDayProbData
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this PointPointDailyAllDayData.


        :param probability: The probability of this PointPointDailyAllDayData.
        :type probability: PointPointDailyAllDayProbData
        """
        if probability is None:
            raise ValueError("Invalid value for `probability`, must not be `None`")

        self._probability = probability

    @property
    def snow_depth(self):
        """Gets the snow_depth of this PointPointDailyAllDayData.

        Snow depth. (allday avg) Units: metric = cm, us = inch, uk = cm, ca = cm

        :return: The snow_depth of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._snow_depth

    @snow_depth.setter
    def snow_depth(self, snow_depth):
        """Sets the snow_depth of this PointPointDailyAllDayData.

        Snow depth. (allday avg) Units: metric = cm, us = inch, uk = cm, ca = cm

        :param snow_depth: The snow_depth of this PointPointDailyAllDayData.
        :type snow_depth: float
        """

        self._snow_depth = snow_depth

    @property
    def soil_temperature(self):
        """Gets the soil_temperature of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The soil_temperature of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._soil_temperature

    @soil_temperature.setter
    def soil_temperature(self, soil_temperature):
        """Sets the soil_temperature of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param soil_temperature: The soil_temperature of this PointPointDailyAllDayData.
        :type soil_temperature: float
        """

        self._soil_temperature = soil_temperature

    @property
    def soil_temperature_max(self):
        """Gets the soil_temperature_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The soil_temperature_max of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._soil_temperature_max

    @soil_temperature_max.setter
    def soil_temperature_max(self, soil_temperature_max):
        """Sets the soil_temperature_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param soil_temperature_max: The soil_temperature_max of this PointPointDailyAllDayData.
        :type soil_temperature_max: float
        """

        self._soil_temperature_max = soil_temperature_max

    @property
    def soil_temperature_min(self):
        """Gets the soil_temperature_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The soil_temperature_min of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._soil_temperature_min

    @soil_temperature_min.setter
    def soil_temperature_min(self, soil_temperature_min):
        """Sets the soil_temperature_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param soil_temperature_min: The soil_temperature_min of this PointPointDailyAllDayData.
        :type soil_temperature_min: float
        """

        self._soil_temperature_min = soil_temperature_min

    @property
    def surface_temperature(self):
        """Gets the surface_temperature of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The surface_temperature of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._surface_temperature

    @surface_temperature.setter
    def surface_temperature(self, surface_temperature):
        """Sets the surface_temperature of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param surface_temperature: The surface_temperature of this PointPointDailyAllDayData.
        :type surface_temperature: float
        """

        self._surface_temperature = surface_temperature

    @property
    def surface_temperature_max(self):
        """Gets the surface_temperature_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The surface_temperature_max of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._surface_temperature_max

    @surface_temperature_max.setter
    def surface_temperature_max(self, surface_temperature_max):
        """Sets the surface_temperature_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param surface_temperature_max: The surface_temperature_max of this PointPointDailyAllDayData.
        :type surface_temperature_max: float
        """

        self._surface_temperature_max = surface_temperature_max

    @property
    def surface_temperature_min(self):
        """Gets the surface_temperature_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The surface_temperature_min of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._surface_temperature_min

    @surface_temperature_min.setter
    def surface_temperature_min(self, surface_temperature_min):
        """Sets the surface_temperature_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param surface_temperature_min: The surface_temperature_min of this PointPointDailyAllDayData.
        :type surface_temperature_min: float
        """

        self._surface_temperature_min = surface_temperature_min

    @property
    def temperature(self):
        """Gets the temperature of this PointPointDailyAllDayData.

        Temperature 2 metres above ground. (allday avg) Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The temperature of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this PointPointDailyAllDayData.

        Temperature 2 metres above ground. (allday avg) Units: metric = °C, us = °F, uk = °C, ca = °C

        :param temperature: The temperature of this PointPointDailyAllDayData.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def temperature_max(self):
        """Gets the temperature_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The temperature_max of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._temperature_max

    @temperature_max.setter
    def temperature_max(self, temperature_max):
        """Sets the temperature_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param temperature_max: The temperature_max of this PointPointDailyAllDayData.
        :type temperature_max: float
        """

        self._temperature_max = temperature_max

    @property
    def temperature_min(self):
        """Gets the temperature_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The temperature_min of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._temperature_min

    @temperature_min.setter
    def temperature_min(self, temperature_min):
        """Sets the temperature_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param temperature_min: The temperature_min of this PointPointDailyAllDayData.
        :type temperature_min: float
        """

        self._temperature_min = temperature_min

    @property
    def visibility(self):
        """Gets the visibility of this PointPointDailyAllDayData.

        Visibility. (allday avg) Units: metric = km, us = mi, uk = mi, ca = km

        :return: The visibility of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this PointPointDailyAllDayData.

        Visibility. (allday avg) Units: metric = km, us = mi, uk = mi, ca = km

        :param visibility: The visibility of this PointPointDailyAllDayData.
        :type visibility: float
        """

        self._visibility = visibility

    @property
    def weather(self):
        """Gets the weather of this PointPointDailyAllDayData.

        All day string identifier of the weather icon, e.g. `light_rain`.

        :return: The weather of this PointPointDailyAllDayData.
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this PointPointDailyAllDayData.

        All day string identifier of the weather icon, e.g. `light_rain`.

        :param weather: The weather of this PointPointDailyAllDayData.
        :type weather: str
        """

        self._weather = weather

    @property
    def wind(self):
        """Gets the wind of this PointPointDailyAllDayData.


        :return: The wind of this PointPointDailyAllDayData.
        :rtype: PointPointDailyAllDayWindData
        """
        return self._wind

    @wind.setter
    def wind(self, wind):
        """Sets the wind of this PointPointDailyAllDayData.


        :param wind: The wind of this PointPointDailyAllDayData.
        :type wind: PointPointDailyAllDayWindData
        """
        if wind is None:
            raise ValueError("Invalid value for `wind`, must not be `None`")

        self._wind = wind

    @property
    def wind_chill(self):
        """Gets the wind_chill of this PointPointDailyAllDayData.

        Temperature 2 metres above ground. (allday avg) Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The wind_chill of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._wind_chill

    @wind_chill.setter
    def wind_chill(self, wind_chill):
        """Sets the wind_chill of this PointPointDailyAllDayData.

        Temperature 2 metres above ground. (allday avg) Units: metric = °C, us = °F, uk = °C, ca = °C

        :param wind_chill: The wind_chill of this PointPointDailyAllDayData.
        :type wind_chill: float
        """

        self._wind_chill = wind_chill

    @property
    def wind_chill_max(self):
        """Gets the wind_chill_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The wind_chill_max of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._wind_chill_max

    @wind_chill_max.setter
    def wind_chill_max(self, wind_chill_max):
        """Sets the wind_chill_max of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param wind_chill_max: The wind_chill_max of this PointPointDailyAllDayData.
        :type wind_chill_max: float
        """

        self._wind_chill_max = wind_chill_max

    @property
    def wind_chill_min(self):
        """Gets the wind_chill_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :return: The wind_chill_min of this PointPointDailyAllDayData.
        :rtype: float
        """
        return self._wind_chill_min

    @wind_chill_min.setter
    def wind_chill_min(self, wind_chill_min):
        """Sets the wind_chill_min of this PointPointDailyAllDayData.

        Units: metric = °C, us = °F, uk = °C, ca = °C

        :param wind_chill_min: The wind_chill_min of this PointPointDailyAllDayData.
        :type wind_chill_min: float
        """

        self._wind_chill_min = wind_chill_min
