# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point_point_daily_stats_precipitation_data import PointPointDailyStatsPrecipitationData
from openapi_server.models.point_point_daily_stats_temperature_data import PointPointDailyStatsTemperatureData
from openapi_server.models.point_point_daily_stats_wind_data import PointPointDailyStatsWindData
from openapi_server import util


class PointPointDailyStatsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, precipitation: PointPointDailyStatsPrecipitationData=None, temperature: PointPointDailyStatsTemperatureData=None, wind: PointPointDailyStatsWindData=None):
        """PointPointDailyStatsData - a model defined in OpenAPI

        :param precipitation: The precipitation of this PointPointDailyStatsData.
        :param temperature: The temperature of this PointPointDailyStatsData.
        :param wind: The wind of this PointPointDailyStatsData.
        """
        self.openapi_types = {
            'precipitation': PointPointDailyStatsPrecipitationData,
            'temperature': PointPointDailyStatsTemperatureData,
            'wind': PointPointDailyStatsWindData
        }

        self.attribute_map = {
            'precipitation': 'precipitation',
            'temperature': 'temperature',
            'wind': 'wind'
        }

        self._precipitation = precipitation
        self._temperature = temperature
        self._wind = wind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyStatsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyStatsData of this PointPointDailyStatsData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def precipitation(self):
        """Gets the precipitation of this PointPointDailyStatsData.


        :return: The precipitation of this PointPointDailyStatsData.
        :rtype: PointPointDailyStatsPrecipitationData
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this PointPointDailyStatsData.


        :param precipitation: The precipitation of this PointPointDailyStatsData.
        :type precipitation: PointPointDailyStatsPrecipitationData
        """
        if precipitation is None:
            raise ValueError("Invalid value for `precipitation`, must not be `None`")

        self._precipitation = precipitation

    @property
    def temperature(self):
        """Gets the temperature of this PointPointDailyStatsData.


        :return: The temperature of this PointPointDailyStatsData.
        :rtype: PointPointDailyStatsTemperatureData
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this PointPointDailyStatsData.


        :param temperature: The temperature of this PointPointDailyStatsData.
        :type temperature: PointPointDailyStatsTemperatureData
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")

        self._temperature = temperature

    @property
    def wind(self):
        """Gets the wind of this PointPointDailyStatsData.


        :return: The wind of this PointPointDailyStatsData.
        :rtype: PointPointDailyStatsWindData
        """
        return self._wind

    @wind.setter
    def wind(self, wind):
        """Sets the wind of this PointPointDailyStatsData.


        :param wind: The wind of this PointPointDailyStatsData.
        :type wind: PointPointDailyStatsWindData
        """
        if wind is None:
            raise ValueError("Invalid value for `wind`, must not be `None`")

        self._wind = wind
