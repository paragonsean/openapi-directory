# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point_point_alerts import PointPointAlerts
from openapi_server.models.point_point_current_data import PointPointCurrentData
from openapi_server.models.point_point_daily import PointPointDaily
from openapi_server.models.point_point_hourly import PointPointHourly
from openapi_server.models.point_point_minutely import PointPointMinutely
from openapi_server import util


class PointPointData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: PointPointAlerts=None, current: PointPointCurrentData=None, daily: PointPointDaily=None, elevation: int=None, hourly: PointPointHourly=None, lat: str=None, lon: str=None, minutely: PointPointMinutely=None, timezone: str=None, units: str=None):
        """PointPointData - a model defined in OpenAPI

        :param alerts: The alerts of this PointPointData.
        :param current: The current of this PointPointData.
        :param daily: The daily of this PointPointData.
        :param elevation: The elevation of this PointPointData.
        :param hourly: The hourly of this PointPointData.
        :param lat: The lat of this PointPointData.
        :param lon: The lon of this PointPointData.
        :param minutely: The minutely of this PointPointData.
        :param timezone: The timezone of this PointPointData.
        :param units: The units of this PointPointData.
        """
        self.openapi_types = {
            'alerts': PointPointAlerts,
            'current': PointPointCurrentData,
            'daily': PointPointDaily,
            'elevation': int,
            'hourly': PointPointHourly,
            'lat': str,
            'lon': str,
            'minutely': PointPointMinutely,
            'timezone': str,
            'units': str
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'current': 'current',
            'daily': 'daily',
            'elevation': 'elevation',
            'hourly': 'hourly',
            'lat': 'lat',
            'lon': 'lon',
            'minutely': 'minutely',
            'timezone': 'timezone',
            'units': 'units'
        }

        self._alerts = alerts
        self._current = current
        self._daily = daily
        self._elevation = elevation
        self._hourly = hourly
        self._lat = lat
        self._lon = lon
        self._minutely = minutely
        self._timezone = timezone
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointData of this PointPointData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this PointPointData.


        :return: The alerts of this PointPointData.
        :rtype: PointPointAlerts
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this PointPointData.


        :param alerts: The alerts of this PointPointData.
        :type alerts: PointPointAlerts
        """
        if alerts is None:
            raise ValueError("Invalid value for `alerts`, must not be `None`")

        self._alerts = alerts

    @property
    def current(self):
        """Gets the current of this PointPointData.


        :return: The current of this PointPointData.
        :rtype: PointPointCurrentData
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this PointPointData.


        :param current: The current of this PointPointData.
        :type current: PointPointCurrentData
        """

        self._current = current

    @property
    def daily(self):
        """Gets the daily of this PointPointData.


        :return: The daily of this PointPointData.
        :rtype: PointPointDaily
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this PointPointData.


        :param daily: The daily of this PointPointData.
        :type daily: PointPointDaily
        """

        self._daily = daily

    @property
    def elevation(self):
        """Gets the elevation of this PointPointData.

        Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')

        :return: The elevation of this PointPointData.
        :rtype: int
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this PointPointData.

        Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')

        :param elevation: The elevation of this PointPointData.
        :type elevation: int
        """
        if elevation is None:
            raise ValueError("Invalid value for `elevation`, must not be `None`")

        self._elevation = elevation

    @property
    def hourly(self):
        """Gets the hourly of this PointPointData.


        :return: The hourly of this PointPointData.
        :rtype: PointPointHourly
        """
        return self._hourly

    @hourly.setter
    def hourly(self, hourly):
        """Sets the hourly of this PointPointData.


        :param hourly: The hourly of this PointPointData.
        :type hourly: PointPointHourly
        """

        self._hourly = hourly

    @property
    def lat(self):
        """Gets the lat of this PointPointData.

        Latitude of the point, always in the format <float><N/S>, for example ``23.5S``

        :return: The lat of this PointPointData.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this PointPointData.

        Latitude of the point, always in the format <float><N/S>, for example ``23.5S``

        :param lat: The lat of this PointPointData.
        :type lat: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this PointPointData.

        Longitude of the point, always in the format <float><E/W>, for example ``23.5W``

        :return: The lon of this PointPointData.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this PointPointData.

        Longitude of the point, always in the format <float><E/W>, for example ``23.5W``

        :param lon: The lon of this PointPointData.
        :type lon: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def minutely(self):
        """Gets the minutely of this PointPointData.


        :return: The minutely of this PointPointData.
        :rtype: PointPointMinutely
        """
        return self._minutely

    @minutely.setter
    def minutely(self, minutely):
        """Sets the minutely of this PointPointData.


        :param minutely: The minutely of this PointPointData.
        :type minutely: PointPointMinutely
        """

        self._minutely = minutely

    @property
    def timezone(self):
        """Gets the timezone of this PointPointData.

        Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.

        :return: The timezone of this PointPointData.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this PointPointData.

        Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.

        :param timezone: The timezone of this PointPointData.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def units(self):
        """Gets the units of this PointPointData.

        Unit system (metric, uk, ca or us)

        :return: The units of this PointPointData.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PointPointData.

        Unit system (metric, uk, ca or us)

        :param units: The units of this PointPointData.
        :type units: str
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units
