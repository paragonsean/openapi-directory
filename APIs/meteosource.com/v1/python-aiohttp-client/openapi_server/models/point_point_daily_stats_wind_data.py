# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointPointDailyStatsWindData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_angle: float=None, avg_dir: file=None, avg_speed: float=None, max_gust: float=None, max_speed: float=None):
        """PointPointDailyStatsWindData - a model defined in OpenAPI

        :param avg_angle: The avg_angle of this PointPointDailyStatsWindData.
        :param avg_dir: The avg_dir of this PointPointDailyStatsWindData.
        :param avg_speed: The avg_speed of this PointPointDailyStatsWindData.
        :param max_gust: The max_gust of this PointPointDailyStatsWindData.
        :param max_speed: The max_speed of this PointPointDailyStatsWindData.
        """
        self.openapi_types = {
            'avg_angle': float,
            'avg_dir': file,
            'avg_speed': float,
            'max_gust': float,
            'max_speed': float
        }

        self.attribute_map = {
            'avg_angle': 'avg_angle',
            'avg_dir': 'avg_dir',
            'avg_speed': 'avg_speed',
            'max_gust': 'max_gust',
            'max_speed': 'max_speed'
        }

        self._avg_angle = avg_angle
        self._avg_dir = avg_dir
        self._avg_speed = avg_speed
        self._max_gust = max_gust
        self._max_speed = max_speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyStatsWindData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyStatsWindData of this PointPointDailyStatsWindData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_angle(self):
        """Gets the avg_angle of this PointPointDailyStatsWindData.

        Long-term average wind angle. Unit: deg

        :return: The avg_angle of this PointPointDailyStatsWindData.
        :rtype: float
        """
        return self._avg_angle

    @avg_angle.setter
    def avg_angle(self, avg_angle):
        """Sets the avg_angle of this PointPointDailyStatsWindData.

        Long-term average wind angle. Unit: deg

        :param avg_angle: The avg_angle of this PointPointDailyStatsWindData.
        :type avg_angle: float
        """

        self._avg_angle = avg_angle

    @property
    def avg_dir(self):
        """Gets the avg_dir of this PointPointDailyStatsWindData.

        Long-term average wind direction in 'N', 'NNE', 'NE', ... 'NNW' format. Unit: 16dir

        :return: The avg_dir of this PointPointDailyStatsWindData.
        :rtype: file
        """
        return self._avg_dir

    @avg_dir.setter
    def avg_dir(self, avg_dir):
        """Sets the avg_dir of this PointPointDailyStatsWindData.

        Long-term average wind direction in 'N', 'NNE', 'NE', ... 'NNW' format. Unit: 16dir

        :param avg_dir: The avg_dir of this PointPointDailyStatsWindData.
        :type avg_dir: file
        """

        self._avg_dir = avg_dir

    @property
    def avg_speed(self):
        """Gets the avg_speed of this PointPointDailyStatsWindData.

        Long-term average wind speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h

        :return: The avg_speed of this PointPointDailyStatsWindData.
        :rtype: float
        """
        return self._avg_speed

    @avg_speed.setter
    def avg_speed(self, avg_speed):
        """Sets the avg_speed of this PointPointDailyStatsWindData.

        Long-term average wind speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h

        :param avg_speed: The avg_speed of this PointPointDailyStatsWindData.
        :type avg_speed: float
        """

        self._avg_speed = avg_speed

    @property
    def max_gust(self):
        """Gets the max_gust of this PointPointDailyStatsWindData.

        Historical daily maximum wind gust speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h

        :return: The max_gust of this PointPointDailyStatsWindData.
        :rtype: float
        """
        return self._max_gust

    @max_gust.setter
    def max_gust(self, max_gust):
        """Sets the max_gust of this PointPointDailyStatsWindData.

        Historical daily maximum wind gust speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h

        :param max_gust: The max_gust of this PointPointDailyStatsWindData.
        :type max_gust: float
        """

        self._max_gust = max_gust

    @property
    def max_speed(self):
        """Gets the max_speed of this PointPointDailyStatsWindData.

        Historical daily maximum wind speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h

        :return: The max_speed of this PointPointDailyStatsWindData.
        :rtype: float
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this PointPointDailyStatsWindData.

        Historical daily maximum wind speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h

        :param max_speed: The max_speed of this PointPointDailyStatsWindData.
        :type max_speed: float
        """

        self._max_speed = max_speed
