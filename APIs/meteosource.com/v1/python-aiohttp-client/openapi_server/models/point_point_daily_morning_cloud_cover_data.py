# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointPointDailyMorningCloudCoverData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high: float=None, low: float=None, middle: float=None, total: float=None):
        """PointPointDailyMorningCloudCoverData - a model defined in OpenAPI

        :param high: The high of this PointPointDailyMorningCloudCoverData.
        :param low: The low of this PointPointDailyMorningCloudCoverData.
        :param middle: The middle of this PointPointDailyMorningCloudCoverData.
        :param total: The total of this PointPointDailyMorningCloudCoverData.
        """
        self.openapi_types = {
            'high': float,
            'low': float,
            'middle': float,
            'total': float
        }

        self.attribute_map = {
            'high': 'high',
            'low': 'low',
            'middle': 'middle',
            'total': 'total'
        }

        self._high = high
        self._low = low
        self._middle = middle
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointPointDailyMorningCloudCoverData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point_PointDailyMorningCloudCoverData of this PointPointDailyMorningCloudCoverData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high(self):
        """Gets the high of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by high clouds. (morning avg) Unit: \\%

        :return: The high of this PointPointDailyMorningCloudCoverData.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by high clouds. (morning avg) Unit: \\%

        :param high: The high of this PointPointDailyMorningCloudCoverData.
        :type high: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by low clouds. (morning avg) Unit: \\%

        :return: The low of this PointPointDailyMorningCloudCoverData.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by low clouds. (morning avg) Unit: \\%

        :param low: The low of this PointPointDailyMorningCloudCoverData.
        :type low: float
        """

        self._low = low

    @property
    def middle(self):
        """Gets the middle of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by middle clouds. (morning avg) Unit: \\%

        :return: The middle of this PointPointDailyMorningCloudCoverData.
        :rtype: float
        """
        return self._middle

    @middle.setter
    def middle(self, middle):
        """Sets the middle of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by middle clouds. (morning avg) Unit: \\%

        :param middle: The middle of this PointPointDailyMorningCloudCoverData.
        :type middle: float
        """

        self._middle = middle

    @property
    def total(self):
        """Gets the total of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by clouds. (morning avg) Unit: \\%

        :return: The total of this PointPointDailyMorningCloudCoverData.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PointPointDailyMorningCloudCoverData.

        Percentage of sky covered by clouds. (morning avg) Unit: \\%

        :param total: The total of this PointPointDailyMorningCloudCoverData.
        :type total: float
        """

        self._total = total
