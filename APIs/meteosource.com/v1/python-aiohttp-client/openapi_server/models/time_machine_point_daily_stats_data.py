# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_machine_point_daily_stats_precipitation_data import TimeMachinePointDailyStatsPrecipitationData
from openapi_server.models.time_machine_point_daily_stats_temperature_data import TimeMachinePointDailyStatsTemperatureData
from openapi_server.models.time_machine_point_daily_stats_wind_data import TimeMachinePointDailyStatsWindData
from openapi_server import util


class TimeMachinePointDailyStatsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, precipitation: TimeMachinePointDailyStatsPrecipitationData=None, temperature: TimeMachinePointDailyStatsTemperatureData=None, wind: TimeMachinePointDailyStatsWindData=None):
        """TimeMachinePointDailyStatsData - a model defined in OpenAPI

        :param precipitation: The precipitation of this TimeMachinePointDailyStatsData.
        :param temperature: The temperature of this TimeMachinePointDailyStatsData.
        :param wind: The wind of this TimeMachinePointDailyStatsData.
        """
        self.openapi_types = {
            'precipitation': TimeMachinePointDailyStatsPrecipitationData,
            'temperature': TimeMachinePointDailyStatsTemperatureData,
            'wind': TimeMachinePointDailyStatsWindData
        }

        self.attribute_map = {
            'precipitation': 'precipitation',
            'temperature': 'temperature',
            'wind': 'wind'
        }

        self._precipitation = precipitation
        self._temperature = temperature
        self._wind = wind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeMachinePointDailyStatsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeMachine_PointDailyStatsData of this TimeMachinePointDailyStatsData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def precipitation(self):
        """Gets the precipitation of this TimeMachinePointDailyStatsData.


        :return: The precipitation of this TimeMachinePointDailyStatsData.
        :rtype: TimeMachinePointDailyStatsPrecipitationData
        """
        return self._precipitation

    @precipitation.setter
    def precipitation(self, precipitation):
        """Sets the precipitation of this TimeMachinePointDailyStatsData.


        :param precipitation: The precipitation of this TimeMachinePointDailyStatsData.
        :type precipitation: TimeMachinePointDailyStatsPrecipitationData
        """
        if precipitation is None:
            raise ValueError("Invalid value for `precipitation`, must not be `None`")

        self._precipitation = precipitation

    @property
    def temperature(self):
        """Gets the temperature of this TimeMachinePointDailyStatsData.


        :return: The temperature of this TimeMachinePointDailyStatsData.
        :rtype: TimeMachinePointDailyStatsTemperatureData
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this TimeMachinePointDailyStatsData.


        :param temperature: The temperature of this TimeMachinePointDailyStatsData.
        :type temperature: TimeMachinePointDailyStatsTemperatureData
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")

        self._temperature = temperature

    @property
    def wind(self):
        """Gets the wind of this TimeMachinePointDailyStatsData.


        :return: The wind of this TimeMachinePointDailyStatsData.
        :rtype: TimeMachinePointDailyStatsWindData
        """
        return self._wind

    @wind.setter
    def wind(self, wind):
        """Sets the wind of this TimeMachinePointDailyStatsData.


        :param wind: The wind of this TimeMachinePointDailyStatsData.
        :type wind: TimeMachinePointDailyStatsWindData
        """
        if wind is None:
            raise ValueError("Invalid value for `wind`, must not be `None`")

        self._wind = wind
