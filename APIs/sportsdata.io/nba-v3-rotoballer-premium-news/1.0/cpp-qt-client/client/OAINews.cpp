/**
 * NBA v3 RotoBaller Premium News
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINews.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINews::OAINews(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINews::OAINews() {
    this->initializeModel();
}

OAINews::~OAINews() {}

void OAINews::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_news_id_isSet = false;
    m_news_id_isValid = false;

    m_original_source_isSet = false;
    m_original_source_isValid = false;

    m_original_source_url_isSet = false;
    m_original_source_url_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_player_id2_isSet = false;
    m_player_id2_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team2_isSet = false;
    m_team2_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_team_id2_isSet = false;
    m_team_id2_isValid = false;

    m_terms_of_use_isSet = false;
    m_terms_of_use_isValid = false;

    m_time_ago_isSet = false;
    m_time_ago_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINews::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINews::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("Author")]);
    m_author_isSet = !json[QString("Author")].isNull() && m_author_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_news_id_isValid = ::OpenAPI::fromJsonValue(m_news_id, json[QString("NewsID")]);
    m_news_id_isSet = !json[QString("NewsID")].isNull() && m_news_id_isValid;

    m_original_source_isValid = ::OpenAPI::fromJsonValue(m_original_source, json[QString("OriginalSource")]);
    m_original_source_isSet = !json[QString("OriginalSource")].isNull() && m_original_source_isValid;

    m_original_source_url_isValid = ::OpenAPI::fromJsonValue(m_original_source_url, json[QString("OriginalSourceUrl")]);
    m_original_source_url_isSet = !json[QString("OriginalSourceUrl")].isNull() && m_original_source_url_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_player_id2_isValid = ::OpenAPI::fromJsonValue(m_player_id2, json[QString("PlayerID2")]);
    m_player_id2_isSet = !json[QString("PlayerID2")].isNull() && m_player_id2_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team2_isValid = ::OpenAPI::fromJsonValue(m_team2, json[QString("Team2")]);
    m_team2_isSet = !json[QString("Team2")].isNull() && m_team2_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_team_id2_isValid = ::OpenAPI::fromJsonValue(m_team_id2, json[QString("TeamID2")]);
    m_team_id2_isSet = !json[QString("TeamID2")].isNull() && m_team_id2_isValid;

    m_terms_of_use_isValid = ::OpenAPI::fromJsonValue(m_terms_of_use, json[QString("TermsOfUse")]);
    m_terms_of_use_isSet = !json[QString("TermsOfUse")].isNull() && m_terms_of_use_isValid;

    m_time_ago_isValid = ::OpenAPI::fromJsonValue(m_time_ago, json[QString("TimeAgo")]);
    m_time_ago_isSet = !json[QString("TimeAgo")].isNull() && m_time_ago_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAINews::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINews::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("Author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_categories_isSet) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_news_id_isSet) {
        obj.insert(QString("NewsID"), ::OpenAPI::toJsonValue(m_news_id));
    }
    if (m_original_source_isSet) {
        obj.insert(QString("OriginalSource"), ::OpenAPI::toJsonValue(m_original_source));
    }
    if (m_original_source_url_isSet) {
        obj.insert(QString("OriginalSourceUrl"), ::OpenAPI::toJsonValue(m_original_source_url));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_player_id2_isSet) {
        obj.insert(QString("PlayerID2"), ::OpenAPI::toJsonValue(m_player_id2));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team2_isSet) {
        obj.insert(QString("Team2"), ::OpenAPI::toJsonValue(m_team2));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_team_id2_isSet) {
        obj.insert(QString("TeamID2"), ::OpenAPI::toJsonValue(m_team_id2));
    }
    if (m_terms_of_use_isSet) {
        obj.insert(QString("TermsOfUse"), ::OpenAPI::toJsonValue(m_terms_of_use));
    }
    if (m_time_ago_isSet) {
        obj.insert(QString("TimeAgo"), ::OpenAPI::toJsonValue(m_time_ago));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINews::getAuthor() const {
    return m_author;
}
void OAINews::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAINews::is_author_Set() const{
    return m_author_isSet;
}

bool OAINews::is_author_Valid() const{
    return m_author_isValid;
}

QString OAINews::getCategories() const {
    return m_categories;
}
void OAINews::setCategories(const QString &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAINews::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAINews::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAINews::getContent() const {
    return m_content;
}
void OAINews::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAINews::is_content_Set() const{
    return m_content_isSet;
}

bool OAINews::is_content_Valid() const{
    return m_content_isValid;
}

qint32 OAINews::getNewsId() const {
    return m_news_id;
}
void OAINews::setNewsId(const qint32 &news_id) {
    m_news_id = news_id;
    m_news_id_isSet = true;
}

bool OAINews::is_news_id_Set() const{
    return m_news_id_isSet;
}

bool OAINews::is_news_id_Valid() const{
    return m_news_id_isValid;
}

QString OAINews::getOriginalSource() const {
    return m_original_source;
}
void OAINews::setOriginalSource(const QString &original_source) {
    m_original_source = original_source;
    m_original_source_isSet = true;
}

bool OAINews::is_original_source_Set() const{
    return m_original_source_isSet;
}

bool OAINews::is_original_source_Valid() const{
    return m_original_source_isValid;
}

QString OAINews::getOriginalSourceUrl() const {
    return m_original_source_url;
}
void OAINews::setOriginalSourceUrl(const QString &original_source_url) {
    m_original_source_url = original_source_url;
    m_original_source_url_isSet = true;
}

bool OAINews::is_original_source_url_Set() const{
    return m_original_source_url_isSet;
}

bool OAINews::is_original_source_url_Valid() const{
    return m_original_source_url_isValid;
}

qint32 OAINews::getPlayerId() const {
    return m_player_id;
}
void OAINews::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAINews::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAINews::is_player_id_Valid() const{
    return m_player_id_isValid;
}

qint32 OAINews::getPlayerId2() const {
    return m_player_id2;
}
void OAINews::setPlayerId2(const qint32 &player_id2) {
    m_player_id2 = player_id2;
    m_player_id2_isSet = true;
}

bool OAINews::is_player_id2_Set() const{
    return m_player_id2_isSet;
}

bool OAINews::is_player_id2_Valid() const{
    return m_player_id2_isValid;
}

QString OAINews::getSource() const {
    return m_source;
}
void OAINews::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAINews::is_source_Set() const{
    return m_source_isSet;
}

bool OAINews::is_source_Valid() const{
    return m_source_isValid;
}

QString OAINews::getTeam() const {
    return m_team;
}
void OAINews::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAINews::is_team_Set() const{
    return m_team_isSet;
}

bool OAINews::is_team_Valid() const{
    return m_team_isValid;
}

QString OAINews::getTeam2() const {
    return m_team2;
}
void OAINews::setTeam2(const QString &team2) {
    m_team2 = team2;
    m_team2_isSet = true;
}

bool OAINews::is_team2_Set() const{
    return m_team2_isSet;
}

bool OAINews::is_team2_Valid() const{
    return m_team2_isValid;
}

qint32 OAINews::getTeamId() const {
    return m_team_id;
}
void OAINews::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAINews::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAINews::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAINews::getTeamId2() const {
    return m_team_id2;
}
void OAINews::setTeamId2(const qint32 &team_id2) {
    m_team_id2 = team_id2;
    m_team_id2_isSet = true;
}

bool OAINews::is_team_id2_Set() const{
    return m_team_id2_isSet;
}

bool OAINews::is_team_id2_Valid() const{
    return m_team_id2_isValid;
}

QString OAINews::getTermsOfUse() const {
    return m_terms_of_use;
}
void OAINews::setTermsOfUse(const QString &terms_of_use) {
    m_terms_of_use = terms_of_use;
    m_terms_of_use_isSet = true;
}

bool OAINews::is_terms_of_use_Set() const{
    return m_terms_of_use_isSet;
}

bool OAINews::is_terms_of_use_Valid() const{
    return m_terms_of_use_isValid;
}

QString OAINews::getTimeAgo() const {
    return m_time_ago;
}
void OAINews::setTimeAgo(const QString &time_ago) {
    m_time_ago = time_ago;
    m_time_ago_isSet = true;
}

bool OAINews::is_time_ago_Set() const{
    return m_time_ago_isSet;
}

bool OAINews::is_time_ago_Valid() const{
    return m_time_ago_isValid;
}

QString OAINews::getTitle() const {
    return m_title;
}
void OAINews::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINews::is_title_Set() const{
    return m_title_isSet;
}

bool OAINews::is_title_Valid() const{
    return m_title_isValid;
}

QString OAINews::getUpdated() const {
    return m_updated;
}
void OAINews::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAINews::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAINews::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAINews::getUrl() const {
    return m_url;
}
void OAINews::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINews::is_url_Set() const{
    return m_url_isSet;
}

bool OAINews::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINews::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_ago_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINews::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
