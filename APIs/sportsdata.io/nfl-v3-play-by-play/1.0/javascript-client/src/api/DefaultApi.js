/**
 * NFL v3 Play-by-Play
 * NFL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlayByPlay from '../model/PlayByPlay';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the playByPlay operation.
     * @callback module:api/DefaultApi~playByPlayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayByPlay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play By Play
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} hometeam Abbreviation of the home team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~playByPlayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayByPlay}
     */
    playByPlay(format, season, week, hometeam, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playByPlay");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playByPlay");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playByPlay");
      }
      // verify the required parameter 'hometeam' is set
      if (hometeam === undefined || hometeam === null) {
        throw new Error("Missing the required parameter 'hometeam' when calling playByPlay");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'hometeam': hometeam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayByPlay;
      return this.apiClient.callApi(
        '/{format}/PlayByPlay/{season}/{week}/{hometeam}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playByPlayDelta operation.
     * @callback module:api/DefaultApi~playByPlayDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayByPlay>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play By Play Delta
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are:<br>           <code>1</code> or <code>2</code>.         
     * @param {module:api/DefaultApi~playByPlayDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayByPlay>}
     */
    playByPlayDelta(format, season, week, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playByPlayDelta");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playByPlayDelta");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playByPlayDelta");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling playByPlayDelta");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayByPlay];
      return this.apiClient.callApi(
        '/{format}/PlayByPlayDelta/{season}/{week}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playByPlaySimulation operation.
     * @callback module:api/DefaultApi~playByPlaySimulationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayByPlay>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play By Play Simulation
     * Gets simulated live play-by-play of NFL games, covering the Conference Championship games on January 21, 2018.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} numberofplays The number of plays to progress in this NFL live game simulation. Example entries are <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>150</code>, <code>200</code>, etc.
     * @param {module:api/DefaultApi~playByPlaySimulationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayByPlay>}
     */
    playByPlaySimulation(format, numberofplays, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playByPlaySimulation");
      }
      // verify the required parameter 'numberofplays' is set
      if (numberofplays === undefined || numberofplays === null) {
        throw new Error("Missing the required parameter 'numberofplays' when calling playByPlaySimulation");
      }

      let pathParams = {
        'format': format,
        'numberofplays': numberofplays
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayByPlay];
      return this.apiClient.callApi(
        '/{format}/SimulatedPlayByPlay/{numberofplays}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
