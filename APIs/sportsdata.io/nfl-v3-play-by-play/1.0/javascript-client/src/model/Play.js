/**
 * NFL v3 Play-by-Play
 * NFL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlayStat from './PlayStat';
import ScoringPlay from './ScoringPlay';

/**
 * The Play model module.
 * @module model/Play
 * @version 1.0
 */
class Play {
    /**
     * Constructs a new <code>Play</code>.
     * @alias module:model/Play
     */
    constructor() { 
        
        Play.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Play</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Play} obj Optional instance to populate.
     * @return {module:model/Play} The populated <code>Play</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Play();

            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Distance')) {
                obj['Distance'] = ApiClient.convertToType(data['Distance'], 'Number');
            }
            if (data.hasOwnProperty('Down')) {
                obj['Down'] = ApiClient.convertToType(data['Down'], 'Number');
            }
            if (data.hasOwnProperty('IsScoringPlay')) {
                obj['IsScoringPlay'] = ApiClient.convertToType(data['IsScoringPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('Opponent')) {
                obj['Opponent'] = ApiClient.convertToType(data['Opponent'], 'String');
            }
            if (data.hasOwnProperty('PlayID')) {
                obj['PlayID'] = ApiClient.convertToType(data['PlayID'], 'Number');
            }
            if (data.hasOwnProperty('PlayStats')) {
                obj['PlayStats'] = ApiClient.convertToType(data['PlayStats'], [PlayStat]);
            }
            if (data.hasOwnProperty('PlayTime')) {
                obj['PlayTime'] = ApiClient.convertToType(data['PlayTime'], 'String');
            }
            if (data.hasOwnProperty('QuarterID')) {
                obj['QuarterID'] = ApiClient.convertToType(data['QuarterID'], 'Number');
            }
            if (data.hasOwnProperty('QuarterName')) {
                obj['QuarterName'] = ApiClient.convertToType(data['QuarterName'], 'String');
            }
            if (data.hasOwnProperty('ScoringPlay')) {
                obj['ScoringPlay'] = ScoringPlay.constructFromObject(data['ScoringPlay']);
            }
            if (data.hasOwnProperty('Sequence')) {
                obj['Sequence'] = ApiClient.convertToType(data['Sequence'], 'Number');
            }
            if (data.hasOwnProperty('Team')) {
                obj['Team'] = ApiClient.convertToType(data['Team'], 'String');
            }
            if (data.hasOwnProperty('TimeRemainingMinutes')) {
                obj['TimeRemainingMinutes'] = ApiClient.convertToType(data['TimeRemainingMinutes'], 'Number');
            }
            if (data.hasOwnProperty('TimeRemainingSeconds')) {
                obj['TimeRemainingSeconds'] = ApiClient.convertToType(data['TimeRemainingSeconds'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
            if (data.hasOwnProperty('YardLine')) {
                obj['YardLine'] = ApiClient.convertToType(data['YardLine'], 'Number');
            }
            if (data.hasOwnProperty('YardLineTerritory')) {
                obj['YardLineTerritory'] = ApiClient.convertToType(data['YardLineTerritory'], 'String');
            }
            if (data.hasOwnProperty('YardsGained')) {
                obj['YardsGained'] = ApiClient.convertToType(data['YardsGained'], 'Number');
            }
            if (data.hasOwnProperty('YardsToEndZone')) {
                obj['YardsToEndZone'] = ApiClient.convertToType(data['YardsToEndZone'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Play</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Play</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Created'] && !(typeof data['Created'] === 'string' || data['Created'] instanceof String)) {
            throw new Error("Expected the field `Created` to be a primitive type in the JSON string but got " + data['Created']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Opponent'] && !(typeof data['Opponent'] === 'string' || data['Opponent'] instanceof String)) {
            throw new Error("Expected the field `Opponent` to be a primitive type in the JSON string but got " + data['Opponent']);
        }
        if (data['PlayStats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PlayStats'])) {
                throw new Error("Expected the field `PlayStats` to be an array in the JSON data but got " + data['PlayStats']);
            }
            // validate the optional field `PlayStats` (array)
            for (const item of data['PlayStats']) {
                PlayStat.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PlayTime'] && !(typeof data['PlayTime'] === 'string' || data['PlayTime'] instanceof String)) {
            throw new Error("Expected the field `PlayTime` to be a primitive type in the JSON string but got " + data['PlayTime']);
        }
        // ensure the json data is a string
        if (data['QuarterName'] && !(typeof data['QuarterName'] === 'string' || data['QuarterName'] instanceof String)) {
            throw new Error("Expected the field `QuarterName` to be a primitive type in the JSON string but got " + data['QuarterName']);
        }
        // validate the optional field `ScoringPlay`
        if (data['ScoringPlay']) { // data not null
          ScoringPlay.validateJSON(data['ScoringPlay']);
        }
        // ensure the json data is a string
        if (data['Team'] && !(typeof data['Team'] === 'string' || data['Team'] instanceof String)) {
            throw new Error("Expected the field `Team` to be a primitive type in the JSON string but got " + data['Team']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }
        // ensure the json data is a string
        if (data['YardLineTerritory'] && !(typeof data['YardLineTerritory'] === 'string' || data['YardLineTerritory'] instanceof String)) {
            throw new Error("Expected the field `YardLineTerritory` to be a primitive type in the JSON string but got " + data['YardLineTerritory']);
        }

        return true;
    }


}



/**
 * @member {String} Created
 */
Play.prototype['Created'] = undefined;

/**
 * @member {String} Description
 */
Play.prototype['Description'] = undefined;

/**
 * @member {Number} Distance
 */
Play.prototype['Distance'] = undefined;

/**
 * @member {Number} Down
 */
Play.prototype['Down'] = undefined;

/**
 * @member {Boolean} IsScoringPlay
 */
Play.prototype['IsScoringPlay'] = undefined;

/**
 * @member {String} Opponent
 */
Play.prototype['Opponent'] = undefined;

/**
 * @member {Number} PlayID
 */
Play.prototype['PlayID'] = undefined;

/**
 * @member {Array.<module:model/PlayStat>} PlayStats
 */
Play.prototype['PlayStats'] = undefined;

/**
 * @member {String} PlayTime
 */
Play.prototype['PlayTime'] = undefined;

/**
 * @member {Number} QuarterID
 */
Play.prototype['QuarterID'] = undefined;

/**
 * @member {String} QuarterName
 */
Play.prototype['QuarterName'] = undefined;

/**
 * @member {module:model/ScoringPlay} ScoringPlay
 */
Play.prototype['ScoringPlay'] = undefined;

/**
 * @member {Number} Sequence
 */
Play.prototype['Sequence'] = undefined;

/**
 * @member {String} Team
 */
Play.prototype['Team'] = undefined;

/**
 * @member {Number} TimeRemainingMinutes
 */
Play.prototype['TimeRemainingMinutes'] = undefined;

/**
 * @member {Number} TimeRemainingSeconds
 */
Play.prototype['TimeRemainingSeconds'] = undefined;

/**
 * @member {String} Type
 */
Play.prototype['Type'] = undefined;

/**
 * @member {String} Updated
 */
Play.prototype['Updated'] = undefined;

/**
 * @member {Number} YardLine
 */
Play.prototype['YardLine'] = undefined;

/**
 * @member {String} YardLineTerritory
 */
Play.prototype['YardLineTerritory'] = undefined;

/**
 * @member {Number} YardsGained
 */
Play.prototype['YardsGained'] = undefined;

/**
 * @member {Number} YardsToEndZone
 */
Play.prototype['YardsToEndZone'] = undefined;






export default Play;

