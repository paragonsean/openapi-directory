/*
 * NFL v3 Play-by-Play
 * NFL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlayStat;
import org.openapitools.client.model.ScoringPlay;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Play
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:44.692773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Play {
  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISTANCE = "Distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_DOWN = "Down";
  @SerializedName(SERIALIZED_NAME_DOWN)
  private Integer down;

  public static final String SERIALIZED_NAME_IS_SCORING_PLAY = "IsScoringPlay";
  @SerializedName(SERIALIZED_NAME_IS_SCORING_PLAY)
  private Boolean isScoringPlay;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_PLAY_I_D = "PlayID";
  @SerializedName(SERIALIZED_NAME_PLAY_I_D)
  private Integer playID;

  public static final String SERIALIZED_NAME_PLAY_STATS = "PlayStats";
  @SerializedName(SERIALIZED_NAME_PLAY_STATS)
  private List<PlayStat> playStats = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAY_TIME = "PlayTime";
  @SerializedName(SERIALIZED_NAME_PLAY_TIME)
  private String playTime;

  public static final String SERIALIZED_NAME_QUARTER_I_D = "QuarterID";
  @SerializedName(SERIALIZED_NAME_QUARTER_I_D)
  private Integer quarterID;

  public static final String SERIALIZED_NAME_QUARTER_NAME = "QuarterName";
  @SerializedName(SERIALIZED_NAME_QUARTER_NAME)
  private String quarterName;

  public static final String SERIALIZED_NAME_SCORING_PLAY = "ScoringPlay";
  @SerializedName(SERIALIZED_NAME_SCORING_PLAY)
  private ScoringPlay scoringPlay;

  public static final String SERIALIZED_NAME_SEQUENCE = "Sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TIME_REMAINING_MINUTES = "TimeRemainingMinutes";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING_MINUTES)
  private Integer timeRemainingMinutes;

  public static final String SERIALIZED_NAME_TIME_REMAINING_SECONDS = "TimeRemainingSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING_SECONDS)
  private Integer timeRemainingSeconds;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_YARD_LINE = "YardLine";
  @SerializedName(SERIALIZED_NAME_YARD_LINE)
  private Integer yardLine;

  public static final String SERIALIZED_NAME_YARD_LINE_TERRITORY = "YardLineTerritory";
  @SerializedName(SERIALIZED_NAME_YARD_LINE_TERRITORY)
  private String yardLineTerritory;

  public static final String SERIALIZED_NAME_YARDS_GAINED = "YardsGained";
  @SerializedName(SERIALIZED_NAME_YARDS_GAINED)
  private Integer yardsGained;

  public static final String SERIALIZED_NAME_YARDS_TO_END_ZONE = "YardsToEndZone";
  @SerializedName(SERIALIZED_NAME_YARDS_TO_END_ZONE)
  private Integer yardsToEndZone;

  public Play() {
  }

  public Play created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Play description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Play distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }

  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public Play down(Integer down) {
    this.down = down;
    return this;
  }

  /**
   * Get down
   * @return down
   */
  @javax.annotation.Nullable
  public Integer getDown() {
    return down;
  }

  public void setDown(Integer down) {
    this.down = down;
  }


  public Play isScoringPlay(Boolean isScoringPlay) {
    this.isScoringPlay = isScoringPlay;
    return this;
  }

  /**
   * Get isScoringPlay
   * @return isScoringPlay
   */
  @javax.annotation.Nullable
  public Boolean getIsScoringPlay() {
    return isScoringPlay;
  }

  public void setIsScoringPlay(Boolean isScoringPlay) {
    this.isScoringPlay = isScoringPlay;
  }


  public Play opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public Play playID(Integer playID) {
    this.playID = playID;
    return this;
  }

  /**
   * Get playID
   * @return playID
   */
  @javax.annotation.Nullable
  public Integer getPlayID() {
    return playID;
  }

  public void setPlayID(Integer playID) {
    this.playID = playID;
  }


  public Play playStats(List<PlayStat> playStats) {
    this.playStats = playStats;
    return this;
  }

  public Play addPlayStatsItem(PlayStat playStatsItem) {
    if (this.playStats == null) {
      this.playStats = new ArrayList<>();
    }
    this.playStats.add(playStatsItem);
    return this;
  }

  /**
   * Get playStats
   * @return playStats
   */
  @javax.annotation.Nullable
  public List<PlayStat> getPlayStats() {
    return playStats;
  }

  public void setPlayStats(List<PlayStat> playStats) {
    this.playStats = playStats;
  }


  public Play playTime(String playTime) {
    this.playTime = playTime;
    return this;
  }

  /**
   * Get playTime
   * @return playTime
   */
  @javax.annotation.Nullable
  public String getPlayTime() {
    return playTime;
  }

  public void setPlayTime(String playTime) {
    this.playTime = playTime;
  }


  public Play quarterID(Integer quarterID) {
    this.quarterID = quarterID;
    return this;
  }

  /**
   * Get quarterID
   * @return quarterID
   */
  @javax.annotation.Nullable
  public Integer getQuarterID() {
    return quarterID;
  }

  public void setQuarterID(Integer quarterID) {
    this.quarterID = quarterID;
  }


  public Play quarterName(String quarterName) {
    this.quarterName = quarterName;
    return this;
  }

  /**
   * Get quarterName
   * @return quarterName
   */
  @javax.annotation.Nullable
  public String getQuarterName() {
    return quarterName;
  }

  public void setQuarterName(String quarterName) {
    this.quarterName = quarterName;
  }


  public Play scoringPlay(ScoringPlay scoringPlay) {
    this.scoringPlay = scoringPlay;
    return this;
  }

  /**
   * Get scoringPlay
   * @return scoringPlay
   */
  @javax.annotation.Nullable
  public ScoringPlay getScoringPlay() {
    return scoringPlay;
  }

  public void setScoringPlay(ScoringPlay scoringPlay) {
    this.scoringPlay = scoringPlay;
  }


  public Play sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public Play team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Play timeRemainingMinutes(Integer timeRemainingMinutes) {
    this.timeRemainingMinutes = timeRemainingMinutes;
    return this;
  }

  /**
   * Get timeRemainingMinutes
   * @return timeRemainingMinutes
   */
  @javax.annotation.Nullable
  public Integer getTimeRemainingMinutes() {
    return timeRemainingMinutes;
  }

  public void setTimeRemainingMinutes(Integer timeRemainingMinutes) {
    this.timeRemainingMinutes = timeRemainingMinutes;
  }


  public Play timeRemainingSeconds(Integer timeRemainingSeconds) {
    this.timeRemainingSeconds = timeRemainingSeconds;
    return this;
  }

  /**
   * Get timeRemainingSeconds
   * @return timeRemainingSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeRemainingSeconds() {
    return timeRemainingSeconds;
  }

  public void setTimeRemainingSeconds(Integer timeRemainingSeconds) {
    this.timeRemainingSeconds = timeRemainingSeconds;
  }


  public Play type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Play updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Play yardLine(Integer yardLine) {
    this.yardLine = yardLine;
    return this;
  }

  /**
   * Get yardLine
   * @return yardLine
   */
  @javax.annotation.Nullable
  public Integer getYardLine() {
    return yardLine;
  }

  public void setYardLine(Integer yardLine) {
    this.yardLine = yardLine;
  }


  public Play yardLineTerritory(String yardLineTerritory) {
    this.yardLineTerritory = yardLineTerritory;
    return this;
  }

  /**
   * Get yardLineTerritory
   * @return yardLineTerritory
   */
  @javax.annotation.Nullable
  public String getYardLineTerritory() {
    return yardLineTerritory;
  }

  public void setYardLineTerritory(String yardLineTerritory) {
    this.yardLineTerritory = yardLineTerritory;
  }


  public Play yardsGained(Integer yardsGained) {
    this.yardsGained = yardsGained;
    return this;
  }

  /**
   * Get yardsGained
   * @return yardsGained
   */
  @javax.annotation.Nullable
  public Integer getYardsGained() {
    return yardsGained;
  }

  public void setYardsGained(Integer yardsGained) {
    this.yardsGained = yardsGained;
  }


  public Play yardsToEndZone(Integer yardsToEndZone) {
    this.yardsToEndZone = yardsToEndZone;
    return this;
  }

  /**
   * Get yardsToEndZone
   * @return yardsToEndZone
   */
  @javax.annotation.Nullable
  public Integer getYardsToEndZone() {
    return yardsToEndZone;
  }

  public void setYardsToEndZone(Integer yardsToEndZone) {
    this.yardsToEndZone = yardsToEndZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Play play = (Play) o;
    return Objects.equals(this.created, play.created) &&
        Objects.equals(this.description, play.description) &&
        Objects.equals(this.distance, play.distance) &&
        Objects.equals(this.down, play.down) &&
        Objects.equals(this.isScoringPlay, play.isScoringPlay) &&
        Objects.equals(this.opponent, play.opponent) &&
        Objects.equals(this.playID, play.playID) &&
        Objects.equals(this.playStats, play.playStats) &&
        Objects.equals(this.playTime, play.playTime) &&
        Objects.equals(this.quarterID, play.quarterID) &&
        Objects.equals(this.quarterName, play.quarterName) &&
        Objects.equals(this.scoringPlay, play.scoringPlay) &&
        Objects.equals(this.sequence, play.sequence) &&
        Objects.equals(this.team, play.team) &&
        Objects.equals(this.timeRemainingMinutes, play.timeRemainingMinutes) &&
        Objects.equals(this.timeRemainingSeconds, play.timeRemainingSeconds) &&
        Objects.equals(this.type, play.type) &&
        Objects.equals(this.updated, play.updated) &&
        Objects.equals(this.yardLine, play.yardLine) &&
        Objects.equals(this.yardLineTerritory, play.yardLineTerritory) &&
        Objects.equals(this.yardsGained, play.yardsGained) &&
        Objects.equals(this.yardsToEndZone, play.yardsToEndZone);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, description, distance, down, isScoringPlay, opponent, playID, playStats, playTime, quarterID, quarterName, scoringPlay, sequence, team, timeRemainingMinutes, timeRemainingSeconds, type, updated, yardLine, yardLineTerritory, yardsGained, yardsToEndZone);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Play {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    isScoringPlay: ").append(toIndentedString(isScoringPlay)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    playID: ").append(toIndentedString(playID)).append("\n");
    sb.append("    playStats: ").append(toIndentedString(playStats)).append("\n");
    sb.append("    playTime: ").append(toIndentedString(playTime)).append("\n");
    sb.append("    quarterID: ").append(toIndentedString(quarterID)).append("\n");
    sb.append("    quarterName: ").append(toIndentedString(quarterName)).append("\n");
    sb.append("    scoringPlay: ").append(toIndentedString(scoringPlay)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    timeRemainingMinutes: ").append(toIndentedString(timeRemainingMinutes)).append("\n");
    sb.append("    timeRemainingSeconds: ").append(toIndentedString(timeRemainingSeconds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    yardLine: ").append(toIndentedString(yardLine)).append("\n");
    sb.append("    yardLineTerritory: ").append(toIndentedString(yardLineTerritory)).append("\n");
    sb.append("    yardsGained: ").append(toIndentedString(yardsGained)).append("\n");
    sb.append("    yardsToEndZone: ").append(toIndentedString(yardsToEndZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Created");
    openapiFields.add("Description");
    openapiFields.add("Distance");
    openapiFields.add("Down");
    openapiFields.add("IsScoringPlay");
    openapiFields.add("Opponent");
    openapiFields.add("PlayID");
    openapiFields.add("PlayStats");
    openapiFields.add("PlayTime");
    openapiFields.add("QuarterID");
    openapiFields.add("QuarterName");
    openapiFields.add("ScoringPlay");
    openapiFields.add("Sequence");
    openapiFields.add("Team");
    openapiFields.add("TimeRemainingMinutes");
    openapiFields.add("TimeRemainingSeconds");
    openapiFields.add("Type");
    openapiFields.add("Updated");
    openapiFields.add("YardLine");
    openapiFields.add("YardLineTerritory");
    openapiFields.add("YardsGained");
    openapiFields.add("YardsToEndZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Play
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Play.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Play is not found in the empty JSON string", Play.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Play.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Play` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) && !jsonObj.get("Created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Created").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if (jsonObj.get("PlayStats") != null && !jsonObj.get("PlayStats").isJsonNull()) {
        JsonArray jsonArrayplayStats = jsonObj.getAsJsonArray("PlayStats");
        if (jsonArrayplayStats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PlayStats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PlayStats` to be an array in the JSON string but got `%s`", jsonObj.get("PlayStats").toString()));
          }

          // validate the optional field `PlayStats` (array)
          for (int i = 0; i < jsonArrayplayStats.size(); i++) {
            PlayStat.validateJsonElement(jsonArrayplayStats.get(i));
          };
        }
      }
      if ((jsonObj.get("PlayTime") != null && !jsonObj.get("PlayTime").isJsonNull()) && !jsonObj.get("PlayTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlayTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlayTime").toString()));
      }
      if ((jsonObj.get("QuarterName") != null && !jsonObj.get("QuarterName").isJsonNull()) && !jsonObj.get("QuarterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuarterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuarterName").toString()));
      }
      // validate the optional field `ScoringPlay`
      if (jsonObj.get("ScoringPlay") != null && !jsonObj.get("ScoringPlay").isJsonNull()) {
        ScoringPlay.validateJsonElement(jsonObj.get("ScoringPlay"));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
      if ((jsonObj.get("YardLineTerritory") != null && !jsonObj.get("YardLineTerritory").isJsonNull()) && !jsonObj.get("YardLineTerritory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YardLineTerritory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YardLineTerritory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Play.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Play' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Play> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Play.class));

       return (TypeAdapter<T>) new TypeAdapter<Play>() {
           @Override
           public void write(JsonWriter out, Play value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Play read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Play given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Play
   * @throws IOException if the JSON string is invalid with respect to Play
   */
  public static Play fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Play.class);
  }

  /**
   * Convert an instance of Play to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

