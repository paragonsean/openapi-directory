/*
 * NFL v3 Play-by-Play
 * NFL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:44.692773-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayStat {
  public static final String SERIALIZED_NAME_ASSISTED_TACKLES = "AssistedTackles";
  @SerializedName(SERIALIZED_NAME_ASSISTED_TACKLES)
  private Integer assistedTackles;

  public static final String SERIALIZED_NAME_BLOCKED_KICK_RETURN_TOUCHDOWNS = "BlockedKickReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_BLOCKED_KICK_RETURN_TOUCHDOWNS)
  private Integer blockedKickReturnTouchdowns;

  public static final String SERIALIZED_NAME_BLOCKED_KICK_RETURN_YARDS = "BlockedKickReturnYards";
  @SerializedName(SERIALIZED_NAME_BLOCKED_KICK_RETURN_YARDS)
  private Integer blockedKickReturnYards;

  public static final String SERIALIZED_NAME_BLOCKED_KICK_RETURNS = "BlockedKickReturns";
  @SerializedName(SERIALIZED_NAME_BLOCKED_KICK_RETURNS)
  private Integer blockedKickReturns;

  public static final String SERIALIZED_NAME_BLOCKED_KICKS = "BlockedKicks";
  @SerializedName(SERIALIZED_NAME_BLOCKED_KICKS)
  private Integer blockedKicks;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DIRECTION = "Direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_EXTRA_POINTS_ATTEMPTED = "ExtraPointsAttempted";
  @SerializedName(SERIALIZED_NAME_EXTRA_POINTS_ATTEMPTED)
  private Integer extraPointsAttempted;

  public static final String SERIALIZED_NAME_EXTRA_POINTS_HAD_BLOCKED = "ExtraPointsHadBlocked";
  @SerializedName(SERIALIZED_NAME_EXTRA_POINTS_HAD_BLOCKED)
  private Integer extraPointsHadBlocked;

  public static final String SERIALIZED_NAME_EXTRA_POINTS_MADE = "ExtraPointsMade";
  @SerializedName(SERIALIZED_NAME_EXTRA_POINTS_MADE)
  private Integer extraPointsMade;

  public static final String SERIALIZED_NAME_FIELD_GOAL_RETURN_TOUCHDOWNS = "FieldGoalReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_FIELD_GOAL_RETURN_TOUCHDOWNS)
  private Integer fieldGoalReturnTouchdowns;

  public static final String SERIALIZED_NAME_FIELD_GOAL_RETURN_YARDS = "FieldGoalReturnYards";
  @SerializedName(SERIALIZED_NAME_FIELD_GOAL_RETURN_YARDS)
  private Integer fieldGoalReturnYards;

  public static final String SERIALIZED_NAME_FIELD_GOAL_RETURNS = "FieldGoalReturns";
  @SerializedName(SERIALIZED_NAME_FIELD_GOAL_RETURNS)
  private Integer fieldGoalReturns;

  public static final String SERIALIZED_NAME_FIELD_GOALS_ATTEMPTED = "FieldGoalsAttempted";
  @SerializedName(SERIALIZED_NAME_FIELD_GOALS_ATTEMPTED)
  private Integer fieldGoalsAttempted;

  public static final String SERIALIZED_NAME_FIELD_GOALS_HAD_BLOCKED = "FieldGoalsHadBlocked";
  @SerializedName(SERIALIZED_NAME_FIELD_GOALS_HAD_BLOCKED)
  private Integer fieldGoalsHadBlocked;

  public static final String SERIALIZED_NAME_FIELD_GOALS_MADE = "FieldGoalsMade";
  @SerializedName(SERIALIZED_NAME_FIELD_GOALS_MADE)
  private Integer fieldGoalsMade;

  public static final String SERIALIZED_NAME_FIELD_GOALS_YARDS = "FieldGoalsYards";
  @SerializedName(SERIALIZED_NAME_FIELD_GOALS_YARDS)
  private Integer fieldGoalsYards;

  public static final String SERIALIZED_NAME_FUMBLE_RETURN_TOUCHDOWNS = "FumbleReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_FUMBLE_RETURN_TOUCHDOWNS)
  private Integer fumbleReturnTouchdowns;

  public static final String SERIALIZED_NAME_FUMBLE_RETURN_YARDS = "FumbleReturnYards";
  @SerializedName(SERIALIZED_NAME_FUMBLE_RETURN_YARDS)
  private Integer fumbleReturnYards;

  public static final String SERIALIZED_NAME_FUMBLES = "Fumbles";
  @SerializedName(SERIALIZED_NAME_FUMBLES)
  private Integer fumbles;

  public static final String SERIALIZED_NAME_FUMBLES_FORCED = "FumblesForced";
  @SerializedName(SERIALIZED_NAME_FUMBLES_FORCED)
  private Integer fumblesForced;

  public static final String SERIALIZED_NAME_FUMBLES_LOST = "FumblesLost";
  @SerializedName(SERIALIZED_NAME_FUMBLES_LOST)
  private Integer fumblesLost;

  public static final String SERIALIZED_NAME_FUMBLES_RECOVERED = "FumblesRecovered";
  @SerializedName(SERIALIZED_NAME_FUMBLES_RECOVERED)
  private Integer fumblesRecovered;

  public static final String SERIALIZED_NAME_HOME_OR_AWAY = "HomeOrAway";
  @SerializedName(SERIALIZED_NAME_HOME_OR_AWAY)
  private String homeOrAway;

  public static final String SERIALIZED_NAME_INTERCEPTION_RETURN_TOUCHDOWNS = "InterceptionReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_INTERCEPTION_RETURN_TOUCHDOWNS)
  private Integer interceptionReturnTouchdowns;

  public static final String SERIALIZED_NAME_INTERCEPTION_RETURN_YARDS = "InterceptionReturnYards";
  @SerializedName(SERIALIZED_NAME_INTERCEPTION_RETURN_YARDS)
  private Integer interceptionReturnYards;

  public static final String SERIALIZED_NAME_INTERCEPTIONS = "Interceptions";
  @SerializedName(SERIALIZED_NAME_INTERCEPTIONS)
  private Integer interceptions;

  public static final String SERIALIZED_NAME_KICK_RETURN_TOUCHDOWNS = "KickReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_KICK_RETURN_TOUCHDOWNS)
  private Integer kickReturnTouchdowns;

  public static final String SERIALIZED_NAME_KICK_RETURN_YARDS = "KickReturnYards";
  @SerializedName(SERIALIZED_NAME_KICK_RETURN_YARDS)
  private Integer kickReturnYards;

  public static final String SERIALIZED_NAME_KICK_RETURNS = "KickReturns";
  @SerializedName(SERIALIZED_NAME_KICK_RETURNS)
  private Integer kickReturns;

  public static final String SERIALIZED_NAME_KICKOFF_TOUCHBACKS = "KickoffTouchbacks";
  @SerializedName(SERIALIZED_NAME_KICKOFF_TOUCHBACKS)
  private Integer kickoffTouchbacks;

  public static final String SERIALIZED_NAME_KICKOFF_YARDS = "KickoffYards";
  @SerializedName(SERIALIZED_NAME_KICKOFF_YARDS)
  private Integer kickoffYards;

  public static final String SERIALIZED_NAME_KICKOFFS = "Kickoffs";
  @SerializedName(SERIALIZED_NAME_KICKOFFS)
  private Integer kickoffs;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_PASSES_DEFENDED = "PassesDefended";
  @SerializedName(SERIALIZED_NAME_PASSES_DEFENDED)
  private Integer passesDefended;

  public static final String SERIALIZED_NAME_PASSING_ATTEMPTS = "PassingAttempts";
  @SerializedName(SERIALIZED_NAME_PASSING_ATTEMPTS)
  private Integer passingAttempts;

  public static final String SERIALIZED_NAME_PASSING_COMPLETIONS = "PassingCompletions";
  @SerializedName(SERIALIZED_NAME_PASSING_COMPLETIONS)
  private Integer passingCompletions;

  public static final String SERIALIZED_NAME_PASSING_INTERCEPTIONS = "PassingInterceptions";
  @SerializedName(SERIALIZED_NAME_PASSING_INTERCEPTIONS)
  private Integer passingInterceptions;

  public static final String SERIALIZED_NAME_PASSING_SACK_YARDS = "PassingSackYards";
  @SerializedName(SERIALIZED_NAME_PASSING_SACK_YARDS)
  private Integer passingSackYards;

  public static final String SERIALIZED_NAME_PASSING_SACKS = "PassingSacks";
  @SerializedName(SERIALIZED_NAME_PASSING_SACKS)
  private Integer passingSacks;

  public static final String SERIALIZED_NAME_PASSING_TOUCHDOWNS = "PassingTouchdowns";
  @SerializedName(SERIALIZED_NAME_PASSING_TOUCHDOWNS)
  private Integer passingTouchdowns;

  public static final String SERIALIZED_NAME_PASSING_YARDS = "PassingYards";
  @SerializedName(SERIALIZED_NAME_PASSING_YARDS)
  private Integer passingYards;

  public static final String SERIALIZED_NAME_PENALTIES = "Penalties";
  @SerializedName(SERIALIZED_NAME_PENALTIES)
  private Integer penalties;

  public static final String SERIALIZED_NAME_PENALTY_YARDS = "PenaltyYards";
  @SerializedName(SERIALIZED_NAME_PENALTY_YARDS)
  private Integer penaltyYards;

  public static final String SERIALIZED_NAME_PLAY_I_D = "PlayID";
  @SerializedName(SERIALIZED_NAME_PLAY_I_D)
  private Integer playID;

  public static final String SERIALIZED_NAME_PLAY_STAT_I_D = "PlayStatID";
  @SerializedName(SERIALIZED_NAME_PLAY_STAT_I_D)
  private Integer playStatID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_PUNT_RETURN_TOUCHDOWNS = "PuntReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURN_TOUCHDOWNS)
  private Integer puntReturnTouchdowns;

  public static final String SERIALIZED_NAME_PUNT_RETURN_YARDS = "PuntReturnYards";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURN_YARDS)
  private Integer puntReturnYards;

  public static final String SERIALIZED_NAME_PUNT_RETURNS = "PuntReturns";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURNS)
  private Integer puntReturns;

  public static final String SERIALIZED_NAME_PUNT_TOUCHBACKS = "PuntTouchbacks";
  @SerializedName(SERIALIZED_NAME_PUNT_TOUCHBACKS)
  private Integer puntTouchbacks;

  public static final String SERIALIZED_NAME_PUNT_YARDS = "PuntYards";
  @SerializedName(SERIALIZED_NAME_PUNT_YARDS)
  private Integer puntYards;

  public static final String SERIALIZED_NAME_PUNTS = "Punts";
  @SerializedName(SERIALIZED_NAME_PUNTS)
  private Integer punts;

  public static final String SERIALIZED_NAME_PUNTS_HAD_BLOCKED = "PuntsHadBlocked";
  @SerializedName(SERIALIZED_NAME_PUNTS_HAD_BLOCKED)
  private Integer puntsHadBlocked;

  public static final String SERIALIZED_NAME_RECEIVING_TARGETS = "ReceivingTargets";
  @SerializedName(SERIALIZED_NAME_RECEIVING_TARGETS)
  private Integer receivingTargets;

  public static final String SERIALIZED_NAME_RECEIVING_TOUCHDOWNS = "ReceivingTouchdowns";
  @SerializedName(SERIALIZED_NAME_RECEIVING_TOUCHDOWNS)
  private Integer receivingTouchdowns;

  public static final String SERIALIZED_NAME_RECEIVING_YARDS = "ReceivingYards";
  @SerializedName(SERIALIZED_NAME_RECEIVING_YARDS)
  private Integer receivingYards;

  public static final String SERIALIZED_NAME_RECEPTIONS = "Receptions";
  @SerializedName(SERIALIZED_NAME_RECEPTIONS)
  private Integer receptions;

  public static final String SERIALIZED_NAME_RUSHING_ATTEMPTS = "RushingAttempts";
  @SerializedName(SERIALIZED_NAME_RUSHING_ATTEMPTS)
  private Integer rushingAttempts;

  public static final String SERIALIZED_NAME_RUSHING_TOUCHDOWNS = "RushingTouchdowns";
  @SerializedName(SERIALIZED_NAME_RUSHING_TOUCHDOWNS)
  private Integer rushingTouchdowns;

  public static final String SERIALIZED_NAME_RUSHING_YARDS = "RushingYards";
  @SerializedName(SERIALIZED_NAME_RUSHING_YARDS)
  private Integer rushingYards;

  public static final String SERIALIZED_NAME_SACK_YARDS = "SackYards";
  @SerializedName(SERIALIZED_NAME_SACK_YARDS)
  private BigDecimal sackYards;

  public static final String SERIALIZED_NAME_SACKS = "Sacks";
  @SerializedName(SERIALIZED_NAME_SACKS)
  private BigDecimal sacks;

  public static final String SERIALIZED_NAME_SAFETIES = "Safeties";
  @SerializedName(SERIALIZED_NAME_SAFETIES)
  private Integer safeties;

  public static final String SERIALIZED_NAME_SEQUENCE = "Sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_SOLO_TACKLES = "SoloTackles";
  @SerializedName(SERIALIZED_NAME_SOLO_TACKLES)
  private Integer soloTackles;

  public static final String SERIALIZED_NAME_TACKLES_FOR_LOSS = "TacklesForLoss";
  @SerializedName(SERIALIZED_NAME_TACKLES_FOR_LOSS)
  private Integer tacklesForLoss;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TWO_POINT_CONVERSION_ATTEMPTS = "TwoPointConversionAttempts";
  @SerializedName(SERIALIZED_NAME_TWO_POINT_CONVERSION_ATTEMPTS)
  private Integer twoPointConversionAttempts;

  public static final String SERIALIZED_NAME_TWO_POINT_CONVERSION_PASSES = "TwoPointConversionPasses";
  @SerializedName(SERIALIZED_NAME_TWO_POINT_CONVERSION_PASSES)
  private Integer twoPointConversionPasses;

  public static final String SERIALIZED_NAME_TWO_POINT_CONVERSION_RECEPTIONS = "TwoPointConversionReceptions";
  @SerializedName(SERIALIZED_NAME_TWO_POINT_CONVERSION_RECEPTIONS)
  private Integer twoPointConversionReceptions;

  public static final String SERIALIZED_NAME_TWO_POINT_CONVERSION_RETURNS = "TwoPointConversionReturns";
  @SerializedName(SERIALIZED_NAME_TWO_POINT_CONVERSION_RETURNS)
  private Integer twoPointConversionReturns;

  public static final String SERIALIZED_NAME_TWO_POINT_CONVERSION_RUNS = "TwoPointConversionRuns";
  @SerializedName(SERIALIZED_NAME_TWO_POINT_CONVERSION_RUNS)
  private Integer twoPointConversionRuns;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public PlayStat() {
  }

  public PlayStat assistedTackles(Integer assistedTackles) {
    this.assistedTackles = assistedTackles;
    return this;
  }

  /**
   * Get assistedTackles
   * @return assistedTackles
   */
  @javax.annotation.Nullable
  public Integer getAssistedTackles() {
    return assistedTackles;
  }

  public void setAssistedTackles(Integer assistedTackles) {
    this.assistedTackles = assistedTackles;
  }


  public PlayStat blockedKickReturnTouchdowns(Integer blockedKickReturnTouchdowns) {
    this.blockedKickReturnTouchdowns = blockedKickReturnTouchdowns;
    return this;
  }

  /**
   * Get blockedKickReturnTouchdowns
   * @return blockedKickReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getBlockedKickReturnTouchdowns() {
    return blockedKickReturnTouchdowns;
  }

  public void setBlockedKickReturnTouchdowns(Integer blockedKickReturnTouchdowns) {
    this.blockedKickReturnTouchdowns = blockedKickReturnTouchdowns;
  }


  public PlayStat blockedKickReturnYards(Integer blockedKickReturnYards) {
    this.blockedKickReturnYards = blockedKickReturnYards;
    return this;
  }

  /**
   * Get blockedKickReturnYards
   * @return blockedKickReturnYards
   */
  @javax.annotation.Nullable
  public Integer getBlockedKickReturnYards() {
    return blockedKickReturnYards;
  }

  public void setBlockedKickReturnYards(Integer blockedKickReturnYards) {
    this.blockedKickReturnYards = blockedKickReturnYards;
  }


  public PlayStat blockedKickReturns(Integer blockedKickReturns) {
    this.blockedKickReturns = blockedKickReturns;
    return this;
  }

  /**
   * Get blockedKickReturns
   * @return blockedKickReturns
   */
  @javax.annotation.Nullable
  public Integer getBlockedKickReturns() {
    return blockedKickReturns;
  }

  public void setBlockedKickReturns(Integer blockedKickReturns) {
    this.blockedKickReturns = blockedKickReturns;
  }


  public PlayStat blockedKicks(Integer blockedKicks) {
    this.blockedKicks = blockedKicks;
    return this;
  }

  /**
   * Get blockedKicks
   * @return blockedKicks
   */
  @javax.annotation.Nullable
  public Integer getBlockedKicks() {
    return blockedKicks;
  }

  public void setBlockedKicks(Integer blockedKicks) {
    this.blockedKicks = blockedKicks;
  }


  public PlayStat created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public PlayStat direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public PlayStat extraPointsAttempted(Integer extraPointsAttempted) {
    this.extraPointsAttempted = extraPointsAttempted;
    return this;
  }

  /**
   * Get extraPointsAttempted
   * @return extraPointsAttempted
   */
  @javax.annotation.Nullable
  public Integer getExtraPointsAttempted() {
    return extraPointsAttempted;
  }

  public void setExtraPointsAttempted(Integer extraPointsAttempted) {
    this.extraPointsAttempted = extraPointsAttempted;
  }


  public PlayStat extraPointsHadBlocked(Integer extraPointsHadBlocked) {
    this.extraPointsHadBlocked = extraPointsHadBlocked;
    return this;
  }

  /**
   * Get extraPointsHadBlocked
   * @return extraPointsHadBlocked
   */
  @javax.annotation.Nullable
  public Integer getExtraPointsHadBlocked() {
    return extraPointsHadBlocked;
  }

  public void setExtraPointsHadBlocked(Integer extraPointsHadBlocked) {
    this.extraPointsHadBlocked = extraPointsHadBlocked;
  }


  public PlayStat extraPointsMade(Integer extraPointsMade) {
    this.extraPointsMade = extraPointsMade;
    return this;
  }

  /**
   * Get extraPointsMade
   * @return extraPointsMade
   */
  @javax.annotation.Nullable
  public Integer getExtraPointsMade() {
    return extraPointsMade;
  }

  public void setExtraPointsMade(Integer extraPointsMade) {
    this.extraPointsMade = extraPointsMade;
  }


  public PlayStat fieldGoalReturnTouchdowns(Integer fieldGoalReturnTouchdowns) {
    this.fieldGoalReturnTouchdowns = fieldGoalReturnTouchdowns;
    return this;
  }

  /**
   * Get fieldGoalReturnTouchdowns
   * @return fieldGoalReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getFieldGoalReturnTouchdowns() {
    return fieldGoalReturnTouchdowns;
  }

  public void setFieldGoalReturnTouchdowns(Integer fieldGoalReturnTouchdowns) {
    this.fieldGoalReturnTouchdowns = fieldGoalReturnTouchdowns;
  }


  public PlayStat fieldGoalReturnYards(Integer fieldGoalReturnYards) {
    this.fieldGoalReturnYards = fieldGoalReturnYards;
    return this;
  }

  /**
   * Get fieldGoalReturnYards
   * @return fieldGoalReturnYards
   */
  @javax.annotation.Nullable
  public Integer getFieldGoalReturnYards() {
    return fieldGoalReturnYards;
  }

  public void setFieldGoalReturnYards(Integer fieldGoalReturnYards) {
    this.fieldGoalReturnYards = fieldGoalReturnYards;
  }


  public PlayStat fieldGoalReturns(Integer fieldGoalReturns) {
    this.fieldGoalReturns = fieldGoalReturns;
    return this;
  }

  /**
   * Get fieldGoalReturns
   * @return fieldGoalReturns
   */
  @javax.annotation.Nullable
  public Integer getFieldGoalReturns() {
    return fieldGoalReturns;
  }

  public void setFieldGoalReturns(Integer fieldGoalReturns) {
    this.fieldGoalReturns = fieldGoalReturns;
  }


  public PlayStat fieldGoalsAttempted(Integer fieldGoalsAttempted) {
    this.fieldGoalsAttempted = fieldGoalsAttempted;
    return this;
  }

  /**
   * Get fieldGoalsAttempted
   * @return fieldGoalsAttempted
   */
  @javax.annotation.Nullable
  public Integer getFieldGoalsAttempted() {
    return fieldGoalsAttempted;
  }

  public void setFieldGoalsAttempted(Integer fieldGoalsAttempted) {
    this.fieldGoalsAttempted = fieldGoalsAttempted;
  }


  public PlayStat fieldGoalsHadBlocked(Integer fieldGoalsHadBlocked) {
    this.fieldGoalsHadBlocked = fieldGoalsHadBlocked;
    return this;
  }

  /**
   * Get fieldGoalsHadBlocked
   * @return fieldGoalsHadBlocked
   */
  @javax.annotation.Nullable
  public Integer getFieldGoalsHadBlocked() {
    return fieldGoalsHadBlocked;
  }

  public void setFieldGoalsHadBlocked(Integer fieldGoalsHadBlocked) {
    this.fieldGoalsHadBlocked = fieldGoalsHadBlocked;
  }


  public PlayStat fieldGoalsMade(Integer fieldGoalsMade) {
    this.fieldGoalsMade = fieldGoalsMade;
    return this;
  }

  /**
   * Get fieldGoalsMade
   * @return fieldGoalsMade
   */
  @javax.annotation.Nullable
  public Integer getFieldGoalsMade() {
    return fieldGoalsMade;
  }

  public void setFieldGoalsMade(Integer fieldGoalsMade) {
    this.fieldGoalsMade = fieldGoalsMade;
  }


  public PlayStat fieldGoalsYards(Integer fieldGoalsYards) {
    this.fieldGoalsYards = fieldGoalsYards;
    return this;
  }

  /**
   * Get fieldGoalsYards
   * @return fieldGoalsYards
   */
  @javax.annotation.Nullable
  public Integer getFieldGoalsYards() {
    return fieldGoalsYards;
  }

  public void setFieldGoalsYards(Integer fieldGoalsYards) {
    this.fieldGoalsYards = fieldGoalsYards;
  }


  public PlayStat fumbleReturnTouchdowns(Integer fumbleReturnTouchdowns) {
    this.fumbleReturnTouchdowns = fumbleReturnTouchdowns;
    return this;
  }

  /**
   * Get fumbleReturnTouchdowns
   * @return fumbleReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getFumbleReturnTouchdowns() {
    return fumbleReturnTouchdowns;
  }

  public void setFumbleReturnTouchdowns(Integer fumbleReturnTouchdowns) {
    this.fumbleReturnTouchdowns = fumbleReturnTouchdowns;
  }


  public PlayStat fumbleReturnYards(Integer fumbleReturnYards) {
    this.fumbleReturnYards = fumbleReturnYards;
    return this;
  }

  /**
   * Get fumbleReturnYards
   * @return fumbleReturnYards
   */
  @javax.annotation.Nullable
  public Integer getFumbleReturnYards() {
    return fumbleReturnYards;
  }

  public void setFumbleReturnYards(Integer fumbleReturnYards) {
    this.fumbleReturnYards = fumbleReturnYards;
  }


  public PlayStat fumbles(Integer fumbles) {
    this.fumbles = fumbles;
    return this;
  }

  /**
   * Get fumbles
   * @return fumbles
   */
  @javax.annotation.Nullable
  public Integer getFumbles() {
    return fumbles;
  }

  public void setFumbles(Integer fumbles) {
    this.fumbles = fumbles;
  }


  public PlayStat fumblesForced(Integer fumblesForced) {
    this.fumblesForced = fumblesForced;
    return this;
  }

  /**
   * Get fumblesForced
   * @return fumblesForced
   */
  @javax.annotation.Nullable
  public Integer getFumblesForced() {
    return fumblesForced;
  }

  public void setFumblesForced(Integer fumblesForced) {
    this.fumblesForced = fumblesForced;
  }


  public PlayStat fumblesLost(Integer fumblesLost) {
    this.fumblesLost = fumblesLost;
    return this;
  }

  /**
   * Get fumblesLost
   * @return fumblesLost
   */
  @javax.annotation.Nullable
  public Integer getFumblesLost() {
    return fumblesLost;
  }

  public void setFumblesLost(Integer fumblesLost) {
    this.fumblesLost = fumblesLost;
  }


  public PlayStat fumblesRecovered(Integer fumblesRecovered) {
    this.fumblesRecovered = fumblesRecovered;
    return this;
  }

  /**
   * Get fumblesRecovered
   * @return fumblesRecovered
   */
  @javax.annotation.Nullable
  public Integer getFumblesRecovered() {
    return fumblesRecovered;
  }

  public void setFumblesRecovered(Integer fumblesRecovered) {
    this.fumblesRecovered = fumblesRecovered;
  }


  public PlayStat homeOrAway(String homeOrAway) {
    this.homeOrAway = homeOrAway;
    return this;
  }

  /**
   * Get homeOrAway
   * @return homeOrAway
   */
  @javax.annotation.Nullable
  public String getHomeOrAway() {
    return homeOrAway;
  }

  public void setHomeOrAway(String homeOrAway) {
    this.homeOrAway = homeOrAway;
  }


  public PlayStat interceptionReturnTouchdowns(Integer interceptionReturnTouchdowns) {
    this.interceptionReturnTouchdowns = interceptionReturnTouchdowns;
    return this;
  }

  /**
   * Get interceptionReturnTouchdowns
   * @return interceptionReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getInterceptionReturnTouchdowns() {
    return interceptionReturnTouchdowns;
  }

  public void setInterceptionReturnTouchdowns(Integer interceptionReturnTouchdowns) {
    this.interceptionReturnTouchdowns = interceptionReturnTouchdowns;
  }


  public PlayStat interceptionReturnYards(Integer interceptionReturnYards) {
    this.interceptionReturnYards = interceptionReturnYards;
    return this;
  }

  /**
   * Get interceptionReturnYards
   * @return interceptionReturnYards
   */
  @javax.annotation.Nullable
  public Integer getInterceptionReturnYards() {
    return interceptionReturnYards;
  }

  public void setInterceptionReturnYards(Integer interceptionReturnYards) {
    this.interceptionReturnYards = interceptionReturnYards;
  }


  public PlayStat interceptions(Integer interceptions) {
    this.interceptions = interceptions;
    return this;
  }

  /**
   * Get interceptions
   * @return interceptions
   */
  @javax.annotation.Nullable
  public Integer getInterceptions() {
    return interceptions;
  }

  public void setInterceptions(Integer interceptions) {
    this.interceptions = interceptions;
  }


  public PlayStat kickReturnTouchdowns(Integer kickReturnTouchdowns) {
    this.kickReturnTouchdowns = kickReturnTouchdowns;
    return this;
  }

  /**
   * Get kickReturnTouchdowns
   * @return kickReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getKickReturnTouchdowns() {
    return kickReturnTouchdowns;
  }

  public void setKickReturnTouchdowns(Integer kickReturnTouchdowns) {
    this.kickReturnTouchdowns = kickReturnTouchdowns;
  }


  public PlayStat kickReturnYards(Integer kickReturnYards) {
    this.kickReturnYards = kickReturnYards;
    return this;
  }

  /**
   * Get kickReturnYards
   * @return kickReturnYards
   */
  @javax.annotation.Nullable
  public Integer getKickReturnYards() {
    return kickReturnYards;
  }

  public void setKickReturnYards(Integer kickReturnYards) {
    this.kickReturnYards = kickReturnYards;
  }


  public PlayStat kickReturns(Integer kickReturns) {
    this.kickReturns = kickReturns;
    return this;
  }

  /**
   * Get kickReturns
   * @return kickReturns
   */
  @javax.annotation.Nullable
  public Integer getKickReturns() {
    return kickReturns;
  }

  public void setKickReturns(Integer kickReturns) {
    this.kickReturns = kickReturns;
  }


  public PlayStat kickoffTouchbacks(Integer kickoffTouchbacks) {
    this.kickoffTouchbacks = kickoffTouchbacks;
    return this;
  }

  /**
   * Get kickoffTouchbacks
   * @return kickoffTouchbacks
   */
  @javax.annotation.Nullable
  public Integer getKickoffTouchbacks() {
    return kickoffTouchbacks;
  }

  public void setKickoffTouchbacks(Integer kickoffTouchbacks) {
    this.kickoffTouchbacks = kickoffTouchbacks;
  }


  public PlayStat kickoffYards(Integer kickoffYards) {
    this.kickoffYards = kickoffYards;
    return this;
  }

  /**
   * Get kickoffYards
   * @return kickoffYards
   */
  @javax.annotation.Nullable
  public Integer getKickoffYards() {
    return kickoffYards;
  }

  public void setKickoffYards(Integer kickoffYards) {
    this.kickoffYards = kickoffYards;
  }


  public PlayStat kickoffs(Integer kickoffs) {
    this.kickoffs = kickoffs;
    return this;
  }

  /**
   * Get kickoffs
   * @return kickoffs
   */
  @javax.annotation.Nullable
  public Integer getKickoffs() {
    return kickoffs;
  }

  public void setKickoffs(Integer kickoffs) {
    this.kickoffs = kickoffs;
  }


  public PlayStat name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayStat opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public PlayStat passesDefended(Integer passesDefended) {
    this.passesDefended = passesDefended;
    return this;
  }

  /**
   * Get passesDefended
   * @return passesDefended
   */
  @javax.annotation.Nullable
  public Integer getPassesDefended() {
    return passesDefended;
  }

  public void setPassesDefended(Integer passesDefended) {
    this.passesDefended = passesDefended;
  }


  public PlayStat passingAttempts(Integer passingAttempts) {
    this.passingAttempts = passingAttempts;
    return this;
  }

  /**
   * Get passingAttempts
   * @return passingAttempts
   */
  @javax.annotation.Nullable
  public Integer getPassingAttempts() {
    return passingAttempts;
  }

  public void setPassingAttempts(Integer passingAttempts) {
    this.passingAttempts = passingAttempts;
  }


  public PlayStat passingCompletions(Integer passingCompletions) {
    this.passingCompletions = passingCompletions;
    return this;
  }

  /**
   * Get passingCompletions
   * @return passingCompletions
   */
  @javax.annotation.Nullable
  public Integer getPassingCompletions() {
    return passingCompletions;
  }

  public void setPassingCompletions(Integer passingCompletions) {
    this.passingCompletions = passingCompletions;
  }


  public PlayStat passingInterceptions(Integer passingInterceptions) {
    this.passingInterceptions = passingInterceptions;
    return this;
  }

  /**
   * Get passingInterceptions
   * @return passingInterceptions
   */
  @javax.annotation.Nullable
  public Integer getPassingInterceptions() {
    return passingInterceptions;
  }

  public void setPassingInterceptions(Integer passingInterceptions) {
    this.passingInterceptions = passingInterceptions;
  }


  public PlayStat passingSackYards(Integer passingSackYards) {
    this.passingSackYards = passingSackYards;
    return this;
  }

  /**
   * Get passingSackYards
   * @return passingSackYards
   */
  @javax.annotation.Nullable
  public Integer getPassingSackYards() {
    return passingSackYards;
  }

  public void setPassingSackYards(Integer passingSackYards) {
    this.passingSackYards = passingSackYards;
  }


  public PlayStat passingSacks(Integer passingSacks) {
    this.passingSacks = passingSacks;
    return this;
  }

  /**
   * Get passingSacks
   * @return passingSacks
   */
  @javax.annotation.Nullable
  public Integer getPassingSacks() {
    return passingSacks;
  }

  public void setPassingSacks(Integer passingSacks) {
    this.passingSacks = passingSacks;
  }


  public PlayStat passingTouchdowns(Integer passingTouchdowns) {
    this.passingTouchdowns = passingTouchdowns;
    return this;
  }

  /**
   * Get passingTouchdowns
   * @return passingTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getPassingTouchdowns() {
    return passingTouchdowns;
  }

  public void setPassingTouchdowns(Integer passingTouchdowns) {
    this.passingTouchdowns = passingTouchdowns;
  }


  public PlayStat passingYards(Integer passingYards) {
    this.passingYards = passingYards;
    return this;
  }

  /**
   * Get passingYards
   * @return passingYards
   */
  @javax.annotation.Nullable
  public Integer getPassingYards() {
    return passingYards;
  }

  public void setPassingYards(Integer passingYards) {
    this.passingYards = passingYards;
  }


  public PlayStat penalties(Integer penalties) {
    this.penalties = penalties;
    return this;
  }

  /**
   * Get penalties
   * @return penalties
   */
  @javax.annotation.Nullable
  public Integer getPenalties() {
    return penalties;
  }

  public void setPenalties(Integer penalties) {
    this.penalties = penalties;
  }


  public PlayStat penaltyYards(Integer penaltyYards) {
    this.penaltyYards = penaltyYards;
    return this;
  }

  /**
   * Get penaltyYards
   * @return penaltyYards
   */
  @javax.annotation.Nullable
  public Integer getPenaltyYards() {
    return penaltyYards;
  }

  public void setPenaltyYards(Integer penaltyYards) {
    this.penaltyYards = penaltyYards;
  }


  public PlayStat playID(Integer playID) {
    this.playID = playID;
    return this;
  }

  /**
   * Get playID
   * @return playID
   */
  @javax.annotation.Nullable
  public Integer getPlayID() {
    return playID;
  }

  public void setPlayID(Integer playID) {
    this.playID = playID;
  }


  public PlayStat playStatID(Integer playStatID) {
    this.playStatID = playStatID;
    return this;
  }

  /**
   * Get playStatID
   * @return playStatID
   */
  @javax.annotation.Nullable
  public Integer getPlayStatID() {
    return playStatID;
  }

  public void setPlayStatID(Integer playStatID) {
    this.playStatID = playStatID;
  }


  public PlayStat playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayStat puntReturnTouchdowns(Integer puntReturnTouchdowns) {
    this.puntReturnTouchdowns = puntReturnTouchdowns;
    return this;
  }

  /**
   * Get puntReturnTouchdowns
   * @return puntReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getPuntReturnTouchdowns() {
    return puntReturnTouchdowns;
  }

  public void setPuntReturnTouchdowns(Integer puntReturnTouchdowns) {
    this.puntReturnTouchdowns = puntReturnTouchdowns;
  }


  public PlayStat puntReturnYards(Integer puntReturnYards) {
    this.puntReturnYards = puntReturnYards;
    return this;
  }

  /**
   * Get puntReturnYards
   * @return puntReturnYards
   */
  @javax.annotation.Nullable
  public Integer getPuntReturnYards() {
    return puntReturnYards;
  }

  public void setPuntReturnYards(Integer puntReturnYards) {
    this.puntReturnYards = puntReturnYards;
  }


  public PlayStat puntReturns(Integer puntReturns) {
    this.puntReturns = puntReturns;
    return this;
  }

  /**
   * Get puntReturns
   * @return puntReturns
   */
  @javax.annotation.Nullable
  public Integer getPuntReturns() {
    return puntReturns;
  }

  public void setPuntReturns(Integer puntReturns) {
    this.puntReturns = puntReturns;
  }


  public PlayStat puntTouchbacks(Integer puntTouchbacks) {
    this.puntTouchbacks = puntTouchbacks;
    return this;
  }

  /**
   * Get puntTouchbacks
   * @return puntTouchbacks
   */
  @javax.annotation.Nullable
  public Integer getPuntTouchbacks() {
    return puntTouchbacks;
  }

  public void setPuntTouchbacks(Integer puntTouchbacks) {
    this.puntTouchbacks = puntTouchbacks;
  }


  public PlayStat puntYards(Integer puntYards) {
    this.puntYards = puntYards;
    return this;
  }

  /**
   * Get puntYards
   * @return puntYards
   */
  @javax.annotation.Nullable
  public Integer getPuntYards() {
    return puntYards;
  }

  public void setPuntYards(Integer puntYards) {
    this.puntYards = puntYards;
  }


  public PlayStat punts(Integer punts) {
    this.punts = punts;
    return this;
  }

  /**
   * Get punts
   * @return punts
   */
  @javax.annotation.Nullable
  public Integer getPunts() {
    return punts;
  }

  public void setPunts(Integer punts) {
    this.punts = punts;
  }


  public PlayStat puntsHadBlocked(Integer puntsHadBlocked) {
    this.puntsHadBlocked = puntsHadBlocked;
    return this;
  }

  /**
   * Get puntsHadBlocked
   * @return puntsHadBlocked
   */
  @javax.annotation.Nullable
  public Integer getPuntsHadBlocked() {
    return puntsHadBlocked;
  }

  public void setPuntsHadBlocked(Integer puntsHadBlocked) {
    this.puntsHadBlocked = puntsHadBlocked;
  }


  public PlayStat receivingTargets(Integer receivingTargets) {
    this.receivingTargets = receivingTargets;
    return this;
  }

  /**
   * Get receivingTargets
   * @return receivingTargets
   */
  @javax.annotation.Nullable
  public Integer getReceivingTargets() {
    return receivingTargets;
  }

  public void setReceivingTargets(Integer receivingTargets) {
    this.receivingTargets = receivingTargets;
  }


  public PlayStat receivingTouchdowns(Integer receivingTouchdowns) {
    this.receivingTouchdowns = receivingTouchdowns;
    return this;
  }

  /**
   * Get receivingTouchdowns
   * @return receivingTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getReceivingTouchdowns() {
    return receivingTouchdowns;
  }

  public void setReceivingTouchdowns(Integer receivingTouchdowns) {
    this.receivingTouchdowns = receivingTouchdowns;
  }


  public PlayStat receivingYards(Integer receivingYards) {
    this.receivingYards = receivingYards;
    return this;
  }

  /**
   * Get receivingYards
   * @return receivingYards
   */
  @javax.annotation.Nullable
  public Integer getReceivingYards() {
    return receivingYards;
  }

  public void setReceivingYards(Integer receivingYards) {
    this.receivingYards = receivingYards;
  }


  public PlayStat receptions(Integer receptions) {
    this.receptions = receptions;
    return this;
  }

  /**
   * Get receptions
   * @return receptions
   */
  @javax.annotation.Nullable
  public Integer getReceptions() {
    return receptions;
  }

  public void setReceptions(Integer receptions) {
    this.receptions = receptions;
  }


  public PlayStat rushingAttempts(Integer rushingAttempts) {
    this.rushingAttempts = rushingAttempts;
    return this;
  }

  /**
   * Get rushingAttempts
   * @return rushingAttempts
   */
  @javax.annotation.Nullable
  public Integer getRushingAttempts() {
    return rushingAttempts;
  }

  public void setRushingAttempts(Integer rushingAttempts) {
    this.rushingAttempts = rushingAttempts;
  }


  public PlayStat rushingTouchdowns(Integer rushingTouchdowns) {
    this.rushingTouchdowns = rushingTouchdowns;
    return this;
  }

  /**
   * Get rushingTouchdowns
   * @return rushingTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getRushingTouchdowns() {
    return rushingTouchdowns;
  }

  public void setRushingTouchdowns(Integer rushingTouchdowns) {
    this.rushingTouchdowns = rushingTouchdowns;
  }


  public PlayStat rushingYards(Integer rushingYards) {
    this.rushingYards = rushingYards;
    return this;
  }

  /**
   * Get rushingYards
   * @return rushingYards
   */
  @javax.annotation.Nullable
  public Integer getRushingYards() {
    return rushingYards;
  }

  public void setRushingYards(Integer rushingYards) {
    this.rushingYards = rushingYards;
  }


  public PlayStat sackYards(BigDecimal sackYards) {
    this.sackYards = sackYards;
    return this;
  }

  /**
   * Get sackYards
   * @return sackYards
   */
  @javax.annotation.Nullable
  public BigDecimal getSackYards() {
    return sackYards;
  }

  public void setSackYards(BigDecimal sackYards) {
    this.sackYards = sackYards;
  }


  public PlayStat sacks(BigDecimal sacks) {
    this.sacks = sacks;
    return this;
  }

  /**
   * Get sacks
   * @return sacks
   */
  @javax.annotation.Nullable
  public BigDecimal getSacks() {
    return sacks;
  }

  public void setSacks(BigDecimal sacks) {
    this.sacks = sacks;
  }


  public PlayStat safeties(Integer safeties) {
    this.safeties = safeties;
    return this;
  }

  /**
   * Get safeties
   * @return safeties
   */
  @javax.annotation.Nullable
  public Integer getSafeties() {
    return safeties;
  }

  public void setSafeties(Integer safeties) {
    this.safeties = safeties;
  }


  public PlayStat sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public PlayStat soloTackles(Integer soloTackles) {
    this.soloTackles = soloTackles;
    return this;
  }

  /**
   * Get soloTackles
   * @return soloTackles
   */
  @javax.annotation.Nullable
  public Integer getSoloTackles() {
    return soloTackles;
  }

  public void setSoloTackles(Integer soloTackles) {
    this.soloTackles = soloTackles;
  }


  public PlayStat tacklesForLoss(Integer tacklesForLoss) {
    this.tacklesForLoss = tacklesForLoss;
    return this;
  }

  /**
   * Get tacklesForLoss
   * @return tacklesForLoss
   */
  @javax.annotation.Nullable
  public Integer getTacklesForLoss() {
    return tacklesForLoss;
  }

  public void setTacklesForLoss(Integer tacklesForLoss) {
    this.tacklesForLoss = tacklesForLoss;
  }


  public PlayStat team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayStat twoPointConversionAttempts(Integer twoPointConversionAttempts) {
    this.twoPointConversionAttempts = twoPointConversionAttempts;
    return this;
  }

  /**
   * Get twoPointConversionAttempts
   * @return twoPointConversionAttempts
   */
  @javax.annotation.Nullable
  public Integer getTwoPointConversionAttempts() {
    return twoPointConversionAttempts;
  }

  public void setTwoPointConversionAttempts(Integer twoPointConversionAttempts) {
    this.twoPointConversionAttempts = twoPointConversionAttempts;
  }


  public PlayStat twoPointConversionPasses(Integer twoPointConversionPasses) {
    this.twoPointConversionPasses = twoPointConversionPasses;
    return this;
  }

  /**
   * Get twoPointConversionPasses
   * @return twoPointConversionPasses
   */
  @javax.annotation.Nullable
  public Integer getTwoPointConversionPasses() {
    return twoPointConversionPasses;
  }

  public void setTwoPointConversionPasses(Integer twoPointConversionPasses) {
    this.twoPointConversionPasses = twoPointConversionPasses;
  }


  public PlayStat twoPointConversionReceptions(Integer twoPointConversionReceptions) {
    this.twoPointConversionReceptions = twoPointConversionReceptions;
    return this;
  }

  /**
   * Get twoPointConversionReceptions
   * @return twoPointConversionReceptions
   */
  @javax.annotation.Nullable
  public Integer getTwoPointConversionReceptions() {
    return twoPointConversionReceptions;
  }

  public void setTwoPointConversionReceptions(Integer twoPointConversionReceptions) {
    this.twoPointConversionReceptions = twoPointConversionReceptions;
  }


  public PlayStat twoPointConversionReturns(Integer twoPointConversionReturns) {
    this.twoPointConversionReturns = twoPointConversionReturns;
    return this;
  }

  /**
   * Get twoPointConversionReturns
   * @return twoPointConversionReturns
   */
  @javax.annotation.Nullable
  public Integer getTwoPointConversionReturns() {
    return twoPointConversionReturns;
  }

  public void setTwoPointConversionReturns(Integer twoPointConversionReturns) {
    this.twoPointConversionReturns = twoPointConversionReturns;
  }


  public PlayStat twoPointConversionRuns(Integer twoPointConversionRuns) {
    this.twoPointConversionRuns = twoPointConversionRuns;
    return this;
  }

  /**
   * Get twoPointConversionRuns
   * @return twoPointConversionRuns
   */
  @javax.annotation.Nullable
  public Integer getTwoPointConversionRuns() {
    return twoPointConversionRuns;
  }

  public void setTwoPointConversionRuns(Integer twoPointConversionRuns) {
    this.twoPointConversionRuns = twoPointConversionRuns;
  }


  public PlayStat updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayStat playStat = (PlayStat) o;
    return Objects.equals(this.assistedTackles, playStat.assistedTackles) &&
        Objects.equals(this.blockedKickReturnTouchdowns, playStat.blockedKickReturnTouchdowns) &&
        Objects.equals(this.blockedKickReturnYards, playStat.blockedKickReturnYards) &&
        Objects.equals(this.blockedKickReturns, playStat.blockedKickReturns) &&
        Objects.equals(this.blockedKicks, playStat.blockedKicks) &&
        Objects.equals(this.created, playStat.created) &&
        Objects.equals(this.direction, playStat.direction) &&
        Objects.equals(this.extraPointsAttempted, playStat.extraPointsAttempted) &&
        Objects.equals(this.extraPointsHadBlocked, playStat.extraPointsHadBlocked) &&
        Objects.equals(this.extraPointsMade, playStat.extraPointsMade) &&
        Objects.equals(this.fieldGoalReturnTouchdowns, playStat.fieldGoalReturnTouchdowns) &&
        Objects.equals(this.fieldGoalReturnYards, playStat.fieldGoalReturnYards) &&
        Objects.equals(this.fieldGoalReturns, playStat.fieldGoalReturns) &&
        Objects.equals(this.fieldGoalsAttempted, playStat.fieldGoalsAttempted) &&
        Objects.equals(this.fieldGoalsHadBlocked, playStat.fieldGoalsHadBlocked) &&
        Objects.equals(this.fieldGoalsMade, playStat.fieldGoalsMade) &&
        Objects.equals(this.fieldGoalsYards, playStat.fieldGoalsYards) &&
        Objects.equals(this.fumbleReturnTouchdowns, playStat.fumbleReturnTouchdowns) &&
        Objects.equals(this.fumbleReturnYards, playStat.fumbleReturnYards) &&
        Objects.equals(this.fumbles, playStat.fumbles) &&
        Objects.equals(this.fumblesForced, playStat.fumblesForced) &&
        Objects.equals(this.fumblesLost, playStat.fumblesLost) &&
        Objects.equals(this.fumblesRecovered, playStat.fumblesRecovered) &&
        Objects.equals(this.homeOrAway, playStat.homeOrAway) &&
        Objects.equals(this.interceptionReturnTouchdowns, playStat.interceptionReturnTouchdowns) &&
        Objects.equals(this.interceptionReturnYards, playStat.interceptionReturnYards) &&
        Objects.equals(this.interceptions, playStat.interceptions) &&
        Objects.equals(this.kickReturnTouchdowns, playStat.kickReturnTouchdowns) &&
        Objects.equals(this.kickReturnYards, playStat.kickReturnYards) &&
        Objects.equals(this.kickReturns, playStat.kickReturns) &&
        Objects.equals(this.kickoffTouchbacks, playStat.kickoffTouchbacks) &&
        Objects.equals(this.kickoffYards, playStat.kickoffYards) &&
        Objects.equals(this.kickoffs, playStat.kickoffs) &&
        Objects.equals(this.name, playStat.name) &&
        Objects.equals(this.opponent, playStat.opponent) &&
        Objects.equals(this.passesDefended, playStat.passesDefended) &&
        Objects.equals(this.passingAttempts, playStat.passingAttempts) &&
        Objects.equals(this.passingCompletions, playStat.passingCompletions) &&
        Objects.equals(this.passingInterceptions, playStat.passingInterceptions) &&
        Objects.equals(this.passingSackYards, playStat.passingSackYards) &&
        Objects.equals(this.passingSacks, playStat.passingSacks) &&
        Objects.equals(this.passingTouchdowns, playStat.passingTouchdowns) &&
        Objects.equals(this.passingYards, playStat.passingYards) &&
        Objects.equals(this.penalties, playStat.penalties) &&
        Objects.equals(this.penaltyYards, playStat.penaltyYards) &&
        Objects.equals(this.playID, playStat.playID) &&
        Objects.equals(this.playStatID, playStat.playStatID) &&
        Objects.equals(this.playerID, playStat.playerID) &&
        Objects.equals(this.puntReturnTouchdowns, playStat.puntReturnTouchdowns) &&
        Objects.equals(this.puntReturnYards, playStat.puntReturnYards) &&
        Objects.equals(this.puntReturns, playStat.puntReturns) &&
        Objects.equals(this.puntTouchbacks, playStat.puntTouchbacks) &&
        Objects.equals(this.puntYards, playStat.puntYards) &&
        Objects.equals(this.punts, playStat.punts) &&
        Objects.equals(this.puntsHadBlocked, playStat.puntsHadBlocked) &&
        Objects.equals(this.receivingTargets, playStat.receivingTargets) &&
        Objects.equals(this.receivingTouchdowns, playStat.receivingTouchdowns) &&
        Objects.equals(this.receivingYards, playStat.receivingYards) &&
        Objects.equals(this.receptions, playStat.receptions) &&
        Objects.equals(this.rushingAttempts, playStat.rushingAttempts) &&
        Objects.equals(this.rushingTouchdowns, playStat.rushingTouchdowns) &&
        Objects.equals(this.rushingYards, playStat.rushingYards) &&
        Objects.equals(this.sackYards, playStat.sackYards) &&
        Objects.equals(this.sacks, playStat.sacks) &&
        Objects.equals(this.safeties, playStat.safeties) &&
        Objects.equals(this.sequence, playStat.sequence) &&
        Objects.equals(this.soloTackles, playStat.soloTackles) &&
        Objects.equals(this.tacklesForLoss, playStat.tacklesForLoss) &&
        Objects.equals(this.team, playStat.team) &&
        Objects.equals(this.twoPointConversionAttempts, playStat.twoPointConversionAttempts) &&
        Objects.equals(this.twoPointConversionPasses, playStat.twoPointConversionPasses) &&
        Objects.equals(this.twoPointConversionReceptions, playStat.twoPointConversionReceptions) &&
        Objects.equals(this.twoPointConversionReturns, playStat.twoPointConversionReturns) &&
        Objects.equals(this.twoPointConversionRuns, playStat.twoPointConversionRuns) &&
        Objects.equals(this.updated, playStat.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistedTackles, blockedKickReturnTouchdowns, blockedKickReturnYards, blockedKickReturns, blockedKicks, created, direction, extraPointsAttempted, extraPointsHadBlocked, extraPointsMade, fieldGoalReturnTouchdowns, fieldGoalReturnYards, fieldGoalReturns, fieldGoalsAttempted, fieldGoalsHadBlocked, fieldGoalsMade, fieldGoalsYards, fumbleReturnTouchdowns, fumbleReturnYards, fumbles, fumblesForced, fumblesLost, fumblesRecovered, homeOrAway, interceptionReturnTouchdowns, interceptionReturnYards, interceptions, kickReturnTouchdowns, kickReturnYards, kickReturns, kickoffTouchbacks, kickoffYards, kickoffs, name, opponent, passesDefended, passingAttempts, passingCompletions, passingInterceptions, passingSackYards, passingSacks, passingTouchdowns, passingYards, penalties, penaltyYards, playID, playStatID, playerID, puntReturnTouchdowns, puntReturnYards, puntReturns, puntTouchbacks, puntYards, punts, puntsHadBlocked, receivingTargets, receivingTouchdowns, receivingYards, receptions, rushingAttempts, rushingTouchdowns, rushingYards, sackYards, sacks, safeties, sequence, soloTackles, tacklesForLoss, team, twoPointConversionAttempts, twoPointConversionPasses, twoPointConversionReceptions, twoPointConversionReturns, twoPointConversionRuns, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayStat {\n");
    sb.append("    assistedTackles: ").append(toIndentedString(assistedTackles)).append("\n");
    sb.append("    blockedKickReturnTouchdowns: ").append(toIndentedString(blockedKickReturnTouchdowns)).append("\n");
    sb.append("    blockedKickReturnYards: ").append(toIndentedString(blockedKickReturnYards)).append("\n");
    sb.append("    blockedKickReturns: ").append(toIndentedString(blockedKickReturns)).append("\n");
    sb.append("    blockedKicks: ").append(toIndentedString(blockedKicks)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    extraPointsAttempted: ").append(toIndentedString(extraPointsAttempted)).append("\n");
    sb.append("    extraPointsHadBlocked: ").append(toIndentedString(extraPointsHadBlocked)).append("\n");
    sb.append("    extraPointsMade: ").append(toIndentedString(extraPointsMade)).append("\n");
    sb.append("    fieldGoalReturnTouchdowns: ").append(toIndentedString(fieldGoalReturnTouchdowns)).append("\n");
    sb.append("    fieldGoalReturnYards: ").append(toIndentedString(fieldGoalReturnYards)).append("\n");
    sb.append("    fieldGoalReturns: ").append(toIndentedString(fieldGoalReturns)).append("\n");
    sb.append("    fieldGoalsAttempted: ").append(toIndentedString(fieldGoalsAttempted)).append("\n");
    sb.append("    fieldGoalsHadBlocked: ").append(toIndentedString(fieldGoalsHadBlocked)).append("\n");
    sb.append("    fieldGoalsMade: ").append(toIndentedString(fieldGoalsMade)).append("\n");
    sb.append("    fieldGoalsYards: ").append(toIndentedString(fieldGoalsYards)).append("\n");
    sb.append("    fumbleReturnTouchdowns: ").append(toIndentedString(fumbleReturnTouchdowns)).append("\n");
    sb.append("    fumbleReturnYards: ").append(toIndentedString(fumbleReturnYards)).append("\n");
    sb.append("    fumbles: ").append(toIndentedString(fumbles)).append("\n");
    sb.append("    fumblesForced: ").append(toIndentedString(fumblesForced)).append("\n");
    sb.append("    fumblesLost: ").append(toIndentedString(fumblesLost)).append("\n");
    sb.append("    fumblesRecovered: ").append(toIndentedString(fumblesRecovered)).append("\n");
    sb.append("    homeOrAway: ").append(toIndentedString(homeOrAway)).append("\n");
    sb.append("    interceptionReturnTouchdowns: ").append(toIndentedString(interceptionReturnTouchdowns)).append("\n");
    sb.append("    interceptionReturnYards: ").append(toIndentedString(interceptionReturnYards)).append("\n");
    sb.append("    interceptions: ").append(toIndentedString(interceptions)).append("\n");
    sb.append("    kickReturnTouchdowns: ").append(toIndentedString(kickReturnTouchdowns)).append("\n");
    sb.append("    kickReturnYards: ").append(toIndentedString(kickReturnYards)).append("\n");
    sb.append("    kickReturns: ").append(toIndentedString(kickReturns)).append("\n");
    sb.append("    kickoffTouchbacks: ").append(toIndentedString(kickoffTouchbacks)).append("\n");
    sb.append("    kickoffYards: ").append(toIndentedString(kickoffYards)).append("\n");
    sb.append("    kickoffs: ").append(toIndentedString(kickoffs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    passesDefended: ").append(toIndentedString(passesDefended)).append("\n");
    sb.append("    passingAttempts: ").append(toIndentedString(passingAttempts)).append("\n");
    sb.append("    passingCompletions: ").append(toIndentedString(passingCompletions)).append("\n");
    sb.append("    passingInterceptions: ").append(toIndentedString(passingInterceptions)).append("\n");
    sb.append("    passingSackYards: ").append(toIndentedString(passingSackYards)).append("\n");
    sb.append("    passingSacks: ").append(toIndentedString(passingSacks)).append("\n");
    sb.append("    passingTouchdowns: ").append(toIndentedString(passingTouchdowns)).append("\n");
    sb.append("    passingYards: ").append(toIndentedString(passingYards)).append("\n");
    sb.append("    penalties: ").append(toIndentedString(penalties)).append("\n");
    sb.append("    penaltyYards: ").append(toIndentedString(penaltyYards)).append("\n");
    sb.append("    playID: ").append(toIndentedString(playID)).append("\n");
    sb.append("    playStatID: ").append(toIndentedString(playStatID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    puntReturnTouchdowns: ").append(toIndentedString(puntReturnTouchdowns)).append("\n");
    sb.append("    puntReturnYards: ").append(toIndentedString(puntReturnYards)).append("\n");
    sb.append("    puntReturns: ").append(toIndentedString(puntReturns)).append("\n");
    sb.append("    puntTouchbacks: ").append(toIndentedString(puntTouchbacks)).append("\n");
    sb.append("    puntYards: ").append(toIndentedString(puntYards)).append("\n");
    sb.append("    punts: ").append(toIndentedString(punts)).append("\n");
    sb.append("    puntsHadBlocked: ").append(toIndentedString(puntsHadBlocked)).append("\n");
    sb.append("    receivingTargets: ").append(toIndentedString(receivingTargets)).append("\n");
    sb.append("    receivingTouchdowns: ").append(toIndentedString(receivingTouchdowns)).append("\n");
    sb.append("    receivingYards: ").append(toIndentedString(receivingYards)).append("\n");
    sb.append("    receptions: ").append(toIndentedString(receptions)).append("\n");
    sb.append("    rushingAttempts: ").append(toIndentedString(rushingAttempts)).append("\n");
    sb.append("    rushingTouchdowns: ").append(toIndentedString(rushingTouchdowns)).append("\n");
    sb.append("    rushingYards: ").append(toIndentedString(rushingYards)).append("\n");
    sb.append("    sackYards: ").append(toIndentedString(sackYards)).append("\n");
    sb.append("    sacks: ").append(toIndentedString(sacks)).append("\n");
    sb.append("    safeties: ").append(toIndentedString(safeties)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    soloTackles: ").append(toIndentedString(soloTackles)).append("\n");
    sb.append("    tacklesForLoss: ").append(toIndentedString(tacklesForLoss)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    twoPointConversionAttempts: ").append(toIndentedString(twoPointConversionAttempts)).append("\n");
    sb.append("    twoPointConversionPasses: ").append(toIndentedString(twoPointConversionPasses)).append("\n");
    sb.append("    twoPointConversionReceptions: ").append(toIndentedString(twoPointConversionReceptions)).append("\n");
    sb.append("    twoPointConversionReturns: ").append(toIndentedString(twoPointConversionReturns)).append("\n");
    sb.append("    twoPointConversionRuns: ").append(toIndentedString(twoPointConversionRuns)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssistedTackles");
    openapiFields.add("BlockedKickReturnTouchdowns");
    openapiFields.add("BlockedKickReturnYards");
    openapiFields.add("BlockedKickReturns");
    openapiFields.add("BlockedKicks");
    openapiFields.add("Created");
    openapiFields.add("Direction");
    openapiFields.add("ExtraPointsAttempted");
    openapiFields.add("ExtraPointsHadBlocked");
    openapiFields.add("ExtraPointsMade");
    openapiFields.add("FieldGoalReturnTouchdowns");
    openapiFields.add("FieldGoalReturnYards");
    openapiFields.add("FieldGoalReturns");
    openapiFields.add("FieldGoalsAttempted");
    openapiFields.add("FieldGoalsHadBlocked");
    openapiFields.add("FieldGoalsMade");
    openapiFields.add("FieldGoalsYards");
    openapiFields.add("FumbleReturnTouchdowns");
    openapiFields.add("FumbleReturnYards");
    openapiFields.add("Fumbles");
    openapiFields.add("FumblesForced");
    openapiFields.add("FumblesLost");
    openapiFields.add("FumblesRecovered");
    openapiFields.add("HomeOrAway");
    openapiFields.add("InterceptionReturnTouchdowns");
    openapiFields.add("InterceptionReturnYards");
    openapiFields.add("Interceptions");
    openapiFields.add("KickReturnTouchdowns");
    openapiFields.add("KickReturnYards");
    openapiFields.add("KickReturns");
    openapiFields.add("KickoffTouchbacks");
    openapiFields.add("KickoffYards");
    openapiFields.add("Kickoffs");
    openapiFields.add("Name");
    openapiFields.add("Opponent");
    openapiFields.add("PassesDefended");
    openapiFields.add("PassingAttempts");
    openapiFields.add("PassingCompletions");
    openapiFields.add("PassingInterceptions");
    openapiFields.add("PassingSackYards");
    openapiFields.add("PassingSacks");
    openapiFields.add("PassingTouchdowns");
    openapiFields.add("PassingYards");
    openapiFields.add("Penalties");
    openapiFields.add("PenaltyYards");
    openapiFields.add("PlayID");
    openapiFields.add("PlayStatID");
    openapiFields.add("PlayerID");
    openapiFields.add("PuntReturnTouchdowns");
    openapiFields.add("PuntReturnYards");
    openapiFields.add("PuntReturns");
    openapiFields.add("PuntTouchbacks");
    openapiFields.add("PuntYards");
    openapiFields.add("Punts");
    openapiFields.add("PuntsHadBlocked");
    openapiFields.add("ReceivingTargets");
    openapiFields.add("ReceivingTouchdowns");
    openapiFields.add("ReceivingYards");
    openapiFields.add("Receptions");
    openapiFields.add("RushingAttempts");
    openapiFields.add("RushingTouchdowns");
    openapiFields.add("RushingYards");
    openapiFields.add("SackYards");
    openapiFields.add("Sacks");
    openapiFields.add("Safeties");
    openapiFields.add("Sequence");
    openapiFields.add("SoloTackles");
    openapiFields.add("TacklesForLoss");
    openapiFields.add("Team");
    openapiFields.add("TwoPointConversionAttempts");
    openapiFields.add("TwoPointConversionPasses");
    openapiFields.add("TwoPointConversionReceptions");
    openapiFields.add("TwoPointConversionReturns");
    openapiFields.add("TwoPointConversionRuns");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayStat is not found in the empty JSON string", PlayStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) && !jsonObj.get("Created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Created").toString()));
      }
      if ((jsonObj.get("Direction") != null && !jsonObj.get("Direction").isJsonNull()) && !jsonObj.get("Direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Direction").toString()));
      }
      if ((jsonObj.get("HomeOrAway") != null && !jsonObj.get("HomeOrAway").isJsonNull()) && !jsonObj.get("HomeOrAway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeOrAway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeOrAway").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayStat.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayStat>() {
           @Override
           public void write(JsonWriter out, PlayStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayStat
   * @throws IOException if the JSON string is invalid with respect to PlayStat
   */
  public static PlayStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayStat.class);
  }

  /**
   * Convert an instance of PlayStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

