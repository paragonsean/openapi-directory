# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Quarter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, away_team_score: int=None, created: str=None, description: str=None, home_team_score: int=None, name: str=None, number: int=None, quarter_id: int=None, score_id: int=None, updated: str=None):
        """Quarter - a model defined in OpenAPI

        :param away_team_score: The away_team_score of this Quarter.
        :param created: The created of this Quarter.
        :param description: The description of this Quarter.
        :param home_team_score: The home_team_score of this Quarter.
        :param name: The name of this Quarter.
        :param number: The number of this Quarter.
        :param quarter_id: The quarter_id of this Quarter.
        :param score_id: The score_id of this Quarter.
        :param updated: The updated of this Quarter.
        """
        self.openapi_types = {
            'away_team_score': int,
            'created': str,
            'description': str,
            'home_team_score': int,
            'name': str,
            'number': int,
            'quarter_id': int,
            'score_id': int,
            'updated': str
        }

        self.attribute_map = {
            'away_team_score': 'AwayTeamScore',
            'created': 'Created',
            'description': 'Description',
            'home_team_score': 'HomeTeamScore',
            'name': 'Name',
            'number': 'Number',
            'quarter_id': 'QuarterID',
            'score_id': 'ScoreID',
            'updated': 'Updated'
        }

        self._away_team_score = away_team_score
        self._created = created
        self._description = description
        self._home_team_score = home_team_score
        self._name = name
        self._number = number
        self._quarter_id = quarter_id
        self._score_id = score_id
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quarter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quarter of this Quarter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def away_team_score(self):
        """Gets the away_team_score of this Quarter.


        :return: The away_team_score of this Quarter.
        :rtype: int
        """
        return self._away_team_score

    @away_team_score.setter
    def away_team_score(self, away_team_score):
        """Sets the away_team_score of this Quarter.


        :param away_team_score: The away_team_score of this Quarter.
        :type away_team_score: int
        """

        self._away_team_score = away_team_score

    @property
    def created(self):
        """Gets the created of this Quarter.


        :return: The created of this Quarter.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Quarter.


        :param created: The created of this Quarter.
        :type created: str
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Quarter.


        :return: The description of this Quarter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Quarter.


        :param description: The description of this Quarter.
        :type description: str
        """

        self._description = description

    @property
    def home_team_score(self):
        """Gets the home_team_score of this Quarter.


        :return: The home_team_score of this Quarter.
        :rtype: int
        """
        return self._home_team_score

    @home_team_score.setter
    def home_team_score(self, home_team_score):
        """Sets the home_team_score of this Quarter.


        :param home_team_score: The home_team_score of this Quarter.
        :type home_team_score: int
        """

        self._home_team_score = home_team_score

    @property
    def name(self):
        """Gets the name of this Quarter.


        :return: The name of this Quarter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Quarter.


        :param name: The name of this Quarter.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this Quarter.


        :return: The number of this Quarter.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Quarter.


        :param number: The number of this Quarter.
        :type number: int
        """

        self._number = number

    @property
    def quarter_id(self):
        """Gets the quarter_id of this Quarter.


        :return: The quarter_id of this Quarter.
        :rtype: int
        """
        return self._quarter_id

    @quarter_id.setter
    def quarter_id(self, quarter_id):
        """Sets the quarter_id of this Quarter.


        :param quarter_id: The quarter_id of this Quarter.
        :type quarter_id: int
        """

        self._quarter_id = quarter_id

    @property
    def score_id(self):
        """Gets the score_id of this Quarter.


        :return: The score_id of this Quarter.
        :rtype: int
        """
        return self._score_id

    @score_id.setter
    def score_id(self, score_id):
        """Sets the score_id of this Quarter.


        :param score_id: The score_id of this Quarter.
        :type score_id: int
        """

        self._score_id = score_id

    @property
    def updated(self):
        """Gets the updated of this Quarter.


        :return: The updated of this Quarter.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Quarter.


        :param updated: The updated of this Quarter.
        :type updated: str
        """

        self._updated = updated
