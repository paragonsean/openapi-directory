/**
 * NFL v3 Play-by-Play
 * NFL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayStat::OAIPlayStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayStat::OAIPlayStat() {
    this->initializeModel();
}

OAIPlayStat::~OAIPlayStat() {}

void OAIPlayStat::initializeModel() {

    m_assisted_tackles_isSet = false;
    m_assisted_tackles_isValid = false;

    m_blocked_kick_return_touchdowns_isSet = false;
    m_blocked_kick_return_touchdowns_isValid = false;

    m_blocked_kick_return_yards_isSet = false;
    m_blocked_kick_return_yards_isValid = false;

    m_blocked_kick_returns_isSet = false;
    m_blocked_kick_returns_isValid = false;

    m_blocked_kicks_isSet = false;
    m_blocked_kicks_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_extra_points_attempted_isSet = false;
    m_extra_points_attempted_isValid = false;

    m_extra_points_had_blocked_isSet = false;
    m_extra_points_had_blocked_isValid = false;

    m_extra_points_made_isSet = false;
    m_extra_points_made_isValid = false;

    m_field_goal_return_touchdowns_isSet = false;
    m_field_goal_return_touchdowns_isValid = false;

    m_field_goal_return_yards_isSet = false;
    m_field_goal_return_yards_isValid = false;

    m_field_goal_returns_isSet = false;
    m_field_goal_returns_isValid = false;

    m_field_goals_attempted_isSet = false;
    m_field_goals_attempted_isValid = false;

    m_field_goals_had_blocked_isSet = false;
    m_field_goals_had_blocked_isValid = false;

    m_field_goals_made_isSet = false;
    m_field_goals_made_isValid = false;

    m_field_goals_yards_isSet = false;
    m_field_goals_yards_isValid = false;

    m_fumble_return_touchdowns_isSet = false;
    m_fumble_return_touchdowns_isValid = false;

    m_fumble_return_yards_isSet = false;
    m_fumble_return_yards_isValid = false;

    m_fumbles_isSet = false;
    m_fumbles_isValid = false;

    m_fumbles_forced_isSet = false;
    m_fumbles_forced_isValid = false;

    m_fumbles_lost_isSet = false;
    m_fumbles_lost_isValid = false;

    m_fumbles_recovered_isSet = false;
    m_fumbles_recovered_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_interception_return_touchdowns_isSet = false;
    m_interception_return_touchdowns_isValid = false;

    m_interception_return_yards_isSet = false;
    m_interception_return_yards_isValid = false;

    m_interceptions_isSet = false;
    m_interceptions_isValid = false;

    m_kick_return_touchdowns_isSet = false;
    m_kick_return_touchdowns_isValid = false;

    m_kick_return_yards_isSet = false;
    m_kick_return_yards_isValid = false;

    m_kick_returns_isSet = false;
    m_kick_returns_isValid = false;

    m_kickoff_touchbacks_isSet = false;
    m_kickoff_touchbacks_isValid = false;

    m_kickoff_yards_isSet = false;
    m_kickoff_yards_isValid = false;

    m_kickoffs_isSet = false;
    m_kickoffs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_passes_defended_isSet = false;
    m_passes_defended_isValid = false;

    m_passing_attempts_isSet = false;
    m_passing_attempts_isValid = false;

    m_passing_completions_isSet = false;
    m_passing_completions_isValid = false;

    m_passing_interceptions_isSet = false;
    m_passing_interceptions_isValid = false;

    m_passing_sack_yards_isSet = false;
    m_passing_sack_yards_isValid = false;

    m_passing_sacks_isSet = false;
    m_passing_sacks_isValid = false;

    m_passing_touchdowns_isSet = false;
    m_passing_touchdowns_isValid = false;

    m_passing_yards_isSet = false;
    m_passing_yards_isValid = false;

    m_penalties_isSet = false;
    m_penalties_isValid = false;

    m_penalty_yards_isSet = false;
    m_penalty_yards_isValid = false;

    m_play_id_isSet = false;
    m_play_id_isValid = false;

    m_play_stat_id_isSet = false;
    m_play_stat_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_punt_return_touchdowns_isSet = false;
    m_punt_return_touchdowns_isValid = false;

    m_punt_return_yards_isSet = false;
    m_punt_return_yards_isValid = false;

    m_punt_returns_isSet = false;
    m_punt_returns_isValid = false;

    m_punt_touchbacks_isSet = false;
    m_punt_touchbacks_isValid = false;

    m_punt_yards_isSet = false;
    m_punt_yards_isValid = false;

    m_punts_isSet = false;
    m_punts_isValid = false;

    m_punts_had_blocked_isSet = false;
    m_punts_had_blocked_isValid = false;

    m_receiving_targets_isSet = false;
    m_receiving_targets_isValid = false;

    m_receiving_touchdowns_isSet = false;
    m_receiving_touchdowns_isValid = false;

    m_receiving_yards_isSet = false;
    m_receiving_yards_isValid = false;

    m_receptions_isSet = false;
    m_receptions_isValid = false;

    m_rushing_attempts_isSet = false;
    m_rushing_attempts_isValid = false;

    m_rushing_touchdowns_isSet = false;
    m_rushing_touchdowns_isValid = false;

    m_rushing_yards_isSet = false;
    m_rushing_yards_isValid = false;

    m_sack_yards_isSet = false;
    m_sack_yards_isValid = false;

    m_sacks_isSet = false;
    m_sacks_isValid = false;

    m_safeties_isSet = false;
    m_safeties_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_solo_tackles_isSet = false;
    m_solo_tackles_isValid = false;

    m_tackles_for_loss_isSet = false;
    m_tackles_for_loss_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_two_point_conversion_attempts_isSet = false;
    m_two_point_conversion_attempts_isValid = false;

    m_two_point_conversion_passes_isSet = false;
    m_two_point_conversion_passes_isValid = false;

    m_two_point_conversion_receptions_isSet = false;
    m_two_point_conversion_receptions_isValid = false;

    m_two_point_conversion_returns_isSet = false;
    m_two_point_conversion_returns_isValid = false;

    m_two_point_conversion_runs_isSet = false;
    m_two_point_conversion_runs_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPlayStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayStat::fromJsonObject(QJsonObject json) {

    m_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_assisted_tackles, json[QString("AssistedTackles")]);
    m_assisted_tackles_isSet = !json[QString("AssistedTackles")].isNull() && m_assisted_tackles_isValid;

    m_blocked_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_touchdowns, json[QString("BlockedKickReturnTouchdowns")]);
    m_blocked_kick_return_touchdowns_isSet = !json[QString("BlockedKickReturnTouchdowns")].isNull() && m_blocked_kick_return_touchdowns_isValid;

    m_blocked_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_yards, json[QString("BlockedKickReturnYards")]);
    m_blocked_kick_return_yards_isSet = !json[QString("BlockedKickReturnYards")].isNull() && m_blocked_kick_return_yards_isValid;

    m_blocked_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_returns, json[QString("BlockedKickReturns")]);
    m_blocked_kick_returns_isSet = !json[QString("BlockedKickReturns")].isNull() && m_blocked_kick_returns_isValid;

    m_blocked_kicks_isValid = ::OpenAPI::fromJsonValue(m_blocked_kicks, json[QString("BlockedKicks")]);
    m_blocked_kicks_isSet = !json[QString("BlockedKicks")].isNull() && m_blocked_kicks_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;

    m_extra_points_attempted_isValid = ::OpenAPI::fromJsonValue(m_extra_points_attempted, json[QString("ExtraPointsAttempted")]);
    m_extra_points_attempted_isSet = !json[QString("ExtraPointsAttempted")].isNull() && m_extra_points_attempted_isValid;

    m_extra_points_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_extra_points_had_blocked, json[QString("ExtraPointsHadBlocked")]);
    m_extra_points_had_blocked_isSet = !json[QString("ExtraPointsHadBlocked")].isNull() && m_extra_points_had_blocked_isValid;

    m_extra_points_made_isValid = ::OpenAPI::fromJsonValue(m_extra_points_made, json[QString("ExtraPointsMade")]);
    m_extra_points_made_isSet = !json[QString("ExtraPointsMade")].isNull() && m_extra_points_made_isValid;

    m_field_goal_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_touchdowns, json[QString("FieldGoalReturnTouchdowns")]);
    m_field_goal_return_touchdowns_isSet = !json[QString("FieldGoalReturnTouchdowns")].isNull() && m_field_goal_return_touchdowns_isValid;

    m_field_goal_return_yards_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_yards, json[QString("FieldGoalReturnYards")]);
    m_field_goal_return_yards_isSet = !json[QString("FieldGoalReturnYards")].isNull() && m_field_goal_return_yards_isValid;

    m_field_goal_returns_isValid = ::OpenAPI::fromJsonValue(m_field_goal_returns, json[QString("FieldGoalReturns")]);
    m_field_goal_returns_isSet = !json[QString("FieldGoalReturns")].isNull() && m_field_goal_returns_isValid;

    m_field_goals_attempted_isValid = ::OpenAPI::fromJsonValue(m_field_goals_attempted, json[QString("FieldGoalsAttempted")]);
    m_field_goals_attempted_isSet = !json[QString("FieldGoalsAttempted")].isNull() && m_field_goals_attempted_isValid;

    m_field_goals_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_field_goals_had_blocked, json[QString("FieldGoalsHadBlocked")]);
    m_field_goals_had_blocked_isSet = !json[QString("FieldGoalsHadBlocked")].isNull() && m_field_goals_had_blocked_isValid;

    m_field_goals_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made, json[QString("FieldGoalsMade")]);
    m_field_goals_made_isSet = !json[QString("FieldGoalsMade")].isNull() && m_field_goals_made_isValid;

    m_field_goals_yards_isValid = ::OpenAPI::fromJsonValue(m_field_goals_yards, json[QString("FieldGoalsYards")]);
    m_field_goals_yards_isSet = !json[QString("FieldGoalsYards")].isNull() && m_field_goals_yards_isValid;

    m_fumble_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_touchdowns, json[QString("FumbleReturnTouchdowns")]);
    m_fumble_return_touchdowns_isSet = !json[QString("FumbleReturnTouchdowns")].isNull() && m_fumble_return_touchdowns_isValid;

    m_fumble_return_yards_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_yards, json[QString("FumbleReturnYards")]);
    m_fumble_return_yards_isSet = !json[QString("FumbleReturnYards")].isNull() && m_fumble_return_yards_isValid;

    m_fumbles_isValid = ::OpenAPI::fromJsonValue(m_fumbles, json[QString("Fumbles")]);
    m_fumbles_isSet = !json[QString("Fumbles")].isNull() && m_fumbles_isValid;

    m_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_fumbles_forced, json[QString("FumblesForced")]);
    m_fumbles_forced_isSet = !json[QString("FumblesForced")].isNull() && m_fumbles_forced_isValid;

    m_fumbles_lost_isValid = ::OpenAPI::fromJsonValue(m_fumbles_lost, json[QString("FumblesLost")]);
    m_fumbles_lost_isSet = !json[QString("FumblesLost")].isNull() && m_fumbles_lost_isValid;

    m_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_fumbles_recovered, json[QString("FumblesRecovered")]);
    m_fumbles_recovered_isSet = !json[QString("FumblesRecovered")].isNull() && m_fumbles_recovered_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_interception_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_interception_return_touchdowns, json[QString("InterceptionReturnTouchdowns")]);
    m_interception_return_touchdowns_isSet = !json[QString("InterceptionReturnTouchdowns")].isNull() && m_interception_return_touchdowns_isValid;

    m_interception_return_yards_isValid = ::OpenAPI::fromJsonValue(m_interception_return_yards, json[QString("InterceptionReturnYards")]);
    m_interception_return_yards_isSet = !json[QString("InterceptionReturnYards")].isNull() && m_interception_return_yards_isValid;

    m_interceptions_isValid = ::OpenAPI::fromJsonValue(m_interceptions, json[QString("Interceptions")]);
    m_interceptions_isSet = !json[QString("Interceptions")].isNull() && m_interceptions_isValid;

    m_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_kick_return_touchdowns, json[QString("KickReturnTouchdowns")]);
    m_kick_return_touchdowns_isSet = !json[QString("KickReturnTouchdowns")].isNull() && m_kick_return_touchdowns_isValid;

    m_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards, json[QString("KickReturnYards")]);
    m_kick_return_yards_isSet = !json[QString("KickReturnYards")].isNull() && m_kick_return_yards_isValid;

    m_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_kick_returns, json[QString("KickReturns")]);
    m_kick_returns_isSet = !json[QString("KickReturns")].isNull() && m_kick_returns_isValid;

    m_kickoff_touchbacks_isValid = ::OpenAPI::fromJsonValue(m_kickoff_touchbacks, json[QString("KickoffTouchbacks")]);
    m_kickoff_touchbacks_isSet = !json[QString("KickoffTouchbacks")].isNull() && m_kickoff_touchbacks_isValid;

    m_kickoff_yards_isValid = ::OpenAPI::fromJsonValue(m_kickoff_yards, json[QString("KickoffYards")]);
    m_kickoff_yards_isSet = !json[QString("KickoffYards")].isNull() && m_kickoff_yards_isValid;

    m_kickoffs_isValid = ::OpenAPI::fromJsonValue(m_kickoffs, json[QString("Kickoffs")]);
    m_kickoffs_isSet = !json[QString("Kickoffs")].isNull() && m_kickoffs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_passes_defended_isValid = ::OpenAPI::fromJsonValue(m_passes_defended, json[QString("PassesDefended")]);
    m_passes_defended_isSet = !json[QString("PassesDefended")].isNull() && m_passes_defended_isValid;

    m_passing_attempts_isValid = ::OpenAPI::fromJsonValue(m_passing_attempts, json[QString("PassingAttempts")]);
    m_passing_attempts_isSet = !json[QString("PassingAttempts")].isNull() && m_passing_attempts_isValid;

    m_passing_completions_isValid = ::OpenAPI::fromJsonValue(m_passing_completions, json[QString("PassingCompletions")]);
    m_passing_completions_isSet = !json[QString("PassingCompletions")].isNull() && m_passing_completions_isValid;

    m_passing_interceptions_isValid = ::OpenAPI::fromJsonValue(m_passing_interceptions, json[QString("PassingInterceptions")]);
    m_passing_interceptions_isSet = !json[QString("PassingInterceptions")].isNull() && m_passing_interceptions_isValid;

    m_passing_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_passing_sack_yards, json[QString("PassingSackYards")]);
    m_passing_sack_yards_isSet = !json[QString("PassingSackYards")].isNull() && m_passing_sack_yards_isValid;

    m_passing_sacks_isValid = ::OpenAPI::fromJsonValue(m_passing_sacks, json[QString("PassingSacks")]);
    m_passing_sacks_isSet = !json[QString("PassingSacks")].isNull() && m_passing_sacks_isValid;

    m_passing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_passing_touchdowns, json[QString("PassingTouchdowns")]);
    m_passing_touchdowns_isSet = !json[QString("PassingTouchdowns")].isNull() && m_passing_touchdowns_isValid;

    m_passing_yards_isValid = ::OpenAPI::fromJsonValue(m_passing_yards, json[QString("PassingYards")]);
    m_passing_yards_isSet = !json[QString("PassingYards")].isNull() && m_passing_yards_isValid;

    m_penalties_isValid = ::OpenAPI::fromJsonValue(m_penalties, json[QString("Penalties")]);
    m_penalties_isSet = !json[QString("Penalties")].isNull() && m_penalties_isValid;

    m_penalty_yards_isValid = ::OpenAPI::fromJsonValue(m_penalty_yards, json[QString("PenaltyYards")]);
    m_penalty_yards_isSet = !json[QString("PenaltyYards")].isNull() && m_penalty_yards_isValid;

    m_play_id_isValid = ::OpenAPI::fromJsonValue(m_play_id, json[QString("PlayID")]);
    m_play_id_isSet = !json[QString("PlayID")].isNull() && m_play_id_isValid;

    m_play_stat_id_isValid = ::OpenAPI::fromJsonValue(m_play_stat_id, json[QString("PlayStatID")]);
    m_play_stat_id_isSet = !json[QString("PlayStatID")].isNull() && m_play_stat_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_punt_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_punt_return_touchdowns, json[QString("PuntReturnTouchdowns")]);
    m_punt_return_touchdowns_isSet = !json[QString("PuntReturnTouchdowns")].isNull() && m_punt_return_touchdowns_isValid;

    m_punt_return_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards, json[QString("PuntReturnYards")]);
    m_punt_return_yards_isSet = !json[QString("PuntReturnYards")].isNull() && m_punt_return_yards_isValid;

    m_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_punt_returns, json[QString("PuntReturns")]);
    m_punt_returns_isSet = !json[QString("PuntReturns")].isNull() && m_punt_returns_isValid;

    m_punt_touchbacks_isValid = ::OpenAPI::fromJsonValue(m_punt_touchbacks, json[QString("PuntTouchbacks")]);
    m_punt_touchbacks_isSet = !json[QString("PuntTouchbacks")].isNull() && m_punt_touchbacks_isValid;

    m_punt_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_yards, json[QString("PuntYards")]);
    m_punt_yards_isSet = !json[QString("PuntYards")].isNull() && m_punt_yards_isValid;

    m_punts_isValid = ::OpenAPI::fromJsonValue(m_punts, json[QString("Punts")]);
    m_punts_isSet = !json[QString("Punts")].isNull() && m_punts_isValid;

    m_punts_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_punts_had_blocked, json[QString("PuntsHadBlocked")]);
    m_punts_had_blocked_isSet = !json[QString("PuntsHadBlocked")].isNull() && m_punts_had_blocked_isValid;

    m_receiving_targets_isValid = ::OpenAPI::fromJsonValue(m_receiving_targets, json[QString("ReceivingTargets")]);
    m_receiving_targets_isSet = !json[QString("ReceivingTargets")].isNull() && m_receiving_targets_isValid;

    m_receiving_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_receiving_touchdowns, json[QString("ReceivingTouchdowns")]);
    m_receiving_touchdowns_isSet = !json[QString("ReceivingTouchdowns")].isNull() && m_receiving_touchdowns_isValid;

    m_receiving_yards_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards, json[QString("ReceivingYards")]);
    m_receiving_yards_isSet = !json[QString("ReceivingYards")].isNull() && m_receiving_yards_isValid;

    m_receptions_isValid = ::OpenAPI::fromJsonValue(m_receptions, json[QString("Receptions")]);
    m_receptions_isSet = !json[QString("Receptions")].isNull() && m_receptions_isValid;

    m_rushing_attempts_isValid = ::OpenAPI::fromJsonValue(m_rushing_attempts, json[QString("RushingAttempts")]);
    m_rushing_attempts_isSet = !json[QString("RushingAttempts")].isNull() && m_rushing_attempts_isValid;

    m_rushing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_rushing_touchdowns, json[QString("RushingTouchdowns")]);
    m_rushing_touchdowns_isSet = !json[QString("RushingTouchdowns")].isNull() && m_rushing_touchdowns_isValid;

    m_rushing_yards_isValid = ::OpenAPI::fromJsonValue(m_rushing_yards, json[QString("RushingYards")]);
    m_rushing_yards_isSet = !json[QString("RushingYards")].isNull() && m_rushing_yards_isValid;

    m_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_sack_yards, json[QString("SackYards")]);
    m_sack_yards_isSet = !json[QString("SackYards")].isNull() && m_sack_yards_isValid;

    m_sacks_isValid = ::OpenAPI::fromJsonValue(m_sacks, json[QString("Sacks")]);
    m_sacks_isSet = !json[QString("Sacks")].isNull() && m_sacks_isValid;

    m_safeties_isValid = ::OpenAPI::fromJsonValue(m_safeties, json[QString("Safeties")]);
    m_safeties_isSet = !json[QString("Safeties")].isNull() && m_safeties_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("Sequence")]);
    m_sequence_isSet = !json[QString("Sequence")].isNull() && m_sequence_isValid;

    m_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_solo_tackles, json[QString("SoloTackles")]);
    m_solo_tackles_isSet = !json[QString("SoloTackles")].isNull() && m_solo_tackles_isValid;

    m_tackles_for_loss_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss, json[QString("TacklesForLoss")]);
    m_tackles_for_loss_isSet = !json[QString("TacklesForLoss")].isNull() && m_tackles_for_loss_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_two_point_conversion_attempts_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_attempts, json[QString("TwoPointConversionAttempts")]);
    m_two_point_conversion_attempts_isSet = !json[QString("TwoPointConversionAttempts")].isNull() && m_two_point_conversion_attempts_isValid;

    m_two_point_conversion_passes_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_passes, json[QString("TwoPointConversionPasses")]);
    m_two_point_conversion_passes_isSet = !json[QString("TwoPointConversionPasses")].isNull() && m_two_point_conversion_passes_isValid;

    m_two_point_conversion_receptions_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_receptions, json[QString("TwoPointConversionReceptions")]);
    m_two_point_conversion_receptions_isSet = !json[QString("TwoPointConversionReceptions")].isNull() && m_two_point_conversion_receptions_isValid;

    m_two_point_conversion_returns_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_returns, json[QString("TwoPointConversionReturns")]);
    m_two_point_conversion_returns_isSet = !json[QString("TwoPointConversionReturns")].isNull() && m_two_point_conversion_returns_isValid;

    m_two_point_conversion_runs_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_runs, json[QString("TwoPointConversionRuns")]);
    m_two_point_conversion_runs_isSet = !json[QString("TwoPointConversionRuns")].isNull() && m_two_point_conversion_runs_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIPlayStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayStat::asJsonObject() const {
    QJsonObject obj;
    if (m_assisted_tackles_isSet) {
        obj.insert(QString("AssistedTackles"), ::OpenAPI::toJsonValue(m_assisted_tackles));
    }
    if (m_blocked_kick_return_touchdowns_isSet) {
        obj.insert(QString("BlockedKickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_blocked_kick_return_touchdowns));
    }
    if (m_blocked_kick_return_yards_isSet) {
        obj.insert(QString("BlockedKickReturnYards"), ::OpenAPI::toJsonValue(m_blocked_kick_return_yards));
    }
    if (m_blocked_kick_returns_isSet) {
        obj.insert(QString("BlockedKickReturns"), ::OpenAPI::toJsonValue(m_blocked_kick_returns));
    }
    if (m_blocked_kicks_isSet) {
        obj.insert(QString("BlockedKicks"), ::OpenAPI::toJsonValue(m_blocked_kicks));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_direction_isSet) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_extra_points_attempted_isSet) {
        obj.insert(QString("ExtraPointsAttempted"), ::OpenAPI::toJsonValue(m_extra_points_attempted));
    }
    if (m_extra_points_had_blocked_isSet) {
        obj.insert(QString("ExtraPointsHadBlocked"), ::OpenAPI::toJsonValue(m_extra_points_had_blocked));
    }
    if (m_extra_points_made_isSet) {
        obj.insert(QString("ExtraPointsMade"), ::OpenAPI::toJsonValue(m_extra_points_made));
    }
    if (m_field_goal_return_touchdowns_isSet) {
        obj.insert(QString("FieldGoalReturnTouchdowns"), ::OpenAPI::toJsonValue(m_field_goal_return_touchdowns));
    }
    if (m_field_goal_return_yards_isSet) {
        obj.insert(QString("FieldGoalReturnYards"), ::OpenAPI::toJsonValue(m_field_goal_return_yards));
    }
    if (m_field_goal_returns_isSet) {
        obj.insert(QString("FieldGoalReturns"), ::OpenAPI::toJsonValue(m_field_goal_returns));
    }
    if (m_field_goals_attempted_isSet) {
        obj.insert(QString("FieldGoalsAttempted"), ::OpenAPI::toJsonValue(m_field_goals_attempted));
    }
    if (m_field_goals_had_blocked_isSet) {
        obj.insert(QString("FieldGoalsHadBlocked"), ::OpenAPI::toJsonValue(m_field_goals_had_blocked));
    }
    if (m_field_goals_made_isSet) {
        obj.insert(QString("FieldGoalsMade"), ::OpenAPI::toJsonValue(m_field_goals_made));
    }
    if (m_field_goals_yards_isSet) {
        obj.insert(QString("FieldGoalsYards"), ::OpenAPI::toJsonValue(m_field_goals_yards));
    }
    if (m_fumble_return_touchdowns_isSet) {
        obj.insert(QString("FumbleReturnTouchdowns"), ::OpenAPI::toJsonValue(m_fumble_return_touchdowns));
    }
    if (m_fumble_return_yards_isSet) {
        obj.insert(QString("FumbleReturnYards"), ::OpenAPI::toJsonValue(m_fumble_return_yards));
    }
    if (m_fumbles_isSet) {
        obj.insert(QString("Fumbles"), ::OpenAPI::toJsonValue(m_fumbles));
    }
    if (m_fumbles_forced_isSet) {
        obj.insert(QString("FumblesForced"), ::OpenAPI::toJsonValue(m_fumbles_forced));
    }
    if (m_fumbles_lost_isSet) {
        obj.insert(QString("FumblesLost"), ::OpenAPI::toJsonValue(m_fumbles_lost));
    }
    if (m_fumbles_recovered_isSet) {
        obj.insert(QString("FumblesRecovered"), ::OpenAPI::toJsonValue(m_fumbles_recovered));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_interception_return_touchdowns_isSet) {
        obj.insert(QString("InterceptionReturnTouchdowns"), ::OpenAPI::toJsonValue(m_interception_return_touchdowns));
    }
    if (m_interception_return_yards_isSet) {
        obj.insert(QString("InterceptionReturnYards"), ::OpenAPI::toJsonValue(m_interception_return_yards));
    }
    if (m_interceptions_isSet) {
        obj.insert(QString("Interceptions"), ::OpenAPI::toJsonValue(m_interceptions));
    }
    if (m_kick_return_touchdowns_isSet) {
        obj.insert(QString("KickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_kick_return_touchdowns));
    }
    if (m_kick_return_yards_isSet) {
        obj.insert(QString("KickReturnYards"), ::OpenAPI::toJsonValue(m_kick_return_yards));
    }
    if (m_kick_returns_isSet) {
        obj.insert(QString("KickReturns"), ::OpenAPI::toJsonValue(m_kick_returns));
    }
    if (m_kickoff_touchbacks_isSet) {
        obj.insert(QString("KickoffTouchbacks"), ::OpenAPI::toJsonValue(m_kickoff_touchbacks));
    }
    if (m_kickoff_yards_isSet) {
        obj.insert(QString("KickoffYards"), ::OpenAPI::toJsonValue(m_kickoff_yards));
    }
    if (m_kickoffs_isSet) {
        obj.insert(QString("Kickoffs"), ::OpenAPI::toJsonValue(m_kickoffs));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_passes_defended_isSet) {
        obj.insert(QString("PassesDefended"), ::OpenAPI::toJsonValue(m_passes_defended));
    }
    if (m_passing_attempts_isSet) {
        obj.insert(QString("PassingAttempts"), ::OpenAPI::toJsonValue(m_passing_attempts));
    }
    if (m_passing_completions_isSet) {
        obj.insert(QString("PassingCompletions"), ::OpenAPI::toJsonValue(m_passing_completions));
    }
    if (m_passing_interceptions_isSet) {
        obj.insert(QString("PassingInterceptions"), ::OpenAPI::toJsonValue(m_passing_interceptions));
    }
    if (m_passing_sack_yards_isSet) {
        obj.insert(QString("PassingSackYards"), ::OpenAPI::toJsonValue(m_passing_sack_yards));
    }
    if (m_passing_sacks_isSet) {
        obj.insert(QString("PassingSacks"), ::OpenAPI::toJsonValue(m_passing_sacks));
    }
    if (m_passing_touchdowns_isSet) {
        obj.insert(QString("PassingTouchdowns"), ::OpenAPI::toJsonValue(m_passing_touchdowns));
    }
    if (m_passing_yards_isSet) {
        obj.insert(QString("PassingYards"), ::OpenAPI::toJsonValue(m_passing_yards));
    }
    if (m_penalties_isSet) {
        obj.insert(QString("Penalties"), ::OpenAPI::toJsonValue(m_penalties));
    }
    if (m_penalty_yards_isSet) {
        obj.insert(QString("PenaltyYards"), ::OpenAPI::toJsonValue(m_penalty_yards));
    }
    if (m_play_id_isSet) {
        obj.insert(QString("PlayID"), ::OpenAPI::toJsonValue(m_play_id));
    }
    if (m_play_stat_id_isSet) {
        obj.insert(QString("PlayStatID"), ::OpenAPI::toJsonValue(m_play_stat_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_punt_return_touchdowns_isSet) {
        obj.insert(QString("PuntReturnTouchdowns"), ::OpenAPI::toJsonValue(m_punt_return_touchdowns));
    }
    if (m_punt_return_yards_isSet) {
        obj.insert(QString("PuntReturnYards"), ::OpenAPI::toJsonValue(m_punt_return_yards));
    }
    if (m_punt_returns_isSet) {
        obj.insert(QString("PuntReturns"), ::OpenAPI::toJsonValue(m_punt_returns));
    }
    if (m_punt_touchbacks_isSet) {
        obj.insert(QString("PuntTouchbacks"), ::OpenAPI::toJsonValue(m_punt_touchbacks));
    }
    if (m_punt_yards_isSet) {
        obj.insert(QString("PuntYards"), ::OpenAPI::toJsonValue(m_punt_yards));
    }
    if (m_punts_isSet) {
        obj.insert(QString("Punts"), ::OpenAPI::toJsonValue(m_punts));
    }
    if (m_punts_had_blocked_isSet) {
        obj.insert(QString("PuntsHadBlocked"), ::OpenAPI::toJsonValue(m_punts_had_blocked));
    }
    if (m_receiving_targets_isSet) {
        obj.insert(QString("ReceivingTargets"), ::OpenAPI::toJsonValue(m_receiving_targets));
    }
    if (m_receiving_touchdowns_isSet) {
        obj.insert(QString("ReceivingTouchdowns"), ::OpenAPI::toJsonValue(m_receiving_touchdowns));
    }
    if (m_receiving_yards_isSet) {
        obj.insert(QString("ReceivingYards"), ::OpenAPI::toJsonValue(m_receiving_yards));
    }
    if (m_receptions_isSet) {
        obj.insert(QString("Receptions"), ::OpenAPI::toJsonValue(m_receptions));
    }
    if (m_rushing_attempts_isSet) {
        obj.insert(QString("RushingAttempts"), ::OpenAPI::toJsonValue(m_rushing_attempts));
    }
    if (m_rushing_touchdowns_isSet) {
        obj.insert(QString("RushingTouchdowns"), ::OpenAPI::toJsonValue(m_rushing_touchdowns));
    }
    if (m_rushing_yards_isSet) {
        obj.insert(QString("RushingYards"), ::OpenAPI::toJsonValue(m_rushing_yards));
    }
    if (m_sack_yards_isSet) {
        obj.insert(QString("SackYards"), ::OpenAPI::toJsonValue(m_sack_yards));
    }
    if (m_sacks_isSet) {
        obj.insert(QString("Sacks"), ::OpenAPI::toJsonValue(m_sacks));
    }
    if (m_safeties_isSet) {
        obj.insert(QString("Safeties"), ::OpenAPI::toJsonValue(m_safeties));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("Sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_solo_tackles_isSet) {
        obj.insert(QString("SoloTackles"), ::OpenAPI::toJsonValue(m_solo_tackles));
    }
    if (m_tackles_for_loss_isSet) {
        obj.insert(QString("TacklesForLoss"), ::OpenAPI::toJsonValue(m_tackles_for_loss));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_two_point_conversion_attempts_isSet) {
        obj.insert(QString("TwoPointConversionAttempts"), ::OpenAPI::toJsonValue(m_two_point_conversion_attempts));
    }
    if (m_two_point_conversion_passes_isSet) {
        obj.insert(QString("TwoPointConversionPasses"), ::OpenAPI::toJsonValue(m_two_point_conversion_passes));
    }
    if (m_two_point_conversion_receptions_isSet) {
        obj.insert(QString("TwoPointConversionReceptions"), ::OpenAPI::toJsonValue(m_two_point_conversion_receptions));
    }
    if (m_two_point_conversion_returns_isSet) {
        obj.insert(QString("TwoPointConversionReturns"), ::OpenAPI::toJsonValue(m_two_point_conversion_returns));
    }
    if (m_two_point_conversion_runs_isSet) {
        obj.insert(QString("TwoPointConversionRuns"), ::OpenAPI::toJsonValue(m_two_point_conversion_runs));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIPlayStat::getAssistedTackles() const {
    return m_assisted_tackles;
}
void OAIPlayStat::setAssistedTackles(const qint32 &assisted_tackles) {
    m_assisted_tackles = assisted_tackles;
    m_assisted_tackles_isSet = true;
}

bool OAIPlayStat::is_assisted_tackles_Set() const{
    return m_assisted_tackles_isSet;
}

bool OAIPlayStat::is_assisted_tackles_Valid() const{
    return m_assisted_tackles_isValid;
}

qint32 OAIPlayStat::getBlockedKickReturnTouchdowns() const {
    return m_blocked_kick_return_touchdowns;
}
void OAIPlayStat::setBlockedKickReturnTouchdowns(const qint32 &blocked_kick_return_touchdowns) {
    m_blocked_kick_return_touchdowns = blocked_kick_return_touchdowns;
    m_blocked_kick_return_touchdowns_isSet = true;
}

bool OAIPlayStat::is_blocked_kick_return_touchdowns_Set() const{
    return m_blocked_kick_return_touchdowns_isSet;
}

bool OAIPlayStat::is_blocked_kick_return_touchdowns_Valid() const{
    return m_blocked_kick_return_touchdowns_isValid;
}

qint32 OAIPlayStat::getBlockedKickReturnYards() const {
    return m_blocked_kick_return_yards;
}
void OAIPlayStat::setBlockedKickReturnYards(const qint32 &blocked_kick_return_yards) {
    m_blocked_kick_return_yards = blocked_kick_return_yards;
    m_blocked_kick_return_yards_isSet = true;
}

bool OAIPlayStat::is_blocked_kick_return_yards_Set() const{
    return m_blocked_kick_return_yards_isSet;
}

bool OAIPlayStat::is_blocked_kick_return_yards_Valid() const{
    return m_blocked_kick_return_yards_isValid;
}

qint32 OAIPlayStat::getBlockedKickReturns() const {
    return m_blocked_kick_returns;
}
void OAIPlayStat::setBlockedKickReturns(const qint32 &blocked_kick_returns) {
    m_blocked_kick_returns = blocked_kick_returns;
    m_blocked_kick_returns_isSet = true;
}

bool OAIPlayStat::is_blocked_kick_returns_Set() const{
    return m_blocked_kick_returns_isSet;
}

bool OAIPlayStat::is_blocked_kick_returns_Valid() const{
    return m_blocked_kick_returns_isValid;
}

qint32 OAIPlayStat::getBlockedKicks() const {
    return m_blocked_kicks;
}
void OAIPlayStat::setBlockedKicks(const qint32 &blocked_kicks) {
    m_blocked_kicks = blocked_kicks;
    m_blocked_kicks_isSet = true;
}

bool OAIPlayStat::is_blocked_kicks_Set() const{
    return m_blocked_kicks_isSet;
}

bool OAIPlayStat::is_blocked_kicks_Valid() const{
    return m_blocked_kicks_isValid;
}

QString OAIPlayStat::getCreated() const {
    return m_created;
}
void OAIPlayStat::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPlayStat::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPlayStat::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPlayStat::getDirection() const {
    return m_direction;
}
void OAIPlayStat::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIPlayStat::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIPlayStat::is_direction_Valid() const{
    return m_direction_isValid;
}

qint32 OAIPlayStat::getExtraPointsAttempted() const {
    return m_extra_points_attempted;
}
void OAIPlayStat::setExtraPointsAttempted(const qint32 &extra_points_attempted) {
    m_extra_points_attempted = extra_points_attempted;
    m_extra_points_attempted_isSet = true;
}

bool OAIPlayStat::is_extra_points_attempted_Set() const{
    return m_extra_points_attempted_isSet;
}

bool OAIPlayStat::is_extra_points_attempted_Valid() const{
    return m_extra_points_attempted_isValid;
}

qint32 OAIPlayStat::getExtraPointsHadBlocked() const {
    return m_extra_points_had_blocked;
}
void OAIPlayStat::setExtraPointsHadBlocked(const qint32 &extra_points_had_blocked) {
    m_extra_points_had_blocked = extra_points_had_blocked;
    m_extra_points_had_blocked_isSet = true;
}

bool OAIPlayStat::is_extra_points_had_blocked_Set() const{
    return m_extra_points_had_blocked_isSet;
}

bool OAIPlayStat::is_extra_points_had_blocked_Valid() const{
    return m_extra_points_had_blocked_isValid;
}

qint32 OAIPlayStat::getExtraPointsMade() const {
    return m_extra_points_made;
}
void OAIPlayStat::setExtraPointsMade(const qint32 &extra_points_made) {
    m_extra_points_made = extra_points_made;
    m_extra_points_made_isSet = true;
}

bool OAIPlayStat::is_extra_points_made_Set() const{
    return m_extra_points_made_isSet;
}

bool OAIPlayStat::is_extra_points_made_Valid() const{
    return m_extra_points_made_isValid;
}

qint32 OAIPlayStat::getFieldGoalReturnTouchdowns() const {
    return m_field_goal_return_touchdowns;
}
void OAIPlayStat::setFieldGoalReturnTouchdowns(const qint32 &field_goal_return_touchdowns) {
    m_field_goal_return_touchdowns = field_goal_return_touchdowns;
    m_field_goal_return_touchdowns_isSet = true;
}

bool OAIPlayStat::is_field_goal_return_touchdowns_Set() const{
    return m_field_goal_return_touchdowns_isSet;
}

bool OAIPlayStat::is_field_goal_return_touchdowns_Valid() const{
    return m_field_goal_return_touchdowns_isValid;
}

qint32 OAIPlayStat::getFieldGoalReturnYards() const {
    return m_field_goal_return_yards;
}
void OAIPlayStat::setFieldGoalReturnYards(const qint32 &field_goal_return_yards) {
    m_field_goal_return_yards = field_goal_return_yards;
    m_field_goal_return_yards_isSet = true;
}

bool OAIPlayStat::is_field_goal_return_yards_Set() const{
    return m_field_goal_return_yards_isSet;
}

bool OAIPlayStat::is_field_goal_return_yards_Valid() const{
    return m_field_goal_return_yards_isValid;
}

qint32 OAIPlayStat::getFieldGoalReturns() const {
    return m_field_goal_returns;
}
void OAIPlayStat::setFieldGoalReturns(const qint32 &field_goal_returns) {
    m_field_goal_returns = field_goal_returns;
    m_field_goal_returns_isSet = true;
}

bool OAIPlayStat::is_field_goal_returns_Set() const{
    return m_field_goal_returns_isSet;
}

bool OAIPlayStat::is_field_goal_returns_Valid() const{
    return m_field_goal_returns_isValid;
}

qint32 OAIPlayStat::getFieldGoalsAttempted() const {
    return m_field_goals_attempted;
}
void OAIPlayStat::setFieldGoalsAttempted(const qint32 &field_goals_attempted) {
    m_field_goals_attempted = field_goals_attempted;
    m_field_goals_attempted_isSet = true;
}

bool OAIPlayStat::is_field_goals_attempted_Set() const{
    return m_field_goals_attempted_isSet;
}

bool OAIPlayStat::is_field_goals_attempted_Valid() const{
    return m_field_goals_attempted_isValid;
}

qint32 OAIPlayStat::getFieldGoalsHadBlocked() const {
    return m_field_goals_had_blocked;
}
void OAIPlayStat::setFieldGoalsHadBlocked(const qint32 &field_goals_had_blocked) {
    m_field_goals_had_blocked = field_goals_had_blocked;
    m_field_goals_had_blocked_isSet = true;
}

bool OAIPlayStat::is_field_goals_had_blocked_Set() const{
    return m_field_goals_had_blocked_isSet;
}

bool OAIPlayStat::is_field_goals_had_blocked_Valid() const{
    return m_field_goals_had_blocked_isValid;
}

qint32 OAIPlayStat::getFieldGoalsMade() const {
    return m_field_goals_made;
}
void OAIPlayStat::setFieldGoalsMade(const qint32 &field_goals_made) {
    m_field_goals_made = field_goals_made;
    m_field_goals_made_isSet = true;
}

bool OAIPlayStat::is_field_goals_made_Set() const{
    return m_field_goals_made_isSet;
}

bool OAIPlayStat::is_field_goals_made_Valid() const{
    return m_field_goals_made_isValid;
}

qint32 OAIPlayStat::getFieldGoalsYards() const {
    return m_field_goals_yards;
}
void OAIPlayStat::setFieldGoalsYards(const qint32 &field_goals_yards) {
    m_field_goals_yards = field_goals_yards;
    m_field_goals_yards_isSet = true;
}

bool OAIPlayStat::is_field_goals_yards_Set() const{
    return m_field_goals_yards_isSet;
}

bool OAIPlayStat::is_field_goals_yards_Valid() const{
    return m_field_goals_yards_isValid;
}

qint32 OAIPlayStat::getFumbleReturnTouchdowns() const {
    return m_fumble_return_touchdowns;
}
void OAIPlayStat::setFumbleReturnTouchdowns(const qint32 &fumble_return_touchdowns) {
    m_fumble_return_touchdowns = fumble_return_touchdowns;
    m_fumble_return_touchdowns_isSet = true;
}

bool OAIPlayStat::is_fumble_return_touchdowns_Set() const{
    return m_fumble_return_touchdowns_isSet;
}

bool OAIPlayStat::is_fumble_return_touchdowns_Valid() const{
    return m_fumble_return_touchdowns_isValid;
}

qint32 OAIPlayStat::getFumbleReturnYards() const {
    return m_fumble_return_yards;
}
void OAIPlayStat::setFumbleReturnYards(const qint32 &fumble_return_yards) {
    m_fumble_return_yards = fumble_return_yards;
    m_fumble_return_yards_isSet = true;
}

bool OAIPlayStat::is_fumble_return_yards_Set() const{
    return m_fumble_return_yards_isSet;
}

bool OAIPlayStat::is_fumble_return_yards_Valid() const{
    return m_fumble_return_yards_isValid;
}

qint32 OAIPlayStat::getFumbles() const {
    return m_fumbles;
}
void OAIPlayStat::setFumbles(const qint32 &fumbles) {
    m_fumbles = fumbles;
    m_fumbles_isSet = true;
}

bool OAIPlayStat::is_fumbles_Set() const{
    return m_fumbles_isSet;
}

bool OAIPlayStat::is_fumbles_Valid() const{
    return m_fumbles_isValid;
}

qint32 OAIPlayStat::getFumblesForced() const {
    return m_fumbles_forced;
}
void OAIPlayStat::setFumblesForced(const qint32 &fumbles_forced) {
    m_fumbles_forced = fumbles_forced;
    m_fumbles_forced_isSet = true;
}

bool OAIPlayStat::is_fumbles_forced_Set() const{
    return m_fumbles_forced_isSet;
}

bool OAIPlayStat::is_fumbles_forced_Valid() const{
    return m_fumbles_forced_isValid;
}

qint32 OAIPlayStat::getFumblesLost() const {
    return m_fumbles_lost;
}
void OAIPlayStat::setFumblesLost(const qint32 &fumbles_lost) {
    m_fumbles_lost = fumbles_lost;
    m_fumbles_lost_isSet = true;
}

bool OAIPlayStat::is_fumbles_lost_Set() const{
    return m_fumbles_lost_isSet;
}

bool OAIPlayStat::is_fumbles_lost_Valid() const{
    return m_fumbles_lost_isValid;
}

qint32 OAIPlayStat::getFumblesRecovered() const {
    return m_fumbles_recovered;
}
void OAIPlayStat::setFumblesRecovered(const qint32 &fumbles_recovered) {
    m_fumbles_recovered = fumbles_recovered;
    m_fumbles_recovered_isSet = true;
}

bool OAIPlayStat::is_fumbles_recovered_Set() const{
    return m_fumbles_recovered_isSet;
}

bool OAIPlayStat::is_fumbles_recovered_Valid() const{
    return m_fumbles_recovered_isValid;
}

QString OAIPlayStat::getHomeOrAway() const {
    return m_home_or_away;
}
void OAIPlayStat::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAIPlayStat::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAIPlayStat::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

qint32 OAIPlayStat::getInterceptionReturnTouchdowns() const {
    return m_interception_return_touchdowns;
}
void OAIPlayStat::setInterceptionReturnTouchdowns(const qint32 &interception_return_touchdowns) {
    m_interception_return_touchdowns = interception_return_touchdowns;
    m_interception_return_touchdowns_isSet = true;
}

bool OAIPlayStat::is_interception_return_touchdowns_Set() const{
    return m_interception_return_touchdowns_isSet;
}

bool OAIPlayStat::is_interception_return_touchdowns_Valid() const{
    return m_interception_return_touchdowns_isValid;
}

qint32 OAIPlayStat::getInterceptionReturnYards() const {
    return m_interception_return_yards;
}
void OAIPlayStat::setInterceptionReturnYards(const qint32 &interception_return_yards) {
    m_interception_return_yards = interception_return_yards;
    m_interception_return_yards_isSet = true;
}

bool OAIPlayStat::is_interception_return_yards_Set() const{
    return m_interception_return_yards_isSet;
}

bool OAIPlayStat::is_interception_return_yards_Valid() const{
    return m_interception_return_yards_isValid;
}

qint32 OAIPlayStat::getInterceptions() const {
    return m_interceptions;
}
void OAIPlayStat::setInterceptions(const qint32 &interceptions) {
    m_interceptions = interceptions;
    m_interceptions_isSet = true;
}

bool OAIPlayStat::is_interceptions_Set() const{
    return m_interceptions_isSet;
}

bool OAIPlayStat::is_interceptions_Valid() const{
    return m_interceptions_isValid;
}

qint32 OAIPlayStat::getKickReturnTouchdowns() const {
    return m_kick_return_touchdowns;
}
void OAIPlayStat::setKickReturnTouchdowns(const qint32 &kick_return_touchdowns) {
    m_kick_return_touchdowns = kick_return_touchdowns;
    m_kick_return_touchdowns_isSet = true;
}

bool OAIPlayStat::is_kick_return_touchdowns_Set() const{
    return m_kick_return_touchdowns_isSet;
}

bool OAIPlayStat::is_kick_return_touchdowns_Valid() const{
    return m_kick_return_touchdowns_isValid;
}

qint32 OAIPlayStat::getKickReturnYards() const {
    return m_kick_return_yards;
}
void OAIPlayStat::setKickReturnYards(const qint32 &kick_return_yards) {
    m_kick_return_yards = kick_return_yards;
    m_kick_return_yards_isSet = true;
}

bool OAIPlayStat::is_kick_return_yards_Set() const{
    return m_kick_return_yards_isSet;
}

bool OAIPlayStat::is_kick_return_yards_Valid() const{
    return m_kick_return_yards_isValid;
}

qint32 OAIPlayStat::getKickReturns() const {
    return m_kick_returns;
}
void OAIPlayStat::setKickReturns(const qint32 &kick_returns) {
    m_kick_returns = kick_returns;
    m_kick_returns_isSet = true;
}

bool OAIPlayStat::is_kick_returns_Set() const{
    return m_kick_returns_isSet;
}

bool OAIPlayStat::is_kick_returns_Valid() const{
    return m_kick_returns_isValid;
}

qint32 OAIPlayStat::getKickoffTouchbacks() const {
    return m_kickoff_touchbacks;
}
void OAIPlayStat::setKickoffTouchbacks(const qint32 &kickoff_touchbacks) {
    m_kickoff_touchbacks = kickoff_touchbacks;
    m_kickoff_touchbacks_isSet = true;
}

bool OAIPlayStat::is_kickoff_touchbacks_Set() const{
    return m_kickoff_touchbacks_isSet;
}

bool OAIPlayStat::is_kickoff_touchbacks_Valid() const{
    return m_kickoff_touchbacks_isValid;
}

qint32 OAIPlayStat::getKickoffYards() const {
    return m_kickoff_yards;
}
void OAIPlayStat::setKickoffYards(const qint32 &kickoff_yards) {
    m_kickoff_yards = kickoff_yards;
    m_kickoff_yards_isSet = true;
}

bool OAIPlayStat::is_kickoff_yards_Set() const{
    return m_kickoff_yards_isSet;
}

bool OAIPlayStat::is_kickoff_yards_Valid() const{
    return m_kickoff_yards_isValid;
}

qint32 OAIPlayStat::getKickoffs() const {
    return m_kickoffs;
}
void OAIPlayStat::setKickoffs(const qint32 &kickoffs) {
    m_kickoffs = kickoffs;
    m_kickoffs_isSet = true;
}

bool OAIPlayStat::is_kickoffs_Set() const{
    return m_kickoffs_isSet;
}

bool OAIPlayStat::is_kickoffs_Valid() const{
    return m_kickoffs_isValid;
}

QString OAIPlayStat::getName() const {
    return m_name;
}
void OAIPlayStat::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayStat::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayStat::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlayStat::getOpponent() const {
    return m_opponent;
}
void OAIPlayStat::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIPlayStat::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIPlayStat::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIPlayStat::getPassesDefended() const {
    return m_passes_defended;
}
void OAIPlayStat::setPassesDefended(const qint32 &passes_defended) {
    m_passes_defended = passes_defended;
    m_passes_defended_isSet = true;
}

bool OAIPlayStat::is_passes_defended_Set() const{
    return m_passes_defended_isSet;
}

bool OAIPlayStat::is_passes_defended_Valid() const{
    return m_passes_defended_isValid;
}

qint32 OAIPlayStat::getPassingAttempts() const {
    return m_passing_attempts;
}
void OAIPlayStat::setPassingAttempts(const qint32 &passing_attempts) {
    m_passing_attempts = passing_attempts;
    m_passing_attempts_isSet = true;
}

bool OAIPlayStat::is_passing_attempts_Set() const{
    return m_passing_attempts_isSet;
}

bool OAIPlayStat::is_passing_attempts_Valid() const{
    return m_passing_attempts_isValid;
}

qint32 OAIPlayStat::getPassingCompletions() const {
    return m_passing_completions;
}
void OAIPlayStat::setPassingCompletions(const qint32 &passing_completions) {
    m_passing_completions = passing_completions;
    m_passing_completions_isSet = true;
}

bool OAIPlayStat::is_passing_completions_Set() const{
    return m_passing_completions_isSet;
}

bool OAIPlayStat::is_passing_completions_Valid() const{
    return m_passing_completions_isValid;
}

qint32 OAIPlayStat::getPassingInterceptions() const {
    return m_passing_interceptions;
}
void OAIPlayStat::setPassingInterceptions(const qint32 &passing_interceptions) {
    m_passing_interceptions = passing_interceptions;
    m_passing_interceptions_isSet = true;
}

bool OAIPlayStat::is_passing_interceptions_Set() const{
    return m_passing_interceptions_isSet;
}

bool OAIPlayStat::is_passing_interceptions_Valid() const{
    return m_passing_interceptions_isValid;
}

qint32 OAIPlayStat::getPassingSackYards() const {
    return m_passing_sack_yards;
}
void OAIPlayStat::setPassingSackYards(const qint32 &passing_sack_yards) {
    m_passing_sack_yards = passing_sack_yards;
    m_passing_sack_yards_isSet = true;
}

bool OAIPlayStat::is_passing_sack_yards_Set() const{
    return m_passing_sack_yards_isSet;
}

bool OAIPlayStat::is_passing_sack_yards_Valid() const{
    return m_passing_sack_yards_isValid;
}

qint32 OAIPlayStat::getPassingSacks() const {
    return m_passing_sacks;
}
void OAIPlayStat::setPassingSacks(const qint32 &passing_sacks) {
    m_passing_sacks = passing_sacks;
    m_passing_sacks_isSet = true;
}

bool OAIPlayStat::is_passing_sacks_Set() const{
    return m_passing_sacks_isSet;
}

bool OAIPlayStat::is_passing_sacks_Valid() const{
    return m_passing_sacks_isValid;
}

qint32 OAIPlayStat::getPassingTouchdowns() const {
    return m_passing_touchdowns;
}
void OAIPlayStat::setPassingTouchdowns(const qint32 &passing_touchdowns) {
    m_passing_touchdowns = passing_touchdowns;
    m_passing_touchdowns_isSet = true;
}

bool OAIPlayStat::is_passing_touchdowns_Set() const{
    return m_passing_touchdowns_isSet;
}

bool OAIPlayStat::is_passing_touchdowns_Valid() const{
    return m_passing_touchdowns_isValid;
}

qint32 OAIPlayStat::getPassingYards() const {
    return m_passing_yards;
}
void OAIPlayStat::setPassingYards(const qint32 &passing_yards) {
    m_passing_yards = passing_yards;
    m_passing_yards_isSet = true;
}

bool OAIPlayStat::is_passing_yards_Set() const{
    return m_passing_yards_isSet;
}

bool OAIPlayStat::is_passing_yards_Valid() const{
    return m_passing_yards_isValid;
}

qint32 OAIPlayStat::getPenalties() const {
    return m_penalties;
}
void OAIPlayStat::setPenalties(const qint32 &penalties) {
    m_penalties = penalties;
    m_penalties_isSet = true;
}

bool OAIPlayStat::is_penalties_Set() const{
    return m_penalties_isSet;
}

bool OAIPlayStat::is_penalties_Valid() const{
    return m_penalties_isValid;
}

qint32 OAIPlayStat::getPenaltyYards() const {
    return m_penalty_yards;
}
void OAIPlayStat::setPenaltyYards(const qint32 &penalty_yards) {
    m_penalty_yards = penalty_yards;
    m_penalty_yards_isSet = true;
}

bool OAIPlayStat::is_penalty_yards_Set() const{
    return m_penalty_yards_isSet;
}

bool OAIPlayStat::is_penalty_yards_Valid() const{
    return m_penalty_yards_isValid;
}

qint32 OAIPlayStat::getPlayId() const {
    return m_play_id;
}
void OAIPlayStat::setPlayId(const qint32 &play_id) {
    m_play_id = play_id;
    m_play_id_isSet = true;
}

bool OAIPlayStat::is_play_id_Set() const{
    return m_play_id_isSet;
}

bool OAIPlayStat::is_play_id_Valid() const{
    return m_play_id_isValid;
}

qint32 OAIPlayStat::getPlayStatId() const {
    return m_play_stat_id;
}
void OAIPlayStat::setPlayStatId(const qint32 &play_stat_id) {
    m_play_stat_id = play_stat_id;
    m_play_stat_id_isSet = true;
}

bool OAIPlayStat::is_play_stat_id_Set() const{
    return m_play_stat_id_isSet;
}

bool OAIPlayStat::is_play_stat_id_Valid() const{
    return m_play_stat_id_isValid;
}

qint32 OAIPlayStat::getPlayerId() const {
    return m_player_id;
}
void OAIPlayStat::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayStat::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayStat::is_player_id_Valid() const{
    return m_player_id_isValid;
}

qint32 OAIPlayStat::getPuntReturnTouchdowns() const {
    return m_punt_return_touchdowns;
}
void OAIPlayStat::setPuntReturnTouchdowns(const qint32 &punt_return_touchdowns) {
    m_punt_return_touchdowns = punt_return_touchdowns;
    m_punt_return_touchdowns_isSet = true;
}

bool OAIPlayStat::is_punt_return_touchdowns_Set() const{
    return m_punt_return_touchdowns_isSet;
}

bool OAIPlayStat::is_punt_return_touchdowns_Valid() const{
    return m_punt_return_touchdowns_isValid;
}

qint32 OAIPlayStat::getPuntReturnYards() const {
    return m_punt_return_yards;
}
void OAIPlayStat::setPuntReturnYards(const qint32 &punt_return_yards) {
    m_punt_return_yards = punt_return_yards;
    m_punt_return_yards_isSet = true;
}

bool OAIPlayStat::is_punt_return_yards_Set() const{
    return m_punt_return_yards_isSet;
}

bool OAIPlayStat::is_punt_return_yards_Valid() const{
    return m_punt_return_yards_isValid;
}

qint32 OAIPlayStat::getPuntReturns() const {
    return m_punt_returns;
}
void OAIPlayStat::setPuntReturns(const qint32 &punt_returns) {
    m_punt_returns = punt_returns;
    m_punt_returns_isSet = true;
}

bool OAIPlayStat::is_punt_returns_Set() const{
    return m_punt_returns_isSet;
}

bool OAIPlayStat::is_punt_returns_Valid() const{
    return m_punt_returns_isValid;
}

qint32 OAIPlayStat::getPuntTouchbacks() const {
    return m_punt_touchbacks;
}
void OAIPlayStat::setPuntTouchbacks(const qint32 &punt_touchbacks) {
    m_punt_touchbacks = punt_touchbacks;
    m_punt_touchbacks_isSet = true;
}

bool OAIPlayStat::is_punt_touchbacks_Set() const{
    return m_punt_touchbacks_isSet;
}

bool OAIPlayStat::is_punt_touchbacks_Valid() const{
    return m_punt_touchbacks_isValid;
}

qint32 OAIPlayStat::getPuntYards() const {
    return m_punt_yards;
}
void OAIPlayStat::setPuntYards(const qint32 &punt_yards) {
    m_punt_yards = punt_yards;
    m_punt_yards_isSet = true;
}

bool OAIPlayStat::is_punt_yards_Set() const{
    return m_punt_yards_isSet;
}

bool OAIPlayStat::is_punt_yards_Valid() const{
    return m_punt_yards_isValid;
}

qint32 OAIPlayStat::getPunts() const {
    return m_punts;
}
void OAIPlayStat::setPunts(const qint32 &punts) {
    m_punts = punts;
    m_punts_isSet = true;
}

bool OAIPlayStat::is_punts_Set() const{
    return m_punts_isSet;
}

bool OAIPlayStat::is_punts_Valid() const{
    return m_punts_isValid;
}

qint32 OAIPlayStat::getPuntsHadBlocked() const {
    return m_punts_had_blocked;
}
void OAIPlayStat::setPuntsHadBlocked(const qint32 &punts_had_blocked) {
    m_punts_had_blocked = punts_had_blocked;
    m_punts_had_blocked_isSet = true;
}

bool OAIPlayStat::is_punts_had_blocked_Set() const{
    return m_punts_had_blocked_isSet;
}

bool OAIPlayStat::is_punts_had_blocked_Valid() const{
    return m_punts_had_blocked_isValid;
}

qint32 OAIPlayStat::getReceivingTargets() const {
    return m_receiving_targets;
}
void OAIPlayStat::setReceivingTargets(const qint32 &receiving_targets) {
    m_receiving_targets = receiving_targets;
    m_receiving_targets_isSet = true;
}

bool OAIPlayStat::is_receiving_targets_Set() const{
    return m_receiving_targets_isSet;
}

bool OAIPlayStat::is_receiving_targets_Valid() const{
    return m_receiving_targets_isValid;
}

qint32 OAIPlayStat::getReceivingTouchdowns() const {
    return m_receiving_touchdowns;
}
void OAIPlayStat::setReceivingTouchdowns(const qint32 &receiving_touchdowns) {
    m_receiving_touchdowns = receiving_touchdowns;
    m_receiving_touchdowns_isSet = true;
}

bool OAIPlayStat::is_receiving_touchdowns_Set() const{
    return m_receiving_touchdowns_isSet;
}

bool OAIPlayStat::is_receiving_touchdowns_Valid() const{
    return m_receiving_touchdowns_isValid;
}

qint32 OAIPlayStat::getReceivingYards() const {
    return m_receiving_yards;
}
void OAIPlayStat::setReceivingYards(const qint32 &receiving_yards) {
    m_receiving_yards = receiving_yards;
    m_receiving_yards_isSet = true;
}

bool OAIPlayStat::is_receiving_yards_Set() const{
    return m_receiving_yards_isSet;
}

bool OAIPlayStat::is_receiving_yards_Valid() const{
    return m_receiving_yards_isValid;
}

qint32 OAIPlayStat::getReceptions() const {
    return m_receptions;
}
void OAIPlayStat::setReceptions(const qint32 &receptions) {
    m_receptions = receptions;
    m_receptions_isSet = true;
}

bool OAIPlayStat::is_receptions_Set() const{
    return m_receptions_isSet;
}

bool OAIPlayStat::is_receptions_Valid() const{
    return m_receptions_isValid;
}

qint32 OAIPlayStat::getRushingAttempts() const {
    return m_rushing_attempts;
}
void OAIPlayStat::setRushingAttempts(const qint32 &rushing_attempts) {
    m_rushing_attempts = rushing_attempts;
    m_rushing_attempts_isSet = true;
}

bool OAIPlayStat::is_rushing_attempts_Set() const{
    return m_rushing_attempts_isSet;
}

bool OAIPlayStat::is_rushing_attempts_Valid() const{
    return m_rushing_attempts_isValid;
}

qint32 OAIPlayStat::getRushingTouchdowns() const {
    return m_rushing_touchdowns;
}
void OAIPlayStat::setRushingTouchdowns(const qint32 &rushing_touchdowns) {
    m_rushing_touchdowns = rushing_touchdowns;
    m_rushing_touchdowns_isSet = true;
}

bool OAIPlayStat::is_rushing_touchdowns_Set() const{
    return m_rushing_touchdowns_isSet;
}

bool OAIPlayStat::is_rushing_touchdowns_Valid() const{
    return m_rushing_touchdowns_isValid;
}

qint32 OAIPlayStat::getRushingYards() const {
    return m_rushing_yards;
}
void OAIPlayStat::setRushingYards(const qint32 &rushing_yards) {
    m_rushing_yards = rushing_yards;
    m_rushing_yards_isSet = true;
}

bool OAIPlayStat::is_rushing_yards_Set() const{
    return m_rushing_yards_isSet;
}

bool OAIPlayStat::is_rushing_yards_Valid() const{
    return m_rushing_yards_isValid;
}

double OAIPlayStat::getSackYards() const {
    return m_sack_yards;
}
void OAIPlayStat::setSackYards(const double &sack_yards) {
    m_sack_yards = sack_yards;
    m_sack_yards_isSet = true;
}

bool OAIPlayStat::is_sack_yards_Set() const{
    return m_sack_yards_isSet;
}

bool OAIPlayStat::is_sack_yards_Valid() const{
    return m_sack_yards_isValid;
}

double OAIPlayStat::getSacks() const {
    return m_sacks;
}
void OAIPlayStat::setSacks(const double &sacks) {
    m_sacks = sacks;
    m_sacks_isSet = true;
}

bool OAIPlayStat::is_sacks_Set() const{
    return m_sacks_isSet;
}

bool OAIPlayStat::is_sacks_Valid() const{
    return m_sacks_isValid;
}

qint32 OAIPlayStat::getSafeties() const {
    return m_safeties;
}
void OAIPlayStat::setSafeties(const qint32 &safeties) {
    m_safeties = safeties;
    m_safeties_isSet = true;
}

bool OAIPlayStat::is_safeties_Set() const{
    return m_safeties_isSet;
}

bool OAIPlayStat::is_safeties_Valid() const{
    return m_safeties_isValid;
}

qint32 OAIPlayStat::getSequence() const {
    return m_sequence;
}
void OAIPlayStat::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIPlayStat::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIPlayStat::is_sequence_Valid() const{
    return m_sequence_isValid;
}

qint32 OAIPlayStat::getSoloTackles() const {
    return m_solo_tackles;
}
void OAIPlayStat::setSoloTackles(const qint32 &solo_tackles) {
    m_solo_tackles = solo_tackles;
    m_solo_tackles_isSet = true;
}

bool OAIPlayStat::is_solo_tackles_Set() const{
    return m_solo_tackles_isSet;
}

bool OAIPlayStat::is_solo_tackles_Valid() const{
    return m_solo_tackles_isValid;
}

qint32 OAIPlayStat::getTacklesForLoss() const {
    return m_tackles_for_loss;
}
void OAIPlayStat::setTacklesForLoss(const qint32 &tackles_for_loss) {
    m_tackles_for_loss = tackles_for_loss;
    m_tackles_for_loss_isSet = true;
}

bool OAIPlayStat::is_tackles_for_loss_Set() const{
    return m_tackles_for_loss_isSet;
}

bool OAIPlayStat::is_tackles_for_loss_Valid() const{
    return m_tackles_for_loss_isValid;
}

QString OAIPlayStat::getTeam() const {
    return m_team;
}
void OAIPlayStat::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayStat::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayStat::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayStat::getTwoPointConversionAttempts() const {
    return m_two_point_conversion_attempts;
}
void OAIPlayStat::setTwoPointConversionAttempts(const qint32 &two_point_conversion_attempts) {
    m_two_point_conversion_attempts = two_point_conversion_attempts;
    m_two_point_conversion_attempts_isSet = true;
}

bool OAIPlayStat::is_two_point_conversion_attempts_Set() const{
    return m_two_point_conversion_attempts_isSet;
}

bool OAIPlayStat::is_two_point_conversion_attempts_Valid() const{
    return m_two_point_conversion_attempts_isValid;
}

qint32 OAIPlayStat::getTwoPointConversionPasses() const {
    return m_two_point_conversion_passes;
}
void OAIPlayStat::setTwoPointConversionPasses(const qint32 &two_point_conversion_passes) {
    m_two_point_conversion_passes = two_point_conversion_passes;
    m_two_point_conversion_passes_isSet = true;
}

bool OAIPlayStat::is_two_point_conversion_passes_Set() const{
    return m_two_point_conversion_passes_isSet;
}

bool OAIPlayStat::is_two_point_conversion_passes_Valid() const{
    return m_two_point_conversion_passes_isValid;
}

qint32 OAIPlayStat::getTwoPointConversionReceptions() const {
    return m_two_point_conversion_receptions;
}
void OAIPlayStat::setTwoPointConversionReceptions(const qint32 &two_point_conversion_receptions) {
    m_two_point_conversion_receptions = two_point_conversion_receptions;
    m_two_point_conversion_receptions_isSet = true;
}

bool OAIPlayStat::is_two_point_conversion_receptions_Set() const{
    return m_two_point_conversion_receptions_isSet;
}

bool OAIPlayStat::is_two_point_conversion_receptions_Valid() const{
    return m_two_point_conversion_receptions_isValid;
}

qint32 OAIPlayStat::getTwoPointConversionReturns() const {
    return m_two_point_conversion_returns;
}
void OAIPlayStat::setTwoPointConversionReturns(const qint32 &two_point_conversion_returns) {
    m_two_point_conversion_returns = two_point_conversion_returns;
    m_two_point_conversion_returns_isSet = true;
}

bool OAIPlayStat::is_two_point_conversion_returns_Set() const{
    return m_two_point_conversion_returns_isSet;
}

bool OAIPlayStat::is_two_point_conversion_returns_Valid() const{
    return m_two_point_conversion_returns_isValid;
}

qint32 OAIPlayStat::getTwoPointConversionRuns() const {
    return m_two_point_conversion_runs;
}
void OAIPlayStat::setTwoPointConversionRuns(const qint32 &two_point_conversion_runs) {
    m_two_point_conversion_runs = two_point_conversion_runs;
    m_two_point_conversion_runs_isSet = true;
}

bool OAIPlayStat::is_two_point_conversion_runs_Set() const{
    return m_two_point_conversion_runs_isSet;
}

bool OAIPlayStat::is_two_point_conversion_runs_Valid() const{
    return m_two_point_conversion_runs_isValid;
}

QString OAIPlayStat::getUpdated() const {
    return m_updated;
}
void OAIPlayStat::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayStat::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayStat::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPlayStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kickoff_touchbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kickoff_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kickoffs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_defended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_touchbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_targets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_passes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_receptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
