/**
 * NFL v3 Play-by-Play
 * NFL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlay::OAIPlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlay::OAIPlay() {
    this->initializeModel();
}

OAIPlay::~OAIPlay() {}

void OAIPlay::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_down_isSet = false;
    m_down_isValid = false;

    m_is_scoring_play_isSet = false;
    m_is_scoring_play_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_play_id_isSet = false;
    m_play_id_isValid = false;

    m_play_stats_isSet = false;
    m_play_stats_isValid = false;

    m_play_time_isSet = false;
    m_play_time_isValid = false;

    m_quarter_id_isSet = false;
    m_quarter_id_isValid = false;

    m_quarter_name_isSet = false;
    m_quarter_name_isValid = false;

    m_scoring_play_isSet = false;
    m_scoring_play_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_time_remaining_minutes_isSet = false;
    m_time_remaining_minutes_isValid = false;

    m_time_remaining_seconds_isSet = false;
    m_time_remaining_seconds_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_yard_line_isSet = false;
    m_yard_line_isValid = false;

    m_yard_line_territory_isSet = false;
    m_yard_line_territory_isValid = false;

    m_yards_gained_isSet = false;
    m_yards_gained_isValid = false;

    m_yards_to_end_zone_isSet = false;
    m_yards_to_end_zone_isValid = false;
}

void OAIPlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlay::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_down_isValid = ::OpenAPI::fromJsonValue(m_down, json[QString("Down")]);
    m_down_isSet = !json[QString("Down")].isNull() && m_down_isValid;

    m_is_scoring_play_isValid = ::OpenAPI::fromJsonValue(m_is_scoring_play, json[QString("IsScoringPlay")]);
    m_is_scoring_play_isSet = !json[QString("IsScoringPlay")].isNull() && m_is_scoring_play_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_play_id_isValid = ::OpenAPI::fromJsonValue(m_play_id, json[QString("PlayID")]);
    m_play_id_isSet = !json[QString("PlayID")].isNull() && m_play_id_isValid;

    m_play_stats_isValid = ::OpenAPI::fromJsonValue(m_play_stats, json[QString("PlayStats")]);
    m_play_stats_isSet = !json[QString("PlayStats")].isNull() && m_play_stats_isValid;

    m_play_time_isValid = ::OpenAPI::fromJsonValue(m_play_time, json[QString("PlayTime")]);
    m_play_time_isSet = !json[QString("PlayTime")].isNull() && m_play_time_isValid;

    m_quarter_id_isValid = ::OpenAPI::fromJsonValue(m_quarter_id, json[QString("QuarterID")]);
    m_quarter_id_isSet = !json[QString("QuarterID")].isNull() && m_quarter_id_isValid;

    m_quarter_name_isValid = ::OpenAPI::fromJsonValue(m_quarter_name, json[QString("QuarterName")]);
    m_quarter_name_isSet = !json[QString("QuarterName")].isNull() && m_quarter_name_isValid;

    m_scoring_play_isValid = ::OpenAPI::fromJsonValue(m_scoring_play, json[QString("ScoringPlay")]);
    m_scoring_play_isSet = !json[QString("ScoringPlay")].isNull() && m_scoring_play_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("Sequence")]);
    m_sequence_isSet = !json[QString("Sequence")].isNull() && m_sequence_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_time_remaining_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_minutes, json[QString("TimeRemainingMinutes")]);
    m_time_remaining_minutes_isSet = !json[QString("TimeRemainingMinutes")].isNull() && m_time_remaining_minutes_isValid;

    m_time_remaining_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_seconds, json[QString("TimeRemainingSeconds")]);
    m_time_remaining_seconds_isSet = !json[QString("TimeRemainingSeconds")].isNull() && m_time_remaining_seconds_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_yard_line_isValid = ::OpenAPI::fromJsonValue(m_yard_line, json[QString("YardLine")]);
    m_yard_line_isSet = !json[QString("YardLine")].isNull() && m_yard_line_isValid;

    m_yard_line_territory_isValid = ::OpenAPI::fromJsonValue(m_yard_line_territory, json[QString("YardLineTerritory")]);
    m_yard_line_territory_isSet = !json[QString("YardLineTerritory")].isNull() && m_yard_line_territory_isValid;

    m_yards_gained_isValid = ::OpenAPI::fromJsonValue(m_yards_gained, json[QString("YardsGained")]);
    m_yards_gained_isSet = !json[QString("YardsGained")].isNull() && m_yards_gained_isValid;

    m_yards_to_end_zone_isValid = ::OpenAPI::fromJsonValue(m_yards_to_end_zone, json[QString("YardsToEndZone")]);
    m_yards_to_end_zone_isSet = !json[QString("YardsToEndZone")].isNull() && m_yards_to_end_zone_isValid;
}

QString OAIPlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlay::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_down_isSet) {
        obj.insert(QString("Down"), ::OpenAPI::toJsonValue(m_down));
    }
    if (m_is_scoring_play_isSet) {
        obj.insert(QString("IsScoringPlay"), ::OpenAPI::toJsonValue(m_is_scoring_play));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_play_id_isSet) {
        obj.insert(QString("PlayID"), ::OpenAPI::toJsonValue(m_play_id));
    }
    if (m_play_stats.size() > 0) {
        obj.insert(QString("PlayStats"), ::OpenAPI::toJsonValue(m_play_stats));
    }
    if (m_play_time_isSet) {
        obj.insert(QString("PlayTime"), ::OpenAPI::toJsonValue(m_play_time));
    }
    if (m_quarter_id_isSet) {
        obj.insert(QString("QuarterID"), ::OpenAPI::toJsonValue(m_quarter_id));
    }
    if (m_quarter_name_isSet) {
        obj.insert(QString("QuarterName"), ::OpenAPI::toJsonValue(m_quarter_name));
    }
    if (m_scoring_play.isSet()) {
        obj.insert(QString("ScoringPlay"), ::OpenAPI::toJsonValue(m_scoring_play));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("Sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_time_remaining_minutes_isSet) {
        obj.insert(QString("TimeRemainingMinutes"), ::OpenAPI::toJsonValue(m_time_remaining_minutes));
    }
    if (m_time_remaining_seconds_isSet) {
        obj.insert(QString("TimeRemainingSeconds"), ::OpenAPI::toJsonValue(m_time_remaining_seconds));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_yard_line_isSet) {
        obj.insert(QString("YardLine"), ::OpenAPI::toJsonValue(m_yard_line));
    }
    if (m_yard_line_territory_isSet) {
        obj.insert(QString("YardLineTerritory"), ::OpenAPI::toJsonValue(m_yard_line_territory));
    }
    if (m_yards_gained_isSet) {
        obj.insert(QString("YardsGained"), ::OpenAPI::toJsonValue(m_yards_gained));
    }
    if (m_yards_to_end_zone_isSet) {
        obj.insert(QString("YardsToEndZone"), ::OpenAPI::toJsonValue(m_yards_to_end_zone));
    }
    return obj;
}

QString OAIPlay::getCreated() const {
    return m_created;
}
void OAIPlay::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPlay::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPlay::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPlay::getDescription() const {
    return m_description;
}
void OAIPlay::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlay::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlay::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPlay::getDistance() const {
    return m_distance;
}
void OAIPlay::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIPlay::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIPlay::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIPlay::getDown() const {
    return m_down;
}
void OAIPlay::setDown(const qint32 &down) {
    m_down = down;
    m_down_isSet = true;
}

bool OAIPlay::is_down_Set() const{
    return m_down_isSet;
}

bool OAIPlay::is_down_Valid() const{
    return m_down_isValid;
}

bool OAIPlay::isIsScoringPlay() const {
    return m_is_scoring_play;
}
void OAIPlay::setIsScoringPlay(const bool &is_scoring_play) {
    m_is_scoring_play = is_scoring_play;
    m_is_scoring_play_isSet = true;
}

bool OAIPlay::is_is_scoring_play_Set() const{
    return m_is_scoring_play_isSet;
}

bool OAIPlay::is_is_scoring_play_Valid() const{
    return m_is_scoring_play_isValid;
}

QString OAIPlay::getOpponent() const {
    return m_opponent;
}
void OAIPlay::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIPlay::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIPlay::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIPlay::getPlayId() const {
    return m_play_id;
}
void OAIPlay::setPlayId(const qint32 &play_id) {
    m_play_id = play_id;
    m_play_id_isSet = true;
}

bool OAIPlay::is_play_id_Set() const{
    return m_play_id_isSet;
}

bool OAIPlay::is_play_id_Valid() const{
    return m_play_id_isValid;
}

QList<OAIPlayStat> OAIPlay::getPlayStats() const {
    return m_play_stats;
}
void OAIPlay::setPlayStats(const QList<OAIPlayStat> &play_stats) {
    m_play_stats = play_stats;
    m_play_stats_isSet = true;
}

bool OAIPlay::is_play_stats_Set() const{
    return m_play_stats_isSet;
}

bool OAIPlay::is_play_stats_Valid() const{
    return m_play_stats_isValid;
}

QString OAIPlay::getPlayTime() const {
    return m_play_time;
}
void OAIPlay::setPlayTime(const QString &play_time) {
    m_play_time = play_time;
    m_play_time_isSet = true;
}

bool OAIPlay::is_play_time_Set() const{
    return m_play_time_isSet;
}

bool OAIPlay::is_play_time_Valid() const{
    return m_play_time_isValid;
}

qint32 OAIPlay::getQuarterId() const {
    return m_quarter_id;
}
void OAIPlay::setQuarterId(const qint32 &quarter_id) {
    m_quarter_id = quarter_id;
    m_quarter_id_isSet = true;
}

bool OAIPlay::is_quarter_id_Set() const{
    return m_quarter_id_isSet;
}

bool OAIPlay::is_quarter_id_Valid() const{
    return m_quarter_id_isValid;
}

QString OAIPlay::getQuarterName() const {
    return m_quarter_name;
}
void OAIPlay::setQuarterName(const QString &quarter_name) {
    m_quarter_name = quarter_name;
    m_quarter_name_isSet = true;
}

bool OAIPlay::is_quarter_name_Set() const{
    return m_quarter_name_isSet;
}

bool OAIPlay::is_quarter_name_Valid() const{
    return m_quarter_name_isValid;
}

OAIScoringPlay OAIPlay::getScoringPlay() const {
    return m_scoring_play;
}
void OAIPlay::setScoringPlay(const OAIScoringPlay &scoring_play) {
    m_scoring_play = scoring_play;
    m_scoring_play_isSet = true;
}

bool OAIPlay::is_scoring_play_Set() const{
    return m_scoring_play_isSet;
}

bool OAIPlay::is_scoring_play_Valid() const{
    return m_scoring_play_isValid;
}

qint32 OAIPlay::getSequence() const {
    return m_sequence;
}
void OAIPlay::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIPlay::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIPlay::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIPlay::getTeam() const {
    return m_team;
}
void OAIPlay::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlay::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlay::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlay::getTimeRemainingMinutes() const {
    return m_time_remaining_minutes;
}
void OAIPlay::setTimeRemainingMinutes(const qint32 &time_remaining_minutes) {
    m_time_remaining_minutes = time_remaining_minutes;
    m_time_remaining_minutes_isSet = true;
}

bool OAIPlay::is_time_remaining_minutes_Set() const{
    return m_time_remaining_minutes_isSet;
}

bool OAIPlay::is_time_remaining_minutes_Valid() const{
    return m_time_remaining_minutes_isValid;
}

qint32 OAIPlay::getTimeRemainingSeconds() const {
    return m_time_remaining_seconds;
}
void OAIPlay::setTimeRemainingSeconds(const qint32 &time_remaining_seconds) {
    m_time_remaining_seconds = time_remaining_seconds;
    m_time_remaining_seconds_isSet = true;
}

bool OAIPlay::is_time_remaining_seconds_Set() const{
    return m_time_remaining_seconds_isSet;
}

bool OAIPlay::is_time_remaining_seconds_Valid() const{
    return m_time_remaining_seconds_isValid;
}

QString OAIPlay::getType() const {
    return m_type;
}
void OAIPlay::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlay::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlay::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPlay::getUpdated() const {
    return m_updated;
}
void OAIPlay::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlay::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlay::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIPlay::getYardLine() const {
    return m_yard_line;
}
void OAIPlay::setYardLine(const qint32 &yard_line) {
    m_yard_line = yard_line;
    m_yard_line_isSet = true;
}

bool OAIPlay::is_yard_line_Set() const{
    return m_yard_line_isSet;
}

bool OAIPlay::is_yard_line_Valid() const{
    return m_yard_line_isValid;
}

QString OAIPlay::getYardLineTerritory() const {
    return m_yard_line_territory;
}
void OAIPlay::setYardLineTerritory(const QString &yard_line_territory) {
    m_yard_line_territory = yard_line_territory;
    m_yard_line_territory_isSet = true;
}

bool OAIPlay::is_yard_line_territory_Set() const{
    return m_yard_line_territory_isSet;
}

bool OAIPlay::is_yard_line_territory_Valid() const{
    return m_yard_line_territory_isValid;
}

qint32 OAIPlay::getYardsGained() const {
    return m_yards_gained;
}
void OAIPlay::setYardsGained(const qint32 &yards_gained) {
    m_yards_gained = yards_gained;
    m_yards_gained_isSet = true;
}

bool OAIPlay::is_yards_gained_Set() const{
    return m_yards_gained_isSet;
}

bool OAIPlay::is_yards_gained_Valid() const{
    return m_yards_gained_isValid;
}

qint32 OAIPlay::getYardsToEndZone() const {
    return m_yards_to_end_zone;
}
void OAIPlay::setYardsToEndZone(const qint32 &yards_to_end_zone) {
    m_yards_to_end_zone = yards_to_end_zone;
    m_yards_to_end_zone_isSet = true;
}

bool OAIPlay::is_yards_to_end_zone_Set() const{
    return m_yards_to_end_zone_isSet;
}

bool OAIPlay::is_yards_to_end_zone_Valid() const{
    return m_yards_to_end_zone_isValid;
}

bool OAIPlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_scoring_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_play.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yard_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yard_line_territory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_gained_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_to_end_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
