/**
 * NFL v3 Play-by-Play
 * NFL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayByPlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayByPlay::OAIPlayByPlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayByPlay::OAIPlayByPlay() {
    this->initializeModel();
}

OAIPlayByPlay::~OAIPlayByPlay() {}

void OAIPlayByPlay::initializeModel() {

    m_plays_isSet = false;
    m_plays_isValid = false;

    m_quarters_isSet = false;
    m_quarters_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIPlayByPlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayByPlay::fromJsonObject(QJsonObject json) {

    m_plays_isValid = ::OpenAPI::fromJsonValue(m_plays, json[QString("Plays")]);
    m_plays_isSet = !json[QString("Plays")].isNull() && m_plays_isValid;

    m_quarters_isValid = ::OpenAPI::fromJsonValue(m_quarters, json[QString("Quarters")]);
    m_quarters_isSet = !json[QString("Quarters")].isNull() && m_quarters_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;
}

QString OAIPlayByPlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayByPlay::asJsonObject() const {
    QJsonObject obj;
    if (m_plays.size() > 0) {
        obj.insert(QString("Plays"), ::OpenAPI::toJsonValue(m_plays));
    }
    if (m_quarters.size() > 0) {
        obj.insert(QString("Quarters"), ::OpenAPI::toJsonValue(m_quarters));
    }
    if (m_score.isSet()) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QList<OAIPlay> OAIPlayByPlay::getPlays() const {
    return m_plays;
}
void OAIPlayByPlay::setPlays(const QList<OAIPlay> &plays) {
    m_plays = plays;
    m_plays_isSet = true;
}

bool OAIPlayByPlay::is_plays_Set() const{
    return m_plays_isSet;
}

bool OAIPlayByPlay::is_plays_Valid() const{
    return m_plays_isValid;
}

QList<OAIQuarter> OAIPlayByPlay::getQuarters() const {
    return m_quarters;
}
void OAIPlayByPlay::setQuarters(const QList<OAIQuarter> &quarters) {
    m_quarters = quarters;
    m_quarters_isSet = true;
}

bool OAIPlayByPlay::is_quarters_Set() const{
    return m_quarters_isSet;
}

bool OAIPlayByPlay::is_quarters_Valid() const{
    return m_quarters_isValid;
}

OAIScore OAIPlayByPlay::getScore() const {
    return m_score;
}
void OAIPlayByPlay::setScore(const OAIScore &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPlayByPlay::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPlayByPlay::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIPlayByPlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayByPlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
