/**
 * NHL v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoringPlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoringPlay::OAIScoringPlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoringPlay::OAIScoringPlay() {
    this->initializeModel();
}

OAIScoringPlay::~OAIScoringPlay() {}

void OAIScoringPlay::initializeModel() {

    m_allowed_by_team_id_isSet = false;
    m_allowed_by_team_id_isValid = false;

    m_assisted_by_player_id1_isSet = false;
    m_assisted_by_player_id1_isValid = false;

    m_assisted_by_player_id2_isSet = false;
    m_assisted_by_player_id2_isValid = false;

    m_away_team_score_isSet = false;
    m_away_team_score_isValid = false;

    m_empty_net_isSet = false;
    m_empty_net_isValid = false;

    m_home_team_score_isSet = false;
    m_home_team_score_isValid = false;

    m_period_id_isSet = false;
    m_period_id_isValid = false;

    m_power_play_isSet = false;
    m_power_play_isValid = false;

    m_scored_by_player_id_isSet = false;
    m_scored_by_player_id_isValid = false;

    m_scored_by_team_id_isSet = false;
    m_scored_by_team_id_isValid = false;

    m_scoring_play_id_isSet = false;
    m_scoring_play_id_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_short_handed_isSet = false;
    m_short_handed_isValid = false;

    m_time_remaining_minutes_isSet = false;
    m_time_remaining_minutes_isValid = false;

    m_time_remaining_seconds_isSet = false;
    m_time_remaining_seconds_isValid = false;
}

void OAIScoringPlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoringPlay::fromJsonObject(QJsonObject json) {

    m_allowed_by_team_id_isValid = ::OpenAPI::fromJsonValue(m_allowed_by_team_id, json[QString("AllowedByTeamID")]);
    m_allowed_by_team_id_isSet = !json[QString("AllowedByTeamID")].isNull() && m_allowed_by_team_id_isValid;

    m_assisted_by_player_id1_isValid = ::OpenAPI::fromJsonValue(m_assisted_by_player_id1, json[QString("AssistedByPlayerID1")]);
    m_assisted_by_player_id1_isSet = !json[QString("AssistedByPlayerID1")].isNull() && m_assisted_by_player_id1_isValid;

    m_assisted_by_player_id2_isValid = ::OpenAPI::fromJsonValue(m_assisted_by_player_id2, json[QString("AssistedByPlayerID2")]);
    m_assisted_by_player_id2_isSet = !json[QString("AssistedByPlayerID2")].isNull() && m_assisted_by_player_id2_isValid;

    m_away_team_score_isValid = ::OpenAPI::fromJsonValue(m_away_team_score, json[QString("AwayTeamScore")]);
    m_away_team_score_isSet = !json[QString("AwayTeamScore")].isNull() && m_away_team_score_isValid;

    m_empty_net_isValid = ::OpenAPI::fromJsonValue(m_empty_net, json[QString("EmptyNet")]);
    m_empty_net_isSet = !json[QString("EmptyNet")].isNull() && m_empty_net_isValid;

    m_home_team_score_isValid = ::OpenAPI::fromJsonValue(m_home_team_score, json[QString("HomeTeamScore")]);
    m_home_team_score_isSet = !json[QString("HomeTeamScore")].isNull() && m_home_team_score_isValid;

    m_period_id_isValid = ::OpenAPI::fromJsonValue(m_period_id, json[QString("PeriodID")]);
    m_period_id_isSet = !json[QString("PeriodID")].isNull() && m_period_id_isValid;

    m_power_play_isValid = ::OpenAPI::fromJsonValue(m_power_play, json[QString("PowerPlay")]);
    m_power_play_isSet = !json[QString("PowerPlay")].isNull() && m_power_play_isValid;

    m_scored_by_player_id_isValid = ::OpenAPI::fromJsonValue(m_scored_by_player_id, json[QString("ScoredByPlayerID")]);
    m_scored_by_player_id_isSet = !json[QString("ScoredByPlayerID")].isNull() && m_scored_by_player_id_isValid;

    m_scored_by_team_id_isValid = ::OpenAPI::fromJsonValue(m_scored_by_team_id, json[QString("ScoredByTeamID")]);
    m_scored_by_team_id_isSet = !json[QString("ScoredByTeamID")].isNull() && m_scored_by_team_id_isValid;

    m_scoring_play_id_isValid = ::OpenAPI::fromJsonValue(m_scoring_play_id, json[QString("ScoringPlayID")]);
    m_scoring_play_id_isSet = !json[QString("ScoringPlayID")].isNull() && m_scoring_play_id_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("Sequence")]);
    m_sequence_isSet = !json[QString("Sequence")].isNull() && m_sequence_isValid;

    m_short_handed_isValid = ::OpenAPI::fromJsonValue(m_short_handed, json[QString("ShortHanded")]);
    m_short_handed_isSet = !json[QString("ShortHanded")].isNull() && m_short_handed_isValid;

    m_time_remaining_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_minutes, json[QString("TimeRemainingMinutes")]);
    m_time_remaining_minutes_isSet = !json[QString("TimeRemainingMinutes")].isNull() && m_time_remaining_minutes_isValid;

    m_time_remaining_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_seconds, json[QString("TimeRemainingSeconds")]);
    m_time_remaining_seconds_isSet = !json[QString("TimeRemainingSeconds")].isNull() && m_time_remaining_seconds_isValid;
}

QString OAIScoringPlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoringPlay::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_by_team_id_isSet) {
        obj.insert(QString("AllowedByTeamID"), ::OpenAPI::toJsonValue(m_allowed_by_team_id));
    }
    if (m_assisted_by_player_id1_isSet) {
        obj.insert(QString("AssistedByPlayerID1"), ::OpenAPI::toJsonValue(m_assisted_by_player_id1));
    }
    if (m_assisted_by_player_id2_isSet) {
        obj.insert(QString("AssistedByPlayerID2"), ::OpenAPI::toJsonValue(m_assisted_by_player_id2));
    }
    if (m_away_team_score_isSet) {
        obj.insert(QString("AwayTeamScore"), ::OpenAPI::toJsonValue(m_away_team_score));
    }
    if (m_empty_net_isSet) {
        obj.insert(QString("EmptyNet"), ::OpenAPI::toJsonValue(m_empty_net));
    }
    if (m_home_team_score_isSet) {
        obj.insert(QString("HomeTeamScore"), ::OpenAPI::toJsonValue(m_home_team_score));
    }
    if (m_period_id_isSet) {
        obj.insert(QString("PeriodID"), ::OpenAPI::toJsonValue(m_period_id));
    }
    if (m_power_play_isSet) {
        obj.insert(QString("PowerPlay"), ::OpenAPI::toJsonValue(m_power_play));
    }
    if (m_scored_by_player_id_isSet) {
        obj.insert(QString("ScoredByPlayerID"), ::OpenAPI::toJsonValue(m_scored_by_player_id));
    }
    if (m_scored_by_team_id_isSet) {
        obj.insert(QString("ScoredByTeamID"), ::OpenAPI::toJsonValue(m_scored_by_team_id));
    }
    if (m_scoring_play_id_isSet) {
        obj.insert(QString("ScoringPlayID"), ::OpenAPI::toJsonValue(m_scoring_play_id));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("Sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_short_handed_isSet) {
        obj.insert(QString("ShortHanded"), ::OpenAPI::toJsonValue(m_short_handed));
    }
    if (m_time_remaining_minutes_isSet) {
        obj.insert(QString("TimeRemainingMinutes"), ::OpenAPI::toJsonValue(m_time_remaining_minutes));
    }
    if (m_time_remaining_seconds_isSet) {
        obj.insert(QString("TimeRemainingSeconds"), ::OpenAPI::toJsonValue(m_time_remaining_seconds));
    }
    return obj;
}

qint32 OAIScoringPlay::getAllowedByTeamId() const {
    return m_allowed_by_team_id;
}
void OAIScoringPlay::setAllowedByTeamId(const qint32 &allowed_by_team_id) {
    m_allowed_by_team_id = allowed_by_team_id;
    m_allowed_by_team_id_isSet = true;
}

bool OAIScoringPlay::is_allowed_by_team_id_Set() const{
    return m_allowed_by_team_id_isSet;
}

bool OAIScoringPlay::is_allowed_by_team_id_Valid() const{
    return m_allowed_by_team_id_isValid;
}

qint32 OAIScoringPlay::getAssistedByPlayerId1() const {
    return m_assisted_by_player_id1;
}
void OAIScoringPlay::setAssistedByPlayerId1(const qint32 &assisted_by_player_id1) {
    m_assisted_by_player_id1 = assisted_by_player_id1;
    m_assisted_by_player_id1_isSet = true;
}

bool OAIScoringPlay::is_assisted_by_player_id1_Set() const{
    return m_assisted_by_player_id1_isSet;
}

bool OAIScoringPlay::is_assisted_by_player_id1_Valid() const{
    return m_assisted_by_player_id1_isValid;
}

qint32 OAIScoringPlay::getAssistedByPlayerId2() const {
    return m_assisted_by_player_id2;
}
void OAIScoringPlay::setAssistedByPlayerId2(const qint32 &assisted_by_player_id2) {
    m_assisted_by_player_id2 = assisted_by_player_id2;
    m_assisted_by_player_id2_isSet = true;
}

bool OAIScoringPlay::is_assisted_by_player_id2_Set() const{
    return m_assisted_by_player_id2_isSet;
}

bool OAIScoringPlay::is_assisted_by_player_id2_Valid() const{
    return m_assisted_by_player_id2_isValid;
}

qint32 OAIScoringPlay::getAwayTeamScore() const {
    return m_away_team_score;
}
void OAIScoringPlay::setAwayTeamScore(const qint32 &away_team_score) {
    m_away_team_score = away_team_score;
    m_away_team_score_isSet = true;
}

bool OAIScoringPlay::is_away_team_score_Set() const{
    return m_away_team_score_isSet;
}

bool OAIScoringPlay::is_away_team_score_Valid() const{
    return m_away_team_score_isValid;
}

bool OAIScoringPlay::isEmptyNet() const {
    return m_empty_net;
}
void OAIScoringPlay::setEmptyNet(const bool &empty_net) {
    m_empty_net = empty_net;
    m_empty_net_isSet = true;
}

bool OAIScoringPlay::is_empty_net_Set() const{
    return m_empty_net_isSet;
}

bool OAIScoringPlay::is_empty_net_Valid() const{
    return m_empty_net_isValid;
}

qint32 OAIScoringPlay::getHomeTeamScore() const {
    return m_home_team_score;
}
void OAIScoringPlay::setHomeTeamScore(const qint32 &home_team_score) {
    m_home_team_score = home_team_score;
    m_home_team_score_isSet = true;
}

bool OAIScoringPlay::is_home_team_score_Set() const{
    return m_home_team_score_isSet;
}

bool OAIScoringPlay::is_home_team_score_Valid() const{
    return m_home_team_score_isValid;
}

qint32 OAIScoringPlay::getPeriodId() const {
    return m_period_id;
}
void OAIScoringPlay::setPeriodId(const qint32 &period_id) {
    m_period_id = period_id;
    m_period_id_isSet = true;
}

bool OAIScoringPlay::is_period_id_Set() const{
    return m_period_id_isSet;
}

bool OAIScoringPlay::is_period_id_Valid() const{
    return m_period_id_isValid;
}

bool OAIScoringPlay::isPowerPlay() const {
    return m_power_play;
}
void OAIScoringPlay::setPowerPlay(const bool &power_play) {
    m_power_play = power_play;
    m_power_play_isSet = true;
}

bool OAIScoringPlay::is_power_play_Set() const{
    return m_power_play_isSet;
}

bool OAIScoringPlay::is_power_play_Valid() const{
    return m_power_play_isValid;
}

qint32 OAIScoringPlay::getScoredByPlayerId() const {
    return m_scored_by_player_id;
}
void OAIScoringPlay::setScoredByPlayerId(const qint32 &scored_by_player_id) {
    m_scored_by_player_id = scored_by_player_id;
    m_scored_by_player_id_isSet = true;
}

bool OAIScoringPlay::is_scored_by_player_id_Set() const{
    return m_scored_by_player_id_isSet;
}

bool OAIScoringPlay::is_scored_by_player_id_Valid() const{
    return m_scored_by_player_id_isValid;
}

qint32 OAIScoringPlay::getScoredByTeamId() const {
    return m_scored_by_team_id;
}
void OAIScoringPlay::setScoredByTeamId(const qint32 &scored_by_team_id) {
    m_scored_by_team_id = scored_by_team_id;
    m_scored_by_team_id_isSet = true;
}

bool OAIScoringPlay::is_scored_by_team_id_Set() const{
    return m_scored_by_team_id_isSet;
}

bool OAIScoringPlay::is_scored_by_team_id_Valid() const{
    return m_scored_by_team_id_isValid;
}

qint32 OAIScoringPlay::getScoringPlayId() const {
    return m_scoring_play_id;
}
void OAIScoringPlay::setScoringPlayId(const qint32 &scoring_play_id) {
    m_scoring_play_id = scoring_play_id;
    m_scoring_play_id_isSet = true;
}

bool OAIScoringPlay::is_scoring_play_id_Set() const{
    return m_scoring_play_id_isSet;
}

bool OAIScoringPlay::is_scoring_play_id_Valid() const{
    return m_scoring_play_id_isValid;
}

qint32 OAIScoringPlay::getSequence() const {
    return m_sequence;
}
void OAIScoringPlay::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIScoringPlay::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIScoringPlay::is_sequence_Valid() const{
    return m_sequence_isValid;
}

bool OAIScoringPlay::isShortHanded() const {
    return m_short_handed;
}
void OAIScoringPlay::setShortHanded(const bool &short_handed) {
    m_short_handed = short_handed;
    m_short_handed_isSet = true;
}

bool OAIScoringPlay::is_short_handed_Set() const{
    return m_short_handed_isSet;
}

bool OAIScoringPlay::is_short_handed_Valid() const{
    return m_short_handed_isValid;
}

qint32 OAIScoringPlay::getTimeRemainingMinutes() const {
    return m_time_remaining_minutes;
}
void OAIScoringPlay::setTimeRemainingMinutes(const qint32 &time_remaining_minutes) {
    m_time_remaining_minutes = time_remaining_minutes;
    m_time_remaining_minutes_isSet = true;
}

bool OAIScoringPlay::is_time_remaining_minutes_Set() const{
    return m_time_remaining_minutes_isSet;
}

bool OAIScoringPlay::is_time_remaining_minutes_Valid() const{
    return m_time_remaining_minutes_isValid;
}

qint32 OAIScoringPlay::getTimeRemainingSeconds() const {
    return m_time_remaining_seconds;
}
void OAIScoringPlay::setTimeRemainingSeconds(const qint32 &time_remaining_seconds) {
    m_time_remaining_seconds = time_remaining_seconds;
    m_time_remaining_seconds_isSet = true;
}

bool OAIScoringPlay::is_time_remaining_seconds_Set() const{
    return m_time_remaining_seconds_isSet;
}

bool OAIScoringPlay::is_time_remaining_seconds_Valid() const{
    return m_time_remaining_seconds_isValid;
}

bool OAIScoringPlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_by_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assisted_by_player_id1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assisted_by_player_id2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_net_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scored_by_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scored_by_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_handed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoringPlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
