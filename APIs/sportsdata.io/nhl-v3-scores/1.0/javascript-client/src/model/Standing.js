/**
 * NHL v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Standing model module.
 * @module model/Standing
 * @version 1.0
 */
class Standing {
    /**
     * Constructs a new <code>Standing</code>.
     * @alias module:model/Standing
     */
    constructor() { 
        
        Standing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Standing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Standing} obj Optional instance to populate.
     * @return {module:model/Standing} The populated <code>Standing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Standing();

            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Conference')) {
                obj['Conference'] = ApiClient.convertToType(data['Conference'], 'String');
            }
            if (data.hasOwnProperty('ConferenceLosses')) {
                obj['ConferenceLosses'] = ApiClient.convertToType(data['ConferenceLosses'], 'Number');
            }
            if (data.hasOwnProperty('ConferenceRank')) {
                obj['ConferenceRank'] = ApiClient.convertToType(data['ConferenceRank'], 'Number');
            }
            if (data.hasOwnProperty('ConferenceWins')) {
                obj['ConferenceWins'] = ApiClient.convertToType(data['ConferenceWins'], 'Number');
            }
            if (data.hasOwnProperty('Division')) {
                obj['Division'] = ApiClient.convertToType(data['Division'], 'String');
            }
            if (data.hasOwnProperty('DivisionLosses')) {
                obj['DivisionLosses'] = ApiClient.convertToType(data['DivisionLosses'], 'Number');
            }
            if (data.hasOwnProperty('DivisionRank')) {
                obj['DivisionRank'] = ApiClient.convertToType(data['DivisionRank'], 'Number');
            }
            if (data.hasOwnProperty('DivisionWins')) {
                obj['DivisionWins'] = ApiClient.convertToType(data['DivisionWins'], 'Number');
            }
            if (data.hasOwnProperty('GlobalTeamID')) {
                obj['GlobalTeamID'] = ApiClient.convertToType(data['GlobalTeamID'], 'Number');
            }
            if (data.hasOwnProperty('Key')) {
                obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
            }
            if (data.hasOwnProperty('Losses')) {
                obj['Losses'] = ApiClient.convertToType(data['Losses'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OvertimeLosses')) {
                obj['OvertimeLosses'] = ApiClient.convertToType(data['OvertimeLosses'], 'Number');
            }
            if (data.hasOwnProperty('Percentage')) {
                obj['Percentage'] = ApiClient.convertToType(data['Percentage'], 'Number');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('SeasonType')) {
                obj['SeasonType'] = ApiClient.convertToType(data['SeasonType'], 'Number');
            }
            if (data.hasOwnProperty('ShutoutWins')) {
                obj['ShutoutWins'] = ApiClient.convertToType(data['ShutoutWins'], 'Number');
            }
            if (data.hasOwnProperty('TeamID')) {
                obj['TeamID'] = ApiClient.convertToType(data['TeamID'], 'Number');
            }
            if (data.hasOwnProperty('Wins')) {
                obj['Wins'] = ApiClient.convertToType(data['Wins'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Standing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Standing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Conference'] && !(typeof data['Conference'] === 'string' || data['Conference'] instanceof String)) {
            throw new Error("Expected the field `Conference` to be a primitive type in the JSON string but got " + data['Conference']);
        }
        // ensure the json data is a string
        if (data['Division'] && !(typeof data['Division'] === 'string' || data['Division'] instanceof String)) {
            throw new Error("Expected the field `Division` to be a primitive type in the JSON string but got " + data['Division']);
        }
        // ensure the json data is a string
        if (data['Key'] && !(typeof data['Key'] === 'string' || data['Key'] instanceof String)) {
            throw new Error("Expected the field `Key` to be a primitive type in the JSON string but got " + data['Key']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}



/**
 * @member {String} City
 */
Standing.prototype['City'] = undefined;

/**
 * @member {String} Conference
 */
Standing.prototype['Conference'] = undefined;

/**
 * @member {Number} ConferenceLosses
 */
Standing.prototype['ConferenceLosses'] = undefined;

/**
 * @member {Number} ConferenceRank
 */
Standing.prototype['ConferenceRank'] = undefined;

/**
 * @member {Number} ConferenceWins
 */
Standing.prototype['ConferenceWins'] = undefined;

/**
 * @member {String} Division
 */
Standing.prototype['Division'] = undefined;

/**
 * @member {Number} DivisionLosses
 */
Standing.prototype['DivisionLosses'] = undefined;

/**
 * @member {Number} DivisionRank
 */
Standing.prototype['DivisionRank'] = undefined;

/**
 * @member {Number} DivisionWins
 */
Standing.prototype['DivisionWins'] = undefined;

/**
 * @member {Number} GlobalTeamID
 */
Standing.prototype['GlobalTeamID'] = undefined;

/**
 * @member {String} Key
 */
Standing.prototype['Key'] = undefined;

/**
 * @member {Number} Losses
 */
Standing.prototype['Losses'] = undefined;

/**
 * @member {String} Name
 */
Standing.prototype['Name'] = undefined;

/**
 * @member {Number} OvertimeLosses
 */
Standing.prototype['OvertimeLosses'] = undefined;

/**
 * @member {Number} Percentage
 */
Standing.prototype['Percentage'] = undefined;

/**
 * @member {Number} Season
 */
Standing.prototype['Season'] = undefined;

/**
 * @member {Number} SeasonType
 */
Standing.prototype['SeasonType'] = undefined;

/**
 * @member {Number} ShutoutWins
 */
Standing.prototype['ShutoutWins'] = undefined;

/**
 * @member {Number} TeamID
 */
Standing.prototype['TeamID'] = undefined;

/**
 * @member {Number} Wins
 */
Standing.prototype['Wins'] = undefined;






export default Standing;

