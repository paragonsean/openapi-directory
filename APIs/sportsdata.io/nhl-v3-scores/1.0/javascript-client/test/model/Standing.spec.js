/**
 * NHL v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NhlV3Scores);
  }
}(this, function(expect, NhlV3Scores) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NhlV3Scores.Standing();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Standing', function() {
    it('should create an instance of Standing', function() {
      // uncomment below and update the code to test Standing
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be.a(NhlV3Scores.Standing);
    });

    it('should have the property city (base name: "City")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property conference (base name: "Conference")', function() {
      // uncomment below and update the code to test the property conference
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property conferenceLosses (base name: "ConferenceLosses")', function() {
      // uncomment below and update the code to test the property conferenceLosses
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property conferenceRank (base name: "ConferenceRank")', function() {
      // uncomment below and update the code to test the property conferenceRank
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property conferenceWins (base name: "ConferenceWins")', function() {
      // uncomment below and update the code to test the property conferenceWins
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property division (base name: "Division")', function() {
      // uncomment below and update the code to test the property division
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property divisionLosses (base name: "DivisionLosses")', function() {
      // uncomment below and update the code to test the property divisionLosses
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property divisionRank (base name: "DivisionRank")', function() {
      // uncomment below and update the code to test the property divisionRank
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property divisionWins (base name: "DivisionWins")', function() {
      // uncomment below and update the code to test the property divisionWins
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property globalTeamID (base name: "GlobalTeamID")', function() {
      // uncomment below and update the code to test the property globalTeamID
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property key (base name: "Key")', function() {
      // uncomment below and update the code to test the property key
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property losses (base name: "Losses")', function() {
      // uncomment below and update the code to test the property losses
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property overtimeLosses (base name: "OvertimeLosses")', function() {
      // uncomment below and update the code to test the property overtimeLosses
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property percentage (base name: "Percentage")', function() {
      // uncomment below and update the code to test the property percentage
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property season (base name: "Season")', function() {
      // uncomment below and update the code to test the property season
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property seasonType (base name: "SeasonType")', function() {
      // uncomment below and update the code to test the property seasonType
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property shutoutWins (base name: "ShutoutWins")', function() {
      // uncomment below and update the code to test the property shutoutWins
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property teamID (base name: "TeamID")', function() {
      // uncomment below and update the code to test the property teamID
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property wins (base name: "Wins")', function() {
      // uncomment below and update the code to test the property wins
      //var instance = new NhlV3Scores.Standing();
      //expect(instance).to.be();
    });

  });

}));
