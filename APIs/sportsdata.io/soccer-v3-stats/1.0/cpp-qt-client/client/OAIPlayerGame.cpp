/**
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerGame::OAIPlayerGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerGame::OAIPlayerGame() {
    this->initializeModel();
}

OAIPlayerGame::~OAIPlayerGame() {}

void OAIPlayerGame::initializeModel() {

    m_assists_isSet = false;
    m_assists_isValid = false;

    m_blocked_shots_isSet = false;
    m_blocked_shots_isValid = false;

    m_captain_isSet = false;
    m_captain_isValid = false;

    m_corners_won_isSet = false;
    m_corners_won_isValid = false;

    m_crosses_isSet = false;
    m_crosses_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_defender_clean_sheets_isSet = false;
    m_defender_clean_sheets_isValid = false;

    m_draft_kings_position_isSet = false;
    m_draft_kings_position_isValid = false;

    m_draft_kings_salary_isSet = false;
    m_draft_kings_salary_isValid = false;

    m_fan_duel_position_isSet = false;
    m_fan_duel_position_isValid = false;

    m_fan_duel_salary_isSet = false;
    m_fan_duel_salary_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_mondogoal_isSet = false;
    m_fantasy_points_mondogoal_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_fouled_isSet = false;
    m_fouled_isValid = false;

    m_fouls_isSet = false;
    m_fouls_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_opponent_id_isSet = false;
    m_global_opponent_id_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_goalkeeper_clean_sheets_isSet = false;
    m_goalkeeper_clean_sheets_isValid = false;

    m_goalkeeper_goals_against_isSet = false;
    m_goalkeeper_goals_against_isValid = false;

    m_goalkeeper_saves_isSet = false;
    m_goalkeeper_saves_isValid = false;

    m_goalkeeper_single_goal_against_isSet = false;
    m_goalkeeper_single_goal_against_isValid = false;

    m_goalkeeper_wins_isSet = false;
    m_goalkeeper_wins_isValid = false;

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_injury_body_part_isSet = false;
    m_injury_body_part_isValid = false;

    m_injury_notes_isSet = false;
    m_injury_notes_isValid = false;

    m_injury_start_date_isSet = false;
    m_injury_start_date_isValid = false;

    m_injury_status_isSet = false;
    m_injury_status_isValid = false;

    m_interceptions_isSet = false;
    m_interceptions_isValid = false;

    m_is_game_over_isSet = false;
    m_is_game_over_isValid = false;

    m_jersey_isSet = false;
    m_jersey_isValid = false;

    m_last_man_tackle_isSet = false;
    m_last_man_tackle_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_mondogoal_position_isSet = false;
    m_mondogoal_position_isValid = false;

    m_mondogoal_salary_isSet = false;
    m_mondogoal_salary_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offsides_isSet = false;
    m_offsides_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_opponent_score_isSet = false;
    m_opponent_score_isValid = false;

    m_own_goals_isSet = false;
    m_own_goals_isValid = false;

    m_passes_isSet = false;
    m_passes_isValid = false;

    m_passes_completed_isSet = false;
    m_passes_completed_isValid = false;

    m_penalties_conceded_isSet = false;
    m_penalties_conceded_isValid = false;

    m_penalties_won_isSet = false;
    m_penalties_won_isValid = false;

    m_penalty_kick_goals_isSet = false;
    m_penalty_kick_goals_isValid = false;

    m_penalty_kick_misses_isSet = false;
    m_penalty_kick_misses_isValid = false;

    m_penalty_kick_saves_isSet = false;
    m_penalty_kick_saves_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_red_cards_isSet = false;
    m_red_cards_isValid = false;

    m_round_id_isSet = false;
    m_round_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_shots_isSet = false;
    m_shots_isValid = false;

    m_shots_on_goal_isSet = false;
    m_shots_on_goal_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_stat_id_isSet = false;
    m_stat_id_isValid = false;

    m_suspension_isSet = false;
    m_suspension_isValid = false;

    m_suspension_reason_isSet = false;
    m_suspension_reason_isValid = false;

    m_tackles_isSet = false;
    m_tackles_isValid = false;

    m_tackles_won_isSet = false;
    m_tackles_won_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_touches_isSet = false;
    m_touches_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_updated_utc_isSet = false;
    m_updated_utc_isValid = false;

    m_yahoo_position_isSet = false;
    m_yahoo_position_isValid = false;

    m_yahoo_salary_isSet = false;
    m_yahoo_salary_isValid = false;

    m_yellow_cards_isSet = false;
    m_yellow_cards_isValid = false;

    m_yellow_red_cards_isSet = false;
    m_yellow_red_cards_isValid = false;
}

void OAIPlayerGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerGame::fromJsonObject(QJsonObject json) {

    m_assists_isValid = ::OpenAPI::fromJsonValue(m_assists, json[QString("Assists")]);
    m_assists_isSet = !json[QString("Assists")].isNull() && m_assists_isValid;

    m_blocked_shots_isValid = ::OpenAPI::fromJsonValue(m_blocked_shots, json[QString("BlockedShots")]);
    m_blocked_shots_isSet = !json[QString("BlockedShots")].isNull() && m_blocked_shots_isValid;

    m_captain_isValid = ::OpenAPI::fromJsonValue(m_captain, json[QString("Captain")]);
    m_captain_isSet = !json[QString("Captain")].isNull() && m_captain_isValid;

    m_corners_won_isValid = ::OpenAPI::fromJsonValue(m_corners_won, json[QString("CornersWon")]);
    m_corners_won_isSet = !json[QString("CornersWon")].isNull() && m_corners_won_isValid;

    m_crosses_isValid = ::OpenAPI::fromJsonValue(m_crosses, json[QString("Crosses")]);
    m_crosses_isSet = !json[QString("Crosses")].isNull() && m_crosses_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_defender_clean_sheets_isValid = ::OpenAPI::fromJsonValue(m_defender_clean_sheets, json[QString("DefenderCleanSheets")]);
    m_defender_clean_sheets_isSet = !json[QString("DefenderCleanSheets")].isNull() && m_defender_clean_sheets_isValid;

    m_draft_kings_position_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_position, json[QString("DraftKingsPosition")]);
    m_draft_kings_position_isSet = !json[QString("DraftKingsPosition")].isNull() && m_draft_kings_position_isValid;

    m_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_salary, json[QString("DraftKingsSalary")]);
    m_draft_kings_salary_isSet = !json[QString("DraftKingsSalary")].isNull() && m_draft_kings_salary_isValid;

    m_fan_duel_position_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_position, json[QString("FanDuelPosition")]);
    m_fan_duel_position_isSet = !json[QString("FanDuelPosition")].isNull() && m_fan_duel_position_isValid;

    m_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_salary, json[QString("FanDuelSalary")]);
    m_fan_duel_salary_isSet = !json[QString("FanDuelSalary")].isNull() && m_fan_duel_salary_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_mondogoal_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_mondogoal, json[QString("FantasyPointsMondogoal")]);
    m_fantasy_points_mondogoal_isSet = !json[QString("FantasyPointsMondogoal")].isNull() && m_fantasy_points_mondogoal_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_fouled_isValid = ::OpenAPI::fromJsonValue(m_fouled, json[QString("Fouled")]);
    m_fouled_isSet = !json[QString("Fouled")].isNull() && m_fouled_isValid;

    m_fouls_isValid = ::OpenAPI::fromJsonValue(m_fouls, json[QString("Fouls")]);
    m_fouls_isSet = !json[QString("Fouls")].isNull() && m_fouls_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameId")]);
    m_game_id_isSet = !json[QString("GameId")].isNull() && m_game_id_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameId")]);
    m_global_game_id_isSet = !json[QString("GlobalGameId")].isNull() && m_global_game_id_isValid;

    m_global_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_global_opponent_id, json[QString("GlobalOpponentId")]);
    m_global_opponent_id_isSet = !json[QString("GlobalOpponentId")].isNull() && m_global_opponent_id_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamId")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamId")].isNull() && m_global_team_id_isValid;

    m_goalkeeper_clean_sheets_isValid = ::OpenAPI::fromJsonValue(m_goalkeeper_clean_sheets, json[QString("GoalkeeperCleanSheets")]);
    m_goalkeeper_clean_sheets_isSet = !json[QString("GoalkeeperCleanSheets")].isNull() && m_goalkeeper_clean_sheets_isValid;

    m_goalkeeper_goals_against_isValid = ::OpenAPI::fromJsonValue(m_goalkeeper_goals_against, json[QString("GoalkeeperGoalsAgainst")]);
    m_goalkeeper_goals_against_isSet = !json[QString("GoalkeeperGoalsAgainst")].isNull() && m_goalkeeper_goals_against_isValid;

    m_goalkeeper_saves_isValid = ::OpenAPI::fromJsonValue(m_goalkeeper_saves, json[QString("GoalkeeperSaves")]);
    m_goalkeeper_saves_isSet = !json[QString("GoalkeeperSaves")].isNull() && m_goalkeeper_saves_isValid;

    m_goalkeeper_single_goal_against_isValid = ::OpenAPI::fromJsonValue(m_goalkeeper_single_goal_against, json[QString("GoalkeeperSingleGoalAgainst")]);
    m_goalkeeper_single_goal_against_isSet = !json[QString("GoalkeeperSingleGoalAgainst")].isNull() && m_goalkeeper_single_goal_against_isValid;

    m_goalkeeper_wins_isValid = ::OpenAPI::fromJsonValue(m_goalkeeper_wins, json[QString("GoalkeeperWins")]);
    m_goalkeeper_wins_isSet = !json[QString("GoalkeeperWins")].isNull() && m_goalkeeper_wins_isValid;

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("Goals")]);
    m_goals_isSet = !json[QString("Goals")].isNull() && m_goals_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_injury_body_part_isValid = ::OpenAPI::fromJsonValue(m_injury_body_part, json[QString("InjuryBodyPart")]);
    m_injury_body_part_isSet = !json[QString("InjuryBodyPart")].isNull() && m_injury_body_part_isValid;

    m_injury_notes_isValid = ::OpenAPI::fromJsonValue(m_injury_notes, json[QString("InjuryNotes")]);
    m_injury_notes_isSet = !json[QString("InjuryNotes")].isNull() && m_injury_notes_isValid;

    m_injury_start_date_isValid = ::OpenAPI::fromJsonValue(m_injury_start_date, json[QString("InjuryStartDate")]);
    m_injury_start_date_isSet = !json[QString("InjuryStartDate")].isNull() && m_injury_start_date_isValid;

    m_injury_status_isValid = ::OpenAPI::fromJsonValue(m_injury_status, json[QString("InjuryStatus")]);
    m_injury_status_isSet = !json[QString("InjuryStatus")].isNull() && m_injury_status_isValid;

    m_interceptions_isValid = ::OpenAPI::fromJsonValue(m_interceptions, json[QString("Interceptions")]);
    m_interceptions_isSet = !json[QString("Interceptions")].isNull() && m_interceptions_isValid;

    m_is_game_over_isValid = ::OpenAPI::fromJsonValue(m_is_game_over, json[QString("IsGameOver")]);
    m_is_game_over_isSet = !json[QString("IsGameOver")].isNull() && m_is_game_over_isValid;

    m_jersey_isValid = ::OpenAPI::fromJsonValue(m_jersey, json[QString("Jersey")]);
    m_jersey_isSet = !json[QString("Jersey")].isNull() && m_jersey_isValid;

    m_last_man_tackle_isValid = ::OpenAPI::fromJsonValue(m_last_man_tackle, json[QString("LastManTackle")]);
    m_last_man_tackle_isSet = !json[QString("LastManTackle")].isNull() && m_last_man_tackle_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("Minutes")]);
    m_minutes_isSet = !json[QString("Minutes")].isNull() && m_minutes_isValid;

    m_mondogoal_position_isValid = ::OpenAPI::fromJsonValue(m_mondogoal_position, json[QString("MondogoalPosition")]);
    m_mondogoal_position_isSet = !json[QString("MondogoalPosition")].isNull() && m_mondogoal_position_isValid;

    m_mondogoal_salary_isValid = ::OpenAPI::fromJsonValue(m_mondogoal_salary, json[QString("MondogoalSalary")]);
    m_mondogoal_salary_isSet = !json[QString("MondogoalSalary")].isNull() && m_mondogoal_salary_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_offsides_isValid = ::OpenAPI::fromJsonValue(m_offsides, json[QString("Offsides")]);
    m_offsides_isSet = !json[QString("Offsides")].isNull() && m_offsides_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentId")]);
    m_opponent_id_isSet = !json[QString("OpponentId")].isNull() && m_opponent_id_isValid;

    m_opponent_score_isValid = ::OpenAPI::fromJsonValue(m_opponent_score, json[QString("OpponentScore")]);
    m_opponent_score_isSet = !json[QString("OpponentScore")].isNull() && m_opponent_score_isValid;

    m_own_goals_isValid = ::OpenAPI::fromJsonValue(m_own_goals, json[QString("OwnGoals")]);
    m_own_goals_isSet = !json[QString("OwnGoals")].isNull() && m_own_goals_isValid;

    m_passes_isValid = ::OpenAPI::fromJsonValue(m_passes, json[QString("Passes")]);
    m_passes_isSet = !json[QString("Passes")].isNull() && m_passes_isValid;

    m_passes_completed_isValid = ::OpenAPI::fromJsonValue(m_passes_completed, json[QString("PassesCompleted")]);
    m_passes_completed_isSet = !json[QString("PassesCompleted")].isNull() && m_passes_completed_isValid;

    m_penalties_conceded_isValid = ::OpenAPI::fromJsonValue(m_penalties_conceded, json[QString("PenaltiesConceded")]);
    m_penalties_conceded_isSet = !json[QString("PenaltiesConceded")].isNull() && m_penalties_conceded_isValid;

    m_penalties_won_isValid = ::OpenAPI::fromJsonValue(m_penalties_won, json[QString("PenaltiesWon")]);
    m_penalties_won_isSet = !json[QString("PenaltiesWon")].isNull() && m_penalties_won_isValid;

    m_penalty_kick_goals_isValid = ::OpenAPI::fromJsonValue(m_penalty_kick_goals, json[QString("PenaltyKickGoals")]);
    m_penalty_kick_goals_isSet = !json[QString("PenaltyKickGoals")].isNull() && m_penalty_kick_goals_isValid;

    m_penalty_kick_misses_isValid = ::OpenAPI::fromJsonValue(m_penalty_kick_misses, json[QString("PenaltyKickMisses")]);
    m_penalty_kick_misses_isSet = !json[QString("PenaltyKickMisses")].isNull() && m_penalty_kick_misses_isValid;

    m_penalty_kick_saves_isValid = ::OpenAPI::fromJsonValue(m_penalty_kick_saves, json[QString("PenaltyKickSaves")]);
    m_penalty_kick_saves_isSet = !json[QString("PenaltyKickSaves")].isNull() && m_penalty_kick_saves_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerId")]);
    m_player_id_isSet = !json[QString("PlayerId")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_red_cards_isValid = ::OpenAPI::fromJsonValue(m_red_cards, json[QString("RedCards")]);
    m_red_cards_isSet = !json[QString("RedCards")].isNull() && m_red_cards_isValid;

    m_round_id_isValid = ::OpenAPI::fromJsonValue(m_round_id, json[QString("RoundId")]);
    m_round_id_isSet = !json[QString("RoundId")].isNull() && m_round_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_shots_isValid = ::OpenAPI::fromJsonValue(m_shots, json[QString("Shots")]);
    m_shots_isSet = !json[QString("Shots")].isNull() && m_shots_isValid;

    m_shots_on_goal_isValid = ::OpenAPI::fromJsonValue(m_shots_on_goal, json[QString("ShotsOnGoal")]);
    m_shots_on_goal_isSet = !json[QString("ShotsOnGoal")].isNull() && m_shots_on_goal_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("Started")]);
    m_started_isSet = !json[QString("Started")].isNull() && m_started_isValid;

    m_stat_id_isValid = ::OpenAPI::fromJsonValue(m_stat_id, json[QString("StatId")]);
    m_stat_id_isSet = !json[QString("StatId")].isNull() && m_stat_id_isValid;

    m_suspension_isValid = ::OpenAPI::fromJsonValue(m_suspension, json[QString("Suspension")]);
    m_suspension_isSet = !json[QString("Suspension")].isNull() && m_suspension_isValid;

    m_suspension_reason_isValid = ::OpenAPI::fromJsonValue(m_suspension_reason, json[QString("SuspensionReason")]);
    m_suspension_reason_isSet = !json[QString("SuspensionReason")].isNull() && m_suspension_reason_isValid;

    m_tackles_isValid = ::OpenAPI::fromJsonValue(m_tackles, json[QString("Tackles")]);
    m_tackles_isSet = !json[QString("Tackles")].isNull() && m_tackles_isValid;

    m_tackles_won_isValid = ::OpenAPI::fromJsonValue(m_tackles_won, json[QString("TacklesWon")]);
    m_tackles_won_isSet = !json[QString("TacklesWon")].isNull() && m_tackles_won_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_touches_isValid = ::OpenAPI::fromJsonValue(m_touches, json[QString("Touches")]);
    m_touches_isSet = !json[QString("Touches")].isNull() && m_touches_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_updated_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_utc, json[QString("UpdatedUtc")]);
    m_updated_utc_isSet = !json[QString("UpdatedUtc")].isNull() && m_updated_utc_isValid;

    m_yahoo_position_isValid = ::OpenAPI::fromJsonValue(m_yahoo_position, json[QString("YahooPosition")]);
    m_yahoo_position_isSet = !json[QString("YahooPosition")].isNull() && m_yahoo_position_isValid;

    m_yahoo_salary_isValid = ::OpenAPI::fromJsonValue(m_yahoo_salary, json[QString("YahooSalary")]);
    m_yahoo_salary_isSet = !json[QString("YahooSalary")].isNull() && m_yahoo_salary_isValid;

    m_yellow_cards_isValid = ::OpenAPI::fromJsonValue(m_yellow_cards, json[QString("YellowCards")]);
    m_yellow_cards_isSet = !json[QString("YellowCards")].isNull() && m_yellow_cards_isValid;

    m_yellow_red_cards_isValid = ::OpenAPI::fromJsonValue(m_yellow_red_cards, json[QString("YellowRedCards")]);
    m_yellow_red_cards_isSet = !json[QString("YellowRedCards")].isNull() && m_yellow_red_cards_isValid;
}

QString OAIPlayerGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerGame::asJsonObject() const {
    QJsonObject obj;
    if (m_assists_isSet) {
        obj.insert(QString("Assists"), ::OpenAPI::toJsonValue(m_assists));
    }
    if (m_blocked_shots_isSet) {
        obj.insert(QString("BlockedShots"), ::OpenAPI::toJsonValue(m_blocked_shots));
    }
    if (m_captain_isSet) {
        obj.insert(QString("Captain"), ::OpenAPI::toJsonValue(m_captain));
    }
    if (m_corners_won_isSet) {
        obj.insert(QString("CornersWon"), ::OpenAPI::toJsonValue(m_corners_won));
    }
    if (m_crosses_isSet) {
        obj.insert(QString("Crosses"), ::OpenAPI::toJsonValue(m_crosses));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_defender_clean_sheets_isSet) {
        obj.insert(QString("DefenderCleanSheets"), ::OpenAPI::toJsonValue(m_defender_clean_sheets));
    }
    if (m_draft_kings_position_isSet) {
        obj.insert(QString("DraftKingsPosition"), ::OpenAPI::toJsonValue(m_draft_kings_position));
    }
    if (m_draft_kings_salary_isSet) {
        obj.insert(QString("DraftKingsSalary"), ::OpenAPI::toJsonValue(m_draft_kings_salary));
    }
    if (m_fan_duel_position_isSet) {
        obj.insert(QString("FanDuelPosition"), ::OpenAPI::toJsonValue(m_fan_duel_position));
    }
    if (m_fan_duel_salary_isSet) {
        obj.insert(QString("FanDuelSalary"), ::OpenAPI::toJsonValue(m_fan_duel_salary));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_mondogoal_isSet) {
        obj.insert(QString("FantasyPointsMondogoal"), ::OpenAPI::toJsonValue(m_fantasy_points_mondogoal));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_fouled_isSet) {
        obj.insert(QString("Fouled"), ::OpenAPI::toJsonValue(m_fouled));
    }
    if (m_fouls_isSet) {
        obj.insert(QString("Fouls"), ::OpenAPI::toJsonValue(m_fouls));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameId"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_opponent_id_isSet) {
        obj.insert(QString("GlobalOpponentId"), ::OpenAPI::toJsonValue(m_global_opponent_id));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamId"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_goalkeeper_clean_sheets_isSet) {
        obj.insert(QString("GoalkeeperCleanSheets"), ::OpenAPI::toJsonValue(m_goalkeeper_clean_sheets));
    }
    if (m_goalkeeper_goals_against_isSet) {
        obj.insert(QString("GoalkeeperGoalsAgainst"), ::OpenAPI::toJsonValue(m_goalkeeper_goals_against));
    }
    if (m_goalkeeper_saves_isSet) {
        obj.insert(QString("GoalkeeperSaves"), ::OpenAPI::toJsonValue(m_goalkeeper_saves));
    }
    if (m_goalkeeper_single_goal_against_isSet) {
        obj.insert(QString("GoalkeeperSingleGoalAgainst"), ::OpenAPI::toJsonValue(m_goalkeeper_single_goal_against));
    }
    if (m_goalkeeper_wins_isSet) {
        obj.insert(QString("GoalkeeperWins"), ::OpenAPI::toJsonValue(m_goalkeeper_wins));
    }
    if (m_goals_isSet) {
        obj.insert(QString("Goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_injury_body_part_isSet) {
        obj.insert(QString("InjuryBodyPart"), ::OpenAPI::toJsonValue(m_injury_body_part));
    }
    if (m_injury_notes_isSet) {
        obj.insert(QString("InjuryNotes"), ::OpenAPI::toJsonValue(m_injury_notes));
    }
    if (m_injury_start_date_isSet) {
        obj.insert(QString("InjuryStartDate"), ::OpenAPI::toJsonValue(m_injury_start_date));
    }
    if (m_injury_status_isSet) {
        obj.insert(QString("InjuryStatus"), ::OpenAPI::toJsonValue(m_injury_status));
    }
    if (m_interceptions_isSet) {
        obj.insert(QString("Interceptions"), ::OpenAPI::toJsonValue(m_interceptions));
    }
    if (m_is_game_over_isSet) {
        obj.insert(QString("IsGameOver"), ::OpenAPI::toJsonValue(m_is_game_over));
    }
    if (m_jersey_isSet) {
        obj.insert(QString("Jersey"), ::OpenAPI::toJsonValue(m_jersey));
    }
    if (m_last_man_tackle_isSet) {
        obj.insert(QString("LastManTackle"), ::OpenAPI::toJsonValue(m_last_man_tackle));
    }
    if (m_minutes_isSet) {
        obj.insert(QString("Minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_mondogoal_position_isSet) {
        obj.insert(QString("MondogoalPosition"), ::OpenAPI::toJsonValue(m_mondogoal_position));
    }
    if (m_mondogoal_salary_isSet) {
        obj.insert(QString("MondogoalSalary"), ::OpenAPI::toJsonValue(m_mondogoal_salary));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offsides_isSet) {
        obj.insert(QString("Offsides"), ::OpenAPI::toJsonValue(m_offsides));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentId"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_opponent_score_isSet) {
        obj.insert(QString("OpponentScore"), ::OpenAPI::toJsonValue(m_opponent_score));
    }
    if (m_own_goals_isSet) {
        obj.insert(QString("OwnGoals"), ::OpenAPI::toJsonValue(m_own_goals));
    }
    if (m_passes_isSet) {
        obj.insert(QString("Passes"), ::OpenAPI::toJsonValue(m_passes));
    }
    if (m_passes_completed_isSet) {
        obj.insert(QString("PassesCompleted"), ::OpenAPI::toJsonValue(m_passes_completed));
    }
    if (m_penalties_conceded_isSet) {
        obj.insert(QString("PenaltiesConceded"), ::OpenAPI::toJsonValue(m_penalties_conceded));
    }
    if (m_penalties_won_isSet) {
        obj.insert(QString("PenaltiesWon"), ::OpenAPI::toJsonValue(m_penalties_won));
    }
    if (m_penalty_kick_goals_isSet) {
        obj.insert(QString("PenaltyKickGoals"), ::OpenAPI::toJsonValue(m_penalty_kick_goals));
    }
    if (m_penalty_kick_misses_isSet) {
        obj.insert(QString("PenaltyKickMisses"), ::OpenAPI::toJsonValue(m_penalty_kick_misses));
    }
    if (m_penalty_kick_saves_isSet) {
        obj.insert(QString("PenaltyKickSaves"), ::OpenAPI::toJsonValue(m_penalty_kick_saves));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_red_cards_isSet) {
        obj.insert(QString("RedCards"), ::OpenAPI::toJsonValue(m_red_cards));
    }
    if (m_round_id_isSet) {
        obj.insert(QString("RoundId"), ::OpenAPI::toJsonValue(m_round_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_shots_isSet) {
        obj.insert(QString("Shots"), ::OpenAPI::toJsonValue(m_shots));
    }
    if (m_shots_on_goal_isSet) {
        obj.insert(QString("ShotsOnGoal"), ::OpenAPI::toJsonValue(m_shots_on_goal));
    }
    if (m_started_isSet) {
        obj.insert(QString("Started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_stat_id_isSet) {
        obj.insert(QString("StatId"), ::OpenAPI::toJsonValue(m_stat_id));
    }
    if (m_suspension_isSet) {
        obj.insert(QString("Suspension"), ::OpenAPI::toJsonValue(m_suspension));
    }
    if (m_suspension_reason_isSet) {
        obj.insert(QString("SuspensionReason"), ::OpenAPI::toJsonValue(m_suspension_reason));
    }
    if (m_tackles_isSet) {
        obj.insert(QString("Tackles"), ::OpenAPI::toJsonValue(m_tackles));
    }
    if (m_tackles_won_isSet) {
        obj.insert(QString("TacklesWon"), ::OpenAPI::toJsonValue(m_tackles_won));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_touches_isSet) {
        obj.insert(QString("Touches"), ::OpenAPI::toJsonValue(m_touches));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_updated_utc_isSet) {
        obj.insert(QString("UpdatedUtc"), ::OpenAPI::toJsonValue(m_updated_utc));
    }
    if (m_yahoo_position_isSet) {
        obj.insert(QString("YahooPosition"), ::OpenAPI::toJsonValue(m_yahoo_position));
    }
    if (m_yahoo_salary_isSet) {
        obj.insert(QString("YahooSalary"), ::OpenAPI::toJsonValue(m_yahoo_salary));
    }
    if (m_yellow_cards_isSet) {
        obj.insert(QString("YellowCards"), ::OpenAPI::toJsonValue(m_yellow_cards));
    }
    if (m_yellow_red_cards_isSet) {
        obj.insert(QString("YellowRedCards"), ::OpenAPI::toJsonValue(m_yellow_red_cards));
    }
    return obj;
}

double OAIPlayerGame::getAssists() const {
    return m_assists;
}
void OAIPlayerGame::setAssists(const double &assists) {
    m_assists = assists;
    m_assists_isSet = true;
}

bool OAIPlayerGame::is_assists_Set() const{
    return m_assists_isSet;
}

bool OAIPlayerGame::is_assists_Valid() const{
    return m_assists_isValid;
}

double OAIPlayerGame::getBlockedShots() const {
    return m_blocked_shots;
}
void OAIPlayerGame::setBlockedShots(const double &blocked_shots) {
    m_blocked_shots = blocked_shots;
    m_blocked_shots_isSet = true;
}

bool OAIPlayerGame::is_blocked_shots_Set() const{
    return m_blocked_shots_isSet;
}

bool OAIPlayerGame::is_blocked_shots_Valid() const{
    return m_blocked_shots_isValid;
}

bool OAIPlayerGame::isCaptain() const {
    return m_captain;
}
void OAIPlayerGame::setCaptain(const bool &captain) {
    m_captain = captain;
    m_captain_isSet = true;
}

bool OAIPlayerGame::is_captain_Set() const{
    return m_captain_isSet;
}

bool OAIPlayerGame::is_captain_Valid() const{
    return m_captain_isValid;
}

double OAIPlayerGame::getCornersWon() const {
    return m_corners_won;
}
void OAIPlayerGame::setCornersWon(const double &corners_won) {
    m_corners_won = corners_won;
    m_corners_won_isSet = true;
}

bool OAIPlayerGame::is_corners_won_Set() const{
    return m_corners_won_isSet;
}

bool OAIPlayerGame::is_corners_won_Valid() const{
    return m_corners_won_isValid;
}

double OAIPlayerGame::getCrosses() const {
    return m_crosses;
}
void OAIPlayerGame::setCrosses(const double &crosses) {
    m_crosses = crosses;
    m_crosses_isSet = true;
}

bool OAIPlayerGame::is_crosses_Set() const{
    return m_crosses_isSet;
}

bool OAIPlayerGame::is_crosses_Valid() const{
    return m_crosses_isValid;
}

QString OAIPlayerGame::getDateTime() const {
    return m_date_time;
}
void OAIPlayerGame::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIPlayerGame::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIPlayerGame::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIPlayerGame::getDay() const {
    return m_day;
}
void OAIPlayerGame::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIPlayerGame::is_day_Set() const{
    return m_day_isSet;
}

bool OAIPlayerGame::is_day_Valid() const{
    return m_day_isValid;
}

double OAIPlayerGame::getDefenderCleanSheets() const {
    return m_defender_clean_sheets;
}
void OAIPlayerGame::setDefenderCleanSheets(const double &defender_clean_sheets) {
    m_defender_clean_sheets = defender_clean_sheets;
    m_defender_clean_sheets_isSet = true;
}

bool OAIPlayerGame::is_defender_clean_sheets_Set() const{
    return m_defender_clean_sheets_isSet;
}

bool OAIPlayerGame::is_defender_clean_sheets_Valid() const{
    return m_defender_clean_sheets_isValid;
}

QString OAIPlayerGame::getDraftKingsPosition() const {
    return m_draft_kings_position;
}
void OAIPlayerGame::setDraftKingsPosition(const QString &draft_kings_position) {
    m_draft_kings_position = draft_kings_position;
    m_draft_kings_position_isSet = true;
}

bool OAIPlayerGame::is_draft_kings_position_Set() const{
    return m_draft_kings_position_isSet;
}

bool OAIPlayerGame::is_draft_kings_position_Valid() const{
    return m_draft_kings_position_isValid;
}

qint32 OAIPlayerGame::getDraftKingsSalary() const {
    return m_draft_kings_salary;
}
void OAIPlayerGame::setDraftKingsSalary(const qint32 &draft_kings_salary) {
    m_draft_kings_salary = draft_kings_salary;
    m_draft_kings_salary_isSet = true;
}

bool OAIPlayerGame::is_draft_kings_salary_Set() const{
    return m_draft_kings_salary_isSet;
}

bool OAIPlayerGame::is_draft_kings_salary_Valid() const{
    return m_draft_kings_salary_isValid;
}

QString OAIPlayerGame::getFanDuelPosition() const {
    return m_fan_duel_position;
}
void OAIPlayerGame::setFanDuelPosition(const QString &fan_duel_position) {
    m_fan_duel_position = fan_duel_position;
    m_fan_duel_position_isSet = true;
}

bool OAIPlayerGame::is_fan_duel_position_Set() const{
    return m_fan_duel_position_isSet;
}

bool OAIPlayerGame::is_fan_duel_position_Valid() const{
    return m_fan_duel_position_isValid;
}

qint32 OAIPlayerGame::getFanDuelSalary() const {
    return m_fan_duel_salary;
}
void OAIPlayerGame::setFanDuelSalary(const qint32 &fan_duel_salary) {
    m_fan_duel_salary = fan_duel_salary;
    m_fan_duel_salary_isSet = true;
}

bool OAIPlayerGame::is_fan_duel_salary_Set() const{
    return m_fan_duel_salary_isSet;
}

bool OAIPlayerGame::is_fan_duel_salary_Valid() const{
    return m_fan_duel_salary_isValid;
}

double OAIPlayerGame::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerGame::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerGame::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerGame::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAIPlayerGame::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAIPlayerGame::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAIPlayerGame::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAIPlayerGame::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAIPlayerGame::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAIPlayerGame::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAIPlayerGame::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAIPlayerGame::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAIPlayerGame::getFantasyPointsMondogoal() const {
    return m_fantasy_points_mondogoal;
}
void OAIPlayerGame::setFantasyPointsMondogoal(const double &fantasy_points_mondogoal) {
    m_fantasy_points_mondogoal = fantasy_points_mondogoal;
    m_fantasy_points_mondogoal_isSet = true;
}

bool OAIPlayerGame::is_fantasy_points_mondogoal_Set() const{
    return m_fantasy_points_mondogoal_isSet;
}

bool OAIPlayerGame::is_fantasy_points_mondogoal_Valid() const{
    return m_fantasy_points_mondogoal_isValid;
}

double OAIPlayerGame::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAIPlayerGame::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAIPlayerGame::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAIPlayerGame::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

double OAIPlayerGame::getFouled() const {
    return m_fouled;
}
void OAIPlayerGame::setFouled(const double &fouled) {
    m_fouled = fouled;
    m_fouled_isSet = true;
}

bool OAIPlayerGame::is_fouled_Set() const{
    return m_fouled_isSet;
}

bool OAIPlayerGame::is_fouled_Valid() const{
    return m_fouled_isValid;
}

double OAIPlayerGame::getFouls() const {
    return m_fouls;
}
void OAIPlayerGame::setFouls(const double &fouls) {
    m_fouls = fouls;
    m_fouls_isSet = true;
}

bool OAIPlayerGame::is_fouls_Set() const{
    return m_fouls_isSet;
}

bool OAIPlayerGame::is_fouls_Valid() const{
    return m_fouls_isValid;
}

qint32 OAIPlayerGame::getGameId() const {
    return m_game_id;
}
void OAIPlayerGame::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIPlayerGame::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIPlayerGame::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIPlayerGame::getGames() const {
    return m_games;
}
void OAIPlayerGame::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAIPlayerGame::is_games_Set() const{
    return m_games_isSet;
}

bool OAIPlayerGame::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAIPlayerGame::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIPlayerGame::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIPlayerGame::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIPlayerGame::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIPlayerGame::getGlobalOpponentId() const {
    return m_global_opponent_id;
}
void OAIPlayerGame::setGlobalOpponentId(const qint32 &global_opponent_id) {
    m_global_opponent_id = global_opponent_id;
    m_global_opponent_id_isSet = true;
}

bool OAIPlayerGame::is_global_opponent_id_Set() const{
    return m_global_opponent_id_isSet;
}

bool OAIPlayerGame::is_global_opponent_id_Valid() const{
    return m_global_opponent_id_isValid;
}

qint32 OAIPlayerGame::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIPlayerGame::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIPlayerGame::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIPlayerGame::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

double OAIPlayerGame::getGoalkeeperCleanSheets() const {
    return m_goalkeeper_clean_sheets;
}
void OAIPlayerGame::setGoalkeeperCleanSheets(const double &goalkeeper_clean_sheets) {
    m_goalkeeper_clean_sheets = goalkeeper_clean_sheets;
    m_goalkeeper_clean_sheets_isSet = true;
}

bool OAIPlayerGame::is_goalkeeper_clean_sheets_Set() const{
    return m_goalkeeper_clean_sheets_isSet;
}

bool OAIPlayerGame::is_goalkeeper_clean_sheets_Valid() const{
    return m_goalkeeper_clean_sheets_isValid;
}

double OAIPlayerGame::getGoalkeeperGoalsAgainst() const {
    return m_goalkeeper_goals_against;
}
void OAIPlayerGame::setGoalkeeperGoalsAgainst(const double &goalkeeper_goals_against) {
    m_goalkeeper_goals_against = goalkeeper_goals_against;
    m_goalkeeper_goals_against_isSet = true;
}

bool OAIPlayerGame::is_goalkeeper_goals_against_Set() const{
    return m_goalkeeper_goals_against_isSet;
}

bool OAIPlayerGame::is_goalkeeper_goals_against_Valid() const{
    return m_goalkeeper_goals_against_isValid;
}

double OAIPlayerGame::getGoalkeeperSaves() const {
    return m_goalkeeper_saves;
}
void OAIPlayerGame::setGoalkeeperSaves(const double &goalkeeper_saves) {
    m_goalkeeper_saves = goalkeeper_saves;
    m_goalkeeper_saves_isSet = true;
}

bool OAIPlayerGame::is_goalkeeper_saves_Set() const{
    return m_goalkeeper_saves_isSet;
}

bool OAIPlayerGame::is_goalkeeper_saves_Valid() const{
    return m_goalkeeper_saves_isValid;
}

double OAIPlayerGame::getGoalkeeperSingleGoalAgainst() const {
    return m_goalkeeper_single_goal_against;
}
void OAIPlayerGame::setGoalkeeperSingleGoalAgainst(const double &goalkeeper_single_goal_against) {
    m_goalkeeper_single_goal_against = goalkeeper_single_goal_against;
    m_goalkeeper_single_goal_against_isSet = true;
}

bool OAIPlayerGame::is_goalkeeper_single_goal_against_Set() const{
    return m_goalkeeper_single_goal_against_isSet;
}

bool OAIPlayerGame::is_goalkeeper_single_goal_against_Valid() const{
    return m_goalkeeper_single_goal_against_isValid;
}

double OAIPlayerGame::getGoalkeeperWins() const {
    return m_goalkeeper_wins;
}
void OAIPlayerGame::setGoalkeeperWins(const double &goalkeeper_wins) {
    m_goalkeeper_wins = goalkeeper_wins;
    m_goalkeeper_wins_isSet = true;
}

bool OAIPlayerGame::is_goalkeeper_wins_Set() const{
    return m_goalkeeper_wins_isSet;
}

bool OAIPlayerGame::is_goalkeeper_wins_Valid() const{
    return m_goalkeeper_wins_isValid;
}

double OAIPlayerGame::getGoals() const {
    return m_goals;
}
void OAIPlayerGame::setGoals(const double &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIPlayerGame::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIPlayerGame::is_goals_Valid() const{
    return m_goals_isValid;
}

QString OAIPlayerGame::getHomeOrAway() const {
    return m_home_or_away;
}
void OAIPlayerGame::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAIPlayerGame::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAIPlayerGame::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

QString OAIPlayerGame::getInjuryBodyPart() const {
    return m_injury_body_part;
}
void OAIPlayerGame::setInjuryBodyPart(const QString &injury_body_part) {
    m_injury_body_part = injury_body_part;
    m_injury_body_part_isSet = true;
}

bool OAIPlayerGame::is_injury_body_part_Set() const{
    return m_injury_body_part_isSet;
}

bool OAIPlayerGame::is_injury_body_part_Valid() const{
    return m_injury_body_part_isValid;
}

QString OAIPlayerGame::getInjuryNotes() const {
    return m_injury_notes;
}
void OAIPlayerGame::setInjuryNotes(const QString &injury_notes) {
    m_injury_notes = injury_notes;
    m_injury_notes_isSet = true;
}

bool OAIPlayerGame::is_injury_notes_Set() const{
    return m_injury_notes_isSet;
}

bool OAIPlayerGame::is_injury_notes_Valid() const{
    return m_injury_notes_isValid;
}

QString OAIPlayerGame::getInjuryStartDate() const {
    return m_injury_start_date;
}
void OAIPlayerGame::setInjuryStartDate(const QString &injury_start_date) {
    m_injury_start_date = injury_start_date;
    m_injury_start_date_isSet = true;
}

bool OAIPlayerGame::is_injury_start_date_Set() const{
    return m_injury_start_date_isSet;
}

bool OAIPlayerGame::is_injury_start_date_Valid() const{
    return m_injury_start_date_isValid;
}

QString OAIPlayerGame::getInjuryStatus() const {
    return m_injury_status;
}
void OAIPlayerGame::setInjuryStatus(const QString &injury_status) {
    m_injury_status = injury_status;
    m_injury_status_isSet = true;
}

bool OAIPlayerGame::is_injury_status_Set() const{
    return m_injury_status_isSet;
}

bool OAIPlayerGame::is_injury_status_Valid() const{
    return m_injury_status_isValid;
}

double OAIPlayerGame::getInterceptions() const {
    return m_interceptions;
}
void OAIPlayerGame::setInterceptions(const double &interceptions) {
    m_interceptions = interceptions;
    m_interceptions_isSet = true;
}

bool OAIPlayerGame::is_interceptions_Set() const{
    return m_interceptions_isSet;
}

bool OAIPlayerGame::is_interceptions_Valid() const{
    return m_interceptions_isValid;
}

bool OAIPlayerGame::isIsGameOver() const {
    return m_is_game_over;
}
void OAIPlayerGame::setIsGameOver(const bool &is_game_over) {
    m_is_game_over = is_game_over;
    m_is_game_over_isSet = true;
}

bool OAIPlayerGame::is_is_game_over_Set() const{
    return m_is_game_over_isSet;
}

bool OAIPlayerGame::is_is_game_over_Valid() const{
    return m_is_game_over_isValid;
}

qint32 OAIPlayerGame::getJersey() const {
    return m_jersey;
}
void OAIPlayerGame::setJersey(const qint32 &jersey) {
    m_jersey = jersey;
    m_jersey_isSet = true;
}

bool OAIPlayerGame::is_jersey_Set() const{
    return m_jersey_isSet;
}

bool OAIPlayerGame::is_jersey_Valid() const{
    return m_jersey_isValid;
}

double OAIPlayerGame::getLastManTackle() const {
    return m_last_man_tackle;
}
void OAIPlayerGame::setLastManTackle(const double &last_man_tackle) {
    m_last_man_tackle = last_man_tackle;
    m_last_man_tackle_isSet = true;
}

bool OAIPlayerGame::is_last_man_tackle_Set() const{
    return m_last_man_tackle_isSet;
}

bool OAIPlayerGame::is_last_man_tackle_Valid() const{
    return m_last_man_tackle_isValid;
}

double OAIPlayerGame::getMinutes() const {
    return m_minutes;
}
void OAIPlayerGame::setMinutes(const double &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIPlayerGame::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIPlayerGame::is_minutes_Valid() const{
    return m_minutes_isValid;
}

QString OAIPlayerGame::getMondogoalPosition() const {
    return m_mondogoal_position;
}
void OAIPlayerGame::setMondogoalPosition(const QString &mondogoal_position) {
    m_mondogoal_position = mondogoal_position;
    m_mondogoal_position_isSet = true;
}

bool OAIPlayerGame::is_mondogoal_position_Set() const{
    return m_mondogoal_position_isSet;
}

bool OAIPlayerGame::is_mondogoal_position_Valid() const{
    return m_mondogoal_position_isValid;
}

qint32 OAIPlayerGame::getMondogoalSalary() const {
    return m_mondogoal_salary;
}
void OAIPlayerGame::setMondogoalSalary(const qint32 &mondogoal_salary) {
    m_mondogoal_salary = mondogoal_salary;
    m_mondogoal_salary_isSet = true;
}

bool OAIPlayerGame::is_mondogoal_salary_Set() const{
    return m_mondogoal_salary_isSet;
}

bool OAIPlayerGame::is_mondogoal_salary_Valid() const{
    return m_mondogoal_salary_isValid;
}

QString OAIPlayerGame::getName() const {
    return m_name;
}
void OAIPlayerGame::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerGame::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerGame::is_name_Valid() const{
    return m_name_isValid;
}

double OAIPlayerGame::getOffsides() const {
    return m_offsides;
}
void OAIPlayerGame::setOffsides(const double &offsides) {
    m_offsides = offsides;
    m_offsides_isSet = true;
}

bool OAIPlayerGame::is_offsides_Set() const{
    return m_offsides_isSet;
}

bool OAIPlayerGame::is_offsides_Valid() const{
    return m_offsides_isValid;
}

QString OAIPlayerGame::getOpponent() const {
    return m_opponent;
}
void OAIPlayerGame::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIPlayerGame::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIPlayerGame::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIPlayerGame::getOpponentId() const {
    return m_opponent_id;
}
void OAIPlayerGame::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAIPlayerGame::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAIPlayerGame::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

double OAIPlayerGame::getOpponentScore() const {
    return m_opponent_score;
}
void OAIPlayerGame::setOpponentScore(const double &opponent_score) {
    m_opponent_score = opponent_score;
    m_opponent_score_isSet = true;
}

bool OAIPlayerGame::is_opponent_score_Set() const{
    return m_opponent_score_isSet;
}

bool OAIPlayerGame::is_opponent_score_Valid() const{
    return m_opponent_score_isValid;
}

double OAIPlayerGame::getOwnGoals() const {
    return m_own_goals;
}
void OAIPlayerGame::setOwnGoals(const double &own_goals) {
    m_own_goals = own_goals;
    m_own_goals_isSet = true;
}

bool OAIPlayerGame::is_own_goals_Set() const{
    return m_own_goals_isSet;
}

bool OAIPlayerGame::is_own_goals_Valid() const{
    return m_own_goals_isValid;
}

double OAIPlayerGame::getPasses() const {
    return m_passes;
}
void OAIPlayerGame::setPasses(const double &passes) {
    m_passes = passes;
    m_passes_isSet = true;
}

bool OAIPlayerGame::is_passes_Set() const{
    return m_passes_isSet;
}

bool OAIPlayerGame::is_passes_Valid() const{
    return m_passes_isValid;
}

double OAIPlayerGame::getPassesCompleted() const {
    return m_passes_completed;
}
void OAIPlayerGame::setPassesCompleted(const double &passes_completed) {
    m_passes_completed = passes_completed;
    m_passes_completed_isSet = true;
}

bool OAIPlayerGame::is_passes_completed_Set() const{
    return m_passes_completed_isSet;
}

bool OAIPlayerGame::is_passes_completed_Valid() const{
    return m_passes_completed_isValid;
}

double OAIPlayerGame::getPenaltiesConceded() const {
    return m_penalties_conceded;
}
void OAIPlayerGame::setPenaltiesConceded(const double &penalties_conceded) {
    m_penalties_conceded = penalties_conceded;
    m_penalties_conceded_isSet = true;
}

bool OAIPlayerGame::is_penalties_conceded_Set() const{
    return m_penalties_conceded_isSet;
}

bool OAIPlayerGame::is_penalties_conceded_Valid() const{
    return m_penalties_conceded_isValid;
}

double OAIPlayerGame::getPenaltiesWon() const {
    return m_penalties_won;
}
void OAIPlayerGame::setPenaltiesWon(const double &penalties_won) {
    m_penalties_won = penalties_won;
    m_penalties_won_isSet = true;
}

bool OAIPlayerGame::is_penalties_won_Set() const{
    return m_penalties_won_isSet;
}

bool OAIPlayerGame::is_penalties_won_Valid() const{
    return m_penalties_won_isValid;
}

double OAIPlayerGame::getPenaltyKickGoals() const {
    return m_penalty_kick_goals;
}
void OAIPlayerGame::setPenaltyKickGoals(const double &penalty_kick_goals) {
    m_penalty_kick_goals = penalty_kick_goals;
    m_penalty_kick_goals_isSet = true;
}

bool OAIPlayerGame::is_penalty_kick_goals_Set() const{
    return m_penalty_kick_goals_isSet;
}

bool OAIPlayerGame::is_penalty_kick_goals_Valid() const{
    return m_penalty_kick_goals_isValid;
}

double OAIPlayerGame::getPenaltyKickMisses() const {
    return m_penalty_kick_misses;
}
void OAIPlayerGame::setPenaltyKickMisses(const double &penalty_kick_misses) {
    m_penalty_kick_misses = penalty_kick_misses;
    m_penalty_kick_misses_isSet = true;
}

bool OAIPlayerGame::is_penalty_kick_misses_Set() const{
    return m_penalty_kick_misses_isSet;
}

bool OAIPlayerGame::is_penalty_kick_misses_Valid() const{
    return m_penalty_kick_misses_isValid;
}

double OAIPlayerGame::getPenaltyKickSaves() const {
    return m_penalty_kick_saves;
}
void OAIPlayerGame::setPenaltyKickSaves(const double &penalty_kick_saves) {
    m_penalty_kick_saves = penalty_kick_saves;
    m_penalty_kick_saves_isSet = true;
}

bool OAIPlayerGame::is_penalty_kick_saves_Set() const{
    return m_penalty_kick_saves_isSet;
}

bool OAIPlayerGame::is_penalty_kick_saves_Valid() const{
    return m_penalty_kick_saves_isValid;
}

qint32 OAIPlayerGame::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerGame::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerGame::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerGame::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerGame::getPosition() const {
    return m_position;
}
void OAIPlayerGame::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerGame::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerGame::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerGame::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerGame::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerGame::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerGame::is_position_category_Valid() const{
    return m_position_category_isValid;
}

double OAIPlayerGame::getRedCards() const {
    return m_red_cards;
}
void OAIPlayerGame::setRedCards(const double &red_cards) {
    m_red_cards = red_cards;
    m_red_cards_isSet = true;
}

bool OAIPlayerGame::is_red_cards_Set() const{
    return m_red_cards_isSet;
}

bool OAIPlayerGame::is_red_cards_Valid() const{
    return m_red_cards_isValid;
}

qint32 OAIPlayerGame::getRoundId() const {
    return m_round_id;
}
void OAIPlayerGame::setRoundId(const qint32 &round_id) {
    m_round_id = round_id;
    m_round_id_isSet = true;
}

bool OAIPlayerGame::is_round_id_Set() const{
    return m_round_id_isSet;
}

bool OAIPlayerGame::is_round_id_Valid() const{
    return m_round_id_isValid;
}

double OAIPlayerGame::getScore() const {
    return m_score;
}
void OAIPlayerGame::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPlayerGame::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPlayerGame::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIPlayerGame::getSeason() const {
    return m_season;
}
void OAIPlayerGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayerGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayerGame::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIPlayerGame::getSeasonType() const {
    return m_season_type;
}
void OAIPlayerGame::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIPlayerGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIPlayerGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIPlayerGame::getShortName() const {
    return m_short_name;
}
void OAIPlayerGame::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayerGame::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayerGame::is_short_name_Valid() const{
    return m_short_name_isValid;
}

double OAIPlayerGame::getShots() const {
    return m_shots;
}
void OAIPlayerGame::setShots(const double &shots) {
    m_shots = shots;
    m_shots_isSet = true;
}

bool OAIPlayerGame::is_shots_Set() const{
    return m_shots_isSet;
}

bool OAIPlayerGame::is_shots_Valid() const{
    return m_shots_isValid;
}

double OAIPlayerGame::getShotsOnGoal() const {
    return m_shots_on_goal;
}
void OAIPlayerGame::setShotsOnGoal(const double &shots_on_goal) {
    m_shots_on_goal = shots_on_goal;
    m_shots_on_goal_isSet = true;
}

bool OAIPlayerGame::is_shots_on_goal_Set() const{
    return m_shots_on_goal_isSet;
}

bool OAIPlayerGame::is_shots_on_goal_Valid() const{
    return m_shots_on_goal_isValid;
}

qint32 OAIPlayerGame::getStarted() const {
    return m_started;
}
void OAIPlayerGame::setStarted(const qint32 &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIPlayerGame::is_started_Set() const{
    return m_started_isSet;
}

bool OAIPlayerGame::is_started_Valid() const{
    return m_started_isValid;
}

qint32 OAIPlayerGame::getStatId() const {
    return m_stat_id;
}
void OAIPlayerGame::setStatId(const qint32 &stat_id) {
    m_stat_id = stat_id;
    m_stat_id_isSet = true;
}

bool OAIPlayerGame::is_stat_id_Set() const{
    return m_stat_id_isSet;
}

bool OAIPlayerGame::is_stat_id_Valid() const{
    return m_stat_id_isValid;
}

bool OAIPlayerGame::isSuspension() const {
    return m_suspension;
}
void OAIPlayerGame::setSuspension(const bool &suspension) {
    m_suspension = suspension;
    m_suspension_isSet = true;
}

bool OAIPlayerGame::is_suspension_Set() const{
    return m_suspension_isSet;
}

bool OAIPlayerGame::is_suspension_Valid() const{
    return m_suspension_isValid;
}

QString OAIPlayerGame::getSuspensionReason() const {
    return m_suspension_reason;
}
void OAIPlayerGame::setSuspensionReason(const QString &suspension_reason) {
    m_suspension_reason = suspension_reason;
    m_suspension_reason_isSet = true;
}

bool OAIPlayerGame::is_suspension_reason_Set() const{
    return m_suspension_reason_isSet;
}

bool OAIPlayerGame::is_suspension_reason_Valid() const{
    return m_suspension_reason_isValid;
}

double OAIPlayerGame::getTackles() const {
    return m_tackles;
}
void OAIPlayerGame::setTackles(const double &tackles) {
    m_tackles = tackles;
    m_tackles_isSet = true;
}

bool OAIPlayerGame::is_tackles_Set() const{
    return m_tackles_isSet;
}

bool OAIPlayerGame::is_tackles_Valid() const{
    return m_tackles_isValid;
}

double OAIPlayerGame::getTacklesWon() const {
    return m_tackles_won;
}
void OAIPlayerGame::setTacklesWon(const double &tackles_won) {
    m_tackles_won = tackles_won;
    m_tackles_won_isSet = true;
}

bool OAIPlayerGame::is_tackles_won_Set() const{
    return m_tackles_won_isSet;
}

bool OAIPlayerGame::is_tackles_won_Valid() const{
    return m_tackles_won_isValid;
}

QString OAIPlayerGame::getTeam() const {
    return m_team;
}
void OAIPlayerGame::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerGame::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerGame::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayerGame::getTeamId() const {
    return m_team_id;
}
void OAIPlayerGame::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayerGame::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayerGame::is_team_id_Valid() const{
    return m_team_id_isValid;
}

double OAIPlayerGame::getTouches() const {
    return m_touches;
}
void OAIPlayerGame::setTouches(const double &touches) {
    m_touches = touches;
    m_touches_isSet = true;
}

bool OAIPlayerGame::is_touches_Set() const{
    return m_touches_isSet;
}

bool OAIPlayerGame::is_touches_Valid() const{
    return m_touches_isValid;
}

QString OAIPlayerGame::getUpdated() const {
    return m_updated;
}
void OAIPlayerGame::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayerGame::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayerGame::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIPlayerGame::getUpdatedUtc() const {
    return m_updated_utc;
}
void OAIPlayerGame::setUpdatedUtc(const QString &updated_utc) {
    m_updated_utc = updated_utc;
    m_updated_utc_isSet = true;
}

bool OAIPlayerGame::is_updated_utc_Set() const{
    return m_updated_utc_isSet;
}

bool OAIPlayerGame::is_updated_utc_Valid() const{
    return m_updated_utc_isValid;
}

QString OAIPlayerGame::getYahooPosition() const {
    return m_yahoo_position;
}
void OAIPlayerGame::setYahooPosition(const QString &yahoo_position) {
    m_yahoo_position = yahoo_position;
    m_yahoo_position_isSet = true;
}

bool OAIPlayerGame::is_yahoo_position_Set() const{
    return m_yahoo_position_isSet;
}

bool OAIPlayerGame::is_yahoo_position_Valid() const{
    return m_yahoo_position_isValid;
}

qint32 OAIPlayerGame::getYahooSalary() const {
    return m_yahoo_salary;
}
void OAIPlayerGame::setYahooSalary(const qint32 &yahoo_salary) {
    m_yahoo_salary = yahoo_salary;
    m_yahoo_salary_isSet = true;
}

bool OAIPlayerGame::is_yahoo_salary_Set() const{
    return m_yahoo_salary_isSet;
}

bool OAIPlayerGame::is_yahoo_salary_Valid() const{
    return m_yahoo_salary_isValid;
}

double OAIPlayerGame::getYellowCards() const {
    return m_yellow_cards;
}
void OAIPlayerGame::setYellowCards(const double &yellow_cards) {
    m_yellow_cards = yellow_cards;
    m_yellow_cards_isSet = true;
}

bool OAIPlayerGame::is_yellow_cards_Set() const{
    return m_yellow_cards_isSet;
}

bool OAIPlayerGame::is_yellow_cards_Valid() const{
    return m_yellow_cards_isValid;
}

double OAIPlayerGame::getYellowRedCards() const {
    return m_yellow_red_cards;
}
void OAIPlayerGame::setYellowRedCards(const double &yellow_red_cards) {
    m_yellow_red_cards = yellow_red_cards;
    m_yellow_red_cards_isSet = true;
}

bool OAIPlayerGame::is_yellow_red_cards_Set() const{
    return m_yellow_red_cards_isSet;
}

bool OAIPlayerGame::is_yellow_red_cards_Valid() const{
    return m_yellow_red_cards_isValid;
}

bool OAIPlayerGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_captain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corners_won_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crosses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defender_clean_sheets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_mondogoal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fouled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fouls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goalkeeper_clean_sheets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goalkeeper_goals_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goalkeeper_saves_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goalkeeper_single_goal_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goalkeeper_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_game_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jersey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_man_tackle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mondogoal_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mondogoal_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsides_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_own_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalties_conceded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalties_won_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_kick_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_kick_misses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_kick_saves_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shots_on_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_won_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yellow_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yellow_red_cards_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
