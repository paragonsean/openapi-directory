/**
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore::OAIBoxScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore::OAIBoxScore() {
    this->initializeModel();
}

OAIBoxScore::~OAIBoxScore() {}

void OAIBoxScore::initializeModel() {

    m_additional_assistant_referee1_isSet = false;
    m_additional_assistant_referee1_isValid = false;

    m_additional_assistant_referee2_isSet = false;
    m_additional_assistant_referee2_isValid = false;

    m_assistant_referee1_isSet = false;
    m_assistant_referee1_isValid = false;

    m_assistant_referee2_isSet = false;
    m_assistant_referee2_isValid = false;

    m_away_team_coach_isSet = false;
    m_away_team_coach_isValid = false;

    m_bookings_isSet = false;
    m_bookings_isValid = false;

    m_fourth_referee_isSet = false;
    m_fourth_referee_isValid = false;

    m_game_isSet = false;
    m_game_isValid = false;

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_home_team_coach_isSet = false;
    m_home_team_coach_isValid = false;

    m_lineups_isSet = false;
    m_lineups_isValid = false;

    m_main_referee_isSet = false;
    m_main_referee_isValid = false;

    m_penalty_shootouts_isSet = false;
    m_penalty_shootouts_isValid = false;

    m_player_games_isSet = false;
    m_player_games_isValid = false;

    m_team_games_isSet = false;
    m_team_games_isValid = false;

    m_video_assistant_referee_isSet = false;
    m_video_assistant_referee_isValid = false;
}

void OAIBoxScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore::fromJsonObject(QJsonObject json) {

    m_additional_assistant_referee1_isValid = ::OpenAPI::fromJsonValue(m_additional_assistant_referee1, json[QString("AdditionalAssistantReferee1")]);
    m_additional_assistant_referee1_isSet = !json[QString("AdditionalAssistantReferee1")].isNull() && m_additional_assistant_referee1_isValid;

    m_additional_assistant_referee2_isValid = ::OpenAPI::fromJsonValue(m_additional_assistant_referee2, json[QString("AdditionalAssistantReferee2")]);
    m_additional_assistant_referee2_isSet = !json[QString("AdditionalAssistantReferee2")].isNull() && m_additional_assistant_referee2_isValid;

    m_assistant_referee1_isValid = ::OpenAPI::fromJsonValue(m_assistant_referee1, json[QString("AssistantReferee1")]);
    m_assistant_referee1_isSet = !json[QString("AssistantReferee1")].isNull() && m_assistant_referee1_isValid;

    m_assistant_referee2_isValid = ::OpenAPI::fromJsonValue(m_assistant_referee2, json[QString("AssistantReferee2")]);
    m_assistant_referee2_isSet = !json[QString("AssistantReferee2")].isNull() && m_assistant_referee2_isValid;

    m_away_team_coach_isValid = ::OpenAPI::fromJsonValue(m_away_team_coach, json[QString("AwayTeamCoach")]);
    m_away_team_coach_isSet = !json[QString("AwayTeamCoach")].isNull() && m_away_team_coach_isValid;

    m_bookings_isValid = ::OpenAPI::fromJsonValue(m_bookings, json[QString("Bookings")]);
    m_bookings_isSet = !json[QString("Bookings")].isNull() && m_bookings_isValid;

    m_fourth_referee_isValid = ::OpenAPI::fromJsonValue(m_fourth_referee, json[QString("FourthReferee")]);
    m_fourth_referee_isSet = !json[QString("FourthReferee")].isNull() && m_fourth_referee_isValid;

    m_game_isValid = ::OpenAPI::fromJsonValue(m_game, json[QString("Game")]);
    m_game_isSet = !json[QString("Game")].isNull() && m_game_isValid;

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("Goals")]);
    m_goals_isSet = !json[QString("Goals")].isNull() && m_goals_isValid;

    m_home_team_coach_isValid = ::OpenAPI::fromJsonValue(m_home_team_coach, json[QString("HomeTeamCoach")]);
    m_home_team_coach_isSet = !json[QString("HomeTeamCoach")].isNull() && m_home_team_coach_isValid;

    m_lineups_isValid = ::OpenAPI::fromJsonValue(m_lineups, json[QString("Lineups")]);
    m_lineups_isSet = !json[QString("Lineups")].isNull() && m_lineups_isValid;

    m_main_referee_isValid = ::OpenAPI::fromJsonValue(m_main_referee, json[QString("MainReferee")]);
    m_main_referee_isSet = !json[QString("MainReferee")].isNull() && m_main_referee_isValid;

    m_penalty_shootouts_isValid = ::OpenAPI::fromJsonValue(m_penalty_shootouts, json[QString("PenaltyShootouts")]);
    m_penalty_shootouts_isSet = !json[QString("PenaltyShootouts")].isNull() && m_penalty_shootouts_isValid;

    m_player_games_isValid = ::OpenAPI::fromJsonValue(m_player_games, json[QString("PlayerGames")]);
    m_player_games_isSet = !json[QString("PlayerGames")].isNull() && m_player_games_isValid;

    m_team_games_isValid = ::OpenAPI::fromJsonValue(m_team_games, json[QString("TeamGames")]);
    m_team_games_isSet = !json[QString("TeamGames")].isNull() && m_team_games_isValid;

    m_video_assistant_referee_isValid = ::OpenAPI::fromJsonValue(m_video_assistant_referee, json[QString("VideoAssistantReferee")]);
    m_video_assistant_referee_isSet = !json[QString("VideoAssistantReferee")].isNull() && m_video_assistant_referee_isValid;
}

QString OAIBoxScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_assistant_referee1.isSet()) {
        obj.insert(QString("AdditionalAssistantReferee1"), ::OpenAPI::toJsonValue(m_additional_assistant_referee1));
    }
    if (m_additional_assistant_referee2.isSet()) {
        obj.insert(QString("AdditionalAssistantReferee2"), ::OpenAPI::toJsonValue(m_additional_assistant_referee2));
    }
    if (m_assistant_referee1.isSet()) {
        obj.insert(QString("AssistantReferee1"), ::OpenAPI::toJsonValue(m_assistant_referee1));
    }
    if (m_assistant_referee2.isSet()) {
        obj.insert(QString("AssistantReferee2"), ::OpenAPI::toJsonValue(m_assistant_referee2));
    }
    if (m_away_team_coach.isSet()) {
        obj.insert(QString("AwayTeamCoach"), ::OpenAPI::toJsonValue(m_away_team_coach));
    }
    if (m_bookings.size() > 0) {
        obj.insert(QString("Bookings"), ::OpenAPI::toJsonValue(m_bookings));
    }
    if (m_fourth_referee.isSet()) {
        obj.insert(QString("FourthReferee"), ::OpenAPI::toJsonValue(m_fourth_referee));
    }
    if (m_game.isSet()) {
        obj.insert(QString("Game"), ::OpenAPI::toJsonValue(m_game));
    }
    if (m_goals.size() > 0) {
        obj.insert(QString("Goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_home_team_coach.isSet()) {
        obj.insert(QString("HomeTeamCoach"), ::OpenAPI::toJsonValue(m_home_team_coach));
    }
    if (m_lineups.size() > 0) {
        obj.insert(QString("Lineups"), ::OpenAPI::toJsonValue(m_lineups));
    }
    if (m_main_referee.isSet()) {
        obj.insert(QString("MainReferee"), ::OpenAPI::toJsonValue(m_main_referee));
    }
    if (m_penalty_shootouts.size() > 0) {
        obj.insert(QString("PenaltyShootouts"), ::OpenAPI::toJsonValue(m_penalty_shootouts));
    }
    if (m_player_games.size() > 0) {
        obj.insert(QString("PlayerGames"), ::OpenAPI::toJsonValue(m_player_games));
    }
    if (m_team_games.size() > 0) {
        obj.insert(QString("TeamGames"), ::OpenAPI::toJsonValue(m_team_games));
    }
    if (m_video_assistant_referee.isSet()) {
        obj.insert(QString("VideoAssistantReferee"), ::OpenAPI::toJsonValue(m_video_assistant_referee));
    }
    return obj;
}

OAIReferee OAIBoxScore::getAdditionalAssistantReferee1() const {
    return m_additional_assistant_referee1;
}
void OAIBoxScore::setAdditionalAssistantReferee1(const OAIReferee &additional_assistant_referee1) {
    m_additional_assistant_referee1 = additional_assistant_referee1;
    m_additional_assistant_referee1_isSet = true;
}

bool OAIBoxScore::is_additional_assistant_referee1_Set() const{
    return m_additional_assistant_referee1_isSet;
}

bool OAIBoxScore::is_additional_assistant_referee1_Valid() const{
    return m_additional_assistant_referee1_isValid;
}

OAIReferee OAIBoxScore::getAdditionalAssistantReferee2() const {
    return m_additional_assistant_referee2;
}
void OAIBoxScore::setAdditionalAssistantReferee2(const OAIReferee &additional_assistant_referee2) {
    m_additional_assistant_referee2 = additional_assistant_referee2;
    m_additional_assistant_referee2_isSet = true;
}

bool OAIBoxScore::is_additional_assistant_referee2_Set() const{
    return m_additional_assistant_referee2_isSet;
}

bool OAIBoxScore::is_additional_assistant_referee2_Valid() const{
    return m_additional_assistant_referee2_isValid;
}

OAIReferee OAIBoxScore::getAssistantReferee1() const {
    return m_assistant_referee1;
}
void OAIBoxScore::setAssistantReferee1(const OAIReferee &assistant_referee1) {
    m_assistant_referee1 = assistant_referee1;
    m_assistant_referee1_isSet = true;
}

bool OAIBoxScore::is_assistant_referee1_Set() const{
    return m_assistant_referee1_isSet;
}

bool OAIBoxScore::is_assistant_referee1_Valid() const{
    return m_assistant_referee1_isValid;
}

OAIReferee OAIBoxScore::getAssistantReferee2() const {
    return m_assistant_referee2;
}
void OAIBoxScore::setAssistantReferee2(const OAIReferee &assistant_referee2) {
    m_assistant_referee2 = assistant_referee2;
    m_assistant_referee2_isSet = true;
}

bool OAIBoxScore::is_assistant_referee2_Set() const{
    return m_assistant_referee2_isSet;
}

bool OAIBoxScore::is_assistant_referee2_Valid() const{
    return m_assistant_referee2_isValid;
}

OAICoach OAIBoxScore::getAwayTeamCoach() const {
    return m_away_team_coach;
}
void OAIBoxScore::setAwayTeamCoach(const OAICoach &away_team_coach) {
    m_away_team_coach = away_team_coach;
    m_away_team_coach_isSet = true;
}

bool OAIBoxScore::is_away_team_coach_Set() const{
    return m_away_team_coach_isSet;
}

bool OAIBoxScore::is_away_team_coach_Valid() const{
    return m_away_team_coach_isValid;
}

QList<OAIBooking> OAIBoxScore::getBookings() const {
    return m_bookings;
}
void OAIBoxScore::setBookings(const QList<OAIBooking> &bookings) {
    m_bookings = bookings;
    m_bookings_isSet = true;
}

bool OAIBoxScore::is_bookings_Set() const{
    return m_bookings_isSet;
}

bool OAIBoxScore::is_bookings_Valid() const{
    return m_bookings_isValid;
}

OAIReferee OAIBoxScore::getFourthReferee() const {
    return m_fourth_referee;
}
void OAIBoxScore::setFourthReferee(const OAIReferee &fourth_referee) {
    m_fourth_referee = fourth_referee;
    m_fourth_referee_isSet = true;
}

bool OAIBoxScore::is_fourth_referee_Set() const{
    return m_fourth_referee_isSet;
}

bool OAIBoxScore::is_fourth_referee_Valid() const{
    return m_fourth_referee_isValid;
}

OAIGame OAIBoxScore::getGame() const {
    return m_game;
}
void OAIBoxScore::setGame(const OAIGame &game) {
    m_game = game;
    m_game_isSet = true;
}

bool OAIBoxScore::is_game_Set() const{
    return m_game_isSet;
}

bool OAIBoxScore::is_game_Valid() const{
    return m_game_isValid;
}

QList<OAIGoal> OAIBoxScore::getGoals() const {
    return m_goals;
}
void OAIBoxScore::setGoals(const QList<OAIGoal> &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIBoxScore::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIBoxScore::is_goals_Valid() const{
    return m_goals_isValid;
}

OAICoach OAIBoxScore::getHomeTeamCoach() const {
    return m_home_team_coach;
}
void OAIBoxScore::setHomeTeamCoach(const OAICoach &home_team_coach) {
    m_home_team_coach = home_team_coach;
    m_home_team_coach_isSet = true;
}

bool OAIBoxScore::is_home_team_coach_Set() const{
    return m_home_team_coach_isSet;
}

bool OAIBoxScore::is_home_team_coach_Valid() const{
    return m_home_team_coach_isValid;
}

QList<OAILineup> OAIBoxScore::getLineups() const {
    return m_lineups;
}
void OAIBoxScore::setLineups(const QList<OAILineup> &lineups) {
    m_lineups = lineups;
    m_lineups_isSet = true;
}

bool OAIBoxScore::is_lineups_Set() const{
    return m_lineups_isSet;
}

bool OAIBoxScore::is_lineups_Valid() const{
    return m_lineups_isValid;
}

OAIReferee OAIBoxScore::getMainReferee() const {
    return m_main_referee;
}
void OAIBoxScore::setMainReferee(const OAIReferee &main_referee) {
    m_main_referee = main_referee;
    m_main_referee_isSet = true;
}

bool OAIBoxScore::is_main_referee_Set() const{
    return m_main_referee_isSet;
}

bool OAIBoxScore::is_main_referee_Valid() const{
    return m_main_referee_isValid;
}

QList<OAIPenaltyShootout> OAIBoxScore::getPenaltyShootouts() const {
    return m_penalty_shootouts;
}
void OAIBoxScore::setPenaltyShootouts(const QList<OAIPenaltyShootout> &penalty_shootouts) {
    m_penalty_shootouts = penalty_shootouts;
    m_penalty_shootouts_isSet = true;
}

bool OAIBoxScore::is_penalty_shootouts_Set() const{
    return m_penalty_shootouts_isSet;
}

bool OAIBoxScore::is_penalty_shootouts_Valid() const{
    return m_penalty_shootouts_isValid;
}

QList<OAIPlayerGame> OAIBoxScore::getPlayerGames() const {
    return m_player_games;
}
void OAIBoxScore::setPlayerGames(const QList<OAIPlayerGame> &player_games) {
    m_player_games = player_games;
    m_player_games_isSet = true;
}

bool OAIBoxScore::is_player_games_Set() const{
    return m_player_games_isSet;
}

bool OAIBoxScore::is_player_games_Valid() const{
    return m_player_games_isValid;
}

QList<OAITeamGame> OAIBoxScore::getTeamGames() const {
    return m_team_games;
}
void OAIBoxScore::setTeamGames(const QList<OAITeamGame> &team_games) {
    m_team_games = team_games;
    m_team_games_isSet = true;
}

bool OAIBoxScore::is_team_games_Set() const{
    return m_team_games_isSet;
}

bool OAIBoxScore::is_team_games_Valid() const{
    return m_team_games_isValid;
}

OAIReferee OAIBoxScore::getVideoAssistantReferee() const {
    return m_video_assistant_referee;
}
void OAIBoxScore::setVideoAssistantReferee(const OAIReferee &video_assistant_referee) {
    m_video_assistant_referee = video_assistant_referee;
    m_video_assistant_referee_isSet = true;
}

bool OAIBoxScore::is_video_assistant_referee_Set() const{
    return m_video_assistant_referee_isSet;
}

bool OAIBoxScore::is_video_assistant_referee_Valid() const{
    return m_video_assistant_referee_isValid;
}

bool OAIBoxScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_assistant_referee1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_assistant_referee2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_referee1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_referee2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_coach.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_referee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_coach.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_referee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_shootouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_assistant_referee.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
