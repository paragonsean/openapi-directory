/**
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineup::OAILineup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineup::OAILineup() {
    this->initializeModel();
}

OAILineup::~OAILineup() {}

void OAILineup::initializeModel() {

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_game_minute_isSet = false;
    m_game_minute_isValid = false;

    m_game_minute_extra_isSet = false;
    m_game_minute_extra_isValid = false;

    m_lineup_id_isSet = false;
    m_lineup_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pitch_position_horizontal_isSet = false;
    m_pitch_position_horizontal_isValid = false;

    m_pitch_position_vertical_isSet = false;
    m_pitch_position_vertical_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_replaced_player_id_isSet = false;
    m_replaced_player_id_isValid = false;

    m_replaced_player_name_isSet = false;
    m_replaced_player_name_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILineup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineup::fromJsonObject(QJsonObject json) {

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameId")]);
    m_game_id_isSet = !json[QString("GameId")].isNull() && m_game_id_isValid;

    m_game_minute_isValid = ::OpenAPI::fromJsonValue(m_game_minute, json[QString("GameMinute")]);
    m_game_minute_isSet = !json[QString("GameMinute")].isNull() && m_game_minute_isValid;

    m_game_minute_extra_isValid = ::OpenAPI::fromJsonValue(m_game_minute_extra, json[QString("GameMinuteExtra")]);
    m_game_minute_extra_isSet = !json[QString("GameMinuteExtra")].isNull() && m_game_minute_extra_isValid;

    m_lineup_id_isValid = ::OpenAPI::fromJsonValue(m_lineup_id, json[QString("LineupId")]);
    m_lineup_id_isSet = !json[QString("LineupId")].isNull() && m_lineup_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_pitch_position_horizontal_isValid = ::OpenAPI::fromJsonValue(m_pitch_position_horizontal, json[QString("PitchPositionHorizontal")]);
    m_pitch_position_horizontal_isSet = !json[QString("PitchPositionHorizontal")].isNull() && m_pitch_position_horizontal_isValid;

    m_pitch_position_vertical_isValid = ::OpenAPI::fromJsonValue(m_pitch_position_vertical, json[QString("PitchPositionVertical")]);
    m_pitch_position_vertical_isSet = !json[QString("PitchPositionVertical")].isNull() && m_pitch_position_vertical_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerId")]);
    m_player_id_isSet = !json[QString("PlayerId")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_replaced_player_id_isValid = ::OpenAPI::fromJsonValue(m_replaced_player_id, json[QString("ReplacedPlayerId")]);
    m_replaced_player_id_isSet = !json[QString("ReplacedPlayerId")].isNull() && m_replaced_player_id_isValid;

    m_replaced_player_name_isValid = ::OpenAPI::fromJsonValue(m_replaced_player_name, json[QString("ReplacedPlayerName")]);
    m_replaced_player_name_isSet = !json[QString("ReplacedPlayerName")].isNull() && m_replaced_player_name_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAILineup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineup::asJsonObject() const {
    QJsonObject obj;
    if (m_game_id_isSet) {
        obj.insert(QString("GameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_game_minute_isSet) {
        obj.insert(QString("GameMinute"), ::OpenAPI::toJsonValue(m_game_minute));
    }
    if (m_game_minute_extra_isSet) {
        obj.insert(QString("GameMinuteExtra"), ::OpenAPI::toJsonValue(m_game_minute_extra));
    }
    if (m_lineup_id_isSet) {
        obj.insert(QString("LineupId"), ::OpenAPI::toJsonValue(m_lineup_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pitch_position_horizontal_isSet) {
        obj.insert(QString("PitchPositionHorizontal"), ::OpenAPI::toJsonValue(m_pitch_position_horizontal));
    }
    if (m_pitch_position_vertical_isSet) {
        obj.insert(QString("PitchPositionVertical"), ::OpenAPI::toJsonValue(m_pitch_position_vertical));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_replaced_player_id_isSet) {
        obj.insert(QString("ReplacedPlayerId"), ::OpenAPI::toJsonValue(m_replaced_player_id));
    }
    if (m_replaced_player_name_isSet) {
        obj.insert(QString("ReplacedPlayerName"), ::OpenAPI::toJsonValue(m_replaced_player_name));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAILineup::getGameId() const {
    return m_game_id;
}
void OAILineup::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAILineup::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAILineup::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAILineup::getGameMinute() const {
    return m_game_minute;
}
void OAILineup::setGameMinute(const qint32 &game_minute) {
    m_game_minute = game_minute;
    m_game_minute_isSet = true;
}

bool OAILineup::is_game_minute_Set() const{
    return m_game_minute_isSet;
}

bool OAILineup::is_game_minute_Valid() const{
    return m_game_minute_isValid;
}

qint32 OAILineup::getGameMinuteExtra() const {
    return m_game_minute_extra;
}
void OAILineup::setGameMinuteExtra(const qint32 &game_minute_extra) {
    m_game_minute_extra = game_minute_extra;
    m_game_minute_extra_isSet = true;
}

bool OAILineup::is_game_minute_extra_Set() const{
    return m_game_minute_extra_isSet;
}

bool OAILineup::is_game_minute_extra_Valid() const{
    return m_game_minute_extra_isValid;
}

qint32 OAILineup::getLineupId() const {
    return m_lineup_id;
}
void OAILineup::setLineupId(const qint32 &lineup_id) {
    m_lineup_id = lineup_id;
    m_lineup_id_isSet = true;
}

bool OAILineup::is_lineup_id_Set() const{
    return m_lineup_id_isSet;
}

bool OAILineup::is_lineup_id_Valid() const{
    return m_lineup_id_isValid;
}

QString OAILineup::getName() const {
    return m_name;
}
void OAILineup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILineup::is_name_Set() const{
    return m_name_isSet;
}

bool OAILineup::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAILineup::getPitchPositionHorizontal() const {
    return m_pitch_position_horizontal;
}
void OAILineup::setPitchPositionHorizontal(const qint32 &pitch_position_horizontal) {
    m_pitch_position_horizontal = pitch_position_horizontal;
    m_pitch_position_horizontal_isSet = true;
}

bool OAILineup::is_pitch_position_horizontal_Set() const{
    return m_pitch_position_horizontal_isSet;
}

bool OAILineup::is_pitch_position_horizontal_Valid() const{
    return m_pitch_position_horizontal_isValid;
}

qint32 OAILineup::getPitchPositionVertical() const {
    return m_pitch_position_vertical;
}
void OAILineup::setPitchPositionVertical(const qint32 &pitch_position_vertical) {
    m_pitch_position_vertical = pitch_position_vertical;
    m_pitch_position_vertical_isSet = true;
}

bool OAILineup::is_pitch_position_vertical_Set() const{
    return m_pitch_position_vertical_isSet;
}

bool OAILineup::is_pitch_position_vertical_Valid() const{
    return m_pitch_position_vertical_isValid;
}

qint32 OAILineup::getPlayerId() const {
    return m_player_id;
}
void OAILineup::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAILineup::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAILineup::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAILineup::getPosition() const {
    return m_position;
}
void OAILineup::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAILineup::is_position_Set() const{
    return m_position_isSet;
}

bool OAILineup::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAILineup::getReplacedPlayerId() const {
    return m_replaced_player_id;
}
void OAILineup::setReplacedPlayerId(const qint32 &replaced_player_id) {
    m_replaced_player_id = replaced_player_id;
    m_replaced_player_id_isSet = true;
}

bool OAILineup::is_replaced_player_id_Set() const{
    return m_replaced_player_id_isSet;
}

bool OAILineup::is_replaced_player_id_Valid() const{
    return m_replaced_player_id_isValid;
}

QString OAILineup::getReplacedPlayerName() const {
    return m_replaced_player_name;
}
void OAILineup::setReplacedPlayerName(const QString &replaced_player_name) {
    m_replaced_player_name = replaced_player_name;
    m_replaced_player_name_isSet = true;
}

bool OAILineup::is_replaced_player_name_Set() const{
    return m_replaced_player_name_isSet;
}

bool OAILineup::is_replaced_player_name_Valid() const{
    return m_replaced_player_name_isValid;
}

qint32 OAILineup::getTeamId() const {
    return m_team_id;
}
void OAILineup::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAILineup::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAILineup::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAILineup::getType() const {
    return m_type;
}
void OAILineup::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILineup::is_type_Set() const{
    return m_type_isSet;
}

bool OAILineup::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILineup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_minute_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitch_position_horizontal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitch_position_vertical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replaced_player_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
