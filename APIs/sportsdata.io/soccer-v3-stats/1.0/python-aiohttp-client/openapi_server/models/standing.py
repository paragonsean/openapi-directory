# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Standing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, draws: int=None, games: int=None, global_team_id: int=None, goals_against: int=None, goals_differential: int=None, goals_scored: int=None, group: str=None, losses: int=None, name: str=None, order: int=None, points: int=None, round_id: int=None, scope: str=None, short_name: str=None, standing_id: int=None, team_id: int=None, wins: int=None):
        """Standing - a model defined in OpenAPI

        :param draws: The draws of this Standing.
        :param games: The games of this Standing.
        :param global_team_id: The global_team_id of this Standing.
        :param goals_against: The goals_against of this Standing.
        :param goals_differential: The goals_differential of this Standing.
        :param goals_scored: The goals_scored of this Standing.
        :param group: The group of this Standing.
        :param losses: The losses of this Standing.
        :param name: The name of this Standing.
        :param order: The order of this Standing.
        :param points: The points of this Standing.
        :param round_id: The round_id of this Standing.
        :param scope: The scope of this Standing.
        :param short_name: The short_name of this Standing.
        :param standing_id: The standing_id of this Standing.
        :param team_id: The team_id of this Standing.
        :param wins: The wins of this Standing.
        """
        self.openapi_types = {
            'draws': int,
            'games': int,
            'global_team_id': int,
            'goals_against': int,
            'goals_differential': int,
            'goals_scored': int,
            'group': str,
            'losses': int,
            'name': str,
            'order': int,
            'points': int,
            'round_id': int,
            'scope': str,
            'short_name': str,
            'standing_id': int,
            'team_id': int,
            'wins': int
        }

        self.attribute_map = {
            'draws': 'Draws',
            'games': 'Games',
            'global_team_id': 'GlobalTeamID',
            'goals_against': 'GoalsAgainst',
            'goals_differential': 'GoalsDifferential',
            'goals_scored': 'GoalsScored',
            'group': 'Group',
            'losses': 'Losses',
            'name': 'Name',
            'order': 'Order',
            'points': 'Points',
            'round_id': 'RoundId',
            'scope': 'Scope',
            'short_name': 'ShortName',
            'standing_id': 'StandingId',
            'team_id': 'TeamId',
            'wins': 'Wins'
        }

        self._draws = draws
        self._games = games
        self._global_team_id = global_team_id
        self._goals_against = goals_against
        self._goals_differential = goals_differential
        self._goals_scored = goals_scored
        self._group = group
        self._losses = losses
        self._name = name
        self._order = order
        self._points = points
        self._round_id = round_id
        self._scope = scope
        self._short_name = short_name
        self._standing_id = standing_id
        self._team_id = team_id
        self._wins = wins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Standing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Standing of this Standing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def draws(self):
        """Gets the draws of this Standing.


        :return: The draws of this Standing.
        :rtype: int
        """
        return self._draws

    @draws.setter
    def draws(self, draws):
        """Sets the draws of this Standing.


        :param draws: The draws of this Standing.
        :type draws: int
        """

        self._draws = draws

    @property
    def games(self):
        """Gets the games of this Standing.


        :return: The games of this Standing.
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this Standing.


        :param games: The games of this Standing.
        :type games: int
        """

        self._games = games

    @property
    def global_team_id(self):
        """Gets the global_team_id of this Standing.


        :return: The global_team_id of this Standing.
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this Standing.


        :param global_team_id: The global_team_id of this Standing.
        :type global_team_id: int
        """

        self._global_team_id = global_team_id

    @property
    def goals_against(self):
        """Gets the goals_against of this Standing.


        :return: The goals_against of this Standing.
        :rtype: int
        """
        return self._goals_against

    @goals_against.setter
    def goals_against(self, goals_against):
        """Sets the goals_against of this Standing.


        :param goals_against: The goals_against of this Standing.
        :type goals_against: int
        """

        self._goals_against = goals_against

    @property
    def goals_differential(self):
        """Gets the goals_differential of this Standing.


        :return: The goals_differential of this Standing.
        :rtype: int
        """
        return self._goals_differential

    @goals_differential.setter
    def goals_differential(self, goals_differential):
        """Sets the goals_differential of this Standing.


        :param goals_differential: The goals_differential of this Standing.
        :type goals_differential: int
        """

        self._goals_differential = goals_differential

    @property
    def goals_scored(self):
        """Gets the goals_scored of this Standing.


        :return: The goals_scored of this Standing.
        :rtype: int
        """
        return self._goals_scored

    @goals_scored.setter
    def goals_scored(self, goals_scored):
        """Sets the goals_scored of this Standing.


        :param goals_scored: The goals_scored of this Standing.
        :type goals_scored: int
        """

        self._goals_scored = goals_scored

    @property
    def group(self):
        """Gets the group of this Standing.


        :return: The group of this Standing.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Standing.


        :param group: The group of this Standing.
        :type group: str
        """

        self._group = group

    @property
    def losses(self):
        """Gets the losses of this Standing.


        :return: The losses of this Standing.
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this Standing.


        :param losses: The losses of this Standing.
        :type losses: int
        """

        self._losses = losses

    @property
    def name(self):
        """Gets the name of this Standing.


        :return: The name of this Standing.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Standing.


        :param name: The name of this Standing.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this Standing.


        :return: The order of this Standing.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Standing.


        :param order: The order of this Standing.
        :type order: int
        """

        self._order = order

    @property
    def points(self):
        """Gets the points of this Standing.


        :return: The points of this Standing.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Standing.


        :param points: The points of this Standing.
        :type points: int
        """

        self._points = points

    @property
    def round_id(self):
        """Gets the round_id of this Standing.


        :return: The round_id of this Standing.
        :rtype: int
        """
        return self._round_id

    @round_id.setter
    def round_id(self, round_id):
        """Sets the round_id of this Standing.


        :param round_id: The round_id of this Standing.
        :type round_id: int
        """

        self._round_id = round_id

    @property
    def scope(self):
        """Gets the scope of this Standing.


        :return: The scope of this Standing.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Standing.


        :param scope: The scope of this Standing.
        :type scope: str
        """

        self._scope = scope

    @property
    def short_name(self):
        """Gets the short_name of this Standing.


        :return: The short_name of this Standing.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Standing.


        :param short_name: The short_name of this Standing.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def standing_id(self):
        """Gets the standing_id of this Standing.


        :return: The standing_id of this Standing.
        :rtype: int
        """
        return self._standing_id

    @standing_id.setter
    def standing_id(self, standing_id):
        """Sets the standing_id of this Standing.


        :param standing_id: The standing_id of this Standing.
        :type standing_id: int
        """

        self._standing_id = standing_id

    @property
    def team_id(self):
        """Gets the team_id of this Standing.


        :return: The team_id of this Standing.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Standing.


        :param team_id: The team_id of this Standing.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def wins(self):
        """Gets the wins of this Standing.


        :return: The wins of this Standing.
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this Standing.


        :param wins: The wins of this Standing.
        :type wins: int
        """

        self._wins = wins
