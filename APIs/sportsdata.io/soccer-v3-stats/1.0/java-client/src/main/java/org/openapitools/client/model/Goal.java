/*
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Goal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:19.276097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Goal {
  public static final String SERIALIZED_NAME_ASSISTED_BY_PLAYER_ID1 = "AssistedByPlayerId1";
  @SerializedName(SERIALIZED_NAME_ASSISTED_BY_PLAYER_ID1)
  private Integer assistedByPlayerId1;

  public static final String SERIALIZED_NAME_ASSISTED_BY_PLAYER_ID2 = "AssistedByPlayerId2";
  @SerializedName(SERIALIZED_NAME_ASSISTED_BY_PLAYER_ID2)
  private Integer assistedByPlayerId2;

  public static final String SERIALIZED_NAME_ASSISTED_BY_PLAYER_NAME1 = "AssistedByPlayerName1";
  @SerializedName(SERIALIZED_NAME_ASSISTED_BY_PLAYER_NAME1)
  private String assistedByPlayerName1;

  public static final String SERIALIZED_NAME_ASSISTED_BY_PLAYER_NAME2 = "AssistedByPlayerName2";
  @SerializedName(SERIALIZED_NAME_ASSISTED_BY_PLAYER_NAME2)
  private String assistedByPlayerName2;

  public static final String SERIALIZED_NAME_GAME_ID = "GameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_GAME_MINUTE = "GameMinute";
  @SerializedName(SERIALIZED_NAME_GAME_MINUTE)
  private Integer gameMinute;

  public static final String SERIALIZED_NAME_GAME_MINUTE_EXTRA = "GameMinuteExtra";
  @SerializedName(SERIALIZED_NAME_GAME_MINUTE_EXTRA)
  private Integer gameMinuteExtra;

  public static final String SERIALIZED_NAME_GOAL_ID = "GoalId";
  @SerializedName(SERIALIZED_NAME_GOAL_ID)
  private Integer goalId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Goal() {
  }

  public Goal assistedByPlayerId1(Integer assistedByPlayerId1) {
    this.assistedByPlayerId1 = assistedByPlayerId1;
    return this;
  }

  /**
   * Get assistedByPlayerId1
   * @return assistedByPlayerId1
   */
  @javax.annotation.Nullable
  public Integer getAssistedByPlayerId1() {
    return assistedByPlayerId1;
  }

  public void setAssistedByPlayerId1(Integer assistedByPlayerId1) {
    this.assistedByPlayerId1 = assistedByPlayerId1;
  }


  public Goal assistedByPlayerId2(Integer assistedByPlayerId2) {
    this.assistedByPlayerId2 = assistedByPlayerId2;
    return this;
  }

  /**
   * Get assistedByPlayerId2
   * @return assistedByPlayerId2
   */
  @javax.annotation.Nullable
  public Integer getAssistedByPlayerId2() {
    return assistedByPlayerId2;
  }

  public void setAssistedByPlayerId2(Integer assistedByPlayerId2) {
    this.assistedByPlayerId2 = assistedByPlayerId2;
  }


  public Goal assistedByPlayerName1(String assistedByPlayerName1) {
    this.assistedByPlayerName1 = assistedByPlayerName1;
    return this;
  }

  /**
   * Get assistedByPlayerName1
   * @return assistedByPlayerName1
   */
  @javax.annotation.Nullable
  public String getAssistedByPlayerName1() {
    return assistedByPlayerName1;
  }

  public void setAssistedByPlayerName1(String assistedByPlayerName1) {
    this.assistedByPlayerName1 = assistedByPlayerName1;
  }


  public Goal assistedByPlayerName2(String assistedByPlayerName2) {
    this.assistedByPlayerName2 = assistedByPlayerName2;
    return this;
  }

  /**
   * Get assistedByPlayerName2
   * @return assistedByPlayerName2
   */
  @javax.annotation.Nullable
  public String getAssistedByPlayerName2() {
    return assistedByPlayerName2;
  }

  public void setAssistedByPlayerName2(String assistedByPlayerName2) {
    this.assistedByPlayerName2 = assistedByPlayerName2;
  }


  public Goal gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public Goal gameMinute(Integer gameMinute) {
    this.gameMinute = gameMinute;
    return this;
  }

  /**
   * Get gameMinute
   * @return gameMinute
   */
  @javax.annotation.Nullable
  public Integer getGameMinute() {
    return gameMinute;
  }

  public void setGameMinute(Integer gameMinute) {
    this.gameMinute = gameMinute;
  }


  public Goal gameMinuteExtra(Integer gameMinuteExtra) {
    this.gameMinuteExtra = gameMinuteExtra;
    return this;
  }

  /**
   * Get gameMinuteExtra
   * @return gameMinuteExtra
   */
  @javax.annotation.Nullable
  public Integer getGameMinuteExtra() {
    return gameMinuteExtra;
  }

  public void setGameMinuteExtra(Integer gameMinuteExtra) {
    this.gameMinuteExtra = gameMinuteExtra;
  }


  public Goal goalId(Integer goalId) {
    this.goalId = goalId;
    return this;
  }

  /**
   * Get goalId
   * @return goalId
   */
  @javax.annotation.Nullable
  public Integer getGoalId() {
    return goalId;
  }

  public void setGoalId(Integer goalId) {
    this.goalId = goalId;
  }


  public Goal name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Goal playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }


  public Goal teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public Goal type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Goal goal = (Goal) o;
    return Objects.equals(this.assistedByPlayerId1, goal.assistedByPlayerId1) &&
        Objects.equals(this.assistedByPlayerId2, goal.assistedByPlayerId2) &&
        Objects.equals(this.assistedByPlayerName1, goal.assistedByPlayerName1) &&
        Objects.equals(this.assistedByPlayerName2, goal.assistedByPlayerName2) &&
        Objects.equals(this.gameId, goal.gameId) &&
        Objects.equals(this.gameMinute, goal.gameMinute) &&
        Objects.equals(this.gameMinuteExtra, goal.gameMinuteExtra) &&
        Objects.equals(this.goalId, goal.goalId) &&
        Objects.equals(this.name, goal.name) &&
        Objects.equals(this.playerId, goal.playerId) &&
        Objects.equals(this.teamId, goal.teamId) &&
        Objects.equals(this.type, goal.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistedByPlayerId1, assistedByPlayerId2, assistedByPlayerName1, assistedByPlayerName2, gameId, gameMinute, gameMinuteExtra, goalId, name, playerId, teamId, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Goal {\n");
    sb.append("    assistedByPlayerId1: ").append(toIndentedString(assistedByPlayerId1)).append("\n");
    sb.append("    assistedByPlayerId2: ").append(toIndentedString(assistedByPlayerId2)).append("\n");
    sb.append("    assistedByPlayerName1: ").append(toIndentedString(assistedByPlayerName1)).append("\n");
    sb.append("    assistedByPlayerName2: ").append(toIndentedString(assistedByPlayerName2)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    gameMinute: ").append(toIndentedString(gameMinute)).append("\n");
    sb.append("    gameMinuteExtra: ").append(toIndentedString(gameMinuteExtra)).append("\n");
    sb.append("    goalId: ").append(toIndentedString(goalId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssistedByPlayerId1");
    openapiFields.add("AssistedByPlayerId2");
    openapiFields.add("AssistedByPlayerName1");
    openapiFields.add("AssistedByPlayerName2");
    openapiFields.add("GameId");
    openapiFields.add("GameMinute");
    openapiFields.add("GameMinuteExtra");
    openapiFields.add("GoalId");
    openapiFields.add("Name");
    openapiFields.add("PlayerId");
    openapiFields.add("TeamId");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Goal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Goal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Goal is not found in the empty JSON string", Goal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Goal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Goal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AssistedByPlayerName1") != null && !jsonObj.get("AssistedByPlayerName1").isJsonNull()) && !jsonObj.get("AssistedByPlayerName1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssistedByPlayerName1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssistedByPlayerName1").toString()));
      }
      if ((jsonObj.get("AssistedByPlayerName2") != null && !jsonObj.get("AssistedByPlayerName2").isJsonNull()) && !jsonObj.get("AssistedByPlayerName2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssistedByPlayerName2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssistedByPlayerName2").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Goal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Goal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Goal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Goal.class));

       return (TypeAdapter<T>) new TypeAdapter<Goal>() {
           @Override
           public void write(JsonWriter out, Goal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Goal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Goal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Goal
   * @throws IOException if the JSON string is invalid with respect to Goal
   */
  public static Goal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Goal.class);
  }

  /**
   * Convert an instance of Goal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

