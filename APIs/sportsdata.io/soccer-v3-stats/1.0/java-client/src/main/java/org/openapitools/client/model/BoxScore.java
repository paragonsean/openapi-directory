/*
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Booking;
import org.openapitools.client.model.Coach;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.Goal;
import org.openapitools.client.model.Lineup;
import org.openapitools.client.model.PenaltyShootout;
import org.openapitools.client.model.PlayerGame;
import org.openapitools.client.model.Referee;
import org.openapitools.client.model.TeamGame;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoxScore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:19.276097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxScore {
  public static final String SERIALIZED_NAME_ADDITIONAL_ASSISTANT_REFEREE1 = "AdditionalAssistantReferee1";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ASSISTANT_REFEREE1)
  private Referee additionalAssistantReferee1;

  public static final String SERIALIZED_NAME_ADDITIONAL_ASSISTANT_REFEREE2 = "AdditionalAssistantReferee2";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ASSISTANT_REFEREE2)
  private Referee additionalAssistantReferee2;

  public static final String SERIALIZED_NAME_ASSISTANT_REFEREE1 = "AssistantReferee1";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_REFEREE1)
  private Referee assistantReferee1;

  public static final String SERIALIZED_NAME_ASSISTANT_REFEREE2 = "AssistantReferee2";
  @SerializedName(SERIALIZED_NAME_ASSISTANT_REFEREE2)
  private Referee assistantReferee2;

  public static final String SERIALIZED_NAME_AWAY_TEAM_COACH = "AwayTeamCoach";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_COACH)
  private Coach awayTeamCoach;

  public static final String SERIALIZED_NAME_BOOKINGS = "Bookings";
  @SerializedName(SERIALIZED_NAME_BOOKINGS)
  private List<Booking> bookings = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOURTH_REFEREE = "FourthReferee";
  @SerializedName(SERIALIZED_NAME_FOURTH_REFEREE)
  private Referee fourthReferee;

  public static final String SERIALIZED_NAME_GAME = "Game";
  @SerializedName(SERIALIZED_NAME_GAME)
  private Game game;

  public static final String SERIALIZED_NAME_GOALS = "Goals";
  @SerializedName(SERIALIZED_NAME_GOALS)
  private List<Goal> goals = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_TEAM_COACH = "HomeTeamCoach";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_COACH)
  private Coach homeTeamCoach;

  public static final String SERIALIZED_NAME_LINEUPS = "Lineups";
  @SerializedName(SERIALIZED_NAME_LINEUPS)
  private List<Lineup> lineups = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAIN_REFEREE = "MainReferee";
  @SerializedName(SERIALIZED_NAME_MAIN_REFEREE)
  private Referee mainReferee;

  public static final String SERIALIZED_NAME_PENALTY_SHOOTOUTS = "PenaltyShootouts";
  @SerializedName(SERIALIZED_NAME_PENALTY_SHOOTOUTS)
  private List<PenaltyShootout> penaltyShootouts = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYER_GAMES = "PlayerGames";
  @SerializedName(SERIALIZED_NAME_PLAYER_GAMES)
  private List<PlayerGame> playerGames = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_GAMES = "TeamGames";
  @SerializedName(SERIALIZED_NAME_TEAM_GAMES)
  private List<TeamGame> teamGames = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIDEO_ASSISTANT_REFEREE = "VideoAssistantReferee";
  @SerializedName(SERIALIZED_NAME_VIDEO_ASSISTANT_REFEREE)
  private Referee videoAssistantReferee;

  public BoxScore() {
  }

  public BoxScore additionalAssistantReferee1(Referee additionalAssistantReferee1) {
    this.additionalAssistantReferee1 = additionalAssistantReferee1;
    return this;
  }

  /**
   * Get additionalAssistantReferee1
   * @return additionalAssistantReferee1
   */
  @javax.annotation.Nullable
  public Referee getAdditionalAssistantReferee1() {
    return additionalAssistantReferee1;
  }

  public void setAdditionalAssistantReferee1(Referee additionalAssistantReferee1) {
    this.additionalAssistantReferee1 = additionalAssistantReferee1;
  }


  public BoxScore additionalAssistantReferee2(Referee additionalAssistantReferee2) {
    this.additionalAssistantReferee2 = additionalAssistantReferee2;
    return this;
  }

  /**
   * Get additionalAssistantReferee2
   * @return additionalAssistantReferee2
   */
  @javax.annotation.Nullable
  public Referee getAdditionalAssistantReferee2() {
    return additionalAssistantReferee2;
  }

  public void setAdditionalAssistantReferee2(Referee additionalAssistantReferee2) {
    this.additionalAssistantReferee2 = additionalAssistantReferee2;
  }


  public BoxScore assistantReferee1(Referee assistantReferee1) {
    this.assistantReferee1 = assistantReferee1;
    return this;
  }

  /**
   * Get assistantReferee1
   * @return assistantReferee1
   */
  @javax.annotation.Nullable
  public Referee getAssistantReferee1() {
    return assistantReferee1;
  }

  public void setAssistantReferee1(Referee assistantReferee1) {
    this.assistantReferee1 = assistantReferee1;
  }


  public BoxScore assistantReferee2(Referee assistantReferee2) {
    this.assistantReferee2 = assistantReferee2;
    return this;
  }

  /**
   * Get assistantReferee2
   * @return assistantReferee2
   */
  @javax.annotation.Nullable
  public Referee getAssistantReferee2() {
    return assistantReferee2;
  }

  public void setAssistantReferee2(Referee assistantReferee2) {
    this.assistantReferee2 = assistantReferee2;
  }


  public BoxScore awayTeamCoach(Coach awayTeamCoach) {
    this.awayTeamCoach = awayTeamCoach;
    return this;
  }

  /**
   * Get awayTeamCoach
   * @return awayTeamCoach
   */
  @javax.annotation.Nullable
  public Coach getAwayTeamCoach() {
    return awayTeamCoach;
  }

  public void setAwayTeamCoach(Coach awayTeamCoach) {
    this.awayTeamCoach = awayTeamCoach;
  }


  public BoxScore bookings(List<Booking> bookings) {
    this.bookings = bookings;
    return this;
  }

  public BoxScore addBookingsItem(Booking bookingsItem) {
    if (this.bookings == null) {
      this.bookings = new ArrayList<>();
    }
    this.bookings.add(bookingsItem);
    return this;
  }

  /**
   * Get bookings
   * @return bookings
   */
  @javax.annotation.Nullable
  public List<Booking> getBookings() {
    return bookings;
  }

  public void setBookings(List<Booking> bookings) {
    this.bookings = bookings;
  }


  public BoxScore fourthReferee(Referee fourthReferee) {
    this.fourthReferee = fourthReferee;
    return this;
  }

  /**
   * Get fourthReferee
   * @return fourthReferee
   */
  @javax.annotation.Nullable
  public Referee getFourthReferee() {
    return fourthReferee;
  }

  public void setFourthReferee(Referee fourthReferee) {
    this.fourthReferee = fourthReferee;
  }


  public BoxScore game(Game game) {
    this.game = game;
    return this;
  }

  /**
   * Get game
   * @return game
   */
  @javax.annotation.Nullable
  public Game getGame() {
    return game;
  }

  public void setGame(Game game) {
    this.game = game;
  }


  public BoxScore goals(List<Goal> goals) {
    this.goals = goals;
    return this;
  }

  public BoxScore addGoalsItem(Goal goalsItem) {
    if (this.goals == null) {
      this.goals = new ArrayList<>();
    }
    this.goals.add(goalsItem);
    return this;
  }

  /**
   * Get goals
   * @return goals
   */
  @javax.annotation.Nullable
  public List<Goal> getGoals() {
    return goals;
  }

  public void setGoals(List<Goal> goals) {
    this.goals = goals;
  }


  public BoxScore homeTeamCoach(Coach homeTeamCoach) {
    this.homeTeamCoach = homeTeamCoach;
    return this;
  }

  /**
   * Get homeTeamCoach
   * @return homeTeamCoach
   */
  @javax.annotation.Nullable
  public Coach getHomeTeamCoach() {
    return homeTeamCoach;
  }

  public void setHomeTeamCoach(Coach homeTeamCoach) {
    this.homeTeamCoach = homeTeamCoach;
  }


  public BoxScore lineups(List<Lineup> lineups) {
    this.lineups = lineups;
    return this;
  }

  public BoxScore addLineupsItem(Lineup lineupsItem) {
    if (this.lineups == null) {
      this.lineups = new ArrayList<>();
    }
    this.lineups.add(lineupsItem);
    return this;
  }

  /**
   * Get lineups
   * @return lineups
   */
  @javax.annotation.Nullable
  public List<Lineup> getLineups() {
    return lineups;
  }

  public void setLineups(List<Lineup> lineups) {
    this.lineups = lineups;
  }


  public BoxScore mainReferee(Referee mainReferee) {
    this.mainReferee = mainReferee;
    return this;
  }

  /**
   * Get mainReferee
   * @return mainReferee
   */
  @javax.annotation.Nullable
  public Referee getMainReferee() {
    return mainReferee;
  }

  public void setMainReferee(Referee mainReferee) {
    this.mainReferee = mainReferee;
  }


  public BoxScore penaltyShootouts(List<PenaltyShootout> penaltyShootouts) {
    this.penaltyShootouts = penaltyShootouts;
    return this;
  }

  public BoxScore addPenaltyShootoutsItem(PenaltyShootout penaltyShootoutsItem) {
    if (this.penaltyShootouts == null) {
      this.penaltyShootouts = new ArrayList<>();
    }
    this.penaltyShootouts.add(penaltyShootoutsItem);
    return this;
  }

  /**
   * Get penaltyShootouts
   * @return penaltyShootouts
   */
  @javax.annotation.Nullable
  public List<PenaltyShootout> getPenaltyShootouts() {
    return penaltyShootouts;
  }

  public void setPenaltyShootouts(List<PenaltyShootout> penaltyShootouts) {
    this.penaltyShootouts = penaltyShootouts;
  }


  public BoxScore playerGames(List<PlayerGame> playerGames) {
    this.playerGames = playerGames;
    return this;
  }

  public BoxScore addPlayerGamesItem(PlayerGame playerGamesItem) {
    if (this.playerGames == null) {
      this.playerGames = new ArrayList<>();
    }
    this.playerGames.add(playerGamesItem);
    return this;
  }

  /**
   * Get playerGames
   * @return playerGames
   */
  @javax.annotation.Nullable
  public List<PlayerGame> getPlayerGames() {
    return playerGames;
  }

  public void setPlayerGames(List<PlayerGame> playerGames) {
    this.playerGames = playerGames;
  }


  public BoxScore teamGames(List<TeamGame> teamGames) {
    this.teamGames = teamGames;
    return this;
  }

  public BoxScore addTeamGamesItem(TeamGame teamGamesItem) {
    if (this.teamGames == null) {
      this.teamGames = new ArrayList<>();
    }
    this.teamGames.add(teamGamesItem);
    return this;
  }

  /**
   * Get teamGames
   * @return teamGames
   */
  @javax.annotation.Nullable
  public List<TeamGame> getTeamGames() {
    return teamGames;
  }

  public void setTeamGames(List<TeamGame> teamGames) {
    this.teamGames = teamGames;
  }


  public BoxScore videoAssistantReferee(Referee videoAssistantReferee) {
    this.videoAssistantReferee = videoAssistantReferee;
    return this;
  }

  /**
   * Get videoAssistantReferee
   * @return videoAssistantReferee
   */
  @javax.annotation.Nullable
  public Referee getVideoAssistantReferee() {
    return videoAssistantReferee;
  }

  public void setVideoAssistantReferee(Referee videoAssistantReferee) {
    this.videoAssistantReferee = videoAssistantReferee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxScore boxScore = (BoxScore) o;
    return Objects.equals(this.additionalAssistantReferee1, boxScore.additionalAssistantReferee1) &&
        Objects.equals(this.additionalAssistantReferee2, boxScore.additionalAssistantReferee2) &&
        Objects.equals(this.assistantReferee1, boxScore.assistantReferee1) &&
        Objects.equals(this.assistantReferee2, boxScore.assistantReferee2) &&
        Objects.equals(this.awayTeamCoach, boxScore.awayTeamCoach) &&
        Objects.equals(this.bookings, boxScore.bookings) &&
        Objects.equals(this.fourthReferee, boxScore.fourthReferee) &&
        Objects.equals(this.game, boxScore.game) &&
        Objects.equals(this.goals, boxScore.goals) &&
        Objects.equals(this.homeTeamCoach, boxScore.homeTeamCoach) &&
        Objects.equals(this.lineups, boxScore.lineups) &&
        Objects.equals(this.mainReferee, boxScore.mainReferee) &&
        Objects.equals(this.penaltyShootouts, boxScore.penaltyShootouts) &&
        Objects.equals(this.playerGames, boxScore.playerGames) &&
        Objects.equals(this.teamGames, boxScore.teamGames) &&
        Objects.equals(this.videoAssistantReferee, boxScore.videoAssistantReferee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalAssistantReferee1, additionalAssistantReferee2, assistantReferee1, assistantReferee2, awayTeamCoach, bookings, fourthReferee, game, goals, homeTeamCoach, lineups, mainReferee, penaltyShootouts, playerGames, teamGames, videoAssistantReferee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxScore {\n");
    sb.append("    additionalAssistantReferee1: ").append(toIndentedString(additionalAssistantReferee1)).append("\n");
    sb.append("    additionalAssistantReferee2: ").append(toIndentedString(additionalAssistantReferee2)).append("\n");
    sb.append("    assistantReferee1: ").append(toIndentedString(assistantReferee1)).append("\n");
    sb.append("    assistantReferee2: ").append(toIndentedString(assistantReferee2)).append("\n");
    sb.append("    awayTeamCoach: ").append(toIndentedString(awayTeamCoach)).append("\n");
    sb.append("    bookings: ").append(toIndentedString(bookings)).append("\n");
    sb.append("    fourthReferee: ").append(toIndentedString(fourthReferee)).append("\n");
    sb.append("    game: ").append(toIndentedString(game)).append("\n");
    sb.append("    goals: ").append(toIndentedString(goals)).append("\n");
    sb.append("    homeTeamCoach: ").append(toIndentedString(homeTeamCoach)).append("\n");
    sb.append("    lineups: ").append(toIndentedString(lineups)).append("\n");
    sb.append("    mainReferee: ").append(toIndentedString(mainReferee)).append("\n");
    sb.append("    penaltyShootouts: ").append(toIndentedString(penaltyShootouts)).append("\n");
    sb.append("    playerGames: ").append(toIndentedString(playerGames)).append("\n");
    sb.append("    teamGames: ").append(toIndentedString(teamGames)).append("\n");
    sb.append("    videoAssistantReferee: ").append(toIndentedString(videoAssistantReferee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalAssistantReferee1");
    openapiFields.add("AdditionalAssistantReferee2");
    openapiFields.add("AssistantReferee1");
    openapiFields.add("AssistantReferee2");
    openapiFields.add("AwayTeamCoach");
    openapiFields.add("Bookings");
    openapiFields.add("FourthReferee");
    openapiFields.add("Game");
    openapiFields.add("Goals");
    openapiFields.add("HomeTeamCoach");
    openapiFields.add("Lineups");
    openapiFields.add("MainReferee");
    openapiFields.add("PenaltyShootouts");
    openapiFields.add("PlayerGames");
    openapiFields.add("TeamGames");
    openapiFields.add("VideoAssistantReferee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxScore is not found in the empty JSON string", BoxScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdditionalAssistantReferee1`
      if (jsonObj.get("AdditionalAssistantReferee1") != null && !jsonObj.get("AdditionalAssistantReferee1").isJsonNull()) {
        Referee.validateJsonElement(jsonObj.get("AdditionalAssistantReferee1"));
      }
      // validate the optional field `AdditionalAssistantReferee2`
      if (jsonObj.get("AdditionalAssistantReferee2") != null && !jsonObj.get("AdditionalAssistantReferee2").isJsonNull()) {
        Referee.validateJsonElement(jsonObj.get("AdditionalAssistantReferee2"));
      }
      // validate the optional field `AssistantReferee1`
      if (jsonObj.get("AssistantReferee1") != null && !jsonObj.get("AssistantReferee1").isJsonNull()) {
        Referee.validateJsonElement(jsonObj.get("AssistantReferee1"));
      }
      // validate the optional field `AssistantReferee2`
      if (jsonObj.get("AssistantReferee2") != null && !jsonObj.get("AssistantReferee2").isJsonNull()) {
        Referee.validateJsonElement(jsonObj.get("AssistantReferee2"));
      }
      // validate the optional field `AwayTeamCoach`
      if (jsonObj.get("AwayTeamCoach") != null && !jsonObj.get("AwayTeamCoach").isJsonNull()) {
        Coach.validateJsonElement(jsonObj.get("AwayTeamCoach"));
      }
      if (jsonObj.get("Bookings") != null && !jsonObj.get("Bookings").isJsonNull()) {
        JsonArray jsonArraybookings = jsonObj.getAsJsonArray("Bookings");
        if (jsonArraybookings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Bookings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Bookings` to be an array in the JSON string but got `%s`", jsonObj.get("Bookings").toString()));
          }

          // validate the optional field `Bookings` (array)
          for (int i = 0; i < jsonArraybookings.size(); i++) {
            Booking.validateJsonElement(jsonArraybookings.get(i));
          };
        }
      }
      // validate the optional field `FourthReferee`
      if (jsonObj.get("FourthReferee") != null && !jsonObj.get("FourthReferee").isJsonNull()) {
        Referee.validateJsonElement(jsonObj.get("FourthReferee"));
      }
      // validate the optional field `Game`
      if (jsonObj.get("Game") != null && !jsonObj.get("Game").isJsonNull()) {
        Game.validateJsonElement(jsonObj.get("Game"));
      }
      if (jsonObj.get("Goals") != null && !jsonObj.get("Goals").isJsonNull()) {
        JsonArray jsonArraygoals = jsonObj.getAsJsonArray("Goals");
        if (jsonArraygoals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Goals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Goals` to be an array in the JSON string but got `%s`", jsonObj.get("Goals").toString()));
          }

          // validate the optional field `Goals` (array)
          for (int i = 0; i < jsonArraygoals.size(); i++) {
            Goal.validateJsonElement(jsonArraygoals.get(i));
          };
        }
      }
      // validate the optional field `HomeTeamCoach`
      if (jsonObj.get("HomeTeamCoach") != null && !jsonObj.get("HomeTeamCoach").isJsonNull()) {
        Coach.validateJsonElement(jsonObj.get("HomeTeamCoach"));
      }
      if (jsonObj.get("Lineups") != null && !jsonObj.get("Lineups").isJsonNull()) {
        JsonArray jsonArraylineups = jsonObj.getAsJsonArray("Lineups");
        if (jsonArraylineups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Lineups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Lineups` to be an array in the JSON string but got `%s`", jsonObj.get("Lineups").toString()));
          }

          // validate the optional field `Lineups` (array)
          for (int i = 0; i < jsonArraylineups.size(); i++) {
            Lineup.validateJsonElement(jsonArraylineups.get(i));
          };
        }
      }
      // validate the optional field `MainReferee`
      if (jsonObj.get("MainReferee") != null && !jsonObj.get("MainReferee").isJsonNull()) {
        Referee.validateJsonElement(jsonObj.get("MainReferee"));
      }
      if (jsonObj.get("PenaltyShootouts") != null && !jsonObj.get("PenaltyShootouts").isJsonNull()) {
        JsonArray jsonArraypenaltyShootouts = jsonObj.getAsJsonArray("PenaltyShootouts");
        if (jsonArraypenaltyShootouts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PenaltyShootouts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PenaltyShootouts` to be an array in the JSON string but got `%s`", jsonObj.get("PenaltyShootouts").toString()));
          }

          // validate the optional field `PenaltyShootouts` (array)
          for (int i = 0; i < jsonArraypenaltyShootouts.size(); i++) {
            PenaltyShootout.validateJsonElement(jsonArraypenaltyShootouts.get(i));
          };
        }
      }
      if (jsonObj.get("PlayerGames") != null && !jsonObj.get("PlayerGames").isJsonNull()) {
        JsonArray jsonArrayplayerGames = jsonObj.getAsJsonArray("PlayerGames");
        if (jsonArrayplayerGames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PlayerGames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PlayerGames` to be an array in the JSON string but got `%s`", jsonObj.get("PlayerGames").toString()));
          }

          // validate the optional field `PlayerGames` (array)
          for (int i = 0; i < jsonArrayplayerGames.size(); i++) {
            PlayerGame.validateJsonElement(jsonArrayplayerGames.get(i));
          };
        }
      }
      if (jsonObj.get("TeamGames") != null && !jsonObj.get("TeamGames").isJsonNull()) {
        JsonArray jsonArrayteamGames = jsonObj.getAsJsonArray("TeamGames");
        if (jsonArrayteamGames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TeamGames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TeamGames` to be an array in the JSON string but got `%s`", jsonObj.get("TeamGames").toString()));
          }

          // validate the optional field `TeamGames` (array)
          for (int i = 0; i < jsonArrayteamGames.size(); i++) {
            TeamGame.validateJsonElement(jsonArrayteamGames.get(i));
          };
        }
      }
      // validate the optional field `VideoAssistantReferee`
      if (jsonObj.get("VideoAssistantReferee") != null && !jsonObj.get("VideoAssistantReferee").isJsonNull()) {
        Referee.validateJsonElement(jsonObj.get("VideoAssistantReferee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxScore.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxScore>() {
           @Override
           public void write(JsonWriter out, BoxScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxScore
   * @throws IOException if the JSON string is invalid with respect to BoxScore
   */
  public static BoxScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxScore.class);
  }

  /**
   * Convert an instance of BoxScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

