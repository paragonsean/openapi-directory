/*
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:19.276097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_BIRTH_CITY = "BirthCity";
  @SerializedName(SERIALIZED_NAME_BIRTH_CITY)
  private String birthCity;

  public static final String SERIALIZED_NAME_BIRTH_COUNTRY = "BirthCountry";
  @SerializedName(SERIALIZED_NAME_BIRTH_COUNTRY)
  private String birthCountry;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "BirthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_COMMON_NAME = "CommonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_POSITION = "DraftKingsPosition";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_POSITION)
  private String draftKingsPosition;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_FOOT = "Foot";
  @SerializedName(SERIALIZED_NAME_FOOT)
  private String foot;

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_INJURY_BODY_PART = "InjuryBodyPart";
  @SerializedName(SERIALIZED_NAME_INJURY_BODY_PART)
  private String injuryBodyPart;

  public static final String SERIALIZED_NAME_INJURY_NOTES = "InjuryNotes";
  @SerializedName(SERIALIZED_NAME_INJURY_NOTES)
  private String injuryNotes;

  public static final String SERIALIZED_NAME_INJURY_START_DATE = "InjuryStartDate";
  @SerializedName(SERIALIZED_NAME_INJURY_START_DATE)
  private String injuryStartDate;

  public static final String SERIALIZED_NAME_INJURY_STATUS = "InjuryStatus";
  @SerializedName(SERIALIZED_NAME_INJURY_STATUS)
  private String injuryStatus;

  public static final String SERIALIZED_NAME_JERSEY = "Jersey";
  @SerializedName(SERIALIZED_NAME_JERSEY)
  private Integer jersey;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NATIONALITY = "Nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_PHOTO_URL = "PhotoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POSITION_CATEGORY = "PositionCategory";
  @SerializedName(SERIALIZED_NAME_POSITION_CATEGORY)
  private String positionCategory;

  public static final String SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D = "RotoWirePlayerID";
  @SerializedName(SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D)
  private Integer rotoWirePlayerID;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_UPDATED = "UsaTodayHeadshotNoBackgroundUpdated";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_UPDATED)
  private String usaTodayHeadshotNoBackgroundUpdated;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_URL = "UsaTodayHeadshotNoBackgroundUrl";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_URL)
  private String usaTodayHeadshotNoBackgroundUrl;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_UPDATED = "UsaTodayHeadshotUpdated";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_UPDATED)
  private String usaTodayHeadshotUpdated;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_URL = "UsaTodayHeadshotUrl";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_URL)
  private String usaTodayHeadshotUrl;

  public static final String SERIALIZED_NAME_USA_TODAY_PLAYER_I_D = "UsaTodayPlayerID";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_PLAYER_I_D)
  private Integer usaTodayPlayerID;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public Player() {
  }

  public Player birthCity(String birthCity) {
    this.birthCity = birthCity;
    return this;
  }

  /**
   * Get birthCity
   * @return birthCity
   */
  @javax.annotation.Nullable
  public String getBirthCity() {
    return birthCity;
  }

  public void setBirthCity(String birthCity) {
    this.birthCity = birthCity;
  }


  public Player birthCountry(String birthCountry) {
    this.birthCountry = birthCountry;
    return this;
  }

  /**
   * Get birthCountry
   * @return birthCountry
   */
  @javax.annotation.Nullable
  public String getBirthCountry() {
    return birthCountry;
  }

  public void setBirthCountry(String birthCountry) {
    this.birthCountry = birthCountry;
  }


  public Player birthDate(String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  public Player commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Get commonName
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public Player draftKingsPosition(String draftKingsPosition) {
    this.draftKingsPosition = draftKingsPosition;
    return this;
  }

  /**
   * Get draftKingsPosition
   * @return draftKingsPosition
   */
  @javax.annotation.Nullable
  public String getDraftKingsPosition() {
    return draftKingsPosition;
  }

  public void setDraftKingsPosition(String draftKingsPosition) {
    this.draftKingsPosition = draftKingsPosition;
  }


  public Player firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Player foot(String foot) {
    this.foot = foot;
    return this;
  }

  /**
   * Get foot
   * @return foot
   */
  @javax.annotation.Nullable
  public String getFoot() {
    return foot;
  }

  public void setFoot(String foot) {
    this.foot = foot;
  }


  public Player gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public Player height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Player injuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
    return this;
  }

  /**
   * Get injuryBodyPart
   * @return injuryBodyPart
   */
  @javax.annotation.Nullable
  public String getInjuryBodyPart() {
    return injuryBodyPart;
  }

  public void setInjuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
  }


  public Player injuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
    return this;
  }

  /**
   * Get injuryNotes
   * @return injuryNotes
   */
  @javax.annotation.Nullable
  public String getInjuryNotes() {
    return injuryNotes;
  }

  public void setInjuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
  }


  public Player injuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
    return this;
  }

  /**
   * Get injuryStartDate
   * @return injuryStartDate
   */
  @javax.annotation.Nullable
  public String getInjuryStartDate() {
    return injuryStartDate;
  }

  public void setInjuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
  }


  public Player injuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
    return this;
  }

  /**
   * Get injuryStatus
   * @return injuryStatus
   */
  @javax.annotation.Nullable
  public String getInjuryStatus() {
    return injuryStatus;
  }

  public void setInjuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
  }


  public Player jersey(Integer jersey) {
    this.jersey = jersey;
    return this;
  }

  /**
   * Get jersey
   * @return jersey
   */
  @javax.annotation.Nullable
  public Integer getJersey() {
    return jersey;
  }

  public void setJersey(Integer jersey) {
    this.jersey = jersey;
  }


  public Player lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Player nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * Get nationality
   * @return nationality
   */
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public Player photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public Player playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }


  public Player position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public Player positionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
    return this;
  }

  /**
   * Get positionCategory
   * @return positionCategory
   */
  @javax.annotation.Nullable
  public String getPositionCategory() {
    return positionCategory;
  }

  public void setPositionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
  }


  public Player rotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
    return this;
  }

  /**
   * Get rotoWirePlayerID
   * @return rotoWirePlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoWirePlayerID() {
    return rotoWirePlayerID;
  }

  public void setRotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
  }


  public Player shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public Player updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Player usaTodayHeadshotNoBackgroundUpdated(String usaTodayHeadshotNoBackgroundUpdated) {
    this.usaTodayHeadshotNoBackgroundUpdated = usaTodayHeadshotNoBackgroundUpdated;
    return this;
  }

  /**
   * Get usaTodayHeadshotNoBackgroundUpdated
   * @return usaTodayHeadshotNoBackgroundUpdated
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotNoBackgroundUpdated() {
    return usaTodayHeadshotNoBackgroundUpdated;
  }

  public void setUsaTodayHeadshotNoBackgroundUpdated(String usaTodayHeadshotNoBackgroundUpdated) {
    this.usaTodayHeadshotNoBackgroundUpdated = usaTodayHeadshotNoBackgroundUpdated;
  }


  public Player usaTodayHeadshotNoBackgroundUrl(String usaTodayHeadshotNoBackgroundUrl) {
    this.usaTodayHeadshotNoBackgroundUrl = usaTodayHeadshotNoBackgroundUrl;
    return this;
  }

  /**
   * Get usaTodayHeadshotNoBackgroundUrl
   * @return usaTodayHeadshotNoBackgroundUrl
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotNoBackgroundUrl() {
    return usaTodayHeadshotNoBackgroundUrl;
  }

  public void setUsaTodayHeadshotNoBackgroundUrl(String usaTodayHeadshotNoBackgroundUrl) {
    this.usaTodayHeadshotNoBackgroundUrl = usaTodayHeadshotNoBackgroundUrl;
  }


  public Player usaTodayHeadshotUpdated(String usaTodayHeadshotUpdated) {
    this.usaTodayHeadshotUpdated = usaTodayHeadshotUpdated;
    return this;
  }

  /**
   * Get usaTodayHeadshotUpdated
   * @return usaTodayHeadshotUpdated
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotUpdated() {
    return usaTodayHeadshotUpdated;
  }

  public void setUsaTodayHeadshotUpdated(String usaTodayHeadshotUpdated) {
    this.usaTodayHeadshotUpdated = usaTodayHeadshotUpdated;
  }


  public Player usaTodayHeadshotUrl(String usaTodayHeadshotUrl) {
    this.usaTodayHeadshotUrl = usaTodayHeadshotUrl;
    return this;
  }

  /**
   * Get usaTodayHeadshotUrl
   * @return usaTodayHeadshotUrl
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotUrl() {
    return usaTodayHeadshotUrl;
  }

  public void setUsaTodayHeadshotUrl(String usaTodayHeadshotUrl) {
    this.usaTodayHeadshotUrl = usaTodayHeadshotUrl;
  }


  public Player usaTodayPlayerID(Integer usaTodayPlayerID) {
    this.usaTodayPlayerID = usaTodayPlayerID;
    return this;
  }

  /**
   * Get usaTodayPlayerID
   * @return usaTodayPlayerID
   */
  @javax.annotation.Nullable
  public Integer getUsaTodayPlayerID() {
    return usaTodayPlayerID;
  }

  public void setUsaTodayPlayerID(Integer usaTodayPlayerID) {
    this.usaTodayPlayerID = usaTodayPlayerID;
  }


  public Player weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.birthCity, player.birthCity) &&
        Objects.equals(this.birthCountry, player.birthCountry) &&
        Objects.equals(this.birthDate, player.birthDate) &&
        Objects.equals(this.commonName, player.commonName) &&
        Objects.equals(this.draftKingsPosition, player.draftKingsPosition) &&
        Objects.equals(this.firstName, player.firstName) &&
        Objects.equals(this.foot, player.foot) &&
        Objects.equals(this.gender, player.gender) &&
        Objects.equals(this.height, player.height) &&
        Objects.equals(this.injuryBodyPart, player.injuryBodyPart) &&
        Objects.equals(this.injuryNotes, player.injuryNotes) &&
        Objects.equals(this.injuryStartDate, player.injuryStartDate) &&
        Objects.equals(this.injuryStatus, player.injuryStatus) &&
        Objects.equals(this.jersey, player.jersey) &&
        Objects.equals(this.lastName, player.lastName) &&
        Objects.equals(this.nationality, player.nationality) &&
        Objects.equals(this.photoUrl, player.photoUrl) &&
        Objects.equals(this.playerId, player.playerId) &&
        Objects.equals(this.position, player.position) &&
        Objects.equals(this.positionCategory, player.positionCategory) &&
        Objects.equals(this.rotoWirePlayerID, player.rotoWirePlayerID) &&
        Objects.equals(this.shortName, player.shortName) &&
        Objects.equals(this.updated, player.updated) &&
        Objects.equals(this.usaTodayHeadshotNoBackgroundUpdated, player.usaTodayHeadshotNoBackgroundUpdated) &&
        Objects.equals(this.usaTodayHeadshotNoBackgroundUrl, player.usaTodayHeadshotNoBackgroundUrl) &&
        Objects.equals(this.usaTodayHeadshotUpdated, player.usaTodayHeadshotUpdated) &&
        Objects.equals(this.usaTodayHeadshotUrl, player.usaTodayHeadshotUrl) &&
        Objects.equals(this.usaTodayPlayerID, player.usaTodayPlayerID) &&
        Objects.equals(this.weight, player.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthCity, birthCountry, birthDate, commonName, draftKingsPosition, firstName, foot, gender, height, injuryBodyPart, injuryNotes, injuryStartDate, injuryStatus, jersey, lastName, nationality, photoUrl, playerId, position, positionCategory, rotoWirePlayerID, shortName, updated, usaTodayHeadshotNoBackgroundUpdated, usaTodayHeadshotNoBackgroundUrl, usaTodayHeadshotUpdated, usaTodayHeadshotUrl, usaTodayPlayerID, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    birthCity: ").append(toIndentedString(birthCity)).append("\n");
    sb.append("    birthCountry: ").append(toIndentedString(birthCountry)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    draftKingsPosition: ").append(toIndentedString(draftKingsPosition)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    foot: ").append(toIndentedString(foot)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    injuryBodyPart: ").append(toIndentedString(injuryBodyPart)).append("\n");
    sb.append("    injuryNotes: ").append(toIndentedString(injuryNotes)).append("\n");
    sb.append("    injuryStartDate: ").append(toIndentedString(injuryStartDate)).append("\n");
    sb.append("    injuryStatus: ").append(toIndentedString(injuryStatus)).append("\n");
    sb.append("    jersey: ").append(toIndentedString(jersey)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionCategory: ").append(toIndentedString(positionCategory)).append("\n");
    sb.append("    rotoWirePlayerID: ").append(toIndentedString(rotoWirePlayerID)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    usaTodayHeadshotNoBackgroundUpdated: ").append(toIndentedString(usaTodayHeadshotNoBackgroundUpdated)).append("\n");
    sb.append("    usaTodayHeadshotNoBackgroundUrl: ").append(toIndentedString(usaTodayHeadshotNoBackgroundUrl)).append("\n");
    sb.append("    usaTodayHeadshotUpdated: ").append(toIndentedString(usaTodayHeadshotUpdated)).append("\n");
    sb.append("    usaTodayHeadshotUrl: ").append(toIndentedString(usaTodayHeadshotUrl)).append("\n");
    sb.append("    usaTodayPlayerID: ").append(toIndentedString(usaTodayPlayerID)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BirthCity");
    openapiFields.add("BirthCountry");
    openapiFields.add("BirthDate");
    openapiFields.add("CommonName");
    openapiFields.add("DraftKingsPosition");
    openapiFields.add("FirstName");
    openapiFields.add("Foot");
    openapiFields.add("Gender");
    openapiFields.add("Height");
    openapiFields.add("InjuryBodyPart");
    openapiFields.add("InjuryNotes");
    openapiFields.add("InjuryStartDate");
    openapiFields.add("InjuryStatus");
    openapiFields.add("Jersey");
    openapiFields.add("LastName");
    openapiFields.add("Nationality");
    openapiFields.add("PhotoUrl");
    openapiFields.add("PlayerId");
    openapiFields.add("Position");
    openapiFields.add("PositionCategory");
    openapiFields.add("RotoWirePlayerID");
    openapiFields.add("ShortName");
    openapiFields.add("Updated");
    openapiFields.add("UsaTodayHeadshotNoBackgroundUpdated");
    openapiFields.add("UsaTodayHeadshotNoBackgroundUrl");
    openapiFields.add("UsaTodayHeadshotUpdated");
    openapiFields.add("UsaTodayHeadshotUrl");
    openapiFields.add("UsaTodayPlayerID");
    openapiFields.add("Weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BirthCity") != null && !jsonObj.get("BirthCity").isJsonNull()) && !jsonObj.get("BirthCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthCity").toString()));
      }
      if ((jsonObj.get("BirthCountry") != null && !jsonObj.get("BirthCountry").isJsonNull()) && !jsonObj.get("BirthCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthCountry").toString()));
      }
      if ((jsonObj.get("BirthDate") != null && !jsonObj.get("BirthDate").isJsonNull()) && !jsonObj.get("BirthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthDate").toString()));
      }
      if ((jsonObj.get("CommonName") != null && !jsonObj.get("CommonName").isJsonNull()) && !jsonObj.get("CommonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommonName").toString()));
      }
      if ((jsonObj.get("DraftKingsPosition") != null && !jsonObj.get("DraftKingsPosition").isJsonNull()) && !jsonObj.get("DraftKingsPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DraftKingsPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DraftKingsPosition").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("Foot") != null && !jsonObj.get("Foot").isJsonNull()) && !jsonObj.get("Foot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Foot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Foot").toString()));
      }
      if ((jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) && !jsonObj.get("Gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gender").toString()));
      }
      if ((jsonObj.get("InjuryBodyPart") != null && !jsonObj.get("InjuryBodyPart").isJsonNull()) && !jsonObj.get("InjuryBodyPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryBodyPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryBodyPart").toString()));
      }
      if ((jsonObj.get("InjuryNotes") != null && !jsonObj.get("InjuryNotes").isJsonNull()) && !jsonObj.get("InjuryNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryNotes").toString()));
      }
      if ((jsonObj.get("InjuryStartDate") != null && !jsonObj.get("InjuryStartDate").isJsonNull()) && !jsonObj.get("InjuryStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStartDate").toString()));
      }
      if ((jsonObj.get("InjuryStatus") != null && !jsonObj.get("InjuryStatus").isJsonNull()) && !jsonObj.get("InjuryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStatus").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("Nationality") != null && !jsonObj.get("Nationality").isJsonNull()) && !jsonObj.get("Nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Nationality").toString()));
      }
      if ((jsonObj.get("PhotoUrl") != null && !jsonObj.get("PhotoUrl").isJsonNull()) && !jsonObj.get("PhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoUrl").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("PositionCategory") != null && !jsonObj.get("PositionCategory").isJsonNull()) && !jsonObj.get("PositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionCategory").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated") != null && !jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotNoBackgroundUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotNoBackgroundUrl") != null && !jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotNoBackgroundUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotUpdated") != null && !jsonObj.get("UsaTodayHeadshotUpdated").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotUpdated").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotUrl") != null && !jsonObj.get("UsaTodayHeadshotUrl").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

