/**
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Booking from './Booking';
import Coach from './Coach';
import Game from './Game';
import Goal from './Goal';
import Lineup from './Lineup';
import PenaltyShootout from './PenaltyShootout';
import PlayerGame from './PlayerGame';
import Referee from './Referee';
import TeamGame from './TeamGame';

/**
 * The BoxScore model module.
 * @module model/BoxScore
 * @version 1.0
 */
class BoxScore {
    /**
     * Constructs a new <code>BoxScore</code>.
     * @alias module:model/BoxScore
     */
    constructor() { 
        
        BoxScore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BoxScore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BoxScore} obj Optional instance to populate.
     * @return {module:model/BoxScore} The populated <code>BoxScore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BoxScore();

            if (data.hasOwnProperty('AdditionalAssistantReferee1')) {
                obj['AdditionalAssistantReferee1'] = Referee.constructFromObject(data['AdditionalAssistantReferee1']);
            }
            if (data.hasOwnProperty('AdditionalAssistantReferee2')) {
                obj['AdditionalAssistantReferee2'] = Referee.constructFromObject(data['AdditionalAssistantReferee2']);
            }
            if (data.hasOwnProperty('AssistantReferee1')) {
                obj['AssistantReferee1'] = Referee.constructFromObject(data['AssistantReferee1']);
            }
            if (data.hasOwnProperty('AssistantReferee2')) {
                obj['AssistantReferee2'] = Referee.constructFromObject(data['AssistantReferee2']);
            }
            if (data.hasOwnProperty('AwayTeamCoach')) {
                obj['AwayTeamCoach'] = Coach.constructFromObject(data['AwayTeamCoach']);
            }
            if (data.hasOwnProperty('Bookings')) {
                obj['Bookings'] = ApiClient.convertToType(data['Bookings'], [Booking]);
            }
            if (data.hasOwnProperty('FourthReferee')) {
                obj['FourthReferee'] = Referee.constructFromObject(data['FourthReferee']);
            }
            if (data.hasOwnProperty('Game')) {
                obj['Game'] = Game.constructFromObject(data['Game']);
            }
            if (data.hasOwnProperty('Goals')) {
                obj['Goals'] = ApiClient.convertToType(data['Goals'], [Goal]);
            }
            if (data.hasOwnProperty('HomeTeamCoach')) {
                obj['HomeTeamCoach'] = Coach.constructFromObject(data['HomeTeamCoach']);
            }
            if (data.hasOwnProperty('Lineups')) {
                obj['Lineups'] = ApiClient.convertToType(data['Lineups'], [Lineup]);
            }
            if (data.hasOwnProperty('MainReferee')) {
                obj['MainReferee'] = Referee.constructFromObject(data['MainReferee']);
            }
            if (data.hasOwnProperty('PenaltyShootouts')) {
                obj['PenaltyShootouts'] = ApiClient.convertToType(data['PenaltyShootouts'], [PenaltyShootout]);
            }
            if (data.hasOwnProperty('PlayerGames')) {
                obj['PlayerGames'] = ApiClient.convertToType(data['PlayerGames'], [PlayerGame]);
            }
            if (data.hasOwnProperty('TeamGames')) {
                obj['TeamGames'] = ApiClient.convertToType(data['TeamGames'], [TeamGame]);
            }
            if (data.hasOwnProperty('VideoAssistantReferee')) {
                obj['VideoAssistantReferee'] = Referee.constructFromObject(data['VideoAssistantReferee']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BoxScore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BoxScore</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdditionalAssistantReferee1`
        if (data['AdditionalAssistantReferee1']) { // data not null
          Referee.validateJSON(data['AdditionalAssistantReferee1']);
        }
        // validate the optional field `AdditionalAssistantReferee2`
        if (data['AdditionalAssistantReferee2']) { // data not null
          Referee.validateJSON(data['AdditionalAssistantReferee2']);
        }
        // validate the optional field `AssistantReferee1`
        if (data['AssistantReferee1']) { // data not null
          Referee.validateJSON(data['AssistantReferee1']);
        }
        // validate the optional field `AssistantReferee2`
        if (data['AssistantReferee2']) { // data not null
          Referee.validateJSON(data['AssistantReferee2']);
        }
        // validate the optional field `AwayTeamCoach`
        if (data['AwayTeamCoach']) { // data not null
          Coach.validateJSON(data['AwayTeamCoach']);
        }
        if (data['Bookings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Bookings'])) {
                throw new Error("Expected the field `Bookings` to be an array in the JSON data but got " + data['Bookings']);
            }
            // validate the optional field `Bookings` (array)
            for (const item of data['Bookings']) {
                Booking.validateJSON(item);
            };
        }
        // validate the optional field `FourthReferee`
        if (data['FourthReferee']) { // data not null
          Referee.validateJSON(data['FourthReferee']);
        }
        // validate the optional field `Game`
        if (data['Game']) { // data not null
          Game.validateJSON(data['Game']);
        }
        if (data['Goals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Goals'])) {
                throw new Error("Expected the field `Goals` to be an array in the JSON data but got " + data['Goals']);
            }
            // validate the optional field `Goals` (array)
            for (const item of data['Goals']) {
                Goal.validateJSON(item);
            };
        }
        // validate the optional field `HomeTeamCoach`
        if (data['HomeTeamCoach']) { // data not null
          Coach.validateJSON(data['HomeTeamCoach']);
        }
        if (data['Lineups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Lineups'])) {
                throw new Error("Expected the field `Lineups` to be an array in the JSON data but got " + data['Lineups']);
            }
            // validate the optional field `Lineups` (array)
            for (const item of data['Lineups']) {
                Lineup.validateJSON(item);
            };
        }
        // validate the optional field `MainReferee`
        if (data['MainReferee']) { // data not null
          Referee.validateJSON(data['MainReferee']);
        }
        if (data['PenaltyShootouts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PenaltyShootouts'])) {
                throw new Error("Expected the field `PenaltyShootouts` to be an array in the JSON data but got " + data['PenaltyShootouts']);
            }
            // validate the optional field `PenaltyShootouts` (array)
            for (const item of data['PenaltyShootouts']) {
                PenaltyShootout.validateJSON(item);
            };
        }
        if (data['PlayerGames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PlayerGames'])) {
                throw new Error("Expected the field `PlayerGames` to be an array in the JSON data but got " + data['PlayerGames']);
            }
            // validate the optional field `PlayerGames` (array)
            for (const item of data['PlayerGames']) {
                PlayerGame.validateJSON(item);
            };
        }
        if (data['TeamGames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TeamGames'])) {
                throw new Error("Expected the field `TeamGames` to be an array in the JSON data but got " + data['TeamGames']);
            }
            // validate the optional field `TeamGames` (array)
            for (const item of data['TeamGames']) {
                TeamGame.validateJSON(item);
            };
        }
        // validate the optional field `VideoAssistantReferee`
        if (data['VideoAssistantReferee']) { // data not null
          Referee.validateJSON(data['VideoAssistantReferee']);
        }

        return true;
    }


}



/**
 * @member {module:model/Referee} AdditionalAssistantReferee1
 */
BoxScore.prototype['AdditionalAssistantReferee1'] = undefined;

/**
 * @member {module:model/Referee} AdditionalAssistantReferee2
 */
BoxScore.prototype['AdditionalAssistantReferee2'] = undefined;

/**
 * @member {module:model/Referee} AssistantReferee1
 */
BoxScore.prototype['AssistantReferee1'] = undefined;

/**
 * @member {module:model/Referee} AssistantReferee2
 */
BoxScore.prototype['AssistantReferee2'] = undefined;

/**
 * @member {module:model/Coach} AwayTeamCoach
 */
BoxScore.prototype['AwayTeamCoach'] = undefined;

/**
 * @member {Array.<module:model/Booking>} Bookings
 */
BoxScore.prototype['Bookings'] = undefined;

/**
 * @member {module:model/Referee} FourthReferee
 */
BoxScore.prototype['FourthReferee'] = undefined;

/**
 * @member {module:model/Game} Game
 */
BoxScore.prototype['Game'] = undefined;

/**
 * @member {Array.<module:model/Goal>} Goals
 */
BoxScore.prototype['Goals'] = undefined;

/**
 * @member {module:model/Coach} HomeTeamCoach
 */
BoxScore.prototype['HomeTeamCoach'] = undefined;

/**
 * @member {Array.<module:model/Lineup>} Lineups
 */
BoxScore.prototype['Lineups'] = undefined;

/**
 * @member {module:model/Referee} MainReferee
 */
BoxScore.prototype['MainReferee'] = undefined;

/**
 * @member {Array.<module:model/PenaltyShootout>} PenaltyShootouts
 */
BoxScore.prototype['PenaltyShootouts'] = undefined;

/**
 * @member {Array.<module:model/PlayerGame>} PlayerGames
 */
BoxScore.prototype['PlayerGames'] = undefined;

/**
 * @member {Array.<module:model/TeamGame>} TeamGames
 */
BoxScore.prototype['TeamGames'] = undefined;

/**
 * @member {module:model/Referee} VideoAssistantReferee
 */
BoxScore.prototype['VideoAssistantReferee'] = undefined;






export default BoxScore;

