/**
 * Soccer v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Area from '../model/Area';
import BoxScore from '../model/BoxScore';
import Competition from '../model/Competition';
import CompetitionDetail from '../model/CompetitionDetail';
import DfsSlate from '../model/DfsSlate';
import Game from '../model/Game';
import Membership from '../model/Membership';
import Player from '../model/Player';
import PlayerGame from '../model/PlayerGame';
import PlayerSeason from '../model/PlayerSeason';
import SeasonTeam from '../model/SeasonTeam';
import Standing from '../model/Standing';
import Team from '../model/Team';
import TeamGame from '../model/TeamGame';
import TeamSeason from '../model/TeamSeason';
import Venue from '../model/Venue';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the areasCountries operation.
     * @callback module:api/DefaultApi~areasCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Area>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Areas (Countries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~areasCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Area>}
     */
    areasCountries(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling areasCountries");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Area];
      return this.apiClient.callApi(
        '/{format}/Areas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScore operation.
     * @callback module:api/DefaultApi~boxScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoxScore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Score
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} gameid The GameID of a Soccer game.  GameIDs can be found in the Games API.  Valid entries are <code>702</code>, <code>1274</code>, etc.
     * @param {module:api/DefaultApi~boxScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoxScore}
     */
    boxScore(format, gameid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScore");
      }
      // verify the required parameter 'gameid' is set
      if (gameid === undefined || gameid === null) {
        throw new Error("Missing the required parameter 'gameid' when calling boxScore");
      }

      let pathParams = {
        'format': format,
        'gameid': gameid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoxScore;
      return this.apiClient.callApi(
        '/{format}/BoxScore/{gameid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresByDate operation.
     * @callback module:api/DefaultApi~boxScoresByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {module:api/DefaultApi~boxScoresByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    boxScoresByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling boxScoresByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScores/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresByDateByCompetition operation.
     * @callback module:api/DefaultApi~boxScoresByDateByCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores by Date by Competition
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competition An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {module:api/DefaultApi~boxScoresByDateByCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    boxScoresByDateByCompetition(format, competition, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresByDateByCompetition");
      }
      // verify the required parameter 'competition' is set
      if (competition === undefined || competition === null) {
        throw new Error("Missing the required parameter 'competition' when calling boxScoresByDateByCompetition");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling boxScoresByDateByCompetition");
      }

      let pathParams = {
        'format': format,
        'competition': competition,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScoresByCompetition/{competition}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresByDateDelta operation.
     * @callback module:api/DefaultApi~boxScoresByDateDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores by Date Delta
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back. Valid entries are: <code>1</code>, <code>2</code> ... <code>all</code>.
     * @param {module:api/DefaultApi~boxScoresByDateDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    boxScoresByDateDelta(format, date, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresByDateDelta");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling boxScoresByDateDelta");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling boxScoresByDateDelta");
      }

      let pathParams = {
        'format': format,
        'date': date,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScoresDelta/{date}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresDeltaByDateByCompetition operation.
     * @callback module:api/DefaultApi~boxScoresDeltaByDateByCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores Delta by Date by Competition
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competition An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back. Valid entries are: <code>1</code>, <code>2</code> ... <code>all</code>.
     * @param {module:api/DefaultApi~boxScoresDeltaByDateByCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    boxScoresDeltaByDateByCompetition(format, competition, date, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresDeltaByDateByCompetition");
      }
      // verify the required parameter 'competition' is set
      if (competition === undefined || competition === null) {
        throw new Error("Missing the required parameter 'competition' when calling boxScoresDeltaByDateByCompetition");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling boxScoresDeltaByDateByCompetition");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling boxScoresDeltaByDateByCompetition");
      }

      let pathParams = {
        'format': format,
        'competition': competition,
        'date': date,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScoresDeltaByCompetition/{competition}/{date}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the competitionFixturesLeagueDetails operation.
     * @callback module:api/DefaultApi~competitionFixturesLeagueDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Competition Fixtures (League Details)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competition An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
     * @param {module:api/DefaultApi~competitionFixturesLeagueDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionDetail}
     */
    competitionFixturesLeagueDetails(format, competition, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling competitionFixturesLeagueDetails");
      }
      // verify the required parameter 'competition' is set
      if (competition === undefined || competition === null) {
        throw new Error("Missing the required parameter 'competition' when calling competitionFixturesLeagueDetails");
      }

      let pathParams = {
        'format': format,
        'competition': competition
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompetitionDetail;
      return this.apiClient.callApi(
        '/{format}/CompetitionDetails/{competition}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the competitionHierarchyLeagueHierarchy operation.
     * @callback module:api/DefaultApi~competitionHierarchyLeagueHierarchyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Area>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Competition Hierarchy (League Hierarchy)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~competitionHierarchyLeagueHierarchyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Area>}
     */
    competitionHierarchyLeagueHierarchy(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling competitionHierarchyLeagueHierarchy");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Area];
      return this.apiClient.callApi(
        '/{format}/CompetitionHierarchy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the competitionsLeagues operation.
     * @callback module:api/DefaultApi~competitionsLeaguesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Competition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Competitions (Leagues)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~competitionsLeaguesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Competition>}
     */
    competitionsLeagues(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling competitionsLeagues");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Competition];
      return this.apiClient.callApi(
        '/{format}/Competitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlatesByDate operation.
     * @callback module:api/DefaultApi~dfsSlatesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dfs Slates By Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2020-02-18</code>.
     * @param {module:api/DefaultApi~dfsSlatesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dfsSlatesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesByDate operation.
     * @callback module:api/DefaultApi~gamesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Games by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {module:api/DefaultApi~gamesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gamesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gamesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling gamesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GamesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsActive operation.
     * @callback module:api/DefaultApi~membershipsActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships (Active)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~membershipsActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/ActiveMemberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsByCompetitionActive operation.
     * @callback module:api/DefaultApi~membershipsByCompetitionActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships by Competition (Active)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competition An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
     * @param {module:api/DefaultApi~membershipsByCompetitionActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsByCompetitionActive(format, competition, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsByCompetitionActive");
      }
      // verify the required parameter 'competition' is set
      if (competition === undefined || competition === null) {
        throw new Error("Missing the required parameter 'competition' when calling membershipsByCompetitionActive");
      }

      let pathParams = {
        'format': format,
        'competition': competition
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/MembershipsByCompetition/{competition}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsByCompetitionHistorical operation.
     * @callback module:api/DefaultApi~membershipsByCompetitionHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships by Competition (Historical)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competition An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
     * @param {module:api/DefaultApi~membershipsByCompetitionHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsByCompetitionHistorical(format, competition, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsByCompetitionHistorical");
      }
      // verify the required parameter 'competition' is set
      if (competition === undefined || competition === null) {
        throw new Error("Missing the required parameter 'competition' when calling membershipsByCompetitionHistorical");
      }

      let pathParams = {
        'format': format,
        'competition': competition
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/HistoricalMembershipsByCompetition/{competition}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsByTeamActive operation.
     * @callback module:api/DefaultApi~membershipsByTeamActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships by Team (Active)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} teamid Unique FantasyData Team ID.  Example:<code>516</code>.
     * @param {module:api/DefaultApi~membershipsByTeamActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsByTeamActive(format, teamid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsByTeamActive");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling membershipsByTeamActive");
      }

      let pathParams = {
        'format': format,
        'teamid': teamid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/MembershipsByTeam/{teamid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsByTeamHistorical operation.
     * @callback module:api/DefaultApi~membershipsByTeamHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships by Team (Historical)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} teamid Unique FantasyData Team ID.  Example:<code>516</code>.
     * @param {module:api/DefaultApi~membershipsByTeamHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsByTeamHistorical(format, teamid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsByTeamHistorical");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling membershipsByTeamHistorical");
      }

      let pathParams = {
        'format': format,
        'teamid': teamid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/HistoricalMembershipsByTeam/{teamid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsHistorical operation.
     * @callback module:api/DefaultApi~membershipsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships (Historical)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~membershipsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsHistorical(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsHistorical");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/HistoricalMemberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsRecentlyChanged operation.
     * @callback module:api/DefaultApi~membershipsRecentlyChangedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships (Recently Changed)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} days The number of days since memberships were updated. For example, if you pass <code>3</code>, you'll receive all memberships that have been updated in the past 3 days. Valid entries are: <code>1</code>, <code>2</code> ... <code>30</code>
     * @param {module:api/DefaultApi~membershipsRecentlyChangedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsRecentlyChanged(format, days, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsRecentlyChanged");
      }
      // verify the required parameter 'days' is set
      if (days === undefined || days === null) {
        throw new Error("Missing the required parameter 'days' when calling membershipsRecentlyChanged");
      }

      let pathParams = {
        'format': format,
        'days': days
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/RecentlyChangedMemberships/{days}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the player operation.
     * @callback module:api/DefaultApi~playerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>90026231</code>.
     * @param {module:api/DefaultApi~playerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    player(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling player");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling player");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/{format}/Player/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByDate operation.
     * @callback module:api/DefaultApi~playerGameStatsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {module:api/DefaultApi~playerGameStatsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameStatsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling playerGameStatsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByPlayer operation.
     * @callback module:api/DefaultApi~playerGameStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>90026231</code>.
     * @param {module:api/DefaultApi~playerGameStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameStatsByPlayer(format, date, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByPlayer");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling playerGameStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerGameStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'date': date,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByPlayer/{date}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStats operation.
     * @callback module:api/DefaultApi~playerSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competition Hierarchy (League Hierarchy).  Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc
     * @param {module:api/DefaultApi~playerSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStats(format, roundid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStats");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling playerSeasonStats");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStats/{roundid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsByPlayer operation.
     * @callback module:api/DefaultApi~playerSeasonStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competition Hierarchy (League Hierarchy).  Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>90026231</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStatsByPlayer(format, roundid, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsByPlayer");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling playerSeasonStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerSeasonStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStatsByPlayer/{roundid}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsByTeam operation.
     * @callback module:api/DefaultApi~playerSeasonStatsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competition Hierarchy (League Hierarchy).  Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc
     * @param {String} team Unique FantasyData Team ID.  Example:<code>516</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStatsByTeam(format, roundid, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsByTeam");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling playerSeasonStatsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playerSeasonStatsByTeam");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStatsByTeam/{roundid}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the players operation.
     * @callback module:api/DefaultApi~playersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    players(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling players");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playersByTeam operation.
     * @callback module:api/DefaultApi~playersByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} teamid Unique FantasyData Team ID.  Example:<code>516</code>.
     * @param {module:api/DefaultApi~playersByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playersByTeam(format, teamid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playersByTeam");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling playersByTeam");
      }

      let pathParams = {
        'format': format,
        'teamid': teamid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/PlayersByTeam/{teamid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedule operation.
     * @callback module:api/DefaultApi~scheduleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competition Hierarchy (League Hierarchy).  Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc
     * @param {module:api/DefaultApi~scheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    schedule(format, roundid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedule");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling schedule");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/Schedule/{roundid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonTeams operation.
     * @callback module:api/DefaultApi~seasonTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SeasonTeam>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Teams
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} seasonid Unique FantasyData Season ID. SeasonIDs can be found in the Competition Hierarchy (League Hierarchy).  Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc
     * @param {module:api/DefaultApi~seasonTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SeasonTeam>}
     */
    seasonTeams(format, seasonid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonTeams");
      }
      // verify the required parameter 'seasonid' is set
      if (seasonid === undefined || seasonid === null) {
        throw new Error("Missing the required parameter 'seasonid' when calling seasonTeams");
      }

      let pathParams = {
        'format': format,
        'seasonid': seasonid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SeasonTeam];
      return this.apiClient.callApi(
        '/{format}/SeasonTeams/{seasonid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the standings operation.
     * @callback module:api/DefaultApi~standingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Standing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Standings
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competition Hierarchy (League Hierarchy).  Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc
     * @param {module:api/DefaultApi~standingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Standing>}
     */
    standings(format, roundid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling standings");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling standings");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Standing];
      return this.apiClient.callApi(
        '/{format}/Standings/{roundid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameStatsByDate operation.
     * @callback module:api/DefaultApi~teamGameStatsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Stats by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {module:api/DefaultApi~teamGameStatsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameStatsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameStatsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling teamGameStatsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStatsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamSeasonStats operation.
     * @callback module:api/DefaultApi~teamSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competition Hierarchy (League Hierarchy).  Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc
     * @param {module:api/DefaultApi~teamSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSeason>}
     */
    teamSeasonStats(format, roundid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamSeasonStats");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling teamSeasonStats");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSeason];
      return this.apiClient.callApi(
        '/{format}/TeamSeasonStats/{roundid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teams operation.
     * @callback module:api/DefaultApi~teamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teams(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teams");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/Teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upcomingDfsSlatesByCompetition operation.
     * @callback module:api/DefaultApi~upcomingDfsSlatesByCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upcoming Dfs Slates By Competition
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competitionId The id of the competition. <br>Examples: <code>3</code>
     * @param {module:api/DefaultApi~upcomingDfsSlatesByCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    upcomingDfsSlatesByCompetition(format, competitionId, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling upcomingDfsSlatesByCompetition");
      }
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling upcomingDfsSlatesByCompetition");
      }

      let pathParams = {
        'format': format,
        'competitionId': competitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/UpcomingDfsSlatesByCompetition/{competitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upcomingScheduleByPlayer operation.
     * @callback module:api/DefaultApi~upcomingScheduleByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upcoming Schedule By Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>90026231</code>.
     * @param {module:api/DefaultApi~upcomingScheduleByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    upcomingScheduleByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling upcomingScheduleByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling upcomingScheduleByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/UpcomingScheduleByPlayer/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the venues operation.
     * @callback module:api/DefaultApi~venuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Venue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Venues
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~venuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Venue>}
     */
    venues(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling venues");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Venue];
      return this.apiClient.callApi(
        '/{format}/Venues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
