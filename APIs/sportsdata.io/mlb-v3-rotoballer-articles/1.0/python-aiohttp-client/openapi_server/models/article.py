# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.player_info import PlayerInfo
from openapi_server import util


class Article(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, article_id: int=None, author: str=None, content: str=None, players: List[PlayerInfo]=None, source: str=None, terms_of_use: str=None, title: str=None, updated: str=None, url: str=None):
        """Article - a model defined in OpenAPI

        :param article_id: The article_id of this Article.
        :param author: The author of this Article.
        :param content: The content of this Article.
        :param players: The players of this Article.
        :param source: The source of this Article.
        :param terms_of_use: The terms_of_use of this Article.
        :param title: The title of this Article.
        :param updated: The updated of this Article.
        :param url: The url of this Article.
        """
        self.openapi_types = {
            'article_id': int,
            'author': str,
            'content': str,
            'players': List[PlayerInfo],
            'source': str,
            'terms_of_use': str,
            'title': str,
            'updated': str,
            'url': str
        }

        self.attribute_map = {
            'article_id': 'ArticleID',
            'author': 'Author',
            'content': 'Content',
            'players': 'Players',
            'source': 'Source',
            'terms_of_use': 'TermsOfUse',
            'title': 'Title',
            'updated': 'Updated',
            'url': 'Url'
        }

        self._article_id = article_id
        self._author = author
        self._content = content
        self._players = players
        self._source = source
        self._terms_of_use = terms_of_use
        self._title = title
        self._updated = updated
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article of this Article.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def article_id(self):
        """Gets the article_id of this Article.


        :return: The article_id of this Article.
        :rtype: int
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this Article.


        :param article_id: The article_id of this Article.
        :type article_id: int
        """

        self._article_id = article_id

    @property
    def author(self):
        """Gets the author of this Article.


        :return: The author of this Article.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Article.


        :param author: The author of this Article.
        :type author: str
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this Article.


        :return: The content of this Article.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Article.


        :param content: The content of this Article.
        :type content: str
        """

        self._content = content

    @property
    def players(self):
        """Gets the players of this Article.


        :return: The players of this Article.
        :rtype: List[PlayerInfo]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this Article.


        :param players: The players of this Article.
        :type players: List[PlayerInfo]
        """

        self._players = players

    @property
    def source(self):
        """Gets the source of this Article.


        :return: The source of this Article.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Article.


        :param source: The source of this Article.
        :type source: str
        """

        self._source = source

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this Article.


        :return: The terms_of_use of this Article.
        :rtype: str
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this Article.


        :param terms_of_use: The terms_of_use of this Article.
        :type terms_of_use: str
        """

        self._terms_of_use = terms_of_use

    @property
    def title(self):
        """Gets the title of this Article.


        :return: The title of this Article.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Article.


        :param title: The title of this Article.
        :type title: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this Article.


        :return: The updated of this Article.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Article.


        :param updated: The updated of this Article.
        :type updated: str
        """

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this Article.


        :return: The url of this Article.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Article.


        :param url: The url of this Article.
        :type url: str
        """

        self._url = url
