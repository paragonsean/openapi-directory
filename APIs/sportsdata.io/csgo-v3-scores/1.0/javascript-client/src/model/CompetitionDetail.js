/**
 * CS:GO v3 Scores
 * CS:GO v3 Scores
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Game from './Game';
import Season from './Season';
import TeamDetail from './TeamDetail';

/**
 * The CompetitionDetail model module.
 * @module model/CompetitionDetail
 * @version 1.0
 */
class CompetitionDetail {
    /**
     * Constructs a new <code>CompetitionDetail</code>.
     * @alias module:model/CompetitionDetail
     */
    constructor() { 
        
        CompetitionDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompetitionDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompetitionDetail} obj Optional instance to populate.
     * @return {module:model/CompetitionDetail} The populated <code>CompetitionDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompetitionDetail();

            if (data.hasOwnProperty('AreaId')) {
                obj['AreaId'] = ApiClient.convertToType(data['AreaId'], 'Number');
            }
            if (data.hasOwnProperty('AreaName')) {
                obj['AreaName'] = ApiClient.convertToType(data['AreaName'], 'String');
            }
            if (data.hasOwnProperty('CompetitionId')) {
                obj['CompetitionId'] = ApiClient.convertToType(data['CompetitionId'], 'Number');
            }
            if (data.hasOwnProperty('CurrentSeason')) {
                obj['CurrentSeason'] = Season.constructFromObject(data['CurrentSeason']);
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('Games')) {
                obj['Games'] = ApiClient.convertToType(data['Games'], [Game]);
            }
            if (data.hasOwnProperty('Gender')) {
                obj['Gender'] = ApiClient.convertToType(data['Gender'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PlayerStatsCoverage')) {
                obj['PlayerStatsCoverage'] = ApiClient.convertToType(data['PlayerStatsCoverage'], 'Boolean');
            }
            if (data.hasOwnProperty('Seasons')) {
                obj['Seasons'] = ApiClient.convertToType(data['Seasons'], [Season]);
            }
            if (data.hasOwnProperty('Teams')) {
                obj['Teams'] = ApiClient.convertToType(data['Teams'], [TeamDetail]);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompetitionDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompetitionDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AreaName'] && !(typeof data['AreaName'] === 'string' || data['AreaName'] instanceof String)) {
            throw new Error("Expected the field `AreaName` to be a primitive type in the JSON string but got " + data['AreaName']);
        }
        // validate the optional field `CurrentSeason`
        if (data['CurrentSeason']) { // data not null
          Season.validateJSON(data['CurrentSeason']);
        }
        // ensure the json data is a string
        if (data['Format'] && !(typeof data['Format'] === 'string' || data['Format'] instanceof String)) {
            throw new Error("Expected the field `Format` to be a primitive type in the JSON string but got " + data['Format']);
        }
        if (data['Games']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Games'])) {
                throw new Error("Expected the field `Games` to be an array in the JSON data but got " + data['Games']);
            }
            // validate the optional field `Games` (array)
            for (const item of data['Games']) {
                Game.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Gender'] && !(typeof data['Gender'] === 'string' || data['Gender'] instanceof String)) {
            throw new Error("Expected the field `Gender` to be a primitive type in the JSON string but got " + data['Gender']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['Seasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Seasons'])) {
                throw new Error("Expected the field `Seasons` to be an array in the JSON data but got " + data['Seasons']);
            }
            // validate the optional field `Seasons` (array)
            for (const item of data['Seasons']) {
                Season.validateJSON(item);
            };
        }
        if (data['Teams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Teams'])) {
                throw new Error("Expected the field `Teams` to be an array in the JSON data but got " + data['Teams']);
            }
            // validate the optional field `Teams` (array)
            for (const item of data['Teams']) {
                TeamDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * @member {Number} AreaId
 */
CompetitionDetail.prototype['AreaId'] = undefined;

/**
 * @member {String} AreaName
 */
CompetitionDetail.prototype['AreaName'] = undefined;

/**
 * @member {Number} CompetitionId
 */
CompetitionDetail.prototype['CompetitionId'] = undefined;

/**
 * @member {module:model/Season} CurrentSeason
 */
CompetitionDetail.prototype['CurrentSeason'] = undefined;

/**
 * @member {String} Format
 */
CompetitionDetail.prototype['Format'] = undefined;

/**
 * @member {Array.<module:model/Game>} Games
 */
CompetitionDetail.prototype['Games'] = undefined;

/**
 * @member {String} Gender
 */
CompetitionDetail.prototype['Gender'] = undefined;

/**
 * @member {String} Name
 */
CompetitionDetail.prototype['Name'] = undefined;

/**
 * @member {Boolean} PlayerStatsCoverage
 */
CompetitionDetail.prototype['PlayerStatsCoverage'] = undefined;

/**
 * @member {Array.<module:model/Season>} Seasons
 */
CompetitionDetail.prototype['Seasons'] = undefined;

/**
 * @member {Array.<module:model/TeamDetail>} Teams
 */
CompetitionDetail.prototype['Teams'] = undefined;

/**
 * @member {String} Type
 */
CompetitionDetail.prototype['Type'] = undefined;






export default CompetitionDetail;

