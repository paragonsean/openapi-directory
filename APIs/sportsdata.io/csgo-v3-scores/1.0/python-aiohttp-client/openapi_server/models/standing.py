# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Standing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, games: int=None, group: str=None, losses: int=None, name: str=None, order: int=None, points: int=None, round_id: int=None, score_against: int=None, score_difference: int=None, score_for: int=None, standing_id: int=None, team_id: int=None, wins: int=None):
        """Standing - a model defined in OpenAPI

        :param games: The games of this Standing.
        :param group: The group of this Standing.
        :param losses: The losses of this Standing.
        :param name: The name of this Standing.
        :param order: The order of this Standing.
        :param points: The points of this Standing.
        :param round_id: The round_id of this Standing.
        :param score_against: The score_against of this Standing.
        :param score_difference: The score_difference of this Standing.
        :param score_for: The score_for of this Standing.
        :param standing_id: The standing_id of this Standing.
        :param team_id: The team_id of this Standing.
        :param wins: The wins of this Standing.
        """
        self.openapi_types = {
            'games': int,
            'group': str,
            'losses': int,
            'name': str,
            'order': int,
            'points': int,
            'round_id': int,
            'score_against': int,
            'score_difference': int,
            'score_for': int,
            'standing_id': int,
            'team_id': int,
            'wins': int
        }

        self.attribute_map = {
            'games': 'Games',
            'group': 'Group',
            'losses': 'Losses',
            'name': 'Name',
            'order': 'Order',
            'points': 'Points',
            'round_id': 'RoundId',
            'score_against': 'ScoreAgainst',
            'score_difference': 'ScoreDifference',
            'score_for': 'ScoreFor',
            'standing_id': 'StandingId',
            'team_id': 'TeamId',
            'wins': 'Wins'
        }

        self._games = games
        self._group = group
        self._losses = losses
        self._name = name
        self._order = order
        self._points = points
        self._round_id = round_id
        self._score_against = score_against
        self._score_difference = score_difference
        self._score_for = score_for
        self._standing_id = standing_id
        self._team_id = team_id
        self._wins = wins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Standing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Standing of this Standing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def games(self):
        """Gets the games of this Standing.


        :return: The games of this Standing.
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this Standing.


        :param games: The games of this Standing.
        :type games: int
        """

        self._games = games

    @property
    def group(self):
        """Gets the group of this Standing.


        :return: The group of this Standing.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Standing.


        :param group: The group of this Standing.
        :type group: str
        """

        self._group = group

    @property
    def losses(self):
        """Gets the losses of this Standing.


        :return: The losses of this Standing.
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this Standing.


        :param losses: The losses of this Standing.
        :type losses: int
        """

        self._losses = losses

    @property
    def name(self):
        """Gets the name of this Standing.


        :return: The name of this Standing.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Standing.


        :param name: The name of this Standing.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this Standing.


        :return: The order of this Standing.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Standing.


        :param order: The order of this Standing.
        :type order: int
        """

        self._order = order

    @property
    def points(self):
        """Gets the points of this Standing.


        :return: The points of this Standing.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Standing.


        :param points: The points of this Standing.
        :type points: int
        """

        self._points = points

    @property
    def round_id(self):
        """Gets the round_id of this Standing.


        :return: The round_id of this Standing.
        :rtype: int
        """
        return self._round_id

    @round_id.setter
    def round_id(self, round_id):
        """Sets the round_id of this Standing.


        :param round_id: The round_id of this Standing.
        :type round_id: int
        """

        self._round_id = round_id

    @property
    def score_against(self):
        """Gets the score_against of this Standing.


        :return: The score_against of this Standing.
        :rtype: int
        """
        return self._score_against

    @score_against.setter
    def score_against(self, score_against):
        """Sets the score_against of this Standing.


        :param score_against: The score_against of this Standing.
        :type score_against: int
        """

        self._score_against = score_against

    @property
    def score_difference(self):
        """Gets the score_difference of this Standing.


        :return: The score_difference of this Standing.
        :rtype: int
        """
        return self._score_difference

    @score_difference.setter
    def score_difference(self, score_difference):
        """Sets the score_difference of this Standing.


        :param score_difference: The score_difference of this Standing.
        :type score_difference: int
        """

        self._score_difference = score_difference

    @property
    def score_for(self):
        """Gets the score_for of this Standing.


        :return: The score_for of this Standing.
        :rtype: int
        """
        return self._score_for

    @score_for.setter
    def score_for(self, score_for):
        """Sets the score_for of this Standing.


        :param score_for: The score_for of this Standing.
        :type score_for: int
        """

        self._score_for = score_for

    @property
    def standing_id(self):
        """Gets the standing_id of this Standing.


        :return: The standing_id of this Standing.
        :rtype: int
        """
        return self._standing_id

    @standing_id.setter
    def standing_id(self, standing_id):
        """Sets the standing_id of this Standing.


        :param standing_id: The standing_id of this Standing.
        :type standing_id: int
        """

        self._standing_id = standing_id

    @property
    def team_id(self):
        """Gets the team_id of this Standing.


        :return: The team_id of this Standing.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Standing.


        :param team_id: The team_id of this Standing.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def wins(self):
        """Gets the wins of this Standing.


        :return: The wins of this Standing.
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this Standing.


        :param wins: The wins of this Standing.
        :type wins: int
        """

        self._wins = wins
