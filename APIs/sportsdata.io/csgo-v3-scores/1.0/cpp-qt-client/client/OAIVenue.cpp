/**
 * CS:GO v3 Scores
 * CS:GO v3 Scores
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVenue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVenue::OAIVenue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVenue::OAIVenue() {
    this->initializeModel();
}

OAIVenue::~OAIVenue() {}

void OAIVenue::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_geo_lat_isSet = false;
    m_geo_lat_isValid = false;

    m_geo_long_isSet = false;
    m_geo_long_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nickname1_isSet = false;
    m_nickname1_isValid = false;

    m_nickname2_isSet = false;
    m_nickname2_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;

    m_opened_isSet = false;
    m_opened_isValid = false;

    m_venue_id_isSet = false;
    m_venue_id_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIVenue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVenue::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("Capacity")]);
    m_capacity_isSet = !json[QString("Capacity")].isNull() && m_capacity_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_geo_lat_isValid = ::OpenAPI::fromJsonValue(m_geo_lat, json[QString("GeoLat")]);
    m_geo_lat_isSet = !json[QString("GeoLat")].isNull() && m_geo_lat_isValid;

    m_geo_long_isValid = ::OpenAPI::fromJsonValue(m_geo_long, json[QString("GeoLong")]);
    m_geo_long_isSet = !json[QString("GeoLong")].isNull() && m_geo_long_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_nickname1_isValid = ::OpenAPI::fromJsonValue(m_nickname1, json[QString("Nickname1")]);
    m_nickname1_isSet = !json[QString("Nickname1")].isNull() && m_nickname1_isValid;

    m_nickname2_isValid = ::OpenAPI::fromJsonValue(m_nickname2, json[QString("Nickname2")]);
    m_nickname2_isSet = !json[QString("Nickname2")].isNull() && m_nickname2_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("Open")]);
    m_open_isSet = !json[QString("Open")].isNull() && m_open_isValid;

    m_opened_isValid = ::OpenAPI::fromJsonValue(m_opened, json[QString("Opened")]);
    m_opened_isSet = !json[QString("Opened")].isNull() && m_opened_isValid;

    m_venue_id_isValid = ::OpenAPI::fromJsonValue(m_venue_id, json[QString("VenueId")]);
    m_venue_id_isSet = !json[QString("VenueId")].isNull() && m_venue_id_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("Zip")]);
    m_zip_isSet = !json[QString("Zip")].isNull() && m_zip_isValid;
}

QString OAIVenue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVenue::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_capacity_isSet) {
        obj.insert(QString("Capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_geo_lat_isSet) {
        obj.insert(QString("GeoLat"), ::OpenAPI::toJsonValue(m_geo_lat));
    }
    if (m_geo_long_isSet) {
        obj.insert(QString("GeoLong"), ::OpenAPI::toJsonValue(m_geo_long));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nickname1_isSet) {
        obj.insert(QString("Nickname1"), ::OpenAPI::toJsonValue(m_nickname1));
    }
    if (m_nickname2_isSet) {
        obj.insert(QString("Nickname2"), ::OpenAPI::toJsonValue(m_nickname2));
    }
    if (m_open_isSet) {
        obj.insert(QString("Open"), ::OpenAPI::toJsonValue(m_open));
    }
    if (m_opened_isSet) {
        obj.insert(QString("Opened"), ::OpenAPI::toJsonValue(m_opened));
    }
    if (m_venue_id_isSet) {
        obj.insert(QString("VenueId"), ::OpenAPI::toJsonValue(m_venue_id));
    }
    if (m_zip_isSet) {
        obj.insert(QString("Zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIVenue::getAddress() const {
    return m_address;
}
void OAIVenue::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIVenue::is_address_Set() const{
    return m_address_isSet;
}

bool OAIVenue::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIVenue::getCapacity() const {
    return m_capacity;
}
void OAIVenue::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIVenue::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIVenue::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIVenue::getCity() const {
    return m_city;
}
void OAIVenue::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIVenue::is_city_Set() const{
    return m_city_isSet;
}

bool OAIVenue::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIVenue::getCountry() const {
    return m_country;
}
void OAIVenue::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIVenue::is_country_Set() const{
    return m_country_isSet;
}

bool OAIVenue::is_country_Valid() const{
    return m_country_isValid;
}

double OAIVenue::getGeoLat() const {
    return m_geo_lat;
}
void OAIVenue::setGeoLat(const double &geo_lat) {
    m_geo_lat = geo_lat;
    m_geo_lat_isSet = true;
}

bool OAIVenue::is_geo_lat_Set() const{
    return m_geo_lat_isSet;
}

bool OAIVenue::is_geo_lat_Valid() const{
    return m_geo_lat_isValid;
}

double OAIVenue::getGeoLong() const {
    return m_geo_long;
}
void OAIVenue::setGeoLong(const double &geo_long) {
    m_geo_long = geo_long;
    m_geo_long_isSet = true;
}

bool OAIVenue::is_geo_long_Set() const{
    return m_geo_long_isSet;
}

bool OAIVenue::is_geo_long_Valid() const{
    return m_geo_long_isValid;
}

QString OAIVenue::getName() const {
    return m_name;
}
void OAIVenue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVenue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVenue::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVenue::getNickname1() const {
    return m_nickname1;
}
void OAIVenue::setNickname1(const QString &nickname1) {
    m_nickname1 = nickname1;
    m_nickname1_isSet = true;
}

bool OAIVenue::is_nickname1_Set() const{
    return m_nickname1_isSet;
}

bool OAIVenue::is_nickname1_Valid() const{
    return m_nickname1_isValid;
}

QString OAIVenue::getNickname2() const {
    return m_nickname2;
}
void OAIVenue::setNickname2(const QString &nickname2) {
    m_nickname2 = nickname2;
    m_nickname2_isSet = true;
}

bool OAIVenue::is_nickname2_Set() const{
    return m_nickname2_isSet;
}

bool OAIVenue::is_nickname2_Valid() const{
    return m_nickname2_isValid;
}

bool OAIVenue::isOpen() const {
    return m_open;
}
void OAIVenue::setOpen(const bool &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAIVenue::is_open_Set() const{
    return m_open_isSet;
}

bool OAIVenue::is_open_Valid() const{
    return m_open_isValid;
}

qint32 OAIVenue::getOpened() const {
    return m_opened;
}
void OAIVenue::setOpened(const qint32 &opened) {
    m_opened = opened;
    m_opened_isSet = true;
}

bool OAIVenue::is_opened_Set() const{
    return m_opened_isSet;
}

bool OAIVenue::is_opened_Valid() const{
    return m_opened_isValid;
}

qint32 OAIVenue::getVenueId() const {
    return m_venue_id;
}
void OAIVenue::setVenueId(const qint32 &venue_id) {
    m_venue_id = venue_id;
    m_venue_id_isSet = true;
}

bool OAIVenue::is_venue_id_Set() const{
    return m_venue_id_isSet;
}

bool OAIVenue::is_venue_id_Valid() const{
    return m_venue_id_isValid;
}

QString OAIVenue::getZip() const {
    return m_zip;
}
void OAIVenue::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIVenue::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIVenue::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIVenue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opened_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVenue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
