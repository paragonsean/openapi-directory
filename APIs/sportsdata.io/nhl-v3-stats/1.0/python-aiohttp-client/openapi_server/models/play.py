# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Play(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, away_team_score: int=None, category: str=None, clock_minutes: int=None, clock_seconds: int=None, created: str=None, description: str=None, first_assisted_by_player_id: int=None, home_team_score: int=None, opponent: str=None, opponent_id: int=None, opposing_player_id: int=None, period_id: int=None, period_name: str=None, play_id: int=None, player_id: int=None, power_play_team: str=None, power_play_team_id: int=None, second_assisted_by_player_id: int=None, sequence: int=None, team: str=None, team_id: int=None, type: str=None, updated: str=None):
        """Play - a model defined in OpenAPI

        :param away_team_score: The away_team_score of this Play.
        :param category: The category of this Play.
        :param clock_minutes: The clock_minutes of this Play.
        :param clock_seconds: The clock_seconds of this Play.
        :param created: The created of this Play.
        :param description: The description of this Play.
        :param first_assisted_by_player_id: The first_assisted_by_player_id of this Play.
        :param home_team_score: The home_team_score of this Play.
        :param opponent: The opponent of this Play.
        :param opponent_id: The opponent_id of this Play.
        :param opposing_player_id: The opposing_player_id of this Play.
        :param period_id: The period_id of this Play.
        :param period_name: The period_name of this Play.
        :param play_id: The play_id of this Play.
        :param player_id: The player_id of this Play.
        :param power_play_team: The power_play_team of this Play.
        :param power_play_team_id: The power_play_team_id of this Play.
        :param second_assisted_by_player_id: The second_assisted_by_player_id of this Play.
        :param sequence: The sequence of this Play.
        :param team: The team of this Play.
        :param team_id: The team_id of this Play.
        :param type: The type of this Play.
        :param updated: The updated of this Play.
        """
        self.openapi_types = {
            'away_team_score': int,
            'category': str,
            'clock_minutes': int,
            'clock_seconds': int,
            'created': str,
            'description': str,
            'first_assisted_by_player_id': int,
            'home_team_score': int,
            'opponent': str,
            'opponent_id': int,
            'opposing_player_id': int,
            'period_id': int,
            'period_name': str,
            'play_id': int,
            'player_id': int,
            'power_play_team': str,
            'power_play_team_id': int,
            'second_assisted_by_player_id': int,
            'sequence': int,
            'team': str,
            'team_id': int,
            'type': str,
            'updated': str
        }

        self.attribute_map = {
            'away_team_score': 'AwayTeamScore',
            'category': 'Category',
            'clock_minutes': 'ClockMinutes',
            'clock_seconds': 'ClockSeconds',
            'created': 'Created',
            'description': 'Description',
            'first_assisted_by_player_id': 'FirstAssistedByPlayerID',
            'home_team_score': 'HomeTeamScore',
            'opponent': 'Opponent',
            'opponent_id': 'OpponentID',
            'opposing_player_id': 'OpposingPlayerID',
            'period_id': 'PeriodID',
            'period_name': 'PeriodName',
            'play_id': 'PlayID',
            'player_id': 'PlayerID',
            'power_play_team': 'PowerPlayTeam',
            'power_play_team_id': 'PowerPlayTeamID',
            'second_assisted_by_player_id': 'SecondAssistedByPlayerID',
            'sequence': 'Sequence',
            'team': 'Team',
            'team_id': 'TeamID',
            'type': 'Type',
            'updated': 'Updated'
        }

        self._away_team_score = away_team_score
        self._category = category
        self._clock_minutes = clock_minutes
        self._clock_seconds = clock_seconds
        self._created = created
        self._description = description
        self._first_assisted_by_player_id = first_assisted_by_player_id
        self._home_team_score = home_team_score
        self._opponent = opponent
        self._opponent_id = opponent_id
        self._opposing_player_id = opposing_player_id
        self._period_id = period_id
        self._period_name = period_name
        self._play_id = play_id
        self._player_id = player_id
        self._power_play_team = power_play_team
        self._power_play_team_id = power_play_team_id
        self._second_assisted_by_player_id = second_assisted_by_player_id
        self._sequence = sequence
        self._team = team
        self._team_id = team_id
        self._type = type
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Play':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Play of this Play.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def away_team_score(self):
        """Gets the away_team_score of this Play.


        :return: The away_team_score of this Play.
        :rtype: int
        """
        return self._away_team_score

    @away_team_score.setter
    def away_team_score(self, away_team_score):
        """Sets the away_team_score of this Play.


        :param away_team_score: The away_team_score of this Play.
        :type away_team_score: int
        """

        self._away_team_score = away_team_score

    @property
    def category(self):
        """Gets the category of this Play.


        :return: The category of this Play.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Play.


        :param category: The category of this Play.
        :type category: str
        """

        self._category = category

    @property
    def clock_minutes(self):
        """Gets the clock_minutes of this Play.


        :return: The clock_minutes of this Play.
        :rtype: int
        """
        return self._clock_minutes

    @clock_minutes.setter
    def clock_minutes(self, clock_minutes):
        """Sets the clock_minutes of this Play.


        :param clock_minutes: The clock_minutes of this Play.
        :type clock_minutes: int
        """

        self._clock_minutes = clock_minutes

    @property
    def clock_seconds(self):
        """Gets the clock_seconds of this Play.


        :return: The clock_seconds of this Play.
        :rtype: int
        """
        return self._clock_seconds

    @clock_seconds.setter
    def clock_seconds(self, clock_seconds):
        """Sets the clock_seconds of this Play.


        :param clock_seconds: The clock_seconds of this Play.
        :type clock_seconds: int
        """

        self._clock_seconds = clock_seconds

    @property
    def created(self):
        """Gets the created of this Play.


        :return: The created of this Play.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Play.


        :param created: The created of this Play.
        :type created: str
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Play.


        :return: The description of this Play.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Play.


        :param description: The description of this Play.
        :type description: str
        """

        self._description = description

    @property
    def first_assisted_by_player_id(self):
        """Gets the first_assisted_by_player_id of this Play.


        :return: The first_assisted_by_player_id of this Play.
        :rtype: int
        """
        return self._first_assisted_by_player_id

    @first_assisted_by_player_id.setter
    def first_assisted_by_player_id(self, first_assisted_by_player_id):
        """Sets the first_assisted_by_player_id of this Play.


        :param first_assisted_by_player_id: The first_assisted_by_player_id of this Play.
        :type first_assisted_by_player_id: int
        """

        self._first_assisted_by_player_id = first_assisted_by_player_id

    @property
    def home_team_score(self):
        """Gets the home_team_score of this Play.


        :return: The home_team_score of this Play.
        :rtype: int
        """
        return self._home_team_score

    @home_team_score.setter
    def home_team_score(self, home_team_score):
        """Sets the home_team_score of this Play.


        :param home_team_score: The home_team_score of this Play.
        :type home_team_score: int
        """

        self._home_team_score = home_team_score

    @property
    def opponent(self):
        """Gets the opponent of this Play.


        :return: The opponent of this Play.
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this Play.


        :param opponent: The opponent of this Play.
        :type opponent: str
        """

        self._opponent = opponent

    @property
    def opponent_id(self):
        """Gets the opponent_id of this Play.


        :return: The opponent_id of this Play.
        :rtype: int
        """
        return self._opponent_id

    @opponent_id.setter
    def opponent_id(self, opponent_id):
        """Sets the opponent_id of this Play.


        :param opponent_id: The opponent_id of this Play.
        :type opponent_id: int
        """

        self._opponent_id = opponent_id

    @property
    def opposing_player_id(self):
        """Gets the opposing_player_id of this Play.


        :return: The opposing_player_id of this Play.
        :rtype: int
        """
        return self._opposing_player_id

    @opposing_player_id.setter
    def opposing_player_id(self, opposing_player_id):
        """Sets the opposing_player_id of this Play.


        :param opposing_player_id: The opposing_player_id of this Play.
        :type opposing_player_id: int
        """

        self._opposing_player_id = opposing_player_id

    @property
    def period_id(self):
        """Gets the period_id of this Play.


        :return: The period_id of this Play.
        :rtype: int
        """
        return self._period_id

    @period_id.setter
    def period_id(self, period_id):
        """Sets the period_id of this Play.


        :param period_id: The period_id of this Play.
        :type period_id: int
        """

        self._period_id = period_id

    @property
    def period_name(self):
        """Gets the period_name of this Play.


        :return: The period_name of this Play.
        :rtype: str
        """
        return self._period_name

    @period_name.setter
    def period_name(self, period_name):
        """Sets the period_name of this Play.


        :param period_name: The period_name of this Play.
        :type period_name: str
        """

        self._period_name = period_name

    @property
    def play_id(self):
        """Gets the play_id of this Play.


        :return: The play_id of this Play.
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this Play.


        :param play_id: The play_id of this Play.
        :type play_id: int
        """

        self._play_id = play_id

    @property
    def player_id(self):
        """Gets the player_id of this Play.


        :return: The player_id of this Play.
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Play.


        :param player_id: The player_id of this Play.
        :type player_id: int
        """

        self._player_id = player_id

    @property
    def power_play_team(self):
        """Gets the power_play_team of this Play.


        :return: The power_play_team of this Play.
        :rtype: str
        """
        return self._power_play_team

    @power_play_team.setter
    def power_play_team(self, power_play_team):
        """Sets the power_play_team of this Play.


        :param power_play_team: The power_play_team of this Play.
        :type power_play_team: str
        """

        self._power_play_team = power_play_team

    @property
    def power_play_team_id(self):
        """Gets the power_play_team_id of this Play.


        :return: The power_play_team_id of this Play.
        :rtype: int
        """
        return self._power_play_team_id

    @power_play_team_id.setter
    def power_play_team_id(self, power_play_team_id):
        """Sets the power_play_team_id of this Play.


        :param power_play_team_id: The power_play_team_id of this Play.
        :type power_play_team_id: int
        """

        self._power_play_team_id = power_play_team_id

    @property
    def second_assisted_by_player_id(self):
        """Gets the second_assisted_by_player_id of this Play.


        :return: The second_assisted_by_player_id of this Play.
        :rtype: int
        """
        return self._second_assisted_by_player_id

    @second_assisted_by_player_id.setter
    def second_assisted_by_player_id(self, second_assisted_by_player_id):
        """Sets the second_assisted_by_player_id of this Play.


        :param second_assisted_by_player_id: The second_assisted_by_player_id of this Play.
        :type second_assisted_by_player_id: int
        """

        self._second_assisted_by_player_id = second_assisted_by_player_id

    @property
    def sequence(self):
        """Gets the sequence of this Play.


        :return: The sequence of this Play.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Play.


        :param sequence: The sequence of this Play.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def team(self):
        """Gets the team of this Play.


        :return: The team of this Play.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Play.


        :param team: The team of this Play.
        :type team: str
        """

        self._team = team

    @property
    def team_id(self):
        """Gets the team_id of this Play.


        :return: The team_id of this Play.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Play.


        :param team_id: The team_id of this Play.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def type(self):
        """Gets the type of this Play.


        :return: The type of this Play.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Play.


        :param type: The type of this Play.
        :type type: str
        """

        self._type = type

    @property
    def updated(self):
        """Gets the updated of this Play.


        :return: The updated of this Play.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Play.


        :param updated: The updated of this Play.
        :type updated: str
        """

        self._updated = updated
