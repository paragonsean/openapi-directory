# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoringPlay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_by_team_id: int=None, assisted_by_player_id1: int=None, assisted_by_player_id2: int=None, away_team_score: int=None, empty_net: bool=None, home_team_score: int=None, period_id: int=None, power_play: bool=None, scored_by_player_id: int=None, scored_by_team_id: int=None, scoring_play_id: int=None, sequence: int=None, short_handed: bool=None, time_remaining_minutes: int=None, time_remaining_seconds: int=None):
        """ScoringPlay - a model defined in OpenAPI

        :param allowed_by_team_id: The allowed_by_team_id of this ScoringPlay.
        :param assisted_by_player_id1: The assisted_by_player_id1 of this ScoringPlay.
        :param assisted_by_player_id2: The assisted_by_player_id2 of this ScoringPlay.
        :param away_team_score: The away_team_score of this ScoringPlay.
        :param empty_net: The empty_net of this ScoringPlay.
        :param home_team_score: The home_team_score of this ScoringPlay.
        :param period_id: The period_id of this ScoringPlay.
        :param power_play: The power_play of this ScoringPlay.
        :param scored_by_player_id: The scored_by_player_id of this ScoringPlay.
        :param scored_by_team_id: The scored_by_team_id of this ScoringPlay.
        :param scoring_play_id: The scoring_play_id of this ScoringPlay.
        :param sequence: The sequence of this ScoringPlay.
        :param short_handed: The short_handed of this ScoringPlay.
        :param time_remaining_minutes: The time_remaining_minutes of this ScoringPlay.
        :param time_remaining_seconds: The time_remaining_seconds of this ScoringPlay.
        """
        self.openapi_types = {
            'allowed_by_team_id': int,
            'assisted_by_player_id1': int,
            'assisted_by_player_id2': int,
            'away_team_score': int,
            'empty_net': bool,
            'home_team_score': int,
            'period_id': int,
            'power_play': bool,
            'scored_by_player_id': int,
            'scored_by_team_id': int,
            'scoring_play_id': int,
            'sequence': int,
            'short_handed': bool,
            'time_remaining_minutes': int,
            'time_remaining_seconds': int
        }

        self.attribute_map = {
            'allowed_by_team_id': 'AllowedByTeamID',
            'assisted_by_player_id1': 'AssistedByPlayerID1',
            'assisted_by_player_id2': 'AssistedByPlayerID2',
            'away_team_score': 'AwayTeamScore',
            'empty_net': 'EmptyNet',
            'home_team_score': 'HomeTeamScore',
            'period_id': 'PeriodID',
            'power_play': 'PowerPlay',
            'scored_by_player_id': 'ScoredByPlayerID',
            'scored_by_team_id': 'ScoredByTeamID',
            'scoring_play_id': 'ScoringPlayID',
            'sequence': 'Sequence',
            'short_handed': 'ShortHanded',
            'time_remaining_minutes': 'TimeRemainingMinutes',
            'time_remaining_seconds': 'TimeRemainingSeconds'
        }

        self._allowed_by_team_id = allowed_by_team_id
        self._assisted_by_player_id1 = assisted_by_player_id1
        self._assisted_by_player_id2 = assisted_by_player_id2
        self._away_team_score = away_team_score
        self._empty_net = empty_net
        self._home_team_score = home_team_score
        self._period_id = period_id
        self._power_play = power_play
        self._scored_by_player_id = scored_by_player_id
        self._scored_by_team_id = scored_by_team_id
        self._scoring_play_id = scoring_play_id
        self._sequence = sequence
        self._short_handed = short_handed
        self._time_remaining_minutes = time_remaining_minutes
        self._time_remaining_seconds = time_remaining_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoringPlay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoringPlay of this ScoringPlay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_by_team_id(self):
        """Gets the allowed_by_team_id of this ScoringPlay.


        :return: The allowed_by_team_id of this ScoringPlay.
        :rtype: int
        """
        return self._allowed_by_team_id

    @allowed_by_team_id.setter
    def allowed_by_team_id(self, allowed_by_team_id):
        """Sets the allowed_by_team_id of this ScoringPlay.


        :param allowed_by_team_id: The allowed_by_team_id of this ScoringPlay.
        :type allowed_by_team_id: int
        """

        self._allowed_by_team_id = allowed_by_team_id

    @property
    def assisted_by_player_id1(self):
        """Gets the assisted_by_player_id1 of this ScoringPlay.


        :return: The assisted_by_player_id1 of this ScoringPlay.
        :rtype: int
        """
        return self._assisted_by_player_id1

    @assisted_by_player_id1.setter
    def assisted_by_player_id1(self, assisted_by_player_id1):
        """Sets the assisted_by_player_id1 of this ScoringPlay.


        :param assisted_by_player_id1: The assisted_by_player_id1 of this ScoringPlay.
        :type assisted_by_player_id1: int
        """

        self._assisted_by_player_id1 = assisted_by_player_id1

    @property
    def assisted_by_player_id2(self):
        """Gets the assisted_by_player_id2 of this ScoringPlay.


        :return: The assisted_by_player_id2 of this ScoringPlay.
        :rtype: int
        """
        return self._assisted_by_player_id2

    @assisted_by_player_id2.setter
    def assisted_by_player_id2(self, assisted_by_player_id2):
        """Sets the assisted_by_player_id2 of this ScoringPlay.


        :param assisted_by_player_id2: The assisted_by_player_id2 of this ScoringPlay.
        :type assisted_by_player_id2: int
        """

        self._assisted_by_player_id2 = assisted_by_player_id2

    @property
    def away_team_score(self):
        """Gets the away_team_score of this ScoringPlay.


        :return: The away_team_score of this ScoringPlay.
        :rtype: int
        """
        return self._away_team_score

    @away_team_score.setter
    def away_team_score(self, away_team_score):
        """Sets the away_team_score of this ScoringPlay.


        :param away_team_score: The away_team_score of this ScoringPlay.
        :type away_team_score: int
        """

        self._away_team_score = away_team_score

    @property
    def empty_net(self):
        """Gets the empty_net of this ScoringPlay.


        :return: The empty_net of this ScoringPlay.
        :rtype: bool
        """
        return self._empty_net

    @empty_net.setter
    def empty_net(self, empty_net):
        """Sets the empty_net of this ScoringPlay.


        :param empty_net: The empty_net of this ScoringPlay.
        :type empty_net: bool
        """

        self._empty_net = empty_net

    @property
    def home_team_score(self):
        """Gets the home_team_score of this ScoringPlay.


        :return: The home_team_score of this ScoringPlay.
        :rtype: int
        """
        return self._home_team_score

    @home_team_score.setter
    def home_team_score(self, home_team_score):
        """Sets the home_team_score of this ScoringPlay.


        :param home_team_score: The home_team_score of this ScoringPlay.
        :type home_team_score: int
        """

        self._home_team_score = home_team_score

    @property
    def period_id(self):
        """Gets the period_id of this ScoringPlay.


        :return: The period_id of this ScoringPlay.
        :rtype: int
        """
        return self._period_id

    @period_id.setter
    def period_id(self, period_id):
        """Sets the period_id of this ScoringPlay.


        :param period_id: The period_id of this ScoringPlay.
        :type period_id: int
        """

        self._period_id = period_id

    @property
    def power_play(self):
        """Gets the power_play of this ScoringPlay.


        :return: The power_play of this ScoringPlay.
        :rtype: bool
        """
        return self._power_play

    @power_play.setter
    def power_play(self, power_play):
        """Sets the power_play of this ScoringPlay.


        :param power_play: The power_play of this ScoringPlay.
        :type power_play: bool
        """

        self._power_play = power_play

    @property
    def scored_by_player_id(self):
        """Gets the scored_by_player_id of this ScoringPlay.


        :return: The scored_by_player_id of this ScoringPlay.
        :rtype: int
        """
        return self._scored_by_player_id

    @scored_by_player_id.setter
    def scored_by_player_id(self, scored_by_player_id):
        """Sets the scored_by_player_id of this ScoringPlay.


        :param scored_by_player_id: The scored_by_player_id of this ScoringPlay.
        :type scored_by_player_id: int
        """

        self._scored_by_player_id = scored_by_player_id

    @property
    def scored_by_team_id(self):
        """Gets the scored_by_team_id of this ScoringPlay.


        :return: The scored_by_team_id of this ScoringPlay.
        :rtype: int
        """
        return self._scored_by_team_id

    @scored_by_team_id.setter
    def scored_by_team_id(self, scored_by_team_id):
        """Sets the scored_by_team_id of this ScoringPlay.


        :param scored_by_team_id: The scored_by_team_id of this ScoringPlay.
        :type scored_by_team_id: int
        """

        self._scored_by_team_id = scored_by_team_id

    @property
    def scoring_play_id(self):
        """Gets the scoring_play_id of this ScoringPlay.


        :return: The scoring_play_id of this ScoringPlay.
        :rtype: int
        """
        return self._scoring_play_id

    @scoring_play_id.setter
    def scoring_play_id(self, scoring_play_id):
        """Sets the scoring_play_id of this ScoringPlay.


        :param scoring_play_id: The scoring_play_id of this ScoringPlay.
        :type scoring_play_id: int
        """

        self._scoring_play_id = scoring_play_id

    @property
    def sequence(self):
        """Gets the sequence of this ScoringPlay.


        :return: The sequence of this ScoringPlay.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this ScoringPlay.


        :param sequence: The sequence of this ScoringPlay.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def short_handed(self):
        """Gets the short_handed of this ScoringPlay.


        :return: The short_handed of this ScoringPlay.
        :rtype: bool
        """
        return self._short_handed

    @short_handed.setter
    def short_handed(self, short_handed):
        """Sets the short_handed of this ScoringPlay.


        :param short_handed: The short_handed of this ScoringPlay.
        :type short_handed: bool
        """

        self._short_handed = short_handed

    @property
    def time_remaining_minutes(self):
        """Gets the time_remaining_minutes of this ScoringPlay.


        :return: The time_remaining_minutes of this ScoringPlay.
        :rtype: int
        """
        return self._time_remaining_minutes

    @time_remaining_minutes.setter
    def time_remaining_minutes(self, time_remaining_minutes):
        """Sets the time_remaining_minutes of this ScoringPlay.


        :param time_remaining_minutes: The time_remaining_minutes of this ScoringPlay.
        :type time_remaining_minutes: int
        """

        self._time_remaining_minutes = time_remaining_minutes

    @property
    def time_remaining_seconds(self):
        """Gets the time_remaining_seconds of this ScoringPlay.


        :return: The time_remaining_seconds of this ScoringPlay.
        :rtype: int
        """
        return self._time_remaining_seconds

    @time_remaining_seconds.setter
    def time_remaining_seconds(self, time_remaining_seconds):
        """Sets the time_remaining_seconds of this ScoringPlay.


        :param time_remaining_seconds: The time_remaining_seconds of this ScoringPlay.
        :type time_remaining_seconds: int
        """

        self._time_remaining_seconds = time_remaining_seconds
