/*
 * NHL v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlayerLine;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamLine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:40.960519-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamLine {
  public static final String SERIALIZED_NAME_EVEN_STRENGTH_LINES = "EvenStrengthLines";
  @SerializedName(SERIALIZED_NAME_EVEN_STRENGTH_LINES)
  private List<PlayerLine> evenStrengthLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_POWER_PLAY_LINES = "PowerPlayLines";
  @SerializedName(SERIALIZED_NAME_POWER_PLAY_LINES)
  private List<PlayerLine> powerPlayLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public TeamLine() {
  }

  public TeamLine evenStrengthLines(List<PlayerLine> evenStrengthLines) {
    this.evenStrengthLines = evenStrengthLines;
    return this;
  }

  public TeamLine addEvenStrengthLinesItem(PlayerLine evenStrengthLinesItem) {
    if (this.evenStrengthLines == null) {
      this.evenStrengthLines = new ArrayList<>();
    }
    this.evenStrengthLines.add(evenStrengthLinesItem);
    return this;
  }

  /**
   * Get evenStrengthLines
   * @return evenStrengthLines
   */
  @javax.annotation.Nullable
  public List<PlayerLine> getEvenStrengthLines() {
    return evenStrengthLines;
  }

  public void setEvenStrengthLines(List<PlayerLine> evenStrengthLines) {
    this.evenStrengthLines = evenStrengthLines;
  }


  public TeamLine fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public TeamLine key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public TeamLine powerPlayLines(List<PlayerLine> powerPlayLines) {
    this.powerPlayLines = powerPlayLines;
    return this;
  }

  public TeamLine addPowerPlayLinesItem(PlayerLine powerPlayLinesItem) {
    if (this.powerPlayLines == null) {
      this.powerPlayLines = new ArrayList<>();
    }
    this.powerPlayLines.add(powerPlayLinesItem);
    return this;
  }

  /**
   * Get powerPlayLines
   * @return powerPlayLines
   */
  @javax.annotation.Nullable
  public List<PlayerLine> getPowerPlayLines() {
    return powerPlayLines;
  }

  public void setPowerPlayLines(List<PlayerLine> powerPlayLines) {
    this.powerPlayLines = powerPlayLines;
  }


  public TeamLine teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamLine teamLine = (TeamLine) o;
    return Objects.equals(this.evenStrengthLines, teamLine.evenStrengthLines) &&
        Objects.equals(this.fullName, teamLine.fullName) &&
        Objects.equals(this.key, teamLine.key) &&
        Objects.equals(this.powerPlayLines, teamLine.powerPlayLines) &&
        Objects.equals(this.teamID, teamLine.teamID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(evenStrengthLines, fullName, key, powerPlayLines, teamID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamLine {\n");
    sb.append("    evenStrengthLines: ").append(toIndentedString(evenStrengthLines)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    powerPlayLines: ").append(toIndentedString(powerPlayLines)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EvenStrengthLines");
    openapiFields.add("FullName");
    openapiFields.add("Key");
    openapiFields.add("PowerPlayLines");
    openapiFields.add("TeamID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamLine is not found in the empty JSON string", TeamLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("EvenStrengthLines") != null && !jsonObj.get("EvenStrengthLines").isJsonNull()) {
        JsonArray jsonArrayevenStrengthLines = jsonObj.getAsJsonArray("EvenStrengthLines");
        if (jsonArrayevenStrengthLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EvenStrengthLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EvenStrengthLines` to be an array in the JSON string but got `%s`", jsonObj.get("EvenStrengthLines").toString()));
          }

          // validate the optional field `EvenStrengthLines` (array)
          for (int i = 0; i < jsonArrayevenStrengthLines.size(); i++) {
            PlayerLine.validateJsonElement(jsonArrayevenStrengthLines.get(i));
          };
        }
      }
      if ((jsonObj.get("FullName") != null && !jsonObj.get("FullName").isJsonNull()) && !jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      if (jsonObj.get("PowerPlayLines") != null && !jsonObj.get("PowerPlayLines").isJsonNull()) {
        JsonArray jsonArraypowerPlayLines = jsonObj.getAsJsonArray("PowerPlayLines");
        if (jsonArraypowerPlayLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PowerPlayLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PowerPlayLines` to be an array in the JSON string but got `%s`", jsonObj.get("PowerPlayLines").toString()));
          }

          // validate the optional field `PowerPlayLines` (array)
          for (int i = 0; i < jsonArraypowerPlayLines.size(); i++) {
            PlayerLine.validateJsonElement(jsonArraypowerPlayLines.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamLine.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamLine>() {
           @Override
           public void write(JsonWriter out, TeamLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamLine
   * @throws IOException if the JSON string is invalid with respect to TeamLine
   */
  public static TeamLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamLine.class);
  }

  /**
   * Convert an instance of TeamLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

