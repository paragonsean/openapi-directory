/*
 * NHL v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerGame
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:40.960519-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerGame {
  public static final String SERIALIZED_NAME_ASSISTS = "Assists";
  @SerializedName(SERIALIZED_NAME_ASSISTS)
  private BigDecimal assists;

  public static final String SERIALIZED_NAME_BENCH_PENALTY_MINUTES = "BenchPenaltyMinutes";
  @SerializedName(SERIALIZED_NAME_BENCH_PENALTY_MINUTES)
  private BigDecimal benchPenaltyMinutes;

  public static final String SERIALIZED_NAME_BLOCKS = "Blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private BigDecimal blocks;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_POSITION = "DraftKingsPosition";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_POSITION)
  private String draftKingsPosition;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_SALARY = "DraftKingsSalary";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_SALARY)
  private Integer draftKingsSalary;

  public static final String SERIALIZED_NAME_EMPTY_NET_GOALS = "EmptyNetGoals";
  @SerializedName(SERIALIZED_NAME_EMPTY_NET_GOALS)
  private BigDecimal emptyNetGoals;

  public static final String SERIALIZED_NAME_FACEOFFS_LOST = "FaceoffsLost";
  @SerializedName(SERIALIZED_NAME_FACEOFFS_LOST)
  private BigDecimal faceoffsLost;

  public static final String SERIALIZED_NAME_FACEOFFS_WON = "FaceoffsWon";
  @SerializedName(SERIALIZED_NAME_FACEOFFS_WON)
  private BigDecimal faceoffsWon;

  public static final String SERIALIZED_NAME_FAN_DUEL_POSITION = "FanDuelPosition";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_POSITION)
  private String fanDuelPosition;

  public static final String SERIALIZED_NAME_FAN_DUEL_SALARY = "FanDuelSalary";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_SALARY)
  private Integer fanDuelSalary;

  public static final String SERIALIZED_NAME_FANTASY_DATA_SALARY = "FantasyDataSalary";
  @SerializedName(SERIALIZED_NAME_FANTASY_DATA_SALARY)
  private Integer fantasyDataSalary;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_POSITION = "FantasyDraftPosition";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_POSITION)
  private String fantasyDraftPosition;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_SALARY = "FantasyDraftSalary";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_SALARY)
  private Integer fantasyDraftSalary;

  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS = "FantasyPointsDraftKings";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS)
  private BigDecimal fantasyPointsDraftKings;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_FAN_DUEL = "FantasyPointsFanDuel";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_FAN_DUEL)
  private BigDecimal fantasyPointsFanDuel;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_FANTASY_DRAFT = "FantasyPointsFantasyDraft";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_FANTASY_DRAFT)
  private BigDecimal fantasyPointsFantasyDraft;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_YAHOO = "FantasyPointsYahoo";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_YAHOO)
  private BigDecimal fantasyPointsYahoo;

  public static final String SERIALIZED_NAME_GAME_I_D = "GameID";
  @SerializedName(SERIALIZED_NAME_GAME_I_D)
  private Integer gameID;

  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private Integer games;

  public static final String SERIALIZED_NAME_GIVEAWAYS = "Giveaways";
  @SerializedName(SERIALIZED_NAME_GIVEAWAYS)
  private BigDecimal giveaways;

  public static final String SERIALIZED_NAME_GLOBAL_GAME_I_D = "GlobalGameID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_GAME_I_D)
  private Integer globalGameID;

  public static final String SERIALIZED_NAME_GLOBAL_OPPONENT_I_D = "GlobalOpponentID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_OPPONENT_I_D)
  private Integer globalOpponentID;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_GOALS = "Goals";
  @SerializedName(SERIALIZED_NAME_GOALS)
  private BigDecimal goals;

  public static final String SERIALIZED_NAME_GOALTENDING_GOALS_AGAINST = "GoaltendingGoalsAgainst";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_GOALS_AGAINST)
  private BigDecimal goaltendingGoalsAgainst;

  public static final String SERIALIZED_NAME_GOALTENDING_LOSSES = "GoaltendingLosses";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_LOSSES)
  private BigDecimal goaltendingLosses;

  public static final String SERIALIZED_NAME_GOALTENDING_MINUTES = "GoaltendingMinutes";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_MINUTES)
  private Integer goaltendingMinutes;

  public static final String SERIALIZED_NAME_GOALTENDING_OVERTIME_LOSSES = "GoaltendingOvertimeLosses";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_OVERTIME_LOSSES)
  private BigDecimal goaltendingOvertimeLosses;

  public static final String SERIALIZED_NAME_GOALTENDING_SAVES = "GoaltendingSaves";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_SAVES)
  private BigDecimal goaltendingSaves;

  public static final String SERIALIZED_NAME_GOALTENDING_SECONDS = "GoaltendingSeconds";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_SECONDS)
  private Integer goaltendingSeconds;

  public static final String SERIALIZED_NAME_GOALTENDING_SHOTS_AGAINST = "GoaltendingShotsAgainst";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_SHOTS_AGAINST)
  private BigDecimal goaltendingShotsAgainst;

  public static final String SERIALIZED_NAME_GOALTENDING_SHUTOUTS = "GoaltendingShutouts";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_SHUTOUTS)
  private BigDecimal goaltendingShutouts;

  public static final String SERIALIZED_NAME_GOALTENDING_WINS = "GoaltendingWins";
  @SerializedName(SERIALIZED_NAME_GOALTENDING_WINS)
  private BigDecimal goaltendingWins;

  public static final String SERIALIZED_NAME_HAT_TRICKS = "HatTricks";
  @SerializedName(SERIALIZED_NAME_HAT_TRICKS)
  private BigDecimal hatTricks;

  public static final String SERIALIZED_NAME_HITS = "Hits";
  @SerializedName(SERIALIZED_NAME_HITS)
  private BigDecimal hits;

  public static final String SERIALIZED_NAME_HOME_OR_AWAY = "HomeOrAway";
  @SerializedName(SERIALIZED_NAME_HOME_OR_AWAY)
  private String homeOrAway;

  public static final String SERIALIZED_NAME_INJURY_BODY_PART = "InjuryBodyPart";
  @SerializedName(SERIALIZED_NAME_INJURY_BODY_PART)
  private String injuryBodyPart;

  public static final String SERIALIZED_NAME_INJURY_NOTES = "InjuryNotes";
  @SerializedName(SERIALIZED_NAME_INJURY_NOTES)
  private String injuryNotes;

  public static final String SERIALIZED_NAME_INJURY_START_DATE = "InjuryStartDate";
  @SerializedName(SERIALIZED_NAME_INJURY_START_DATE)
  private String injuryStartDate;

  public static final String SERIALIZED_NAME_INJURY_STATUS = "InjuryStatus";
  @SerializedName(SERIALIZED_NAME_INJURY_STATUS)
  private String injuryStatus;

  public static final String SERIALIZED_NAME_IS_GAME_OVER = "IsGameOver";
  @SerializedName(SERIALIZED_NAME_IS_GAME_OVER)
  private Boolean isGameOver;

  public static final String SERIALIZED_NAME_MINUTES = "Minutes";
  @SerializedName(SERIALIZED_NAME_MINUTES)
  private Integer minutes;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_OPPONENT_I_D = "OpponentID";
  @SerializedName(SERIALIZED_NAME_OPPONENT_I_D)
  private Integer opponentID;

  public static final String SERIALIZED_NAME_OPPONENT_POSITION_RANK = "OpponentPositionRank";
  @SerializedName(SERIALIZED_NAME_OPPONENT_POSITION_RANK)
  private Integer opponentPositionRank;

  public static final String SERIALIZED_NAME_OPPONENT_RANK = "OpponentRank";
  @SerializedName(SERIALIZED_NAME_OPPONENT_RANK)
  private Integer opponentRank;

  public static final String SERIALIZED_NAME_PENALTY_MINUTES = "PenaltyMinutes";
  @SerializedName(SERIALIZED_NAME_PENALTY_MINUTES)
  private BigDecimal penaltyMinutes;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_PLUS_MINUS = "PlusMinus";
  @SerializedName(SERIALIZED_NAME_PLUS_MINUS)
  private BigDecimal plusMinus;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POWER_PLAY_ASSISTS = "PowerPlayAssists";
  @SerializedName(SERIALIZED_NAME_POWER_PLAY_ASSISTS)
  private BigDecimal powerPlayAssists;

  public static final String SERIALIZED_NAME_POWER_PLAY_GOALS = "PowerPlayGoals";
  @SerializedName(SERIALIZED_NAME_POWER_PLAY_GOALS)
  private BigDecimal powerPlayGoals;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_SECONDS = "Seconds";
  @SerializedName(SERIALIZED_NAME_SECONDS)
  private Integer seconds;

  public static final String SERIALIZED_NAME_SHIFTS = "Shifts";
  @SerializedName(SERIALIZED_NAME_SHIFTS)
  private BigDecimal shifts;

  public static final String SERIALIZED_NAME_SHOOTOUT_GOALS = "ShootoutGoals";
  @SerializedName(SERIALIZED_NAME_SHOOTOUT_GOALS)
  private BigDecimal shootoutGoals;

  public static final String SERIALIZED_NAME_SHORT_HANDED_ASSISTS = "ShortHandedAssists";
  @SerializedName(SERIALIZED_NAME_SHORT_HANDED_ASSISTS)
  private BigDecimal shortHandedAssists;

  public static final String SERIALIZED_NAME_SHORT_HANDED_GOALS = "ShortHandedGoals";
  @SerializedName(SERIALIZED_NAME_SHORT_HANDED_GOALS)
  private BigDecimal shortHandedGoals;

  public static final String SERIALIZED_NAME_SHOTS_ON_GOAL = "ShotsOnGoal";
  @SerializedName(SERIALIZED_NAME_SHOTS_ON_GOAL)
  private BigDecimal shotsOnGoal;

  public static final String SERIALIZED_NAME_STARTED = "Started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private Integer started;

  public static final String SERIALIZED_NAME_STAT_I_D = "StatID";
  @SerializedName(SERIALIZED_NAME_STAT_I_D)
  private Integer statID;

  public static final String SERIALIZED_NAME_TAKEAWAYS = "Takeaways";
  @SerializedName(SERIALIZED_NAME_TAKEAWAYS)
  private BigDecimal takeaways;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_YAHOO_POSITION = "YahooPosition";
  @SerializedName(SERIALIZED_NAME_YAHOO_POSITION)
  private String yahooPosition;

  public static final String SERIALIZED_NAME_YAHOO_SALARY = "YahooSalary";
  @SerializedName(SERIALIZED_NAME_YAHOO_SALARY)
  private Integer yahooSalary;

  public PlayerGame() {
  }

  public PlayerGame assists(BigDecimal assists) {
    this.assists = assists;
    return this;
  }

  /**
   * Get assists
   * @return assists
   */
  @javax.annotation.Nullable
  public BigDecimal getAssists() {
    return assists;
  }

  public void setAssists(BigDecimal assists) {
    this.assists = assists;
  }


  public PlayerGame benchPenaltyMinutes(BigDecimal benchPenaltyMinutes) {
    this.benchPenaltyMinutes = benchPenaltyMinutes;
    return this;
  }

  /**
   * Get benchPenaltyMinutes
   * @return benchPenaltyMinutes
   */
  @javax.annotation.Nullable
  public BigDecimal getBenchPenaltyMinutes() {
    return benchPenaltyMinutes;
  }

  public void setBenchPenaltyMinutes(BigDecimal benchPenaltyMinutes) {
    this.benchPenaltyMinutes = benchPenaltyMinutes;
  }


  public PlayerGame blocks(BigDecimal blocks) {
    this.blocks = blocks;
    return this;
  }

  /**
   * Get blocks
   * @return blocks
   */
  @javax.annotation.Nullable
  public BigDecimal getBlocks() {
    return blocks;
  }

  public void setBlocks(BigDecimal blocks) {
    this.blocks = blocks;
  }


  public PlayerGame dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public PlayerGame day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public PlayerGame draftKingsPosition(String draftKingsPosition) {
    this.draftKingsPosition = draftKingsPosition;
    return this;
  }

  /**
   * Get draftKingsPosition
   * @return draftKingsPosition
   */
  @javax.annotation.Nullable
  public String getDraftKingsPosition() {
    return draftKingsPosition;
  }

  public void setDraftKingsPosition(String draftKingsPosition) {
    this.draftKingsPosition = draftKingsPosition;
  }


  public PlayerGame draftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
    return this;
  }

  /**
   * Get draftKingsSalary
   * @return draftKingsSalary
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsSalary() {
    return draftKingsSalary;
  }

  public void setDraftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
  }


  public PlayerGame emptyNetGoals(BigDecimal emptyNetGoals) {
    this.emptyNetGoals = emptyNetGoals;
    return this;
  }

  /**
   * Get emptyNetGoals
   * @return emptyNetGoals
   */
  @javax.annotation.Nullable
  public BigDecimal getEmptyNetGoals() {
    return emptyNetGoals;
  }

  public void setEmptyNetGoals(BigDecimal emptyNetGoals) {
    this.emptyNetGoals = emptyNetGoals;
  }


  public PlayerGame faceoffsLost(BigDecimal faceoffsLost) {
    this.faceoffsLost = faceoffsLost;
    return this;
  }

  /**
   * Get faceoffsLost
   * @return faceoffsLost
   */
  @javax.annotation.Nullable
  public BigDecimal getFaceoffsLost() {
    return faceoffsLost;
  }

  public void setFaceoffsLost(BigDecimal faceoffsLost) {
    this.faceoffsLost = faceoffsLost;
  }


  public PlayerGame faceoffsWon(BigDecimal faceoffsWon) {
    this.faceoffsWon = faceoffsWon;
    return this;
  }

  /**
   * Get faceoffsWon
   * @return faceoffsWon
   */
  @javax.annotation.Nullable
  public BigDecimal getFaceoffsWon() {
    return faceoffsWon;
  }

  public void setFaceoffsWon(BigDecimal faceoffsWon) {
    this.faceoffsWon = faceoffsWon;
  }


  public PlayerGame fanDuelPosition(String fanDuelPosition) {
    this.fanDuelPosition = fanDuelPosition;
    return this;
  }

  /**
   * Get fanDuelPosition
   * @return fanDuelPosition
   */
  @javax.annotation.Nullable
  public String getFanDuelPosition() {
    return fanDuelPosition;
  }

  public void setFanDuelPosition(String fanDuelPosition) {
    this.fanDuelPosition = fanDuelPosition;
  }


  public PlayerGame fanDuelSalary(Integer fanDuelSalary) {
    this.fanDuelSalary = fanDuelSalary;
    return this;
  }

  /**
   * Get fanDuelSalary
   * @return fanDuelSalary
   */
  @javax.annotation.Nullable
  public Integer getFanDuelSalary() {
    return fanDuelSalary;
  }

  public void setFanDuelSalary(Integer fanDuelSalary) {
    this.fanDuelSalary = fanDuelSalary;
  }


  public PlayerGame fantasyDataSalary(Integer fantasyDataSalary) {
    this.fantasyDataSalary = fantasyDataSalary;
    return this;
  }

  /**
   * Get fantasyDataSalary
   * @return fantasyDataSalary
   */
  @javax.annotation.Nullable
  public Integer getFantasyDataSalary() {
    return fantasyDataSalary;
  }

  public void setFantasyDataSalary(Integer fantasyDataSalary) {
    this.fantasyDataSalary = fantasyDataSalary;
  }


  public PlayerGame fantasyDraftPosition(String fantasyDraftPosition) {
    this.fantasyDraftPosition = fantasyDraftPosition;
    return this;
  }

  /**
   * Get fantasyDraftPosition
   * @return fantasyDraftPosition
   */
  @javax.annotation.Nullable
  public String getFantasyDraftPosition() {
    return fantasyDraftPosition;
  }

  public void setFantasyDraftPosition(String fantasyDraftPosition) {
    this.fantasyDraftPosition = fantasyDraftPosition;
  }


  public PlayerGame fantasyDraftSalary(Integer fantasyDraftSalary) {
    this.fantasyDraftSalary = fantasyDraftSalary;
    return this;
  }

  /**
   * Get fantasyDraftSalary
   * @return fantasyDraftSalary
   */
  @javax.annotation.Nullable
  public Integer getFantasyDraftSalary() {
    return fantasyDraftSalary;
  }

  public void setFantasyDraftSalary(Integer fantasyDraftSalary) {
    this.fantasyDraftSalary = fantasyDraftSalary;
  }


  public PlayerGame fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public PlayerGame fantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
    return this;
  }

  /**
   * Get fantasyPointsDraftKings
   * @return fantasyPointsDraftKings
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsDraftKings() {
    return fantasyPointsDraftKings;
  }

  public void setFantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
  }


  public PlayerGame fantasyPointsFanDuel(BigDecimal fantasyPointsFanDuel) {
    this.fantasyPointsFanDuel = fantasyPointsFanDuel;
    return this;
  }

  /**
   * Get fantasyPointsFanDuel
   * @return fantasyPointsFanDuel
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsFanDuel() {
    return fantasyPointsFanDuel;
  }

  public void setFantasyPointsFanDuel(BigDecimal fantasyPointsFanDuel) {
    this.fantasyPointsFanDuel = fantasyPointsFanDuel;
  }


  public PlayerGame fantasyPointsFantasyDraft(BigDecimal fantasyPointsFantasyDraft) {
    this.fantasyPointsFantasyDraft = fantasyPointsFantasyDraft;
    return this;
  }

  /**
   * Get fantasyPointsFantasyDraft
   * @return fantasyPointsFantasyDraft
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsFantasyDraft() {
    return fantasyPointsFantasyDraft;
  }

  public void setFantasyPointsFantasyDraft(BigDecimal fantasyPointsFantasyDraft) {
    this.fantasyPointsFantasyDraft = fantasyPointsFantasyDraft;
  }


  public PlayerGame fantasyPointsYahoo(BigDecimal fantasyPointsYahoo) {
    this.fantasyPointsYahoo = fantasyPointsYahoo;
    return this;
  }

  /**
   * Get fantasyPointsYahoo
   * @return fantasyPointsYahoo
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsYahoo() {
    return fantasyPointsYahoo;
  }

  public void setFantasyPointsYahoo(BigDecimal fantasyPointsYahoo) {
    this.fantasyPointsYahoo = fantasyPointsYahoo;
  }


  public PlayerGame gameID(Integer gameID) {
    this.gameID = gameID;
    return this;
  }

  /**
   * Get gameID
   * @return gameID
   */
  @javax.annotation.Nullable
  public Integer getGameID() {
    return gameID;
  }

  public void setGameID(Integer gameID) {
    this.gameID = gameID;
  }


  public PlayerGame games(Integer games) {
    this.games = games;
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public Integer getGames() {
    return games;
  }

  public void setGames(Integer games) {
    this.games = games;
  }


  public PlayerGame giveaways(BigDecimal giveaways) {
    this.giveaways = giveaways;
    return this;
  }

  /**
   * Get giveaways
   * @return giveaways
   */
  @javax.annotation.Nullable
  public BigDecimal getGiveaways() {
    return giveaways;
  }

  public void setGiveaways(BigDecimal giveaways) {
    this.giveaways = giveaways;
  }


  public PlayerGame globalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
    return this;
  }

  /**
   * Get globalGameID
   * @return globalGameID
   */
  @javax.annotation.Nullable
  public Integer getGlobalGameID() {
    return globalGameID;
  }

  public void setGlobalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
  }


  public PlayerGame globalOpponentID(Integer globalOpponentID) {
    this.globalOpponentID = globalOpponentID;
    return this;
  }

  /**
   * Get globalOpponentID
   * @return globalOpponentID
   */
  @javax.annotation.Nullable
  public Integer getGlobalOpponentID() {
    return globalOpponentID;
  }

  public void setGlobalOpponentID(Integer globalOpponentID) {
    this.globalOpponentID = globalOpponentID;
  }


  public PlayerGame globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public PlayerGame goals(BigDecimal goals) {
    this.goals = goals;
    return this;
  }

  /**
   * Get goals
   * @return goals
   */
  @javax.annotation.Nullable
  public BigDecimal getGoals() {
    return goals;
  }

  public void setGoals(BigDecimal goals) {
    this.goals = goals;
  }


  public PlayerGame goaltendingGoalsAgainst(BigDecimal goaltendingGoalsAgainst) {
    this.goaltendingGoalsAgainst = goaltendingGoalsAgainst;
    return this;
  }

  /**
   * Get goaltendingGoalsAgainst
   * @return goaltendingGoalsAgainst
   */
  @javax.annotation.Nullable
  public BigDecimal getGoaltendingGoalsAgainst() {
    return goaltendingGoalsAgainst;
  }

  public void setGoaltendingGoalsAgainst(BigDecimal goaltendingGoalsAgainst) {
    this.goaltendingGoalsAgainst = goaltendingGoalsAgainst;
  }


  public PlayerGame goaltendingLosses(BigDecimal goaltendingLosses) {
    this.goaltendingLosses = goaltendingLosses;
    return this;
  }

  /**
   * Get goaltendingLosses
   * @return goaltendingLosses
   */
  @javax.annotation.Nullable
  public BigDecimal getGoaltendingLosses() {
    return goaltendingLosses;
  }

  public void setGoaltendingLosses(BigDecimal goaltendingLosses) {
    this.goaltendingLosses = goaltendingLosses;
  }


  public PlayerGame goaltendingMinutes(Integer goaltendingMinutes) {
    this.goaltendingMinutes = goaltendingMinutes;
    return this;
  }

  /**
   * Get goaltendingMinutes
   * @return goaltendingMinutes
   */
  @javax.annotation.Nullable
  public Integer getGoaltendingMinutes() {
    return goaltendingMinutes;
  }

  public void setGoaltendingMinutes(Integer goaltendingMinutes) {
    this.goaltendingMinutes = goaltendingMinutes;
  }


  public PlayerGame goaltendingOvertimeLosses(BigDecimal goaltendingOvertimeLosses) {
    this.goaltendingOvertimeLosses = goaltendingOvertimeLosses;
    return this;
  }

  /**
   * Get goaltendingOvertimeLosses
   * @return goaltendingOvertimeLosses
   */
  @javax.annotation.Nullable
  public BigDecimal getGoaltendingOvertimeLosses() {
    return goaltendingOvertimeLosses;
  }

  public void setGoaltendingOvertimeLosses(BigDecimal goaltendingOvertimeLosses) {
    this.goaltendingOvertimeLosses = goaltendingOvertimeLosses;
  }


  public PlayerGame goaltendingSaves(BigDecimal goaltendingSaves) {
    this.goaltendingSaves = goaltendingSaves;
    return this;
  }

  /**
   * Get goaltendingSaves
   * @return goaltendingSaves
   */
  @javax.annotation.Nullable
  public BigDecimal getGoaltendingSaves() {
    return goaltendingSaves;
  }

  public void setGoaltendingSaves(BigDecimal goaltendingSaves) {
    this.goaltendingSaves = goaltendingSaves;
  }


  public PlayerGame goaltendingSeconds(Integer goaltendingSeconds) {
    this.goaltendingSeconds = goaltendingSeconds;
    return this;
  }

  /**
   * Get goaltendingSeconds
   * @return goaltendingSeconds
   */
  @javax.annotation.Nullable
  public Integer getGoaltendingSeconds() {
    return goaltendingSeconds;
  }

  public void setGoaltendingSeconds(Integer goaltendingSeconds) {
    this.goaltendingSeconds = goaltendingSeconds;
  }


  public PlayerGame goaltendingShotsAgainst(BigDecimal goaltendingShotsAgainst) {
    this.goaltendingShotsAgainst = goaltendingShotsAgainst;
    return this;
  }

  /**
   * Get goaltendingShotsAgainst
   * @return goaltendingShotsAgainst
   */
  @javax.annotation.Nullable
  public BigDecimal getGoaltendingShotsAgainst() {
    return goaltendingShotsAgainst;
  }

  public void setGoaltendingShotsAgainst(BigDecimal goaltendingShotsAgainst) {
    this.goaltendingShotsAgainst = goaltendingShotsAgainst;
  }


  public PlayerGame goaltendingShutouts(BigDecimal goaltendingShutouts) {
    this.goaltendingShutouts = goaltendingShutouts;
    return this;
  }

  /**
   * Get goaltendingShutouts
   * @return goaltendingShutouts
   */
  @javax.annotation.Nullable
  public BigDecimal getGoaltendingShutouts() {
    return goaltendingShutouts;
  }

  public void setGoaltendingShutouts(BigDecimal goaltendingShutouts) {
    this.goaltendingShutouts = goaltendingShutouts;
  }


  public PlayerGame goaltendingWins(BigDecimal goaltendingWins) {
    this.goaltendingWins = goaltendingWins;
    return this;
  }

  /**
   * Get goaltendingWins
   * @return goaltendingWins
   */
  @javax.annotation.Nullable
  public BigDecimal getGoaltendingWins() {
    return goaltendingWins;
  }

  public void setGoaltendingWins(BigDecimal goaltendingWins) {
    this.goaltendingWins = goaltendingWins;
  }


  public PlayerGame hatTricks(BigDecimal hatTricks) {
    this.hatTricks = hatTricks;
    return this;
  }

  /**
   * Get hatTricks
   * @return hatTricks
   */
  @javax.annotation.Nullable
  public BigDecimal getHatTricks() {
    return hatTricks;
  }

  public void setHatTricks(BigDecimal hatTricks) {
    this.hatTricks = hatTricks;
  }


  public PlayerGame hits(BigDecimal hits) {
    this.hits = hits;
    return this;
  }

  /**
   * Get hits
   * @return hits
   */
  @javax.annotation.Nullable
  public BigDecimal getHits() {
    return hits;
  }

  public void setHits(BigDecimal hits) {
    this.hits = hits;
  }


  public PlayerGame homeOrAway(String homeOrAway) {
    this.homeOrAway = homeOrAway;
    return this;
  }

  /**
   * Get homeOrAway
   * @return homeOrAway
   */
  @javax.annotation.Nullable
  public String getHomeOrAway() {
    return homeOrAway;
  }

  public void setHomeOrAway(String homeOrAway) {
    this.homeOrAway = homeOrAway;
  }


  public PlayerGame injuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
    return this;
  }

  /**
   * Get injuryBodyPart
   * @return injuryBodyPart
   */
  @javax.annotation.Nullable
  public String getInjuryBodyPart() {
    return injuryBodyPart;
  }

  public void setInjuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
  }


  public PlayerGame injuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
    return this;
  }

  /**
   * Get injuryNotes
   * @return injuryNotes
   */
  @javax.annotation.Nullable
  public String getInjuryNotes() {
    return injuryNotes;
  }

  public void setInjuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
  }


  public PlayerGame injuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
    return this;
  }

  /**
   * Get injuryStartDate
   * @return injuryStartDate
   */
  @javax.annotation.Nullable
  public String getInjuryStartDate() {
    return injuryStartDate;
  }

  public void setInjuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
  }


  public PlayerGame injuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
    return this;
  }

  /**
   * Get injuryStatus
   * @return injuryStatus
   */
  @javax.annotation.Nullable
  public String getInjuryStatus() {
    return injuryStatus;
  }

  public void setInjuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
  }


  public PlayerGame isGameOver(Boolean isGameOver) {
    this.isGameOver = isGameOver;
    return this;
  }

  /**
   * Get isGameOver
   * @return isGameOver
   */
  @javax.annotation.Nullable
  public Boolean getIsGameOver() {
    return isGameOver;
  }

  public void setIsGameOver(Boolean isGameOver) {
    this.isGameOver = isGameOver;
  }


  public PlayerGame minutes(Integer minutes) {
    this.minutes = minutes;
    return this;
  }

  /**
   * Get minutes
   * @return minutes
   */
  @javax.annotation.Nullable
  public Integer getMinutes() {
    return minutes;
  }

  public void setMinutes(Integer minutes) {
    this.minutes = minutes;
  }


  public PlayerGame name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerGame opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public PlayerGame opponentID(Integer opponentID) {
    this.opponentID = opponentID;
    return this;
  }

  /**
   * Get opponentID
   * @return opponentID
   */
  @javax.annotation.Nullable
  public Integer getOpponentID() {
    return opponentID;
  }

  public void setOpponentID(Integer opponentID) {
    this.opponentID = opponentID;
  }


  public PlayerGame opponentPositionRank(Integer opponentPositionRank) {
    this.opponentPositionRank = opponentPositionRank;
    return this;
  }

  /**
   * Get opponentPositionRank
   * @return opponentPositionRank
   */
  @javax.annotation.Nullable
  public Integer getOpponentPositionRank() {
    return opponentPositionRank;
  }

  public void setOpponentPositionRank(Integer opponentPositionRank) {
    this.opponentPositionRank = opponentPositionRank;
  }


  public PlayerGame opponentRank(Integer opponentRank) {
    this.opponentRank = opponentRank;
    return this;
  }

  /**
   * Get opponentRank
   * @return opponentRank
   */
  @javax.annotation.Nullable
  public Integer getOpponentRank() {
    return opponentRank;
  }

  public void setOpponentRank(Integer opponentRank) {
    this.opponentRank = opponentRank;
  }


  public PlayerGame penaltyMinutes(BigDecimal penaltyMinutes) {
    this.penaltyMinutes = penaltyMinutes;
    return this;
  }

  /**
   * Get penaltyMinutes
   * @return penaltyMinutes
   */
  @javax.annotation.Nullable
  public BigDecimal getPenaltyMinutes() {
    return penaltyMinutes;
  }

  public void setPenaltyMinutes(BigDecimal penaltyMinutes) {
    this.penaltyMinutes = penaltyMinutes;
  }


  public PlayerGame playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayerGame plusMinus(BigDecimal plusMinus) {
    this.plusMinus = plusMinus;
    return this;
  }

  /**
   * Get plusMinus
   * @return plusMinus
   */
  @javax.annotation.Nullable
  public BigDecimal getPlusMinus() {
    return plusMinus;
  }

  public void setPlusMinus(BigDecimal plusMinus) {
    this.plusMinus = plusMinus;
  }


  public PlayerGame position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public PlayerGame powerPlayAssists(BigDecimal powerPlayAssists) {
    this.powerPlayAssists = powerPlayAssists;
    return this;
  }

  /**
   * Get powerPlayAssists
   * @return powerPlayAssists
   */
  @javax.annotation.Nullable
  public BigDecimal getPowerPlayAssists() {
    return powerPlayAssists;
  }

  public void setPowerPlayAssists(BigDecimal powerPlayAssists) {
    this.powerPlayAssists = powerPlayAssists;
  }


  public PlayerGame powerPlayGoals(BigDecimal powerPlayGoals) {
    this.powerPlayGoals = powerPlayGoals;
    return this;
  }

  /**
   * Get powerPlayGoals
   * @return powerPlayGoals
   */
  @javax.annotation.Nullable
  public BigDecimal getPowerPlayGoals() {
    return powerPlayGoals;
  }

  public void setPowerPlayGoals(BigDecimal powerPlayGoals) {
    this.powerPlayGoals = powerPlayGoals;
  }


  public PlayerGame season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public PlayerGame seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public PlayerGame seconds(Integer seconds) {
    this.seconds = seconds;
    return this;
  }

  /**
   * Get seconds
   * @return seconds
   */
  @javax.annotation.Nullable
  public Integer getSeconds() {
    return seconds;
  }

  public void setSeconds(Integer seconds) {
    this.seconds = seconds;
  }


  public PlayerGame shifts(BigDecimal shifts) {
    this.shifts = shifts;
    return this;
  }

  /**
   * Get shifts
   * @return shifts
   */
  @javax.annotation.Nullable
  public BigDecimal getShifts() {
    return shifts;
  }

  public void setShifts(BigDecimal shifts) {
    this.shifts = shifts;
  }


  public PlayerGame shootoutGoals(BigDecimal shootoutGoals) {
    this.shootoutGoals = shootoutGoals;
    return this;
  }

  /**
   * Get shootoutGoals
   * @return shootoutGoals
   */
  @javax.annotation.Nullable
  public BigDecimal getShootoutGoals() {
    return shootoutGoals;
  }

  public void setShootoutGoals(BigDecimal shootoutGoals) {
    this.shootoutGoals = shootoutGoals;
  }


  public PlayerGame shortHandedAssists(BigDecimal shortHandedAssists) {
    this.shortHandedAssists = shortHandedAssists;
    return this;
  }

  /**
   * Get shortHandedAssists
   * @return shortHandedAssists
   */
  @javax.annotation.Nullable
  public BigDecimal getShortHandedAssists() {
    return shortHandedAssists;
  }

  public void setShortHandedAssists(BigDecimal shortHandedAssists) {
    this.shortHandedAssists = shortHandedAssists;
  }


  public PlayerGame shortHandedGoals(BigDecimal shortHandedGoals) {
    this.shortHandedGoals = shortHandedGoals;
    return this;
  }

  /**
   * Get shortHandedGoals
   * @return shortHandedGoals
   */
  @javax.annotation.Nullable
  public BigDecimal getShortHandedGoals() {
    return shortHandedGoals;
  }

  public void setShortHandedGoals(BigDecimal shortHandedGoals) {
    this.shortHandedGoals = shortHandedGoals;
  }


  public PlayerGame shotsOnGoal(BigDecimal shotsOnGoal) {
    this.shotsOnGoal = shotsOnGoal;
    return this;
  }

  /**
   * Get shotsOnGoal
   * @return shotsOnGoal
   */
  @javax.annotation.Nullable
  public BigDecimal getShotsOnGoal() {
    return shotsOnGoal;
  }

  public void setShotsOnGoal(BigDecimal shotsOnGoal) {
    this.shotsOnGoal = shotsOnGoal;
  }


  public PlayerGame started(Integer started) {
    this.started = started;
    return this;
  }

  /**
   * Get started
   * @return started
   */
  @javax.annotation.Nullable
  public Integer getStarted() {
    return started;
  }

  public void setStarted(Integer started) {
    this.started = started;
  }


  public PlayerGame statID(Integer statID) {
    this.statID = statID;
    return this;
  }

  /**
   * Get statID
   * @return statID
   */
  @javax.annotation.Nullable
  public Integer getStatID() {
    return statID;
  }

  public void setStatID(Integer statID) {
    this.statID = statID;
  }


  public PlayerGame takeaways(BigDecimal takeaways) {
    this.takeaways = takeaways;
    return this;
  }

  /**
   * Get takeaways
   * @return takeaways
   */
  @javax.annotation.Nullable
  public BigDecimal getTakeaways() {
    return takeaways;
  }

  public void setTakeaways(BigDecimal takeaways) {
    this.takeaways = takeaways;
  }


  public PlayerGame team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayerGame teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public PlayerGame updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public PlayerGame yahooPosition(String yahooPosition) {
    this.yahooPosition = yahooPosition;
    return this;
  }

  /**
   * Get yahooPosition
   * @return yahooPosition
   */
  @javax.annotation.Nullable
  public String getYahooPosition() {
    return yahooPosition;
  }

  public void setYahooPosition(String yahooPosition) {
    this.yahooPosition = yahooPosition;
  }


  public PlayerGame yahooSalary(Integer yahooSalary) {
    this.yahooSalary = yahooSalary;
    return this;
  }

  /**
   * Get yahooSalary
   * @return yahooSalary
   */
  @javax.annotation.Nullable
  public Integer getYahooSalary() {
    return yahooSalary;
  }

  public void setYahooSalary(Integer yahooSalary) {
    this.yahooSalary = yahooSalary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerGame playerGame = (PlayerGame) o;
    return Objects.equals(this.assists, playerGame.assists) &&
        Objects.equals(this.benchPenaltyMinutes, playerGame.benchPenaltyMinutes) &&
        Objects.equals(this.blocks, playerGame.blocks) &&
        Objects.equals(this.dateTime, playerGame.dateTime) &&
        Objects.equals(this.day, playerGame.day) &&
        Objects.equals(this.draftKingsPosition, playerGame.draftKingsPosition) &&
        Objects.equals(this.draftKingsSalary, playerGame.draftKingsSalary) &&
        Objects.equals(this.emptyNetGoals, playerGame.emptyNetGoals) &&
        Objects.equals(this.faceoffsLost, playerGame.faceoffsLost) &&
        Objects.equals(this.faceoffsWon, playerGame.faceoffsWon) &&
        Objects.equals(this.fanDuelPosition, playerGame.fanDuelPosition) &&
        Objects.equals(this.fanDuelSalary, playerGame.fanDuelSalary) &&
        Objects.equals(this.fantasyDataSalary, playerGame.fantasyDataSalary) &&
        Objects.equals(this.fantasyDraftPosition, playerGame.fantasyDraftPosition) &&
        Objects.equals(this.fantasyDraftSalary, playerGame.fantasyDraftSalary) &&
        Objects.equals(this.fantasyPoints, playerGame.fantasyPoints) &&
        Objects.equals(this.fantasyPointsDraftKings, playerGame.fantasyPointsDraftKings) &&
        Objects.equals(this.fantasyPointsFanDuel, playerGame.fantasyPointsFanDuel) &&
        Objects.equals(this.fantasyPointsFantasyDraft, playerGame.fantasyPointsFantasyDraft) &&
        Objects.equals(this.fantasyPointsYahoo, playerGame.fantasyPointsYahoo) &&
        Objects.equals(this.gameID, playerGame.gameID) &&
        Objects.equals(this.games, playerGame.games) &&
        Objects.equals(this.giveaways, playerGame.giveaways) &&
        Objects.equals(this.globalGameID, playerGame.globalGameID) &&
        Objects.equals(this.globalOpponentID, playerGame.globalOpponentID) &&
        Objects.equals(this.globalTeamID, playerGame.globalTeamID) &&
        Objects.equals(this.goals, playerGame.goals) &&
        Objects.equals(this.goaltendingGoalsAgainst, playerGame.goaltendingGoalsAgainst) &&
        Objects.equals(this.goaltendingLosses, playerGame.goaltendingLosses) &&
        Objects.equals(this.goaltendingMinutes, playerGame.goaltendingMinutes) &&
        Objects.equals(this.goaltendingOvertimeLosses, playerGame.goaltendingOvertimeLosses) &&
        Objects.equals(this.goaltendingSaves, playerGame.goaltendingSaves) &&
        Objects.equals(this.goaltendingSeconds, playerGame.goaltendingSeconds) &&
        Objects.equals(this.goaltendingShotsAgainst, playerGame.goaltendingShotsAgainst) &&
        Objects.equals(this.goaltendingShutouts, playerGame.goaltendingShutouts) &&
        Objects.equals(this.goaltendingWins, playerGame.goaltendingWins) &&
        Objects.equals(this.hatTricks, playerGame.hatTricks) &&
        Objects.equals(this.hits, playerGame.hits) &&
        Objects.equals(this.homeOrAway, playerGame.homeOrAway) &&
        Objects.equals(this.injuryBodyPart, playerGame.injuryBodyPart) &&
        Objects.equals(this.injuryNotes, playerGame.injuryNotes) &&
        Objects.equals(this.injuryStartDate, playerGame.injuryStartDate) &&
        Objects.equals(this.injuryStatus, playerGame.injuryStatus) &&
        Objects.equals(this.isGameOver, playerGame.isGameOver) &&
        Objects.equals(this.minutes, playerGame.minutes) &&
        Objects.equals(this.name, playerGame.name) &&
        Objects.equals(this.opponent, playerGame.opponent) &&
        Objects.equals(this.opponentID, playerGame.opponentID) &&
        Objects.equals(this.opponentPositionRank, playerGame.opponentPositionRank) &&
        Objects.equals(this.opponentRank, playerGame.opponentRank) &&
        Objects.equals(this.penaltyMinutes, playerGame.penaltyMinutes) &&
        Objects.equals(this.playerID, playerGame.playerID) &&
        Objects.equals(this.plusMinus, playerGame.plusMinus) &&
        Objects.equals(this.position, playerGame.position) &&
        Objects.equals(this.powerPlayAssists, playerGame.powerPlayAssists) &&
        Objects.equals(this.powerPlayGoals, playerGame.powerPlayGoals) &&
        Objects.equals(this.season, playerGame.season) &&
        Objects.equals(this.seasonType, playerGame.seasonType) &&
        Objects.equals(this.seconds, playerGame.seconds) &&
        Objects.equals(this.shifts, playerGame.shifts) &&
        Objects.equals(this.shootoutGoals, playerGame.shootoutGoals) &&
        Objects.equals(this.shortHandedAssists, playerGame.shortHandedAssists) &&
        Objects.equals(this.shortHandedGoals, playerGame.shortHandedGoals) &&
        Objects.equals(this.shotsOnGoal, playerGame.shotsOnGoal) &&
        Objects.equals(this.started, playerGame.started) &&
        Objects.equals(this.statID, playerGame.statID) &&
        Objects.equals(this.takeaways, playerGame.takeaways) &&
        Objects.equals(this.team, playerGame.team) &&
        Objects.equals(this.teamID, playerGame.teamID) &&
        Objects.equals(this.updated, playerGame.updated) &&
        Objects.equals(this.yahooPosition, playerGame.yahooPosition) &&
        Objects.equals(this.yahooSalary, playerGame.yahooSalary);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assists, benchPenaltyMinutes, blocks, dateTime, day, draftKingsPosition, draftKingsSalary, emptyNetGoals, faceoffsLost, faceoffsWon, fanDuelPosition, fanDuelSalary, fantasyDataSalary, fantasyDraftPosition, fantasyDraftSalary, fantasyPoints, fantasyPointsDraftKings, fantasyPointsFanDuel, fantasyPointsFantasyDraft, fantasyPointsYahoo, gameID, games, giveaways, globalGameID, globalOpponentID, globalTeamID, goals, goaltendingGoalsAgainst, goaltendingLosses, goaltendingMinutes, goaltendingOvertimeLosses, goaltendingSaves, goaltendingSeconds, goaltendingShotsAgainst, goaltendingShutouts, goaltendingWins, hatTricks, hits, homeOrAway, injuryBodyPart, injuryNotes, injuryStartDate, injuryStatus, isGameOver, minutes, name, opponent, opponentID, opponentPositionRank, opponentRank, penaltyMinutes, playerID, plusMinus, position, powerPlayAssists, powerPlayGoals, season, seasonType, seconds, shifts, shootoutGoals, shortHandedAssists, shortHandedGoals, shotsOnGoal, started, statID, takeaways, team, teamID, updated, yahooPosition, yahooSalary);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerGame {\n");
    sb.append("    assists: ").append(toIndentedString(assists)).append("\n");
    sb.append("    benchPenaltyMinutes: ").append(toIndentedString(benchPenaltyMinutes)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    draftKingsPosition: ").append(toIndentedString(draftKingsPosition)).append("\n");
    sb.append("    draftKingsSalary: ").append(toIndentedString(draftKingsSalary)).append("\n");
    sb.append("    emptyNetGoals: ").append(toIndentedString(emptyNetGoals)).append("\n");
    sb.append("    faceoffsLost: ").append(toIndentedString(faceoffsLost)).append("\n");
    sb.append("    faceoffsWon: ").append(toIndentedString(faceoffsWon)).append("\n");
    sb.append("    fanDuelPosition: ").append(toIndentedString(fanDuelPosition)).append("\n");
    sb.append("    fanDuelSalary: ").append(toIndentedString(fanDuelSalary)).append("\n");
    sb.append("    fantasyDataSalary: ").append(toIndentedString(fantasyDataSalary)).append("\n");
    sb.append("    fantasyDraftPosition: ").append(toIndentedString(fantasyDraftPosition)).append("\n");
    sb.append("    fantasyDraftSalary: ").append(toIndentedString(fantasyDraftSalary)).append("\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    fantasyPointsDraftKings: ").append(toIndentedString(fantasyPointsDraftKings)).append("\n");
    sb.append("    fantasyPointsFanDuel: ").append(toIndentedString(fantasyPointsFanDuel)).append("\n");
    sb.append("    fantasyPointsFantasyDraft: ").append(toIndentedString(fantasyPointsFantasyDraft)).append("\n");
    sb.append("    fantasyPointsYahoo: ").append(toIndentedString(fantasyPointsYahoo)).append("\n");
    sb.append("    gameID: ").append(toIndentedString(gameID)).append("\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    giveaways: ").append(toIndentedString(giveaways)).append("\n");
    sb.append("    globalGameID: ").append(toIndentedString(globalGameID)).append("\n");
    sb.append("    globalOpponentID: ").append(toIndentedString(globalOpponentID)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    goals: ").append(toIndentedString(goals)).append("\n");
    sb.append("    goaltendingGoalsAgainst: ").append(toIndentedString(goaltendingGoalsAgainst)).append("\n");
    sb.append("    goaltendingLosses: ").append(toIndentedString(goaltendingLosses)).append("\n");
    sb.append("    goaltendingMinutes: ").append(toIndentedString(goaltendingMinutes)).append("\n");
    sb.append("    goaltendingOvertimeLosses: ").append(toIndentedString(goaltendingOvertimeLosses)).append("\n");
    sb.append("    goaltendingSaves: ").append(toIndentedString(goaltendingSaves)).append("\n");
    sb.append("    goaltendingSeconds: ").append(toIndentedString(goaltendingSeconds)).append("\n");
    sb.append("    goaltendingShotsAgainst: ").append(toIndentedString(goaltendingShotsAgainst)).append("\n");
    sb.append("    goaltendingShutouts: ").append(toIndentedString(goaltendingShutouts)).append("\n");
    sb.append("    goaltendingWins: ").append(toIndentedString(goaltendingWins)).append("\n");
    sb.append("    hatTricks: ").append(toIndentedString(hatTricks)).append("\n");
    sb.append("    hits: ").append(toIndentedString(hits)).append("\n");
    sb.append("    homeOrAway: ").append(toIndentedString(homeOrAway)).append("\n");
    sb.append("    injuryBodyPart: ").append(toIndentedString(injuryBodyPart)).append("\n");
    sb.append("    injuryNotes: ").append(toIndentedString(injuryNotes)).append("\n");
    sb.append("    injuryStartDate: ").append(toIndentedString(injuryStartDate)).append("\n");
    sb.append("    injuryStatus: ").append(toIndentedString(injuryStatus)).append("\n");
    sb.append("    isGameOver: ").append(toIndentedString(isGameOver)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    opponentID: ").append(toIndentedString(opponentID)).append("\n");
    sb.append("    opponentPositionRank: ").append(toIndentedString(opponentPositionRank)).append("\n");
    sb.append("    opponentRank: ").append(toIndentedString(opponentRank)).append("\n");
    sb.append("    penaltyMinutes: ").append(toIndentedString(penaltyMinutes)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    plusMinus: ").append(toIndentedString(plusMinus)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    powerPlayAssists: ").append(toIndentedString(powerPlayAssists)).append("\n");
    sb.append("    powerPlayGoals: ").append(toIndentedString(powerPlayGoals)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("    shifts: ").append(toIndentedString(shifts)).append("\n");
    sb.append("    shootoutGoals: ").append(toIndentedString(shootoutGoals)).append("\n");
    sb.append("    shortHandedAssists: ").append(toIndentedString(shortHandedAssists)).append("\n");
    sb.append("    shortHandedGoals: ").append(toIndentedString(shortHandedGoals)).append("\n");
    sb.append("    shotsOnGoal: ").append(toIndentedString(shotsOnGoal)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    statID: ").append(toIndentedString(statID)).append("\n");
    sb.append("    takeaways: ").append(toIndentedString(takeaways)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    yahooPosition: ").append(toIndentedString(yahooPosition)).append("\n");
    sb.append("    yahooSalary: ").append(toIndentedString(yahooSalary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Assists");
    openapiFields.add("BenchPenaltyMinutes");
    openapiFields.add("Blocks");
    openapiFields.add("DateTime");
    openapiFields.add("Day");
    openapiFields.add("DraftKingsPosition");
    openapiFields.add("DraftKingsSalary");
    openapiFields.add("EmptyNetGoals");
    openapiFields.add("FaceoffsLost");
    openapiFields.add("FaceoffsWon");
    openapiFields.add("FanDuelPosition");
    openapiFields.add("FanDuelSalary");
    openapiFields.add("FantasyDataSalary");
    openapiFields.add("FantasyDraftPosition");
    openapiFields.add("FantasyDraftSalary");
    openapiFields.add("FantasyPoints");
    openapiFields.add("FantasyPointsDraftKings");
    openapiFields.add("FantasyPointsFanDuel");
    openapiFields.add("FantasyPointsFantasyDraft");
    openapiFields.add("FantasyPointsYahoo");
    openapiFields.add("GameID");
    openapiFields.add("Games");
    openapiFields.add("Giveaways");
    openapiFields.add("GlobalGameID");
    openapiFields.add("GlobalOpponentID");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("Goals");
    openapiFields.add("GoaltendingGoalsAgainst");
    openapiFields.add("GoaltendingLosses");
    openapiFields.add("GoaltendingMinutes");
    openapiFields.add("GoaltendingOvertimeLosses");
    openapiFields.add("GoaltendingSaves");
    openapiFields.add("GoaltendingSeconds");
    openapiFields.add("GoaltendingShotsAgainst");
    openapiFields.add("GoaltendingShutouts");
    openapiFields.add("GoaltendingWins");
    openapiFields.add("HatTricks");
    openapiFields.add("Hits");
    openapiFields.add("HomeOrAway");
    openapiFields.add("InjuryBodyPart");
    openapiFields.add("InjuryNotes");
    openapiFields.add("InjuryStartDate");
    openapiFields.add("InjuryStatus");
    openapiFields.add("IsGameOver");
    openapiFields.add("Minutes");
    openapiFields.add("Name");
    openapiFields.add("Opponent");
    openapiFields.add("OpponentID");
    openapiFields.add("OpponentPositionRank");
    openapiFields.add("OpponentRank");
    openapiFields.add("PenaltyMinutes");
    openapiFields.add("PlayerID");
    openapiFields.add("PlusMinus");
    openapiFields.add("Position");
    openapiFields.add("PowerPlayAssists");
    openapiFields.add("PowerPlayGoals");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Seconds");
    openapiFields.add("Shifts");
    openapiFields.add("ShootoutGoals");
    openapiFields.add("ShortHandedAssists");
    openapiFields.add("ShortHandedGoals");
    openapiFields.add("ShotsOnGoal");
    openapiFields.add("Started");
    openapiFields.add("StatID");
    openapiFields.add("Takeaways");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("Updated");
    openapiFields.add("YahooPosition");
    openapiFields.add("YahooSalary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerGame
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerGame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerGame is not found in the empty JSON string", PlayerGame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerGame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerGame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("DraftKingsPosition") != null && !jsonObj.get("DraftKingsPosition").isJsonNull()) && !jsonObj.get("DraftKingsPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DraftKingsPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DraftKingsPosition").toString()));
      }
      if ((jsonObj.get("FanDuelPosition") != null && !jsonObj.get("FanDuelPosition").isJsonNull()) && !jsonObj.get("FanDuelPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FanDuelPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FanDuelPosition").toString()));
      }
      if ((jsonObj.get("FantasyDraftPosition") != null && !jsonObj.get("FantasyDraftPosition").isJsonNull()) && !jsonObj.get("FantasyDraftPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyDraftPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyDraftPosition").toString()));
      }
      if ((jsonObj.get("HomeOrAway") != null && !jsonObj.get("HomeOrAway").isJsonNull()) && !jsonObj.get("HomeOrAway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeOrAway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeOrAway").toString()));
      }
      if ((jsonObj.get("InjuryBodyPart") != null && !jsonObj.get("InjuryBodyPart").isJsonNull()) && !jsonObj.get("InjuryBodyPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryBodyPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryBodyPart").toString()));
      }
      if ((jsonObj.get("InjuryNotes") != null && !jsonObj.get("InjuryNotes").isJsonNull()) && !jsonObj.get("InjuryNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryNotes").toString()));
      }
      if ((jsonObj.get("InjuryStartDate") != null && !jsonObj.get("InjuryStartDate").isJsonNull()) && !jsonObj.get("InjuryStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStartDate").toString()));
      }
      if ((jsonObj.get("InjuryStatus") != null && !jsonObj.get("InjuryStatus").isJsonNull()) && !jsonObj.get("InjuryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStatus").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
      if ((jsonObj.get("YahooPosition") != null && !jsonObj.get("YahooPosition").isJsonNull()) && !jsonObj.get("YahooPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YahooPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YahooPosition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerGame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerGame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerGame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerGame.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerGame>() {
           @Override
           public void write(JsonWriter out, PlayerGame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerGame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerGame given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerGame
   * @throws IOException if the JSON string is invalid with respect to PlayerGame
   */
  public static PlayerGame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerGame.class);
  }

  /**
   * Convert an instance of PlayerGame to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

