/**
 * NHL v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScoringPlay model module.
 * @module model/ScoringPlay
 * @version 1.0
 */
class ScoringPlay {
    /**
     * Constructs a new <code>ScoringPlay</code>.
     * @alias module:model/ScoringPlay
     */
    constructor() { 
        
        ScoringPlay.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoringPlay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoringPlay} obj Optional instance to populate.
     * @return {module:model/ScoringPlay} The populated <code>ScoringPlay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoringPlay();

            if (data.hasOwnProperty('AllowedByTeamID')) {
                obj['AllowedByTeamID'] = ApiClient.convertToType(data['AllowedByTeamID'], 'Number');
            }
            if (data.hasOwnProperty('AssistedByPlayerID1')) {
                obj['AssistedByPlayerID1'] = ApiClient.convertToType(data['AssistedByPlayerID1'], 'Number');
            }
            if (data.hasOwnProperty('AssistedByPlayerID2')) {
                obj['AssistedByPlayerID2'] = ApiClient.convertToType(data['AssistedByPlayerID2'], 'Number');
            }
            if (data.hasOwnProperty('AwayTeamScore')) {
                obj['AwayTeamScore'] = ApiClient.convertToType(data['AwayTeamScore'], 'Number');
            }
            if (data.hasOwnProperty('EmptyNet')) {
                obj['EmptyNet'] = ApiClient.convertToType(data['EmptyNet'], 'Boolean');
            }
            if (data.hasOwnProperty('HomeTeamScore')) {
                obj['HomeTeamScore'] = ApiClient.convertToType(data['HomeTeamScore'], 'Number');
            }
            if (data.hasOwnProperty('PeriodID')) {
                obj['PeriodID'] = ApiClient.convertToType(data['PeriodID'], 'Number');
            }
            if (data.hasOwnProperty('PowerPlay')) {
                obj['PowerPlay'] = ApiClient.convertToType(data['PowerPlay'], 'Boolean');
            }
            if (data.hasOwnProperty('ScoredByPlayerID')) {
                obj['ScoredByPlayerID'] = ApiClient.convertToType(data['ScoredByPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('ScoredByTeamID')) {
                obj['ScoredByTeamID'] = ApiClient.convertToType(data['ScoredByTeamID'], 'Number');
            }
            if (data.hasOwnProperty('ScoringPlayID')) {
                obj['ScoringPlayID'] = ApiClient.convertToType(data['ScoringPlayID'], 'Number');
            }
            if (data.hasOwnProperty('Sequence')) {
                obj['Sequence'] = ApiClient.convertToType(data['Sequence'], 'Number');
            }
            if (data.hasOwnProperty('ShortHanded')) {
                obj['ShortHanded'] = ApiClient.convertToType(data['ShortHanded'], 'Boolean');
            }
            if (data.hasOwnProperty('TimeRemainingMinutes')) {
                obj['TimeRemainingMinutes'] = ApiClient.convertToType(data['TimeRemainingMinutes'], 'Number');
            }
            if (data.hasOwnProperty('TimeRemainingSeconds')) {
                obj['TimeRemainingSeconds'] = ApiClient.convertToType(data['TimeRemainingSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoringPlay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoringPlay</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Number} AllowedByTeamID
 */
ScoringPlay.prototype['AllowedByTeamID'] = undefined;

/**
 * @member {Number} AssistedByPlayerID1
 */
ScoringPlay.prototype['AssistedByPlayerID1'] = undefined;

/**
 * @member {Number} AssistedByPlayerID2
 */
ScoringPlay.prototype['AssistedByPlayerID2'] = undefined;

/**
 * @member {Number} AwayTeamScore
 */
ScoringPlay.prototype['AwayTeamScore'] = undefined;

/**
 * @member {Boolean} EmptyNet
 */
ScoringPlay.prototype['EmptyNet'] = undefined;

/**
 * @member {Number} HomeTeamScore
 */
ScoringPlay.prototype['HomeTeamScore'] = undefined;

/**
 * @member {Number} PeriodID
 */
ScoringPlay.prototype['PeriodID'] = undefined;

/**
 * @member {Boolean} PowerPlay
 */
ScoringPlay.prototype['PowerPlay'] = undefined;

/**
 * @member {Number} ScoredByPlayerID
 */
ScoringPlay.prototype['ScoredByPlayerID'] = undefined;

/**
 * @member {Number} ScoredByTeamID
 */
ScoringPlay.prototype['ScoredByTeamID'] = undefined;

/**
 * @member {Number} ScoringPlayID
 */
ScoringPlay.prototype['ScoringPlayID'] = undefined;

/**
 * @member {Number} Sequence
 */
ScoringPlay.prototype['Sequence'] = undefined;

/**
 * @member {Boolean} ShortHanded
 */
ScoringPlay.prototype['ShortHanded'] = undefined;

/**
 * @member {Number} TimeRemainingMinutes
 */
ScoringPlay.prototype['TimeRemainingMinutes'] = undefined;

/**
 * @member {Number} TimeRemainingSeconds
 */
ScoringPlay.prototype['TimeRemainingSeconds'] = undefined;






export default ScoringPlay;

