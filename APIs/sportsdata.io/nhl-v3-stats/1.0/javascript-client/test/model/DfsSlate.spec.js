/**
 * NHL v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NhlV3Stats);
  }
}(this, function(expect, NhlV3Stats) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NhlV3Stats.DfsSlate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DfsSlate', function() {
    it('should create an instance of DfsSlate', function() {
      // uncomment below and update the code to test DfsSlate
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be.a(NhlV3Stats.DfsSlate);
    });

    it('should have the property dfsSlateGames (base name: "DfsSlateGames")', function() {
      // uncomment below and update the code to test the property dfsSlateGames
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property dfsSlatePlayers (base name: "DfsSlatePlayers")', function() {
      // uncomment below and update the code to test the property dfsSlatePlayers
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property isMultiDaySlate (base name: "IsMultiDaySlate")', function() {
      // uncomment below and update the code to test the property isMultiDaySlate
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property numberOfGames (base name: "NumberOfGames")', function() {
      // uncomment below and update the code to test the property numberOfGames
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property operator (base name: "Operator")', function() {
      // uncomment below and update the code to test the property operator
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property operatorDay (base name: "OperatorDay")', function() {
      // uncomment below and update the code to test the property operatorDay
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property operatorGameType (base name: "OperatorGameType")', function() {
      // uncomment below and update the code to test the property operatorGameType
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property operatorName (base name: "OperatorName")', function() {
      // uncomment below and update the code to test the property operatorName
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property operatorSlateID (base name: "OperatorSlateID")', function() {
      // uncomment below and update the code to test the property operatorSlateID
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property operatorStartTime (base name: "OperatorStartTime")', function() {
      // uncomment below and update the code to test the property operatorStartTime
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property removedByOperator (base name: "RemovedByOperator")', function() {
      // uncomment below and update the code to test the property removedByOperator
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property salaryCap (base name: "SalaryCap")', function() {
      // uncomment below and update the code to test the property salaryCap
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property slateID (base name: "SlateID")', function() {
      // uncomment below and update the code to test the property slateID
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

    it('should have the property slateRosterSlots (base name: "SlateRosterSlots")', function() {
      // uncomment below and update the code to test the property slateRosterSlots
      //var instance = new NhlV3Stats.DfsSlate();
      //expect(instance).to.be();
    });

  });

}));
