/**
 * NHL v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerLine::OAIPlayerLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerLine::OAIPlayerLine() {
    this->initializeModel();
}

OAIPlayerLine::~OAIPlayerLine() {}

void OAIPlayerLine::initializeModel() {

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_shoots_isSet = false;
    m_shoots_isValid = false;
}

void OAIPlayerLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerLine::fromJsonObject(QJsonObject json) {

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("LineNumber")]);
    m_line_number_isSet = !json[QString("LineNumber")].isNull() && m_line_number_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("LineType")]);
    m_line_type_isSet = !json[QString("LineType")].isNull() && m_line_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_shoots_isValid = ::OpenAPI::fromJsonValue(m_shoots, json[QString("Shoots")]);
    m_shoots_isSet = !json[QString("Shoots")].isNull() && m_shoots_isValid;
}

QString OAIPlayerLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerLine::asJsonObject() const {
    QJsonObject obj;
    if (m_line_number_isSet) {
        obj.insert(QString("LineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_line_type_isSet) {
        obj.insert(QString("LineType"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_shoots_isSet) {
        obj.insert(QString("Shoots"), ::OpenAPI::toJsonValue(m_shoots));
    }
    return obj;
}

qint32 OAIPlayerLine::getLineNumber() const {
    return m_line_number;
}
void OAIPlayerLine::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIPlayerLine::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIPlayerLine::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIPlayerLine::getLineType() const {
    return m_line_type;
}
void OAIPlayerLine::setLineType(const QString &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAIPlayerLine::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAIPlayerLine::is_line_type_Valid() const{
    return m_line_type_isValid;
}

QString OAIPlayerLine::getName() const {
    return m_name;
}
void OAIPlayerLine::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerLine::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerLine::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerLine::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerLine::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerLine::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerLine::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerLine::getPosition() const {
    return m_position;
}
void OAIPlayerLine::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerLine::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerLine::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerLine::getShoots() const {
    return m_shoots;
}
void OAIPlayerLine::setShoots(const QString &shoots) {
    m_shoots = shoots;
    m_shoots_isSet = true;
}

bool OAIPlayerLine::is_shoots_Set() const{
    return m_shoots_isSet;
}

bool OAIPlayerLine::is_shoots_Valid() const{
    return m_shoots_isValid;
}

bool OAIPlayerLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shoots_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
