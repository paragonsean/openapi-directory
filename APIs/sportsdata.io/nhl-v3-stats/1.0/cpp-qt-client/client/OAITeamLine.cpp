/**
 * NHL v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamLine::OAITeamLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamLine::OAITeamLine() {
    this->initializeModel();
}

OAITeamLine::~OAITeamLine() {}

void OAITeamLine::initializeModel() {

    m_even_strength_lines_isSet = false;
    m_even_strength_lines_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_power_play_lines_isSet = false;
    m_power_play_lines_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAITeamLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamLine::fromJsonObject(QJsonObject json) {

    m_even_strength_lines_isValid = ::OpenAPI::fromJsonValue(m_even_strength_lines, json[QString("EvenStrengthLines")]);
    m_even_strength_lines_isSet = !json[QString("EvenStrengthLines")].isNull() && m_even_strength_lines_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_power_play_lines_isValid = ::OpenAPI::fromJsonValue(m_power_play_lines, json[QString("PowerPlayLines")]);
    m_power_play_lines_isSet = !json[QString("PowerPlayLines")].isNull() && m_power_play_lines_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;
}

QString OAITeamLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamLine::asJsonObject() const {
    QJsonObject obj;
    if (m_even_strength_lines.size() > 0) {
        obj.insert(QString("EvenStrengthLines"), ::OpenAPI::toJsonValue(m_even_strength_lines));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_power_play_lines.size() > 0) {
        obj.insert(QString("PowerPlayLines"), ::OpenAPI::toJsonValue(m_power_play_lines));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

QList<OAIPlayerLine> OAITeamLine::getEvenStrengthLines() const {
    return m_even_strength_lines;
}
void OAITeamLine::setEvenStrengthLines(const QList<OAIPlayerLine> &even_strength_lines) {
    m_even_strength_lines = even_strength_lines;
    m_even_strength_lines_isSet = true;
}

bool OAITeamLine::is_even_strength_lines_Set() const{
    return m_even_strength_lines_isSet;
}

bool OAITeamLine::is_even_strength_lines_Valid() const{
    return m_even_strength_lines_isValid;
}

QString OAITeamLine::getFullName() const {
    return m_full_name;
}
void OAITeamLine::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAITeamLine::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAITeamLine::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAITeamLine::getKey() const {
    return m_key;
}
void OAITeamLine::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITeamLine::is_key_Set() const{
    return m_key_isSet;
}

bool OAITeamLine::is_key_Valid() const{
    return m_key_isValid;
}

QList<OAIPlayerLine> OAITeamLine::getPowerPlayLines() const {
    return m_power_play_lines;
}
void OAITeamLine::setPowerPlayLines(const QList<OAIPlayerLine> &power_play_lines) {
    m_power_play_lines = power_play_lines;
    m_power_play_lines_isSet = true;
}

bool OAITeamLine::is_power_play_lines_Set() const{
    return m_power_play_lines_isSet;
}

bool OAITeamLine::is_power_play_lines_Valid() const{
    return m_power_play_lines_isValid;
}

qint32 OAITeamLine::getTeamId() const {
    return m_team_id;
}
void OAITeamLine::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamLine::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamLine::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAITeamLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_even_strength_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_play_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
