/**
 * Soccer v3 Projections
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SoccerV3Projections);
  }
}(this, function(expect, SoccerV3Projections) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SoccerV3Projections.Game();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Game', function() {
    it('should create an instance of Game', function() {
      // uncomment below and update the code to test Game
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be.a(SoccerV3Projections.Game);
    });

    it('should have the property attendance (base name: "Attendance")', function() {
      // uncomment below and update the code to test the property attendance
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamCountryCode (base name: "AwayTeamCountryCode")', function() {
      // uncomment below and update the code to test the property awayTeamCountryCode
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamFormation (base name: "AwayTeamFormation")', function() {
      // uncomment below and update the code to test the property awayTeamFormation
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamId (base name: "AwayTeamId")', function() {
      // uncomment below and update the code to test the property awayTeamId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamKey (base name: "AwayTeamKey")', function() {
      // uncomment below and update the code to test the property awayTeamKey
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamMoneyLine (base name: "AwayTeamMoneyLine")', function() {
      // uncomment below and update the code to test the property awayTeamMoneyLine
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamName (base name: "AwayTeamName")', function() {
      // uncomment below and update the code to test the property awayTeamName
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamPointSpreadPayout (base name: "AwayTeamPointSpreadPayout")', function() {
      // uncomment below and update the code to test the property awayTeamPointSpreadPayout
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamScore (base name: "AwayTeamScore")', function() {
      // uncomment below and update the code to test the property awayTeamScore
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamScoreExtraTime (base name: "AwayTeamScoreExtraTime")', function() {
      // uncomment below and update the code to test the property awayTeamScoreExtraTime
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamScorePenalty (base name: "AwayTeamScorePenalty")', function() {
      // uncomment below and update the code to test the property awayTeamScorePenalty
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamScorePeriod1 (base name: "AwayTeamScorePeriod1")', function() {
      // uncomment below and update the code to test the property awayTeamScorePeriod1
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamScorePeriod2 (base name: "AwayTeamScorePeriod2")', function() {
      // uncomment below and update the code to test the property awayTeamScorePeriod2
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property clock (base name: "Clock")', function() {
      // uncomment below and update the code to test the property clock
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property clockDisplay (base name: "ClockDisplay")', function() {
      // uncomment below and update the code to test the property clockDisplay
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property clockExtra (base name: "ClockExtra")', function() {
      // uncomment below and update the code to test the property clockExtra
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property dateTime (base name: "DateTime")', function() {
      // uncomment below and update the code to test the property dateTime
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property day (base name: "Day")', function() {
      // uncomment below and update the code to test the property day
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property drawMoneyLine (base name: "DrawMoneyLine")', function() {
      // uncomment below and update the code to test the property drawMoneyLine
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property gameId (base name: "GameId")', function() {
      // uncomment below and update the code to test the property gameId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property globalAwayTeamId (base name: "GlobalAwayTeamId")', function() {
      // uncomment below and update the code to test the property globalAwayTeamId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property globalGameId (base name: "GlobalGameId")', function() {
      // uncomment below and update the code to test the property globalGameId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property globalHomeTeamId (base name: "GlobalHomeTeamId")', function() {
      // uncomment below and update the code to test the property globalHomeTeamId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "Group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamCountryCode (base name: "HomeTeamCountryCode")', function() {
      // uncomment below and update the code to test the property homeTeamCountryCode
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamFormation (base name: "HomeTeamFormation")', function() {
      // uncomment below and update the code to test the property homeTeamFormation
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamId (base name: "HomeTeamId")', function() {
      // uncomment below and update the code to test the property homeTeamId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamKey (base name: "HomeTeamKey")', function() {
      // uncomment below and update the code to test the property homeTeamKey
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamMoneyLine (base name: "HomeTeamMoneyLine")', function() {
      // uncomment below and update the code to test the property homeTeamMoneyLine
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamName (base name: "HomeTeamName")', function() {
      // uncomment below and update the code to test the property homeTeamName
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamPointSpreadPayout (base name: "HomeTeamPointSpreadPayout")', function() {
      // uncomment below and update the code to test the property homeTeamPointSpreadPayout
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamScore (base name: "HomeTeamScore")', function() {
      // uncomment below and update the code to test the property homeTeamScore
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamScoreExtraTime (base name: "HomeTeamScoreExtraTime")', function() {
      // uncomment below and update the code to test the property homeTeamScoreExtraTime
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamScorePenalty (base name: "HomeTeamScorePenalty")', function() {
      // uncomment below and update the code to test the property homeTeamScorePenalty
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamScorePeriod1 (base name: "HomeTeamScorePeriod1")', function() {
      // uncomment below and update the code to test the property homeTeamScorePeriod1
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamScorePeriod2 (base name: "HomeTeamScorePeriod2")', function() {
      // uncomment below and update the code to test the property homeTeamScorePeriod2
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property isClosed (base name: "IsClosed")', function() {
      // uncomment below and update the code to test the property isClosed
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property overPayout (base name: "OverPayout")', function() {
      // uncomment below and update the code to test the property overPayout
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property overUnder (base name: "OverUnder")', function() {
      // uncomment below and update the code to test the property overUnder
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property period (base name: "Period")', function() {
      // uncomment below and update the code to test the property period
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property playoffAggregateScore (base name: "PlayoffAggregateScore")', function() {
      // uncomment below and update the code to test the property playoffAggregateScore
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property pointSpread (base name: "PointSpread")', function() {
      // uncomment below and update the code to test the property pointSpread
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property roundId (base name: "RoundId")', function() {
      // uncomment below and update the code to test the property roundId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property season (base name: "Season")', function() {
      // uncomment below and update the code to test the property season
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property seasonType (base name: "SeasonType")', function() {
      // uncomment below and update the code to test the property seasonType
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property underPayout (base name: "UnderPayout")', function() {
      // uncomment below and update the code to test the property underPayout
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "Updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property updatedUtc (base name: "UpdatedUtc")', function() {
      // uncomment below and update the code to test the property updatedUtc
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property venueId (base name: "VenueId")', function() {
      // uncomment below and update the code to test the property venueId
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property venueType (base name: "VenueType")', function() {
      // uncomment below and update the code to test the property venueType
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property week (base name: "Week")', function() {
      // uncomment below and update the code to test the property week
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

    it('should have the property winner (base name: "Winner")', function() {
      // uncomment below and update the code to test the property winner
      //var instance = new SoccerV3Projections.Game();
      //expect(instance).to.be();
    });

  });

}));
