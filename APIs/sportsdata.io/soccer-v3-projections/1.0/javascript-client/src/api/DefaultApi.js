/**
 * Soccer v3 Projections
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DfsSlate from '../model/DfsSlate';
import Player from '../model/Player';
import PlayerGameProjection from '../model/PlayerGameProjection';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dfsSlatesByDate operation.
     * @callback module:api/DefaultApi~dfsSlatesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dfs Slates By Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2020-02-18</code> 
     * @param {module:api/DefaultApi~dfsSlatesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dfsSlatesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuredPlayersByCompetition operation.
     * @callback module:api/DefaultApi~injuredPlayersByCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injured Players By Competition
     * This endpoint provides all currently injured soccer players by competition, along with injury details.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competition An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
     * @param {module:api/DefaultApi~injuredPlayersByCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    injuredPlayersByCompetition(format, competition, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuredPlayersByCompetition");
      }
      // verify the required parameter 'competition' is set
      if (competition === undefined || competition === null) {
        throw new Error("Missing the required parameter 'competition' when calling injuredPlayersByCompetition");
      }

      let pathParams = {
        'format': format,
        'competition': competition
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/InjuredPlayers/{competition}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByCompetitionWDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByCompetitionWDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Competition (w/ DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competition An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByCompetitionWDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    projectedPlayerGameStatsByCompetitionWDfsSalaries(format, competition, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByCompetitionWDfsSalaries");
      }
      // verify the required parameter 'competition' is set
      if (competition === undefined || competition === null) {
        throw new Error("Missing the required parameter 'competition' when calling projectedPlayerGameStatsByCompetitionWDfsSalaries");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling projectedPlayerGameStatsByCompetitionWDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'competition': competition,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByCompetition/{competition}/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByDateWDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByDateWDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Date (w/ DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByDateWDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    projectedPlayerGameStatsByDateWDfsSalaries(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByDateWDfsSalaries");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling projectedPlayerGameStatsByDateWDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByPlayerWDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByPlayerWDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Player (w/ DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-02-27</code>, <code>2017-09-01</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>90026231</code>.
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByPlayerWDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    projectedPlayerGameStatsByPlayerWDfsSalaries(format, date, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByPlayerWDfsSalaries");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling projectedPlayerGameStatsByPlayerWDfsSalaries");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling projectedPlayerGameStatsByPlayerWDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'date': date,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upcomingDfsSlatesByCompetition operation.
     * @callback module:api/DefaultApi~upcomingDfsSlatesByCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upcoming Dfs Slates By Competition
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competitionId The Competition Id. <br>Examples: <code>3</code>
     * @param {module:api/DefaultApi~upcomingDfsSlatesByCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    upcomingDfsSlatesByCompetition(format, competitionId, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling upcomingDfsSlatesByCompetition");
      }
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling upcomingDfsSlatesByCompetition");
      }

      let pathParams = {
        'format': format,
        'competitionId': competitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/UpcomingDfsSlatesByCompetition/{competitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
