/**
 * Soccer v3 Projections
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDfsSlatePlayer.h
 *
 * 
 */

#ifndef OAIDfsSlatePlayer_H
#define OAIDfsSlatePlayer_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDfsSlatePlayer : public OAIObject {
public:
    OAIDfsSlatePlayer();
    OAIDfsSlatePlayer(QString json);
    ~OAIDfsSlatePlayer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getOperatorPlayerId() const;
    void setOperatorPlayerId(const QString &operator_player_id);
    bool is_operator_player_id_Set() const;
    bool is_operator_player_id_Valid() const;

    QString getOperatorPlayerName() const;
    void setOperatorPlayerName(const QString &operator_player_name);
    bool is_operator_player_name_Set() const;
    bool is_operator_player_name_Valid() const;

    QString getOperatorPosition() const;
    void setOperatorPosition(const QString &operator_position);
    bool is_operator_position_Set() const;
    bool is_operator_position_Valid() const;

    QList<QString> getOperatorRosterSlots() const;
    void setOperatorRosterSlots(const QList<QString> &operator_roster_slots);
    bool is_operator_roster_slots_Set() const;
    bool is_operator_roster_slots_Valid() const;

    qint32 getOperatorSalary() const;
    void setOperatorSalary(const qint32 &operator_salary);
    bool is_operator_salary_Set() const;
    bool is_operator_salary_Valid() const;

    QString getOperatorSlatePlayerId() const;
    void setOperatorSlatePlayerId(const QString &operator_slate_player_id);
    bool is_operator_slate_player_id_Set() const;
    bool is_operator_slate_player_id_Valid() const;

    qint32 getPlayerGameProjectionStatId() const;
    void setPlayerGameProjectionStatId(const qint32 &player_game_projection_stat_id);
    bool is_player_game_projection_stat_id_Set() const;
    bool is_player_game_projection_stat_id_Valid() const;

    qint32 getPlayerId() const;
    void setPlayerId(const qint32 &player_id);
    bool is_player_id_Set() const;
    bool is_player_id_Valid() const;

    bool isRemovedByOperator() const;
    void setRemovedByOperator(const bool &removed_by_operator);
    bool is_removed_by_operator_Set() const;
    bool is_removed_by_operator_Valid() const;

    qint32 getSlateGameId() const;
    void setSlateGameId(const qint32 &slate_game_id);
    bool is_slate_game_id_Set() const;
    bool is_slate_game_id_Valid() const;

    qint32 getSlateId() const;
    void setSlateId(const qint32 &slate_id);
    bool is_slate_id_Set() const;
    bool is_slate_id_Valid() const;

    qint32 getSlatePlayerId() const;
    void setSlatePlayerId(const qint32 &slate_player_id);
    bool is_slate_player_id_Set() const;
    bool is_slate_player_id_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_operator_player_id;
    bool m_operator_player_id_isSet;
    bool m_operator_player_id_isValid;

    QString m_operator_player_name;
    bool m_operator_player_name_isSet;
    bool m_operator_player_name_isValid;

    QString m_operator_position;
    bool m_operator_position_isSet;
    bool m_operator_position_isValid;

    QList<QString> m_operator_roster_slots;
    bool m_operator_roster_slots_isSet;
    bool m_operator_roster_slots_isValid;

    qint32 m_operator_salary;
    bool m_operator_salary_isSet;
    bool m_operator_salary_isValid;

    QString m_operator_slate_player_id;
    bool m_operator_slate_player_id_isSet;
    bool m_operator_slate_player_id_isValid;

    qint32 m_player_game_projection_stat_id;
    bool m_player_game_projection_stat_id_isSet;
    bool m_player_game_projection_stat_id_isValid;

    qint32 m_player_id;
    bool m_player_id_isSet;
    bool m_player_id_isValid;

    bool m_removed_by_operator;
    bool m_removed_by_operator_isSet;
    bool m_removed_by_operator_isValid;

    qint32 m_slate_game_id;
    bool m_slate_game_id_isSet;
    bool m_slate_game_id_isValid;

    qint32 m_slate_id;
    bool m_slate_id_isSet;
    bool m_slate_id_isValid;

    qint32 m_slate_player_id;
    bool m_slate_player_id_isSet;
    bool m_slate_player_id_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDfsSlatePlayer)

#endif // OAIDfsSlatePlayer_H
