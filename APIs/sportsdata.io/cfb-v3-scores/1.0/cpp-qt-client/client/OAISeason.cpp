/**
 * CFB v3 Scores
 * CFB schedules, scores, team stats, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeason::OAISeason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeason::OAISeason() {
    this->initializeModel();
}

OAISeason::~OAISeason() {}

void OAISeason::initializeModel() {

    m_api_season_isSet = false;
    m_api_season_isValid = false;

    m_api_week_isSet = false;
    m_api_week_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_year_isSet = false;
    m_end_year_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_start_year_isSet = false;
    m_start_year_isValid = false;
}

void OAISeason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeason::fromJsonObject(QJsonObject json) {

    m_api_season_isValid = ::OpenAPI::fromJsonValue(m_api_season, json[QString("ApiSeason")]);
    m_api_season_isSet = !json[QString("ApiSeason")].isNull() && m_api_season_isValid;

    m_api_week_isValid = ::OpenAPI::fromJsonValue(m_api_week, json[QString("ApiWeek")]);
    m_api_week_isSet = !json[QString("ApiWeek")].isNull() && m_api_week_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_end_year_isValid = ::OpenAPI::fromJsonValue(m_end_year, json[QString("EndYear")]);
    m_end_year_isSet = !json[QString("EndYear")].isNull() && m_end_year_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_start_year_isValid = ::OpenAPI::fromJsonValue(m_start_year, json[QString("StartYear")]);
    m_start_year_isSet = !json[QString("StartYear")].isNull() && m_start_year_isValid;
}

QString OAISeason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeason::asJsonObject() const {
    QJsonObject obj;
    if (m_api_season_isSet) {
        obj.insert(QString("ApiSeason"), ::OpenAPI::toJsonValue(m_api_season));
    }
    if (m_api_week_isSet) {
        obj.insert(QString("ApiWeek"), ::OpenAPI::toJsonValue(m_api_week));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_year_isSet) {
        obj.insert(QString("EndYear"), ::OpenAPI::toJsonValue(m_end_year));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_start_year_isSet) {
        obj.insert(QString("StartYear"), ::OpenAPI::toJsonValue(m_start_year));
    }
    return obj;
}

QString OAISeason::getApiSeason() const {
    return m_api_season;
}
void OAISeason::setApiSeason(const QString &api_season) {
    m_api_season = api_season;
    m_api_season_isSet = true;
}

bool OAISeason::is_api_season_Set() const{
    return m_api_season_isSet;
}

bool OAISeason::is_api_season_Valid() const{
    return m_api_season_isValid;
}

qint32 OAISeason::getApiWeek() const {
    return m_api_week;
}
void OAISeason::setApiWeek(const qint32 &api_week) {
    m_api_week = api_week;
    m_api_week_isSet = true;
}

bool OAISeason::is_api_week_Set() const{
    return m_api_week_isSet;
}

bool OAISeason::is_api_week_Valid() const{
    return m_api_week_isValid;
}

QString OAISeason::getDescription() const {
    return m_description;
}
void OAISeason::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISeason::is_description_Set() const{
    return m_description_isSet;
}

bool OAISeason::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAISeason::getEndYear() const {
    return m_end_year;
}
void OAISeason::setEndYear(const qint32 &end_year) {
    m_end_year = end_year;
    m_end_year_isSet = true;
}

bool OAISeason::is_end_year_Set() const{
    return m_end_year_isSet;
}

bool OAISeason::is_end_year_Valid() const{
    return m_end_year_isValid;
}

qint32 OAISeason::getSeason() const {
    return m_season;
}
void OAISeason::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAISeason::is_season_Set() const{
    return m_season_isSet;
}

bool OAISeason::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAISeason::getStartYear() const {
    return m_start_year;
}
void OAISeason::setStartYear(const qint32 &start_year) {
    m_start_year = start_year;
    m_start_year_isSet = true;
}

bool OAISeason::is_start_year_Set() const{
    return m_start_year_isSet;
}

bool OAISeason::is_start_year_Valid() const{
    return m_start_year_isValid;
}

bool OAISeason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
