/**
 * CFB v3 Scores
 * CFB schedules, scores, team stats, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConference::OAIConference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConference::OAIConference() {
    this->initializeModel();
}

OAIConference::~OAIConference() {}

void OAIConference::initializeModel() {

    m_conference_id_isSet = false;
    m_conference_id_isValid = false;

    m_conference_name_isSet = false;
    m_conference_name_isValid = false;

    m_division_name_isSet = false;
    m_division_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;
}

void OAIConference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConference::fromJsonObject(QJsonObject json) {

    m_conference_id_isValid = ::OpenAPI::fromJsonValue(m_conference_id, json[QString("ConferenceID")]);
    m_conference_id_isSet = !json[QString("ConferenceID")].isNull() && m_conference_id_isValid;

    m_conference_name_isValid = ::OpenAPI::fromJsonValue(m_conference_name, json[QString("ConferenceName")]);
    m_conference_name_isSet = !json[QString("ConferenceName")].isNull() && m_conference_name_isValid;

    m_division_name_isValid = ::OpenAPI::fromJsonValue(m_division_name, json[QString("DivisionName")]);
    m_division_name_isSet = !json[QString("DivisionName")].isNull() && m_division_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("Teams")]);
    m_teams_isSet = !json[QString("Teams")].isNull() && m_teams_isValid;
}

QString OAIConference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConference::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_id_isSet) {
        obj.insert(QString("ConferenceID"), ::OpenAPI::toJsonValue(m_conference_id));
    }
    if (m_conference_name_isSet) {
        obj.insert(QString("ConferenceName"), ::OpenAPI::toJsonValue(m_conference_name));
    }
    if (m_division_name_isSet) {
        obj.insert(QString("DivisionName"), ::OpenAPI::toJsonValue(m_division_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("Teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    return obj;
}

qint32 OAIConference::getConferenceId() const {
    return m_conference_id;
}
void OAIConference::setConferenceId(const qint32 &conference_id) {
    m_conference_id = conference_id;
    m_conference_id_isSet = true;
}

bool OAIConference::is_conference_id_Set() const{
    return m_conference_id_isSet;
}

bool OAIConference::is_conference_id_Valid() const{
    return m_conference_id_isValid;
}

QString OAIConference::getConferenceName() const {
    return m_conference_name;
}
void OAIConference::setConferenceName(const QString &conference_name) {
    m_conference_name = conference_name;
    m_conference_name_isSet = true;
}

bool OAIConference::is_conference_name_Set() const{
    return m_conference_name_isSet;
}

bool OAIConference::is_conference_name_Valid() const{
    return m_conference_name_isValid;
}

QString OAIConference::getDivisionName() const {
    return m_division_name;
}
void OAIConference::setDivisionName(const QString &division_name) {
    m_division_name = division_name;
    m_division_name_isSet = true;
}

bool OAIConference::is_division_name_Set() const{
    return m_division_name_isSet;
}

bool OAIConference::is_division_name_Valid() const{
    return m_division_name_isValid;
}

QString OAIConference::getName() const {
    return m_name;
}
void OAIConference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConference::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITeam> OAIConference::getTeams() const {
    return m_teams;
}
void OAIConference::setTeams(const QList<OAITeam> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIConference::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIConference::is_teams_Valid() const{
    return m_teams_isValid;
}

bool OAIConference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
