/**
 * CFB v3 Scores
 * CFB schedules, scores, team stats, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamSeason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamSeason::OAITeamSeason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamSeason::OAITeamSeason() {
    this->initializeModel();
}

OAITeamSeason::~OAITeamSeason() {}

void OAITeamSeason::initializeModel() {

    m_assisted_tackles_isSet = false;
    m_assisted_tackles_isValid = false;

    m_conference_losses_isSet = false;
    m_conference_losses_isValid = false;

    m_conference_points_against_isSet = false;
    m_conference_points_against_isValid = false;

    m_conference_points_for_isSet = false;
    m_conference_points_for_isValid = false;

    m_conference_rank_isSet = false;
    m_conference_rank_isValid = false;

    m_conference_wins_isSet = false;
    m_conference_wins_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_division_rank_isSet = false;
    m_division_rank_isValid = false;

    m_extra_points_attempted_isSet = false;
    m_extra_points_attempted_isValid = false;

    m_extra_points_made_isSet = false;
    m_extra_points_made_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_field_goal_percentage_isSet = false;
    m_field_goal_percentage_isValid = false;

    m_field_goals_attempted_isSet = false;
    m_field_goals_attempted_isValid = false;

    m_field_goals_longest_made_isSet = false;
    m_field_goals_longest_made_isValid = false;

    m_field_goals_made_isSet = false;
    m_field_goals_made_isValid = false;

    m_first_downs_isSet = false;
    m_first_downs_isValid = false;

    m_fourth_down_attempts_isSet = false;
    m_fourth_down_attempts_isValid = false;

    m_fourth_down_conversions_isSet = false;
    m_fourth_down_conversions_isValid = false;

    m_fumble_return_touchdowns_isSet = false;
    m_fumble_return_touchdowns_isValid = false;

    m_fumbles_isSet = false;
    m_fumbles_isValid = false;

    m_fumbles_lost_isSet = false;
    m_fumbles_lost_isValid = false;

    m_fumbles_recovered_isSet = false;
    m_fumbles_recovered_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_home_losses_isSet = false;
    m_home_losses_isValid = false;

    m_home_wins_isSet = false;
    m_home_wins_isValid = false;

    m_interception_return_touchdowns_isSet = false;
    m_interception_return_touchdowns_isValid = false;

    m_interception_return_yards_isSet = false;
    m_interception_return_yards_isValid = false;

    m_interceptions_isSet = false;
    m_interceptions_isValid = false;

    m_kick_return_long_isSet = false;
    m_kick_return_long_isValid = false;

    m_kick_return_touchdowns_isSet = false;
    m_kick_return_touchdowns_isValid = false;

    m_kick_return_yards_isSet = false;
    m_kick_return_yards_isValid = false;

    m_kick_return_yards_per_attempt_isSet = false;
    m_kick_return_yards_per_attempt_isValid = false;

    m_kick_returns_isSet = false;
    m_kick_returns_isValid = false;

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opponent_score_isSet = false;
    m_opponent_score_isValid = false;

    m_passes_defended_isSet = false;
    m_passes_defended_isValid = false;

    m_passing_attempts_isSet = false;
    m_passing_attempts_isValid = false;

    m_passing_completion_percentage_isSet = false;
    m_passing_completion_percentage_isValid = false;

    m_passing_completions_isSet = false;
    m_passing_completions_isValid = false;

    m_passing_interceptions_isSet = false;
    m_passing_interceptions_isValid = false;

    m_passing_rating_isSet = false;
    m_passing_rating_isValid = false;

    m_passing_touchdowns_isSet = false;
    m_passing_touchdowns_isValid = false;

    m_passing_yards_isSet = false;
    m_passing_yards_isValid = false;

    m_passing_yards_per_attempt_isSet = false;
    m_passing_yards_per_attempt_isValid = false;

    m_passing_yards_per_completion_isSet = false;
    m_passing_yards_per_completion_isValid = false;

    m_penalties_isSet = false;
    m_penalties_isValid = false;

    m_penalty_yards_isSet = false;
    m_penalty_yards_isValid = false;

    m_points_against_isSet = false;
    m_points_against_isValid = false;

    m_points_for_isSet = false;
    m_points_for_isValid = false;

    m_punt_average_isSet = false;
    m_punt_average_isValid = false;

    m_punt_long_isSet = false;
    m_punt_long_isValid = false;

    m_punt_return_long_isSet = false;
    m_punt_return_long_isValid = false;

    m_punt_return_touchdowns_isSet = false;
    m_punt_return_touchdowns_isValid = false;

    m_punt_return_yards_isSet = false;
    m_punt_return_yards_isValid = false;

    m_punt_return_yards_per_attempt_isSet = false;
    m_punt_return_yards_per_attempt_isValid = false;

    m_punt_returns_isSet = false;
    m_punt_returns_isValid = false;

    m_punt_yards_isSet = false;
    m_punt_yards_isValid = false;

    m_punts_isSet = false;
    m_punts_isValid = false;

    m_quarterback_hurries_isSet = false;
    m_quarterback_hurries_isValid = false;

    m_receiving_long_isSet = false;
    m_receiving_long_isValid = false;

    m_receiving_touchdowns_isSet = false;
    m_receiving_touchdowns_isValid = false;

    m_receiving_yards_isSet = false;
    m_receiving_yards_isValid = false;

    m_receiving_yards_per_reception_isSet = false;
    m_receiving_yards_per_reception_isValid = false;

    m_receptions_isSet = false;
    m_receptions_isValid = false;

    m_road_losses_isSet = false;
    m_road_losses_isValid = false;

    m_road_wins_isSet = false;
    m_road_wins_isValid = false;

    m_rushing_attempts_isSet = false;
    m_rushing_attempts_isValid = false;

    m_rushing_long_isSet = false;
    m_rushing_long_isValid = false;

    m_rushing_touchdowns_isSet = false;
    m_rushing_touchdowns_isValid = false;

    m_rushing_yards_isSet = false;
    m_rushing_yards_isValid = false;

    m_rushing_yards_per_attempt_isSet = false;
    m_rushing_yards_per_attempt_isValid = false;

    m_sacks_isSet = false;
    m_sacks_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_solo_tackles_isSet = false;
    m_solo_tackles_isValid = false;

    m_stat_id_isSet = false;
    m_stat_id_isValid = false;

    m_streak_isSet = false;
    m_streak_isValid = false;

    m_tackles_for_loss_isSet = false;
    m_tackles_for_loss_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_third_down_attempts_isSet = false;
    m_third_down_attempts_isValid = false;

    m_third_down_conversions_isSet = false;
    m_third_down_conversions_isValid = false;

    m_time_of_possession_minutes_isSet = false;
    m_time_of_possession_minutes_isValid = false;

    m_time_of_possession_seconds_isSet = false;
    m_time_of_possession_seconds_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAITeamSeason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamSeason::fromJsonObject(QJsonObject json) {

    m_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_assisted_tackles, json[QString("AssistedTackles")]);
    m_assisted_tackles_isSet = !json[QString("AssistedTackles")].isNull() && m_assisted_tackles_isValid;

    m_conference_losses_isValid = ::OpenAPI::fromJsonValue(m_conference_losses, json[QString("ConferenceLosses")]);
    m_conference_losses_isSet = !json[QString("ConferenceLosses")].isNull() && m_conference_losses_isValid;

    m_conference_points_against_isValid = ::OpenAPI::fromJsonValue(m_conference_points_against, json[QString("ConferencePointsAgainst")]);
    m_conference_points_against_isSet = !json[QString("ConferencePointsAgainst")].isNull() && m_conference_points_against_isValid;

    m_conference_points_for_isValid = ::OpenAPI::fromJsonValue(m_conference_points_for, json[QString("ConferencePointsFor")]);
    m_conference_points_for_isSet = !json[QString("ConferencePointsFor")].isNull() && m_conference_points_for_isValid;

    m_conference_rank_isValid = ::OpenAPI::fromJsonValue(m_conference_rank, json[QString("ConferenceRank")]);
    m_conference_rank_isSet = !json[QString("ConferenceRank")].isNull() && m_conference_rank_isValid;

    m_conference_wins_isValid = ::OpenAPI::fromJsonValue(m_conference_wins, json[QString("ConferenceWins")]);
    m_conference_wins_isSet = !json[QString("ConferenceWins")].isNull() && m_conference_wins_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_division_rank_isValid = ::OpenAPI::fromJsonValue(m_division_rank, json[QString("DivisionRank")]);
    m_division_rank_isSet = !json[QString("DivisionRank")].isNull() && m_division_rank_isValid;

    m_extra_points_attempted_isValid = ::OpenAPI::fromJsonValue(m_extra_points_attempted, json[QString("ExtraPointsAttempted")]);
    m_extra_points_attempted_isSet = !json[QString("ExtraPointsAttempted")].isNull() && m_extra_points_attempted_isValid;

    m_extra_points_made_isValid = ::OpenAPI::fromJsonValue(m_extra_points_made, json[QString("ExtraPointsMade")]);
    m_extra_points_made_isSet = !json[QString("ExtraPointsMade")].isNull() && m_extra_points_made_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_field_goal_percentage_isValid = ::OpenAPI::fromJsonValue(m_field_goal_percentage, json[QString("FieldGoalPercentage")]);
    m_field_goal_percentage_isSet = !json[QString("FieldGoalPercentage")].isNull() && m_field_goal_percentage_isValid;

    m_field_goals_attempted_isValid = ::OpenAPI::fromJsonValue(m_field_goals_attempted, json[QString("FieldGoalsAttempted")]);
    m_field_goals_attempted_isSet = !json[QString("FieldGoalsAttempted")].isNull() && m_field_goals_attempted_isValid;

    m_field_goals_longest_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_longest_made, json[QString("FieldGoalsLongestMade")]);
    m_field_goals_longest_made_isSet = !json[QString("FieldGoalsLongestMade")].isNull() && m_field_goals_longest_made_isValid;

    m_field_goals_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made, json[QString("FieldGoalsMade")]);
    m_field_goals_made_isSet = !json[QString("FieldGoalsMade")].isNull() && m_field_goals_made_isValid;

    m_first_downs_isValid = ::OpenAPI::fromJsonValue(m_first_downs, json[QString("FirstDowns")]);
    m_first_downs_isSet = !json[QString("FirstDowns")].isNull() && m_first_downs_isValid;

    m_fourth_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_fourth_down_attempts, json[QString("FourthDownAttempts")]);
    m_fourth_down_attempts_isSet = !json[QString("FourthDownAttempts")].isNull() && m_fourth_down_attempts_isValid;

    m_fourth_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_fourth_down_conversions, json[QString("FourthDownConversions")]);
    m_fourth_down_conversions_isSet = !json[QString("FourthDownConversions")].isNull() && m_fourth_down_conversions_isValid;

    m_fumble_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_touchdowns, json[QString("FumbleReturnTouchdowns")]);
    m_fumble_return_touchdowns_isSet = !json[QString("FumbleReturnTouchdowns")].isNull() && m_fumble_return_touchdowns_isValid;

    m_fumbles_isValid = ::OpenAPI::fromJsonValue(m_fumbles, json[QString("Fumbles")]);
    m_fumbles_isSet = !json[QString("Fumbles")].isNull() && m_fumbles_isValid;

    m_fumbles_lost_isValid = ::OpenAPI::fromJsonValue(m_fumbles_lost, json[QString("FumblesLost")]);
    m_fumbles_lost_isSet = !json[QString("FumblesLost")].isNull() && m_fumbles_lost_isValid;

    m_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_fumbles_recovered, json[QString("FumblesRecovered")]);
    m_fumbles_recovered_isSet = !json[QString("FumblesRecovered")].isNull() && m_fumbles_recovered_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_home_losses_isValid = ::OpenAPI::fromJsonValue(m_home_losses, json[QString("HomeLosses")]);
    m_home_losses_isSet = !json[QString("HomeLosses")].isNull() && m_home_losses_isValid;

    m_home_wins_isValid = ::OpenAPI::fromJsonValue(m_home_wins, json[QString("HomeWins")]);
    m_home_wins_isSet = !json[QString("HomeWins")].isNull() && m_home_wins_isValid;

    m_interception_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_interception_return_touchdowns, json[QString("InterceptionReturnTouchdowns")]);
    m_interception_return_touchdowns_isSet = !json[QString("InterceptionReturnTouchdowns")].isNull() && m_interception_return_touchdowns_isValid;

    m_interception_return_yards_isValid = ::OpenAPI::fromJsonValue(m_interception_return_yards, json[QString("InterceptionReturnYards")]);
    m_interception_return_yards_isSet = !json[QString("InterceptionReturnYards")].isNull() && m_interception_return_yards_isValid;

    m_interceptions_isValid = ::OpenAPI::fromJsonValue(m_interceptions, json[QString("Interceptions")]);
    m_interceptions_isSet = !json[QString("Interceptions")].isNull() && m_interceptions_isValid;

    m_kick_return_long_isValid = ::OpenAPI::fromJsonValue(m_kick_return_long, json[QString("KickReturnLong")]);
    m_kick_return_long_isSet = !json[QString("KickReturnLong")].isNull() && m_kick_return_long_isValid;

    m_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_kick_return_touchdowns, json[QString("KickReturnTouchdowns")]);
    m_kick_return_touchdowns_isSet = !json[QString("KickReturnTouchdowns")].isNull() && m_kick_return_touchdowns_isValid;

    m_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards, json[QString("KickReturnYards")]);
    m_kick_return_yards_isSet = !json[QString("KickReturnYards")].isNull() && m_kick_return_yards_isValid;

    m_kick_return_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards_per_attempt, json[QString("KickReturnYardsPerAttempt")]);
    m_kick_return_yards_per_attempt_isSet = !json[QString("KickReturnYardsPerAttempt")].isNull() && m_kick_return_yards_per_attempt_isValid;

    m_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_kick_returns, json[QString("KickReturns")]);
    m_kick_returns_isSet = !json[QString("KickReturns")].isNull() && m_kick_returns_isValid;

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("Losses")]);
    m_losses_isSet = !json[QString("Losses")].isNull() && m_losses_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_opponent_score_isValid = ::OpenAPI::fromJsonValue(m_opponent_score, json[QString("OpponentScore")]);
    m_opponent_score_isSet = !json[QString("OpponentScore")].isNull() && m_opponent_score_isValid;

    m_passes_defended_isValid = ::OpenAPI::fromJsonValue(m_passes_defended, json[QString("PassesDefended")]);
    m_passes_defended_isSet = !json[QString("PassesDefended")].isNull() && m_passes_defended_isValid;

    m_passing_attempts_isValid = ::OpenAPI::fromJsonValue(m_passing_attempts, json[QString("PassingAttempts")]);
    m_passing_attempts_isSet = !json[QString("PassingAttempts")].isNull() && m_passing_attempts_isValid;

    m_passing_completion_percentage_isValid = ::OpenAPI::fromJsonValue(m_passing_completion_percentage, json[QString("PassingCompletionPercentage")]);
    m_passing_completion_percentage_isSet = !json[QString("PassingCompletionPercentage")].isNull() && m_passing_completion_percentage_isValid;

    m_passing_completions_isValid = ::OpenAPI::fromJsonValue(m_passing_completions, json[QString("PassingCompletions")]);
    m_passing_completions_isSet = !json[QString("PassingCompletions")].isNull() && m_passing_completions_isValid;

    m_passing_interceptions_isValid = ::OpenAPI::fromJsonValue(m_passing_interceptions, json[QString("PassingInterceptions")]);
    m_passing_interceptions_isSet = !json[QString("PassingInterceptions")].isNull() && m_passing_interceptions_isValid;

    m_passing_rating_isValid = ::OpenAPI::fromJsonValue(m_passing_rating, json[QString("PassingRating")]);
    m_passing_rating_isSet = !json[QString("PassingRating")].isNull() && m_passing_rating_isValid;

    m_passing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_passing_touchdowns, json[QString("PassingTouchdowns")]);
    m_passing_touchdowns_isSet = !json[QString("PassingTouchdowns")].isNull() && m_passing_touchdowns_isValid;

    m_passing_yards_isValid = ::OpenAPI::fromJsonValue(m_passing_yards, json[QString("PassingYards")]);
    m_passing_yards_isSet = !json[QString("PassingYards")].isNull() && m_passing_yards_isValid;

    m_passing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_passing_yards_per_attempt, json[QString("PassingYardsPerAttempt")]);
    m_passing_yards_per_attempt_isSet = !json[QString("PassingYardsPerAttempt")].isNull() && m_passing_yards_per_attempt_isValid;

    m_passing_yards_per_completion_isValid = ::OpenAPI::fromJsonValue(m_passing_yards_per_completion, json[QString("PassingYardsPerCompletion")]);
    m_passing_yards_per_completion_isSet = !json[QString("PassingYardsPerCompletion")].isNull() && m_passing_yards_per_completion_isValid;

    m_penalties_isValid = ::OpenAPI::fromJsonValue(m_penalties, json[QString("Penalties")]);
    m_penalties_isSet = !json[QString("Penalties")].isNull() && m_penalties_isValid;

    m_penalty_yards_isValid = ::OpenAPI::fromJsonValue(m_penalty_yards, json[QString("PenaltyYards")]);
    m_penalty_yards_isSet = !json[QString("PenaltyYards")].isNull() && m_penalty_yards_isValid;

    m_points_against_isValid = ::OpenAPI::fromJsonValue(m_points_against, json[QString("PointsAgainst")]);
    m_points_against_isSet = !json[QString("PointsAgainst")].isNull() && m_points_against_isValid;

    m_points_for_isValid = ::OpenAPI::fromJsonValue(m_points_for, json[QString("PointsFor")]);
    m_points_for_isSet = !json[QString("PointsFor")].isNull() && m_points_for_isValid;

    m_punt_average_isValid = ::OpenAPI::fromJsonValue(m_punt_average, json[QString("PuntAverage")]);
    m_punt_average_isSet = !json[QString("PuntAverage")].isNull() && m_punt_average_isValid;

    m_punt_long_isValid = ::OpenAPI::fromJsonValue(m_punt_long, json[QString("PuntLong")]);
    m_punt_long_isSet = !json[QString("PuntLong")].isNull() && m_punt_long_isValid;

    m_punt_return_long_isValid = ::OpenAPI::fromJsonValue(m_punt_return_long, json[QString("PuntReturnLong")]);
    m_punt_return_long_isSet = !json[QString("PuntReturnLong")].isNull() && m_punt_return_long_isValid;

    m_punt_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_punt_return_touchdowns, json[QString("PuntReturnTouchdowns")]);
    m_punt_return_touchdowns_isSet = !json[QString("PuntReturnTouchdowns")].isNull() && m_punt_return_touchdowns_isValid;

    m_punt_return_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards, json[QString("PuntReturnYards")]);
    m_punt_return_yards_isSet = !json[QString("PuntReturnYards")].isNull() && m_punt_return_yards_isValid;

    m_punt_return_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards_per_attempt, json[QString("PuntReturnYardsPerAttempt")]);
    m_punt_return_yards_per_attempt_isSet = !json[QString("PuntReturnYardsPerAttempt")].isNull() && m_punt_return_yards_per_attempt_isValid;

    m_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_punt_returns, json[QString("PuntReturns")]);
    m_punt_returns_isSet = !json[QString("PuntReturns")].isNull() && m_punt_returns_isValid;

    m_punt_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_yards, json[QString("PuntYards")]);
    m_punt_yards_isSet = !json[QString("PuntYards")].isNull() && m_punt_yards_isValid;

    m_punts_isValid = ::OpenAPI::fromJsonValue(m_punts, json[QString("Punts")]);
    m_punts_isSet = !json[QString("Punts")].isNull() && m_punts_isValid;

    m_quarterback_hurries_isValid = ::OpenAPI::fromJsonValue(m_quarterback_hurries, json[QString("QuarterbackHurries")]);
    m_quarterback_hurries_isSet = !json[QString("QuarterbackHurries")].isNull() && m_quarterback_hurries_isValid;

    m_receiving_long_isValid = ::OpenAPI::fromJsonValue(m_receiving_long, json[QString("ReceivingLong")]);
    m_receiving_long_isSet = !json[QString("ReceivingLong")].isNull() && m_receiving_long_isValid;

    m_receiving_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_receiving_touchdowns, json[QString("ReceivingTouchdowns")]);
    m_receiving_touchdowns_isSet = !json[QString("ReceivingTouchdowns")].isNull() && m_receiving_touchdowns_isValid;

    m_receiving_yards_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards, json[QString("ReceivingYards")]);
    m_receiving_yards_isSet = !json[QString("ReceivingYards")].isNull() && m_receiving_yards_isValid;

    m_receiving_yards_per_reception_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards_per_reception, json[QString("ReceivingYardsPerReception")]);
    m_receiving_yards_per_reception_isSet = !json[QString("ReceivingYardsPerReception")].isNull() && m_receiving_yards_per_reception_isValid;

    m_receptions_isValid = ::OpenAPI::fromJsonValue(m_receptions, json[QString("Receptions")]);
    m_receptions_isSet = !json[QString("Receptions")].isNull() && m_receptions_isValid;

    m_road_losses_isValid = ::OpenAPI::fromJsonValue(m_road_losses, json[QString("RoadLosses")]);
    m_road_losses_isSet = !json[QString("RoadLosses")].isNull() && m_road_losses_isValid;

    m_road_wins_isValid = ::OpenAPI::fromJsonValue(m_road_wins, json[QString("RoadWins")]);
    m_road_wins_isSet = !json[QString("RoadWins")].isNull() && m_road_wins_isValid;

    m_rushing_attempts_isValid = ::OpenAPI::fromJsonValue(m_rushing_attempts, json[QString("RushingAttempts")]);
    m_rushing_attempts_isSet = !json[QString("RushingAttempts")].isNull() && m_rushing_attempts_isValid;

    m_rushing_long_isValid = ::OpenAPI::fromJsonValue(m_rushing_long, json[QString("RushingLong")]);
    m_rushing_long_isSet = !json[QString("RushingLong")].isNull() && m_rushing_long_isValid;

    m_rushing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_rushing_touchdowns, json[QString("RushingTouchdowns")]);
    m_rushing_touchdowns_isSet = !json[QString("RushingTouchdowns")].isNull() && m_rushing_touchdowns_isValid;

    m_rushing_yards_isValid = ::OpenAPI::fromJsonValue(m_rushing_yards, json[QString("RushingYards")]);
    m_rushing_yards_isSet = !json[QString("RushingYards")].isNull() && m_rushing_yards_isValid;

    m_rushing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_rushing_yards_per_attempt, json[QString("RushingYardsPerAttempt")]);
    m_rushing_yards_per_attempt_isSet = !json[QString("RushingYardsPerAttempt")].isNull() && m_rushing_yards_per_attempt_isValid;

    m_sacks_isValid = ::OpenAPI::fromJsonValue(m_sacks, json[QString("Sacks")]);
    m_sacks_isSet = !json[QString("Sacks")].isNull() && m_sacks_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_solo_tackles, json[QString("SoloTackles")]);
    m_solo_tackles_isSet = !json[QString("SoloTackles")].isNull() && m_solo_tackles_isValid;

    m_stat_id_isValid = ::OpenAPI::fromJsonValue(m_stat_id, json[QString("StatID")]);
    m_stat_id_isSet = !json[QString("StatID")].isNull() && m_stat_id_isValid;

    m_streak_isValid = ::OpenAPI::fromJsonValue(m_streak, json[QString("Streak")]);
    m_streak_isSet = !json[QString("Streak")].isNull() && m_streak_isValid;

    m_tackles_for_loss_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss, json[QString("TacklesForLoss")]);
    m_tackles_for_loss_isSet = !json[QString("TacklesForLoss")].isNull() && m_tackles_for_loss_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_third_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_third_down_attempts, json[QString("ThirdDownAttempts")]);
    m_third_down_attempts_isSet = !json[QString("ThirdDownAttempts")].isNull() && m_third_down_attempts_isValid;

    m_third_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_third_down_conversions, json[QString("ThirdDownConversions")]);
    m_third_down_conversions_isSet = !json[QString("ThirdDownConversions")].isNull() && m_third_down_conversions_isValid;

    m_time_of_possession_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_of_possession_minutes, json[QString("TimeOfPossessionMinutes")]);
    m_time_of_possession_minutes_isSet = !json[QString("TimeOfPossessionMinutes")].isNull() && m_time_of_possession_minutes_isValid;

    m_time_of_possession_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_of_possession_seconds, json[QString("TimeOfPossessionSeconds")]);
    m_time_of_possession_seconds_isSet = !json[QString("TimeOfPossessionSeconds")].isNull() && m_time_of_possession_seconds_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("Wins")]);
    m_wins_isSet = !json[QString("Wins")].isNull() && m_wins_isValid;
}

QString OAITeamSeason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamSeason::asJsonObject() const {
    QJsonObject obj;
    if (m_assisted_tackles_isSet) {
        obj.insert(QString("AssistedTackles"), ::OpenAPI::toJsonValue(m_assisted_tackles));
    }
    if (m_conference_losses_isSet) {
        obj.insert(QString("ConferenceLosses"), ::OpenAPI::toJsonValue(m_conference_losses));
    }
    if (m_conference_points_against_isSet) {
        obj.insert(QString("ConferencePointsAgainst"), ::OpenAPI::toJsonValue(m_conference_points_against));
    }
    if (m_conference_points_for_isSet) {
        obj.insert(QString("ConferencePointsFor"), ::OpenAPI::toJsonValue(m_conference_points_for));
    }
    if (m_conference_rank_isSet) {
        obj.insert(QString("ConferenceRank"), ::OpenAPI::toJsonValue(m_conference_rank));
    }
    if (m_conference_wins_isSet) {
        obj.insert(QString("ConferenceWins"), ::OpenAPI::toJsonValue(m_conference_wins));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_division_rank_isSet) {
        obj.insert(QString("DivisionRank"), ::OpenAPI::toJsonValue(m_division_rank));
    }
    if (m_extra_points_attempted_isSet) {
        obj.insert(QString("ExtraPointsAttempted"), ::OpenAPI::toJsonValue(m_extra_points_attempted));
    }
    if (m_extra_points_made_isSet) {
        obj.insert(QString("ExtraPointsMade"), ::OpenAPI::toJsonValue(m_extra_points_made));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_field_goal_percentage_isSet) {
        obj.insert(QString("FieldGoalPercentage"), ::OpenAPI::toJsonValue(m_field_goal_percentage));
    }
    if (m_field_goals_attempted_isSet) {
        obj.insert(QString("FieldGoalsAttempted"), ::OpenAPI::toJsonValue(m_field_goals_attempted));
    }
    if (m_field_goals_longest_made_isSet) {
        obj.insert(QString("FieldGoalsLongestMade"), ::OpenAPI::toJsonValue(m_field_goals_longest_made));
    }
    if (m_field_goals_made_isSet) {
        obj.insert(QString("FieldGoalsMade"), ::OpenAPI::toJsonValue(m_field_goals_made));
    }
    if (m_first_downs_isSet) {
        obj.insert(QString("FirstDowns"), ::OpenAPI::toJsonValue(m_first_downs));
    }
    if (m_fourth_down_attempts_isSet) {
        obj.insert(QString("FourthDownAttempts"), ::OpenAPI::toJsonValue(m_fourth_down_attempts));
    }
    if (m_fourth_down_conversions_isSet) {
        obj.insert(QString("FourthDownConversions"), ::OpenAPI::toJsonValue(m_fourth_down_conversions));
    }
    if (m_fumble_return_touchdowns_isSet) {
        obj.insert(QString("FumbleReturnTouchdowns"), ::OpenAPI::toJsonValue(m_fumble_return_touchdowns));
    }
    if (m_fumbles_isSet) {
        obj.insert(QString("Fumbles"), ::OpenAPI::toJsonValue(m_fumbles));
    }
    if (m_fumbles_lost_isSet) {
        obj.insert(QString("FumblesLost"), ::OpenAPI::toJsonValue(m_fumbles_lost));
    }
    if (m_fumbles_recovered_isSet) {
        obj.insert(QString("FumblesRecovered"), ::OpenAPI::toJsonValue(m_fumbles_recovered));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_home_losses_isSet) {
        obj.insert(QString("HomeLosses"), ::OpenAPI::toJsonValue(m_home_losses));
    }
    if (m_home_wins_isSet) {
        obj.insert(QString("HomeWins"), ::OpenAPI::toJsonValue(m_home_wins));
    }
    if (m_interception_return_touchdowns_isSet) {
        obj.insert(QString("InterceptionReturnTouchdowns"), ::OpenAPI::toJsonValue(m_interception_return_touchdowns));
    }
    if (m_interception_return_yards_isSet) {
        obj.insert(QString("InterceptionReturnYards"), ::OpenAPI::toJsonValue(m_interception_return_yards));
    }
    if (m_interceptions_isSet) {
        obj.insert(QString("Interceptions"), ::OpenAPI::toJsonValue(m_interceptions));
    }
    if (m_kick_return_long_isSet) {
        obj.insert(QString("KickReturnLong"), ::OpenAPI::toJsonValue(m_kick_return_long));
    }
    if (m_kick_return_touchdowns_isSet) {
        obj.insert(QString("KickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_kick_return_touchdowns));
    }
    if (m_kick_return_yards_isSet) {
        obj.insert(QString("KickReturnYards"), ::OpenAPI::toJsonValue(m_kick_return_yards));
    }
    if (m_kick_return_yards_per_attempt_isSet) {
        obj.insert(QString("KickReturnYardsPerAttempt"), ::OpenAPI::toJsonValue(m_kick_return_yards_per_attempt));
    }
    if (m_kick_returns_isSet) {
        obj.insert(QString("KickReturns"), ::OpenAPI::toJsonValue(m_kick_returns));
    }
    if (m_losses_isSet) {
        obj.insert(QString("Losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opponent_score_isSet) {
        obj.insert(QString("OpponentScore"), ::OpenAPI::toJsonValue(m_opponent_score));
    }
    if (m_passes_defended_isSet) {
        obj.insert(QString("PassesDefended"), ::OpenAPI::toJsonValue(m_passes_defended));
    }
    if (m_passing_attempts_isSet) {
        obj.insert(QString("PassingAttempts"), ::OpenAPI::toJsonValue(m_passing_attempts));
    }
    if (m_passing_completion_percentage_isSet) {
        obj.insert(QString("PassingCompletionPercentage"), ::OpenAPI::toJsonValue(m_passing_completion_percentage));
    }
    if (m_passing_completions_isSet) {
        obj.insert(QString("PassingCompletions"), ::OpenAPI::toJsonValue(m_passing_completions));
    }
    if (m_passing_interceptions_isSet) {
        obj.insert(QString("PassingInterceptions"), ::OpenAPI::toJsonValue(m_passing_interceptions));
    }
    if (m_passing_rating_isSet) {
        obj.insert(QString("PassingRating"), ::OpenAPI::toJsonValue(m_passing_rating));
    }
    if (m_passing_touchdowns_isSet) {
        obj.insert(QString("PassingTouchdowns"), ::OpenAPI::toJsonValue(m_passing_touchdowns));
    }
    if (m_passing_yards_isSet) {
        obj.insert(QString("PassingYards"), ::OpenAPI::toJsonValue(m_passing_yards));
    }
    if (m_passing_yards_per_attempt_isSet) {
        obj.insert(QString("PassingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_passing_yards_per_attempt));
    }
    if (m_passing_yards_per_completion_isSet) {
        obj.insert(QString("PassingYardsPerCompletion"), ::OpenAPI::toJsonValue(m_passing_yards_per_completion));
    }
    if (m_penalties_isSet) {
        obj.insert(QString("Penalties"), ::OpenAPI::toJsonValue(m_penalties));
    }
    if (m_penalty_yards_isSet) {
        obj.insert(QString("PenaltyYards"), ::OpenAPI::toJsonValue(m_penalty_yards));
    }
    if (m_points_against_isSet) {
        obj.insert(QString("PointsAgainst"), ::OpenAPI::toJsonValue(m_points_against));
    }
    if (m_points_for_isSet) {
        obj.insert(QString("PointsFor"), ::OpenAPI::toJsonValue(m_points_for));
    }
    if (m_punt_average_isSet) {
        obj.insert(QString("PuntAverage"), ::OpenAPI::toJsonValue(m_punt_average));
    }
    if (m_punt_long_isSet) {
        obj.insert(QString("PuntLong"), ::OpenAPI::toJsonValue(m_punt_long));
    }
    if (m_punt_return_long_isSet) {
        obj.insert(QString("PuntReturnLong"), ::OpenAPI::toJsonValue(m_punt_return_long));
    }
    if (m_punt_return_touchdowns_isSet) {
        obj.insert(QString("PuntReturnTouchdowns"), ::OpenAPI::toJsonValue(m_punt_return_touchdowns));
    }
    if (m_punt_return_yards_isSet) {
        obj.insert(QString("PuntReturnYards"), ::OpenAPI::toJsonValue(m_punt_return_yards));
    }
    if (m_punt_return_yards_per_attempt_isSet) {
        obj.insert(QString("PuntReturnYardsPerAttempt"), ::OpenAPI::toJsonValue(m_punt_return_yards_per_attempt));
    }
    if (m_punt_returns_isSet) {
        obj.insert(QString("PuntReturns"), ::OpenAPI::toJsonValue(m_punt_returns));
    }
    if (m_punt_yards_isSet) {
        obj.insert(QString("PuntYards"), ::OpenAPI::toJsonValue(m_punt_yards));
    }
    if (m_punts_isSet) {
        obj.insert(QString("Punts"), ::OpenAPI::toJsonValue(m_punts));
    }
    if (m_quarterback_hurries_isSet) {
        obj.insert(QString("QuarterbackHurries"), ::OpenAPI::toJsonValue(m_quarterback_hurries));
    }
    if (m_receiving_long_isSet) {
        obj.insert(QString("ReceivingLong"), ::OpenAPI::toJsonValue(m_receiving_long));
    }
    if (m_receiving_touchdowns_isSet) {
        obj.insert(QString("ReceivingTouchdowns"), ::OpenAPI::toJsonValue(m_receiving_touchdowns));
    }
    if (m_receiving_yards_isSet) {
        obj.insert(QString("ReceivingYards"), ::OpenAPI::toJsonValue(m_receiving_yards));
    }
    if (m_receiving_yards_per_reception_isSet) {
        obj.insert(QString("ReceivingYardsPerReception"), ::OpenAPI::toJsonValue(m_receiving_yards_per_reception));
    }
    if (m_receptions_isSet) {
        obj.insert(QString("Receptions"), ::OpenAPI::toJsonValue(m_receptions));
    }
    if (m_road_losses_isSet) {
        obj.insert(QString("RoadLosses"), ::OpenAPI::toJsonValue(m_road_losses));
    }
    if (m_road_wins_isSet) {
        obj.insert(QString("RoadWins"), ::OpenAPI::toJsonValue(m_road_wins));
    }
    if (m_rushing_attempts_isSet) {
        obj.insert(QString("RushingAttempts"), ::OpenAPI::toJsonValue(m_rushing_attempts));
    }
    if (m_rushing_long_isSet) {
        obj.insert(QString("RushingLong"), ::OpenAPI::toJsonValue(m_rushing_long));
    }
    if (m_rushing_touchdowns_isSet) {
        obj.insert(QString("RushingTouchdowns"), ::OpenAPI::toJsonValue(m_rushing_touchdowns));
    }
    if (m_rushing_yards_isSet) {
        obj.insert(QString("RushingYards"), ::OpenAPI::toJsonValue(m_rushing_yards));
    }
    if (m_rushing_yards_per_attempt_isSet) {
        obj.insert(QString("RushingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_rushing_yards_per_attempt));
    }
    if (m_sacks_isSet) {
        obj.insert(QString("Sacks"), ::OpenAPI::toJsonValue(m_sacks));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_solo_tackles_isSet) {
        obj.insert(QString("SoloTackles"), ::OpenAPI::toJsonValue(m_solo_tackles));
    }
    if (m_stat_id_isSet) {
        obj.insert(QString("StatID"), ::OpenAPI::toJsonValue(m_stat_id));
    }
    if (m_streak_isSet) {
        obj.insert(QString("Streak"), ::OpenAPI::toJsonValue(m_streak));
    }
    if (m_tackles_for_loss_isSet) {
        obj.insert(QString("TacklesForLoss"), ::OpenAPI::toJsonValue(m_tackles_for_loss));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_third_down_attempts_isSet) {
        obj.insert(QString("ThirdDownAttempts"), ::OpenAPI::toJsonValue(m_third_down_attempts));
    }
    if (m_third_down_conversions_isSet) {
        obj.insert(QString("ThirdDownConversions"), ::OpenAPI::toJsonValue(m_third_down_conversions));
    }
    if (m_time_of_possession_minutes_isSet) {
        obj.insert(QString("TimeOfPossessionMinutes"), ::OpenAPI::toJsonValue(m_time_of_possession_minutes));
    }
    if (m_time_of_possession_seconds_isSet) {
        obj.insert(QString("TimeOfPossessionSeconds"), ::OpenAPI::toJsonValue(m_time_of_possession_seconds));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_wins_isSet) {
        obj.insert(QString("Wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

double OAITeamSeason::getAssistedTackles() const {
    return m_assisted_tackles;
}
void OAITeamSeason::setAssistedTackles(const double &assisted_tackles) {
    m_assisted_tackles = assisted_tackles;
    m_assisted_tackles_isSet = true;
}

bool OAITeamSeason::is_assisted_tackles_Set() const{
    return m_assisted_tackles_isSet;
}

bool OAITeamSeason::is_assisted_tackles_Valid() const{
    return m_assisted_tackles_isValid;
}

qint32 OAITeamSeason::getConferenceLosses() const {
    return m_conference_losses;
}
void OAITeamSeason::setConferenceLosses(const qint32 &conference_losses) {
    m_conference_losses = conference_losses;
    m_conference_losses_isSet = true;
}

bool OAITeamSeason::is_conference_losses_Set() const{
    return m_conference_losses_isSet;
}

bool OAITeamSeason::is_conference_losses_Valid() const{
    return m_conference_losses_isValid;
}

qint32 OAITeamSeason::getConferencePointsAgainst() const {
    return m_conference_points_against;
}
void OAITeamSeason::setConferencePointsAgainst(const qint32 &conference_points_against) {
    m_conference_points_against = conference_points_against;
    m_conference_points_against_isSet = true;
}

bool OAITeamSeason::is_conference_points_against_Set() const{
    return m_conference_points_against_isSet;
}

bool OAITeamSeason::is_conference_points_against_Valid() const{
    return m_conference_points_against_isValid;
}

qint32 OAITeamSeason::getConferencePointsFor() const {
    return m_conference_points_for;
}
void OAITeamSeason::setConferencePointsFor(const qint32 &conference_points_for) {
    m_conference_points_for = conference_points_for;
    m_conference_points_for_isSet = true;
}

bool OAITeamSeason::is_conference_points_for_Set() const{
    return m_conference_points_for_isSet;
}

bool OAITeamSeason::is_conference_points_for_Valid() const{
    return m_conference_points_for_isValid;
}

qint32 OAITeamSeason::getConferenceRank() const {
    return m_conference_rank;
}
void OAITeamSeason::setConferenceRank(const qint32 &conference_rank) {
    m_conference_rank = conference_rank;
    m_conference_rank_isSet = true;
}

bool OAITeamSeason::is_conference_rank_Set() const{
    return m_conference_rank_isSet;
}

bool OAITeamSeason::is_conference_rank_Valid() const{
    return m_conference_rank_isValid;
}

qint32 OAITeamSeason::getConferenceWins() const {
    return m_conference_wins;
}
void OAITeamSeason::setConferenceWins(const qint32 &conference_wins) {
    m_conference_wins = conference_wins;
    m_conference_wins_isSet = true;
}

bool OAITeamSeason::is_conference_wins_Set() const{
    return m_conference_wins_isSet;
}

bool OAITeamSeason::is_conference_wins_Valid() const{
    return m_conference_wins_isValid;
}

QString OAITeamSeason::getCreated() const {
    return m_created;
}
void OAITeamSeason::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITeamSeason::is_created_Set() const{
    return m_created_isSet;
}

bool OAITeamSeason::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAITeamSeason::getDivisionRank() const {
    return m_division_rank;
}
void OAITeamSeason::setDivisionRank(const qint32 &division_rank) {
    m_division_rank = division_rank;
    m_division_rank_isSet = true;
}

bool OAITeamSeason::is_division_rank_Set() const{
    return m_division_rank_isSet;
}

bool OAITeamSeason::is_division_rank_Valid() const{
    return m_division_rank_isValid;
}

double OAITeamSeason::getExtraPointsAttempted() const {
    return m_extra_points_attempted;
}
void OAITeamSeason::setExtraPointsAttempted(const double &extra_points_attempted) {
    m_extra_points_attempted = extra_points_attempted;
    m_extra_points_attempted_isSet = true;
}

bool OAITeamSeason::is_extra_points_attempted_Set() const{
    return m_extra_points_attempted_isSet;
}

bool OAITeamSeason::is_extra_points_attempted_Valid() const{
    return m_extra_points_attempted_isValid;
}

double OAITeamSeason::getExtraPointsMade() const {
    return m_extra_points_made;
}
void OAITeamSeason::setExtraPointsMade(const double &extra_points_made) {
    m_extra_points_made = extra_points_made;
    m_extra_points_made_isSet = true;
}

bool OAITeamSeason::is_extra_points_made_Set() const{
    return m_extra_points_made_isSet;
}

bool OAITeamSeason::is_extra_points_made_Valid() const{
    return m_extra_points_made_isValid;
}

double OAITeamSeason::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAITeamSeason::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAITeamSeason::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAITeamSeason::getFieldGoalPercentage() const {
    return m_field_goal_percentage;
}
void OAITeamSeason::setFieldGoalPercentage(const double &field_goal_percentage) {
    m_field_goal_percentage = field_goal_percentage;
    m_field_goal_percentage_isSet = true;
}

bool OAITeamSeason::is_field_goal_percentage_Set() const{
    return m_field_goal_percentage_isSet;
}

bool OAITeamSeason::is_field_goal_percentage_Valid() const{
    return m_field_goal_percentage_isValid;
}

double OAITeamSeason::getFieldGoalsAttempted() const {
    return m_field_goals_attempted;
}
void OAITeamSeason::setFieldGoalsAttempted(const double &field_goals_attempted) {
    m_field_goals_attempted = field_goals_attempted;
    m_field_goals_attempted_isSet = true;
}

bool OAITeamSeason::is_field_goals_attempted_Set() const{
    return m_field_goals_attempted_isSet;
}

bool OAITeamSeason::is_field_goals_attempted_Valid() const{
    return m_field_goals_attempted_isValid;
}

double OAITeamSeason::getFieldGoalsLongestMade() const {
    return m_field_goals_longest_made;
}
void OAITeamSeason::setFieldGoalsLongestMade(const double &field_goals_longest_made) {
    m_field_goals_longest_made = field_goals_longest_made;
    m_field_goals_longest_made_isSet = true;
}

bool OAITeamSeason::is_field_goals_longest_made_Set() const{
    return m_field_goals_longest_made_isSet;
}

bool OAITeamSeason::is_field_goals_longest_made_Valid() const{
    return m_field_goals_longest_made_isValid;
}

double OAITeamSeason::getFieldGoalsMade() const {
    return m_field_goals_made;
}
void OAITeamSeason::setFieldGoalsMade(const double &field_goals_made) {
    m_field_goals_made = field_goals_made;
    m_field_goals_made_isSet = true;
}

bool OAITeamSeason::is_field_goals_made_Set() const{
    return m_field_goals_made_isSet;
}

bool OAITeamSeason::is_field_goals_made_Valid() const{
    return m_field_goals_made_isValid;
}

qint32 OAITeamSeason::getFirstDowns() const {
    return m_first_downs;
}
void OAITeamSeason::setFirstDowns(const qint32 &first_downs) {
    m_first_downs = first_downs;
    m_first_downs_isSet = true;
}

bool OAITeamSeason::is_first_downs_Set() const{
    return m_first_downs_isSet;
}

bool OAITeamSeason::is_first_downs_Valid() const{
    return m_first_downs_isValid;
}

qint32 OAITeamSeason::getFourthDownAttempts() const {
    return m_fourth_down_attempts;
}
void OAITeamSeason::setFourthDownAttempts(const qint32 &fourth_down_attempts) {
    m_fourth_down_attempts = fourth_down_attempts;
    m_fourth_down_attempts_isSet = true;
}

bool OAITeamSeason::is_fourth_down_attempts_Set() const{
    return m_fourth_down_attempts_isSet;
}

bool OAITeamSeason::is_fourth_down_attempts_Valid() const{
    return m_fourth_down_attempts_isValid;
}

qint32 OAITeamSeason::getFourthDownConversions() const {
    return m_fourth_down_conversions;
}
void OAITeamSeason::setFourthDownConversions(const qint32 &fourth_down_conversions) {
    m_fourth_down_conversions = fourth_down_conversions;
    m_fourth_down_conversions_isSet = true;
}

bool OAITeamSeason::is_fourth_down_conversions_Set() const{
    return m_fourth_down_conversions_isSet;
}

bool OAITeamSeason::is_fourth_down_conversions_Valid() const{
    return m_fourth_down_conversions_isValid;
}

double OAITeamSeason::getFumbleReturnTouchdowns() const {
    return m_fumble_return_touchdowns;
}
void OAITeamSeason::setFumbleReturnTouchdowns(const double &fumble_return_touchdowns) {
    m_fumble_return_touchdowns = fumble_return_touchdowns;
    m_fumble_return_touchdowns_isSet = true;
}

bool OAITeamSeason::is_fumble_return_touchdowns_Set() const{
    return m_fumble_return_touchdowns_isSet;
}

bool OAITeamSeason::is_fumble_return_touchdowns_Valid() const{
    return m_fumble_return_touchdowns_isValid;
}

double OAITeamSeason::getFumbles() const {
    return m_fumbles;
}
void OAITeamSeason::setFumbles(const double &fumbles) {
    m_fumbles = fumbles;
    m_fumbles_isSet = true;
}

bool OAITeamSeason::is_fumbles_Set() const{
    return m_fumbles_isSet;
}

bool OAITeamSeason::is_fumbles_Valid() const{
    return m_fumbles_isValid;
}

double OAITeamSeason::getFumblesLost() const {
    return m_fumbles_lost;
}
void OAITeamSeason::setFumblesLost(const double &fumbles_lost) {
    m_fumbles_lost = fumbles_lost;
    m_fumbles_lost_isSet = true;
}

bool OAITeamSeason::is_fumbles_lost_Set() const{
    return m_fumbles_lost_isSet;
}

bool OAITeamSeason::is_fumbles_lost_Valid() const{
    return m_fumbles_lost_isValid;
}

double OAITeamSeason::getFumblesRecovered() const {
    return m_fumbles_recovered;
}
void OAITeamSeason::setFumblesRecovered(const double &fumbles_recovered) {
    m_fumbles_recovered = fumbles_recovered;
    m_fumbles_recovered_isSet = true;
}

bool OAITeamSeason::is_fumbles_recovered_Set() const{
    return m_fumbles_recovered_isSet;
}

bool OAITeamSeason::is_fumbles_recovered_Valid() const{
    return m_fumbles_recovered_isValid;
}

qint32 OAITeamSeason::getGames() const {
    return m_games;
}
void OAITeamSeason::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITeamSeason::is_games_Set() const{
    return m_games_isSet;
}

bool OAITeamSeason::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAITeamSeason::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAITeamSeason::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAITeamSeason::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAITeamSeason::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

qint32 OAITeamSeason::getHomeLosses() const {
    return m_home_losses;
}
void OAITeamSeason::setHomeLosses(const qint32 &home_losses) {
    m_home_losses = home_losses;
    m_home_losses_isSet = true;
}

bool OAITeamSeason::is_home_losses_Set() const{
    return m_home_losses_isSet;
}

bool OAITeamSeason::is_home_losses_Valid() const{
    return m_home_losses_isValid;
}

qint32 OAITeamSeason::getHomeWins() const {
    return m_home_wins;
}
void OAITeamSeason::setHomeWins(const qint32 &home_wins) {
    m_home_wins = home_wins;
    m_home_wins_isSet = true;
}

bool OAITeamSeason::is_home_wins_Set() const{
    return m_home_wins_isSet;
}

bool OAITeamSeason::is_home_wins_Valid() const{
    return m_home_wins_isValid;
}

double OAITeamSeason::getInterceptionReturnTouchdowns() const {
    return m_interception_return_touchdowns;
}
void OAITeamSeason::setInterceptionReturnTouchdowns(const double &interception_return_touchdowns) {
    m_interception_return_touchdowns = interception_return_touchdowns;
    m_interception_return_touchdowns_isSet = true;
}

bool OAITeamSeason::is_interception_return_touchdowns_Set() const{
    return m_interception_return_touchdowns_isSet;
}

bool OAITeamSeason::is_interception_return_touchdowns_Valid() const{
    return m_interception_return_touchdowns_isValid;
}

double OAITeamSeason::getInterceptionReturnYards() const {
    return m_interception_return_yards;
}
void OAITeamSeason::setInterceptionReturnYards(const double &interception_return_yards) {
    m_interception_return_yards = interception_return_yards;
    m_interception_return_yards_isSet = true;
}

bool OAITeamSeason::is_interception_return_yards_Set() const{
    return m_interception_return_yards_isSet;
}

bool OAITeamSeason::is_interception_return_yards_Valid() const{
    return m_interception_return_yards_isValid;
}

double OAITeamSeason::getInterceptions() const {
    return m_interceptions;
}
void OAITeamSeason::setInterceptions(const double &interceptions) {
    m_interceptions = interceptions;
    m_interceptions_isSet = true;
}

bool OAITeamSeason::is_interceptions_Set() const{
    return m_interceptions_isSet;
}

bool OAITeamSeason::is_interceptions_Valid() const{
    return m_interceptions_isValid;
}

double OAITeamSeason::getKickReturnLong() const {
    return m_kick_return_long;
}
void OAITeamSeason::setKickReturnLong(const double &kick_return_long) {
    m_kick_return_long = kick_return_long;
    m_kick_return_long_isSet = true;
}

bool OAITeamSeason::is_kick_return_long_Set() const{
    return m_kick_return_long_isSet;
}

bool OAITeamSeason::is_kick_return_long_Valid() const{
    return m_kick_return_long_isValid;
}

double OAITeamSeason::getKickReturnTouchdowns() const {
    return m_kick_return_touchdowns;
}
void OAITeamSeason::setKickReturnTouchdowns(const double &kick_return_touchdowns) {
    m_kick_return_touchdowns = kick_return_touchdowns;
    m_kick_return_touchdowns_isSet = true;
}

bool OAITeamSeason::is_kick_return_touchdowns_Set() const{
    return m_kick_return_touchdowns_isSet;
}

bool OAITeamSeason::is_kick_return_touchdowns_Valid() const{
    return m_kick_return_touchdowns_isValid;
}

double OAITeamSeason::getKickReturnYards() const {
    return m_kick_return_yards;
}
void OAITeamSeason::setKickReturnYards(const double &kick_return_yards) {
    m_kick_return_yards = kick_return_yards;
    m_kick_return_yards_isSet = true;
}

bool OAITeamSeason::is_kick_return_yards_Set() const{
    return m_kick_return_yards_isSet;
}

bool OAITeamSeason::is_kick_return_yards_Valid() const{
    return m_kick_return_yards_isValid;
}

double OAITeamSeason::getKickReturnYardsPerAttempt() const {
    return m_kick_return_yards_per_attempt;
}
void OAITeamSeason::setKickReturnYardsPerAttempt(const double &kick_return_yards_per_attempt) {
    m_kick_return_yards_per_attempt = kick_return_yards_per_attempt;
    m_kick_return_yards_per_attempt_isSet = true;
}

bool OAITeamSeason::is_kick_return_yards_per_attempt_Set() const{
    return m_kick_return_yards_per_attempt_isSet;
}

bool OAITeamSeason::is_kick_return_yards_per_attempt_Valid() const{
    return m_kick_return_yards_per_attempt_isValid;
}

double OAITeamSeason::getKickReturns() const {
    return m_kick_returns;
}
void OAITeamSeason::setKickReturns(const double &kick_returns) {
    m_kick_returns = kick_returns;
    m_kick_returns_isSet = true;
}

bool OAITeamSeason::is_kick_returns_Set() const{
    return m_kick_returns_isSet;
}

bool OAITeamSeason::is_kick_returns_Valid() const{
    return m_kick_returns_isValid;
}

qint32 OAITeamSeason::getLosses() const {
    return m_losses;
}
void OAITeamSeason::setLosses(const qint32 &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAITeamSeason::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAITeamSeason::is_losses_Valid() const{
    return m_losses_isValid;
}

QString OAITeamSeason::getName() const {
    return m_name;
}
void OAITeamSeason::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamSeason::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamSeason::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITeamSeason::getOpponentScore() const {
    return m_opponent_score;
}
void OAITeamSeason::setOpponentScore(const qint32 &opponent_score) {
    m_opponent_score = opponent_score;
    m_opponent_score_isSet = true;
}

bool OAITeamSeason::is_opponent_score_Set() const{
    return m_opponent_score_isSet;
}

bool OAITeamSeason::is_opponent_score_Valid() const{
    return m_opponent_score_isValid;
}

double OAITeamSeason::getPassesDefended() const {
    return m_passes_defended;
}
void OAITeamSeason::setPassesDefended(const double &passes_defended) {
    m_passes_defended = passes_defended;
    m_passes_defended_isSet = true;
}

bool OAITeamSeason::is_passes_defended_Set() const{
    return m_passes_defended_isSet;
}

bool OAITeamSeason::is_passes_defended_Valid() const{
    return m_passes_defended_isValid;
}

double OAITeamSeason::getPassingAttempts() const {
    return m_passing_attempts;
}
void OAITeamSeason::setPassingAttempts(const double &passing_attempts) {
    m_passing_attempts = passing_attempts;
    m_passing_attempts_isSet = true;
}

bool OAITeamSeason::is_passing_attempts_Set() const{
    return m_passing_attempts_isSet;
}

bool OAITeamSeason::is_passing_attempts_Valid() const{
    return m_passing_attempts_isValid;
}

double OAITeamSeason::getPassingCompletionPercentage() const {
    return m_passing_completion_percentage;
}
void OAITeamSeason::setPassingCompletionPercentage(const double &passing_completion_percentage) {
    m_passing_completion_percentage = passing_completion_percentage;
    m_passing_completion_percentage_isSet = true;
}

bool OAITeamSeason::is_passing_completion_percentage_Set() const{
    return m_passing_completion_percentage_isSet;
}

bool OAITeamSeason::is_passing_completion_percentage_Valid() const{
    return m_passing_completion_percentage_isValid;
}

double OAITeamSeason::getPassingCompletions() const {
    return m_passing_completions;
}
void OAITeamSeason::setPassingCompletions(const double &passing_completions) {
    m_passing_completions = passing_completions;
    m_passing_completions_isSet = true;
}

bool OAITeamSeason::is_passing_completions_Set() const{
    return m_passing_completions_isSet;
}

bool OAITeamSeason::is_passing_completions_Valid() const{
    return m_passing_completions_isValid;
}

double OAITeamSeason::getPassingInterceptions() const {
    return m_passing_interceptions;
}
void OAITeamSeason::setPassingInterceptions(const double &passing_interceptions) {
    m_passing_interceptions = passing_interceptions;
    m_passing_interceptions_isSet = true;
}

bool OAITeamSeason::is_passing_interceptions_Set() const{
    return m_passing_interceptions_isSet;
}

bool OAITeamSeason::is_passing_interceptions_Valid() const{
    return m_passing_interceptions_isValid;
}

double OAITeamSeason::getPassingRating() const {
    return m_passing_rating;
}
void OAITeamSeason::setPassingRating(const double &passing_rating) {
    m_passing_rating = passing_rating;
    m_passing_rating_isSet = true;
}

bool OAITeamSeason::is_passing_rating_Set() const{
    return m_passing_rating_isSet;
}

bool OAITeamSeason::is_passing_rating_Valid() const{
    return m_passing_rating_isValid;
}

double OAITeamSeason::getPassingTouchdowns() const {
    return m_passing_touchdowns;
}
void OAITeamSeason::setPassingTouchdowns(const double &passing_touchdowns) {
    m_passing_touchdowns = passing_touchdowns;
    m_passing_touchdowns_isSet = true;
}

bool OAITeamSeason::is_passing_touchdowns_Set() const{
    return m_passing_touchdowns_isSet;
}

bool OAITeamSeason::is_passing_touchdowns_Valid() const{
    return m_passing_touchdowns_isValid;
}

double OAITeamSeason::getPassingYards() const {
    return m_passing_yards;
}
void OAITeamSeason::setPassingYards(const double &passing_yards) {
    m_passing_yards = passing_yards;
    m_passing_yards_isSet = true;
}

bool OAITeamSeason::is_passing_yards_Set() const{
    return m_passing_yards_isSet;
}

bool OAITeamSeason::is_passing_yards_Valid() const{
    return m_passing_yards_isValid;
}

double OAITeamSeason::getPassingYardsPerAttempt() const {
    return m_passing_yards_per_attempt;
}
void OAITeamSeason::setPassingYardsPerAttempt(const double &passing_yards_per_attempt) {
    m_passing_yards_per_attempt = passing_yards_per_attempt;
    m_passing_yards_per_attempt_isSet = true;
}

bool OAITeamSeason::is_passing_yards_per_attempt_Set() const{
    return m_passing_yards_per_attempt_isSet;
}

bool OAITeamSeason::is_passing_yards_per_attempt_Valid() const{
    return m_passing_yards_per_attempt_isValid;
}

double OAITeamSeason::getPassingYardsPerCompletion() const {
    return m_passing_yards_per_completion;
}
void OAITeamSeason::setPassingYardsPerCompletion(const double &passing_yards_per_completion) {
    m_passing_yards_per_completion = passing_yards_per_completion;
    m_passing_yards_per_completion_isSet = true;
}

bool OAITeamSeason::is_passing_yards_per_completion_Set() const{
    return m_passing_yards_per_completion_isSet;
}

bool OAITeamSeason::is_passing_yards_per_completion_Valid() const{
    return m_passing_yards_per_completion_isValid;
}

qint32 OAITeamSeason::getPenalties() const {
    return m_penalties;
}
void OAITeamSeason::setPenalties(const qint32 &penalties) {
    m_penalties = penalties;
    m_penalties_isSet = true;
}

bool OAITeamSeason::is_penalties_Set() const{
    return m_penalties_isSet;
}

bool OAITeamSeason::is_penalties_Valid() const{
    return m_penalties_isValid;
}

qint32 OAITeamSeason::getPenaltyYards() const {
    return m_penalty_yards;
}
void OAITeamSeason::setPenaltyYards(const qint32 &penalty_yards) {
    m_penalty_yards = penalty_yards;
    m_penalty_yards_isSet = true;
}

bool OAITeamSeason::is_penalty_yards_Set() const{
    return m_penalty_yards_isSet;
}

bool OAITeamSeason::is_penalty_yards_Valid() const{
    return m_penalty_yards_isValid;
}

qint32 OAITeamSeason::getPointsAgainst() const {
    return m_points_against;
}
void OAITeamSeason::setPointsAgainst(const qint32 &points_against) {
    m_points_against = points_against;
    m_points_against_isSet = true;
}

bool OAITeamSeason::is_points_against_Set() const{
    return m_points_against_isSet;
}

bool OAITeamSeason::is_points_against_Valid() const{
    return m_points_against_isValid;
}

qint32 OAITeamSeason::getPointsFor() const {
    return m_points_for;
}
void OAITeamSeason::setPointsFor(const qint32 &points_for) {
    m_points_for = points_for;
    m_points_for_isSet = true;
}

bool OAITeamSeason::is_points_for_Set() const{
    return m_points_for_isSet;
}

bool OAITeamSeason::is_points_for_Valid() const{
    return m_points_for_isValid;
}

double OAITeamSeason::getPuntAverage() const {
    return m_punt_average;
}
void OAITeamSeason::setPuntAverage(const double &punt_average) {
    m_punt_average = punt_average;
    m_punt_average_isSet = true;
}

bool OAITeamSeason::is_punt_average_Set() const{
    return m_punt_average_isSet;
}

bool OAITeamSeason::is_punt_average_Valid() const{
    return m_punt_average_isValid;
}

double OAITeamSeason::getPuntLong() const {
    return m_punt_long;
}
void OAITeamSeason::setPuntLong(const double &punt_long) {
    m_punt_long = punt_long;
    m_punt_long_isSet = true;
}

bool OAITeamSeason::is_punt_long_Set() const{
    return m_punt_long_isSet;
}

bool OAITeamSeason::is_punt_long_Valid() const{
    return m_punt_long_isValid;
}

double OAITeamSeason::getPuntReturnLong() const {
    return m_punt_return_long;
}
void OAITeamSeason::setPuntReturnLong(const double &punt_return_long) {
    m_punt_return_long = punt_return_long;
    m_punt_return_long_isSet = true;
}

bool OAITeamSeason::is_punt_return_long_Set() const{
    return m_punt_return_long_isSet;
}

bool OAITeamSeason::is_punt_return_long_Valid() const{
    return m_punt_return_long_isValid;
}

double OAITeamSeason::getPuntReturnTouchdowns() const {
    return m_punt_return_touchdowns;
}
void OAITeamSeason::setPuntReturnTouchdowns(const double &punt_return_touchdowns) {
    m_punt_return_touchdowns = punt_return_touchdowns;
    m_punt_return_touchdowns_isSet = true;
}

bool OAITeamSeason::is_punt_return_touchdowns_Set() const{
    return m_punt_return_touchdowns_isSet;
}

bool OAITeamSeason::is_punt_return_touchdowns_Valid() const{
    return m_punt_return_touchdowns_isValid;
}

double OAITeamSeason::getPuntReturnYards() const {
    return m_punt_return_yards;
}
void OAITeamSeason::setPuntReturnYards(const double &punt_return_yards) {
    m_punt_return_yards = punt_return_yards;
    m_punt_return_yards_isSet = true;
}

bool OAITeamSeason::is_punt_return_yards_Set() const{
    return m_punt_return_yards_isSet;
}

bool OAITeamSeason::is_punt_return_yards_Valid() const{
    return m_punt_return_yards_isValid;
}

double OAITeamSeason::getPuntReturnYardsPerAttempt() const {
    return m_punt_return_yards_per_attempt;
}
void OAITeamSeason::setPuntReturnYardsPerAttempt(const double &punt_return_yards_per_attempt) {
    m_punt_return_yards_per_attempt = punt_return_yards_per_attempt;
    m_punt_return_yards_per_attempt_isSet = true;
}

bool OAITeamSeason::is_punt_return_yards_per_attempt_Set() const{
    return m_punt_return_yards_per_attempt_isSet;
}

bool OAITeamSeason::is_punt_return_yards_per_attempt_Valid() const{
    return m_punt_return_yards_per_attempt_isValid;
}

double OAITeamSeason::getPuntReturns() const {
    return m_punt_returns;
}
void OAITeamSeason::setPuntReturns(const double &punt_returns) {
    m_punt_returns = punt_returns;
    m_punt_returns_isSet = true;
}

bool OAITeamSeason::is_punt_returns_Set() const{
    return m_punt_returns_isSet;
}

bool OAITeamSeason::is_punt_returns_Valid() const{
    return m_punt_returns_isValid;
}

double OAITeamSeason::getPuntYards() const {
    return m_punt_yards;
}
void OAITeamSeason::setPuntYards(const double &punt_yards) {
    m_punt_yards = punt_yards;
    m_punt_yards_isSet = true;
}

bool OAITeamSeason::is_punt_yards_Set() const{
    return m_punt_yards_isSet;
}

bool OAITeamSeason::is_punt_yards_Valid() const{
    return m_punt_yards_isValid;
}

double OAITeamSeason::getPunts() const {
    return m_punts;
}
void OAITeamSeason::setPunts(const double &punts) {
    m_punts = punts;
    m_punts_isSet = true;
}

bool OAITeamSeason::is_punts_Set() const{
    return m_punts_isSet;
}

bool OAITeamSeason::is_punts_Valid() const{
    return m_punts_isValid;
}

double OAITeamSeason::getQuarterbackHurries() const {
    return m_quarterback_hurries;
}
void OAITeamSeason::setQuarterbackHurries(const double &quarterback_hurries) {
    m_quarterback_hurries = quarterback_hurries;
    m_quarterback_hurries_isSet = true;
}

bool OAITeamSeason::is_quarterback_hurries_Set() const{
    return m_quarterback_hurries_isSet;
}

bool OAITeamSeason::is_quarterback_hurries_Valid() const{
    return m_quarterback_hurries_isValid;
}

double OAITeamSeason::getReceivingLong() const {
    return m_receiving_long;
}
void OAITeamSeason::setReceivingLong(const double &receiving_long) {
    m_receiving_long = receiving_long;
    m_receiving_long_isSet = true;
}

bool OAITeamSeason::is_receiving_long_Set() const{
    return m_receiving_long_isSet;
}

bool OAITeamSeason::is_receiving_long_Valid() const{
    return m_receiving_long_isValid;
}

double OAITeamSeason::getReceivingTouchdowns() const {
    return m_receiving_touchdowns;
}
void OAITeamSeason::setReceivingTouchdowns(const double &receiving_touchdowns) {
    m_receiving_touchdowns = receiving_touchdowns;
    m_receiving_touchdowns_isSet = true;
}

bool OAITeamSeason::is_receiving_touchdowns_Set() const{
    return m_receiving_touchdowns_isSet;
}

bool OAITeamSeason::is_receiving_touchdowns_Valid() const{
    return m_receiving_touchdowns_isValid;
}

double OAITeamSeason::getReceivingYards() const {
    return m_receiving_yards;
}
void OAITeamSeason::setReceivingYards(const double &receiving_yards) {
    m_receiving_yards = receiving_yards;
    m_receiving_yards_isSet = true;
}

bool OAITeamSeason::is_receiving_yards_Set() const{
    return m_receiving_yards_isSet;
}

bool OAITeamSeason::is_receiving_yards_Valid() const{
    return m_receiving_yards_isValid;
}

double OAITeamSeason::getReceivingYardsPerReception() const {
    return m_receiving_yards_per_reception;
}
void OAITeamSeason::setReceivingYardsPerReception(const double &receiving_yards_per_reception) {
    m_receiving_yards_per_reception = receiving_yards_per_reception;
    m_receiving_yards_per_reception_isSet = true;
}

bool OAITeamSeason::is_receiving_yards_per_reception_Set() const{
    return m_receiving_yards_per_reception_isSet;
}

bool OAITeamSeason::is_receiving_yards_per_reception_Valid() const{
    return m_receiving_yards_per_reception_isValid;
}

double OAITeamSeason::getReceptions() const {
    return m_receptions;
}
void OAITeamSeason::setReceptions(const double &receptions) {
    m_receptions = receptions;
    m_receptions_isSet = true;
}

bool OAITeamSeason::is_receptions_Set() const{
    return m_receptions_isSet;
}

bool OAITeamSeason::is_receptions_Valid() const{
    return m_receptions_isValid;
}

qint32 OAITeamSeason::getRoadLosses() const {
    return m_road_losses;
}
void OAITeamSeason::setRoadLosses(const qint32 &road_losses) {
    m_road_losses = road_losses;
    m_road_losses_isSet = true;
}

bool OAITeamSeason::is_road_losses_Set() const{
    return m_road_losses_isSet;
}

bool OAITeamSeason::is_road_losses_Valid() const{
    return m_road_losses_isValid;
}

qint32 OAITeamSeason::getRoadWins() const {
    return m_road_wins;
}
void OAITeamSeason::setRoadWins(const qint32 &road_wins) {
    m_road_wins = road_wins;
    m_road_wins_isSet = true;
}

bool OAITeamSeason::is_road_wins_Set() const{
    return m_road_wins_isSet;
}

bool OAITeamSeason::is_road_wins_Valid() const{
    return m_road_wins_isValid;
}

double OAITeamSeason::getRushingAttempts() const {
    return m_rushing_attempts;
}
void OAITeamSeason::setRushingAttempts(const double &rushing_attempts) {
    m_rushing_attempts = rushing_attempts;
    m_rushing_attempts_isSet = true;
}

bool OAITeamSeason::is_rushing_attempts_Set() const{
    return m_rushing_attempts_isSet;
}

bool OAITeamSeason::is_rushing_attempts_Valid() const{
    return m_rushing_attempts_isValid;
}

double OAITeamSeason::getRushingLong() const {
    return m_rushing_long;
}
void OAITeamSeason::setRushingLong(const double &rushing_long) {
    m_rushing_long = rushing_long;
    m_rushing_long_isSet = true;
}

bool OAITeamSeason::is_rushing_long_Set() const{
    return m_rushing_long_isSet;
}

bool OAITeamSeason::is_rushing_long_Valid() const{
    return m_rushing_long_isValid;
}

double OAITeamSeason::getRushingTouchdowns() const {
    return m_rushing_touchdowns;
}
void OAITeamSeason::setRushingTouchdowns(const double &rushing_touchdowns) {
    m_rushing_touchdowns = rushing_touchdowns;
    m_rushing_touchdowns_isSet = true;
}

bool OAITeamSeason::is_rushing_touchdowns_Set() const{
    return m_rushing_touchdowns_isSet;
}

bool OAITeamSeason::is_rushing_touchdowns_Valid() const{
    return m_rushing_touchdowns_isValid;
}

double OAITeamSeason::getRushingYards() const {
    return m_rushing_yards;
}
void OAITeamSeason::setRushingYards(const double &rushing_yards) {
    m_rushing_yards = rushing_yards;
    m_rushing_yards_isSet = true;
}

bool OAITeamSeason::is_rushing_yards_Set() const{
    return m_rushing_yards_isSet;
}

bool OAITeamSeason::is_rushing_yards_Valid() const{
    return m_rushing_yards_isValid;
}

double OAITeamSeason::getRushingYardsPerAttempt() const {
    return m_rushing_yards_per_attempt;
}
void OAITeamSeason::setRushingYardsPerAttempt(const double &rushing_yards_per_attempt) {
    m_rushing_yards_per_attempt = rushing_yards_per_attempt;
    m_rushing_yards_per_attempt_isSet = true;
}

bool OAITeamSeason::is_rushing_yards_per_attempt_Set() const{
    return m_rushing_yards_per_attempt_isSet;
}

bool OAITeamSeason::is_rushing_yards_per_attempt_Valid() const{
    return m_rushing_yards_per_attempt_isValid;
}

double OAITeamSeason::getSacks() const {
    return m_sacks;
}
void OAITeamSeason::setSacks(const double &sacks) {
    m_sacks = sacks;
    m_sacks_isSet = true;
}

bool OAITeamSeason::is_sacks_Set() const{
    return m_sacks_isSet;
}

bool OAITeamSeason::is_sacks_Valid() const{
    return m_sacks_isValid;
}

qint32 OAITeamSeason::getScore() const {
    return m_score;
}
void OAITeamSeason::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAITeamSeason::is_score_Set() const{
    return m_score_isSet;
}

bool OAITeamSeason::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAITeamSeason::getSeason() const {
    return m_season;
}
void OAITeamSeason::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAITeamSeason::is_season_Set() const{
    return m_season_isSet;
}

bool OAITeamSeason::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAITeamSeason::getSeasonType() const {
    return m_season_type;
}
void OAITeamSeason::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAITeamSeason::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAITeamSeason::is_season_type_Valid() const{
    return m_season_type_isValid;
}

double OAITeamSeason::getSoloTackles() const {
    return m_solo_tackles;
}
void OAITeamSeason::setSoloTackles(const double &solo_tackles) {
    m_solo_tackles = solo_tackles;
    m_solo_tackles_isSet = true;
}

bool OAITeamSeason::is_solo_tackles_Set() const{
    return m_solo_tackles_isSet;
}

bool OAITeamSeason::is_solo_tackles_Valid() const{
    return m_solo_tackles_isValid;
}

qint32 OAITeamSeason::getStatId() const {
    return m_stat_id;
}
void OAITeamSeason::setStatId(const qint32 &stat_id) {
    m_stat_id = stat_id;
    m_stat_id_isSet = true;
}

bool OAITeamSeason::is_stat_id_Set() const{
    return m_stat_id_isSet;
}

bool OAITeamSeason::is_stat_id_Valid() const{
    return m_stat_id_isValid;
}

qint32 OAITeamSeason::getStreak() const {
    return m_streak;
}
void OAITeamSeason::setStreak(const qint32 &streak) {
    m_streak = streak;
    m_streak_isSet = true;
}

bool OAITeamSeason::is_streak_Set() const{
    return m_streak_isSet;
}

bool OAITeamSeason::is_streak_Valid() const{
    return m_streak_isValid;
}

double OAITeamSeason::getTacklesForLoss() const {
    return m_tackles_for_loss;
}
void OAITeamSeason::setTacklesForLoss(const double &tackles_for_loss) {
    m_tackles_for_loss = tackles_for_loss;
    m_tackles_for_loss_isSet = true;
}

bool OAITeamSeason::is_tackles_for_loss_Set() const{
    return m_tackles_for_loss_isSet;
}

bool OAITeamSeason::is_tackles_for_loss_Valid() const{
    return m_tackles_for_loss_isValid;
}

QString OAITeamSeason::getTeam() const {
    return m_team;
}
void OAITeamSeason::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamSeason::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamSeason::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAITeamSeason::getTeamId() const {
    return m_team_id;
}
void OAITeamSeason::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamSeason::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamSeason::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAITeamSeason::getThirdDownAttempts() const {
    return m_third_down_attempts;
}
void OAITeamSeason::setThirdDownAttempts(const qint32 &third_down_attempts) {
    m_third_down_attempts = third_down_attempts;
    m_third_down_attempts_isSet = true;
}

bool OAITeamSeason::is_third_down_attempts_Set() const{
    return m_third_down_attempts_isSet;
}

bool OAITeamSeason::is_third_down_attempts_Valid() const{
    return m_third_down_attempts_isValid;
}

qint32 OAITeamSeason::getThirdDownConversions() const {
    return m_third_down_conversions;
}
void OAITeamSeason::setThirdDownConversions(const qint32 &third_down_conversions) {
    m_third_down_conversions = third_down_conversions;
    m_third_down_conversions_isSet = true;
}

bool OAITeamSeason::is_third_down_conversions_Set() const{
    return m_third_down_conversions_isSet;
}

bool OAITeamSeason::is_third_down_conversions_Valid() const{
    return m_third_down_conversions_isValid;
}

qint32 OAITeamSeason::getTimeOfPossessionMinutes() const {
    return m_time_of_possession_minutes;
}
void OAITeamSeason::setTimeOfPossessionMinutes(const qint32 &time_of_possession_minutes) {
    m_time_of_possession_minutes = time_of_possession_minutes;
    m_time_of_possession_minutes_isSet = true;
}

bool OAITeamSeason::is_time_of_possession_minutes_Set() const{
    return m_time_of_possession_minutes_isSet;
}

bool OAITeamSeason::is_time_of_possession_minutes_Valid() const{
    return m_time_of_possession_minutes_isValid;
}

qint32 OAITeamSeason::getTimeOfPossessionSeconds() const {
    return m_time_of_possession_seconds;
}
void OAITeamSeason::setTimeOfPossessionSeconds(const qint32 &time_of_possession_seconds) {
    m_time_of_possession_seconds = time_of_possession_seconds;
    m_time_of_possession_seconds_isSet = true;
}

bool OAITeamSeason::is_time_of_possession_seconds_Set() const{
    return m_time_of_possession_seconds_isSet;
}

bool OAITeamSeason::is_time_of_possession_seconds_Valid() const{
    return m_time_of_possession_seconds_isValid;
}

QString OAITeamSeason::getUpdated() const {
    return m_updated;
}
void OAITeamSeason::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITeamSeason::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITeamSeason::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAITeamSeason::getWins() const {
    return m_wins;
}
void OAITeamSeason::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAITeamSeason::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAITeamSeason::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAITeamSeason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_points_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_points_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_longest_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_downs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_defended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_completion_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_per_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_hurries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_per_reception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_road_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_road_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streak_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_possession_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_possession_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamSeason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
