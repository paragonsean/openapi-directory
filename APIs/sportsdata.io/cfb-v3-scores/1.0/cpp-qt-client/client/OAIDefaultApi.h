/**
 * CFB v3 Scores
 * CFB schedules, scores, team stats, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConference.h"
#include "OAIGame.h"
#include "OAIPlayer.h"
#include "OAIPlayerBasic.h"
#include "OAIScheduleBasic.h"
#include "OAISeason.h"
#include "OAIStadium.h"
#include "OAITeam.h"
#include "OAITeamBasic.h"
#include "OAITeamGame.h"
#include "OAITeamSeason.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    */
    virtual void areGamesInProgress(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void conferenceHierarchyWithTeams(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void currentSeason(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void currentSeasonDetails(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void currentSeasontype(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void currentWeek(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void gamesByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void gamesByWeek(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void gamesByWeekBasic(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    */
    virtual void injuredPlayers(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByActive(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerDetailsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playerDetailsByTeam(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playersByTeamBasic(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void schedules(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void schedulesBasic(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void stadiums(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  teamid QString [required]
    * @param[in]  numberofgames QString [required]
    */
    virtual void teamGameLogsBySeason(const QString &format, const QString &season, const QString &teamid, const QString &numberofgames);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void teamGameStatsByWeek(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void teamSeasonStatsStandings(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teams(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsBasic(const QString &format);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void areGamesInProgressCallback(OAIHttpRequestWorker *worker);
    void conferenceHierarchyWithTeamsCallback(OAIHttpRequestWorker *worker);
    void currentSeasonCallback(OAIHttpRequestWorker *worker);
    void currentSeasonDetailsCallback(OAIHttpRequestWorker *worker);
    void currentSeasontypeCallback(OAIHttpRequestWorker *worker);
    void currentWeekCallback(OAIHttpRequestWorker *worker);
    void gamesByDateCallback(OAIHttpRequestWorker *worker);
    void gamesByWeekCallback(OAIHttpRequestWorker *worker);
    void gamesByWeekBasicCallback(OAIHttpRequestWorker *worker);
    void injuredPlayersCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByActiveCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByTeamCallback(OAIHttpRequestWorker *worker);
    void playersByTeamBasicCallback(OAIHttpRequestWorker *worker);
    void schedulesCallback(OAIHttpRequestWorker *worker);
    void schedulesBasicCallback(OAIHttpRequestWorker *worker);
    void stadiumsCallback(OAIHttpRequestWorker *worker);
    void teamGameLogsBySeasonCallback(OAIHttpRequestWorker *worker);
    void teamGameStatsByWeekCallback(OAIHttpRequestWorker *worker);
    void teamSeasonStatsStandingsCallback(OAIHttpRequestWorker *worker);
    void teamsCallback(OAIHttpRequestWorker *worker);
    void teamsBasicCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void areGamesInProgressSignal(bool summary);
    void conferenceHierarchyWithTeamsSignal(QList<OAIConference> summary);
    void currentSeasonSignal(qint32 summary);
    void currentSeasonDetailsSignal(OAISeason summary);
    void currentSeasontypeSignal(QString summary);
    void currentWeekSignal(qint32 summary);
    void gamesByDateSignal(QList<OAIGame> summary);
    void gamesByWeekSignal(QList<OAIGame> summary);
    void gamesByWeekBasicSignal(QJsonValue summary);
    void injuredPlayersSignal(QList<OAIPlayer> summary);
    void playerDetailsByActiveSignal(QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignal(QList<OAIPlayer> summary);
    void playerDetailsByTeamSignal(QList<OAIPlayer> summary);
    void playersByTeamBasicSignal(QList<OAIPlayerBasic> summary);
    void schedulesSignal(QList<OAIGame> summary);
    void schedulesBasicSignal(QList<OAIScheduleBasic> summary);
    void stadiumsSignal(QList<OAIStadium> summary);
    void teamGameLogsBySeasonSignal(QList<OAITeamGame> summary);
    void teamGameStatsByWeekSignal(QList<OAITeamGame> summary);
    void teamSeasonStatsStandingsSignal(QList<OAITeamSeason> summary);
    void teamsSignal(QList<OAITeam> summary);
    void teamsBasicSignal(QList<OAITeamBasic> summary);


    void areGamesInProgressSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void conferenceHierarchyWithTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAIConference> summary);
    void currentSeasonSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void currentSeasonDetailsSignalFull(OAIHttpRequestWorker *worker, OAISeason summary);
    void currentSeasontypeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void currentWeekSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void gamesByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void gamesByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void gamesByWeekBasicSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void injuredPlayersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByActiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playersByTeamBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerBasic> summary);
    void schedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void schedulesBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduleBasic> summary);
    void stadiumsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStadium> summary);
    void teamGameLogsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamGameStatsByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamSeasonStatsStandingsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamSeason> summary);
    void teamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teamsBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamBasic> summary);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalError() instead")
    void areGamesInProgressSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conferenceHierarchyWithTeamsSignalError() instead")
    void conferenceHierarchyWithTeamsSignalE(QList<OAIConference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conferenceHierarchyWithTeamsSignalError(QList<OAIConference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonSignalError() instead")
    void currentSeasonSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonDetailsSignalError() instead")
    void currentSeasonDetailsSignalE(OAISeason summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonDetailsSignalError(OAISeason summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasontypeSignalError() instead")
    void currentSeasontypeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasontypeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentWeekSignalError() instead")
    void currentWeekSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currentWeekSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateSignalError() instead")
    void gamesByDateSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByWeekSignalError() instead")
    void gamesByWeekSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByWeekSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByWeekBasicSignalError() instead")
    void gamesByWeekBasicSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByWeekBasicSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuredPlayersSignalError() instead")
    void injuredPlayersSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void injuredPlayersSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByActiveSignalError() instead")
    void playerDetailsByActiveSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByActiveSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalError() instead")
    void playerDetailsByPlayerSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalError() instead")
    void playerDetailsByTeamSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamBasicSignalError() instead")
    void playersByTeamBasicSignalE(QList<OAIPlayerBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamBasicSignalError(QList<OAIPlayerBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesSignalError() instead")
    void schedulesSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesBasicSignalError() instead")
    void schedulesBasicSignalE(QList<OAIScheduleBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesBasicSignalError(QList<OAIScheduleBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalError() instead")
    void stadiumsSignalE(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalError(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalError() instead")
    void teamGameLogsBySeasonSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsByWeekSignalError() instead")
    void teamGameStatsByWeekSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsByWeekSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsStandingsSignalError() instead")
    void teamSeasonStatsStandingsSignalE(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsStandingsSignalError(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsSignalError() instead")
    void teamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBasicSignalError() instead")
    void teamsBasicSignalE(QList<OAITeamBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBasicSignalError(QList<OAITeamBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalErrorFull() instead")
    void areGamesInProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conferenceHierarchyWithTeamsSignalErrorFull() instead")
    void conferenceHierarchyWithTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conferenceHierarchyWithTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonSignalErrorFull() instead")
    void currentSeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonDetailsSignalErrorFull() instead")
    void currentSeasonDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasontypeSignalErrorFull() instead")
    void currentSeasontypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasontypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentWeekSignalErrorFull() instead")
    void currentWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateSignalErrorFull() instead")
    void gamesByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByWeekSignalErrorFull() instead")
    void gamesByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByWeekBasicSignalErrorFull() instead")
    void gamesByWeekBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByWeekBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuredPlayersSignalErrorFull() instead")
    void injuredPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void injuredPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByActiveSignalErrorFull() instead")
    void playerDetailsByActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalErrorFull() instead")
    void playerDetailsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalErrorFull() instead")
    void playerDetailsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamBasicSignalErrorFull() instead")
    void playersByTeamBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesSignalErrorFull() instead")
    void schedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesBasicSignalErrorFull() instead")
    void schedulesBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalErrorFull() instead")
    void stadiumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalErrorFull() instead")
    void teamGameLogsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsByWeekSignalErrorFull() instead")
    void teamGameStatsByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsStandingsSignalErrorFull() instead")
    void teamSeasonStatsStandingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsStandingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsSignalErrorFull() instead")
    void teamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBasicSignalErrorFull() instead")
    void teamsBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
