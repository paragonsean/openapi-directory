/**
 * CFB v3 Scores
 * CFB schedules, scores, team stats, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_birth_city_isSet = false;
    m_birth_city_isValid = false;

    m_birth_state_isSet = false;
    m_birth_state_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_injury_body_part_isSet = false;
    m_injury_body_part_isValid = false;

    m_injury_notes_isSet = false;
    m_injury_notes_isValid = false;

    m_injury_start_date_isSet = false;
    m_injury_start_date_isValid = false;

    m_injury_status_isSet = false;
    m_injury_status_isValid = false;

    m_jersey_isSet = false;
    m_jersey_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_birth_city_isValid = ::OpenAPI::fromJsonValue(m_birth_city, json[QString("BirthCity")]);
    m_birth_city_isSet = !json[QString("BirthCity")].isNull() && m_birth_city_isValid;

    m_birth_state_isValid = ::OpenAPI::fromJsonValue(m_birth_state, json[QString("BirthState")]);
    m_birth_state_isSet = !json[QString("BirthState")].isNull() && m_birth_state_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("Class")]);
    m_r_class_isSet = !json[QString("Class")].isNull() && m_r_class_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_injury_body_part_isValid = ::OpenAPI::fromJsonValue(m_injury_body_part, json[QString("InjuryBodyPart")]);
    m_injury_body_part_isSet = !json[QString("InjuryBodyPart")].isNull() && m_injury_body_part_isValid;

    m_injury_notes_isValid = ::OpenAPI::fromJsonValue(m_injury_notes, json[QString("InjuryNotes")]);
    m_injury_notes_isSet = !json[QString("InjuryNotes")].isNull() && m_injury_notes_isValid;

    m_injury_start_date_isValid = ::OpenAPI::fromJsonValue(m_injury_start_date, json[QString("InjuryStartDate")]);
    m_injury_start_date_isSet = !json[QString("InjuryStartDate")].isNull() && m_injury_start_date_isValid;

    m_injury_status_isValid = ::OpenAPI::fromJsonValue(m_injury_status, json[QString("InjuryStatus")]);
    m_injury_status_isSet = !json[QString("InjuryStatus")].isNull() && m_injury_status_isValid;

    m_jersey_isValid = ::OpenAPI::fromJsonValue(m_jersey, json[QString("Jersey")]);
    m_jersey_isSet = !json[QString("Jersey")].isNull() && m_jersey_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_city_isSet) {
        obj.insert(QString("BirthCity"), ::OpenAPI::toJsonValue(m_birth_city));
    }
    if (m_birth_state_isSet) {
        obj.insert(QString("BirthState"), ::OpenAPI::toJsonValue(m_birth_state));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("Class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_injury_body_part_isSet) {
        obj.insert(QString("InjuryBodyPart"), ::OpenAPI::toJsonValue(m_injury_body_part));
    }
    if (m_injury_notes_isSet) {
        obj.insert(QString("InjuryNotes"), ::OpenAPI::toJsonValue(m_injury_notes));
    }
    if (m_injury_start_date_isSet) {
        obj.insert(QString("InjuryStartDate"), ::OpenAPI::toJsonValue(m_injury_start_date));
    }
    if (m_injury_status_isSet) {
        obj.insert(QString("InjuryStatus"), ::OpenAPI::toJsonValue(m_injury_status));
    }
    if (m_jersey_isSet) {
        obj.insert(QString("Jersey"), ::OpenAPI::toJsonValue(m_jersey));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIPlayer::getBirthCity() const {
    return m_birth_city;
}
void OAIPlayer::setBirthCity(const QString &birth_city) {
    m_birth_city = birth_city;
    m_birth_city_isSet = true;
}

bool OAIPlayer::is_birth_city_Set() const{
    return m_birth_city_isSet;
}

bool OAIPlayer::is_birth_city_Valid() const{
    return m_birth_city_isValid;
}

QString OAIPlayer::getBirthState() const {
    return m_birth_state;
}
void OAIPlayer::setBirthState(const QString &birth_state) {
    m_birth_state = birth_state;
    m_birth_state_isSet = true;
}

bool OAIPlayer::is_birth_state_Set() const{
    return m_birth_state_isSet;
}

bool OAIPlayer::is_birth_state_Valid() const{
    return m_birth_state_isValid;
}

QString OAIPlayer::getRClass() const {
    return m_r_class;
}
void OAIPlayer::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIPlayer::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIPlayer::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIPlayer::getCreated() const {
    return m_created;
}
void OAIPlayer::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPlayer::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPlayer::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPlayer::getFirstName() const {
    return m_first_name;
}
void OAIPlayer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPlayer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPlayer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIPlayer::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIPlayer::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIPlayer::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIPlayer::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

qint32 OAIPlayer::getHeight() const {
    return m_height;
}
void OAIPlayer::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlayer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlayer::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIPlayer::getInjuryBodyPart() const {
    return m_injury_body_part;
}
void OAIPlayer::setInjuryBodyPart(const QString &injury_body_part) {
    m_injury_body_part = injury_body_part;
    m_injury_body_part_isSet = true;
}

bool OAIPlayer::is_injury_body_part_Set() const{
    return m_injury_body_part_isSet;
}

bool OAIPlayer::is_injury_body_part_Valid() const{
    return m_injury_body_part_isValid;
}

QString OAIPlayer::getInjuryNotes() const {
    return m_injury_notes;
}
void OAIPlayer::setInjuryNotes(const QString &injury_notes) {
    m_injury_notes = injury_notes;
    m_injury_notes_isSet = true;
}

bool OAIPlayer::is_injury_notes_Set() const{
    return m_injury_notes_isSet;
}

bool OAIPlayer::is_injury_notes_Valid() const{
    return m_injury_notes_isValid;
}

QString OAIPlayer::getInjuryStartDate() const {
    return m_injury_start_date;
}
void OAIPlayer::setInjuryStartDate(const QString &injury_start_date) {
    m_injury_start_date = injury_start_date;
    m_injury_start_date_isSet = true;
}

bool OAIPlayer::is_injury_start_date_Set() const{
    return m_injury_start_date_isSet;
}

bool OAIPlayer::is_injury_start_date_Valid() const{
    return m_injury_start_date_isValid;
}

QString OAIPlayer::getInjuryStatus() const {
    return m_injury_status;
}
void OAIPlayer::setInjuryStatus(const QString &injury_status) {
    m_injury_status = injury_status;
    m_injury_status_isSet = true;
}

bool OAIPlayer::is_injury_status_Set() const{
    return m_injury_status_isSet;
}

bool OAIPlayer::is_injury_status_Valid() const{
    return m_injury_status_isValid;
}

qint32 OAIPlayer::getJersey() const {
    return m_jersey;
}
void OAIPlayer::setJersey(const qint32 &jersey) {
    m_jersey = jersey;
    m_jersey_isSet = true;
}

bool OAIPlayer::is_jersey_Set() const{
    return m_jersey_isSet;
}

bool OAIPlayer::is_jersey_Valid() const{
    return m_jersey_isValid;
}

QString OAIPlayer::getLastName() const {
    return m_last_name;
}
void OAIPlayer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPlayer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPlayer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIPlayer::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayer::getPosition() const {
    return m_position;
}
void OAIPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayer::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayer::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayer::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayer::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayer::is_position_category_Valid() const{
    return m_position_category_isValid;
}

QString OAIPlayer::getTeam() const {
    return m_team;
}
void OAIPlayer::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayer::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayer::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayer::getTeamId() const {
    return m_team_id;
}
void OAIPlayer::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayer::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayer::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIPlayer::getUpdated() const {
    return m_updated;
}
void OAIPlayer::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayer::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayer::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIPlayer::getWeight() const {
    return m_weight;
}
void OAIPlayer::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPlayer::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPlayer::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jersey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
