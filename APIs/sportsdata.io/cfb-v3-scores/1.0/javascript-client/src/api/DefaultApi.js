/**
 * CFB v3 Scores
 * CFB schedules, scores, team stats, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Conference from '../model/Conference';
import Game from '../model/Game';
import Player from '../model/Player';
import PlayerBasic from '../model/PlayerBasic';
import ScheduleBasic from '../model/ScheduleBasic';
import Season from '../model/Season';
import Stadium from '../model/Stadium';
import Team from '../model/Team';
import TeamBasic from '../model/TeamBasic';
import TeamGame from '../model/TeamGame';
import TeamSeason from '../model/TeamSeason';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the areGamesInProgress operation.
     * @callback module:api/DefaultApi~areGamesInProgressCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Are Games In Progress
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~areGamesInProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    areGamesInProgress(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling areGamesInProgress");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/{format}/AreAnyGamesInProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conferenceHierarchyWithTeams operation.
     * @callback module:api/DefaultApi~conferenceHierarchyWithTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Conference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conference Hierarchy (with Teams)
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~conferenceHierarchyWithTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Conference>}
     */
    conferenceHierarchyWithTeams(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling conferenceHierarchyWithTeams");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Conference];
      return this.apiClient.callApi(
        '/{format}/LeagueHierarchy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentSeason operation.
     * @callback module:api/DefaultApi~currentSeasonCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current Season
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~currentSeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    currentSeason(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling currentSeason");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/CurrentSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentSeasonDetails operation.
     * @callback module:api/DefaultApi~currentSeasonDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Season} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current Season Details
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~currentSeasonDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Season}
     */
    currentSeasonDetails(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling currentSeasonDetails");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Season;
      return this.apiClient.callApi(
        '/{format}/CurrentSeasonDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentSeasontype operation.
     * @callback module:api/DefaultApi~currentSeasontypeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current SeasonType
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~currentSeasontypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    currentSeasontype(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling currentSeasontype");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{format}/CurrentSeasonType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentWeek operation.
     * @callback module:api/DefaultApi~currentWeekCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current Week
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~currentWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    currentWeek(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling currentWeek");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/CurrentWeek', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesByDate operation.
     * @callback module:api/DefaultApi~gamesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Games by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} date            The date of the game(s).           <br>Examples: <code>2016-SEP-01</code>, <code>2017-SEP-10</code>.         
     * @param {module:api/DefaultApi~gamesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gamesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gamesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling gamesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GamesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesByWeek operation.
     * @callback module:api/DefaultApi~gamesByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Games by Week
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} season            Year of the season.           <br>Examples: <code>2015</code>, <code>2016</code>, etc.         
     * @param {String} week            The week of the game(s).           <br>Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc.         
     * @param {module:api/DefaultApi~gamesByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gamesByWeek(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gamesByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling gamesByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling gamesByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GamesByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesByWeekBasic operation.
     * @callback module:api/DefaultApi~gamesByWeekBasicCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Games by Week (Basic)
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} season            Year of the season.           <br>Examples: <code>2015</code>, <code>2016</code>, etc.         
     * @param {String} week            The week of the game(s).           <br>Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc.         
     * @param {module:api/DefaultApi~gamesByWeekBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    gamesByWeekBasic(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gamesByWeekBasic");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling gamesByWeekBasic");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling gamesByWeekBasic");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/{format}/ScoresBasic/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuredPlayers operation.
     * @callback module:api/DefaultApi~injuredPlayersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injured Players
     * This endpoint provides all currently injured college football players, along with injury details.
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~injuredPlayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    injuredPlayers(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuredPlayers");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/InjuredPlayers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByActive operation.
     * @callback module:api/DefaultApi~playerDetailsByActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details By Active
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playerDetailsByActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByPlayer operation.
     * @callback module:api/DefaultApi~playerDetailsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details By Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid            Unique FantasyData Player ID.           Example:<code>50002016</code>.         
     * @param {module:api/DefaultApi~playerDetailsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerDetailsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Player/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByTeam operation.
     * @callback module:api/DefaultApi~playerDetailsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team            The abbreviation of the requested team.           <br>Examples: <code>SF</code>, <code>NYY</code>.         
     * @param {module:api/DefaultApi~playerDetailsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByTeam(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playerDetailsByTeam");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playersByTeamBasic operation.
     * @callback module:api/DefaultApi~playersByTeamBasicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players by Team (Basic)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team            The abbreviation of the requested team.           <br>Examples: <code>SF</code>, <code>NYY</code>.         
     * @param {module:api/DefaultApi~playersByTeamBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerBasic>}
     */
    playersByTeamBasic(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playersByTeamBasic");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playersByTeamBasic");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerBasic];
      return this.apiClient.callApi(
        '/{format}/PlayersBasic/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedules operation.
     * @callback module:api/DefaultApi~schedulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~schedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    schedules(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedules");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling schedules");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/Games/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulesBasic operation.
     * @callback module:api/DefaultApi~schedulesBasicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduleBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules (Basic)
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~schedulesBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduleBasic>}
     */
    schedulesBasic(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedulesBasic");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling schedulesBasic");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScheduleBasic];
      return this.apiClient.callApi(
        '/{format}/SchedulesBasic/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stadiums operation.
     * @callback module:api/DefaultApi~stadiumsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Stadium>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stadiums
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~stadiumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Stadium>}
     */
    stadiums(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling stadiums");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stadium];
      return this.apiClient.callApi(
        '/{format}/Stadiums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameLogsBySeason operation.
     * @callback module:api/DefaultApi~teamGameLogsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Logs By Season
     * Game by game log of total team statistics.
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} season Season to get games from. Example <code>2019POST</code>, <code>2020</code>        
     * @param {String} teamid Unique ID of team.  Example <code> 1 </code>
     * @param {String} numberofgames How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code>
     * @param {module:api/DefaultApi~teamGameLogsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameLogsBySeason(format, season, teamid, numberofgames, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'numberofgames' is set
      if (numberofgames === undefined || numberofgames === null) {
        throw new Error("Missing the required parameter 'numberofgames' when calling teamGameLogsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'teamid': teamid,
        'numberofgames': numberofgames
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameStatsByWeek operation.
     * @callback module:api/DefaultApi~teamGameStatsByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Stats by Week
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} season            Year of the season.           <br>Examples: <code>2015</code>, <code>2016</code>, etc.         
     * @param {String} week            The week of the game(s).           <br>Examples: <code>1</code>, <code>2</code>, <code>3</code>, etc.         
     * @param {module:api/DefaultApi~teamGameStatsByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameStatsByWeek(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameStatsByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamGameStatsByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling teamGameStatsByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStatsByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamSeasonStatsStandings operation.
     * @callback module:api/DefaultApi~teamSeasonStatsStandingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Season Stats & Standings
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2017</code>, <code>2017POST</code>, <code>2018</code>.
     * @param {module:api/DefaultApi~teamSeasonStatsStandingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSeason>}
     */
    teamSeasonStatsStandings(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamSeasonStatsStandings");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamSeasonStatsStandings");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSeason];
      return this.apiClient.callApi(
        '/{format}/TeamSeasonStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teams operation.
     * @callback module:api/DefaultApi~teamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~teamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teams(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teams");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/Teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBasic operation.
     * @callback module:api/DefaultApi~teamsBasicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (Basic)
     * @param {module:model/String} format Desired response format. Valid entries are <code>xml</code> or <code>json</code>.
     * @param {module:api/DefaultApi~teamsBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamBasic>}
     */
    teamsBasic(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsBasic");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamBasic];
      return this.apiClient.callApi(
        '/{format}/TeamsBasic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
