/**
 * CFB v3 Scores
 * CFB schedules, scores, team stats, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Stadium model module.
 * @module model/Stadium
 * @version 1.0
 */
class Stadium {
    /**
     * Constructs a new <code>Stadium</code>.
     * @alias module:model/Stadium
     */
    constructor() { 
        
        Stadium.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Stadium</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stadium} obj Optional instance to populate.
     * @return {module:model/Stadium} The populated <code>Stadium</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stadium();

            if (data.hasOwnProperty('Active')) {
                obj['Active'] = ApiClient.convertToType(data['Active'], 'Boolean');
            }
            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Dome')) {
                obj['Dome'] = ApiClient.convertToType(data['Dome'], 'Boolean');
            }
            if (data.hasOwnProperty('GeoLat')) {
                obj['GeoLat'] = ApiClient.convertToType(data['GeoLat'], 'Number');
            }
            if (data.hasOwnProperty('GeoLong')) {
                obj['GeoLong'] = ApiClient.convertToType(data['GeoLong'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('StadiumID')) {
                obj['StadiumID'] = ApiClient.convertToType(data['StadiumID'], 'Number');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stadium</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stadium</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }

        return true;
    }


}



/**
 * @member {Boolean} Active
 */
Stadium.prototype['Active'] = undefined;

/**
 * @member {String} City
 */
Stadium.prototype['City'] = undefined;

/**
 * @member {Boolean} Dome
 */
Stadium.prototype['Dome'] = undefined;

/**
 * @member {Number} GeoLat
 */
Stadium.prototype['GeoLat'] = undefined;

/**
 * @member {Number} GeoLong
 */
Stadium.prototype['GeoLong'] = undefined;

/**
 * @member {String} Name
 */
Stadium.prototype['Name'] = undefined;

/**
 * @member {Number} StadiumID
 */
Stadium.prototype['StadiumID'] = undefined;

/**
 * @member {String} State
 */
Stadium.prototype['State'] = undefined;






export default Stadium;

