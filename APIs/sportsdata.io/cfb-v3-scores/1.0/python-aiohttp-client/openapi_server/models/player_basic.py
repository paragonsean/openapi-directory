# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayerBasic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_city: str=None, birth_state: str=None, _class: str=None, created: str=None, first_name: str=None, global_team_id: int=None, height: int=None, jersey: int=None, last_name: str=None, player_id: int=None, position: str=None, position_category: str=None, team: str=None, team_id: int=None, updated: str=None, weight: int=None):
        """PlayerBasic - a model defined in OpenAPI

        :param birth_city: The birth_city of this PlayerBasic.
        :param birth_state: The birth_state of this PlayerBasic.
        :param _class: The _class of this PlayerBasic.
        :param created: The created of this PlayerBasic.
        :param first_name: The first_name of this PlayerBasic.
        :param global_team_id: The global_team_id of this PlayerBasic.
        :param height: The height of this PlayerBasic.
        :param jersey: The jersey of this PlayerBasic.
        :param last_name: The last_name of this PlayerBasic.
        :param player_id: The player_id of this PlayerBasic.
        :param position: The position of this PlayerBasic.
        :param position_category: The position_category of this PlayerBasic.
        :param team: The team of this PlayerBasic.
        :param team_id: The team_id of this PlayerBasic.
        :param updated: The updated of this PlayerBasic.
        :param weight: The weight of this PlayerBasic.
        """
        self.openapi_types = {
            'birth_city': str,
            'birth_state': str,
            '_class': str,
            'created': str,
            'first_name': str,
            'global_team_id': int,
            'height': int,
            'jersey': int,
            'last_name': str,
            'player_id': int,
            'position': str,
            'position_category': str,
            'team': str,
            'team_id': int,
            'updated': str,
            'weight': int
        }

        self.attribute_map = {
            'birth_city': 'BirthCity',
            'birth_state': 'BirthState',
            '_class': 'Class',
            'created': 'Created',
            'first_name': 'FirstName',
            'global_team_id': 'GlobalTeamID',
            'height': 'Height',
            'jersey': 'Jersey',
            'last_name': 'LastName',
            'player_id': 'PlayerID',
            'position': 'Position',
            'position_category': 'PositionCategory',
            'team': 'Team',
            'team_id': 'TeamID',
            'updated': 'Updated',
            'weight': 'Weight'
        }

        self._birth_city = birth_city
        self._birth_state = birth_state
        self.__class = _class
        self._created = created
        self._first_name = first_name
        self._global_team_id = global_team_id
        self._height = height
        self._jersey = jersey
        self._last_name = last_name
        self._player_id = player_id
        self._position = position
        self._position_category = position_category
        self._team = team
        self._team_id = team_id
        self._updated = updated
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerBasic of this PlayerBasic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_city(self):
        """Gets the birth_city of this PlayerBasic.


        :return: The birth_city of this PlayerBasic.
        :rtype: str
        """
        return self._birth_city

    @birth_city.setter
    def birth_city(self, birth_city):
        """Sets the birth_city of this PlayerBasic.


        :param birth_city: The birth_city of this PlayerBasic.
        :type birth_city: str
        """

        self._birth_city = birth_city

    @property
    def birth_state(self):
        """Gets the birth_state of this PlayerBasic.


        :return: The birth_state of this PlayerBasic.
        :rtype: str
        """
        return self._birth_state

    @birth_state.setter
    def birth_state(self, birth_state):
        """Sets the birth_state of this PlayerBasic.


        :param birth_state: The birth_state of this PlayerBasic.
        :type birth_state: str
        """

        self._birth_state = birth_state

    @property
    def _class(self):
        """Gets the _class of this PlayerBasic.


        :return: The _class of this PlayerBasic.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PlayerBasic.


        :param _class: The _class of this PlayerBasic.
        :type _class: str
        """

        self.__class = _class

    @property
    def created(self):
        """Gets the created of this PlayerBasic.


        :return: The created of this PlayerBasic.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PlayerBasic.


        :param created: The created of this PlayerBasic.
        :type created: str
        """

        self._created = created

    @property
    def first_name(self):
        """Gets the first_name of this PlayerBasic.


        :return: The first_name of this PlayerBasic.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PlayerBasic.


        :param first_name: The first_name of this PlayerBasic.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def global_team_id(self):
        """Gets the global_team_id of this PlayerBasic.


        :return: The global_team_id of this PlayerBasic.
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this PlayerBasic.


        :param global_team_id: The global_team_id of this PlayerBasic.
        :type global_team_id: int
        """

        self._global_team_id = global_team_id

    @property
    def height(self):
        """Gets the height of this PlayerBasic.


        :return: The height of this PlayerBasic.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PlayerBasic.


        :param height: The height of this PlayerBasic.
        :type height: int
        """

        self._height = height

    @property
    def jersey(self):
        """Gets the jersey of this PlayerBasic.


        :return: The jersey of this PlayerBasic.
        :rtype: int
        """
        return self._jersey

    @jersey.setter
    def jersey(self, jersey):
        """Sets the jersey of this PlayerBasic.


        :param jersey: The jersey of this PlayerBasic.
        :type jersey: int
        """

        self._jersey = jersey

    @property
    def last_name(self):
        """Gets the last_name of this PlayerBasic.


        :return: The last_name of this PlayerBasic.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PlayerBasic.


        :param last_name: The last_name of this PlayerBasic.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def player_id(self):
        """Gets the player_id of this PlayerBasic.


        :return: The player_id of this PlayerBasic.
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this PlayerBasic.


        :param player_id: The player_id of this PlayerBasic.
        :type player_id: int
        """

        self._player_id = player_id

    @property
    def position(self):
        """Gets the position of this PlayerBasic.


        :return: The position of this PlayerBasic.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlayerBasic.


        :param position: The position of this PlayerBasic.
        :type position: str
        """

        self._position = position

    @property
    def position_category(self):
        """Gets the position_category of this PlayerBasic.


        :return: The position_category of this PlayerBasic.
        :rtype: str
        """
        return self._position_category

    @position_category.setter
    def position_category(self, position_category):
        """Sets the position_category of this PlayerBasic.


        :param position_category: The position_category of this PlayerBasic.
        :type position_category: str
        """

        self._position_category = position_category

    @property
    def team(self):
        """Gets the team of this PlayerBasic.


        :return: The team of this PlayerBasic.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this PlayerBasic.


        :param team: The team of this PlayerBasic.
        :type team: str
        """

        self._team = team

    @property
    def team_id(self):
        """Gets the team_id of this PlayerBasic.


        :return: The team_id of this PlayerBasic.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this PlayerBasic.


        :param team_id: The team_id of this PlayerBasic.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def updated(self):
        """Gets the updated of this PlayerBasic.


        :return: The updated of this PlayerBasic.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PlayerBasic.


        :param updated: The updated of this PlayerBasic.
        :type updated: str
        """

        self._updated = updated

    @property
    def weight(self):
        """Gets the weight of this PlayerBasic.


        :return: The weight of this PlayerBasic.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this PlayerBasic.


        :param weight: The weight of this PlayerBasic.
        :type weight: int
        """

        self._weight = weight
