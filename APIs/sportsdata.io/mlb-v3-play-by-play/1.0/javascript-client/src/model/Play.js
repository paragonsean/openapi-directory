/**
 * MLB v3 Play-by-Play
 * MLB play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Pitch from './Pitch';

/**
 * The Play model module.
 * @module model/Play
 * @version 1.0
 */
class Play {
    /**
     * Constructs a new <code>Play</code>.
     * @alias module:model/Play
     */
    constructor() { 
        
        Play.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Play</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Play} obj Optional instance to populate.
     * @return {module:model/Play} The populated <code>Play</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Play();

            if (data.hasOwnProperty('AtBat')) {
                obj['AtBat'] = ApiClient.convertToType(data['AtBat'], 'Boolean');
            }
            if (data.hasOwnProperty('AwayTeamRuns')) {
                obj['AwayTeamRuns'] = ApiClient.convertToType(data['AwayTeamRuns'], 'Number');
            }
            if (data.hasOwnProperty('Balls')) {
                obj['Balls'] = ApiClient.convertToType(data['Balls'], 'Number');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Error')) {
                obj['Error'] = ApiClient.convertToType(data['Error'], 'Boolean');
            }
            if (data.hasOwnProperty('Hit')) {
                obj['Hit'] = ApiClient.convertToType(data['Hit'], 'Boolean');
            }
            if (data.hasOwnProperty('HitterBatHand')) {
                obj['HitterBatHand'] = ApiClient.convertToType(data['HitterBatHand'], 'String');
            }
            if (data.hasOwnProperty('HitterID')) {
                obj['HitterID'] = ApiClient.convertToType(data['HitterID'], 'Number');
            }
            if (data.hasOwnProperty('HitterName')) {
                obj['HitterName'] = ApiClient.convertToType(data['HitterName'], 'String');
            }
            if (data.hasOwnProperty('HitterPosition')) {
                obj['HitterPosition'] = ApiClient.convertToType(data['HitterPosition'], 'String');
            }
            if (data.hasOwnProperty('HitterTeamID')) {
                obj['HitterTeamID'] = ApiClient.convertToType(data['HitterTeamID'], 'Number');
            }
            if (data.hasOwnProperty('HomeTeamRuns')) {
                obj['HomeTeamRuns'] = ApiClient.convertToType(data['HomeTeamRuns'], 'Number');
            }
            if (data.hasOwnProperty('InningBatterNumber')) {
                obj['InningBatterNumber'] = ApiClient.convertToType(data['InningBatterNumber'], 'Number');
            }
            if (data.hasOwnProperty('InningHalf')) {
                obj['InningHalf'] = ApiClient.convertToType(data['InningHalf'], 'String');
            }
            if (data.hasOwnProperty('InningID')) {
                obj['InningID'] = ApiClient.convertToType(data['InningID'], 'Number');
            }
            if (data.hasOwnProperty('InningNumber')) {
                obj['InningNumber'] = ApiClient.convertToType(data['InningNumber'], 'Number');
            }
            if (data.hasOwnProperty('NumberOfOutsOnPlay')) {
                obj['NumberOfOutsOnPlay'] = ApiClient.convertToType(data['NumberOfOutsOnPlay'], 'Number');
            }
            if (data.hasOwnProperty('Out')) {
                obj['Out'] = ApiClient.convertToType(data['Out'], 'Boolean');
            }
            if (data.hasOwnProperty('Outs')) {
                obj['Outs'] = ApiClient.convertToType(data['Outs'], 'Number');
            }
            if (data.hasOwnProperty('PitchNumberThisAtBat')) {
                obj['PitchNumberThisAtBat'] = ApiClient.convertToType(data['PitchNumberThisAtBat'], 'Number');
            }
            if (data.hasOwnProperty('PitcherID')) {
                obj['PitcherID'] = ApiClient.convertToType(data['PitcherID'], 'Number');
            }
            if (data.hasOwnProperty('PitcherName')) {
                obj['PitcherName'] = ApiClient.convertToType(data['PitcherName'], 'String');
            }
            if (data.hasOwnProperty('PitcherTeamID')) {
                obj['PitcherTeamID'] = ApiClient.convertToType(data['PitcherTeamID'], 'Number');
            }
            if (data.hasOwnProperty('PitcherThrowHand')) {
                obj['PitcherThrowHand'] = ApiClient.convertToType(data['PitcherThrowHand'], 'String');
            }
            if (data.hasOwnProperty('Pitches')) {
                obj['Pitches'] = ApiClient.convertToType(data['Pitches'], [Pitch]);
            }
            if (data.hasOwnProperty('PlayID')) {
                obj['PlayID'] = ApiClient.convertToType(data['PlayID'], 'Number');
            }
            if (data.hasOwnProperty('PlayNumber')) {
                obj['PlayNumber'] = ApiClient.convertToType(data['PlayNumber'], 'Number');
            }
            if (data.hasOwnProperty('Result')) {
                obj['Result'] = ApiClient.convertToType(data['Result'], 'String');
            }
            if (data.hasOwnProperty('Runner1ID')) {
                obj['Runner1ID'] = ApiClient.convertToType(data['Runner1ID'], 'Number');
            }
            if (data.hasOwnProperty('Runner2ID')) {
                obj['Runner2ID'] = ApiClient.convertToType(data['Runner2ID'], 'Number');
            }
            if (data.hasOwnProperty('Runner3ID')) {
                obj['Runner3ID'] = ApiClient.convertToType(data['Runner3ID'], 'Number');
            }
            if (data.hasOwnProperty('RunsBattedIn')) {
                obj['RunsBattedIn'] = ApiClient.convertToType(data['RunsBattedIn'], 'Number');
            }
            if (data.hasOwnProperty('Sacrifice')) {
                obj['Sacrifice'] = ApiClient.convertToType(data['Sacrifice'], 'Boolean');
            }
            if (data.hasOwnProperty('Strikeout')) {
                obj['Strikeout'] = ApiClient.convertToType(data['Strikeout'], 'Boolean');
            }
            if (data.hasOwnProperty('Strikes')) {
                obj['Strikes'] = ApiClient.convertToType(data['Strikes'], 'Number');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
            if (data.hasOwnProperty('Walk')) {
                obj['Walk'] = ApiClient.convertToType(data['Walk'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Play</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Play</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['HitterBatHand'] && !(typeof data['HitterBatHand'] === 'string' || data['HitterBatHand'] instanceof String)) {
            throw new Error("Expected the field `HitterBatHand` to be a primitive type in the JSON string but got " + data['HitterBatHand']);
        }
        // ensure the json data is a string
        if (data['HitterName'] && !(typeof data['HitterName'] === 'string' || data['HitterName'] instanceof String)) {
            throw new Error("Expected the field `HitterName` to be a primitive type in the JSON string but got " + data['HitterName']);
        }
        // ensure the json data is a string
        if (data['HitterPosition'] && !(typeof data['HitterPosition'] === 'string' || data['HitterPosition'] instanceof String)) {
            throw new Error("Expected the field `HitterPosition` to be a primitive type in the JSON string but got " + data['HitterPosition']);
        }
        // ensure the json data is a string
        if (data['InningHalf'] && !(typeof data['InningHalf'] === 'string' || data['InningHalf'] instanceof String)) {
            throw new Error("Expected the field `InningHalf` to be a primitive type in the JSON string but got " + data['InningHalf']);
        }
        // ensure the json data is a string
        if (data['PitcherName'] && !(typeof data['PitcherName'] === 'string' || data['PitcherName'] instanceof String)) {
            throw new Error("Expected the field `PitcherName` to be a primitive type in the JSON string but got " + data['PitcherName']);
        }
        // ensure the json data is a string
        if (data['PitcherThrowHand'] && !(typeof data['PitcherThrowHand'] === 'string' || data['PitcherThrowHand'] instanceof String)) {
            throw new Error("Expected the field `PitcherThrowHand` to be a primitive type in the JSON string but got " + data['PitcherThrowHand']);
        }
        if (data['Pitches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Pitches'])) {
                throw new Error("Expected the field `Pitches` to be an array in the JSON data but got " + data['Pitches']);
            }
            // validate the optional field `Pitches` (array)
            for (const item of data['Pitches']) {
                Pitch.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Result'] && !(typeof data['Result'] === 'string' || data['Result'] instanceof String)) {
            throw new Error("Expected the field `Result` to be a primitive type in the JSON string but got " + data['Result']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }

        return true;
    }


}



/**
 * @member {Boolean} AtBat
 */
Play.prototype['AtBat'] = undefined;

/**
 * @member {Number} AwayTeamRuns
 */
Play.prototype['AwayTeamRuns'] = undefined;

/**
 * @member {Number} Balls
 */
Play.prototype['Balls'] = undefined;

/**
 * @member {String} Description
 */
Play.prototype['Description'] = undefined;

/**
 * @member {Boolean} Error
 */
Play.prototype['Error'] = undefined;

/**
 * @member {Boolean} Hit
 */
Play.prototype['Hit'] = undefined;

/**
 * @member {String} HitterBatHand
 */
Play.prototype['HitterBatHand'] = undefined;

/**
 * @member {Number} HitterID
 */
Play.prototype['HitterID'] = undefined;

/**
 * @member {String} HitterName
 */
Play.prototype['HitterName'] = undefined;

/**
 * @member {String} HitterPosition
 */
Play.prototype['HitterPosition'] = undefined;

/**
 * @member {Number} HitterTeamID
 */
Play.prototype['HitterTeamID'] = undefined;

/**
 * @member {Number} HomeTeamRuns
 */
Play.prototype['HomeTeamRuns'] = undefined;

/**
 * @member {Number} InningBatterNumber
 */
Play.prototype['InningBatterNumber'] = undefined;

/**
 * @member {String} InningHalf
 */
Play.prototype['InningHalf'] = undefined;

/**
 * @member {Number} InningID
 */
Play.prototype['InningID'] = undefined;

/**
 * @member {Number} InningNumber
 */
Play.prototype['InningNumber'] = undefined;

/**
 * @member {Number} NumberOfOutsOnPlay
 */
Play.prototype['NumberOfOutsOnPlay'] = undefined;

/**
 * @member {Boolean} Out
 */
Play.prototype['Out'] = undefined;

/**
 * @member {Number} Outs
 */
Play.prototype['Outs'] = undefined;

/**
 * @member {Number} PitchNumberThisAtBat
 */
Play.prototype['PitchNumberThisAtBat'] = undefined;

/**
 * @member {Number} PitcherID
 */
Play.prototype['PitcherID'] = undefined;

/**
 * @member {String} PitcherName
 */
Play.prototype['PitcherName'] = undefined;

/**
 * @member {Number} PitcherTeamID
 */
Play.prototype['PitcherTeamID'] = undefined;

/**
 * @member {String} PitcherThrowHand
 */
Play.prototype['PitcherThrowHand'] = undefined;

/**
 * @member {Array.<module:model/Pitch>} Pitches
 */
Play.prototype['Pitches'] = undefined;

/**
 * @member {Number} PlayID
 */
Play.prototype['PlayID'] = undefined;

/**
 * @member {Number} PlayNumber
 */
Play.prototype['PlayNumber'] = undefined;

/**
 * @member {String} Result
 */
Play.prototype['Result'] = undefined;

/**
 * @member {Number} Runner1ID
 */
Play.prototype['Runner1ID'] = undefined;

/**
 * @member {Number} Runner2ID
 */
Play.prototype['Runner2ID'] = undefined;

/**
 * @member {Number} Runner3ID
 */
Play.prototype['Runner3ID'] = undefined;

/**
 * @member {Number} RunsBattedIn
 */
Play.prototype['RunsBattedIn'] = undefined;

/**
 * @member {Boolean} Sacrifice
 */
Play.prototype['Sacrifice'] = undefined;

/**
 * @member {Boolean} Strikeout
 */
Play.prototype['Strikeout'] = undefined;

/**
 * @member {Number} Strikes
 */
Play.prototype['Strikes'] = undefined;

/**
 * @member {String} Updated
 */
Play.prototype['Updated'] = undefined;

/**
 * @member {Boolean} Walk
 */
Play.prototype['Walk'] = undefined;






export default Play;

