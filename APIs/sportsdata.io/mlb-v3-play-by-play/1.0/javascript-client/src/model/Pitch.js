/**
 * MLB v3 Play-by-Play
 * MLB play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Pitch model module.
 * @module model/Pitch
 * @version 1.0
 */
class Pitch {
    /**
     * Constructs a new <code>Pitch</code>.
     * @alias module:model/Pitch
     */
    constructor() { 
        
        Pitch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pitch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pitch} obj Optional instance to populate.
     * @return {module:model/Pitch} The populated <code>Pitch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pitch();

            if (data.hasOwnProperty('Ball')) {
                obj['Ball'] = ApiClient.convertToType(data['Ball'], 'Boolean');
            }
            if (data.hasOwnProperty('BallsBeforePitch')) {
                obj['BallsBeforePitch'] = ApiClient.convertToType(data['BallsBeforePitch'], 'Number');
            }
            if (data.hasOwnProperty('Foul')) {
                obj['Foul'] = ApiClient.convertToType(data['Foul'], 'Boolean');
            }
            if (data.hasOwnProperty('HitterID')) {
                obj['HitterID'] = ApiClient.convertToType(data['HitterID'], 'Number');
            }
            if (data.hasOwnProperty('Looking')) {
                obj['Looking'] = ApiClient.convertToType(data['Looking'], 'Boolean');
            }
            if (data.hasOwnProperty('Outs')) {
                obj['Outs'] = ApiClient.convertToType(data['Outs'], 'Number');
            }
            if (data.hasOwnProperty('PitchID')) {
                obj['PitchID'] = ApiClient.convertToType(data['PitchID'], 'Number');
            }
            if (data.hasOwnProperty('PitchNumberThisAtBat')) {
                obj['PitchNumberThisAtBat'] = ApiClient.convertToType(data['PitchNumberThisAtBat'], 'Number');
            }
            if (data.hasOwnProperty('PitcherID')) {
                obj['PitcherID'] = ApiClient.convertToType(data['PitcherID'], 'Number');
            }
            if (data.hasOwnProperty('PlayID')) {
                obj['PlayID'] = ApiClient.convertToType(data['PlayID'], 'Number');
            }
            if (data.hasOwnProperty('Strike')) {
                obj['Strike'] = ApiClient.convertToType(data['Strike'], 'Boolean');
            }
            if (data.hasOwnProperty('StrikesBeforePitch')) {
                obj['StrikesBeforePitch'] = ApiClient.convertToType(data['StrikesBeforePitch'], 'Number');
            }
            if (data.hasOwnProperty('Swinging')) {
                obj['Swinging'] = ApiClient.convertToType(data['Swinging'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pitch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pitch</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Boolean} Ball
 */
Pitch.prototype['Ball'] = undefined;

/**
 * @member {Number} BallsBeforePitch
 */
Pitch.prototype['BallsBeforePitch'] = undefined;

/**
 * @member {Boolean} Foul
 */
Pitch.prototype['Foul'] = undefined;

/**
 * @member {Number} HitterID
 */
Pitch.prototype['HitterID'] = undefined;

/**
 * @member {Boolean} Looking
 */
Pitch.prototype['Looking'] = undefined;

/**
 * @member {Number} Outs
 */
Pitch.prototype['Outs'] = undefined;

/**
 * @member {Number} PitchID
 */
Pitch.prototype['PitchID'] = undefined;

/**
 * @member {Number} PitchNumberThisAtBat
 */
Pitch.prototype['PitchNumberThisAtBat'] = undefined;

/**
 * @member {Number} PitcherID
 */
Pitch.prototype['PitcherID'] = undefined;

/**
 * @member {Number} PlayID
 */
Pitch.prototype['PlayID'] = undefined;

/**
 * @member {Boolean} Strike
 */
Pitch.prototype['Strike'] = undefined;

/**
 * @member {Number} StrikesBeforePitch
 */
Pitch.prototype['StrikesBeforePitch'] = undefined;

/**
 * @member {Boolean} Swinging
 */
Pitch.prototype['Swinging'] = undefined;






export default Pitch;

