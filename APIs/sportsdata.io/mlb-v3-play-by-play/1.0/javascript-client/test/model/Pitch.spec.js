/**
 * MLB v3 Play-by-Play
 * MLB play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MlbV3PlayByPlay);
  }
}(this, function(expect, MlbV3PlayByPlay) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MlbV3PlayByPlay.Pitch();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Pitch', function() {
    it('should create an instance of Pitch', function() {
      // uncomment below and update the code to test Pitch
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be.a(MlbV3PlayByPlay.Pitch);
    });

    it('should have the property ball (base name: "Ball")', function() {
      // uncomment below and update the code to test the property ball
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property ballsBeforePitch (base name: "BallsBeforePitch")', function() {
      // uncomment below and update the code to test the property ballsBeforePitch
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property foul (base name: "Foul")', function() {
      // uncomment below and update the code to test the property foul
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property hitterID (base name: "HitterID")', function() {
      // uncomment below and update the code to test the property hitterID
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property looking (base name: "Looking")', function() {
      // uncomment below and update the code to test the property looking
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property outs (base name: "Outs")', function() {
      // uncomment below and update the code to test the property outs
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property pitchID (base name: "PitchID")', function() {
      // uncomment below and update the code to test the property pitchID
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property pitchNumberThisAtBat (base name: "PitchNumberThisAtBat")', function() {
      // uncomment below and update the code to test the property pitchNumberThisAtBat
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property pitcherID (base name: "PitcherID")', function() {
      // uncomment below and update the code to test the property pitcherID
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property playID (base name: "PlayID")', function() {
      // uncomment below and update the code to test the property playID
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property strike (base name: "Strike")', function() {
      // uncomment below and update the code to test the property strike
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property strikesBeforePitch (base name: "StrikesBeforePitch")', function() {
      // uncomment below and update the code to test the property strikesBeforePitch
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

    it('should have the property swinging (base name: "Swinging")', function() {
      // uncomment below and update the code to test the property swinging
      //var instance = new MlbV3PlayByPlay.Pitch();
      //expect(instance).to.be();
    });

  });

}));
