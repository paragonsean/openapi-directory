/**
 * MLB v3 Play-by-Play
 * MLB play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MlbV3PlayByPlay);
  }
}(this, function(expect, MlbV3PlayByPlay) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MlbV3PlayByPlay.Play();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Play', function() {
    it('should create an instance of Play', function() {
      // uncomment below and update the code to test Play
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be.a(MlbV3PlayByPlay.Play);
    });

    it('should have the property atBat (base name: "AtBat")', function() {
      // uncomment below and update the code to test the property atBat
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamRuns (base name: "AwayTeamRuns")', function() {
      // uncomment below and update the code to test the property awayTeamRuns
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property balls (base name: "Balls")', function() {
      // uncomment below and update the code to test the property balls
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "Error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property hit (base name: "Hit")', function() {
      // uncomment below and update the code to test the property hit
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property hitterBatHand (base name: "HitterBatHand")', function() {
      // uncomment below and update the code to test the property hitterBatHand
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property hitterID (base name: "HitterID")', function() {
      // uncomment below and update the code to test the property hitterID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property hitterName (base name: "HitterName")', function() {
      // uncomment below and update the code to test the property hitterName
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property hitterPosition (base name: "HitterPosition")', function() {
      // uncomment below and update the code to test the property hitterPosition
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property hitterTeamID (base name: "HitterTeamID")', function() {
      // uncomment below and update the code to test the property hitterTeamID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamRuns (base name: "HomeTeamRuns")', function() {
      // uncomment below and update the code to test the property homeTeamRuns
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property inningBatterNumber (base name: "InningBatterNumber")', function() {
      // uncomment below and update the code to test the property inningBatterNumber
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property inningHalf (base name: "InningHalf")', function() {
      // uncomment below and update the code to test the property inningHalf
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property inningID (base name: "InningID")', function() {
      // uncomment below and update the code to test the property inningID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property inningNumber (base name: "InningNumber")', function() {
      // uncomment below and update the code to test the property inningNumber
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property numberOfOutsOnPlay (base name: "NumberOfOutsOnPlay")', function() {
      // uncomment below and update the code to test the property numberOfOutsOnPlay
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property out (base name: "Out")', function() {
      // uncomment below and update the code to test the property out
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property outs (base name: "Outs")', function() {
      // uncomment below and update the code to test the property outs
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property pitchNumberThisAtBat (base name: "PitchNumberThisAtBat")', function() {
      // uncomment below and update the code to test the property pitchNumberThisAtBat
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property pitcherID (base name: "PitcherID")', function() {
      // uncomment below and update the code to test the property pitcherID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property pitcherName (base name: "PitcherName")', function() {
      // uncomment below and update the code to test the property pitcherName
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property pitcherTeamID (base name: "PitcherTeamID")', function() {
      // uncomment below and update the code to test the property pitcherTeamID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property pitcherThrowHand (base name: "PitcherThrowHand")', function() {
      // uncomment below and update the code to test the property pitcherThrowHand
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property pitches (base name: "Pitches")', function() {
      // uncomment below and update the code to test the property pitches
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property playID (base name: "PlayID")', function() {
      // uncomment below and update the code to test the property playID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property playNumber (base name: "PlayNumber")', function() {
      // uncomment below and update the code to test the property playNumber
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property result (base name: "Result")', function() {
      // uncomment below and update the code to test the property result
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property runner1ID (base name: "Runner1ID")', function() {
      // uncomment below and update the code to test the property runner1ID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property runner2ID (base name: "Runner2ID")', function() {
      // uncomment below and update the code to test the property runner2ID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property runner3ID (base name: "Runner3ID")', function() {
      // uncomment below and update the code to test the property runner3ID
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property runsBattedIn (base name: "RunsBattedIn")', function() {
      // uncomment below and update the code to test the property runsBattedIn
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property sacrifice (base name: "Sacrifice")', function() {
      // uncomment below and update the code to test the property sacrifice
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property strikeout (base name: "Strikeout")', function() {
      // uncomment below and update the code to test the property strikeout
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property strikes (base name: "Strikes")', function() {
      // uncomment below and update the code to test the property strikes
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "Updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property walk (base name: "Walk")', function() {
      // uncomment below and update the code to test the property walk
      //var instance = new MlbV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

  });

}));
