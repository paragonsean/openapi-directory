/**
 * MLB v3 Play-by-Play
 * MLB play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPitch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPitch::OAIPitch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPitch::OAIPitch() {
    this->initializeModel();
}

OAIPitch::~OAIPitch() {}

void OAIPitch::initializeModel() {

    m_ball_isSet = false;
    m_ball_isValid = false;

    m_balls_before_pitch_isSet = false;
    m_balls_before_pitch_isValid = false;

    m_foul_isSet = false;
    m_foul_isValid = false;

    m_hitter_id_isSet = false;
    m_hitter_id_isValid = false;

    m_looking_isSet = false;
    m_looking_isValid = false;

    m_outs_isSet = false;
    m_outs_isValid = false;

    m_pitch_id_isSet = false;
    m_pitch_id_isValid = false;

    m_pitch_number_this_at_bat_isSet = false;
    m_pitch_number_this_at_bat_isValid = false;

    m_pitcher_id_isSet = false;
    m_pitcher_id_isValid = false;

    m_play_id_isSet = false;
    m_play_id_isValid = false;

    m_strike_isSet = false;
    m_strike_isValid = false;

    m_strikes_before_pitch_isSet = false;
    m_strikes_before_pitch_isValid = false;

    m_swinging_isSet = false;
    m_swinging_isValid = false;
}

void OAIPitch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPitch::fromJsonObject(QJsonObject json) {

    m_ball_isValid = ::OpenAPI::fromJsonValue(m_ball, json[QString("Ball")]);
    m_ball_isSet = !json[QString("Ball")].isNull() && m_ball_isValid;

    m_balls_before_pitch_isValid = ::OpenAPI::fromJsonValue(m_balls_before_pitch, json[QString("BallsBeforePitch")]);
    m_balls_before_pitch_isSet = !json[QString("BallsBeforePitch")].isNull() && m_balls_before_pitch_isValid;

    m_foul_isValid = ::OpenAPI::fromJsonValue(m_foul, json[QString("Foul")]);
    m_foul_isSet = !json[QString("Foul")].isNull() && m_foul_isValid;

    m_hitter_id_isValid = ::OpenAPI::fromJsonValue(m_hitter_id, json[QString("HitterID")]);
    m_hitter_id_isSet = !json[QString("HitterID")].isNull() && m_hitter_id_isValid;

    m_looking_isValid = ::OpenAPI::fromJsonValue(m_looking, json[QString("Looking")]);
    m_looking_isSet = !json[QString("Looking")].isNull() && m_looking_isValid;

    m_outs_isValid = ::OpenAPI::fromJsonValue(m_outs, json[QString("Outs")]);
    m_outs_isSet = !json[QString("Outs")].isNull() && m_outs_isValid;

    m_pitch_id_isValid = ::OpenAPI::fromJsonValue(m_pitch_id, json[QString("PitchID")]);
    m_pitch_id_isSet = !json[QString("PitchID")].isNull() && m_pitch_id_isValid;

    m_pitch_number_this_at_bat_isValid = ::OpenAPI::fromJsonValue(m_pitch_number_this_at_bat, json[QString("PitchNumberThisAtBat")]);
    m_pitch_number_this_at_bat_isSet = !json[QString("PitchNumberThisAtBat")].isNull() && m_pitch_number_this_at_bat_isValid;

    m_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_pitcher_id, json[QString("PitcherID")]);
    m_pitcher_id_isSet = !json[QString("PitcherID")].isNull() && m_pitcher_id_isValid;

    m_play_id_isValid = ::OpenAPI::fromJsonValue(m_play_id, json[QString("PlayID")]);
    m_play_id_isSet = !json[QString("PlayID")].isNull() && m_play_id_isValid;

    m_strike_isValid = ::OpenAPI::fromJsonValue(m_strike, json[QString("Strike")]);
    m_strike_isSet = !json[QString("Strike")].isNull() && m_strike_isValid;

    m_strikes_before_pitch_isValid = ::OpenAPI::fromJsonValue(m_strikes_before_pitch, json[QString("StrikesBeforePitch")]);
    m_strikes_before_pitch_isSet = !json[QString("StrikesBeforePitch")].isNull() && m_strikes_before_pitch_isValid;

    m_swinging_isValid = ::OpenAPI::fromJsonValue(m_swinging, json[QString("Swinging")]);
    m_swinging_isSet = !json[QString("Swinging")].isNull() && m_swinging_isValid;
}

QString OAIPitch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPitch::asJsonObject() const {
    QJsonObject obj;
    if (m_ball_isSet) {
        obj.insert(QString("Ball"), ::OpenAPI::toJsonValue(m_ball));
    }
    if (m_balls_before_pitch_isSet) {
        obj.insert(QString("BallsBeforePitch"), ::OpenAPI::toJsonValue(m_balls_before_pitch));
    }
    if (m_foul_isSet) {
        obj.insert(QString("Foul"), ::OpenAPI::toJsonValue(m_foul));
    }
    if (m_hitter_id_isSet) {
        obj.insert(QString("HitterID"), ::OpenAPI::toJsonValue(m_hitter_id));
    }
    if (m_looking_isSet) {
        obj.insert(QString("Looking"), ::OpenAPI::toJsonValue(m_looking));
    }
    if (m_outs_isSet) {
        obj.insert(QString("Outs"), ::OpenAPI::toJsonValue(m_outs));
    }
    if (m_pitch_id_isSet) {
        obj.insert(QString("PitchID"), ::OpenAPI::toJsonValue(m_pitch_id));
    }
    if (m_pitch_number_this_at_bat_isSet) {
        obj.insert(QString("PitchNumberThisAtBat"), ::OpenAPI::toJsonValue(m_pitch_number_this_at_bat));
    }
    if (m_pitcher_id_isSet) {
        obj.insert(QString("PitcherID"), ::OpenAPI::toJsonValue(m_pitcher_id));
    }
    if (m_play_id_isSet) {
        obj.insert(QString("PlayID"), ::OpenAPI::toJsonValue(m_play_id));
    }
    if (m_strike_isSet) {
        obj.insert(QString("Strike"), ::OpenAPI::toJsonValue(m_strike));
    }
    if (m_strikes_before_pitch_isSet) {
        obj.insert(QString("StrikesBeforePitch"), ::OpenAPI::toJsonValue(m_strikes_before_pitch));
    }
    if (m_swinging_isSet) {
        obj.insert(QString("Swinging"), ::OpenAPI::toJsonValue(m_swinging));
    }
    return obj;
}

bool OAIPitch::isBall() const {
    return m_ball;
}
void OAIPitch::setBall(const bool &ball) {
    m_ball = ball;
    m_ball_isSet = true;
}

bool OAIPitch::is_ball_Set() const{
    return m_ball_isSet;
}

bool OAIPitch::is_ball_Valid() const{
    return m_ball_isValid;
}

qint32 OAIPitch::getBallsBeforePitch() const {
    return m_balls_before_pitch;
}
void OAIPitch::setBallsBeforePitch(const qint32 &balls_before_pitch) {
    m_balls_before_pitch = balls_before_pitch;
    m_balls_before_pitch_isSet = true;
}

bool OAIPitch::is_balls_before_pitch_Set() const{
    return m_balls_before_pitch_isSet;
}

bool OAIPitch::is_balls_before_pitch_Valid() const{
    return m_balls_before_pitch_isValid;
}

bool OAIPitch::isFoul() const {
    return m_foul;
}
void OAIPitch::setFoul(const bool &foul) {
    m_foul = foul;
    m_foul_isSet = true;
}

bool OAIPitch::is_foul_Set() const{
    return m_foul_isSet;
}

bool OAIPitch::is_foul_Valid() const{
    return m_foul_isValid;
}

qint32 OAIPitch::getHitterId() const {
    return m_hitter_id;
}
void OAIPitch::setHitterId(const qint32 &hitter_id) {
    m_hitter_id = hitter_id;
    m_hitter_id_isSet = true;
}

bool OAIPitch::is_hitter_id_Set() const{
    return m_hitter_id_isSet;
}

bool OAIPitch::is_hitter_id_Valid() const{
    return m_hitter_id_isValid;
}

bool OAIPitch::isLooking() const {
    return m_looking;
}
void OAIPitch::setLooking(const bool &looking) {
    m_looking = looking;
    m_looking_isSet = true;
}

bool OAIPitch::is_looking_Set() const{
    return m_looking_isSet;
}

bool OAIPitch::is_looking_Valid() const{
    return m_looking_isValid;
}

qint32 OAIPitch::getOuts() const {
    return m_outs;
}
void OAIPitch::setOuts(const qint32 &outs) {
    m_outs = outs;
    m_outs_isSet = true;
}

bool OAIPitch::is_outs_Set() const{
    return m_outs_isSet;
}

bool OAIPitch::is_outs_Valid() const{
    return m_outs_isValid;
}

qint32 OAIPitch::getPitchId() const {
    return m_pitch_id;
}
void OAIPitch::setPitchId(const qint32 &pitch_id) {
    m_pitch_id = pitch_id;
    m_pitch_id_isSet = true;
}

bool OAIPitch::is_pitch_id_Set() const{
    return m_pitch_id_isSet;
}

bool OAIPitch::is_pitch_id_Valid() const{
    return m_pitch_id_isValid;
}

qint32 OAIPitch::getPitchNumberThisAtBat() const {
    return m_pitch_number_this_at_bat;
}
void OAIPitch::setPitchNumberThisAtBat(const qint32 &pitch_number_this_at_bat) {
    m_pitch_number_this_at_bat = pitch_number_this_at_bat;
    m_pitch_number_this_at_bat_isSet = true;
}

bool OAIPitch::is_pitch_number_this_at_bat_Set() const{
    return m_pitch_number_this_at_bat_isSet;
}

bool OAIPitch::is_pitch_number_this_at_bat_Valid() const{
    return m_pitch_number_this_at_bat_isValid;
}

qint32 OAIPitch::getPitcherId() const {
    return m_pitcher_id;
}
void OAIPitch::setPitcherId(const qint32 &pitcher_id) {
    m_pitcher_id = pitcher_id;
    m_pitcher_id_isSet = true;
}

bool OAIPitch::is_pitcher_id_Set() const{
    return m_pitcher_id_isSet;
}

bool OAIPitch::is_pitcher_id_Valid() const{
    return m_pitcher_id_isValid;
}

qint32 OAIPitch::getPlayId() const {
    return m_play_id;
}
void OAIPitch::setPlayId(const qint32 &play_id) {
    m_play_id = play_id;
    m_play_id_isSet = true;
}

bool OAIPitch::is_play_id_Set() const{
    return m_play_id_isSet;
}

bool OAIPitch::is_play_id_Valid() const{
    return m_play_id_isValid;
}

bool OAIPitch::isStrike() const {
    return m_strike;
}
void OAIPitch::setStrike(const bool &strike) {
    m_strike = strike;
    m_strike_isSet = true;
}

bool OAIPitch::is_strike_Set() const{
    return m_strike_isSet;
}

bool OAIPitch::is_strike_Valid() const{
    return m_strike_isValid;
}

qint32 OAIPitch::getStrikesBeforePitch() const {
    return m_strikes_before_pitch;
}
void OAIPitch::setStrikesBeforePitch(const qint32 &strikes_before_pitch) {
    m_strikes_before_pitch = strikes_before_pitch;
    m_strikes_before_pitch_isSet = true;
}

bool OAIPitch::is_strikes_before_pitch_Set() const{
    return m_strikes_before_pitch_isSet;
}

bool OAIPitch::is_strikes_before_pitch_Valid() const{
    return m_strikes_before_pitch_isValid;
}

bool OAIPitch::isSwinging() const {
    return m_swinging;
}
void OAIPitch::setSwinging(const bool &swinging) {
    m_swinging = swinging;
    m_swinging_isSet = true;
}

bool OAIPitch::is_swinging_Set() const{
    return m_swinging_isSet;
}

bool OAIPitch::is_swinging_Valid() const{
    return m_swinging_isValid;
}

bool OAIPitch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ball_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balls_before_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foul_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hitter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitch_number_this_at_bat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strike_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikes_before_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swinging_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPitch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
