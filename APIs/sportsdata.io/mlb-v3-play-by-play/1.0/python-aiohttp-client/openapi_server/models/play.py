# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pitch import Pitch
from openapi_server import util


class Play(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, at_bat: bool=None, away_team_runs: int=None, balls: int=None, description: str=None, error: bool=None, hit: bool=None, hitter_bat_hand: str=None, hitter_id: int=None, hitter_name: str=None, hitter_position: str=None, hitter_team_id: int=None, home_team_runs: int=None, inning_batter_number: int=None, inning_half: str=None, inning_id: int=None, inning_number: int=None, number_of_outs_on_play: int=None, out: bool=None, outs: int=None, pitch_number_this_at_bat: int=None, pitcher_id: int=None, pitcher_name: str=None, pitcher_team_id: int=None, pitcher_throw_hand: str=None, pitches: List[Pitch]=None, play_id: int=None, play_number: int=None, result: str=None, runner1_id: int=None, runner2_id: int=None, runner3_id: int=None, runs_batted_in: int=None, sacrifice: bool=None, strikeout: bool=None, strikes: int=None, updated: str=None, walk: bool=None):
        """Play - a model defined in OpenAPI

        :param at_bat: The at_bat of this Play.
        :param away_team_runs: The away_team_runs of this Play.
        :param balls: The balls of this Play.
        :param description: The description of this Play.
        :param error: The error of this Play.
        :param hit: The hit of this Play.
        :param hitter_bat_hand: The hitter_bat_hand of this Play.
        :param hitter_id: The hitter_id of this Play.
        :param hitter_name: The hitter_name of this Play.
        :param hitter_position: The hitter_position of this Play.
        :param hitter_team_id: The hitter_team_id of this Play.
        :param home_team_runs: The home_team_runs of this Play.
        :param inning_batter_number: The inning_batter_number of this Play.
        :param inning_half: The inning_half of this Play.
        :param inning_id: The inning_id of this Play.
        :param inning_number: The inning_number of this Play.
        :param number_of_outs_on_play: The number_of_outs_on_play of this Play.
        :param out: The out of this Play.
        :param outs: The outs of this Play.
        :param pitch_number_this_at_bat: The pitch_number_this_at_bat of this Play.
        :param pitcher_id: The pitcher_id of this Play.
        :param pitcher_name: The pitcher_name of this Play.
        :param pitcher_team_id: The pitcher_team_id of this Play.
        :param pitcher_throw_hand: The pitcher_throw_hand of this Play.
        :param pitches: The pitches of this Play.
        :param play_id: The play_id of this Play.
        :param play_number: The play_number of this Play.
        :param result: The result of this Play.
        :param runner1_id: The runner1_id of this Play.
        :param runner2_id: The runner2_id of this Play.
        :param runner3_id: The runner3_id of this Play.
        :param runs_batted_in: The runs_batted_in of this Play.
        :param sacrifice: The sacrifice of this Play.
        :param strikeout: The strikeout of this Play.
        :param strikes: The strikes of this Play.
        :param updated: The updated of this Play.
        :param walk: The walk of this Play.
        """
        self.openapi_types = {
            'at_bat': bool,
            'away_team_runs': int,
            'balls': int,
            'description': str,
            'error': bool,
            'hit': bool,
            'hitter_bat_hand': str,
            'hitter_id': int,
            'hitter_name': str,
            'hitter_position': str,
            'hitter_team_id': int,
            'home_team_runs': int,
            'inning_batter_number': int,
            'inning_half': str,
            'inning_id': int,
            'inning_number': int,
            'number_of_outs_on_play': int,
            'out': bool,
            'outs': int,
            'pitch_number_this_at_bat': int,
            'pitcher_id': int,
            'pitcher_name': str,
            'pitcher_team_id': int,
            'pitcher_throw_hand': str,
            'pitches': List[Pitch],
            'play_id': int,
            'play_number': int,
            'result': str,
            'runner1_id': int,
            'runner2_id': int,
            'runner3_id': int,
            'runs_batted_in': int,
            'sacrifice': bool,
            'strikeout': bool,
            'strikes': int,
            'updated': str,
            'walk': bool
        }

        self.attribute_map = {
            'at_bat': 'AtBat',
            'away_team_runs': 'AwayTeamRuns',
            'balls': 'Balls',
            'description': 'Description',
            'error': 'Error',
            'hit': 'Hit',
            'hitter_bat_hand': 'HitterBatHand',
            'hitter_id': 'HitterID',
            'hitter_name': 'HitterName',
            'hitter_position': 'HitterPosition',
            'hitter_team_id': 'HitterTeamID',
            'home_team_runs': 'HomeTeamRuns',
            'inning_batter_number': 'InningBatterNumber',
            'inning_half': 'InningHalf',
            'inning_id': 'InningID',
            'inning_number': 'InningNumber',
            'number_of_outs_on_play': 'NumberOfOutsOnPlay',
            'out': 'Out',
            'outs': 'Outs',
            'pitch_number_this_at_bat': 'PitchNumberThisAtBat',
            'pitcher_id': 'PitcherID',
            'pitcher_name': 'PitcherName',
            'pitcher_team_id': 'PitcherTeamID',
            'pitcher_throw_hand': 'PitcherThrowHand',
            'pitches': 'Pitches',
            'play_id': 'PlayID',
            'play_number': 'PlayNumber',
            'result': 'Result',
            'runner1_id': 'Runner1ID',
            'runner2_id': 'Runner2ID',
            'runner3_id': 'Runner3ID',
            'runs_batted_in': 'RunsBattedIn',
            'sacrifice': 'Sacrifice',
            'strikeout': 'Strikeout',
            'strikes': 'Strikes',
            'updated': 'Updated',
            'walk': 'Walk'
        }

        self._at_bat = at_bat
        self._away_team_runs = away_team_runs
        self._balls = balls
        self._description = description
        self._error = error
        self._hit = hit
        self._hitter_bat_hand = hitter_bat_hand
        self._hitter_id = hitter_id
        self._hitter_name = hitter_name
        self._hitter_position = hitter_position
        self._hitter_team_id = hitter_team_id
        self._home_team_runs = home_team_runs
        self._inning_batter_number = inning_batter_number
        self._inning_half = inning_half
        self._inning_id = inning_id
        self._inning_number = inning_number
        self._number_of_outs_on_play = number_of_outs_on_play
        self._out = out
        self._outs = outs
        self._pitch_number_this_at_bat = pitch_number_this_at_bat
        self._pitcher_id = pitcher_id
        self._pitcher_name = pitcher_name
        self._pitcher_team_id = pitcher_team_id
        self._pitcher_throw_hand = pitcher_throw_hand
        self._pitches = pitches
        self._play_id = play_id
        self._play_number = play_number
        self._result = result
        self._runner1_id = runner1_id
        self._runner2_id = runner2_id
        self._runner3_id = runner3_id
        self._runs_batted_in = runs_batted_in
        self._sacrifice = sacrifice
        self._strikeout = strikeout
        self._strikes = strikes
        self._updated = updated
        self._walk = walk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Play':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Play of this Play.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def at_bat(self):
        """Gets the at_bat of this Play.


        :return: The at_bat of this Play.
        :rtype: bool
        """
        return self._at_bat

    @at_bat.setter
    def at_bat(self, at_bat):
        """Sets the at_bat of this Play.


        :param at_bat: The at_bat of this Play.
        :type at_bat: bool
        """

        self._at_bat = at_bat

    @property
    def away_team_runs(self):
        """Gets the away_team_runs of this Play.


        :return: The away_team_runs of this Play.
        :rtype: int
        """
        return self._away_team_runs

    @away_team_runs.setter
    def away_team_runs(self, away_team_runs):
        """Sets the away_team_runs of this Play.


        :param away_team_runs: The away_team_runs of this Play.
        :type away_team_runs: int
        """

        self._away_team_runs = away_team_runs

    @property
    def balls(self):
        """Gets the balls of this Play.


        :return: The balls of this Play.
        :rtype: int
        """
        return self._balls

    @balls.setter
    def balls(self, balls):
        """Sets the balls of this Play.


        :param balls: The balls of this Play.
        :type balls: int
        """

        self._balls = balls

    @property
    def description(self):
        """Gets the description of this Play.


        :return: The description of this Play.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Play.


        :param description: The description of this Play.
        :type description: str
        """

        self._description = description

    @property
    def error(self):
        """Gets the error of this Play.


        :return: The error of this Play.
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Play.


        :param error: The error of this Play.
        :type error: bool
        """

        self._error = error

    @property
    def hit(self):
        """Gets the hit of this Play.


        :return: The hit of this Play.
        :rtype: bool
        """
        return self._hit

    @hit.setter
    def hit(self, hit):
        """Sets the hit of this Play.


        :param hit: The hit of this Play.
        :type hit: bool
        """

        self._hit = hit

    @property
    def hitter_bat_hand(self):
        """Gets the hitter_bat_hand of this Play.


        :return: The hitter_bat_hand of this Play.
        :rtype: str
        """
        return self._hitter_bat_hand

    @hitter_bat_hand.setter
    def hitter_bat_hand(self, hitter_bat_hand):
        """Sets the hitter_bat_hand of this Play.


        :param hitter_bat_hand: The hitter_bat_hand of this Play.
        :type hitter_bat_hand: str
        """

        self._hitter_bat_hand = hitter_bat_hand

    @property
    def hitter_id(self):
        """Gets the hitter_id of this Play.


        :return: The hitter_id of this Play.
        :rtype: int
        """
        return self._hitter_id

    @hitter_id.setter
    def hitter_id(self, hitter_id):
        """Sets the hitter_id of this Play.


        :param hitter_id: The hitter_id of this Play.
        :type hitter_id: int
        """

        self._hitter_id = hitter_id

    @property
    def hitter_name(self):
        """Gets the hitter_name of this Play.


        :return: The hitter_name of this Play.
        :rtype: str
        """
        return self._hitter_name

    @hitter_name.setter
    def hitter_name(self, hitter_name):
        """Sets the hitter_name of this Play.


        :param hitter_name: The hitter_name of this Play.
        :type hitter_name: str
        """

        self._hitter_name = hitter_name

    @property
    def hitter_position(self):
        """Gets the hitter_position of this Play.


        :return: The hitter_position of this Play.
        :rtype: str
        """
        return self._hitter_position

    @hitter_position.setter
    def hitter_position(self, hitter_position):
        """Sets the hitter_position of this Play.


        :param hitter_position: The hitter_position of this Play.
        :type hitter_position: str
        """

        self._hitter_position = hitter_position

    @property
    def hitter_team_id(self):
        """Gets the hitter_team_id of this Play.


        :return: The hitter_team_id of this Play.
        :rtype: int
        """
        return self._hitter_team_id

    @hitter_team_id.setter
    def hitter_team_id(self, hitter_team_id):
        """Sets the hitter_team_id of this Play.


        :param hitter_team_id: The hitter_team_id of this Play.
        :type hitter_team_id: int
        """

        self._hitter_team_id = hitter_team_id

    @property
    def home_team_runs(self):
        """Gets the home_team_runs of this Play.


        :return: The home_team_runs of this Play.
        :rtype: int
        """
        return self._home_team_runs

    @home_team_runs.setter
    def home_team_runs(self, home_team_runs):
        """Sets the home_team_runs of this Play.


        :param home_team_runs: The home_team_runs of this Play.
        :type home_team_runs: int
        """

        self._home_team_runs = home_team_runs

    @property
    def inning_batter_number(self):
        """Gets the inning_batter_number of this Play.


        :return: The inning_batter_number of this Play.
        :rtype: int
        """
        return self._inning_batter_number

    @inning_batter_number.setter
    def inning_batter_number(self, inning_batter_number):
        """Sets the inning_batter_number of this Play.


        :param inning_batter_number: The inning_batter_number of this Play.
        :type inning_batter_number: int
        """

        self._inning_batter_number = inning_batter_number

    @property
    def inning_half(self):
        """Gets the inning_half of this Play.


        :return: The inning_half of this Play.
        :rtype: str
        """
        return self._inning_half

    @inning_half.setter
    def inning_half(self, inning_half):
        """Sets the inning_half of this Play.


        :param inning_half: The inning_half of this Play.
        :type inning_half: str
        """

        self._inning_half = inning_half

    @property
    def inning_id(self):
        """Gets the inning_id of this Play.


        :return: The inning_id of this Play.
        :rtype: int
        """
        return self._inning_id

    @inning_id.setter
    def inning_id(self, inning_id):
        """Sets the inning_id of this Play.


        :param inning_id: The inning_id of this Play.
        :type inning_id: int
        """

        self._inning_id = inning_id

    @property
    def inning_number(self):
        """Gets the inning_number of this Play.


        :return: The inning_number of this Play.
        :rtype: int
        """
        return self._inning_number

    @inning_number.setter
    def inning_number(self, inning_number):
        """Sets the inning_number of this Play.


        :param inning_number: The inning_number of this Play.
        :type inning_number: int
        """

        self._inning_number = inning_number

    @property
    def number_of_outs_on_play(self):
        """Gets the number_of_outs_on_play of this Play.


        :return: The number_of_outs_on_play of this Play.
        :rtype: int
        """
        return self._number_of_outs_on_play

    @number_of_outs_on_play.setter
    def number_of_outs_on_play(self, number_of_outs_on_play):
        """Sets the number_of_outs_on_play of this Play.


        :param number_of_outs_on_play: The number_of_outs_on_play of this Play.
        :type number_of_outs_on_play: int
        """

        self._number_of_outs_on_play = number_of_outs_on_play

    @property
    def out(self):
        """Gets the out of this Play.


        :return: The out of this Play.
        :rtype: bool
        """
        return self._out

    @out.setter
    def out(self, out):
        """Sets the out of this Play.


        :param out: The out of this Play.
        :type out: bool
        """

        self._out = out

    @property
    def outs(self):
        """Gets the outs of this Play.


        :return: The outs of this Play.
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this Play.


        :param outs: The outs of this Play.
        :type outs: int
        """

        self._outs = outs

    @property
    def pitch_number_this_at_bat(self):
        """Gets the pitch_number_this_at_bat of this Play.


        :return: The pitch_number_this_at_bat of this Play.
        :rtype: int
        """
        return self._pitch_number_this_at_bat

    @pitch_number_this_at_bat.setter
    def pitch_number_this_at_bat(self, pitch_number_this_at_bat):
        """Sets the pitch_number_this_at_bat of this Play.


        :param pitch_number_this_at_bat: The pitch_number_this_at_bat of this Play.
        :type pitch_number_this_at_bat: int
        """

        self._pitch_number_this_at_bat = pitch_number_this_at_bat

    @property
    def pitcher_id(self):
        """Gets the pitcher_id of this Play.


        :return: The pitcher_id of this Play.
        :rtype: int
        """
        return self._pitcher_id

    @pitcher_id.setter
    def pitcher_id(self, pitcher_id):
        """Sets the pitcher_id of this Play.


        :param pitcher_id: The pitcher_id of this Play.
        :type pitcher_id: int
        """

        self._pitcher_id = pitcher_id

    @property
    def pitcher_name(self):
        """Gets the pitcher_name of this Play.


        :return: The pitcher_name of this Play.
        :rtype: str
        """
        return self._pitcher_name

    @pitcher_name.setter
    def pitcher_name(self, pitcher_name):
        """Sets the pitcher_name of this Play.


        :param pitcher_name: The pitcher_name of this Play.
        :type pitcher_name: str
        """

        self._pitcher_name = pitcher_name

    @property
    def pitcher_team_id(self):
        """Gets the pitcher_team_id of this Play.


        :return: The pitcher_team_id of this Play.
        :rtype: int
        """
        return self._pitcher_team_id

    @pitcher_team_id.setter
    def pitcher_team_id(self, pitcher_team_id):
        """Sets the pitcher_team_id of this Play.


        :param pitcher_team_id: The pitcher_team_id of this Play.
        :type pitcher_team_id: int
        """

        self._pitcher_team_id = pitcher_team_id

    @property
    def pitcher_throw_hand(self):
        """Gets the pitcher_throw_hand of this Play.


        :return: The pitcher_throw_hand of this Play.
        :rtype: str
        """
        return self._pitcher_throw_hand

    @pitcher_throw_hand.setter
    def pitcher_throw_hand(self, pitcher_throw_hand):
        """Sets the pitcher_throw_hand of this Play.


        :param pitcher_throw_hand: The pitcher_throw_hand of this Play.
        :type pitcher_throw_hand: str
        """

        self._pitcher_throw_hand = pitcher_throw_hand

    @property
    def pitches(self):
        """Gets the pitches of this Play.


        :return: The pitches of this Play.
        :rtype: List[Pitch]
        """
        return self._pitches

    @pitches.setter
    def pitches(self, pitches):
        """Sets the pitches of this Play.


        :param pitches: The pitches of this Play.
        :type pitches: List[Pitch]
        """

        self._pitches = pitches

    @property
    def play_id(self):
        """Gets the play_id of this Play.


        :return: The play_id of this Play.
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this Play.


        :param play_id: The play_id of this Play.
        :type play_id: int
        """

        self._play_id = play_id

    @property
    def play_number(self):
        """Gets the play_number of this Play.


        :return: The play_number of this Play.
        :rtype: int
        """
        return self._play_number

    @play_number.setter
    def play_number(self, play_number):
        """Sets the play_number of this Play.


        :param play_number: The play_number of this Play.
        :type play_number: int
        """

        self._play_number = play_number

    @property
    def result(self):
        """Gets the result of this Play.


        :return: The result of this Play.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Play.


        :param result: The result of this Play.
        :type result: str
        """

        self._result = result

    @property
    def runner1_id(self):
        """Gets the runner1_id of this Play.


        :return: The runner1_id of this Play.
        :rtype: int
        """
        return self._runner1_id

    @runner1_id.setter
    def runner1_id(self, runner1_id):
        """Sets the runner1_id of this Play.


        :param runner1_id: The runner1_id of this Play.
        :type runner1_id: int
        """

        self._runner1_id = runner1_id

    @property
    def runner2_id(self):
        """Gets the runner2_id of this Play.


        :return: The runner2_id of this Play.
        :rtype: int
        """
        return self._runner2_id

    @runner2_id.setter
    def runner2_id(self, runner2_id):
        """Sets the runner2_id of this Play.


        :param runner2_id: The runner2_id of this Play.
        :type runner2_id: int
        """

        self._runner2_id = runner2_id

    @property
    def runner3_id(self):
        """Gets the runner3_id of this Play.


        :return: The runner3_id of this Play.
        :rtype: int
        """
        return self._runner3_id

    @runner3_id.setter
    def runner3_id(self, runner3_id):
        """Sets the runner3_id of this Play.


        :param runner3_id: The runner3_id of this Play.
        :type runner3_id: int
        """

        self._runner3_id = runner3_id

    @property
    def runs_batted_in(self):
        """Gets the runs_batted_in of this Play.


        :return: The runs_batted_in of this Play.
        :rtype: int
        """
        return self._runs_batted_in

    @runs_batted_in.setter
    def runs_batted_in(self, runs_batted_in):
        """Sets the runs_batted_in of this Play.


        :param runs_batted_in: The runs_batted_in of this Play.
        :type runs_batted_in: int
        """

        self._runs_batted_in = runs_batted_in

    @property
    def sacrifice(self):
        """Gets the sacrifice of this Play.


        :return: The sacrifice of this Play.
        :rtype: bool
        """
        return self._sacrifice

    @sacrifice.setter
    def sacrifice(self, sacrifice):
        """Sets the sacrifice of this Play.


        :param sacrifice: The sacrifice of this Play.
        :type sacrifice: bool
        """

        self._sacrifice = sacrifice

    @property
    def strikeout(self):
        """Gets the strikeout of this Play.


        :return: The strikeout of this Play.
        :rtype: bool
        """
        return self._strikeout

    @strikeout.setter
    def strikeout(self, strikeout):
        """Sets the strikeout of this Play.


        :param strikeout: The strikeout of this Play.
        :type strikeout: bool
        """

        self._strikeout = strikeout

    @property
    def strikes(self):
        """Gets the strikes of this Play.


        :return: The strikes of this Play.
        :rtype: int
        """
        return self._strikes

    @strikes.setter
    def strikes(self, strikes):
        """Sets the strikes of this Play.


        :param strikes: The strikes of this Play.
        :type strikes: int
        """

        self._strikes = strikes

    @property
    def updated(self):
        """Gets the updated of this Play.


        :return: The updated of this Play.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Play.


        :param updated: The updated of this Play.
        :type updated: str
        """

        self._updated = updated

    @property
    def walk(self):
        """Gets the walk of this Play.


        :return: The walk of this Play.
        :rtype: bool
        """
        return self._walk

    @walk.setter
    def walk(self, walk):
        """Sets the walk of this Play.


        :param walk: The walk of this Play.
        :type walk: bool
        """

        self._walk = walk
