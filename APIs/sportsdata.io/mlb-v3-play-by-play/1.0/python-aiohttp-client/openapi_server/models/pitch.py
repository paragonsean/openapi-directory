# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pitch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ball: bool=None, balls_before_pitch: int=None, foul: bool=None, hitter_id: int=None, looking: bool=None, outs: int=None, pitch_id: int=None, pitch_number_this_at_bat: int=None, pitcher_id: int=None, play_id: int=None, strike: bool=None, strikes_before_pitch: int=None, swinging: bool=None):
        """Pitch - a model defined in OpenAPI

        :param ball: The ball of this Pitch.
        :param balls_before_pitch: The balls_before_pitch of this Pitch.
        :param foul: The foul of this Pitch.
        :param hitter_id: The hitter_id of this Pitch.
        :param looking: The looking of this Pitch.
        :param outs: The outs of this Pitch.
        :param pitch_id: The pitch_id of this Pitch.
        :param pitch_number_this_at_bat: The pitch_number_this_at_bat of this Pitch.
        :param pitcher_id: The pitcher_id of this Pitch.
        :param play_id: The play_id of this Pitch.
        :param strike: The strike of this Pitch.
        :param strikes_before_pitch: The strikes_before_pitch of this Pitch.
        :param swinging: The swinging of this Pitch.
        """
        self.openapi_types = {
            'ball': bool,
            'balls_before_pitch': int,
            'foul': bool,
            'hitter_id': int,
            'looking': bool,
            'outs': int,
            'pitch_id': int,
            'pitch_number_this_at_bat': int,
            'pitcher_id': int,
            'play_id': int,
            'strike': bool,
            'strikes_before_pitch': int,
            'swinging': bool
        }

        self.attribute_map = {
            'ball': 'Ball',
            'balls_before_pitch': 'BallsBeforePitch',
            'foul': 'Foul',
            'hitter_id': 'HitterID',
            'looking': 'Looking',
            'outs': 'Outs',
            'pitch_id': 'PitchID',
            'pitch_number_this_at_bat': 'PitchNumberThisAtBat',
            'pitcher_id': 'PitcherID',
            'play_id': 'PlayID',
            'strike': 'Strike',
            'strikes_before_pitch': 'StrikesBeforePitch',
            'swinging': 'Swinging'
        }

        self._ball = ball
        self._balls_before_pitch = balls_before_pitch
        self._foul = foul
        self._hitter_id = hitter_id
        self._looking = looking
        self._outs = outs
        self._pitch_id = pitch_id
        self._pitch_number_this_at_bat = pitch_number_this_at_bat
        self._pitcher_id = pitcher_id
        self._play_id = play_id
        self._strike = strike
        self._strikes_before_pitch = strikes_before_pitch
        self._swinging = swinging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pitch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pitch of this Pitch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ball(self):
        """Gets the ball of this Pitch.


        :return: The ball of this Pitch.
        :rtype: bool
        """
        return self._ball

    @ball.setter
    def ball(self, ball):
        """Sets the ball of this Pitch.


        :param ball: The ball of this Pitch.
        :type ball: bool
        """

        self._ball = ball

    @property
    def balls_before_pitch(self):
        """Gets the balls_before_pitch of this Pitch.


        :return: The balls_before_pitch of this Pitch.
        :rtype: int
        """
        return self._balls_before_pitch

    @balls_before_pitch.setter
    def balls_before_pitch(self, balls_before_pitch):
        """Sets the balls_before_pitch of this Pitch.


        :param balls_before_pitch: The balls_before_pitch of this Pitch.
        :type balls_before_pitch: int
        """

        self._balls_before_pitch = balls_before_pitch

    @property
    def foul(self):
        """Gets the foul of this Pitch.


        :return: The foul of this Pitch.
        :rtype: bool
        """
        return self._foul

    @foul.setter
    def foul(self, foul):
        """Sets the foul of this Pitch.


        :param foul: The foul of this Pitch.
        :type foul: bool
        """

        self._foul = foul

    @property
    def hitter_id(self):
        """Gets the hitter_id of this Pitch.


        :return: The hitter_id of this Pitch.
        :rtype: int
        """
        return self._hitter_id

    @hitter_id.setter
    def hitter_id(self, hitter_id):
        """Sets the hitter_id of this Pitch.


        :param hitter_id: The hitter_id of this Pitch.
        :type hitter_id: int
        """

        self._hitter_id = hitter_id

    @property
    def looking(self):
        """Gets the looking of this Pitch.


        :return: The looking of this Pitch.
        :rtype: bool
        """
        return self._looking

    @looking.setter
    def looking(self, looking):
        """Sets the looking of this Pitch.


        :param looking: The looking of this Pitch.
        :type looking: bool
        """

        self._looking = looking

    @property
    def outs(self):
        """Gets the outs of this Pitch.


        :return: The outs of this Pitch.
        :rtype: int
        """
        return self._outs

    @outs.setter
    def outs(self, outs):
        """Sets the outs of this Pitch.


        :param outs: The outs of this Pitch.
        :type outs: int
        """

        self._outs = outs

    @property
    def pitch_id(self):
        """Gets the pitch_id of this Pitch.


        :return: The pitch_id of this Pitch.
        :rtype: int
        """
        return self._pitch_id

    @pitch_id.setter
    def pitch_id(self, pitch_id):
        """Sets the pitch_id of this Pitch.


        :param pitch_id: The pitch_id of this Pitch.
        :type pitch_id: int
        """

        self._pitch_id = pitch_id

    @property
    def pitch_number_this_at_bat(self):
        """Gets the pitch_number_this_at_bat of this Pitch.


        :return: The pitch_number_this_at_bat of this Pitch.
        :rtype: int
        """
        return self._pitch_number_this_at_bat

    @pitch_number_this_at_bat.setter
    def pitch_number_this_at_bat(self, pitch_number_this_at_bat):
        """Sets the pitch_number_this_at_bat of this Pitch.


        :param pitch_number_this_at_bat: The pitch_number_this_at_bat of this Pitch.
        :type pitch_number_this_at_bat: int
        """

        self._pitch_number_this_at_bat = pitch_number_this_at_bat

    @property
    def pitcher_id(self):
        """Gets the pitcher_id of this Pitch.


        :return: The pitcher_id of this Pitch.
        :rtype: int
        """
        return self._pitcher_id

    @pitcher_id.setter
    def pitcher_id(self, pitcher_id):
        """Sets the pitcher_id of this Pitch.


        :param pitcher_id: The pitcher_id of this Pitch.
        :type pitcher_id: int
        """

        self._pitcher_id = pitcher_id

    @property
    def play_id(self):
        """Gets the play_id of this Pitch.


        :return: The play_id of this Pitch.
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this Pitch.


        :param play_id: The play_id of this Pitch.
        :type play_id: int
        """

        self._play_id = play_id

    @property
    def strike(self):
        """Gets the strike of this Pitch.


        :return: The strike of this Pitch.
        :rtype: bool
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this Pitch.


        :param strike: The strike of this Pitch.
        :type strike: bool
        """

        self._strike = strike

    @property
    def strikes_before_pitch(self):
        """Gets the strikes_before_pitch of this Pitch.


        :return: The strikes_before_pitch of this Pitch.
        :rtype: int
        """
        return self._strikes_before_pitch

    @strikes_before_pitch.setter
    def strikes_before_pitch(self, strikes_before_pitch):
        """Sets the strikes_before_pitch of this Pitch.


        :param strikes_before_pitch: The strikes_before_pitch of this Pitch.
        :type strikes_before_pitch: int
        """

        self._strikes_before_pitch = strikes_before_pitch

    @property
    def swinging(self):
        """Gets the swinging of this Pitch.


        :return: The swinging of this Pitch.
        :rtype: bool
        """
        return self._swinging

    @swinging.setter
    def swinging(self, swinging):
        """Sets the swinging of this Pitch.


        :param swinging: The swinging of this Pitch.
        :type swinging: bool
        """

        self._swinging = swinging
