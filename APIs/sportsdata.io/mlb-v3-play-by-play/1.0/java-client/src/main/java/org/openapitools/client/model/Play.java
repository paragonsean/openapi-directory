/*
 * MLB v3 Play-by-Play
 * MLB play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Pitch;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Play
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:00.436683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Play {
  public static final String SERIALIZED_NAME_AT_BAT = "AtBat";
  @SerializedName(SERIALIZED_NAME_AT_BAT)
  private Boolean atBat;

  public static final String SERIALIZED_NAME_AWAY_TEAM_RUNS = "AwayTeamRuns";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_RUNS)
  private Integer awayTeamRuns;

  public static final String SERIALIZED_NAME_BALLS = "Balls";
  @SerializedName(SERIALIZED_NAME_BALLS)
  private Integer balls;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ERROR = "Error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Boolean error;

  public static final String SERIALIZED_NAME_HIT = "Hit";
  @SerializedName(SERIALIZED_NAME_HIT)
  private Boolean hit;

  public static final String SERIALIZED_NAME_HITTER_BAT_HAND = "HitterBatHand";
  @SerializedName(SERIALIZED_NAME_HITTER_BAT_HAND)
  private String hitterBatHand;

  public static final String SERIALIZED_NAME_HITTER_I_D = "HitterID";
  @SerializedName(SERIALIZED_NAME_HITTER_I_D)
  private Integer hitterID;

  public static final String SERIALIZED_NAME_HITTER_NAME = "HitterName";
  @SerializedName(SERIALIZED_NAME_HITTER_NAME)
  private String hitterName;

  public static final String SERIALIZED_NAME_HITTER_POSITION = "HitterPosition";
  @SerializedName(SERIALIZED_NAME_HITTER_POSITION)
  private String hitterPosition;

  public static final String SERIALIZED_NAME_HITTER_TEAM_I_D = "HitterTeamID";
  @SerializedName(SERIALIZED_NAME_HITTER_TEAM_I_D)
  private Integer hitterTeamID;

  public static final String SERIALIZED_NAME_HOME_TEAM_RUNS = "HomeTeamRuns";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_RUNS)
  private Integer homeTeamRuns;

  public static final String SERIALIZED_NAME_INNING_BATTER_NUMBER = "InningBatterNumber";
  @SerializedName(SERIALIZED_NAME_INNING_BATTER_NUMBER)
  private Integer inningBatterNumber;

  public static final String SERIALIZED_NAME_INNING_HALF = "InningHalf";
  @SerializedName(SERIALIZED_NAME_INNING_HALF)
  private String inningHalf;

  public static final String SERIALIZED_NAME_INNING_I_D = "InningID";
  @SerializedName(SERIALIZED_NAME_INNING_I_D)
  private Integer inningID;

  public static final String SERIALIZED_NAME_INNING_NUMBER = "InningNumber";
  @SerializedName(SERIALIZED_NAME_INNING_NUMBER)
  private Integer inningNumber;

  public static final String SERIALIZED_NAME_NUMBER_OF_OUTS_ON_PLAY = "NumberOfOutsOnPlay";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_OUTS_ON_PLAY)
  private Integer numberOfOutsOnPlay;

  public static final String SERIALIZED_NAME_OUT = "Out";
  @SerializedName(SERIALIZED_NAME_OUT)
  private Boolean out;

  public static final String SERIALIZED_NAME_OUTS = "Outs";
  @SerializedName(SERIALIZED_NAME_OUTS)
  private Integer outs;

  public static final String SERIALIZED_NAME_PITCH_NUMBER_THIS_AT_BAT = "PitchNumberThisAtBat";
  @SerializedName(SERIALIZED_NAME_PITCH_NUMBER_THIS_AT_BAT)
  private Integer pitchNumberThisAtBat;

  public static final String SERIALIZED_NAME_PITCHER_I_D = "PitcherID";
  @SerializedName(SERIALIZED_NAME_PITCHER_I_D)
  private Integer pitcherID;

  public static final String SERIALIZED_NAME_PITCHER_NAME = "PitcherName";
  @SerializedName(SERIALIZED_NAME_PITCHER_NAME)
  private String pitcherName;

  public static final String SERIALIZED_NAME_PITCHER_TEAM_I_D = "PitcherTeamID";
  @SerializedName(SERIALIZED_NAME_PITCHER_TEAM_I_D)
  private Integer pitcherTeamID;

  public static final String SERIALIZED_NAME_PITCHER_THROW_HAND = "PitcherThrowHand";
  @SerializedName(SERIALIZED_NAME_PITCHER_THROW_HAND)
  private String pitcherThrowHand;

  public static final String SERIALIZED_NAME_PITCHES = "Pitches";
  @SerializedName(SERIALIZED_NAME_PITCHES)
  private List<Pitch> pitches = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAY_I_D = "PlayID";
  @SerializedName(SERIALIZED_NAME_PLAY_I_D)
  private Integer playID;

  public static final String SERIALIZED_NAME_PLAY_NUMBER = "PlayNumber";
  @SerializedName(SERIALIZED_NAME_PLAY_NUMBER)
  private Integer playNumber;

  public static final String SERIALIZED_NAME_RESULT = "Result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_RUNNER1_I_D = "Runner1ID";
  @SerializedName(SERIALIZED_NAME_RUNNER1_I_D)
  private Integer runner1ID;

  public static final String SERIALIZED_NAME_RUNNER2_I_D = "Runner2ID";
  @SerializedName(SERIALIZED_NAME_RUNNER2_I_D)
  private Integer runner2ID;

  public static final String SERIALIZED_NAME_RUNNER3_I_D = "Runner3ID";
  @SerializedName(SERIALIZED_NAME_RUNNER3_I_D)
  private Integer runner3ID;

  public static final String SERIALIZED_NAME_RUNS_BATTED_IN = "RunsBattedIn";
  @SerializedName(SERIALIZED_NAME_RUNS_BATTED_IN)
  private Integer runsBattedIn;

  public static final String SERIALIZED_NAME_SACRIFICE = "Sacrifice";
  @SerializedName(SERIALIZED_NAME_SACRIFICE)
  private Boolean sacrifice;

  public static final String SERIALIZED_NAME_STRIKEOUT = "Strikeout";
  @SerializedName(SERIALIZED_NAME_STRIKEOUT)
  private Boolean strikeout;

  public static final String SERIALIZED_NAME_STRIKES = "Strikes";
  @SerializedName(SERIALIZED_NAME_STRIKES)
  private Integer strikes;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_WALK = "Walk";
  @SerializedName(SERIALIZED_NAME_WALK)
  private Boolean walk;

  public Play() {
  }

  public Play atBat(Boolean atBat) {
    this.atBat = atBat;
    return this;
  }

  /**
   * Get atBat
   * @return atBat
   */
  @javax.annotation.Nullable
  public Boolean getAtBat() {
    return atBat;
  }

  public void setAtBat(Boolean atBat) {
    this.atBat = atBat;
  }


  public Play awayTeamRuns(Integer awayTeamRuns) {
    this.awayTeamRuns = awayTeamRuns;
    return this;
  }

  /**
   * Get awayTeamRuns
   * @return awayTeamRuns
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamRuns() {
    return awayTeamRuns;
  }

  public void setAwayTeamRuns(Integer awayTeamRuns) {
    this.awayTeamRuns = awayTeamRuns;
  }


  public Play balls(Integer balls) {
    this.balls = balls;
    return this;
  }

  /**
   * Get balls
   * @return balls
   */
  @javax.annotation.Nullable
  public Integer getBalls() {
    return balls;
  }

  public void setBalls(Integer balls) {
    this.balls = balls;
  }


  public Play description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Play error(Boolean error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Boolean getError() {
    return error;
  }

  public void setError(Boolean error) {
    this.error = error;
  }


  public Play hit(Boolean hit) {
    this.hit = hit;
    return this;
  }

  /**
   * Get hit
   * @return hit
   */
  @javax.annotation.Nullable
  public Boolean getHit() {
    return hit;
  }

  public void setHit(Boolean hit) {
    this.hit = hit;
  }


  public Play hitterBatHand(String hitterBatHand) {
    this.hitterBatHand = hitterBatHand;
    return this;
  }

  /**
   * Get hitterBatHand
   * @return hitterBatHand
   */
  @javax.annotation.Nullable
  public String getHitterBatHand() {
    return hitterBatHand;
  }

  public void setHitterBatHand(String hitterBatHand) {
    this.hitterBatHand = hitterBatHand;
  }


  public Play hitterID(Integer hitterID) {
    this.hitterID = hitterID;
    return this;
  }

  /**
   * Get hitterID
   * @return hitterID
   */
  @javax.annotation.Nullable
  public Integer getHitterID() {
    return hitterID;
  }

  public void setHitterID(Integer hitterID) {
    this.hitterID = hitterID;
  }


  public Play hitterName(String hitterName) {
    this.hitterName = hitterName;
    return this;
  }

  /**
   * Get hitterName
   * @return hitterName
   */
  @javax.annotation.Nullable
  public String getHitterName() {
    return hitterName;
  }

  public void setHitterName(String hitterName) {
    this.hitterName = hitterName;
  }


  public Play hitterPosition(String hitterPosition) {
    this.hitterPosition = hitterPosition;
    return this;
  }

  /**
   * Get hitterPosition
   * @return hitterPosition
   */
  @javax.annotation.Nullable
  public String getHitterPosition() {
    return hitterPosition;
  }

  public void setHitterPosition(String hitterPosition) {
    this.hitterPosition = hitterPosition;
  }


  public Play hitterTeamID(Integer hitterTeamID) {
    this.hitterTeamID = hitterTeamID;
    return this;
  }

  /**
   * Get hitterTeamID
   * @return hitterTeamID
   */
  @javax.annotation.Nullable
  public Integer getHitterTeamID() {
    return hitterTeamID;
  }

  public void setHitterTeamID(Integer hitterTeamID) {
    this.hitterTeamID = hitterTeamID;
  }


  public Play homeTeamRuns(Integer homeTeamRuns) {
    this.homeTeamRuns = homeTeamRuns;
    return this;
  }

  /**
   * Get homeTeamRuns
   * @return homeTeamRuns
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamRuns() {
    return homeTeamRuns;
  }

  public void setHomeTeamRuns(Integer homeTeamRuns) {
    this.homeTeamRuns = homeTeamRuns;
  }


  public Play inningBatterNumber(Integer inningBatterNumber) {
    this.inningBatterNumber = inningBatterNumber;
    return this;
  }

  /**
   * Get inningBatterNumber
   * @return inningBatterNumber
   */
  @javax.annotation.Nullable
  public Integer getInningBatterNumber() {
    return inningBatterNumber;
  }

  public void setInningBatterNumber(Integer inningBatterNumber) {
    this.inningBatterNumber = inningBatterNumber;
  }


  public Play inningHalf(String inningHalf) {
    this.inningHalf = inningHalf;
    return this;
  }

  /**
   * Get inningHalf
   * @return inningHalf
   */
  @javax.annotation.Nullable
  public String getInningHalf() {
    return inningHalf;
  }

  public void setInningHalf(String inningHalf) {
    this.inningHalf = inningHalf;
  }


  public Play inningID(Integer inningID) {
    this.inningID = inningID;
    return this;
  }

  /**
   * Get inningID
   * @return inningID
   */
  @javax.annotation.Nullable
  public Integer getInningID() {
    return inningID;
  }

  public void setInningID(Integer inningID) {
    this.inningID = inningID;
  }


  public Play inningNumber(Integer inningNumber) {
    this.inningNumber = inningNumber;
    return this;
  }

  /**
   * Get inningNumber
   * @return inningNumber
   */
  @javax.annotation.Nullable
  public Integer getInningNumber() {
    return inningNumber;
  }

  public void setInningNumber(Integer inningNumber) {
    this.inningNumber = inningNumber;
  }


  public Play numberOfOutsOnPlay(Integer numberOfOutsOnPlay) {
    this.numberOfOutsOnPlay = numberOfOutsOnPlay;
    return this;
  }

  /**
   * Get numberOfOutsOnPlay
   * @return numberOfOutsOnPlay
   */
  @javax.annotation.Nullable
  public Integer getNumberOfOutsOnPlay() {
    return numberOfOutsOnPlay;
  }

  public void setNumberOfOutsOnPlay(Integer numberOfOutsOnPlay) {
    this.numberOfOutsOnPlay = numberOfOutsOnPlay;
  }


  public Play out(Boolean out) {
    this.out = out;
    return this;
  }

  /**
   * Get out
   * @return out
   */
  @javax.annotation.Nullable
  public Boolean getOut() {
    return out;
  }

  public void setOut(Boolean out) {
    this.out = out;
  }


  public Play outs(Integer outs) {
    this.outs = outs;
    return this;
  }

  /**
   * Get outs
   * @return outs
   */
  @javax.annotation.Nullable
  public Integer getOuts() {
    return outs;
  }

  public void setOuts(Integer outs) {
    this.outs = outs;
  }


  public Play pitchNumberThisAtBat(Integer pitchNumberThisAtBat) {
    this.pitchNumberThisAtBat = pitchNumberThisAtBat;
    return this;
  }

  /**
   * Get pitchNumberThisAtBat
   * @return pitchNumberThisAtBat
   */
  @javax.annotation.Nullable
  public Integer getPitchNumberThisAtBat() {
    return pitchNumberThisAtBat;
  }

  public void setPitchNumberThisAtBat(Integer pitchNumberThisAtBat) {
    this.pitchNumberThisAtBat = pitchNumberThisAtBat;
  }


  public Play pitcherID(Integer pitcherID) {
    this.pitcherID = pitcherID;
    return this;
  }

  /**
   * Get pitcherID
   * @return pitcherID
   */
  @javax.annotation.Nullable
  public Integer getPitcherID() {
    return pitcherID;
  }

  public void setPitcherID(Integer pitcherID) {
    this.pitcherID = pitcherID;
  }


  public Play pitcherName(String pitcherName) {
    this.pitcherName = pitcherName;
    return this;
  }

  /**
   * Get pitcherName
   * @return pitcherName
   */
  @javax.annotation.Nullable
  public String getPitcherName() {
    return pitcherName;
  }

  public void setPitcherName(String pitcherName) {
    this.pitcherName = pitcherName;
  }


  public Play pitcherTeamID(Integer pitcherTeamID) {
    this.pitcherTeamID = pitcherTeamID;
    return this;
  }

  /**
   * Get pitcherTeamID
   * @return pitcherTeamID
   */
  @javax.annotation.Nullable
  public Integer getPitcherTeamID() {
    return pitcherTeamID;
  }

  public void setPitcherTeamID(Integer pitcherTeamID) {
    this.pitcherTeamID = pitcherTeamID;
  }


  public Play pitcherThrowHand(String pitcherThrowHand) {
    this.pitcherThrowHand = pitcherThrowHand;
    return this;
  }

  /**
   * Get pitcherThrowHand
   * @return pitcherThrowHand
   */
  @javax.annotation.Nullable
  public String getPitcherThrowHand() {
    return pitcherThrowHand;
  }

  public void setPitcherThrowHand(String pitcherThrowHand) {
    this.pitcherThrowHand = pitcherThrowHand;
  }


  public Play pitches(List<Pitch> pitches) {
    this.pitches = pitches;
    return this;
  }

  public Play addPitchesItem(Pitch pitchesItem) {
    if (this.pitches == null) {
      this.pitches = new ArrayList<>();
    }
    this.pitches.add(pitchesItem);
    return this;
  }

  /**
   * Get pitches
   * @return pitches
   */
  @javax.annotation.Nullable
  public List<Pitch> getPitches() {
    return pitches;
  }

  public void setPitches(List<Pitch> pitches) {
    this.pitches = pitches;
  }


  public Play playID(Integer playID) {
    this.playID = playID;
    return this;
  }

  /**
   * Get playID
   * @return playID
   */
  @javax.annotation.Nullable
  public Integer getPlayID() {
    return playID;
  }

  public void setPlayID(Integer playID) {
    this.playID = playID;
  }


  public Play playNumber(Integer playNumber) {
    this.playNumber = playNumber;
    return this;
  }

  /**
   * Get playNumber
   * @return playNumber
   */
  @javax.annotation.Nullable
  public Integer getPlayNumber() {
    return playNumber;
  }

  public void setPlayNumber(Integer playNumber) {
    this.playNumber = playNumber;
  }


  public Play result(String result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public Play runner1ID(Integer runner1ID) {
    this.runner1ID = runner1ID;
    return this;
  }

  /**
   * Get runner1ID
   * @return runner1ID
   */
  @javax.annotation.Nullable
  public Integer getRunner1ID() {
    return runner1ID;
  }

  public void setRunner1ID(Integer runner1ID) {
    this.runner1ID = runner1ID;
  }


  public Play runner2ID(Integer runner2ID) {
    this.runner2ID = runner2ID;
    return this;
  }

  /**
   * Get runner2ID
   * @return runner2ID
   */
  @javax.annotation.Nullable
  public Integer getRunner2ID() {
    return runner2ID;
  }

  public void setRunner2ID(Integer runner2ID) {
    this.runner2ID = runner2ID;
  }


  public Play runner3ID(Integer runner3ID) {
    this.runner3ID = runner3ID;
    return this;
  }

  /**
   * Get runner3ID
   * @return runner3ID
   */
  @javax.annotation.Nullable
  public Integer getRunner3ID() {
    return runner3ID;
  }

  public void setRunner3ID(Integer runner3ID) {
    this.runner3ID = runner3ID;
  }


  public Play runsBattedIn(Integer runsBattedIn) {
    this.runsBattedIn = runsBattedIn;
    return this;
  }

  /**
   * Get runsBattedIn
   * @return runsBattedIn
   */
  @javax.annotation.Nullable
  public Integer getRunsBattedIn() {
    return runsBattedIn;
  }

  public void setRunsBattedIn(Integer runsBattedIn) {
    this.runsBattedIn = runsBattedIn;
  }


  public Play sacrifice(Boolean sacrifice) {
    this.sacrifice = sacrifice;
    return this;
  }

  /**
   * Get sacrifice
   * @return sacrifice
   */
  @javax.annotation.Nullable
  public Boolean getSacrifice() {
    return sacrifice;
  }

  public void setSacrifice(Boolean sacrifice) {
    this.sacrifice = sacrifice;
  }


  public Play strikeout(Boolean strikeout) {
    this.strikeout = strikeout;
    return this;
  }

  /**
   * Get strikeout
   * @return strikeout
   */
  @javax.annotation.Nullable
  public Boolean getStrikeout() {
    return strikeout;
  }

  public void setStrikeout(Boolean strikeout) {
    this.strikeout = strikeout;
  }


  public Play strikes(Integer strikes) {
    this.strikes = strikes;
    return this;
  }

  /**
   * Get strikes
   * @return strikes
   */
  @javax.annotation.Nullable
  public Integer getStrikes() {
    return strikes;
  }

  public void setStrikes(Integer strikes) {
    this.strikes = strikes;
  }


  public Play updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Play walk(Boolean walk) {
    this.walk = walk;
    return this;
  }

  /**
   * Get walk
   * @return walk
   */
  @javax.annotation.Nullable
  public Boolean getWalk() {
    return walk;
  }

  public void setWalk(Boolean walk) {
    this.walk = walk;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Play play = (Play) o;
    return Objects.equals(this.atBat, play.atBat) &&
        Objects.equals(this.awayTeamRuns, play.awayTeamRuns) &&
        Objects.equals(this.balls, play.balls) &&
        Objects.equals(this.description, play.description) &&
        Objects.equals(this.error, play.error) &&
        Objects.equals(this.hit, play.hit) &&
        Objects.equals(this.hitterBatHand, play.hitterBatHand) &&
        Objects.equals(this.hitterID, play.hitterID) &&
        Objects.equals(this.hitterName, play.hitterName) &&
        Objects.equals(this.hitterPosition, play.hitterPosition) &&
        Objects.equals(this.hitterTeamID, play.hitterTeamID) &&
        Objects.equals(this.homeTeamRuns, play.homeTeamRuns) &&
        Objects.equals(this.inningBatterNumber, play.inningBatterNumber) &&
        Objects.equals(this.inningHalf, play.inningHalf) &&
        Objects.equals(this.inningID, play.inningID) &&
        Objects.equals(this.inningNumber, play.inningNumber) &&
        Objects.equals(this.numberOfOutsOnPlay, play.numberOfOutsOnPlay) &&
        Objects.equals(this.out, play.out) &&
        Objects.equals(this.outs, play.outs) &&
        Objects.equals(this.pitchNumberThisAtBat, play.pitchNumberThisAtBat) &&
        Objects.equals(this.pitcherID, play.pitcherID) &&
        Objects.equals(this.pitcherName, play.pitcherName) &&
        Objects.equals(this.pitcherTeamID, play.pitcherTeamID) &&
        Objects.equals(this.pitcherThrowHand, play.pitcherThrowHand) &&
        Objects.equals(this.pitches, play.pitches) &&
        Objects.equals(this.playID, play.playID) &&
        Objects.equals(this.playNumber, play.playNumber) &&
        Objects.equals(this.result, play.result) &&
        Objects.equals(this.runner1ID, play.runner1ID) &&
        Objects.equals(this.runner2ID, play.runner2ID) &&
        Objects.equals(this.runner3ID, play.runner3ID) &&
        Objects.equals(this.runsBattedIn, play.runsBattedIn) &&
        Objects.equals(this.sacrifice, play.sacrifice) &&
        Objects.equals(this.strikeout, play.strikeout) &&
        Objects.equals(this.strikes, play.strikes) &&
        Objects.equals(this.updated, play.updated) &&
        Objects.equals(this.walk, play.walk);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atBat, awayTeamRuns, balls, description, error, hit, hitterBatHand, hitterID, hitterName, hitterPosition, hitterTeamID, homeTeamRuns, inningBatterNumber, inningHalf, inningID, inningNumber, numberOfOutsOnPlay, out, outs, pitchNumberThisAtBat, pitcherID, pitcherName, pitcherTeamID, pitcherThrowHand, pitches, playID, playNumber, result, runner1ID, runner2ID, runner3ID, runsBattedIn, sacrifice, strikeout, strikes, updated, walk);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Play {\n");
    sb.append("    atBat: ").append(toIndentedString(atBat)).append("\n");
    sb.append("    awayTeamRuns: ").append(toIndentedString(awayTeamRuns)).append("\n");
    sb.append("    balls: ").append(toIndentedString(balls)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    hit: ").append(toIndentedString(hit)).append("\n");
    sb.append("    hitterBatHand: ").append(toIndentedString(hitterBatHand)).append("\n");
    sb.append("    hitterID: ").append(toIndentedString(hitterID)).append("\n");
    sb.append("    hitterName: ").append(toIndentedString(hitterName)).append("\n");
    sb.append("    hitterPosition: ").append(toIndentedString(hitterPosition)).append("\n");
    sb.append("    hitterTeamID: ").append(toIndentedString(hitterTeamID)).append("\n");
    sb.append("    homeTeamRuns: ").append(toIndentedString(homeTeamRuns)).append("\n");
    sb.append("    inningBatterNumber: ").append(toIndentedString(inningBatterNumber)).append("\n");
    sb.append("    inningHalf: ").append(toIndentedString(inningHalf)).append("\n");
    sb.append("    inningID: ").append(toIndentedString(inningID)).append("\n");
    sb.append("    inningNumber: ").append(toIndentedString(inningNumber)).append("\n");
    sb.append("    numberOfOutsOnPlay: ").append(toIndentedString(numberOfOutsOnPlay)).append("\n");
    sb.append("    out: ").append(toIndentedString(out)).append("\n");
    sb.append("    outs: ").append(toIndentedString(outs)).append("\n");
    sb.append("    pitchNumberThisAtBat: ").append(toIndentedString(pitchNumberThisAtBat)).append("\n");
    sb.append("    pitcherID: ").append(toIndentedString(pitcherID)).append("\n");
    sb.append("    pitcherName: ").append(toIndentedString(pitcherName)).append("\n");
    sb.append("    pitcherTeamID: ").append(toIndentedString(pitcherTeamID)).append("\n");
    sb.append("    pitcherThrowHand: ").append(toIndentedString(pitcherThrowHand)).append("\n");
    sb.append("    pitches: ").append(toIndentedString(pitches)).append("\n");
    sb.append("    playID: ").append(toIndentedString(playID)).append("\n");
    sb.append("    playNumber: ").append(toIndentedString(playNumber)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    runner1ID: ").append(toIndentedString(runner1ID)).append("\n");
    sb.append("    runner2ID: ").append(toIndentedString(runner2ID)).append("\n");
    sb.append("    runner3ID: ").append(toIndentedString(runner3ID)).append("\n");
    sb.append("    runsBattedIn: ").append(toIndentedString(runsBattedIn)).append("\n");
    sb.append("    sacrifice: ").append(toIndentedString(sacrifice)).append("\n");
    sb.append("    strikeout: ").append(toIndentedString(strikeout)).append("\n");
    sb.append("    strikes: ").append(toIndentedString(strikes)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    walk: ").append(toIndentedString(walk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AtBat");
    openapiFields.add("AwayTeamRuns");
    openapiFields.add("Balls");
    openapiFields.add("Description");
    openapiFields.add("Error");
    openapiFields.add("Hit");
    openapiFields.add("HitterBatHand");
    openapiFields.add("HitterID");
    openapiFields.add("HitterName");
    openapiFields.add("HitterPosition");
    openapiFields.add("HitterTeamID");
    openapiFields.add("HomeTeamRuns");
    openapiFields.add("InningBatterNumber");
    openapiFields.add("InningHalf");
    openapiFields.add("InningID");
    openapiFields.add("InningNumber");
    openapiFields.add("NumberOfOutsOnPlay");
    openapiFields.add("Out");
    openapiFields.add("Outs");
    openapiFields.add("PitchNumberThisAtBat");
    openapiFields.add("PitcherID");
    openapiFields.add("PitcherName");
    openapiFields.add("PitcherTeamID");
    openapiFields.add("PitcherThrowHand");
    openapiFields.add("Pitches");
    openapiFields.add("PlayID");
    openapiFields.add("PlayNumber");
    openapiFields.add("Result");
    openapiFields.add("Runner1ID");
    openapiFields.add("Runner2ID");
    openapiFields.add("Runner3ID");
    openapiFields.add("RunsBattedIn");
    openapiFields.add("Sacrifice");
    openapiFields.add("Strikeout");
    openapiFields.add("Strikes");
    openapiFields.add("Updated");
    openapiFields.add("Walk");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Play
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Play.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Play is not found in the empty JSON string", Play.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Play.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Play` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("HitterBatHand") != null && !jsonObj.get("HitterBatHand").isJsonNull()) && !jsonObj.get("HitterBatHand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HitterBatHand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HitterBatHand").toString()));
      }
      if ((jsonObj.get("HitterName") != null && !jsonObj.get("HitterName").isJsonNull()) && !jsonObj.get("HitterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HitterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HitterName").toString()));
      }
      if ((jsonObj.get("HitterPosition") != null && !jsonObj.get("HitterPosition").isJsonNull()) && !jsonObj.get("HitterPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HitterPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HitterPosition").toString()));
      }
      if ((jsonObj.get("InningHalf") != null && !jsonObj.get("InningHalf").isJsonNull()) && !jsonObj.get("InningHalf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InningHalf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InningHalf").toString()));
      }
      if ((jsonObj.get("PitcherName") != null && !jsonObj.get("PitcherName").isJsonNull()) && !jsonObj.get("PitcherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PitcherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PitcherName").toString()));
      }
      if ((jsonObj.get("PitcherThrowHand") != null && !jsonObj.get("PitcherThrowHand").isJsonNull()) && !jsonObj.get("PitcherThrowHand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PitcherThrowHand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PitcherThrowHand").toString()));
      }
      if (jsonObj.get("Pitches") != null && !jsonObj.get("Pitches").isJsonNull()) {
        JsonArray jsonArraypitches = jsonObj.getAsJsonArray("Pitches");
        if (jsonArraypitches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Pitches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Pitches` to be an array in the JSON string but got `%s`", jsonObj.get("Pitches").toString()));
          }

          // validate the optional field `Pitches` (array)
          for (int i = 0; i < jsonArraypitches.size(); i++) {
            Pitch.validateJsonElement(jsonArraypitches.get(i));
          };
        }
      }
      if ((jsonObj.get("Result") != null && !jsonObj.get("Result").isJsonNull()) && !jsonObj.get("Result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Result").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Play.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Play' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Play> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Play.class));

       return (TypeAdapter<T>) new TypeAdapter<Play>() {
           @Override
           public void write(JsonWriter out, Play value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Play read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Play given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Play
   * @throws IOException if the JSON string is invalid with respect to Play
   */
  public static Play fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Play.class);
  }

  /**
   * Convert an instance of Play to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

