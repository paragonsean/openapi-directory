/*
 * MLB v3 Play-by-Play
 * MLB play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pitch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:00.436683-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pitch {
  public static final String SERIALIZED_NAME_BALL = "Ball";
  @SerializedName(SERIALIZED_NAME_BALL)
  private Boolean ball;

  public static final String SERIALIZED_NAME_BALLS_BEFORE_PITCH = "BallsBeforePitch";
  @SerializedName(SERIALIZED_NAME_BALLS_BEFORE_PITCH)
  private Integer ballsBeforePitch;

  public static final String SERIALIZED_NAME_FOUL = "Foul";
  @SerializedName(SERIALIZED_NAME_FOUL)
  private Boolean foul;

  public static final String SERIALIZED_NAME_HITTER_I_D = "HitterID";
  @SerializedName(SERIALIZED_NAME_HITTER_I_D)
  private Integer hitterID;

  public static final String SERIALIZED_NAME_LOOKING = "Looking";
  @SerializedName(SERIALIZED_NAME_LOOKING)
  private Boolean looking;

  public static final String SERIALIZED_NAME_OUTS = "Outs";
  @SerializedName(SERIALIZED_NAME_OUTS)
  private Integer outs;

  public static final String SERIALIZED_NAME_PITCH_I_D = "PitchID";
  @SerializedName(SERIALIZED_NAME_PITCH_I_D)
  private Integer pitchID;

  public static final String SERIALIZED_NAME_PITCH_NUMBER_THIS_AT_BAT = "PitchNumberThisAtBat";
  @SerializedName(SERIALIZED_NAME_PITCH_NUMBER_THIS_AT_BAT)
  private Integer pitchNumberThisAtBat;

  public static final String SERIALIZED_NAME_PITCHER_I_D = "PitcherID";
  @SerializedName(SERIALIZED_NAME_PITCHER_I_D)
  private Integer pitcherID;

  public static final String SERIALIZED_NAME_PLAY_I_D = "PlayID";
  @SerializedName(SERIALIZED_NAME_PLAY_I_D)
  private Integer playID;

  public static final String SERIALIZED_NAME_STRIKE = "Strike";
  @SerializedName(SERIALIZED_NAME_STRIKE)
  private Boolean strike;

  public static final String SERIALIZED_NAME_STRIKES_BEFORE_PITCH = "StrikesBeforePitch";
  @SerializedName(SERIALIZED_NAME_STRIKES_BEFORE_PITCH)
  private Integer strikesBeforePitch;

  public static final String SERIALIZED_NAME_SWINGING = "Swinging";
  @SerializedName(SERIALIZED_NAME_SWINGING)
  private Boolean swinging;

  public Pitch() {
  }

  public Pitch ball(Boolean ball) {
    this.ball = ball;
    return this;
  }

  /**
   * Get ball
   * @return ball
   */
  @javax.annotation.Nullable
  public Boolean getBall() {
    return ball;
  }

  public void setBall(Boolean ball) {
    this.ball = ball;
  }


  public Pitch ballsBeforePitch(Integer ballsBeforePitch) {
    this.ballsBeforePitch = ballsBeforePitch;
    return this;
  }

  /**
   * Get ballsBeforePitch
   * @return ballsBeforePitch
   */
  @javax.annotation.Nullable
  public Integer getBallsBeforePitch() {
    return ballsBeforePitch;
  }

  public void setBallsBeforePitch(Integer ballsBeforePitch) {
    this.ballsBeforePitch = ballsBeforePitch;
  }


  public Pitch foul(Boolean foul) {
    this.foul = foul;
    return this;
  }

  /**
   * Get foul
   * @return foul
   */
  @javax.annotation.Nullable
  public Boolean getFoul() {
    return foul;
  }

  public void setFoul(Boolean foul) {
    this.foul = foul;
  }


  public Pitch hitterID(Integer hitterID) {
    this.hitterID = hitterID;
    return this;
  }

  /**
   * Get hitterID
   * @return hitterID
   */
  @javax.annotation.Nullable
  public Integer getHitterID() {
    return hitterID;
  }

  public void setHitterID(Integer hitterID) {
    this.hitterID = hitterID;
  }


  public Pitch looking(Boolean looking) {
    this.looking = looking;
    return this;
  }

  /**
   * Get looking
   * @return looking
   */
  @javax.annotation.Nullable
  public Boolean getLooking() {
    return looking;
  }

  public void setLooking(Boolean looking) {
    this.looking = looking;
  }


  public Pitch outs(Integer outs) {
    this.outs = outs;
    return this;
  }

  /**
   * Get outs
   * @return outs
   */
  @javax.annotation.Nullable
  public Integer getOuts() {
    return outs;
  }

  public void setOuts(Integer outs) {
    this.outs = outs;
  }


  public Pitch pitchID(Integer pitchID) {
    this.pitchID = pitchID;
    return this;
  }

  /**
   * Get pitchID
   * @return pitchID
   */
  @javax.annotation.Nullable
  public Integer getPitchID() {
    return pitchID;
  }

  public void setPitchID(Integer pitchID) {
    this.pitchID = pitchID;
  }


  public Pitch pitchNumberThisAtBat(Integer pitchNumberThisAtBat) {
    this.pitchNumberThisAtBat = pitchNumberThisAtBat;
    return this;
  }

  /**
   * Get pitchNumberThisAtBat
   * @return pitchNumberThisAtBat
   */
  @javax.annotation.Nullable
  public Integer getPitchNumberThisAtBat() {
    return pitchNumberThisAtBat;
  }

  public void setPitchNumberThisAtBat(Integer pitchNumberThisAtBat) {
    this.pitchNumberThisAtBat = pitchNumberThisAtBat;
  }


  public Pitch pitcherID(Integer pitcherID) {
    this.pitcherID = pitcherID;
    return this;
  }

  /**
   * Get pitcherID
   * @return pitcherID
   */
  @javax.annotation.Nullable
  public Integer getPitcherID() {
    return pitcherID;
  }

  public void setPitcherID(Integer pitcherID) {
    this.pitcherID = pitcherID;
  }


  public Pitch playID(Integer playID) {
    this.playID = playID;
    return this;
  }

  /**
   * Get playID
   * @return playID
   */
  @javax.annotation.Nullable
  public Integer getPlayID() {
    return playID;
  }

  public void setPlayID(Integer playID) {
    this.playID = playID;
  }


  public Pitch strike(Boolean strike) {
    this.strike = strike;
    return this;
  }

  /**
   * Get strike
   * @return strike
   */
  @javax.annotation.Nullable
  public Boolean getStrike() {
    return strike;
  }

  public void setStrike(Boolean strike) {
    this.strike = strike;
  }


  public Pitch strikesBeforePitch(Integer strikesBeforePitch) {
    this.strikesBeforePitch = strikesBeforePitch;
    return this;
  }

  /**
   * Get strikesBeforePitch
   * @return strikesBeforePitch
   */
  @javax.annotation.Nullable
  public Integer getStrikesBeforePitch() {
    return strikesBeforePitch;
  }

  public void setStrikesBeforePitch(Integer strikesBeforePitch) {
    this.strikesBeforePitch = strikesBeforePitch;
  }


  public Pitch swinging(Boolean swinging) {
    this.swinging = swinging;
    return this;
  }

  /**
   * Get swinging
   * @return swinging
   */
  @javax.annotation.Nullable
  public Boolean getSwinging() {
    return swinging;
  }

  public void setSwinging(Boolean swinging) {
    this.swinging = swinging;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pitch pitch = (Pitch) o;
    return Objects.equals(this.ball, pitch.ball) &&
        Objects.equals(this.ballsBeforePitch, pitch.ballsBeforePitch) &&
        Objects.equals(this.foul, pitch.foul) &&
        Objects.equals(this.hitterID, pitch.hitterID) &&
        Objects.equals(this.looking, pitch.looking) &&
        Objects.equals(this.outs, pitch.outs) &&
        Objects.equals(this.pitchID, pitch.pitchID) &&
        Objects.equals(this.pitchNumberThisAtBat, pitch.pitchNumberThisAtBat) &&
        Objects.equals(this.pitcherID, pitch.pitcherID) &&
        Objects.equals(this.playID, pitch.playID) &&
        Objects.equals(this.strike, pitch.strike) &&
        Objects.equals(this.strikesBeforePitch, pitch.strikesBeforePitch) &&
        Objects.equals(this.swinging, pitch.swinging);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ball, ballsBeforePitch, foul, hitterID, looking, outs, pitchID, pitchNumberThisAtBat, pitcherID, playID, strike, strikesBeforePitch, swinging);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pitch {\n");
    sb.append("    ball: ").append(toIndentedString(ball)).append("\n");
    sb.append("    ballsBeforePitch: ").append(toIndentedString(ballsBeforePitch)).append("\n");
    sb.append("    foul: ").append(toIndentedString(foul)).append("\n");
    sb.append("    hitterID: ").append(toIndentedString(hitterID)).append("\n");
    sb.append("    looking: ").append(toIndentedString(looking)).append("\n");
    sb.append("    outs: ").append(toIndentedString(outs)).append("\n");
    sb.append("    pitchID: ").append(toIndentedString(pitchID)).append("\n");
    sb.append("    pitchNumberThisAtBat: ").append(toIndentedString(pitchNumberThisAtBat)).append("\n");
    sb.append("    pitcherID: ").append(toIndentedString(pitcherID)).append("\n");
    sb.append("    playID: ").append(toIndentedString(playID)).append("\n");
    sb.append("    strike: ").append(toIndentedString(strike)).append("\n");
    sb.append("    strikesBeforePitch: ").append(toIndentedString(strikesBeforePitch)).append("\n");
    sb.append("    swinging: ").append(toIndentedString(swinging)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Ball");
    openapiFields.add("BallsBeforePitch");
    openapiFields.add("Foul");
    openapiFields.add("HitterID");
    openapiFields.add("Looking");
    openapiFields.add("Outs");
    openapiFields.add("PitchID");
    openapiFields.add("PitchNumberThisAtBat");
    openapiFields.add("PitcherID");
    openapiFields.add("PlayID");
    openapiFields.add("Strike");
    openapiFields.add("StrikesBeforePitch");
    openapiFields.add("Swinging");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pitch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pitch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pitch is not found in the empty JSON string", Pitch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pitch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pitch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pitch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pitch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pitch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pitch.class));

       return (TypeAdapter<T>) new TypeAdapter<Pitch>() {
           @Override
           public void write(JsonWriter out, Pitch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pitch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pitch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pitch
   * @throws IOException if the JSON string is invalid with respect to Pitch
   */
  public static Pitch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pitch.class);
  }

  /**
   * Convert an instance of Pitch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

