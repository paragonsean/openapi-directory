/**
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Game from './Game';
import PlayerSeason from './PlayerSeason';
import Standing from './Standing';
import TeamSeason from './TeamSeason';

/**
 * The Round model module.
 * @module model/Round
 * @version 1.0
 */
class Round {
    /**
     * Constructs a new <code>Round</code>.
     * @alias module:model/Round
     */
    constructor() { 
        
        Round.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Round</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Round} obj Optional instance to populate.
     * @return {module:model/Round} The populated <code>Round</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Round();

            if (data.hasOwnProperty('CurrentRound')) {
                obj['CurrentRound'] = ApiClient.convertToType(data['CurrentRound'], 'Boolean');
            }
            if (data.hasOwnProperty('CurrentWeek')) {
                obj['CurrentWeek'] = ApiClient.convertToType(data['CurrentWeek'], 'Number');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'String');
            }
            if (data.hasOwnProperty('Games')) {
                obj['Games'] = ApiClient.convertToType(data['Games'], [Game]);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PlayerSeasons')) {
                obj['PlayerSeasons'] = ApiClient.convertToType(data['PlayerSeasons'], [PlayerSeason]);
            }
            if (data.hasOwnProperty('RoundId')) {
                obj['RoundId'] = ApiClient.convertToType(data['RoundId'], 'Number');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('SeasonId')) {
                obj['SeasonId'] = ApiClient.convertToType(data['SeasonId'], 'Number');
            }
            if (data.hasOwnProperty('SeasonType')) {
                obj['SeasonType'] = ApiClient.convertToType(data['SeasonType'], 'Number');
            }
            if (data.hasOwnProperty('Standings')) {
                obj['Standings'] = ApiClient.convertToType(data['Standings'], [Standing]);
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('TeamSeasons')) {
                obj['TeamSeasons'] = ApiClient.convertToType(data['TeamSeasons'], [TeamSeason]);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Round</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Round</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EndDate'] && !(typeof data['EndDate'] === 'string' || data['EndDate'] instanceof String)) {
            throw new Error("Expected the field `EndDate` to be a primitive type in the JSON string but got " + data['EndDate']);
        }
        if (data['Games']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Games'])) {
                throw new Error("Expected the field `Games` to be an array in the JSON data but got " + data['Games']);
            }
            // validate the optional field `Games` (array)
            for (const item of data['Games']) {
                Game.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['PlayerSeasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PlayerSeasons'])) {
                throw new Error("Expected the field `PlayerSeasons` to be an array in the JSON data but got " + data['PlayerSeasons']);
            }
            // validate the optional field `PlayerSeasons` (array)
            for (const item of data['PlayerSeasons']) {
                PlayerSeason.validateJSON(item);
            };
        }
        if (data['Standings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Standings'])) {
                throw new Error("Expected the field `Standings` to be an array in the JSON data but got " + data['Standings']);
            }
            // validate the optional field `Standings` (array)
            for (const item of data['Standings']) {
                Standing.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        if (data['TeamSeasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TeamSeasons'])) {
                throw new Error("Expected the field `TeamSeasons` to be an array in the JSON data but got " + data['TeamSeasons']);
            }
            // validate the optional field `TeamSeasons` (array)
            for (const item of data['TeamSeasons']) {
                TeamSeason.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * @member {Boolean} CurrentRound
 */
Round.prototype['CurrentRound'] = undefined;

/**
 * @member {Number} CurrentWeek
 */
Round.prototype['CurrentWeek'] = undefined;

/**
 * @member {String} EndDate
 */
Round.prototype['EndDate'] = undefined;

/**
 * @member {Array.<module:model/Game>} Games
 */
Round.prototype['Games'] = undefined;

/**
 * @member {String} Name
 */
Round.prototype['Name'] = undefined;

/**
 * @member {Array.<module:model/PlayerSeason>} PlayerSeasons
 */
Round.prototype['PlayerSeasons'] = undefined;

/**
 * @member {Number} RoundId
 */
Round.prototype['RoundId'] = undefined;

/**
 * @member {Number} Season
 */
Round.prototype['Season'] = undefined;

/**
 * @member {Number} SeasonId
 */
Round.prototype['SeasonId'] = undefined;

/**
 * @member {Number} SeasonType
 */
Round.prototype['SeasonType'] = undefined;

/**
 * @member {Array.<module:model/Standing>} Standings
 */
Round.prototype['Standings'] = undefined;

/**
 * @member {String} StartDate
 */
Round.prototype['StartDate'] = undefined;

/**
 * @member {Array.<module:model/TeamSeason>} TeamSeasons
 */
Round.prototype['TeamSeasons'] = undefined;

/**
 * @member {String} Type
 */
Round.prototype['Type'] = undefined;






export default Round;

