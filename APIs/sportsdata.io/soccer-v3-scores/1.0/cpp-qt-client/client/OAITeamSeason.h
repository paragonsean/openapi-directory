/**
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITeamSeason.h
 *
 * 
 */

#ifndef OAITeamSeason_H
#define OAITeamSeason_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITeamSeason : public OAIObject {
public:
    OAITeamSeason();
    OAITeamSeason(QString json);
    ~OAITeamSeason() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAssists() const;
    void setAssists(const double &assists);
    bool is_assists_Set() const;
    bool is_assists_Valid() const;

    double getBlockedShots() const;
    void setBlockedShots(const double &blocked_shots);
    bool is_blocked_shots_Set() const;
    bool is_blocked_shots_Valid() const;

    double getCornersWon() const;
    void setCornersWon(const double &corners_won);
    bool is_corners_won_Set() const;
    bool is_corners_won_Valid() const;

    double getCrosses() const;
    void setCrosses(const double &crosses);
    bool is_crosses_Set() const;
    bool is_crosses_Valid() const;

    double getDefenderCleanSheets() const;
    void setDefenderCleanSheets(const double &defender_clean_sheets);
    bool is_defender_clean_sheets_Set() const;
    bool is_defender_clean_sheets_Valid() const;

    double getFantasyPoints() const;
    void setFantasyPoints(const double &fantasy_points);
    bool is_fantasy_points_Set() const;
    bool is_fantasy_points_Valid() const;

    double getFantasyPointsDraftKings() const;
    void setFantasyPointsDraftKings(const double &fantasy_points_draft_kings);
    bool is_fantasy_points_draft_kings_Set() const;
    bool is_fantasy_points_draft_kings_Valid() const;

    double getFantasyPointsFanDuel() const;
    void setFantasyPointsFanDuel(const double &fantasy_points_fan_duel);
    bool is_fantasy_points_fan_duel_Set() const;
    bool is_fantasy_points_fan_duel_Valid() const;

    double getFantasyPointsMondogoal() const;
    void setFantasyPointsMondogoal(const double &fantasy_points_mondogoal);
    bool is_fantasy_points_mondogoal_Set() const;
    bool is_fantasy_points_mondogoal_Valid() const;

    double getFantasyPointsYahoo() const;
    void setFantasyPointsYahoo(const double &fantasy_points_yahoo);
    bool is_fantasy_points_yahoo_Set() const;
    bool is_fantasy_points_yahoo_Valid() const;

    double getFouled() const;
    void setFouled(const double &fouled);
    bool is_fouled_Set() const;
    bool is_fouled_Valid() const;

    double getFouls() const;
    void setFouls(const double &fouls);
    bool is_fouls_Set() const;
    bool is_fouls_Valid() const;

    qint32 getGames() const;
    void setGames(const qint32 &games);
    bool is_games_Set() const;
    bool is_games_Valid() const;

    qint32 getGlobalTeamId() const;
    void setGlobalTeamId(const qint32 &global_team_id);
    bool is_global_team_id_Set() const;
    bool is_global_team_id_Valid() const;

    double getGoalkeeperCleanSheets() const;
    void setGoalkeeperCleanSheets(const double &goalkeeper_clean_sheets);
    bool is_goalkeeper_clean_sheets_Set() const;
    bool is_goalkeeper_clean_sheets_Valid() const;

    double getGoalkeeperGoalsAgainst() const;
    void setGoalkeeperGoalsAgainst(const double &goalkeeper_goals_against);
    bool is_goalkeeper_goals_against_Set() const;
    bool is_goalkeeper_goals_against_Valid() const;

    double getGoalkeeperSaves() const;
    void setGoalkeeperSaves(const double &goalkeeper_saves);
    bool is_goalkeeper_saves_Set() const;
    bool is_goalkeeper_saves_Valid() const;

    double getGoalkeeperSingleGoalAgainst() const;
    void setGoalkeeperSingleGoalAgainst(const double &goalkeeper_single_goal_against);
    bool is_goalkeeper_single_goal_against_Set() const;
    bool is_goalkeeper_single_goal_against_Valid() const;

    double getGoalkeeperWins() const;
    void setGoalkeeperWins(const double &goalkeeper_wins);
    bool is_goalkeeper_wins_Set() const;
    bool is_goalkeeper_wins_Valid() const;

    double getGoals() const;
    void setGoals(const double &goals);
    bool is_goals_Set() const;
    bool is_goals_Valid() const;

    double getInterceptions() const;
    void setInterceptions(const double &interceptions);
    bool is_interceptions_Set() const;
    bool is_interceptions_Valid() const;

    double getLastManTackle() const;
    void setLastManTackle(const double &last_man_tackle);
    bool is_last_man_tackle_Set() const;
    bool is_last_man_tackle_Valid() const;

    double getMinutes() const;
    void setMinutes(const double &minutes);
    bool is_minutes_Set() const;
    bool is_minutes_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getOffsides() const;
    void setOffsides(const double &offsides);
    bool is_offsides_Set() const;
    bool is_offsides_Valid() const;

    double getOpponentScore() const;
    void setOpponentScore(const double &opponent_score);
    bool is_opponent_score_Set() const;
    bool is_opponent_score_Valid() const;

    double getOwnGoals() const;
    void setOwnGoals(const double &own_goals);
    bool is_own_goals_Set() const;
    bool is_own_goals_Valid() const;

    double getPasses() const;
    void setPasses(const double &passes);
    bool is_passes_Set() const;
    bool is_passes_Valid() const;

    double getPassesCompleted() const;
    void setPassesCompleted(const double &passes_completed);
    bool is_passes_completed_Set() const;
    bool is_passes_completed_Valid() const;

    double getPenaltiesConceded() const;
    void setPenaltiesConceded(const double &penalties_conceded);
    bool is_penalties_conceded_Set() const;
    bool is_penalties_conceded_Valid() const;

    double getPenaltiesWon() const;
    void setPenaltiesWon(const double &penalties_won);
    bool is_penalties_won_Set() const;
    bool is_penalties_won_Valid() const;

    double getPenaltyKickGoals() const;
    void setPenaltyKickGoals(const double &penalty_kick_goals);
    bool is_penalty_kick_goals_Set() const;
    bool is_penalty_kick_goals_Valid() const;

    double getPenaltyKickMisses() const;
    void setPenaltyKickMisses(const double &penalty_kick_misses);
    bool is_penalty_kick_misses_Set() const;
    bool is_penalty_kick_misses_Valid() const;

    double getPenaltyKickSaves() const;
    void setPenaltyKickSaves(const double &penalty_kick_saves);
    bool is_penalty_kick_saves_Set() const;
    bool is_penalty_kick_saves_Valid() const;

    double getPossession() const;
    void setPossession(const double &possession);
    bool is_possession_Set() const;
    bool is_possession_Valid() const;

    double getRedCards() const;
    void setRedCards(const double &red_cards);
    bool is_red_cards_Set() const;
    bool is_red_cards_Valid() const;

    qint32 getRoundId() const;
    void setRoundId(const qint32 &round_id);
    bool is_round_id_Set() const;
    bool is_round_id_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    qint32 getSeasonType() const;
    void setSeasonType(const qint32 &season_type);
    bool is_season_type_Set() const;
    bool is_season_type_Valid() const;

    double getShots() const;
    void setShots(const double &shots);
    bool is_shots_Set() const;
    bool is_shots_Valid() const;

    double getShotsOnGoal() const;
    void setShotsOnGoal(const double &shots_on_goal);
    bool is_shots_on_goal_Set() const;
    bool is_shots_on_goal_Valid() const;

    qint32 getStatId() const;
    void setStatId(const qint32 &stat_id);
    bool is_stat_id_Set() const;
    bool is_stat_id_Valid() const;

    double getTackles() const;
    void setTackles(const double &tackles);
    bool is_tackles_Set() const;
    bool is_tackles_Valid() const;

    double getTacklesWon() const;
    void setTacklesWon(const double &tackles_won);
    bool is_tackles_won_Set() const;
    bool is_tackles_won_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    double getTouches() const;
    void setTouches(const double &touches);
    bool is_touches_Set() const;
    bool is_touches_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QString getUpdatedUtc() const;
    void setUpdatedUtc(const QString &updated_utc);
    bool is_updated_utc_Set() const;
    bool is_updated_utc_Valid() const;

    double getYellowCards() const;
    void setYellowCards(const double &yellow_cards);
    bool is_yellow_cards_Set() const;
    bool is_yellow_cards_Valid() const;

    double getYellowRedCards() const;
    void setYellowRedCards(const double &yellow_red_cards);
    bool is_yellow_red_cards_Set() const;
    bool is_yellow_red_cards_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_assists;
    bool m_assists_isSet;
    bool m_assists_isValid;

    double m_blocked_shots;
    bool m_blocked_shots_isSet;
    bool m_blocked_shots_isValid;

    double m_corners_won;
    bool m_corners_won_isSet;
    bool m_corners_won_isValid;

    double m_crosses;
    bool m_crosses_isSet;
    bool m_crosses_isValid;

    double m_defender_clean_sheets;
    bool m_defender_clean_sheets_isSet;
    bool m_defender_clean_sheets_isValid;

    double m_fantasy_points;
    bool m_fantasy_points_isSet;
    bool m_fantasy_points_isValid;

    double m_fantasy_points_draft_kings;
    bool m_fantasy_points_draft_kings_isSet;
    bool m_fantasy_points_draft_kings_isValid;

    double m_fantasy_points_fan_duel;
    bool m_fantasy_points_fan_duel_isSet;
    bool m_fantasy_points_fan_duel_isValid;

    double m_fantasy_points_mondogoal;
    bool m_fantasy_points_mondogoal_isSet;
    bool m_fantasy_points_mondogoal_isValid;

    double m_fantasy_points_yahoo;
    bool m_fantasy_points_yahoo_isSet;
    bool m_fantasy_points_yahoo_isValid;

    double m_fouled;
    bool m_fouled_isSet;
    bool m_fouled_isValid;

    double m_fouls;
    bool m_fouls_isSet;
    bool m_fouls_isValid;

    qint32 m_games;
    bool m_games_isSet;
    bool m_games_isValid;

    qint32 m_global_team_id;
    bool m_global_team_id_isSet;
    bool m_global_team_id_isValid;

    double m_goalkeeper_clean_sheets;
    bool m_goalkeeper_clean_sheets_isSet;
    bool m_goalkeeper_clean_sheets_isValid;

    double m_goalkeeper_goals_against;
    bool m_goalkeeper_goals_against_isSet;
    bool m_goalkeeper_goals_against_isValid;

    double m_goalkeeper_saves;
    bool m_goalkeeper_saves_isSet;
    bool m_goalkeeper_saves_isValid;

    double m_goalkeeper_single_goal_against;
    bool m_goalkeeper_single_goal_against_isSet;
    bool m_goalkeeper_single_goal_against_isValid;

    double m_goalkeeper_wins;
    bool m_goalkeeper_wins_isSet;
    bool m_goalkeeper_wins_isValid;

    double m_goals;
    bool m_goals_isSet;
    bool m_goals_isValid;

    double m_interceptions;
    bool m_interceptions_isSet;
    bool m_interceptions_isValid;

    double m_last_man_tackle;
    bool m_last_man_tackle_isSet;
    bool m_last_man_tackle_isValid;

    double m_minutes;
    bool m_minutes_isSet;
    bool m_minutes_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_offsides;
    bool m_offsides_isSet;
    bool m_offsides_isValid;

    double m_opponent_score;
    bool m_opponent_score_isSet;
    bool m_opponent_score_isValid;

    double m_own_goals;
    bool m_own_goals_isSet;
    bool m_own_goals_isValid;

    double m_passes;
    bool m_passes_isSet;
    bool m_passes_isValid;

    double m_passes_completed;
    bool m_passes_completed_isSet;
    bool m_passes_completed_isValid;

    double m_penalties_conceded;
    bool m_penalties_conceded_isSet;
    bool m_penalties_conceded_isValid;

    double m_penalties_won;
    bool m_penalties_won_isSet;
    bool m_penalties_won_isValid;

    double m_penalty_kick_goals;
    bool m_penalty_kick_goals_isSet;
    bool m_penalty_kick_goals_isValid;

    double m_penalty_kick_misses;
    bool m_penalty_kick_misses_isSet;
    bool m_penalty_kick_misses_isValid;

    double m_penalty_kick_saves;
    bool m_penalty_kick_saves_isSet;
    bool m_penalty_kick_saves_isValid;

    double m_possession;
    bool m_possession_isSet;
    bool m_possession_isValid;

    double m_red_cards;
    bool m_red_cards_isSet;
    bool m_red_cards_isValid;

    qint32 m_round_id;
    bool m_round_id_isSet;
    bool m_round_id_isValid;

    double m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    qint32 m_season_type;
    bool m_season_type_isSet;
    bool m_season_type_isValid;

    double m_shots;
    bool m_shots_isSet;
    bool m_shots_isValid;

    double m_shots_on_goal;
    bool m_shots_on_goal_isSet;
    bool m_shots_on_goal_isValid;

    qint32 m_stat_id;
    bool m_stat_id_isSet;
    bool m_stat_id_isValid;

    double m_tackles;
    bool m_tackles_isSet;
    bool m_tackles_isValid;

    double m_tackles_won;
    bool m_tackles_won_isSet;
    bool m_tackles_won_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    double m_touches;
    bool m_touches_isSet;
    bool m_touches_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QString m_updated_utc;
    bool m_updated_utc_isSet;
    bool m_updated_utc_isValid;

    double m_yellow_cards;
    bool m_yellow_cards_isSet;
    bool m_yellow_cards_isValid;

    double m_yellow_red_cards;
    bool m_yellow_red_cards_isSet;
    bool m_yellow_red_cards_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITeamSeason)

#endif // OAITeamSeason_H
