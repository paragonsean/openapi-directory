/**
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRound::OAIRound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRound::OAIRound() {
    this->initializeModel();
}

OAIRound::~OAIRound() {}

void OAIRound::initializeModel() {

    m_current_round_isSet = false;
    m_current_round_isValid = false;

    m_current_week_isSet = false;
    m_current_week_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_seasons_isSet = false;
    m_player_seasons_isValid = false;

    m_round_id_isSet = false;
    m_round_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_id_isSet = false;
    m_season_id_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_standings_isSet = false;
    m_standings_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_team_seasons_isSet = false;
    m_team_seasons_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRound::fromJsonObject(QJsonObject json) {

    m_current_round_isValid = ::OpenAPI::fromJsonValue(m_current_round, json[QString("CurrentRound")]);
    m_current_round_isSet = !json[QString("CurrentRound")].isNull() && m_current_round_isValid;

    m_current_week_isValid = ::OpenAPI::fromJsonValue(m_current_week, json[QString("CurrentWeek")]);
    m_current_week_isSet = !json[QString("CurrentWeek")].isNull() && m_current_week_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_player_seasons_isValid = ::OpenAPI::fromJsonValue(m_player_seasons, json[QString("PlayerSeasons")]);
    m_player_seasons_isSet = !json[QString("PlayerSeasons")].isNull() && m_player_seasons_isValid;

    m_round_id_isValid = ::OpenAPI::fromJsonValue(m_round_id, json[QString("RoundId")]);
    m_round_id_isSet = !json[QString("RoundId")].isNull() && m_round_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_id_isValid = ::OpenAPI::fromJsonValue(m_season_id, json[QString("SeasonId")]);
    m_season_id_isSet = !json[QString("SeasonId")].isNull() && m_season_id_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_standings_isValid = ::OpenAPI::fromJsonValue(m_standings, json[QString("Standings")]);
    m_standings_isSet = !json[QString("Standings")].isNull() && m_standings_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_team_seasons_isValid = ::OpenAPI::fromJsonValue(m_team_seasons, json[QString("TeamSeasons")]);
    m_team_seasons_isSet = !json[QString("TeamSeasons")].isNull() && m_team_seasons_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIRound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRound::asJsonObject() const {
    QJsonObject obj;
    if (m_current_round_isSet) {
        obj.insert(QString("CurrentRound"), ::OpenAPI::toJsonValue(m_current_round));
    }
    if (m_current_week_isSet) {
        obj.insert(QString("CurrentWeek"), ::OpenAPI::toJsonValue(m_current_week));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_games.size() > 0) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_seasons.size() > 0) {
        obj.insert(QString("PlayerSeasons"), ::OpenAPI::toJsonValue(m_player_seasons));
    }
    if (m_round_id_isSet) {
        obj.insert(QString("RoundId"), ::OpenAPI::toJsonValue(m_round_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_id_isSet) {
        obj.insert(QString("SeasonId"), ::OpenAPI::toJsonValue(m_season_id));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_standings.size() > 0) {
        obj.insert(QString("Standings"), ::OpenAPI::toJsonValue(m_standings));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_team_seasons.size() > 0) {
        obj.insert(QString("TeamSeasons"), ::OpenAPI::toJsonValue(m_team_seasons));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIRound::isCurrentRound() const {
    return m_current_round;
}
void OAIRound::setCurrentRound(const bool &current_round) {
    m_current_round = current_round;
    m_current_round_isSet = true;
}

bool OAIRound::is_current_round_Set() const{
    return m_current_round_isSet;
}

bool OAIRound::is_current_round_Valid() const{
    return m_current_round_isValid;
}

qint32 OAIRound::getCurrentWeek() const {
    return m_current_week;
}
void OAIRound::setCurrentWeek(const qint32 &current_week) {
    m_current_week = current_week;
    m_current_week_isSet = true;
}

bool OAIRound::is_current_week_Set() const{
    return m_current_week_isSet;
}

bool OAIRound::is_current_week_Valid() const{
    return m_current_week_isValid;
}

QString OAIRound::getEndDate() const {
    return m_end_date;
}
void OAIRound::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIRound::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIRound::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIGame> OAIRound::getGames() const {
    return m_games;
}
void OAIRound::setGames(const QList<OAIGame> &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAIRound::is_games_Set() const{
    return m_games_isSet;
}

bool OAIRound::is_games_Valid() const{
    return m_games_isValid;
}

QString OAIRound::getName() const {
    return m_name;
}
void OAIRound::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRound::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRound::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPlayerSeason> OAIRound::getPlayerSeasons() const {
    return m_player_seasons;
}
void OAIRound::setPlayerSeasons(const QList<OAIPlayerSeason> &player_seasons) {
    m_player_seasons = player_seasons;
    m_player_seasons_isSet = true;
}

bool OAIRound::is_player_seasons_Set() const{
    return m_player_seasons_isSet;
}

bool OAIRound::is_player_seasons_Valid() const{
    return m_player_seasons_isValid;
}

qint32 OAIRound::getRoundId() const {
    return m_round_id;
}
void OAIRound::setRoundId(const qint32 &round_id) {
    m_round_id = round_id;
    m_round_id_isSet = true;
}

bool OAIRound::is_round_id_Set() const{
    return m_round_id_isSet;
}

bool OAIRound::is_round_id_Valid() const{
    return m_round_id_isValid;
}

qint32 OAIRound::getSeason() const {
    return m_season;
}
void OAIRound::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIRound::is_season_Set() const{
    return m_season_isSet;
}

bool OAIRound::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIRound::getSeasonId() const {
    return m_season_id;
}
void OAIRound::setSeasonId(const qint32 &season_id) {
    m_season_id = season_id;
    m_season_id_isSet = true;
}

bool OAIRound::is_season_id_Set() const{
    return m_season_id_isSet;
}

bool OAIRound::is_season_id_Valid() const{
    return m_season_id_isValid;
}

qint32 OAIRound::getSeasonType() const {
    return m_season_type;
}
void OAIRound::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIRound::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIRound::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QList<OAIStanding> OAIRound::getStandings() const {
    return m_standings;
}
void OAIRound::setStandings(const QList<OAIStanding> &standings) {
    m_standings = standings;
    m_standings_isSet = true;
}

bool OAIRound::is_standings_Set() const{
    return m_standings_isSet;
}

bool OAIRound::is_standings_Valid() const{
    return m_standings_isValid;
}

QString OAIRound::getStartDate() const {
    return m_start_date;
}
void OAIRound::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIRound::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIRound::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QList<OAITeamSeason> OAIRound::getTeamSeasons() const {
    return m_team_seasons;
}
void OAIRound::setTeamSeasons(const QList<OAITeamSeason> &team_seasons) {
    m_team_seasons = team_seasons;
    m_team_seasons_isSet = true;
}

bool OAIRound::is_team_seasons_Set() const{
    return m_team_seasons_isSet;
}

bool OAIRound::is_team_seasons_Valid() const{
    return m_team_seasons_isValid;
}

QString OAIRound::getType() const {
    return m_type;
}
void OAIRound::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRound::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRound::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_round_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_seasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_seasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRound::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
