/**
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGame::OAIGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGame::OAIGame() {
    this->initializeModel();
}

OAIGame::~OAIGame() {}

void OAIGame::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_away_team_country_code_isSet = false;
    m_away_team_country_code_isValid = false;

    m_away_team_formation_isSet = false;
    m_away_team_formation_isValid = false;

    m_away_team_id_isSet = false;
    m_away_team_id_isValid = false;

    m_away_team_key_isSet = false;
    m_away_team_key_isValid = false;

    m_away_team_money_line_isSet = false;
    m_away_team_money_line_isValid = false;

    m_away_team_name_isSet = false;
    m_away_team_name_isValid = false;

    m_away_team_point_spread_payout_isSet = false;
    m_away_team_point_spread_payout_isValid = false;

    m_away_team_score_isSet = false;
    m_away_team_score_isValid = false;

    m_away_team_score_extra_time_isSet = false;
    m_away_team_score_extra_time_isValid = false;

    m_away_team_score_penalty_isSet = false;
    m_away_team_score_penalty_isValid = false;

    m_away_team_score_period1_isSet = false;
    m_away_team_score_period1_isValid = false;

    m_away_team_score_period2_isSet = false;
    m_away_team_score_period2_isValid = false;

    m_clock_isSet = false;
    m_clock_isValid = false;

    m_clock_display_isSet = false;
    m_clock_display_isValid = false;

    m_clock_extra_isSet = false;
    m_clock_extra_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_draw_money_line_isSet = false;
    m_draw_money_line_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_global_away_team_id_isSet = false;
    m_global_away_team_id_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_home_team_id_isSet = false;
    m_global_home_team_id_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_home_team_country_code_isSet = false;
    m_home_team_country_code_isValid = false;

    m_home_team_formation_isSet = false;
    m_home_team_formation_isValid = false;

    m_home_team_id_isSet = false;
    m_home_team_id_isValid = false;

    m_home_team_key_isSet = false;
    m_home_team_key_isValid = false;

    m_home_team_money_line_isSet = false;
    m_home_team_money_line_isValid = false;

    m_home_team_name_isSet = false;
    m_home_team_name_isValid = false;

    m_home_team_point_spread_payout_isSet = false;
    m_home_team_point_spread_payout_isValid = false;

    m_home_team_score_isSet = false;
    m_home_team_score_isValid = false;

    m_home_team_score_extra_time_isSet = false;
    m_home_team_score_extra_time_isValid = false;

    m_home_team_score_penalty_isSet = false;
    m_home_team_score_penalty_isValid = false;

    m_home_team_score_period1_isSet = false;
    m_home_team_score_period1_isValid = false;

    m_home_team_score_period2_isSet = false;
    m_home_team_score_period2_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_over_payout_isSet = false;
    m_over_payout_isValid = false;

    m_over_under_isSet = false;
    m_over_under_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_playoff_aggregate_score_isSet = false;
    m_playoff_aggregate_score_isValid = false;

    m_point_spread_isSet = false;
    m_point_spread_isValid = false;

    m_round_id_isSet = false;
    m_round_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_under_payout_isSet = false;
    m_under_payout_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_updated_utc_isSet = false;
    m_updated_utc_isValid = false;

    m_venue_id_isSet = false;
    m_venue_id_isValid = false;

    m_venue_type_isSet = false;
    m_venue_type_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_winner_isSet = false;
    m_winner_isValid = false;
}

void OAIGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGame::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("Attendance")]);
    m_attendance_isSet = !json[QString("Attendance")].isNull() && m_attendance_isValid;

    m_away_team_country_code_isValid = ::OpenAPI::fromJsonValue(m_away_team_country_code, json[QString("AwayTeamCountryCode")]);
    m_away_team_country_code_isSet = !json[QString("AwayTeamCountryCode")].isNull() && m_away_team_country_code_isValid;

    m_away_team_formation_isValid = ::OpenAPI::fromJsonValue(m_away_team_formation, json[QString("AwayTeamFormation")]);
    m_away_team_formation_isSet = !json[QString("AwayTeamFormation")].isNull() && m_away_team_formation_isValid;

    m_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_away_team_id, json[QString("AwayTeamId")]);
    m_away_team_id_isSet = !json[QString("AwayTeamId")].isNull() && m_away_team_id_isValid;

    m_away_team_key_isValid = ::OpenAPI::fromJsonValue(m_away_team_key, json[QString("AwayTeamKey")]);
    m_away_team_key_isSet = !json[QString("AwayTeamKey")].isNull() && m_away_team_key_isValid;

    m_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_away_team_money_line, json[QString("AwayTeamMoneyLine")]);
    m_away_team_money_line_isSet = !json[QString("AwayTeamMoneyLine")].isNull() && m_away_team_money_line_isValid;

    m_away_team_name_isValid = ::OpenAPI::fromJsonValue(m_away_team_name, json[QString("AwayTeamName")]);
    m_away_team_name_isSet = !json[QString("AwayTeamName")].isNull() && m_away_team_name_isValid;

    m_away_team_point_spread_payout_isValid = ::OpenAPI::fromJsonValue(m_away_team_point_spread_payout, json[QString("AwayTeamPointSpreadPayout")]);
    m_away_team_point_spread_payout_isSet = !json[QString("AwayTeamPointSpreadPayout")].isNull() && m_away_team_point_spread_payout_isValid;

    m_away_team_score_isValid = ::OpenAPI::fromJsonValue(m_away_team_score, json[QString("AwayTeamScore")]);
    m_away_team_score_isSet = !json[QString("AwayTeamScore")].isNull() && m_away_team_score_isValid;

    m_away_team_score_extra_time_isValid = ::OpenAPI::fromJsonValue(m_away_team_score_extra_time, json[QString("AwayTeamScoreExtraTime")]);
    m_away_team_score_extra_time_isSet = !json[QString("AwayTeamScoreExtraTime")].isNull() && m_away_team_score_extra_time_isValid;

    m_away_team_score_penalty_isValid = ::OpenAPI::fromJsonValue(m_away_team_score_penalty, json[QString("AwayTeamScorePenalty")]);
    m_away_team_score_penalty_isSet = !json[QString("AwayTeamScorePenalty")].isNull() && m_away_team_score_penalty_isValid;

    m_away_team_score_period1_isValid = ::OpenAPI::fromJsonValue(m_away_team_score_period1, json[QString("AwayTeamScorePeriod1")]);
    m_away_team_score_period1_isSet = !json[QString("AwayTeamScorePeriod1")].isNull() && m_away_team_score_period1_isValid;

    m_away_team_score_period2_isValid = ::OpenAPI::fromJsonValue(m_away_team_score_period2, json[QString("AwayTeamScorePeriod2")]);
    m_away_team_score_period2_isSet = !json[QString("AwayTeamScorePeriod2")].isNull() && m_away_team_score_period2_isValid;

    m_clock_isValid = ::OpenAPI::fromJsonValue(m_clock, json[QString("Clock")]);
    m_clock_isSet = !json[QString("Clock")].isNull() && m_clock_isValid;

    m_clock_display_isValid = ::OpenAPI::fromJsonValue(m_clock_display, json[QString("ClockDisplay")]);
    m_clock_display_isSet = !json[QString("ClockDisplay")].isNull() && m_clock_display_isValid;

    m_clock_extra_isValid = ::OpenAPI::fromJsonValue(m_clock_extra, json[QString("ClockExtra")]);
    m_clock_extra_isSet = !json[QString("ClockExtra")].isNull() && m_clock_extra_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_draw_money_line_isValid = ::OpenAPI::fromJsonValue(m_draw_money_line, json[QString("DrawMoneyLine")]);
    m_draw_money_line_isSet = !json[QString("DrawMoneyLine")].isNull() && m_draw_money_line_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameId")]);
    m_game_id_isSet = !json[QString("GameId")].isNull() && m_game_id_isValid;

    m_global_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_away_team_id, json[QString("GlobalAwayTeamId")]);
    m_global_away_team_id_isSet = !json[QString("GlobalAwayTeamId")].isNull() && m_global_away_team_id_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameId")]);
    m_global_game_id_isSet = !json[QString("GlobalGameId")].isNull() && m_global_game_id_isValid;

    m_global_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_home_team_id, json[QString("GlobalHomeTeamId")]);
    m_global_home_team_id_isSet = !json[QString("GlobalHomeTeamId")].isNull() && m_global_home_team_id_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_home_team_country_code_isValid = ::OpenAPI::fromJsonValue(m_home_team_country_code, json[QString("HomeTeamCountryCode")]);
    m_home_team_country_code_isSet = !json[QString("HomeTeamCountryCode")].isNull() && m_home_team_country_code_isValid;

    m_home_team_formation_isValid = ::OpenAPI::fromJsonValue(m_home_team_formation, json[QString("HomeTeamFormation")]);
    m_home_team_formation_isSet = !json[QString("HomeTeamFormation")].isNull() && m_home_team_formation_isValid;

    m_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_home_team_id, json[QString("HomeTeamId")]);
    m_home_team_id_isSet = !json[QString("HomeTeamId")].isNull() && m_home_team_id_isValid;

    m_home_team_key_isValid = ::OpenAPI::fromJsonValue(m_home_team_key, json[QString("HomeTeamKey")]);
    m_home_team_key_isSet = !json[QString("HomeTeamKey")].isNull() && m_home_team_key_isValid;

    m_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_home_team_money_line, json[QString("HomeTeamMoneyLine")]);
    m_home_team_money_line_isSet = !json[QString("HomeTeamMoneyLine")].isNull() && m_home_team_money_line_isValid;

    m_home_team_name_isValid = ::OpenAPI::fromJsonValue(m_home_team_name, json[QString("HomeTeamName")]);
    m_home_team_name_isSet = !json[QString("HomeTeamName")].isNull() && m_home_team_name_isValid;

    m_home_team_point_spread_payout_isValid = ::OpenAPI::fromJsonValue(m_home_team_point_spread_payout, json[QString("HomeTeamPointSpreadPayout")]);
    m_home_team_point_spread_payout_isSet = !json[QString("HomeTeamPointSpreadPayout")].isNull() && m_home_team_point_spread_payout_isValid;

    m_home_team_score_isValid = ::OpenAPI::fromJsonValue(m_home_team_score, json[QString("HomeTeamScore")]);
    m_home_team_score_isSet = !json[QString("HomeTeamScore")].isNull() && m_home_team_score_isValid;

    m_home_team_score_extra_time_isValid = ::OpenAPI::fromJsonValue(m_home_team_score_extra_time, json[QString("HomeTeamScoreExtraTime")]);
    m_home_team_score_extra_time_isSet = !json[QString("HomeTeamScoreExtraTime")].isNull() && m_home_team_score_extra_time_isValid;

    m_home_team_score_penalty_isValid = ::OpenAPI::fromJsonValue(m_home_team_score_penalty, json[QString("HomeTeamScorePenalty")]);
    m_home_team_score_penalty_isSet = !json[QString("HomeTeamScorePenalty")].isNull() && m_home_team_score_penalty_isValid;

    m_home_team_score_period1_isValid = ::OpenAPI::fromJsonValue(m_home_team_score_period1, json[QString("HomeTeamScorePeriod1")]);
    m_home_team_score_period1_isSet = !json[QString("HomeTeamScorePeriod1")].isNull() && m_home_team_score_period1_isValid;

    m_home_team_score_period2_isValid = ::OpenAPI::fromJsonValue(m_home_team_score_period2, json[QString("HomeTeamScorePeriod2")]);
    m_home_team_score_period2_isSet = !json[QString("HomeTeamScorePeriod2")].isNull() && m_home_team_score_period2_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("IsClosed")]);
    m_is_closed_isSet = !json[QString("IsClosed")].isNull() && m_is_closed_isValid;

    m_over_payout_isValid = ::OpenAPI::fromJsonValue(m_over_payout, json[QString("OverPayout")]);
    m_over_payout_isSet = !json[QString("OverPayout")].isNull() && m_over_payout_isValid;

    m_over_under_isValid = ::OpenAPI::fromJsonValue(m_over_under, json[QString("OverUnder")]);
    m_over_under_isSet = !json[QString("OverUnder")].isNull() && m_over_under_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_playoff_aggregate_score_isValid = ::OpenAPI::fromJsonValue(m_playoff_aggregate_score, json[QString("PlayoffAggregateScore")]);
    m_playoff_aggregate_score_isSet = !json[QString("PlayoffAggregateScore")].isNull() && m_playoff_aggregate_score_isValid;

    m_point_spread_isValid = ::OpenAPI::fromJsonValue(m_point_spread, json[QString("PointSpread")]);
    m_point_spread_isSet = !json[QString("PointSpread")].isNull() && m_point_spread_isValid;

    m_round_id_isValid = ::OpenAPI::fromJsonValue(m_round_id, json[QString("RoundId")]);
    m_round_id_isSet = !json[QString("RoundId")].isNull() && m_round_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_under_payout_isValid = ::OpenAPI::fromJsonValue(m_under_payout, json[QString("UnderPayout")]);
    m_under_payout_isSet = !json[QString("UnderPayout")].isNull() && m_under_payout_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_updated_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_utc, json[QString("UpdatedUtc")]);
    m_updated_utc_isSet = !json[QString("UpdatedUtc")].isNull() && m_updated_utc_isValid;

    m_venue_id_isValid = ::OpenAPI::fromJsonValue(m_venue_id, json[QString("VenueId")]);
    m_venue_id_isSet = !json[QString("VenueId")].isNull() && m_venue_id_isValid;

    m_venue_type_isValid = ::OpenAPI::fromJsonValue(m_venue_type, json[QString("VenueType")]);
    m_venue_type_isSet = !json[QString("VenueType")].isNull() && m_venue_type_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;

    m_winner_isValid = ::OpenAPI::fromJsonValue(m_winner, json[QString("Winner")]);
    m_winner_isSet = !json[QString("Winner")].isNull() && m_winner_isValid;
}

QString OAIGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGame::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance_isSet) {
        obj.insert(QString("Attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_away_team_country_code_isSet) {
        obj.insert(QString("AwayTeamCountryCode"), ::OpenAPI::toJsonValue(m_away_team_country_code));
    }
    if (m_away_team_formation_isSet) {
        obj.insert(QString("AwayTeamFormation"), ::OpenAPI::toJsonValue(m_away_team_formation));
    }
    if (m_away_team_id_isSet) {
        obj.insert(QString("AwayTeamId"), ::OpenAPI::toJsonValue(m_away_team_id));
    }
    if (m_away_team_key_isSet) {
        obj.insert(QString("AwayTeamKey"), ::OpenAPI::toJsonValue(m_away_team_key));
    }
    if (m_away_team_money_line_isSet) {
        obj.insert(QString("AwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_away_team_money_line));
    }
    if (m_away_team_name_isSet) {
        obj.insert(QString("AwayTeamName"), ::OpenAPI::toJsonValue(m_away_team_name));
    }
    if (m_away_team_point_spread_payout_isSet) {
        obj.insert(QString("AwayTeamPointSpreadPayout"), ::OpenAPI::toJsonValue(m_away_team_point_spread_payout));
    }
    if (m_away_team_score_isSet) {
        obj.insert(QString("AwayTeamScore"), ::OpenAPI::toJsonValue(m_away_team_score));
    }
    if (m_away_team_score_extra_time_isSet) {
        obj.insert(QString("AwayTeamScoreExtraTime"), ::OpenAPI::toJsonValue(m_away_team_score_extra_time));
    }
    if (m_away_team_score_penalty_isSet) {
        obj.insert(QString("AwayTeamScorePenalty"), ::OpenAPI::toJsonValue(m_away_team_score_penalty));
    }
    if (m_away_team_score_period1_isSet) {
        obj.insert(QString("AwayTeamScorePeriod1"), ::OpenAPI::toJsonValue(m_away_team_score_period1));
    }
    if (m_away_team_score_period2_isSet) {
        obj.insert(QString("AwayTeamScorePeriod2"), ::OpenAPI::toJsonValue(m_away_team_score_period2));
    }
    if (m_clock_isSet) {
        obj.insert(QString("Clock"), ::OpenAPI::toJsonValue(m_clock));
    }
    if (m_clock_display_isSet) {
        obj.insert(QString("ClockDisplay"), ::OpenAPI::toJsonValue(m_clock_display));
    }
    if (m_clock_extra_isSet) {
        obj.insert(QString("ClockExtra"), ::OpenAPI::toJsonValue(m_clock_extra));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_draw_money_line_isSet) {
        obj.insert(QString("DrawMoneyLine"), ::OpenAPI::toJsonValue(m_draw_money_line));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_global_away_team_id_isSet) {
        obj.insert(QString("GlobalAwayTeamId"), ::OpenAPI::toJsonValue(m_global_away_team_id));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameId"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_home_team_id_isSet) {
        obj.insert(QString("GlobalHomeTeamId"), ::OpenAPI::toJsonValue(m_global_home_team_id));
    }
    if (m_group_isSet) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_home_team_country_code_isSet) {
        obj.insert(QString("HomeTeamCountryCode"), ::OpenAPI::toJsonValue(m_home_team_country_code));
    }
    if (m_home_team_formation_isSet) {
        obj.insert(QString("HomeTeamFormation"), ::OpenAPI::toJsonValue(m_home_team_formation));
    }
    if (m_home_team_id_isSet) {
        obj.insert(QString("HomeTeamId"), ::OpenAPI::toJsonValue(m_home_team_id));
    }
    if (m_home_team_key_isSet) {
        obj.insert(QString("HomeTeamKey"), ::OpenAPI::toJsonValue(m_home_team_key));
    }
    if (m_home_team_money_line_isSet) {
        obj.insert(QString("HomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_home_team_money_line));
    }
    if (m_home_team_name_isSet) {
        obj.insert(QString("HomeTeamName"), ::OpenAPI::toJsonValue(m_home_team_name));
    }
    if (m_home_team_point_spread_payout_isSet) {
        obj.insert(QString("HomeTeamPointSpreadPayout"), ::OpenAPI::toJsonValue(m_home_team_point_spread_payout));
    }
    if (m_home_team_score_isSet) {
        obj.insert(QString("HomeTeamScore"), ::OpenAPI::toJsonValue(m_home_team_score));
    }
    if (m_home_team_score_extra_time_isSet) {
        obj.insert(QString("HomeTeamScoreExtraTime"), ::OpenAPI::toJsonValue(m_home_team_score_extra_time));
    }
    if (m_home_team_score_penalty_isSet) {
        obj.insert(QString("HomeTeamScorePenalty"), ::OpenAPI::toJsonValue(m_home_team_score_penalty));
    }
    if (m_home_team_score_period1_isSet) {
        obj.insert(QString("HomeTeamScorePeriod1"), ::OpenAPI::toJsonValue(m_home_team_score_period1));
    }
    if (m_home_team_score_period2_isSet) {
        obj.insert(QString("HomeTeamScorePeriod2"), ::OpenAPI::toJsonValue(m_home_team_score_period2));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("IsClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_over_payout_isSet) {
        obj.insert(QString("OverPayout"), ::OpenAPI::toJsonValue(m_over_payout));
    }
    if (m_over_under_isSet) {
        obj.insert(QString("OverUnder"), ::OpenAPI::toJsonValue(m_over_under));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_playoff_aggregate_score.isSet()) {
        obj.insert(QString("PlayoffAggregateScore"), ::OpenAPI::toJsonValue(m_playoff_aggregate_score));
    }
    if (m_point_spread_isSet) {
        obj.insert(QString("PointSpread"), ::OpenAPI::toJsonValue(m_point_spread));
    }
    if (m_round_id_isSet) {
        obj.insert(QString("RoundId"), ::OpenAPI::toJsonValue(m_round_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_under_payout_isSet) {
        obj.insert(QString("UnderPayout"), ::OpenAPI::toJsonValue(m_under_payout));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_updated_utc_isSet) {
        obj.insert(QString("UpdatedUtc"), ::OpenAPI::toJsonValue(m_updated_utc));
    }
    if (m_venue_id_isSet) {
        obj.insert(QString("VenueId"), ::OpenAPI::toJsonValue(m_venue_id));
    }
    if (m_venue_type_isSet) {
        obj.insert(QString("VenueType"), ::OpenAPI::toJsonValue(m_venue_type));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_winner_isSet) {
        obj.insert(QString("Winner"), ::OpenAPI::toJsonValue(m_winner));
    }
    return obj;
}

qint32 OAIGame::getAttendance() const {
    return m_attendance;
}
void OAIGame::setAttendance(const qint32 &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAIGame::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAIGame::is_attendance_Valid() const{
    return m_attendance_isValid;
}

QString OAIGame::getAwayTeamCountryCode() const {
    return m_away_team_country_code;
}
void OAIGame::setAwayTeamCountryCode(const QString &away_team_country_code) {
    m_away_team_country_code = away_team_country_code;
    m_away_team_country_code_isSet = true;
}

bool OAIGame::is_away_team_country_code_Set() const{
    return m_away_team_country_code_isSet;
}

bool OAIGame::is_away_team_country_code_Valid() const{
    return m_away_team_country_code_isValid;
}

QString OAIGame::getAwayTeamFormation() const {
    return m_away_team_formation;
}
void OAIGame::setAwayTeamFormation(const QString &away_team_formation) {
    m_away_team_formation = away_team_formation;
    m_away_team_formation_isSet = true;
}

bool OAIGame::is_away_team_formation_Set() const{
    return m_away_team_formation_isSet;
}

bool OAIGame::is_away_team_formation_Valid() const{
    return m_away_team_formation_isValid;
}

qint32 OAIGame::getAwayTeamId() const {
    return m_away_team_id;
}
void OAIGame::setAwayTeamId(const qint32 &away_team_id) {
    m_away_team_id = away_team_id;
    m_away_team_id_isSet = true;
}

bool OAIGame::is_away_team_id_Set() const{
    return m_away_team_id_isSet;
}

bool OAIGame::is_away_team_id_Valid() const{
    return m_away_team_id_isValid;
}

QString OAIGame::getAwayTeamKey() const {
    return m_away_team_key;
}
void OAIGame::setAwayTeamKey(const QString &away_team_key) {
    m_away_team_key = away_team_key;
    m_away_team_key_isSet = true;
}

bool OAIGame::is_away_team_key_Set() const{
    return m_away_team_key_isSet;
}

bool OAIGame::is_away_team_key_Valid() const{
    return m_away_team_key_isValid;
}

qint32 OAIGame::getAwayTeamMoneyLine() const {
    return m_away_team_money_line;
}
void OAIGame::setAwayTeamMoneyLine(const qint32 &away_team_money_line) {
    m_away_team_money_line = away_team_money_line;
    m_away_team_money_line_isSet = true;
}

bool OAIGame::is_away_team_money_line_Set() const{
    return m_away_team_money_line_isSet;
}

bool OAIGame::is_away_team_money_line_Valid() const{
    return m_away_team_money_line_isValid;
}

QString OAIGame::getAwayTeamName() const {
    return m_away_team_name;
}
void OAIGame::setAwayTeamName(const QString &away_team_name) {
    m_away_team_name = away_team_name;
    m_away_team_name_isSet = true;
}

bool OAIGame::is_away_team_name_Set() const{
    return m_away_team_name_isSet;
}

bool OAIGame::is_away_team_name_Valid() const{
    return m_away_team_name_isValid;
}

qint32 OAIGame::getAwayTeamPointSpreadPayout() const {
    return m_away_team_point_spread_payout;
}
void OAIGame::setAwayTeamPointSpreadPayout(const qint32 &away_team_point_spread_payout) {
    m_away_team_point_spread_payout = away_team_point_spread_payout;
    m_away_team_point_spread_payout_isSet = true;
}

bool OAIGame::is_away_team_point_spread_payout_Set() const{
    return m_away_team_point_spread_payout_isSet;
}

bool OAIGame::is_away_team_point_spread_payout_Valid() const{
    return m_away_team_point_spread_payout_isValid;
}

qint32 OAIGame::getAwayTeamScore() const {
    return m_away_team_score;
}
void OAIGame::setAwayTeamScore(const qint32 &away_team_score) {
    m_away_team_score = away_team_score;
    m_away_team_score_isSet = true;
}

bool OAIGame::is_away_team_score_Set() const{
    return m_away_team_score_isSet;
}

bool OAIGame::is_away_team_score_Valid() const{
    return m_away_team_score_isValid;
}

qint32 OAIGame::getAwayTeamScoreExtraTime() const {
    return m_away_team_score_extra_time;
}
void OAIGame::setAwayTeamScoreExtraTime(const qint32 &away_team_score_extra_time) {
    m_away_team_score_extra_time = away_team_score_extra_time;
    m_away_team_score_extra_time_isSet = true;
}

bool OAIGame::is_away_team_score_extra_time_Set() const{
    return m_away_team_score_extra_time_isSet;
}

bool OAIGame::is_away_team_score_extra_time_Valid() const{
    return m_away_team_score_extra_time_isValid;
}

qint32 OAIGame::getAwayTeamScorePenalty() const {
    return m_away_team_score_penalty;
}
void OAIGame::setAwayTeamScorePenalty(const qint32 &away_team_score_penalty) {
    m_away_team_score_penalty = away_team_score_penalty;
    m_away_team_score_penalty_isSet = true;
}

bool OAIGame::is_away_team_score_penalty_Set() const{
    return m_away_team_score_penalty_isSet;
}

bool OAIGame::is_away_team_score_penalty_Valid() const{
    return m_away_team_score_penalty_isValid;
}

qint32 OAIGame::getAwayTeamScorePeriod1() const {
    return m_away_team_score_period1;
}
void OAIGame::setAwayTeamScorePeriod1(const qint32 &away_team_score_period1) {
    m_away_team_score_period1 = away_team_score_period1;
    m_away_team_score_period1_isSet = true;
}

bool OAIGame::is_away_team_score_period1_Set() const{
    return m_away_team_score_period1_isSet;
}

bool OAIGame::is_away_team_score_period1_Valid() const{
    return m_away_team_score_period1_isValid;
}

qint32 OAIGame::getAwayTeamScorePeriod2() const {
    return m_away_team_score_period2;
}
void OAIGame::setAwayTeamScorePeriod2(const qint32 &away_team_score_period2) {
    m_away_team_score_period2 = away_team_score_period2;
    m_away_team_score_period2_isSet = true;
}

bool OAIGame::is_away_team_score_period2_Set() const{
    return m_away_team_score_period2_isSet;
}

bool OAIGame::is_away_team_score_period2_Valid() const{
    return m_away_team_score_period2_isValid;
}

qint32 OAIGame::getClock() const {
    return m_clock;
}
void OAIGame::setClock(const qint32 &clock) {
    m_clock = clock;
    m_clock_isSet = true;
}

bool OAIGame::is_clock_Set() const{
    return m_clock_isSet;
}

bool OAIGame::is_clock_Valid() const{
    return m_clock_isValid;
}

QString OAIGame::getClockDisplay() const {
    return m_clock_display;
}
void OAIGame::setClockDisplay(const QString &clock_display) {
    m_clock_display = clock_display;
    m_clock_display_isSet = true;
}

bool OAIGame::is_clock_display_Set() const{
    return m_clock_display_isSet;
}

bool OAIGame::is_clock_display_Valid() const{
    return m_clock_display_isValid;
}

qint32 OAIGame::getClockExtra() const {
    return m_clock_extra;
}
void OAIGame::setClockExtra(const qint32 &clock_extra) {
    m_clock_extra = clock_extra;
    m_clock_extra_isSet = true;
}

bool OAIGame::is_clock_extra_Set() const{
    return m_clock_extra_isSet;
}

bool OAIGame::is_clock_extra_Valid() const{
    return m_clock_extra_isValid;
}

QString OAIGame::getDateTime() const {
    return m_date_time;
}
void OAIGame::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIGame::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIGame::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIGame::getDay() const {
    return m_day;
}
void OAIGame::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIGame::is_day_Set() const{
    return m_day_isSet;
}

bool OAIGame::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIGame::getDrawMoneyLine() const {
    return m_draw_money_line;
}
void OAIGame::setDrawMoneyLine(const qint32 &draw_money_line) {
    m_draw_money_line = draw_money_line;
    m_draw_money_line_isSet = true;
}

bool OAIGame::is_draw_money_line_Set() const{
    return m_draw_money_line_isSet;
}

bool OAIGame::is_draw_money_line_Valid() const{
    return m_draw_money_line_isValid;
}

qint32 OAIGame::getGameId() const {
    return m_game_id;
}
void OAIGame::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIGame::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIGame::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIGame::getGlobalAwayTeamId() const {
    return m_global_away_team_id;
}
void OAIGame::setGlobalAwayTeamId(const qint32 &global_away_team_id) {
    m_global_away_team_id = global_away_team_id;
    m_global_away_team_id_isSet = true;
}

bool OAIGame::is_global_away_team_id_Set() const{
    return m_global_away_team_id_isSet;
}

bool OAIGame::is_global_away_team_id_Valid() const{
    return m_global_away_team_id_isValid;
}

qint32 OAIGame::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIGame::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIGame::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIGame::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIGame::getGlobalHomeTeamId() const {
    return m_global_home_team_id;
}
void OAIGame::setGlobalHomeTeamId(const qint32 &global_home_team_id) {
    m_global_home_team_id = global_home_team_id;
    m_global_home_team_id_isSet = true;
}

bool OAIGame::is_global_home_team_id_Set() const{
    return m_global_home_team_id_isSet;
}

bool OAIGame::is_global_home_team_id_Valid() const{
    return m_global_home_team_id_isValid;
}

QString OAIGame::getGroup() const {
    return m_group;
}
void OAIGame::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIGame::is_group_Set() const{
    return m_group_isSet;
}

bool OAIGame::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIGame::getHomeTeamCountryCode() const {
    return m_home_team_country_code;
}
void OAIGame::setHomeTeamCountryCode(const QString &home_team_country_code) {
    m_home_team_country_code = home_team_country_code;
    m_home_team_country_code_isSet = true;
}

bool OAIGame::is_home_team_country_code_Set() const{
    return m_home_team_country_code_isSet;
}

bool OAIGame::is_home_team_country_code_Valid() const{
    return m_home_team_country_code_isValid;
}

QString OAIGame::getHomeTeamFormation() const {
    return m_home_team_formation;
}
void OAIGame::setHomeTeamFormation(const QString &home_team_formation) {
    m_home_team_formation = home_team_formation;
    m_home_team_formation_isSet = true;
}

bool OAIGame::is_home_team_formation_Set() const{
    return m_home_team_formation_isSet;
}

bool OAIGame::is_home_team_formation_Valid() const{
    return m_home_team_formation_isValid;
}

qint32 OAIGame::getHomeTeamId() const {
    return m_home_team_id;
}
void OAIGame::setHomeTeamId(const qint32 &home_team_id) {
    m_home_team_id = home_team_id;
    m_home_team_id_isSet = true;
}

bool OAIGame::is_home_team_id_Set() const{
    return m_home_team_id_isSet;
}

bool OAIGame::is_home_team_id_Valid() const{
    return m_home_team_id_isValid;
}

QString OAIGame::getHomeTeamKey() const {
    return m_home_team_key;
}
void OAIGame::setHomeTeamKey(const QString &home_team_key) {
    m_home_team_key = home_team_key;
    m_home_team_key_isSet = true;
}

bool OAIGame::is_home_team_key_Set() const{
    return m_home_team_key_isSet;
}

bool OAIGame::is_home_team_key_Valid() const{
    return m_home_team_key_isValid;
}

qint32 OAIGame::getHomeTeamMoneyLine() const {
    return m_home_team_money_line;
}
void OAIGame::setHomeTeamMoneyLine(const qint32 &home_team_money_line) {
    m_home_team_money_line = home_team_money_line;
    m_home_team_money_line_isSet = true;
}

bool OAIGame::is_home_team_money_line_Set() const{
    return m_home_team_money_line_isSet;
}

bool OAIGame::is_home_team_money_line_Valid() const{
    return m_home_team_money_line_isValid;
}

QString OAIGame::getHomeTeamName() const {
    return m_home_team_name;
}
void OAIGame::setHomeTeamName(const QString &home_team_name) {
    m_home_team_name = home_team_name;
    m_home_team_name_isSet = true;
}

bool OAIGame::is_home_team_name_Set() const{
    return m_home_team_name_isSet;
}

bool OAIGame::is_home_team_name_Valid() const{
    return m_home_team_name_isValid;
}

qint32 OAIGame::getHomeTeamPointSpreadPayout() const {
    return m_home_team_point_spread_payout;
}
void OAIGame::setHomeTeamPointSpreadPayout(const qint32 &home_team_point_spread_payout) {
    m_home_team_point_spread_payout = home_team_point_spread_payout;
    m_home_team_point_spread_payout_isSet = true;
}

bool OAIGame::is_home_team_point_spread_payout_Set() const{
    return m_home_team_point_spread_payout_isSet;
}

bool OAIGame::is_home_team_point_spread_payout_Valid() const{
    return m_home_team_point_spread_payout_isValid;
}

qint32 OAIGame::getHomeTeamScore() const {
    return m_home_team_score;
}
void OAIGame::setHomeTeamScore(const qint32 &home_team_score) {
    m_home_team_score = home_team_score;
    m_home_team_score_isSet = true;
}

bool OAIGame::is_home_team_score_Set() const{
    return m_home_team_score_isSet;
}

bool OAIGame::is_home_team_score_Valid() const{
    return m_home_team_score_isValid;
}

qint32 OAIGame::getHomeTeamScoreExtraTime() const {
    return m_home_team_score_extra_time;
}
void OAIGame::setHomeTeamScoreExtraTime(const qint32 &home_team_score_extra_time) {
    m_home_team_score_extra_time = home_team_score_extra_time;
    m_home_team_score_extra_time_isSet = true;
}

bool OAIGame::is_home_team_score_extra_time_Set() const{
    return m_home_team_score_extra_time_isSet;
}

bool OAIGame::is_home_team_score_extra_time_Valid() const{
    return m_home_team_score_extra_time_isValid;
}

qint32 OAIGame::getHomeTeamScorePenalty() const {
    return m_home_team_score_penalty;
}
void OAIGame::setHomeTeamScorePenalty(const qint32 &home_team_score_penalty) {
    m_home_team_score_penalty = home_team_score_penalty;
    m_home_team_score_penalty_isSet = true;
}

bool OAIGame::is_home_team_score_penalty_Set() const{
    return m_home_team_score_penalty_isSet;
}

bool OAIGame::is_home_team_score_penalty_Valid() const{
    return m_home_team_score_penalty_isValid;
}

qint32 OAIGame::getHomeTeamScorePeriod1() const {
    return m_home_team_score_period1;
}
void OAIGame::setHomeTeamScorePeriod1(const qint32 &home_team_score_period1) {
    m_home_team_score_period1 = home_team_score_period1;
    m_home_team_score_period1_isSet = true;
}

bool OAIGame::is_home_team_score_period1_Set() const{
    return m_home_team_score_period1_isSet;
}

bool OAIGame::is_home_team_score_period1_Valid() const{
    return m_home_team_score_period1_isValid;
}

qint32 OAIGame::getHomeTeamScorePeriod2() const {
    return m_home_team_score_period2;
}
void OAIGame::setHomeTeamScorePeriod2(const qint32 &home_team_score_period2) {
    m_home_team_score_period2 = home_team_score_period2;
    m_home_team_score_period2_isSet = true;
}

bool OAIGame::is_home_team_score_period2_Set() const{
    return m_home_team_score_period2_isSet;
}

bool OAIGame::is_home_team_score_period2_Valid() const{
    return m_home_team_score_period2_isValid;
}

bool OAIGame::isIsClosed() const {
    return m_is_closed;
}
void OAIGame::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAIGame::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAIGame::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

qint32 OAIGame::getOverPayout() const {
    return m_over_payout;
}
void OAIGame::setOverPayout(const qint32 &over_payout) {
    m_over_payout = over_payout;
    m_over_payout_isSet = true;
}

bool OAIGame::is_over_payout_Set() const{
    return m_over_payout_isSet;
}

bool OAIGame::is_over_payout_Valid() const{
    return m_over_payout_isValid;
}

double OAIGame::getOverUnder() const {
    return m_over_under;
}
void OAIGame::setOverUnder(const double &over_under) {
    m_over_under = over_under;
    m_over_under_isSet = true;
}

bool OAIGame::is_over_under_Set() const{
    return m_over_under_isSet;
}

bool OAIGame::is_over_under_Valid() const{
    return m_over_under_isValid;
}

QString OAIGame::getPeriod() const {
    return m_period;
}
void OAIGame::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGame::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGame::is_period_Valid() const{
    return m_period_isValid;
}

OAIPlayoffAggregateScore OAIGame::getPlayoffAggregateScore() const {
    return m_playoff_aggregate_score;
}
void OAIGame::setPlayoffAggregateScore(const OAIPlayoffAggregateScore &playoff_aggregate_score) {
    m_playoff_aggregate_score = playoff_aggregate_score;
    m_playoff_aggregate_score_isSet = true;
}

bool OAIGame::is_playoff_aggregate_score_Set() const{
    return m_playoff_aggregate_score_isSet;
}

bool OAIGame::is_playoff_aggregate_score_Valid() const{
    return m_playoff_aggregate_score_isValid;
}

double OAIGame::getPointSpread() const {
    return m_point_spread;
}
void OAIGame::setPointSpread(const double &point_spread) {
    m_point_spread = point_spread;
    m_point_spread_isSet = true;
}

bool OAIGame::is_point_spread_Set() const{
    return m_point_spread_isSet;
}

bool OAIGame::is_point_spread_Valid() const{
    return m_point_spread_isValid;
}

qint32 OAIGame::getRoundId() const {
    return m_round_id;
}
void OAIGame::setRoundId(const qint32 &round_id) {
    m_round_id = round_id;
    m_round_id_isSet = true;
}

bool OAIGame::is_round_id_Set() const{
    return m_round_id_isSet;
}

bool OAIGame::is_round_id_Valid() const{
    return m_round_id_isValid;
}

qint32 OAIGame::getSeason() const {
    return m_season;
}
void OAIGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGame::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIGame::getSeasonType() const {
    return m_season_type;
}
void OAIGame::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIGame::getStatus() const {
    return m_status;
}
void OAIGame::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGame::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGame::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIGame::getUnderPayout() const {
    return m_under_payout;
}
void OAIGame::setUnderPayout(const qint32 &under_payout) {
    m_under_payout = under_payout;
    m_under_payout_isSet = true;
}

bool OAIGame::is_under_payout_Set() const{
    return m_under_payout_isSet;
}

bool OAIGame::is_under_payout_Valid() const{
    return m_under_payout_isValid;
}

QString OAIGame::getUpdated() const {
    return m_updated;
}
void OAIGame::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIGame::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIGame::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIGame::getUpdatedUtc() const {
    return m_updated_utc;
}
void OAIGame::setUpdatedUtc(const QString &updated_utc) {
    m_updated_utc = updated_utc;
    m_updated_utc_isSet = true;
}

bool OAIGame::is_updated_utc_Set() const{
    return m_updated_utc_isSet;
}

bool OAIGame::is_updated_utc_Valid() const{
    return m_updated_utc_isValid;
}

qint32 OAIGame::getVenueId() const {
    return m_venue_id;
}
void OAIGame::setVenueId(const qint32 &venue_id) {
    m_venue_id = venue_id;
    m_venue_id_isSet = true;
}

bool OAIGame::is_venue_id_Set() const{
    return m_venue_id_isSet;
}

bool OAIGame::is_venue_id_Valid() const{
    return m_venue_id_isValid;
}

QString OAIGame::getVenueType() const {
    return m_venue_type;
}
void OAIGame::setVenueType(const QString &venue_type) {
    m_venue_type = venue_type;
    m_venue_type_isSet = true;
}

bool OAIGame::is_venue_type_Set() const{
    return m_venue_type_isSet;
}

bool OAIGame::is_venue_type_Valid() const{
    return m_venue_type_isValid;
}

qint32 OAIGame::getWeek() const {
    return m_week;
}
void OAIGame::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIGame::is_week_Set() const{
    return m_week_isSet;
}

bool OAIGame::is_week_Valid() const{
    return m_week_isValid;
}

QString OAIGame::getWinner() const {
    return m_winner;
}
void OAIGame::setWinner(const QString &winner) {
    m_winner = winner;
    m_winner_isSet = true;
}

bool OAIGame::is_winner_Set() const{
    return m_winner_isSet;
}

bool OAIGame::is_winner_Valid() const{
    return m_winner_isValid;
}

bool OAIGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_formation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_point_spread_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_extra_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_period1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_period2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draw_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_formation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_point_spread_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_extra_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_period1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_period2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playoff_aggregate_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
