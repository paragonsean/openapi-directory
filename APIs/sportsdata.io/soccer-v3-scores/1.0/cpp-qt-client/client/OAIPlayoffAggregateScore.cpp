/**
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayoffAggregateScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayoffAggregateScore::OAIPlayoffAggregateScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayoffAggregateScore::OAIPlayoffAggregateScore() {
    this->initializeModel();
}

OAIPlayoffAggregateScore::~OAIPlayoffAggregateScore() {}

void OAIPlayoffAggregateScore::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_team_a_aggregate_score_isSet = false;
    m_team_a_aggregate_score_isValid = false;

    m_team_a_id_isSet = false;
    m_team_a_id_isValid = false;

    m_team_b_aggregate_score_isSet = false;
    m_team_b_aggregate_score_isValid = false;

    m_team_b_id_isSet = false;
    m_team_b_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_winning_team_id_isSet = false;
    m_winning_team_id_isValid = false;
}

void OAIPlayoffAggregateScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayoffAggregateScore::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_team_a_aggregate_score_isValid = ::OpenAPI::fromJsonValue(m_team_a_aggregate_score, json[QString("TeamA_AggregateScore")]);
    m_team_a_aggregate_score_isSet = !json[QString("TeamA_AggregateScore")].isNull() && m_team_a_aggregate_score_isValid;

    m_team_a_id_isValid = ::OpenAPI::fromJsonValue(m_team_a_id, json[QString("TeamA_Id")]);
    m_team_a_id_isSet = !json[QString("TeamA_Id")].isNull() && m_team_a_id_isValid;

    m_team_b_aggregate_score_isValid = ::OpenAPI::fromJsonValue(m_team_b_aggregate_score, json[QString("TeamB_AggregateScore")]);
    m_team_b_aggregate_score_isSet = !json[QString("TeamB_AggregateScore")].isNull() && m_team_b_aggregate_score_isValid;

    m_team_b_id_isValid = ::OpenAPI::fromJsonValue(m_team_b_id, json[QString("TeamB_Id")]);
    m_team_b_id_isSet = !json[QString("TeamB_Id")].isNull() && m_team_b_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_winning_team_id_isValid = ::OpenAPI::fromJsonValue(m_winning_team_id, json[QString("WinningTeamId")]);
    m_winning_team_id_isSet = !json[QString("WinningTeamId")].isNull() && m_winning_team_id_isValid;
}

QString OAIPlayoffAggregateScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayoffAggregateScore::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_team_a_aggregate_score_isSet) {
        obj.insert(QString("TeamA_AggregateScore"), ::OpenAPI::toJsonValue(m_team_a_aggregate_score));
    }
    if (m_team_a_id_isSet) {
        obj.insert(QString("TeamA_Id"), ::OpenAPI::toJsonValue(m_team_a_id));
    }
    if (m_team_b_aggregate_score_isSet) {
        obj.insert(QString("TeamB_AggregateScore"), ::OpenAPI::toJsonValue(m_team_b_aggregate_score));
    }
    if (m_team_b_id_isSet) {
        obj.insert(QString("TeamB_Id"), ::OpenAPI::toJsonValue(m_team_b_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_winning_team_id_isSet) {
        obj.insert(QString("WinningTeamId"), ::OpenAPI::toJsonValue(m_winning_team_id));
    }
    return obj;
}

QString OAIPlayoffAggregateScore::getCreated() const {
    return m_created;
}
void OAIPlayoffAggregateScore::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPlayoffAggregateScore::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPlayoffAggregateScore::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIPlayoffAggregateScore::getTeamAAggregateScore() const {
    return m_team_a_aggregate_score;
}
void OAIPlayoffAggregateScore::setTeamAAggregateScore(const qint32 &team_a_aggregate_score) {
    m_team_a_aggregate_score = team_a_aggregate_score;
    m_team_a_aggregate_score_isSet = true;
}

bool OAIPlayoffAggregateScore::is_team_a_aggregate_score_Set() const{
    return m_team_a_aggregate_score_isSet;
}

bool OAIPlayoffAggregateScore::is_team_a_aggregate_score_Valid() const{
    return m_team_a_aggregate_score_isValid;
}

qint32 OAIPlayoffAggregateScore::getTeamAId() const {
    return m_team_a_id;
}
void OAIPlayoffAggregateScore::setTeamAId(const qint32 &team_a_id) {
    m_team_a_id = team_a_id;
    m_team_a_id_isSet = true;
}

bool OAIPlayoffAggregateScore::is_team_a_id_Set() const{
    return m_team_a_id_isSet;
}

bool OAIPlayoffAggregateScore::is_team_a_id_Valid() const{
    return m_team_a_id_isValid;
}

qint32 OAIPlayoffAggregateScore::getTeamBAggregateScore() const {
    return m_team_b_aggregate_score;
}
void OAIPlayoffAggregateScore::setTeamBAggregateScore(const qint32 &team_b_aggregate_score) {
    m_team_b_aggregate_score = team_b_aggregate_score;
    m_team_b_aggregate_score_isSet = true;
}

bool OAIPlayoffAggregateScore::is_team_b_aggregate_score_Set() const{
    return m_team_b_aggregate_score_isSet;
}

bool OAIPlayoffAggregateScore::is_team_b_aggregate_score_Valid() const{
    return m_team_b_aggregate_score_isValid;
}

qint32 OAIPlayoffAggregateScore::getTeamBId() const {
    return m_team_b_id;
}
void OAIPlayoffAggregateScore::setTeamBId(const qint32 &team_b_id) {
    m_team_b_id = team_b_id;
    m_team_b_id_isSet = true;
}

bool OAIPlayoffAggregateScore::is_team_b_id_Set() const{
    return m_team_b_id_isSet;
}

bool OAIPlayoffAggregateScore::is_team_b_id_Valid() const{
    return m_team_b_id_isValid;
}

QString OAIPlayoffAggregateScore::getUpdated() const {
    return m_updated;
}
void OAIPlayoffAggregateScore::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayoffAggregateScore::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayoffAggregateScore::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIPlayoffAggregateScore::getWinningTeamId() const {
    return m_winning_team_id;
}
void OAIPlayoffAggregateScore::setWinningTeamId(const qint32 &winning_team_id) {
    m_winning_team_id = winning_team_id;
    m_winning_team_id_isSet = true;
}

bool OAIPlayoffAggregateScore::is_winning_team_id_Set() const{
    return m_winning_team_id_isSet;
}

bool OAIPlayoffAggregateScore::is_winning_team_id_Valid() const{
    return m_winning_team_id_isValid;
}

bool OAIPlayoffAggregateScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_a_aggregate_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_a_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_b_aggregate_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_b_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayoffAggregateScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
