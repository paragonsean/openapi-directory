/**
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStanding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStanding::OAIStanding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStanding::OAIStanding() {
    this->initializeModel();
}

OAIStanding::~OAIStanding() {}

void OAIStanding::initializeModel() {

    m_draws_isSet = false;
    m_draws_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_goals_against_isSet = false;
    m_goals_against_isValid = false;

    m_goals_differential_isSet = false;
    m_goals_differential_isValid = false;

    m_goals_scored_isSet = false;
    m_goals_scored_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_round_id_isSet = false;
    m_round_id_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_standing_id_isSet = false;
    m_standing_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAIStanding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStanding::fromJsonObject(QJsonObject json) {

    m_draws_isValid = ::OpenAPI::fromJsonValue(m_draws, json[QString("Draws")]);
    m_draws_isSet = !json[QString("Draws")].isNull() && m_draws_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_goals_against_isValid = ::OpenAPI::fromJsonValue(m_goals_against, json[QString("GoalsAgainst")]);
    m_goals_against_isSet = !json[QString("GoalsAgainst")].isNull() && m_goals_against_isValid;

    m_goals_differential_isValid = ::OpenAPI::fromJsonValue(m_goals_differential, json[QString("GoalsDifferential")]);
    m_goals_differential_isSet = !json[QString("GoalsDifferential")].isNull() && m_goals_differential_isValid;

    m_goals_scored_isValid = ::OpenAPI::fromJsonValue(m_goals_scored, json[QString("GoalsScored")]);
    m_goals_scored_isSet = !json[QString("GoalsScored")].isNull() && m_goals_scored_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("Losses")]);
    m_losses_isSet = !json[QString("Losses")].isNull() && m_losses_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("Order")]);
    m_order_isSet = !json[QString("Order")].isNull() && m_order_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("Points")]);
    m_points_isSet = !json[QString("Points")].isNull() && m_points_isValid;

    m_round_id_isValid = ::OpenAPI::fromJsonValue(m_round_id, json[QString("RoundId")]);
    m_round_id_isSet = !json[QString("RoundId")].isNull() && m_round_id_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_standing_id_isValid = ::OpenAPI::fromJsonValue(m_standing_id, json[QString("StandingId")]);
    m_standing_id_isSet = !json[QString("StandingId")].isNull() && m_standing_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("Wins")]);
    m_wins_isSet = !json[QString("Wins")].isNull() && m_wins_isValid;
}

QString OAIStanding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStanding::asJsonObject() const {
    QJsonObject obj;
    if (m_draws_isSet) {
        obj.insert(QString("Draws"), ::OpenAPI::toJsonValue(m_draws));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_goals_against_isSet) {
        obj.insert(QString("GoalsAgainst"), ::OpenAPI::toJsonValue(m_goals_against));
    }
    if (m_goals_differential_isSet) {
        obj.insert(QString("GoalsDifferential"), ::OpenAPI::toJsonValue(m_goals_differential));
    }
    if (m_goals_scored_isSet) {
        obj.insert(QString("GoalsScored"), ::OpenAPI::toJsonValue(m_goals_scored));
    }
    if (m_group_isSet) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_losses_isSet) {
        obj.insert(QString("Losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("Order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_points_isSet) {
        obj.insert(QString("Points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_round_id_isSet) {
        obj.insert(QString("RoundId"), ::OpenAPI::toJsonValue(m_round_id));
    }
    if (m_scope_isSet) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_standing_id_isSet) {
        obj.insert(QString("StandingId"), ::OpenAPI::toJsonValue(m_standing_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_wins_isSet) {
        obj.insert(QString("Wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

qint32 OAIStanding::getDraws() const {
    return m_draws;
}
void OAIStanding::setDraws(const qint32 &draws) {
    m_draws = draws;
    m_draws_isSet = true;
}

bool OAIStanding::is_draws_Set() const{
    return m_draws_isSet;
}

bool OAIStanding::is_draws_Valid() const{
    return m_draws_isValid;
}

qint32 OAIStanding::getGames() const {
    return m_games;
}
void OAIStanding::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAIStanding::is_games_Set() const{
    return m_games_isSet;
}

bool OAIStanding::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAIStanding::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIStanding::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIStanding::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIStanding::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

qint32 OAIStanding::getGoalsAgainst() const {
    return m_goals_against;
}
void OAIStanding::setGoalsAgainst(const qint32 &goals_against) {
    m_goals_against = goals_against;
    m_goals_against_isSet = true;
}

bool OAIStanding::is_goals_against_Set() const{
    return m_goals_against_isSet;
}

bool OAIStanding::is_goals_against_Valid() const{
    return m_goals_against_isValid;
}

qint32 OAIStanding::getGoalsDifferential() const {
    return m_goals_differential;
}
void OAIStanding::setGoalsDifferential(const qint32 &goals_differential) {
    m_goals_differential = goals_differential;
    m_goals_differential_isSet = true;
}

bool OAIStanding::is_goals_differential_Set() const{
    return m_goals_differential_isSet;
}

bool OAIStanding::is_goals_differential_Valid() const{
    return m_goals_differential_isValid;
}

qint32 OAIStanding::getGoalsScored() const {
    return m_goals_scored;
}
void OAIStanding::setGoalsScored(const qint32 &goals_scored) {
    m_goals_scored = goals_scored;
    m_goals_scored_isSet = true;
}

bool OAIStanding::is_goals_scored_Set() const{
    return m_goals_scored_isSet;
}

bool OAIStanding::is_goals_scored_Valid() const{
    return m_goals_scored_isValid;
}

QString OAIStanding::getGroup() const {
    return m_group;
}
void OAIStanding::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIStanding::is_group_Set() const{
    return m_group_isSet;
}

bool OAIStanding::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIStanding::getLosses() const {
    return m_losses;
}
void OAIStanding::setLosses(const qint32 &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAIStanding::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAIStanding::is_losses_Valid() const{
    return m_losses_isValid;
}

QString OAIStanding::getName() const {
    return m_name;
}
void OAIStanding::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStanding::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStanding::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStanding::getOrder() const {
    return m_order;
}
void OAIStanding::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIStanding::is_order_Set() const{
    return m_order_isSet;
}

bool OAIStanding::is_order_Valid() const{
    return m_order_isValid;
}

qint32 OAIStanding::getPoints() const {
    return m_points;
}
void OAIStanding::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIStanding::is_points_Set() const{
    return m_points_isSet;
}

bool OAIStanding::is_points_Valid() const{
    return m_points_isValid;
}

qint32 OAIStanding::getRoundId() const {
    return m_round_id;
}
void OAIStanding::setRoundId(const qint32 &round_id) {
    m_round_id = round_id;
    m_round_id_isSet = true;
}

bool OAIStanding::is_round_id_Set() const{
    return m_round_id_isSet;
}

bool OAIStanding::is_round_id_Valid() const{
    return m_round_id_isValid;
}

QString OAIStanding::getScope() const {
    return m_scope;
}
void OAIStanding::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIStanding::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIStanding::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIStanding::getShortName() const {
    return m_short_name;
}
void OAIStanding::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIStanding::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIStanding::is_short_name_Valid() const{
    return m_short_name_isValid;
}

qint32 OAIStanding::getStandingId() const {
    return m_standing_id;
}
void OAIStanding::setStandingId(const qint32 &standing_id) {
    m_standing_id = standing_id;
    m_standing_id_isSet = true;
}

bool OAIStanding::is_standing_id_Set() const{
    return m_standing_id_isSet;
}

bool OAIStanding::is_standing_id_Valid() const{
    return m_standing_id_isValid;
}

qint32 OAIStanding::getTeamId() const {
    return m_team_id;
}
void OAIStanding::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIStanding::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIStanding::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIStanding::getWins() const {
    return m_wins;
}
void OAIStanding::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAIStanding::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAIStanding::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAIStanding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_draws_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals_scored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStanding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
