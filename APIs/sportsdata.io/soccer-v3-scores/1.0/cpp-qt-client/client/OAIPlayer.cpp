/**
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_birth_city_isSet = false;
    m_birth_city_isValid = false;

    m_birth_country_isSet = false;
    m_birth_country_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_draft_kings_position_isSet = false;
    m_draft_kings_position_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_foot_isSet = false;
    m_foot_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_injury_body_part_isSet = false;
    m_injury_body_part_isValid = false;

    m_injury_notes_isSet = false;
    m_injury_notes_isValid = false;

    m_injury_start_date_isSet = false;
    m_injury_start_date_isValid = false;

    m_injury_status_isSet = false;
    m_injury_status_isValid = false;

    m_jersey_isSet = false;
    m_jersey_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_roto_wire_player_id_isSet = false;
    m_roto_wire_player_id_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_usa_today_headshot_no_background_updated_isSet = false;
    m_usa_today_headshot_no_background_updated_isValid = false;

    m_usa_today_headshot_no_background_url_isSet = false;
    m_usa_today_headshot_no_background_url_isValid = false;

    m_usa_today_headshot_updated_isSet = false;
    m_usa_today_headshot_updated_isValid = false;

    m_usa_today_headshot_url_isSet = false;
    m_usa_today_headshot_url_isValid = false;

    m_usa_today_player_id_isSet = false;
    m_usa_today_player_id_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_birth_city_isValid = ::OpenAPI::fromJsonValue(m_birth_city, json[QString("BirthCity")]);
    m_birth_city_isSet = !json[QString("BirthCity")].isNull() && m_birth_city_isValid;

    m_birth_country_isValid = ::OpenAPI::fromJsonValue(m_birth_country, json[QString("BirthCountry")]);
    m_birth_country_isSet = !json[QString("BirthCountry")].isNull() && m_birth_country_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("BirthDate")]);
    m_birth_date_isSet = !json[QString("BirthDate")].isNull() && m_birth_date_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("CommonName")]);
    m_common_name_isSet = !json[QString("CommonName")].isNull() && m_common_name_isValid;

    m_draft_kings_position_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_position, json[QString("DraftKingsPosition")]);
    m_draft_kings_position_isSet = !json[QString("DraftKingsPosition")].isNull() && m_draft_kings_position_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_foot_isValid = ::OpenAPI::fromJsonValue(m_foot, json[QString("Foot")]);
    m_foot_isSet = !json[QString("Foot")].isNull() && m_foot_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_injury_body_part_isValid = ::OpenAPI::fromJsonValue(m_injury_body_part, json[QString("InjuryBodyPart")]);
    m_injury_body_part_isSet = !json[QString("InjuryBodyPart")].isNull() && m_injury_body_part_isValid;

    m_injury_notes_isValid = ::OpenAPI::fromJsonValue(m_injury_notes, json[QString("InjuryNotes")]);
    m_injury_notes_isSet = !json[QString("InjuryNotes")].isNull() && m_injury_notes_isValid;

    m_injury_start_date_isValid = ::OpenAPI::fromJsonValue(m_injury_start_date, json[QString("InjuryStartDate")]);
    m_injury_start_date_isSet = !json[QString("InjuryStartDate")].isNull() && m_injury_start_date_isValid;

    m_injury_status_isValid = ::OpenAPI::fromJsonValue(m_injury_status, json[QString("InjuryStatus")]);
    m_injury_status_isSet = !json[QString("InjuryStatus")].isNull() && m_injury_status_isValid;

    m_jersey_isValid = ::OpenAPI::fromJsonValue(m_jersey, json[QString("Jersey")]);
    m_jersey_isSet = !json[QString("Jersey")].isNull() && m_jersey_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("Nationality")]);
    m_nationality_isSet = !json[QString("Nationality")].isNull() && m_nationality_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("PhotoUrl")]);
    m_photo_url_isSet = !json[QString("PhotoUrl")].isNull() && m_photo_url_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerId")]);
    m_player_id_isSet = !json[QString("PlayerId")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_roto_wire_player_id_isValid = ::OpenAPI::fromJsonValue(m_roto_wire_player_id, json[QString("RotoWirePlayerID")]);
    m_roto_wire_player_id_isSet = !json[QString("RotoWirePlayerID")].isNull() && m_roto_wire_player_id_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_usa_today_headshot_no_background_updated_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_no_background_updated, json[QString("UsaTodayHeadshotNoBackgroundUpdated")]);
    m_usa_today_headshot_no_background_updated_isSet = !json[QString("UsaTodayHeadshotNoBackgroundUpdated")].isNull() && m_usa_today_headshot_no_background_updated_isValid;

    m_usa_today_headshot_no_background_url_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_no_background_url, json[QString("UsaTodayHeadshotNoBackgroundUrl")]);
    m_usa_today_headshot_no_background_url_isSet = !json[QString("UsaTodayHeadshotNoBackgroundUrl")].isNull() && m_usa_today_headshot_no_background_url_isValid;

    m_usa_today_headshot_updated_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_updated, json[QString("UsaTodayHeadshotUpdated")]);
    m_usa_today_headshot_updated_isSet = !json[QString("UsaTodayHeadshotUpdated")].isNull() && m_usa_today_headshot_updated_isValid;

    m_usa_today_headshot_url_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_url, json[QString("UsaTodayHeadshotUrl")]);
    m_usa_today_headshot_url_isSet = !json[QString("UsaTodayHeadshotUrl")].isNull() && m_usa_today_headshot_url_isValid;

    m_usa_today_player_id_isValid = ::OpenAPI::fromJsonValue(m_usa_today_player_id, json[QString("UsaTodayPlayerID")]);
    m_usa_today_player_id_isSet = !json[QString("UsaTodayPlayerID")].isNull() && m_usa_today_player_id_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_city_isSet) {
        obj.insert(QString("BirthCity"), ::OpenAPI::toJsonValue(m_birth_city));
    }
    if (m_birth_country_isSet) {
        obj.insert(QString("BirthCountry"), ::OpenAPI::toJsonValue(m_birth_country));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("BirthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("CommonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_draft_kings_position_isSet) {
        obj.insert(QString("DraftKingsPosition"), ::OpenAPI::toJsonValue(m_draft_kings_position));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_foot_isSet) {
        obj.insert(QString("Foot"), ::OpenAPI::toJsonValue(m_foot));
    }
    if (m_gender_isSet) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_injury_body_part_isSet) {
        obj.insert(QString("InjuryBodyPart"), ::OpenAPI::toJsonValue(m_injury_body_part));
    }
    if (m_injury_notes_isSet) {
        obj.insert(QString("InjuryNotes"), ::OpenAPI::toJsonValue(m_injury_notes));
    }
    if (m_injury_start_date_isSet) {
        obj.insert(QString("InjuryStartDate"), ::OpenAPI::toJsonValue(m_injury_start_date));
    }
    if (m_injury_status_isSet) {
        obj.insert(QString("InjuryStatus"), ::OpenAPI::toJsonValue(m_injury_status));
    }
    if (m_jersey_isSet) {
        obj.insert(QString("Jersey"), ::OpenAPI::toJsonValue(m_jersey));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("Nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("PhotoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_roto_wire_player_id_isSet) {
        obj.insert(QString("RotoWirePlayerID"), ::OpenAPI::toJsonValue(m_roto_wire_player_id));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_usa_today_headshot_no_background_updated_isSet) {
        obj.insert(QString("UsaTodayHeadshotNoBackgroundUpdated"), ::OpenAPI::toJsonValue(m_usa_today_headshot_no_background_updated));
    }
    if (m_usa_today_headshot_no_background_url_isSet) {
        obj.insert(QString("UsaTodayHeadshotNoBackgroundUrl"), ::OpenAPI::toJsonValue(m_usa_today_headshot_no_background_url));
    }
    if (m_usa_today_headshot_updated_isSet) {
        obj.insert(QString("UsaTodayHeadshotUpdated"), ::OpenAPI::toJsonValue(m_usa_today_headshot_updated));
    }
    if (m_usa_today_headshot_url_isSet) {
        obj.insert(QString("UsaTodayHeadshotUrl"), ::OpenAPI::toJsonValue(m_usa_today_headshot_url));
    }
    if (m_usa_today_player_id_isSet) {
        obj.insert(QString("UsaTodayPlayerID"), ::OpenAPI::toJsonValue(m_usa_today_player_id));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIPlayer::getBirthCity() const {
    return m_birth_city;
}
void OAIPlayer::setBirthCity(const QString &birth_city) {
    m_birth_city = birth_city;
    m_birth_city_isSet = true;
}

bool OAIPlayer::is_birth_city_Set() const{
    return m_birth_city_isSet;
}

bool OAIPlayer::is_birth_city_Valid() const{
    return m_birth_city_isValid;
}

QString OAIPlayer::getBirthCountry() const {
    return m_birth_country;
}
void OAIPlayer::setBirthCountry(const QString &birth_country) {
    m_birth_country = birth_country;
    m_birth_country_isSet = true;
}

bool OAIPlayer::is_birth_country_Set() const{
    return m_birth_country_isSet;
}

bool OAIPlayer::is_birth_country_Valid() const{
    return m_birth_country_isValid;
}

QString OAIPlayer::getBirthDate() const {
    return m_birth_date;
}
void OAIPlayer::setBirthDate(const QString &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIPlayer::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIPlayer::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIPlayer::getCommonName() const {
    return m_common_name;
}
void OAIPlayer::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAIPlayer::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAIPlayer::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAIPlayer::getDraftKingsPosition() const {
    return m_draft_kings_position;
}
void OAIPlayer::setDraftKingsPosition(const QString &draft_kings_position) {
    m_draft_kings_position = draft_kings_position;
    m_draft_kings_position_isSet = true;
}

bool OAIPlayer::is_draft_kings_position_Set() const{
    return m_draft_kings_position_isSet;
}

bool OAIPlayer::is_draft_kings_position_Valid() const{
    return m_draft_kings_position_isValid;
}

QString OAIPlayer::getFirstName() const {
    return m_first_name;
}
void OAIPlayer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPlayer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPlayer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIPlayer::getFoot() const {
    return m_foot;
}
void OAIPlayer::setFoot(const QString &foot) {
    m_foot = foot;
    m_foot_isSet = true;
}

bool OAIPlayer::is_foot_Set() const{
    return m_foot_isSet;
}

bool OAIPlayer::is_foot_Valid() const{
    return m_foot_isValid;
}

QString OAIPlayer::getGender() const {
    return m_gender;
}
void OAIPlayer::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIPlayer::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIPlayer::is_gender_Valid() const{
    return m_gender_isValid;
}

qint32 OAIPlayer::getHeight() const {
    return m_height;
}
void OAIPlayer::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlayer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlayer::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIPlayer::getInjuryBodyPart() const {
    return m_injury_body_part;
}
void OAIPlayer::setInjuryBodyPart(const QString &injury_body_part) {
    m_injury_body_part = injury_body_part;
    m_injury_body_part_isSet = true;
}

bool OAIPlayer::is_injury_body_part_Set() const{
    return m_injury_body_part_isSet;
}

bool OAIPlayer::is_injury_body_part_Valid() const{
    return m_injury_body_part_isValid;
}

QString OAIPlayer::getInjuryNotes() const {
    return m_injury_notes;
}
void OAIPlayer::setInjuryNotes(const QString &injury_notes) {
    m_injury_notes = injury_notes;
    m_injury_notes_isSet = true;
}

bool OAIPlayer::is_injury_notes_Set() const{
    return m_injury_notes_isSet;
}

bool OAIPlayer::is_injury_notes_Valid() const{
    return m_injury_notes_isValid;
}

QString OAIPlayer::getInjuryStartDate() const {
    return m_injury_start_date;
}
void OAIPlayer::setInjuryStartDate(const QString &injury_start_date) {
    m_injury_start_date = injury_start_date;
    m_injury_start_date_isSet = true;
}

bool OAIPlayer::is_injury_start_date_Set() const{
    return m_injury_start_date_isSet;
}

bool OAIPlayer::is_injury_start_date_Valid() const{
    return m_injury_start_date_isValid;
}

QString OAIPlayer::getInjuryStatus() const {
    return m_injury_status;
}
void OAIPlayer::setInjuryStatus(const QString &injury_status) {
    m_injury_status = injury_status;
    m_injury_status_isSet = true;
}

bool OAIPlayer::is_injury_status_Set() const{
    return m_injury_status_isSet;
}

bool OAIPlayer::is_injury_status_Valid() const{
    return m_injury_status_isValid;
}

qint32 OAIPlayer::getJersey() const {
    return m_jersey;
}
void OAIPlayer::setJersey(const qint32 &jersey) {
    m_jersey = jersey;
    m_jersey_isSet = true;
}

bool OAIPlayer::is_jersey_Set() const{
    return m_jersey_isSet;
}

bool OAIPlayer::is_jersey_Valid() const{
    return m_jersey_isValid;
}

QString OAIPlayer::getLastName() const {
    return m_last_name;
}
void OAIPlayer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPlayer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPlayer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIPlayer::getNationality() const {
    return m_nationality;
}
void OAIPlayer::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIPlayer::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIPlayer::is_nationality_Valid() const{
    return m_nationality_isValid;
}

QString OAIPlayer::getPhotoUrl() const {
    return m_photo_url;
}
void OAIPlayer::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIPlayer::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIPlayer::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

qint32 OAIPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIPlayer::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayer::getPosition() const {
    return m_position;
}
void OAIPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayer::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayer::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayer::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayer::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayer::is_position_category_Valid() const{
    return m_position_category_isValid;
}

qint32 OAIPlayer::getRotoWirePlayerId() const {
    return m_roto_wire_player_id;
}
void OAIPlayer::setRotoWirePlayerId(const qint32 &roto_wire_player_id) {
    m_roto_wire_player_id = roto_wire_player_id;
    m_roto_wire_player_id_isSet = true;
}

bool OAIPlayer::is_roto_wire_player_id_Set() const{
    return m_roto_wire_player_id_isSet;
}

bool OAIPlayer::is_roto_wire_player_id_Valid() const{
    return m_roto_wire_player_id_isValid;
}

QString OAIPlayer::getShortName() const {
    return m_short_name;
}
void OAIPlayer::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayer::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayer::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIPlayer::getUpdated() const {
    return m_updated;
}
void OAIPlayer::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayer::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayer::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotNoBackgroundUpdated() const {
    return m_usa_today_headshot_no_background_updated;
}
void OAIPlayer::setUsaTodayHeadshotNoBackgroundUpdated(const QString &usa_today_headshot_no_background_updated) {
    m_usa_today_headshot_no_background_updated = usa_today_headshot_no_background_updated;
    m_usa_today_headshot_no_background_updated_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_no_background_updated_Set() const{
    return m_usa_today_headshot_no_background_updated_isSet;
}

bool OAIPlayer::is_usa_today_headshot_no_background_updated_Valid() const{
    return m_usa_today_headshot_no_background_updated_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotNoBackgroundUrl() const {
    return m_usa_today_headshot_no_background_url;
}
void OAIPlayer::setUsaTodayHeadshotNoBackgroundUrl(const QString &usa_today_headshot_no_background_url) {
    m_usa_today_headshot_no_background_url = usa_today_headshot_no_background_url;
    m_usa_today_headshot_no_background_url_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_no_background_url_Set() const{
    return m_usa_today_headshot_no_background_url_isSet;
}

bool OAIPlayer::is_usa_today_headshot_no_background_url_Valid() const{
    return m_usa_today_headshot_no_background_url_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotUpdated() const {
    return m_usa_today_headshot_updated;
}
void OAIPlayer::setUsaTodayHeadshotUpdated(const QString &usa_today_headshot_updated) {
    m_usa_today_headshot_updated = usa_today_headshot_updated;
    m_usa_today_headshot_updated_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_updated_Set() const{
    return m_usa_today_headshot_updated_isSet;
}

bool OAIPlayer::is_usa_today_headshot_updated_Valid() const{
    return m_usa_today_headshot_updated_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotUrl() const {
    return m_usa_today_headshot_url;
}
void OAIPlayer::setUsaTodayHeadshotUrl(const QString &usa_today_headshot_url) {
    m_usa_today_headshot_url = usa_today_headshot_url;
    m_usa_today_headshot_url_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_url_Set() const{
    return m_usa_today_headshot_url_isSet;
}

bool OAIPlayer::is_usa_today_headshot_url_Valid() const{
    return m_usa_today_headshot_url_isValid;
}

qint32 OAIPlayer::getUsaTodayPlayerId() const {
    return m_usa_today_player_id;
}
void OAIPlayer::setUsaTodayPlayerId(const qint32 &usa_today_player_id) {
    m_usa_today_player_id = usa_today_player_id;
    m_usa_today_player_id_isSet = true;
}

bool OAIPlayer::is_usa_today_player_id_Set() const{
    return m_usa_today_player_id_isSet;
}

bool OAIPlayer::is_usa_today_player_id_Valid() const{
    return m_usa_today_player_id_isValid;
}

qint32 OAIPlayer::getWeight() const {
    return m_weight;
}
void OAIPlayer::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPlayer::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPlayer::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jersey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roto_wire_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_no_background_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_no_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
