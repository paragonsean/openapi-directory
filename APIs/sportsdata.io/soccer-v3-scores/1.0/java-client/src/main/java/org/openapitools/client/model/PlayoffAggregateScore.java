/*
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayoffAggregateScore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:19.207252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayoffAggregateScore {
  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_TEAM_A_AGGREGATE_SCORE = "TeamA_AggregateScore";
  @SerializedName(SERIALIZED_NAME_TEAM_A_AGGREGATE_SCORE)
  private Integer teamAAggregateScore;

  public static final String SERIALIZED_NAME_TEAM_A_ID = "TeamA_Id";
  @SerializedName(SERIALIZED_NAME_TEAM_A_ID)
  private Integer teamAId;

  public static final String SERIALIZED_NAME_TEAM_B_AGGREGATE_SCORE = "TeamB_AggregateScore";
  @SerializedName(SERIALIZED_NAME_TEAM_B_AGGREGATE_SCORE)
  private Integer teamBAggregateScore;

  public static final String SERIALIZED_NAME_TEAM_B_ID = "TeamB_Id";
  @SerializedName(SERIALIZED_NAME_TEAM_B_ID)
  private Integer teamBId;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_WINNING_TEAM_ID = "WinningTeamId";
  @SerializedName(SERIALIZED_NAME_WINNING_TEAM_ID)
  private Integer winningTeamId;

  public PlayoffAggregateScore() {
  }

  public PlayoffAggregateScore created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public PlayoffAggregateScore teamAAggregateScore(Integer teamAAggregateScore) {
    this.teamAAggregateScore = teamAAggregateScore;
    return this;
  }

  /**
   * Get teamAAggregateScore
   * @return teamAAggregateScore
   */
  @javax.annotation.Nullable
  public Integer getTeamAAggregateScore() {
    return teamAAggregateScore;
  }

  public void setTeamAAggregateScore(Integer teamAAggregateScore) {
    this.teamAAggregateScore = teamAAggregateScore;
  }


  public PlayoffAggregateScore teamAId(Integer teamAId) {
    this.teamAId = teamAId;
    return this;
  }

  /**
   * Get teamAId
   * @return teamAId
   */
  @javax.annotation.Nullable
  public Integer getTeamAId() {
    return teamAId;
  }

  public void setTeamAId(Integer teamAId) {
    this.teamAId = teamAId;
  }


  public PlayoffAggregateScore teamBAggregateScore(Integer teamBAggregateScore) {
    this.teamBAggregateScore = teamBAggregateScore;
    return this;
  }

  /**
   * Get teamBAggregateScore
   * @return teamBAggregateScore
   */
  @javax.annotation.Nullable
  public Integer getTeamBAggregateScore() {
    return teamBAggregateScore;
  }

  public void setTeamBAggregateScore(Integer teamBAggregateScore) {
    this.teamBAggregateScore = teamBAggregateScore;
  }


  public PlayoffAggregateScore teamBId(Integer teamBId) {
    this.teamBId = teamBId;
    return this;
  }

  /**
   * Get teamBId
   * @return teamBId
   */
  @javax.annotation.Nullable
  public Integer getTeamBId() {
    return teamBId;
  }

  public void setTeamBId(Integer teamBId) {
    this.teamBId = teamBId;
  }


  public PlayoffAggregateScore updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public PlayoffAggregateScore winningTeamId(Integer winningTeamId) {
    this.winningTeamId = winningTeamId;
    return this;
  }

  /**
   * Get winningTeamId
   * @return winningTeamId
   */
  @javax.annotation.Nullable
  public Integer getWinningTeamId() {
    return winningTeamId;
  }

  public void setWinningTeamId(Integer winningTeamId) {
    this.winningTeamId = winningTeamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayoffAggregateScore playoffAggregateScore = (PlayoffAggregateScore) o;
    return Objects.equals(this.created, playoffAggregateScore.created) &&
        Objects.equals(this.teamAAggregateScore, playoffAggregateScore.teamAAggregateScore) &&
        Objects.equals(this.teamAId, playoffAggregateScore.teamAId) &&
        Objects.equals(this.teamBAggregateScore, playoffAggregateScore.teamBAggregateScore) &&
        Objects.equals(this.teamBId, playoffAggregateScore.teamBId) &&
        Objects.equals(this.updated, playoffAggregateScore.updated) &&
        Objects.equals(this.winningTeamId, playoffAggregateScore.winningTeamId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, teamAAggregateScore, teamAId, teamBAggregateScore, teamBId, updated, winningTeamId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayoffAggregateScore {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    teamAAggregateScore: ").append(toIndentedString(teamAAggregateScore)).append("\n");
    sb.append("    teamAId: ").append(toIndentedString(teamAId)).append("\n");
    sb.append("    teamBAggregateScore: ").append(toIndentedString(teamBAggregateScore)).append("\n");
    sb.append("    teamBId: ").append(toIndentedString(teamBId)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    winningTeamId: ").append(toIndentedString(winningTeamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Created");
    openapiFields.add("TeamA_AggregateScore");
    openapiFields.add("TeamA_Id");
    openapiFields.add("TeamB_AggregateScore");
    openapiFields.add("TeamB_Id");
    openapiFields.add("Updated");
    openapiFields.add("WinningTeamId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayoffAggregateScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayoffAggregateScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayoffAggregateScore is not found in the empty JSON string", PlayoffAggregateScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayoffAggregateScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayoffAggregateScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) && !jsonObj.get("Created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Created").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayoffAggregateScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayoffAggregateScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayoffAggregateScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayoffAggregateScore.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayoffAggregateScore>() {
           @Override
           public void write(JsonWriter out, PlayoffAggregateScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayoffAggregateScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayoffAggregateScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayoffAggregateScore
   * @throws IOException if the JSON string is invalid with respect to PlayoffAggregateScore
   */
  public static PlayoffAggregateScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayoffAggregateScore.class);
  }

  /**
   * Convert an instance of PlayoffAggregateScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

