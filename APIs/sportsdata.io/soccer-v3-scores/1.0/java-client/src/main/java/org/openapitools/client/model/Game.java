/*
 * Soccer v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PlayoffAggregateScore;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Game
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:19.207252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Game {
  public static final String SERIALIZED_NAME_ATTENDANCE = "Attendance";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE)
  private Integer attendance;

  public static final String SERIALIZED_NAME_AWAY_TEAM_COUNTRY_CODE = "AwayTeamCountryCode";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_COUNTRY_CODE)
  private String awayTeamCountryCode;

  public static final String SERIALIZED_NAME_AWAY_TEAM_FORMATION = "AwayTeamFormation";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_FORMATION)
  private String awayTeamFormation;

  public static final String SERIALIZED_NAME_AWAY_TEAM_ID = "AwayTeamId";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_ID)
  private Integer awayTeamId;

  public static final String SERIALIZED_NAME_AWAY_TEAM_KEY = "AwayTeamKey";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_KEY)
  private String awayTeamKey;

  public static final String SERIALIZED_NAME_AWAY_TEAM_MONEY_LINE = "AwayTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_MONEY_LINE)
  private Integer awayTeamMoneyLine;

  public static final String SERIALIZED_NAME_AWAY_TEAM_NAME = "AwayTeamName";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_NAME)
  private String awayTeamName;

  public static final String SERIALIZED_NAME_AWAY_TEAM_POINT_SPREAD_PAYOUT = "AwayTeamPointSpreadPayout";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_POINT_SPREAD_PAYOUT)
  private Integer awayTeamPointSpreadPayout;

  public static final String SERIALIZED_NAME_AWAY_TEAM_SCORE = "AwayTeamScore";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_SCORE)
  private Integer awayTeamScore;

  public static final String SERIALIZED_NAME_AWAY_TEAM_SCORE_EXTRA_TIME = "AwayTeamScoreExtraTime";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_SCORE_EXTRA_TIME)
  private Integer awayTeamScoreExtraTime;

  public static final String SERIALIZED_NAME_AWAY_TEAM_SCORE_PENALTY = "AwayTeamScorePenalty";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_SCORE_PENALTY)
  private Integer awayTeamScorePenalty;

  public static final String SERIALIZED_NAME_AWAY_TEAM_SCORE_PERIOD1 = "AwayTeamScorePeriod1";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_SCORE_PERIOD1)
  private Integer awayTeamScorePeriod1;

  public static final String SERIALIZED_NAME_AWAY_TEAM_SCORE_PERIOD2 = "AwayTeamScorePeriod2";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_SCORE_PERIOD2)
  private Integer awayTeamScorePeriod2;

  public static final String SERIALIZED_NAME_CLOCK = "Clock";
  @SerializedName(SERIALIZED_NAME_CLOCK)
  private Integer clock;

  public static final String SERIALIZED_NAME_CLOCK_DISPLAY = "ClockDisplay";
  @SerializedName(SERIALIZED_NAME_CLOCK_DISPLAY)
  private String clockDisplay;

  public static final String SERIALIZED_NAME_CLOCK_EXTRA = "ClockExtra";
  @SerializedName(SERIALIZED_NAME_CLOCK_EXTRA)
  private Integer clockExtra;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_DRAW_MONEY_LINE = "DrawMoneyLine";
  @SerializedName(SERIALIZED_NAME_DRAW_MONEY_LINE)
  private Integer drawMoneyLine;

  public static final String SERIALIZED_NAME_GAME_ID = "GameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_GLOBAL_AWAY_TEAM_ID = "GlobalAwayTeamId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_AWAY_TEAM_ID)
  private Integer globalAwayTeamId;

  public static final String SERIALIZED_NAME_GLOBAL_GAME_ID = "GlobalGameId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_GAME_ID)
  private Integer globalGameId;

  public static final String SERIALIZED_NAME_GLOBAL_HOME_TEAM_ID = "GlobalHomeTeamId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_HOME_TEAM_ID)
  private Integer globalHomeTeamId;

  public static final String SERIALIZED_NAME_GROUP = "Group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_HOME_TEAM_COUNTRY_CODE = "HomeTeamCountryCode";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_COUNTRY_CODE)
  private String homeTeamCountryCode;

  public static final String SERIALIZED_NAME_HOME_TEAM_FORMATION = "HomeTeamFormation";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_FORMATION)
  private String homeTeamFormation;

  public static final String SERIALIZED_NAME_HOME_TEAM_ID = "HomeTeamId";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_ID)
  private Integer homeTeamId;

  public static final String SERIALIZED_NAME_HOME_TEAM_KEY = "HomeTeamKey";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_KEY)
  private String homeTeamKey;

  public static final String SERIALIZED_NAME_HOME_TEAM_MONEY_LINE = "HomeTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_MONEY_LINE)
  private Integer homeTeamMoneyLine;

  public static final String SERIALIZED_NAME_HOME_TEAM_NAME = "HomeTeamName";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_NAME)
  private String homeTeamName;

  public static final String SERIALIZED_NAME_HOME_TEAM_POINT_SPREAD_PAYOUT = "HomeTeamPointSpreadPayout";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_POINT_SPREAD_PAYOUT)
  private Integer homeTeamPointSpreadPayout;

  public static final String SERIALIZED_NAME_HOME_TEAM_SCORE = "HomeTeamScore";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_SCORE)
  private Integer homeTeamScore;

  public static final String SERIALIZED_NAME_HOME_TEAM_SCORE_EXTRA_TIME = "HomeTeamScoreExtraTime";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_SCORE_EXTRA_TIME)
  private Integer homeTeamScoreExtraTime;

  public static final String SERIALIZED_NAME_HOME_TEAM_SCORE_PENALTY = "HomeTeamScorePenalty";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_SCORE_PENALTY)
  private Integer homeTeamScorePenalty;

  public static final String SERIALIZED_NAME_HOME_TEAM_SCORE_PERIOD1 = "HomeTeamScorePeriod1";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_SCORE_PERIOD1)
  private Integer homeTeamScorePeriod1;

  public static final String SERIALIZED_NAME_HOME_TEAM_SCORE_PERIOD2 = "HomeTeamScorePeriod2";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_SCORE_PERIOD2)
  private Integer homeTeamScorePeriod2;

  public static final String SERIALIZED_NAME_IS_CLOSED = "IsClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_OVER_PAYOUT = "OverPayout";
  @SerializedName(SERIALIZED_NAME_OVER_PAYOUT)
  private Integer overPayout;

  public static final String SERIALIZED_NAME_OVER_UNDER = "OverUnder";
  @SerializedName(SERIALIZED_NAME_OVER_UNDER)
  private BigDecimal overUnder;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_PLAYOFF_AGGREGATE_SCORE = "PlayoffAggregateScore";
  @SerializedName(SERIALIZED_NAME_PLAYOFF_AGGREGATE_SCORE)
  private PlayoffAggregateScore playoffAggregateScore;

  public static final String SERIALIZED_NAME_POINT_SPREAD = "PointSpread";
  @SerializedName(SERIALIZED_NAME_POINT_SPREAD)
  private BigDecimal pointSpread;

  public static final String SERIALIZED_NAME_ROUND_ID = "RoundId";
  @SerializedName(SERIALIZED_NAME_ROUND_ID)
  private Integer roundId;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UNDER_PAYOUT = "UnderPayout";
  @SerializedName(SERIALIZED_NAME_UNDER_PAYOUT)
  private Integer underPayout;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_UPDATED_UTC = "UpdatedUtc";
  @SerializedName(SERIALIZED_NAME_UPDATED_UTC)
  private String updatedUtc;

  public static final String SERIALIZED_NAME_VENUE_ID = "VenueId";
  @SerializedName(SERIALIZED_NAME_VENUE_ID)
  private Integer venueId;

  public static final String SERIALIZED_NAME_VENUE_TYPE = "VenueType";
  @SerializedName(SERIALIZED_NAME_VENUE_TYPE)
  private String venueType;

  public static final String SERIALIZED_NAME_WEEK = "Week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public static final String SERIALIZED_NAME_WINNER = "Winner";
  @SerializedName(SERIALIZED_NAME_WINNER)
  private String winner;

  public Game() {
  }

  public Game attendance(Integer attendance) {
    this.attendance = attendance;
    return this;
  }

  /**
   * Get attendance
   * @return attendance
   */
  @javax.annotation.Nullable
  public Integer getAttendance() {
    return attendance;
  }

  public void setAttendance(Integer attendance) {
    this.attendance = attendance;
  }


  public Game awayTeamCountryCode(String awayTeamCountryCode) {
    this.awayTeamCountryCode = awayTeamCountryCode;
    return this;
  }

  /**
   * Get awayTeamCountryCode
   * @return awayTeamCountryCode
   */
  @javax.annotation.Nullable
  public String getAwayTeamCountryCode() {
    return awayTeamCountryCode;
  }

  public void setAwayTeamCountryCode(String awayTeamCountryCode) {
    this.awayTeamCountryCode = awayTeamCountryCode;
  }


  public Game awayTeamFormation(String awayTeamFormation) {
    this.awayTeamFormation = awayTeamFormation;
    return this;
  }

  /**
   * Get awayTeamFormation
   * @return awayTeamFormation
   */
  @javax.annotation.Nullable
  public String getAwayTeamFormation() {
    return awayTeamFormation;
  }

  public void setAwayTeamFormation(String awayTeamFormation) {
    this.awayTeamFormation = awayTeamFormation;
  }


  public Game awayTeamId(Integer awayTeamId) {
    this.awayTeamId = awayTeamId;
    return this;
  }

  /**
   * Get awayTeamId
   * @return awayTeamId
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamId() {
    return awayTeamId;
  }

  public void setAwayTeamId(Integer awayTeamId) {
    this.awayTeamId = awayTeamId;
  }


  public Game awayTeamKey(String awayTeamKey) {
    this.awayTeamKey = awayTeamKey;
    return this;
  }

  /**
   * Get awayTeamKey
   * @return awayTeamKey
   */
  @javax.annotation.Nullable
  public String getAwayTeamKey() {
    return awayTeamKey;
  }

  public void setAwayTeamKey(String awayTeamKey) {
    this.awayTeamKey = awayTeamKey;
  }


  public Game awayTeamMoneyLine(Integer awayTeamMoneyLine) {
    this.awayTeamMoneyLine = awayTeamMoneyLine;
    return this;
  }

  /**
   * Get awayTeamMoneyLine
   * @return awayTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamMoneyLine() {
    return awayTeamMoneyLine;
  }

  public void setAwayTeamMoneyLine(Integer awayTeamMoneyLine) {
    this.awayTeamMoneyLine = awayTeamMoneyLine;
  }


  public Game awayTeamName(String awayTeamName) {
    this.awayTeamName = awayTeamName;
    return this;
  }

  /**
   * Get awayTeamName
   * @return awayTeamName
   */
  @javax.annotation.Nullable
  public String getAwayTeamName() {
    return awayTeamName;
  }

  public void setAwayTeamName(String awayTeamName) {
    this.awayTeamName = awayTeamName;
  }


  public Game awayTeamPointSpreadPayout(Integer awayTeamPointSpreadPayout) {
    this.awayTeamPointSpreadPayout = awayTeamPointSpreadPayout;
    return this;
  }

  /**
   * Get awayTeamPointSpreadPayout
   * @return awayTeamPointSpreadPayout
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamPointSpreadPayout() {
    return awayTeamPointSpreadPayout;
  }

  public void setAwayTeamPointSpreadPayout(Integer awayTeamPointSpreadPayout) {
    this.awayTeamPointSpreadPayout = awayTeamPointSpreadPayout;
  }


  public Game awayTeamScore(Integer awayTeamScore) {
    this.awayTeamScore = awayTeamScore;
    return this;
  }

  /**
   * Get awayTeamScore
   * @return awayTeamScore
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamScore() {
    return awayTeamScore;
  }

  public void setAwayTeamScore(Integer awayTeamScore) {
    this.awayTeamScore = awayTeamScore;
  }


  public Game awayTeamScoreExtraTime(Integer awayTeamScoreExtraTime) {
    this.awayTeamScoreExtraTime = awayTeamScoreExtraTime;
    return this;
  }

  /**
   * Get awayTeamScoreExtraTime
   * @return awayTeamScoreExtraTime
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamScoreExtraTime() {
    return awayTeamScoreExtraTime;
  }

  public void setAwayTeamScoreExtraTime(Integer awayTeamScoreExtraTime) {
    this.awayTeamScoreExtraTime = awayTeamScoreExtraTime;
  }


  public Game awayTeamScorePenalty(Integer awayTeamScorePenalty) {
    this.awayTeamScorePenalty = awayTeamScorePenalty;
    return this;
  }

  /**
   * Get awayTeamScorePenalty
   * @return awayTeamScorePenalty
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamScorePenalty() {
    return awayTeamScorePenalty;
  }

  public void setAwayTeamScorePenalty(Integer awayTeamScorePenalty) {
    this.awayTeamScorePenalty = awayTeamScorePenalty;
  }


  public Game awayTeamScorePeriod1(Integer awayTeamScorePeriod1) {
    this.awayTeamScorePeriod1 = awayTeamScorePeriod1;
    return this;
  }

  /**
   * Get awayTeamScorePeriod1
   * @return awayTeamScorePeriod1
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamScorePeriod1() {
    return awayTeamScorePeriod1;
  }

  public void setAwayTeamScorePeriod1(Integer awayTeamScorePeriod1) {
    this.awayTeamScorePeriod1 = awayTeamScorePeriod1;
  }


  public Game awayTeamScorePeriod2(Integer awayTeamScorePeriod2) {
    this.awayTeamScorePeriod2 = awayTeamScorePeriod2;
    return this;
  }

  /**
   * Get awayTeamScorePeriod2
   * @return awayTeamScorePeriod2
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamScorePeriod2() {
    return awayTeamScorePeriod2;
  }

  public void setAwayTeamScorePeriod2(Integer awayTeamScorePeriod2) {
    this.awayTeamScorePeriod2 = awayTeamScorePeriod2;
  }


  public Game clock(Integer clock) {
    this.clock = clock;
    return this;
  }

  /**
   * Get clock
   * @return clock
   */
  @javax.annotation.Nullable
  public Integer getClock() {
    return clock;
  }

  public void setClock(Integer clock) {
    this.clock = clock;
  }


  public Game clockDisplay(String clockDisplay) {
    this.clockDisplay = clockDisplay;
    return this;
  }

  /**
   * Get clockDisplay
   * @return clockDisplay
   */
  @javax.annotation.Nullable
  public String getClockDisplay() {
    return clockDisplay;
  }

  public void setClockDisplay(String clockDisplay) {
    this.clockDisplay = clockDisplay;
  }


  public Game clockExtra(Integer clockExtra) {
    this.clockExtra = clockExtra;
    return this;
  }

  /**
   * Get clockExtra
   * @return clockExtra
   */
  @javax.annotation.Nullable
  public Integer getClockExtra() {
    return clockExtra;
  }

  public void setClockExtra(Integer clockExtra) {
    this.clockExtra = clockExtra;
  }


  public Game dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public Game day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Game drawMoneyLine(Integer drawMoneyLine) {
    this.drawMoneyLine = drawMoneyLine;
    return this;
  }

  /**
   * Get drawMoneyLine
   * @return drawMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getDrawMoneyLine() {
    return drawMoneyLine;
  }

  public void setDrawMoneyLine(Integer drawMoneyLine) {
    this.drawMoneyLine = drawMoneyLine;
  }


  public Game gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public Game globalAwayTeamId(Integer globalAwayTeamId) {
    this.globalAwayTeamId = globalAwayTeamId;
    return this;
  }

  /**
   * Get globalAwayTeamId
   * @return globalAwayTeamId
   */
  @javax.annotation.Nullable
  public Integer getGlobalAwayTeamId() {
    return globalAwayTeamId;
  }

  public void setGlobalAwayTeamId(Integer globalAwayTeamId) {
    this.globalAwayTeamId = globalAwayTeamId;
  }


  public Game globalGameId(Integer globalGameId) {
    this.globalGameId = globalGameId;
    return this;
  }

  /**
   * Get globalGameId
   * @return globalGameId
   */
  @javax.annotation.Nullable
  public Integer getGlobalGameId() {
    return globalGameId;
  }

  public void setGlobalGameId(Integer globalGameId) {
    this.globalGameId = globalGameId;
  }


  public Game globalHomeTeamId(Integer globalHomeTeamId) {
    this.globalHomeTeamId = globalHomeTeamId;
    return this;
  }

  /**
   * Get globalHomeTeamId
   * @return globalHomeTeamId
   */
  @javax.annotation.Nullable
  public Integer getGlobalHomeTeamId() {
    return globalHomeTeamId;
  }

  public void setGlobalHomeTeamId(Integer globalHomeTeamId) {
    this.globalHomeTeamId = globalHomeTeamId;
  }


  public Game group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public Game homeTeamCountryCode(String homeTeamCountryCode) {
    this.homeTeamCountryCode = homeTeamCountryCode;
    return this;
  }

  /**
   * Get homeTeamCountryCode
   * @return homeTeamCountryCode
   */
  @javax.annotation.Nullable
  public String getHomeTeamCountryCode() {
    return homeTeamCountryCode;
  }

  public void setHomeTeamCountryCode(String homeTeamCountryCode) {
    this.homeTeamCountryCode = homeTeamCountryCode;
  }


  public Game homeTeamFormation(String homeTeamFormation) {
    this.homeTeamFormation = homeTeamFormation;
    return this;
  }

  /**
   * Get homeTeamFormation
   * @return homeTeamFormation
   */
  @javax.annotation.Nullable
  public String getHomeTeamFormation() {
    return homeTeamFormation;
  }

  public void setHomeTeamFormation(String homeTeamFormation) {
    this.homeTeamFormation = homeTeamFormation;
  }


  public Game homeTeamId(Integer homeTeamId) {
    this.homeTeamId = homeTeamId;
    return this;
  }

  /**
   * Get homeTeamId
   * @return homeTeamId
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamId() {
    return homeTeamId;
  }

  public void setHomeTeamId(Integer homeTeamId) {
    this.homeTeamId = homeTeamId;
  }


  public Game homeTeamKey(String homeTeamKey) {
    this.homeTeamKey = homeTeamKey;
    return this;
  }

  /**
   * Get homeTeamKey
   * @return homeTeamKey
   */
  @javax.annotation.Nullable
  public String getHomeTeamKey() {
    return homeTeamKey;
  }

  public void setHomeTeamKey(String homeTeamKey) {
    this.homeTeamKey = homeTeamKey;
  }


  public Game homeTeamMoneyLine(Integer homeTeamMoneyLine) {
    this.homeTeamMoneyLine = homeTeamMoneyLine;
    return this;
  }

  /**
   * Get homeTeamMoneyLine
   * @return homeTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamMoneyLine() {
    return homeTeamMoneyLine;
  }

  public void setHomeTeamMoneyLine(Integer homeTeamMoneyLine) {
    this.homeTeamMoneyLine = homeTeamMoneyLine;
  }


  public Game homeTeamName(String homeTeamName) {
    this.homeTeamName = homeTeamName;
    return this;
  }

  /**
   * Get homeTeamName
   * @return homeTeamName
   */
  @javax.annotation.Nullable
  public String getHomeTeamName() {
    return homeTeamName;
  }

  public void setHomeTeamName(String homeTeamName) {
    this.homeTeamName = homeTeamName;
  }


  public Game homeTeamPointSpreadPayout(Integer homeTeamPointSpreadPayout) {
    this.homeTeamPointSpreadPayout = homeTeamPointSpreadPayout;
    return this;
  }

  /**
   * Get homeTeamPointSpreadPayout
   * @return homeTeamPointSpreadPayout
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamPointSpreadPayout() {
    return homeTeamPointSpreadPayout;
  }

  public void setHomeTeamPointSpreadPayout(Integer homeTeamPointSpreadPayout) {
    this.homeTeamPointSpreadPayout = homeTeamPointSpreadPayout;
  }


  public Game homeTeamScore(Integer homeTeamScore) {
    this.homeTeamScore = homeTeamScore;
    return this;
  }

  /**
   * Get homeTeamScore
   * @return homeTeamScore
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamScore() {
    return homeTeamScore;
  }

  public void setHomeTeamScore(Integer homeTeamScore) {
    this.homeTeamScore = homeTeamScore;
  }


  public Game homeTeamScoreExtraTime(Integer homeTeamScoreExtraTime) {
    this.homeTeamScoreExtraTime = homeTeamScoreExtraTime;
    return this;
  }

  /**
   * Get homeTeamScoreExtraTime
   * @return homeTeamScoreExtraTime
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamScoreExtraTime() {
    return homeTeamScoreExtraTime;
  }

  public void setHomeTeamScoreExtraTime(Integer homeTeamScoreExtraTime) {
    this.homeTeamScoreExtraTime = homeTeamScoreExtraTime;
  }


  public Game homeTeamScorePenalty(Integer homeTeamScorePenalty) {
    this.homeTeamScorePenalty = homeTeamScorePenalty;
    return this;
  }

  /**
   * Get homeTeamScorePenalty
   * @return homeTeamScorePenalty
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamScorePenalty() {
    return homeTeamScorePenalty;
  }

  public void setHomeTeamScorePenalty(Integer homeTeamScorePenalty) {
    this.homeTeamScorePenalty = homeTeamScorePenalty;
  }


  public Game homeTeamScorePeriod1(Integer homeTeamScorePeriod1) {
    this.homeTeamScorePeriod1 = homeTeamScorePeriod1;
    return this;
  }

  /**
   * Get homeTeamScorePeriod1
   * @return homeTeamScorePeriod1
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamScorePeriod1() {
    return homeTeamScorePeriod1;
  }

  public void setHomeTeamScorePeriod1(Integer homeTeamScorePeriod1) {
    this.homeTeamScorePeriod1 = homeTeamScorePeriod1;
  }


  public Game homeTeamScorePeriod2(Integer homeTeamScorePeriod2) {
    this.homeTeamScorePeriod2 = homeTeamScorePeriod2;
    return this;
  }

  /**
   * Get homeTeamScorePeriod2
   * @return homeTeamScorePeriod2
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamScorePeriod2() {
    return homeTeamScorePeriod2;
  }

  public void setHomeTeamScorePeriod2(Integer homeTeamScorePeriod2) {
    this.homeTeamScorePeriod2 = homeTeamScorePeriod2;
  }


  public Game isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public Game overPayout(Integer overPayout) {
    this.overPayout = overPayout;
    return this;
  }

  /**
   * Get overPayout
   * @return overPayout
   */
  @javax.annotation.Nullable
  public Integer getOverPayout() {
    return overPayout;
  }

  public void setOverPayout(Integer overPayout) {
    this.overPayout = overPayout;
  }


  public Game overUnder(BigDecimal overUnder) {
    this.overUnder = overUnder;
    return this;
  }

  /**
   * Get overUnder
   * @return overUnder
   */
  @javax.annotation.Nullable
  public BigDecimal getOverUnder() {
    return overUnder;
  }

  public void setOverUnder(BigDecimal overUnder) {
    this.overUnder = overUnder;
  }


  public Game period(String period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }

  public void setPeriod(String period) {
    this.period = period;
  }


  public Game playoffAggregateScore(PlayoffAggregateScore playoffAggregateScore) {
    this.playoffAggregateScore = playoffAggregateScore;
    return this;
  }

  /**
   * Get playoffAggregateScore
   * @return playoffAggregateScore
   */
  @javax.annotation.Nullable
  public PlayoffAggregateScore getPlayoffAggregateScore() {
    return playoffAggregateScore;
  }

  public void setPlayoffAggregateScore(PlayoffAggregateScore playoffAggregateScore) {
    this.playoffAggregateScore = playoffAggregateScore;
  }


  public Game pointSpread(BigDecimal pointSpread) {
    this.pointSpread = pointSpread;
    return this;
  }

  /**
   * Get pointSpread
   * @return pointSpread
   */
  @javax.annotation.Nullable
  public BigDecimal getPointSpread() {
    return pointSpread;
  }

  public void setPointSpread(BigDecimal pointSpread) {
    this.pointSpread = pointSpread;
  }


  public Game roundId(Integer roundId) {
    this.roundId = roundId;
    return this;
  }

  /**
   * Get roundId
   * @return roundId
   */
  @javax.annotation.Nullable
  public Integer getRoundId() {
    return roundId;
  }

  public void setRoundId(Integer roundId) {
    this.roundId = roundId;
  }


  public Game season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Game seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Game status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Game underPayout(Integer underPayout) {
    this.underPayout = underPayout;
    return this;
  }

  /**
   * Get underPayout
   * @return underPayout
   */
  @javax.annotation.Nullable
  public Integer getUnderPayout() {
    return underPayout;
  }

  public void setUnderPayout(Integer underPayout) {
    this.underPayout = underPayout;
  }


  public Game updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Game updatedUtc(String updatedUtc) {
    this.updatedUtc = updatedUtc;
    return this;
  }

  /**
   * Get updatedUtc
   * @return updatedUtc
   */
  @javax.annotation.Nullable
  public String getUpdatedUtc() {
    return updatedUtc;
  }

  public void setUpdatedUtc(String updatedUtc) {
    this.updatedUtc = updatedUtc;
  }


  public Game venueId(Integer venueId) {
    this.venueId = venueId;
    return this;
  }

  /**
   * Get venueId
   * @return venueId
   */
  @javax.annotation.Nullable
  public Integer getVenueId() {
    return venueId;
  }

  public void setVenueId(Integer venueId) {
    this.venueId = venueId;
  }


  public Game venueType(String venueType) {
    this.venueType = venueType;
    return this;
  }

  /**
   * Get venueType
   * @return venueType
   */
  @javax.annotation.Nullable
  public String getVenueType() {
    return venueType;
  }

  public void setVenueType(String venueType) {
    this.venueType = venueType;
  }


  public Game week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }


  public Game winner(String winner) {
    this.winner = winner;
    return this;
  }

  /**
   * Get winner
   * @return winner
   */
  @javax.annotation.Nullable
  public String getWinner() {
    return winner;
  }

  public void setWinner(String winner) {
    this.winner = winner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Game game = (Game) o;
    return Objects.equals(this.attendance, game.attendance) &&
        Objects.equals(this.awayTeamCountryCode, game.awayTeamCountryCode) &&
        Objects.equals(this.awayTeamFormation, game.awayTeamFormation) &&
        Objects.equals(this.awayTeamId, game.awayTeamId) &&
        Objects.equals(this.awayTeamKey, game.awayTeamKey) &&
        Objects.equals(this.awayTeamMoneyLine, game.awayTeamMoneyLine) &&
        Objects.equals(this.awayTeamName, game.awayTeamName) &&
        Objects.equals(this.awayTeamPointSpreadPayout, game.awayTeamPointSpreadPayout) &&
        Objects.equals(this.awayTeamScore, game.awayTeamScore) &&
        Objects.equals(this.awayTeamScoreExtraTime, game.awayTeamScoreExtraTime) &&
        Objects.equals(this.awayTeamScorePenalty, game.awayTeamScorePenalty) &&
        Objects.equals(this.awayTeamScorePeriod1, game.awayTeamScorePeriod1) &&
        Objects.equals(this.awayTeamScorePeriod2, game.awayTeamScorePeriod2) &&
        Objects.equals(this.clock, game.clock) &&
        Objects.equals(this.clockDisplay, game.clockDisplay) &&
        Objects.equals(this.clockExtra, game.clockExtra) &&
        Objects.equals(this.dateTime, game.dateTime) &&
        Objects.equals(this.day, game.day) &&
        Objects.equals(this.drawMoneyLine, game.drawMoneyLine) &&
        Objects.equals(this.gameId, game.gameId) &&
        Objects.equals(this.globalAwayTeamId, game.globalAwayTeamId) &&
        Objects.equals(this.globalGameId, game.globalGameId) &&
        Objects.equals(this.globalHomeTeamId, game.globalHomeTeamId) &&
        Objects.equals(this.group, game.group) &&
        Objects.equals(this.homeTeamCountryCode, game.homeTeamCountryCode) &&
        Objects.equals(this.homeTeamFormation, game.homeTeamFormation) &&
        Objects.equals(this.homeTeamId, game.homeTeamId) &&
        Objects.equals(this.homeTeamKey, game.homeTeamKey) &&
        Objects.equals(this.homeTeamMoneyLine, game.homeTeamMoneyLine) &&
        Objects.equals(this.homeTeamName, game.homeTeamName) &&
        Objects.equals(this.homeTeamPointSpreadPayout, game.homeTeamPointSpreadPayout) &&
        Objects.equals(this.homeTeamScore, game.homeTeamScore) &&
        Objects.equals(this.homeTeamScoreExtraTime, game.homeTeamScoreExtraTime) &&
        Objects.equals(this.homeTeamScorePenalty, game.homeTeamScorePenalty) &&
        Objects.equals(this.homeTeamScorePeriod1, game.homeTeamScorePeriod1) &&
        Objects.equals(this.homeTeamScorePeriod2, game.homeTeamScorePeriod2) &&
        Objects.equals(this.isClosed, game.isClosed) &&
        Objects.equals(this.overPayout, game.overPayout) &&
        Objects.equals(this.overUnder, game.overUnder) &&
        Objects.equals(this.period, game.period) &&
        Objects.equals(this.playoffAggregateScore, game.playoffAggregateScore) &&
        Objects.equals(this.pointSpread, game.pointSpread) &&
        Objects.equals(this.roundId, game.roundId) &&
        Objects.equals(this.season, game.season) &&
        Objects.equals(this.seasonType, game.seasonType) &&
        Objects.equals(this.status, game.status) &&
        Objects.equals(this.underPayout, game.underPayout) &&
        Objects.equals(this.updated, game.updated) &&
        Objects.equals(this.updatedUtc, game.updatedUtc) &&
        Objects.equals(this.venueId, game.venueId) &&
        Objects.equals(this.venueType, game.venueType) &&
        Objects.equals(this.week, game.week) &&
        Objects.equals(this.winner, game.winner);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendance, awayTeamCountryCode, awayTeamFormation, awayTeamId, awayTeamKey, awayTeamMoneyLine, awayTeamName, awayTeamPointSpreadPayout, awayTeamScore, awayTeamScoreExtraTime, awayTeamScorePenalty, awayTeamScorePeriod1, awayTeamScorePeriod2, clock, clockDisplay, clockExtra, dateTime, day, drawMoneyLine, gameId, globalAwayTeamId, globalGameId, globalHomeTeamId, group, homeTeamCountryCode, homeTeamFormation, homeTeamId, homeTeamKey, homeTeamMoneyLine, homeTeamName, homeTeamPointSpreadPayout, homeTeamScore, homeTeamScoreExtraTime, homeTeamScorePenalty, homeTeamScorePeriod1, homeTeamScorePeriod2, isClosed, overPayout, overUnder, period, playoffAggregateScore, pointSpread, roundId, season, seasonType, status, underPayout, updated, updatedUtc, venueId, venueType, week, winner);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Game {\n");
    sb.append("    attendance: ").append(toIndentedString(attendance)).append("\n");
    sb.append("    awayTeamCountryCode: ").append(toIndentedString(awayTeamCountryCode)).append("\n");
    sb.append("    awayTeamFormation: ").append(toIndentedString(awayTeamFormation)).append("\n");
    sb.append("    awayTeamId: ").append(toIndentedString(awayTeamId)).append("\n");
    sb.append("    awayTeamKey: ").append(toIndentedString(awayTeamKey)).append("\n");
    sb.append("    awayTeamMoneyLine: ").append(toIndentedString(awayTeamMoneyLine)).append("\n");
    sb.append("    awayTeamName: ").append(toIndentedString(awayTeamName)).append("\n");
    sb.append("    awayTeamPointSpreadPayout: ").append(toIndentedString(awayTeamPointSpreadPayout)).append("\n");
    sb.append("    awayTeamScore: ").append(toIndentedString(awayTeamScore)).append("\n");
    sb.append("    awayTeamScoreExtraTime: ").append(toIndentedString(awayTeamScoreExtraTime)).append("\n");
    sb.append("    awayTeamScorePenalty: ").append(toIndentedString(awayTeamScorePenalty)).append("\n");
    sb.append("    awayTeamScorePeriod1: ").append(toIndentedString(awayTeamScorePeriod1)).append("\n");
    sb.append("    awayTeamScorePeriod2: ").append(toIndentedString(awayTeamScorePeriod2)).append("\n");
    sb.append("    clock: ").append(toIndentedString(clock)).append("\n");
    sb.append("    clockDisplay: ").append(toIndentedString(clockDisplay)).append("\n");
    sb.append("    clockExtra: ").append(toIndentedString(clockExtra)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    drawMoneyLine: ").append(toIndentedString(drawMoneyLine)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    globalAwayTeamId: ").append(toIndentedString(globalAwayTeamId)).append("\n");
    sb.append("    globalGameId: ").append(toIndentedString(globalGameId)).append("\n");
    sb.append("    globalHomeTeamId: ").append(toIndentedString(globalHomeTeamId)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    homeTeamCountryCode: ").append(toIndentedString(homeTeamCountryCode)).append("\n");
    sb.append("    homeTeamFormation: ").append(toIndentedString(homeTeamFormation)).append("\n");
    sb.append("    homeTeamId: ").append(toIndentedString(homeTeamId)).append("\n");
    sb.append("    homeTeamKey: ").append(toIndentedString(homeTeamKey)).append("\n");
    sb.append("    homeTeamMoneyLine: ").append(toIndentedString(homeTeamMoneyLine)).append("\n");
    sb.append("    homeTeamName: ").append(toIndentedString(homeTeamName)).append("\n");
    sb.append("    homeTeamPointSpreadPayout: ").append(toIndentedString(homeTeamPointSpreadPayout)).append("\n");
    sb.append("    homeTeamScore: ").append(toIndentedString(homeTeamScore)).append("\n");
    sb.append("    homeTeamScoreExtraTime: ").append(toIndentedString(homeTeamScoreExtraTime)).append("\n");
    sb.append("    homeTeamScorePenalty: ").append(toIndentedString(homeTeamScorePenalty)).append("\n");
    sb.append("    homeTeamScorePeriod1: ").append(toIndentedString(homeTeamScorePeriod1)).append("\n");
    sb.append("    homeTeamScorePeriod2: ").append(toIndentedString(homeTeamScorePeriod2)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    overPayout: ").append(toIndentedString(overPayout)).append("\n");
    sb.append("    overUnder: ").append(toIndentedString(overUnder)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    playoffAggregateScore: ").append(toIndentedString(playoffAggregateScore)).append("\n");
    sb.append("    pointSpread: ").append(toIndentedString(pointSpread)).append("\n");
    sb.append("    roundId: ").append(toIndentedString(roundId)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    underPayout: ").append(toIndentedString(underPayout)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updatedUtc: ").append(toIndentedString(updatedUtc)).append("\n");
    sb.append("    venueId: ").append(toIndentedString(venueId)).append("\n");
    sb.append("    venueType: ").append(toIndentedString(venueType)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    winner: ").append(toIndentedString(winner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attendance");
    openapiFields.add("AwayTeamCountryCode");
    openapiFields.add("AwayTeamFormation");
    openapiFields.add("AwayTeamId");
    openapiFields.add("AwayTeamKey");
    openapiFields.add("AwayTeamMoneyLine");
    openapiFields.add("AwayTeamName");
    openapiFields.add("AwayTeamPointSpreadPayout");
    openapiFields.add("AwayTeamScore");
    openapiFields.add("AwayTeamScoreExtraTime");
    openapiFields.add("AwayTeamScorePenalty");
    openapiFields.add("AwayTeamScorePeriod1");
    openapiFields.add("AwayTeamScorePeriod2");
    openapiFields.add("Clock");
    openapiFields.add("ClockDisplay");
    openapiFields.add("ClockExtra");
    openapiFields.add("DateTime");
    openapiFields.add("Day");
    openapiFields.add("DrawMoneyLine");
    openapiFields.add("GameId");
    openapiFields.add("GlobalAwayTeamId");
    openapiFields.add("GlobalGameId");
    openapiFields.add("GlobalHomeTeamId");
    openapiFields.add("Group");
    openapiFields.add("HomeTeamCountryCode");
    openapiFields.add("HomeTeamFormation");
    openapiFields.add("HomeTeamId");
    openapiFields.add("HomeTeamKey");
    openapiFields.add("HomeTeamMoneyLine");
    openapiFields.add("HomeTeamName");
    openapiFields.add("HomeTeamPointSpreadPayout");
    openapiFields.add("HomeTeamScore");
    openapiFields.add("HomeTeamScoreExtraTime");
    openapiFields.add("HomeTeamScorePenalty");
    openapiFields.add("HomeTeamScorePeriod1");
    openapiFields.add("HomeTeamScorePeriod2");
    openapiFields.add("IsClosed");
    openapiFields.add("OverPayout");
    openapiFields.add("OverUnder");
    openapiFields.add("Period");
    openapiFields.add("PlayoffAggregateScore");
    openapiFields.add("PointSpread");
    openapiFields.add("RoundId");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Status");
    openapiFields.add("UnderPayout");
    openapiFields.add("Updated");
    openapiFields.add("UpdatedUtc");
    openapiFields.add("VenueId");
    openapiFields.add("VenueType");
    openapiFields.add("Week");
    openapiFields.add("Winner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Game
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Game.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Game is not found in the empty JSON string", Game.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Game.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Game` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AwayTeamCountryCode") != null && !jsonObj.get("AwayTeamCountryCode").isJsonNull()) && !jsonObj.get("AwayTeamCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeamCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeamCountryCode").toString()));
      }
      if ((jsonObj.get("AwayTeamFormation") != null && !jsonObj.get("AwayTeamFormation").isJsonNull()) && !jsonObj.get("AwayTeamFormation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeamFormation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeamFormation").toString()));
      }
      if ((jsonObj.get("AwayTeamKey") != null && !jsonObj.get("AwayTeamKey").isJsonNull()) && !jsonObj.get("AwayTeamKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeamKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeamKey").toString()));
      }
      if ((jsonObj.get("AwayTeamName") != null && !jsonObj.get("AwayTeamName").isJsonNull()) && !jsonObj.get("AwayTeamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeamName").toString()));
      }
      if ((jsonObj.get("ClockDisplay") != null && !jsonObj.get("ClockDisplay").isJsonNull()) && !jsonObj.get("ClockDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClockDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClockDisplay").toString()));
      }
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("Group") != null && !jsonObj.get("Group").isJsonNull()) && !jsonObj.get("Group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Group").toString()));
      }
      if ((jsonObj.get("HomeTeamCountryCode") != null && !jsonObj.get("HomeTeamCountryCode").isJsonNull()) && !jsonObj.get("HomeTeamCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeamCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeamCountryCode").toString()));
      }
      if ((jsonObj.get("HomeTeamFormation") != null && !jsonObj.get("HomeTeamFormation").isJsonNull()) && !jsonObj.get("HomeTeamFormation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeamFormation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeamFormation").toString()));
      }
      if ((jsonObj.get("HomeTeamKey") != null && !jsonObj.get("HomeTeamKey").isJsonNull()) && !jsonObj.get("HomeTeamKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeamKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeamKey").toString()));
      }
      if ((jsonObj.get("HomeTeamName") != null && !jsonObj.get("HomeTeamName").isJsonNull()) && !jsonObj.get("HomeTeamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeamName").toString()));
      }
      if ((jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) && !jsonObj.get("Period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Period").toString()));
      }
      // validate the optional field `PlayoffAggregateScore`
      if (jsonObj.get("PlayoffAggregateScore") != null && !jsonObj.get("PlayoffAggregateScore").isJsonNull()) {
        PlayoffAggregateScore.validateJsonElement(jsonObj.get("PlayoffAggregateScore"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
      if ((jsonObj.get("UpdatedUtc") != null && !jsonObj.get("UpdatedUtc").isJsonNull()) && !jsonObj.get("UpdatedUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedUtc").toString()));
      }
      if ((jsonObj.get("VenueType") != null && !jsonObj.get("VenueType").isJsonNull()) && !jsonObj.get("VenueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VenueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VenueType").toString()));
      }
      if ((jsonObj.get("Winner") != null && !jsonObj.get("Winner").isJsonNull()) && !jsonObj.get("Winner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Winner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Winner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Game.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Game' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Game> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Game.class));

       return (TypeAdapter<T>) new TypeAdapter<Game>() {
           @Override
           public void write(JsonWriter out, Game value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Game read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Game given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Game
   * @throws IOException if the JSON string is invalid with respect to Game
   */
  public static Game fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Game.class);
  }

  /**
   * Convert an instance of Game to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

