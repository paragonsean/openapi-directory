/**
 * NBA v3 Projections
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NbaV3Projections);
  }
}(this, function(expect, NbaV3Projections) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NbaV3Projections.PlayerGameProjection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PlayerGameProjection', function() {
    it('should create an instance of PlayerGameProjection', function() {
      // uncomment below and update the code to test PlayerGameProjection
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be.a(NbaV3Projections.PlayerGameProjection);
    });

    it('should have the property assists (base name: "Assists")', function() {
      // uncomment below and update the code to test the property assists
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property assistsPercentage (base name: "AssistsPercentage")', function() {
      // uncomment below and update the code to test the property assistsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property blockedShots (base name: "BlockedShots")', function() {
      // uncomment below and update the code to test the property blockedShots
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property blocksPercentage (base name: "BlocksPercentage")', function() {
      // uncomment below and update the code to test the property blocksPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property dateTime (base name: "DateTime")', function() {
      // uncomment below and update the code to test the property dateTime
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property day (base name: "Day")', function() {
      // uncomment below and update the code to test the property day
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property defensiveRebounds (base name: "DefensiveRebounds")', function() {
      // uncomment below and update the code to test the property defensiveRebounds
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property defensiveReboundsPercentage (base name: "DefensiveReboundsPercentage")', function() {
      // uncomment below and update the code to test the property defensiveReboundsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property doubleDoubles (base name: "DoubleDoubles")', function() {
      // uncomment below and update the code to test the property doubleDoubles
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property draftKingsPosition (base name: "DraftKingsPosition")', function() {
      // uncomment below and update the code to test the property draftKingsPosition
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property draftKingsSalary (base name: "DraftKingsSalary")', function() {
      // uncomment below and update the code to test the property draftKingsSalary
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property effectiveFieldGoalsPercentage (base name: "EffectiveFieldGoalsPercentage")', function() {
      // uncomment below and update the code to test the property effectiveFieldGoalsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fanDuelPosition (base name: "FanDuelPosition")', function() {
      // uncomment below and update the code to test the property fanDuelPosition
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fanDuelSalary (base name: "FanDuelSalary")', function() {
      // uncomment below and update the code to test the property fanDuelSalary
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyDataSalary (base name: "FantasyDataSalary")', function() {
      // uncomment below and update the code to test the property fantasyDataSalary
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyDraftPosition (base name: "FantasyDraftPosition")', function() {
      // uncomment below and update the code to test the property fantasyDraftPosition
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyDraftSalary (base name: "FantasyDraftSalary")', function() {
      // uncomment below and update the code to test the property fantasyDraftSalary
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyPoints (base name: "FantasyPoints")', function() {
      // uncomment below and update the code to test the property fantasyPoints
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyPointsDraftKings (base name: "FantasyPointsDraftKings")', function() {
      // uncomment below and update the code to test the property fantasyPointsDraftKings
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyPointsFanDuel (base name: "FantasyPointsFanDuel")', function() {
      // uncomment below and update the code to test the property fantasyPointsFanDuel
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyPointsFantasyDraft (base name: "FantasyPointsFantasyDraft")', function() {
      // uncomment below and update the code to test the property fantasyPointsFantasyDraft
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fantasyPointsYahoo (base name: "FantasyPointsYahoo")', function() {
      // uncomment below and update the code to test the property fantasyPointsYahoo
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fieldGoalsAttempted (base name: "FieldGoalsAttempted")', function() {
      // uncomment below and update the code to test the property fieldGoalsAttempted
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fieldGoalsMade (base name: "FieldGoalsMade")', function() {
      // uncomment below and update the code to test the property fieldGoalsMade
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property fieldGoalsPercentage (base name: "FieldGoalsPercentage")', function() {
      // uncomment below and update the code to test the property fieldGoalsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property freeThrowsAttempted (base name: "FreeThrowsAttempted")', function() {
      // uncomment below and update the code to test the property freeThrowsAttempted
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property freeThrowsMade (base name: "FreeThrowsMade")', function() {
      // uncomment below and update the code to test the property freeThrowsMade
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property freeThrowsPercentage (base name: "FreeThrowsPercentage")', function() {
      // uncomment below and update the code to test the property freeThrowsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property gameID (base name: "GameID")', function() {
      // uncomment below and update the code to test the property gameID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property games (base name: "Games")', function() {
      // uncomment below and update the code to test the property games
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property globalGameID (base name: "GlobalGameID")', function() {
      // uncomment below and update the code to test the property globalGameID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property globalOpponentID (base name: "GlobalOpponentID")', function() {
      // uncomment below and update the code to test the property globalOpponentID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property globalTeamID (base name: "GlobalTeamID")', function() {
      // uncomment below and update the code to test the property globalTeamID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property homeOrAway (base name: "HomeOrAway")', function() {
      // uncomment below and update the code to test the property homeOrAway
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property injuryBodyPart (base name: "InjuryBodyPart")', function() {
      // uncomment below and update the code to test the property injuryBodyPart
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property injuryNotes (base name: "InjuryNotes")', function() {
      // uncomment below and update the code to test the property injuryNotes
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property injuryStartDate (base name: "InjuryStartDate")', function() {
      // uncomment below and update the code to test the property injuryStartDate
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property injuryStatus (base name: "InjuryStatus")', function() {
      // uncomment below and update the code to test the property injuryStatus
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property isClosed (base name: "IsClosed")', function() {
      // uncomment below and update the code to test the property isClosed
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property isGameOver (base name: "IsGameOver")', function() {
      // uncomment below and update the code to test the property isGameOver
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property lineupConfirmed (base name: "LineupConfirmed")', function() {
      // uncomment below and update the code to test the property lineupConfirmed
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property lineupStatus (base name: "LineupStatus")', function() {
      // uncomment below and update the code to test the property lineupStatus
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property minutes (base name: "Minutes")', function() {
      // uncomment below and update the code to test the property minutes
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property offensiveRebounds (base name: "OffensiveRebounds")', function() {
      // uncomment below and update the code to test the property offensiveRebounds
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property offensiveReboundsPercentage (base name: "OffensiveReboundsPercentage")', function() {
      // uncomment below and update the code to test the property offensiveReboundsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property opponent (base name: "Opponent")', function() {
      // uncomment below and update the code to test the property opponent
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property opponentID (base name: "OpponentID")', function() {
      // uncomment below and update the code to test the property opponentID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property opponentPositionRank (base name: "OpponentPositionRank")', function() {
      // uncomment below and update the code to test the property opponentPositionRank
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property opponentRank (base name: "OpponentRank")', function() {
      // uncomment below and update the code to test the property opponentRank
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property personalFouls (base name: "PersonalFouls")', function() {
      // uncomment below and update the code to test the property personalFouls
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property playerEfficiencyRating (base name: "PlayerEfficiencyRating")', function() {
      // uncomment below and update the code to test the property playerEfficiencyRating
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property playerID (base name: "PlayerID")', function() {
      // uncomment below and update the code to test the property playerID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property plusMinus (base name: "PlusMinus")', function() {
      // uncomment below and update the code to test the property plusMinus
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "Points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property position (base name: "Position")', function() {
      // uncomment below and update the code to test the property position
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property rebounds (base name: "Rebounds")', function() {
      // uncomment below and update the code to test the property rebounds
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property season (base name: "Season")', function() {
      // uncomment below and update the code to test the property season
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property seasonType (base name: "SeasonType")', function() {
      // uncomment below and update the code to test the property seasonType
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property seconds (base name: "Seconds")', function() {
      // uncomment below and update the code to test the property seconds
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property started (base name: "Started")', function() {
      // uncomment below and update the code to test the property started
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property statID (base name: "StatID")', function() {
      // uncomment below and update the code to test the property statID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property steals (base name: "Steals")', function() {
      // uncomment below and update the code to test the property steals
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property stealsPercentage (base name: "StealsPercentage")', function() {
      // uncomment below and update the code to test the property stealsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property team (base name: "Team")', function() {
      // uncomment below and update the code to test the property team
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property teamID (base name: "TeamID")', function() {
      // uncomment below and update the code to test the property teamID
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property threePointersAttempted (base name: "ThreePointersAttempted")', function() {
      // uncomment below and update the code to test the property threePointersAttempted
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property threePointersMade (base name: "ThreePointersMade")', function() {
      // uncomment below and update the code to test the property threePointersMade
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property threePointersPercentage (base name: "ThreePointersPercentage")', function() {
      // uncomment below and update the code to test the property threePointersPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property totalReboundsPercentage (base name: "TotalReboundsPercentage")', function() {
      // uncomment below and update the code to test the property totalReboundsPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property tripleDoubles (base name: "TripleDoubles")', function() {
      // uncomment below and update the code to test the property tripleDoubles
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property trueShootingAttempts (base name: "TrueShootingAttempts")', function() {
      // uncomment below and update the code to test the property trueShootingAttempts
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property trueShootingPercentage (base name: "TrueShootingPercentage")', function() {
      // uncomment below and update the code to test the property trueShootingPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property turnOversPercentage (base name: "TurnOversPercentage")', function() {
      // uncomment below and update the code to test the property turnOversPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property turnovers (base name: "Turnovers")', function() {
      // uncomment below and update the code to test the property turnovers
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property twoPointersAttempted (base name: "TwoPointersAttempted")', function() {
      // uncomment below and update the code to test the property twoPointersAttempted
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property twoPointersMade (base name: "TwoPointersMade")', function() {
      // uncomment below and update the code to test the property twoPointersMade
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property twoPointersPercentage (base name: "TwoPointersPercentage")', function() {
      // uncomment below and update the code to test the property twoPointersPercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "Updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property usageRatePercentage (base name: "UsageRatePercentage")', function() {
      // uncomment below and update the code to test the property usageRatePercentage
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property yahooPosition (base name: "YahooPosition")', function() {
      // uncomment below and update the code to test the property yahooPosition
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

    it('should have the property yahooSalary (base name: "YahooSalary")', function() {
      // uncomment below and update the code to test the property yahooSalary
      //var instance = new NbaV3Projections.PlayerGameProjection();
      //expect(instance).to.be();
    });

  });

}));
