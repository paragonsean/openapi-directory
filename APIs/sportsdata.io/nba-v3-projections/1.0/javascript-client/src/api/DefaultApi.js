/**
 * NBA v3 Projections
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DfsSlate from '../model/DfsSlate';
import Player from '../model/Player';
import PlayerGameProjection from '../model/PlayerGameProjection';
import PlayerSeasonProjection from '../model/PlayerSeasonProjection';
import StartingLineups from '../model/StartingLineups';
import TeamDepthChart from '../model/TeamDepthChart';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the depthCharts operation.
     * @callback module:api/DefaultApi~depthChartsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDepthChart>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Depth Charts
     * This endpoint provides a depth chart for each NBA team.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~depthChartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDepthChart>}
     */
    depthCharts(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling depthCharts");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDepthChart];
      return this.apiClient.callApi(
        '/{format}/DepthCharts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlatesByDate operation.
     * @callback module:api/DefaultApi~dfsSlatesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slates by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-DEC-01</code>, <code>2018-FEB-15</code>.
     * @param {module:api/DefaultApi~dfsSlatesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dfsSlatesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuredPlayers operation.
     * @callback module:api/DefaultApi~injuredPlayersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injured Players
     * This endpoint provides all currently injured NBA players, along with injury details.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~injuredPlayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    injuredPlayers(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuredPlayers");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/InjuredPlayers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByDateWInjuriesDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByDateWInjuriesDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Date (w/ Injuries, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2015-JUL-31</code>, <code>2015-SEP-01</code>.
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByDateWInjuriesDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    projectedPlayerGameStatsByDateWInjuriesDfsSalaries(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByDateWInjuriesDfsSalaries");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling projectedPlayerGameStatsByDateWInjuriesDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByPlayerWInjuriesDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByPlayerWInjuriesDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerGameProjection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Player (w/ Injuries, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s).<br>Examples: <code>2015-JUL-31</code>, <code>2015-SEP-01</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>20000571</code>.
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByPlayerWInjuriesDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerGameProjection}
     */
    projectedPlayerGameStatsByPlayerWInjuriesDfsSalaries(format, date, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByPlayerWInjuriesDfsSalaries");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling projectedPlayerGameStatsByPlayerWInjuriesDfsSalaries");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling projectedPlayerGameStatsByPlayerWInjuriesDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'date': date,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerGameProjection;
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByPlayer/{date}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerSeasonStats operation.
     * @callback module:api/DefaultApi~projectedPlayerSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~projectedPlayerSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonProjection>}
     */
    projectedPlayerSeasonStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerSeasonStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerSeasonStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonProjectionStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerSeasonStatsByPlayer operation.
     * @callback module:api/DefaultApi~projectedPlayerSeasonStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerSeasonProjection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Season Stats by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2019</code>, etc.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>20000571</code>.
     * @param {module:api/DefaultApi~projectedPlayerSeasonStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerSeasonProjection}
     */
    projectedPlayerSeasonStatsByPlayer(format, season, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerSeasonStatsByPlayer");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerSeasonStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling projectedPlayerSeasonStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerSeasonProjection;
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonProjectionStatsByPlayer/{season}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerSeasonStatsByTeam operation.
     * @callback module:api/DefaultApi~projectedPlayerSeasonStatsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Season Stats by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2019</code>, etc.
     * @param {String} team The abbreviation of the requested team. <br>Examples: <code>MIA</code>, <code>PHI</code>.
     * @param {module:api/DefaultApi~projectedPlayerSeasonStatsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonProjection>}
     */
    projectedPlayerSeasonStatsByTeam(format, season, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerSeasonStatsByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerSeasonStatsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling projectedPlayerSeasonStatsByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startingLineupsByDate operation.
     * @callback module:api/DefaultApi~startingLineupsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StartingLineups>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starting Lineups by Date
     * This endpoint provides the projected & confirmed starting lineups for NBA games on a given date.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br> Examples: <code>2021-OCT-12</code>, <code>2021-DEC-09</code>.
     * @param {module:api/DefaultApi~startingLineupsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StartingLineups>}
     */
    startingLineupsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling startingLineupsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling startingLineupsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StartingLineups];
      return this.apiClient.callApi(
        '/{format}/StartingLineupsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
