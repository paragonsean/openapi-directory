/**
 * NBA v3 Projections
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDepthChart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDepthChart::OAIDepthChart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDepthChart::OAIDepthChart() {
    this->initializeModel();
}

OAIDepthChart::~OAIDepthChart() {}

void OAIDepthChart::initializeModel() {

    m_depth_chart_id_isSet = false;
    m_depth_chart_id_isValid = false;

    m_depth_order_isSet = false;
    m_depth_order_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIDepthChart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDepthChart::fromJsonObject(QJsonObject json) {

    m_depth_chart_id_isValid = ::OpenAPI::fromJsonValue(m_depth_chart_id, json[QString("DepthChartID")]);
    m_depth_chart_id_isSet = !json[QString("DepthChartID")].isNull() && m_depth_chart_id_isValid;

    m_depth_order_isValid = ::OpenAPI::fromJsonValue(m_depth_order, json[QString("DepthOrder")]);
    m_depth_order_isSet = !json[QString("DepthOrder")].isNull() && m_depth_order_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIDepthChart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDepthChart::asJsonObject() const {
    QJsonObject obj;
    if (m_depth_chart_id_isSet) {
        obj.insert(QString("DepthChartID"), ::OpenAPI::toJsonValue(m_depth_chart_id));
    }
    if (m_depth_order_isSet) {
        obj.insert(QString("DepthOrder"), ::OpenAPI::toJsonValue(m_depth_order));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIDepthChart::getDepthChartId() const {
    return m_depth_chart_id;
}
void OAIDepthChart::setDepthChartId(const qint32 &depth_chart_id) {
    m_depth_chart_id = depth_chart_id;
    m_depth_chart_id_isSet = true;
}

bool OAIDepthChart::is_depth_chart_id_Set() const{
    return m_depth_chart_id_isSet;
}

bool OAIDepthChart::is_depth_chart_id_Valid() const{
    return m_depth_chart_id_isValid;
}

qint32 OAIDepthChart::getDepthOrder() const {
    return m_depth_order;
}
void OAIDepthChart::setDepthOrder(const qint32 &depth_order) {
    m_depth_order = depth_order;
    m_depth_order_isSet = true;
}

bool OAIDepthChart::is_depth_order_Set() const{
    return m_depth_order_isSet;
}

bool OAIDepthChart::is_depth_order_Valid() const{
    return m_depth_order_isValid;
}

QString OAIDepthChart::getName() const {
    return m_name;
}
void OAIDepthChart::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDepthChart::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDepthChart::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDepthChart::getPlayerId() const {
    return m_player_id;
}
void OAIDepthChart::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIDepthChart::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIDepthChart::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIDepthChart::getPosition() const {
    return m_position;
}
void OAIDepthChart::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIDepthChart::is_position_Set() const{
    return m_position_isSet;
}

bool OAIDepthChart::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIDepthChart::getPositionCategory() const {
    return m_position_category;
}
void OAIDepthChart::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIDepthChart::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIDepthChart::is_position_category_Valid() const{
    return m_position_category_isValid;
}

qint32 OAIDepthChart::getTeamId() const {
    return m_team_id;
}
void OAIDepthChart::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIDepthChart::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIDepthChart::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIDepthChart::getUpdated() const {
    return m_updated;
}
void OAIDepthChart::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDepthChart::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDepthChart::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIDepthChart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_depth_chart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDepthChart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
