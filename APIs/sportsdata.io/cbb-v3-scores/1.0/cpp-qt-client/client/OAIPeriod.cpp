/**
 * CBB v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeriod::OAIPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeriod::OAIPeriod() {
    this->initializeModel();
}

OAIPeriod::~OAIPeriod() {}

void OAIPeriod::initializeModel() {

    m_away_score_isSet = false;
    m_away_score_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_home_score_isSet = false;
    m_home_score_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_period_id_isSet = false;
    m_period_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeriod::fromJsonObject(QJsonObject json) {

    m_away_score_isValid = ::OpenAPI::fromJsonValue(m_away_score, json[QString("AwayScore")]);
    m_away_score_isSet = !json[QString("AwayScore")].isNull() && m_away_score_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_home_score_isValid = ::OpenAPI::fromJsonValue(m_home_score, json[QString("HomeScore")]);
    m_home_score_isSet = !json[QString("HomeScore")].isNull() && m_home_score_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_period_id_isValid = ::OpenAPI::fromJsonValue(m_period_id, json[QString("PeriodID")]);
    m_period_id_isSet = !json[QString("PeriodID")].isNull() && m_period_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_away_score_isSet) {
        obj.insert(QString("AwayScore"), ::OpenAPI::toJsonValue(m_away_score));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_home_score_isSet) {
        obj.insert(QString("HomeScore"), ::OpenAPI::toJsonValue(m_home_score));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_period_id_isSet) {
        obj.insert(QString("PeriodID"), ::OpenAPI::toJsonValue(m_period_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIPeriod::getAwayScore() const {
    return m_away_score;
}
void OAIPeriod::setAwayScore(const qint32 &away_score) {
    m_away_score = away_score;
    m_away_score_isSet = true;
}

bool OAIPeriod::is_away_score_Set() const{
    return m_away_score_isSet;
}

bool OAIPeriod::is_away_score_Valid() const{
    return m_away_score_isValid;
}

qint32 OAIPeriod::getGameId() const {
    return m_game_id;
}
void OAIPeriod::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIPeriod::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIPeriod::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIPeriod::getHomeScore() const {
    return m_home_score;
}
void OAIPeriod::setHomeScore(const qint32 &home_score) {
    m_home_score = home_score;
    m_home_score_isSet = true;
}

bool OAIPeriod::is_home_score_Set() const{
    return m_home_score_isSet;
}

bool OAIPeriod::is_home_score_Valid() const{
    return m_home_score_isValid;
}

QString OAIPeriod::getName() const {
    return m_name;
}
void OAIPeriod::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPeriod::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPeriod::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPeriod::getNumber() const {
    return m_number;
}
void OAIPeriod::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPeriod::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPeriod::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPeriod::getPeriodId() const {
    return m_period_id;
}
void OAIPeriod::setPeriodId(const qint32 &period_id) {
    m_period_id = period_id;
    m_period_id_isSet = true;
}

bool OAIPeriod::is_period_id_Set() const{
    return m_period_id_isSet;
}

bool OAIPeriod::is_period_id_Valid() const{
    return m_period_id_isValid;
}

QString OAIPeriod::getType() const {
    return m_type;
}
void OAIPeriod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPeriod::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPeriod::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
