/**
 * CBB v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamBasic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamBasic::OAITeamBasic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamBasic::OAITeamBasic() {
    this->initializeModel();
}

OAITeamBasic::~OAITeamBasic() {}

void OAITeamBasic::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_conference_id_isSet = false;
    m_conference_id_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;

    m_short_display_name_isSet = false;
    m_short_display_name_isValid = false;

    m_stadium_isSet = false;
    m_stadium_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_team_logo_url_isSet = false;
    m_team_logo_url_isValid = false;
}

void OAITeamBasic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamBasic::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("Conference")]);
    m_conference_isSet = !json[QString("Conference")].isNull() && m_conference_isValid;

    m_conference_id_isValid = ::OpenAPI::fromJsonValue(m_conference_id, json[QString("ConferenceID")]);
    m_conference_id_isSet = !json[QString("ConferenceID")].isNull() && m_conference_id_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("School")]);
    m_school_isSet = !json[QString("School")].isNull() && m_school_isValid;

    m_short_display_name_isValid = ::OpenAPI::fromJsonValue(m_short_display_name, json[QString("ShortDisplayName")]);
    m_short_display_name_isSet = !json[QString("ShortDisplayName")].isNull() && m_short_display_name_isValid;

    m_stadium_isValid = ::OpenAPI::fromJsonValue(m_stadium, json[QString("Stadium")]);
    m_stadium_isSet = !json[QString("Stadium")].isNull() && m_stadium_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_team_logo_url_isValid = ::OpenAPI::fromJsonValue(m_team_logo_url, json[QString("TeamLogoUrl")]);
    m_team_logo_url_isSet = !json[QString("TeamLogoUrl")].isNull() && m_team_logo_url_isValid;
}

QString OAITeamBasic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamBasic::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_conference_isSet) {
        obj.insert(QString("Conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_conference_id_isSet) {
        obj.insert(QString("ConferenceID"), ::OpenAPI::toJsonValue(m_conference_id));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_school_isSet) {
        obj.insert(QString("School"), ::OpenAPI::toJsonValue(m_school));
    }
    if (m_short_display_name_isSet) {
        obj.insert(QString("ShortDisplayName"), ::OpenAPI::toJsonValue(m_short_display_name));
    }
    if (m_stadium.isSet()) {
        obj.insert(QString("Stadium"), ::OpenAPI::toJsonValue(m_stadium));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_team_logo_url_isSet) {
        obj.insert(QString("TeamLogoUrl"), ::OpenAPI::toJsonValue(m_team_logo_url));
    }
    return obj;
}

bool OAITeamBasic::isActive() const {
    return m_active;
}
void OAITeamBasic::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAITeamBasic::is_active_Set() const{
    return m_active_isSet;
}

bool OAITeamBasic::is_active_Valid() const{
    return m_active_isValid;
}

QString OAITeamBasic::getConference() const {
    return m_conference;
}
void OAITeamBasic::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAITeamBasic::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAITeamBasic::is_conference_Valid() const{
    return m_conference_isValid;
}

qint32 OAITeamBasic::getConferenceId() const {
    return m_conference_id;
}
void OAITeamBasic::setConferenceId(const qint32 &conference_id) {
    m_conference_id = conference_id;
    m_conference_id_isSet = true;
}

bool OAITeamBasic::is_conference_id_Set() const{
    return m_conference_id_isSet;
}

bool OAITeamBasic::is_conference_id_Valid() const{
    return m_conference_id_isValid;
}

qint32 OAITeamBasic::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAITeamBasic::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAITeamBasic::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAITeamBasic::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

QString OAITeamBasic::getKey() const {
    return m_key;
}
void OAITeamBasic::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITeamBasic::is_key_Set() const{
    return m_key_isSet;
}

bool OAITeamBasic::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITeamBasic::getName() const {
    return m_name;
}
void OAITeamBasic::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamBasic::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamBasic::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeamBasic::getSchool() const {
    return m_school;
}
void OAITeamBasic::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAITeamBasic::is_school_Set() const{
    return m_school_isSet;
}

bool OAITeamBasic::is_school_Valid() const{
    return m_school_isValid;
}

QString OAITeamBasic::getShortDisplayName() const {
    return m_short_display_name;
}
void OAITeamBasic::setShortDisplayName(const QString &short_display_name) {
    m_short_display_name = short_display_name;
    m_short_display_name_isSet = true;
}

bool OAITeamBasic::is_short_display_name_Set() const{
    return m_short_display_name_isSet;
}

bool OAITeamBasic::is_short_display_name_Valid() const{
    return m_short_display_name_isValid;
}

OAIStadium OAITeamBasic::getStadium() const {
    return m_stadium;
}
void OAITeamBasic::setStadium(const OAIStadium &stadium) {
    m_stadium = stadium;
    m_stadium_isSet = true;
}

bool OAITeamBasic::is_stadium_Set() const{
    return m_stadium_isSet;
}

bool OAITeamBasic::is_stadium_Valid() const{
    return m_stadium_isValid;
}

qint32 OAITeamBasic::getTeamId() const {
    return m_team_id;
}
void OAITeamBasic::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamBasic::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamBasic::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAITeamBasic::getTeamLogoUrl() const {
    return m_team_logo_url;
}
void OAITeamBasic::setTeamLogoUrl(const QString &team_logo_url) {
    m_team_logo_url = team_logo_url;
    m_team_logo_url_isSet = true;
}

bool OAITeamBasic::is_team_logo_url_Set() const{
    return m_team_logo_url_isSet;
}

bool OAITeamBasic::is_team_logo_url_Valid() const{
    return m_team_logo_url_isValid;
}

bool OAITeamBasic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamBasic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
