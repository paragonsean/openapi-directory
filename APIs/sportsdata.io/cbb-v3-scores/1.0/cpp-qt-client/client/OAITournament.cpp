/**
 * CBB v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITournament.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITournament::OAITournament(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITournament::OAITournament() {
    this->initializeModel();
}

OAITournament::~OAITournament() {}

void OAITournament::initializeModel() {

    m_games_isSet = false;
    m_games_isValid = false;

    m_left_bottom_bracket_conference_isSet = false;
    m_left_bottom_bracket_conference_isValid = false;

    m_left_top_bracket_conference_isSet = false;
    m_left_top_bracket_conference_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_right_bottom_bracket_conference_isSet = false;
    m_right_bottom_bracket_conference_isValid = false;

    m_right_top_bracket_conference_isSet = false;
    m_right_top_bracket_conference_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_tournament_id_isSet = false;
    m_tournament_id_isValid = false;
}

void OAITournament::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITournament::fromJsonObject(QJsonObject json) {

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_left_bottom_bracket_conference_isValid = ::OpenAPI::fromJsonValue(m_left_bottom_bracket_conference, json[QString("LeftBottomBracketConference")]);
    m_left_bottom_bracket_conference_isSet = !json[QString("LeftBottomBracketConference")].isNull() && m_left_bottom_bracket_conference_isValid;

    m_left_top_bracket_conference_isValid = ::OpenAPI::fromJsonValue(m_left_top_bracket_conference, json[QString("LeftTopBracketConference")]);
    m_left_top_bracket_conference_isSet = !json[QString("LeftTopBracketConference")].isNull() && m_left_top_bracket_conference_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_right_bottom_bracket_conference_isValid = ::OpenAPI::fromJsonValue(m_right_bottom_bracket_conference, json[QString("RightBottomBracketConference")]);
    m_right_bottom_bracket_conference_isSet = !json[QString("RightBottomBracketConference")].isNull() && m_right_bottom_bracket_conference_isValid;

    m_right_top_bracket_conference_isValid = ::OpenAPI::fromJsonValue(m_right_top_bracket_conference, json[QString("RightTopBracketConference")]);
    m_right_top_bracket_conference_isSet = !json[QString("RightTopBracketConference")].isNull() && m_right_top_bracket_conference_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_tournament_id, json[QString("TournamentID")]);
    m_tournament_id_isSet = !json[QString("TournamentID")].isNull() && m_tournament_id_isValid;
}

QString OAITournament::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITournament::asJsonObject() const {
    QJsonObject obj;
    if (m_games.size() > 0) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_left_bottom_bracket_conference_isSet) {
        obj.insert(QString("LeftBottomBracketConference"), ::OpenAPI::toJsonValue(m_left_bottom_bracket_conference));
    }
    if (m_left_top_bracket_conference_isSet) {
        obj.insert(QString("LeftTopBracketConference"), ::OpenAPI::toJsonValue(m_left_top_bracket_conference));
    }
    if (m_location_isSet) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_right_bottom_bracket_conference_isSet) {
        obj.insert(QString("RightBottomBracketConference"), ::OpenAPI::toJsonValue(m_right_bottom_bracket_conference));
    }
    if (m_right_top_bracket_conference_isSet) {
        obj.insert(QString("RightTopBracketConference"), ::OpenAPI::toJsonValue(m_right_top_bracket_conference));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_tournament_id_isSet) {
        obj.insert(QString("TournamentID"), ::OpenAPI::toJsonValue(m_tournament_id));
    }
    return obj;
}

QList<OAIGame> OAITournament::getGames() const {
    return m_games;
}
void OAITournament::setGames(const QList<OAIGame> &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITournament::is_games_Set() const{
    return m_games_isSet;
}

bool OAITournament::is_games_Valid() const{
    return m_games_isValid;
}

QString OAITournament::getLeftBottomBracketConference() const {
    return m_left_bottom_bracket_conference;
}
void OAITournament::setLeftBottomBracketConference(const QString &left_bottom_bracket_conference) {
    m_left_bottom_bracket_conference = left_bottom_bracket_conference;
    m_left_bottom_bracket_conference_isSet = true;
}

bool OAITournament::is_left_bottom_bracket_conference_Set() const{
    return m_left_bottom_bracket_conference_isSet;
}

bool OAITournament::is_left_bottom_bracket_conference_Valid() const{
    return m_left_bottom_bracket_conference_isValid;
}

QString OAITournament::getLeftTopBracketConference() const {
    return m_left_top_bracket_conference;
}
void OAITournament::setLeftTopBracketConference(const QString &left_top_bracket_conference) {
    m_left_top_bracket_conference = left_top_bracket_conference;
    m_left_top_bracket_conference_isSet = true;
}

bool OAITournament::is_left_top_bracket_conference_Set() const{
    return m_left_top_bracket_conference_isSet;
}

bool OAITournament::is_left_top_bracket_conference_Valid() const{
    return m_left_top_bracket_conference_isValid;
}

QString OAITournament::getLocation() const {
    return m_location;
}
void OAITournament::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITournament::is_location_Set() const{
    return m_location_isSet;
}

bool OAITournament::is_location_Valid() const{
    return m_location_isValid;
}

QString OAITournament::getName() const {
    return m_name;
}
void OAITournament::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITournament::is_name_Set() const{
    return m_name_isSet;
}

bool OAITournament::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITournament::getRightBottomBracketConference() const {
    return m_right_bottom_bracket_conference;
}
void OAITournament::setRightBottomBracketConference(const QString &right_bottom_bracket_conference) {
    m_right_bottom_bracket_conference = right_bottom_bracket_conference;
    m_right_bottom_bracket_conference_isSet = true;
}

bool OAITournament::is_right_bottom_bracket_conference_Set() const{
    return m_right_bottom_bracket_conference_isSet;
}

bool OAITournament::is_right_bottom_bracket_conference_Valid() const{
    return m_right_bottom_bracket_conference_isValid;
}

QString OAITournament::getRightTopBracketConference() const {
    return m_right_top_bracket_conference;
}
void OAITournament::setRightTopBracketConference(const QString &right_top_bracket_conference) {
    m_right_top_bracket_conference = right_top_bracket_conference;
    m_right_top_bracket_conference_isSet = true;
}

bool OAITournament::is_right_top_bracket_conference_Set() const{
    return m_right_top_bracket_conference_isSet;
}

bool OAITournament::is_right_top_bracket_conference_Valid() const{
    return m_right_top_bracket_conference_isValid;
}

qint32 OAITournament::getSeason() const {
    return m_season;
}
void OAITournament::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAITournament::is_season_Set() const{
    return m_season_isSet;
}

bool OAITournament::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAITournament::getTournamentId() const {
    return m_tournament_id;
}
void OAITournament::setTournamentId(const qint32 &tournament_id) {
    m_tournament_id = tournament_id;
    m_tournament_id_isSet = true;
}

bool OAITournament::is_tournament_id_Set() const{
    return m_tournament_id_isSet;
}

bool OAITournament::is_tournament_id_Valid() const{
    return m_tournament_id_isValid;
}

bool OAITournament::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_bottom_bracket_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_top_bracket_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_bottom_bracket_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_top_bracket_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITournament::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
