/*
 * CBB v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Game;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tournament
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:10.258689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tournament {
  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private List<Game> games = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEFT_BOTTOM_BRACKET_CONFERENCE = "LeftBottomBracketConference";
  @SerializedName(SERIALIZED_NAME_LEFT_BOTTOM_BRACKET_CONFERENCE)
  private String leftBottomBracketConference;

  public static final String SERIALIZED_NAME_LEFT_TOP_BRACKET_CONFERENCE = "LeftTopBracketConference";
  @SerializedName(SERIALIZED_NAME_LEFT_TOP_BRACKET_CONFERENCE)
  private String leftTopBracketConference;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RIGHT_BOTTOM_BRACKET_CONFERENCE = "RightBottomBracketConference";
  @SerializedName(SERIALIZED_NAME_RIGHT_BOTTOM_BRACKET_CONFERENCE)
  private String rightBottomBracketConference;

  public static final String SERIALIZED_NAME_RIGHT_TOP_BRACKET_CONFERENCE = "RightTopBracketConference";
  @SerializedName(SERIALIZED_NAME_RIGHT_TOP_BRACKET_CONFERENCE)
  private String rightTopBracketConference;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_TOURNAMENT_I_D = "TournamentID";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT_I_D)
  private Integer tournamentID;

  public Tournament() {
  }

  public Tournament games(List<Game> games) {
    this.games = games;
    return this;
  }

  public Tournament addGamesItem(Game gamesItem) {
    if (this.games == null) {
      this.games = new ArrayList<>();
    }
    this.games.add(gamesItem);
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public List<Game> getGames() {
    return games;
  }

  public void setGames(List<Game> games) {
    this.games = games;
  }


  public Tournament leftBottomBracketConference(String leftBottomBracketConference) {
    this.leftBottomBracketConference = leftBottomBracketConference;
    return this;
  }

  /**
   * Get leftBottomBracketConference
   * @return leftBottomBracketConference
   */
  @javax.annotation.Nullable
  public String getLeftBottomBracketConference() {
    return leftBottomBracketConference;
  }

  public void setLeftBottomBracketConference(String leftBottomBracketConference) {
    this.leftBottomBracketConference = leftBottomBracketConference;
  }


  public Tournament leftTopBracketConference(String leftTopBracketConference) {
    this.leftTopBracketConference = leftTopBracketConference;
    return this;
  }

  /**
   * Get leftTopBracketConference
   * @return leftTopBracketConference
   */
  @javax.annotation.Nullable
  public String getLeftTopBracketConference() {
    return leftTopBracketConference;
  }

  public void setLeftTopBracketConference(String leftTopBracketConference) {
    this.leftTopBracketConference = leftTopBracketConference;
  }


  public Tournament location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Tournament name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Tournament rightBottomBracketConference(String rightBottomBracketConference) {
    this.rightBottomBracketConference = rightBottomBracketConference;
    return this;
  }

  /**
   * Get rightBottomBracketConference
   * @return rightBottomBracketConference
   */
  @javax.annotation.Nullable
  public String getRightBottomBracketConference() {
    return rightBottomBracketConference;
  }

  public void setRightBottomBracketConference(String rightBottomBracketConference) {
    this.rightBottomBracketConference = rightBottomBracketConference;
  }


  public Tournament rightTopBracketConference(String rightTopBracketConference) {
    this.rightTopBracketConference = rightTopBracketConference;
    return this;
  }

  /**
   * Get rightTopBracketConference
   * @return rightTopBracketConference
   */
  @javax.annotation.Nullable
  public String getRightTopBracketConference() {
    return rightTopBracketConference;
  }

  public void setRightTopBracketConference(String rightTopBracketConference) {
    this.rightTopBracketConference = rightTopBracketConference;
  }


  public Tournament season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Tournament tournamentID(Integer tournamentID) {
    this.tournamentID = tournamentID;
    return this;
  }

  /**
   * Get tournamentID
   * @return tournamentID
   */
  @javax.annotation.Nullable
  public Integer getTournamentID() {
    return tournamentID;
  }

  public void setTournamentID(Integer tournamentID) {
    this.tournamentID = tournamentID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tournament tournament = (Tournament) o;
    return Objects.equals(this.games, tournament.games) &&
        Objects.equals(this.leftBottomBracketConference, tournament.leftBottomBracketConference) &&
        Objects.equals(this.leftTopBracketConference, tournament.leftTopBracketConference) &&
        Objects.equals(this.location, tournament.location) &&
        Objects.equals(this.name, tournament.name) &&
        Objects.equals(this.rightBottomBracketConference, tournament.rightBottomBracketConference) &&
        Objects.equals(this.rightTopBracketConference, tournament.rightTopBracketConference) &&
        Objects.equals(this.season, tournament.season) &&
        Objects.equals(this.tournamentID, tournament.tournamentID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(games, leftBottomBracketConference, leftTopBracketConference, location, name, rightBottomBracketConference, rightTopBracketConference, season, tournamentID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tournament {\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    leftBottomBracketConference: ").append(toIndentedString(leftBottomBracketConference)).append("\n");
    sb.append("    leftTopBracketConference: ").append(toIndentedString(leftTopBracketConference)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rightBottomBracketConference: ").append(toIndentedString(rightBottomBracketConference)).append("\n");
    sb.append("    rightTopBracketConference: ").append(toIndentedString(rightTopBracketConference)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    tournamentID: ").append(toIndentedString(tournamentID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Games");
    openapiFields.add("LeftBottomBracketConference");
    openapiFields.add("LeftTopBracketConference");
    openapiFields.add("Location");
    openapiFields.add("Name");
    openapiFields.add("RightBottomBracketConference");
    openapiFields.add("RightTopBracketConference");
    openapiFields.add("Season");
    openapiFields.add("TournamentID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tournament
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tournament.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tournament is not found in the empty JSON string", Tournament.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tournament.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tournament` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Games") != null && !jsonObj.get("Games").isJsonNull()) {
        JsonArray jsonArraygames = jsonObj.getAsJsonArray("Games");
        if (jsonArraygames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Games").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Games` to be an array in the JSON string but got `%s`", jsonObj.get("Games").toString()));
          }

          // validate the optional field `Games` (array)
          for (int i = 0; i < jsonArraygames.size(); i++) {
            Game.validateJsonElement(jsonArraygames.get(i));
          };
        }
      }
      if ((jsonObj.get("LeftBottomBracketConference") != null && !jsonObj.get("LeftBottomBracketConference").isJsonNull()) && !jsonObj.get("LeftBottomBracketConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeftBottomBracketConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeftBottomBracketConference").toString()));
      }
      if ((jsonObj.get("LeftTopBracketConference") != null && !jsonObj.get("LeftTopBracketConference").isJsonNull()) && !jsonObj.get("LeftTopBracketConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeftTopBracketConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeftTopBracketConference").toString()));
      }
      if ((jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) && !jsonObj.get("Location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Location").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RightBottomBracketConference") != null && !jsonObj.get("RightBottomBracketConference").isJsonNull()) && !jsonObj.get("RightBottomBracketConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RightBottomBracketConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RightBottomBracketConference").toString()));
      }
      if ((jsonObj.get("RightTopBracketConference") != null && !jsonObj.get("RightTopBracketConference").isJsonNull()) && !jsonObj.get("RightTopBracketConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RightTopBracketConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RightTopBracketConference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tournament.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tournament' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tournament> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tournament.class));

       return (TypeAdapter<T>) new TypeAdapter<Tournament>() {
           @Override
           public void write(JsonWriter out, Tournament value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tournament read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tournament given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tournament
   * @throws IOException if the JSON string is invalid with respect to Tournament
   */
  public static Tournament fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tournament.class);
  }

  /**
   * Convert an instance of Tournament to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

