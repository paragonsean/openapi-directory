/**
 * NFL v3 RotoBaller Articles
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlayerInfo from './PlayerInfo';

/**
 * The Article model module.
 * @module model/Article
 * @version 1.0
 */
class Article {
    /**
     * Constructs a new <code>Article</code>.
     * @alias module:model/Article
     */
    constructor() { 
        
        Article.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Article</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Article} obj Optional instance to populate.
     * @return {module:model/Article} The populated <code>Article</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Article();

            if (data.hasOwnProperty('ArticleID')) {
                obj['ArticleID'] = ApiClient.convertToType(data['ArticleID'], 'Number');
            }
            if (data.hasOwnProperty('Author')) {
                obj['Author'] = ApiClient.convertToType(data['Author'], 'String');
            }
            if (data.hasOwnProperty('Content')) {
                obj['Content'] = ApiClient.convertToType(data['Content'], 'String');
            }
            if (data.hasOwnProperty('Players')) {
                obj['Players'] = ApiClient.convertToType(data['Players'], [PlayerInfo]);
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
            }
            if (data.hasOwnProperty('TermsOfUse')) {
                obj['TermsOfUse'] = ApiClient.convertToType(data['TermsOfUse'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Article</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Article</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Author'] && !(typeof data['Author'] === 'string' || data['Author'] instanceof String)) {
            throw new Error("Expected the field `Author` to be a primitive type in the JSON string but got " + data['Author']);
        }
        // ensure the json data is a string
        if (data['Content'] && !(typeof data['Content'] === 'string' || data['Content'] instanceof String)) {
            throw new Error("Expected the field `Content` to be a primitive type in the JSON string but got " + data['Content']);
        }
        if (data['Players']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Players'])) {
                throw new Error("Expected the field `Players` to be an array in the JSON data but got " + data['Players']);
            }
            // validate the optional field `Players` (array)
            for (const item of data['Players']) {
                PlayerInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Source'] && !(typeof data['Source'] === 'string' || data['Source'] instanceof String)) {
            throw new Error("Expected the field `Source` to be a primitive type in the JSON string but got " + data['Source']);
        }
        // ensure the json data is a string
        if (data['TermsOfUse'] && !(typeof data['TermsOfUse'] === 'string' || data['TermsOfUse'] instanceof String)) {
            throw new Error("Expected the field `TermsOfUse` to be a primitive type in the JSON string but got " + data['TermsOfUse']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }
        // ensure the json data is a string
        if (data['Url'] && !(typeof data['Url'] === 'string' || data['Url'] instanceof String)) {
            throw new Error("Expected the field `Url` to be a primitive type in the JSON string but got " + data['Url']);
        }

        return true;
    }


}



/**
 * @member {Number} ArticleID
 */
Article.prototype['ArticleID'] = undefined;

/**
 * @member {String} Author
 */
Article.prototype['Author'] = undefined;

/**
 * @member {String} Content
 */
Article.prototype['Content'] = undefined;

/**
 * @member {Array.<module:model/PlayerInfo>} Players
 */
Article.prototype['Players'] = undefined;

/**
 * @member {String} Source
 */
Article.prototype['Source'] = undefined;

/**
 * @member {String} TermsOfUse
 */
Article.prototype['TermsOfUse'] = undefined;

/**
 * @member {String} Title
 */
Article.prototype['Title'] = undefined;

/**
 * @member {String} Updated
 */
Article.prototype['Updated'] = undefined;

/**
 * @member {String} Url
 */
Article.prototype['Url'] = undefined;






export default Article;

