/**
 * MLB v3 Stats
 * MLB scores, stats, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BoxScore from '../model/BoxScore';
import DfsSlate from '../model/DfsSlate';
import Game from '../model/Game';
import News from '../model/News';
import Player from '../model/Player';
import PlayerGame from '../model/PlayerGame';
import PlayerSeason from '../model/PlayerSeason';
import Season from '../model/Season';
import Stadium from '../model/Stadium';
import Standing from '../model/Standing';
import Team from '../model/Team';
import TeamGame from '../model/TeamGame';
import TeamSeason from '../model/TeamSeason';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the areGamesInProgress operation.
     * @callback module:api/DefaultApi~areGamesInProgressCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Are Games In Progress
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~areGamesInProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    areGamesInProgress(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling areGamesInProgress");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/{format}/AreAnyGamesInProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batterVsPitcherStats operation.
     * @callback module:api/DefaultApi~batterVsPitcherStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batter vs. Pitcher Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} hitterid Unique FantasyData Player ID. Example:<code>10000031</code>.
     * @param {String} pitcherid Unique FantasyData Player ID. Example:<code>10000618</code>.
     * @param {module:api/DefaultApi~batterVsPitcherStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    batterVsPitcherStats(format, hitterid, pitcherid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling batterVsPitcherStats");
      }
      // verify the required parameter 'hitterid' is set
      if (hitterid === undefined || hitterid === null) {
        throw new Error("Missing the required parameter 'hitterid' when calling batterVsPitcherStats");
      }
      // verify the required parameter 'pitcherid' is set
      if (pitcherid === undefined || pitcherid === null) {
        throw new Error("Missing the required parameter 'pitcherid' when calling batterVsPitcherStats");
      }

      let pathParams = {
        'format': format,
        'hitterid': hitterid,
        'pitcherid': pitcherid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/HitterVsPitcher/{hitterid}/{pitcherid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScore operation.
     * @callback module:api/DefaultApi~boxScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoxScore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Score
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} gameid The GameID of an MLB game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code>
     * @param {module:api/DefaultApi~boxScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoxScore}
     */
    boxScore(format, gameid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScore");
      }
      // verify the required parameter 'gameid' is set
      if (gameid === undefined || gameid === null) {
        throw new Error("Missing the required parameter 'gameid' when calling boxScore");
      }

      let pathParams = {
        'format': format,
        'gameid': gameid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoxScore;
      return this.apiClient.callApi(
        '/{format}/BoxScore/{gameid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresByDate operation.
     * @callback module:api/DefaultApi~boxScoresByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~boxScoresByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    boxScoresByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling boxScoresByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScores/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresByDateDelta operation.
     * @callback module:api/DefaultApi~boxScoresByDateDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores by Date Delta
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back. Valid entries are: <code>1</code>, <code>2</code> ... <code>all</code>.
     * @param {module:api/DefaultApi~boxScoresByDateDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    boxScoresByDateDelta(format, date, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresByDateDelta");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling boxScoresByDateDelta");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling boxScoresByDateDelta");
      }

      let pathParams = {
        'format': format,
        'date': date,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScoresDelta/{date}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentSeason operation.
     * @callback module:api/DefaultApi~currentSeasonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Season} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current Season
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~currentSeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Season}
     */
    currentSeason(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling currentSeason");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Season;
      return this.apiClient.callApi(
        '/{format}/CurrentSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlatesByDate operation.
     * @callback module:api/DefaultApi~dfsSlatesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slates by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the slates. <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~dfsSlatesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dfsSlatesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesByDate operation.
     * @callback module:api/DefaultApi~gamesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Games by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~gamesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gamesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gamesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling gamesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GamesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the news operation.
     * @callback module:api/DefaultApi~newsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~newsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    news(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling news");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/News', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByDate operation.
     * @callback module:api/DefaultApi~newsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the news. <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~newsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling newsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByPlayer operation.
     * @callback module:api/DefaultApi~newsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>10000507</code>.
     * @param {module:api/DefaultApi~newsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling newsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByPlayerID/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByActive operation.
     * @callback module:api/DefaultApi~playerDetailsByActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Active
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playerDetailsByActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByFreeAgents operation.
     * @callback module:api/DefaultApi~playerDetailsByFreeAgentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Free Agents
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playerDetailsByFreeAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByFreeAgents(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByFreeAgents");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/FreeAgents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByPlayer operation.
     * @callback module:api/DefaultApi~playerDetailsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>10000507</code>.
     * @param {module:api/DefaultApi~playerDetailsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    playerDetailsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerDetailsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/{format}/Player/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameLogsBySeason operation.
     * @callback module:api/DefaultApi~playerGameLogsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Logs By Season
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Season to get games from. Example <code>2019POST</code>, <code>2020</code>
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>10001365</code>.
     * @param {String} numberofgames How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code>
     * @param {module:api/DefaultApi~playerGameLogsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameLogsBySeason(format, season, playerid, numberofgames, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameLogsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameLogsBySeason");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerGameLogsBySeason");
      }
      // verify the required parameter 'numberofgames' is set
      if (numberofgames === undefined || numberofgames === null) {
        throw new Error("Missing the required parameter 'numberofgames' when calling playerGameLogsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'playerid': playerid,
        'numberofgames': numberofgames
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByDate operation.
     * @callback module:api/DefaultApi~playerGameStatsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~playerGameStatsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameStatsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling playerGameStatsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByPlayer operation.
     * @callback module:api/DefaultApi~playerGameStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerGame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>10000507</code>.
     * @param {module:api/DefaultApi~playerGameStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerGame}
     */
    playerGameStatsByPlayer(format, date, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByPlayer");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling playerGameStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerGameStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'date': date,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerGame;
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByPlayer/{date}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonAwayStats operation.
     * @callback module:api/DefaultApi~playerSeasonAwayStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Away Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {module:api/DefaultApi~playerSeasonAwayStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonAwayStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonAwayStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonAwayStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonAwayStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonHomeStats operation.
     * @callback module:api/DefaultApi~playerSeasonHomeStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Home Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {module:api/DefaultApi~playerSeasonHomeStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonHomeStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonHomeStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonHomeStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonHomeStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonSplitStats operation.
     * @callback module:api/DefaultApi~playerSeasonSplitStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Split Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {module:model/String} split The desired split of stats. Currently, we support vs. Left/Right/Switch handed pitchers/hitters. Possible values are: <code>L</code>, <code>R</code> and <code>S</code>
     * @param {module:api/DefaultApi~playerSeasonSplitStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonSplitStats(format, season, split, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonSplitStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonSplitStats");
      }
      // verify the required parameter 'split' is set
      if (split === undefined || split === null) {
        throw new Error("Missing the required parameter 'split' when calling playerSeasonSplitStats");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'split': split
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonSplitStats/{season}/{split}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStats operation.
     * @callback module:api/DefaultApi~playerSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsByPlayer operation.
     * @callback module:api/DefaultApi~playerSeasonStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerSeason} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats By Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>10000507</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerSeason}
     */
    playerSeasonStatsByPlayer(format, season, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsByPlayer");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerSeasonStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerSeason;
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStatsByPlayer/{season}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsByTeam operation.
     * @callback module:api/DefaultApi~playerSeasonStatsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>. 
     * @param {String} team The abbreviation of the requested team. <br>Examples: <code>SF</code>, <code>NYY</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStatsByTeam(format, season, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStatsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playerSeasonStatsByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStatsByTeam/{season}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsSplitByTeam operation.
     * @callback module:api/DefaultApi~playerSeasonStatsSplitByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats Split By Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsSplitByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStatsSplitByTeam(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsSplitByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStatsSplitByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStatsSplitByTeam/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playersByTeam operation.
     * @callback module:api/DefaultApi~playersByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team The abbreviation of the requested team. <br>Examples: <code>SF</code>, <code>NYY</code>.
     * @param {module:api/DefaultApi~playersByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playersByTeam(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playersByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playersByTeam");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedules operation.
     * @callback module:api/DefaultApi~schedulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~schedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    schedules(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedules");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling schedules");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/Games/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stadiums operation.
     * @callback module:api/DefaultApi~stadiumsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Stadium>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stadiums
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~stadiumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Stadium>}
     */
    stadiums(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling stadiums");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stadium];
      return this.apiClient.callApi(
        '/{format}/Stadiums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the standings operation.
     * @callback module:api/DefaultApi~standingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Standing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Standings
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {module:api/DefaultApi~standingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Standing>}
     */
    standings(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling standings");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling standings");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Standing];
      return this.apiClient.callApi(
        '/{format}/Standings/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameLogsBySeason operation.
     * @callback module:api/DefaultApi~teamGameLogsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Logs By Season
     * Game by game log of total team statistics.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Season to get games from. Example <code>2019POST</code>, <code>2020</code>
     * @param {String} teamid Unique ID of team.  Example <code> 12 </code>
     * @param {String} numberofgames How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code>
     * @param {module:api/DefaultApi~teamGameLogsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameLogsBySeason(format, season, teamid, numberofgames, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'numberofgames' is set
      if (numberofgames === undefined || numberofgames === null) {
        throw new Error("Missing the required parameter 'numberofgames' when calling teamGameLogsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'teamid': teamid,
        'numberofgames': numberofgames
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameStatsByDate operation.
     * @callback module:api/DefaultApi~teamGameStatsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Stats by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~teamGameStatsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameStatsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameStatsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling teamGameStatsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStatsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamHittingVsStartingPitcher operation.
     * @callback module:api/DefaultApi~teamHittingVsStartingPitcherCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Hitting vs. Starting Pitcher
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} gameid The GameID of an MLB game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code>
     * @param {String} team The abbreviation of the requested team. <br>Examples: <code>SF</code>, <code>NYY</code>.
     * @param {module:api/DefaultApi~teamHittingVsStartingPitcherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    teamHittingVsStartingPitcher(format, gameid, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamHittingVsStartingPitcher");
      }
      // verify the required parameter 'gameid' is set
      if (gameid === undefined || gameid === null) {
        throw new Error("Missing the required parameter 'gameid' when calling teamHittingVsStartingPitcher");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamHittingVsStartingPitcher");
      }

      let pathParams = {
        'format': format,
        'gameid': gameid,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/TeamHittersVsPitcher/{gameid}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamSeasonStats operation.
     * @callback module:api/DefaultApi~teamSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2017</code>, <code>2018</code>.
     * @param {module:api/DefaultApi~teamSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSeason>}
     */
    teamSeasonStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamSeasonStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamSeasonStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSeason];
      return this.apiClient.callApi(
        '/{format}/TeamSeasonStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsActive operation.
     * @callback module:api/DefaultApi~teamsActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (Active)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAll operation.
     * @callback module:api/DefaultApi~teamsAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (All)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsAll(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsAll");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/AllTeams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
