/**
 * MLB v3 Stats
 * MLB scores, stats, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamSeason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamSeason::OAITeamSeason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamSeason::OAITeamSeason() {
    this->initializeModel();
}

OAITeamSeason::~OAITeamSeason() {}

void OAITeamSeason::initializeModel() {

    m_at_bats_isSet = false;
    m_at_bats_isValid = false;

    m_balls_in_play_isSet = false;
    m_balls_in_play_isValid = false;

    m_batting_average_isSet = false;
    m_batting_average_isValid = false;

    m_batting_average_on_balls_in_play_isSet = false;
    m_batting_average_on_balls_in_play_isValid = false;

    m_batting_order_confirmed_isSet = false;
    m_batting_order_confirmed_isValid = false;

    m_caught_stealing_isSet = false;
    m_caught_stealing_isValid = false;

    m_double_plays_isSet = false;
    m_double_plays_isValid = false;

    m_doubles_isSet = false;
    m_doubles_isValid = false;

    m_earned_run_average_isSet = false;
    m_earned_run_average_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_batting_isSet = false;
    m_fantasy_points_batting_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_fantasy_draft_isSet = false;
    m_fantasy_points_fantasy_draft_isValid = false;

    m_fantasy_points_pitching_isSet = false;
    m_fantasy_points_pitching_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_fielding_independent_pitching_isSet = false;
    m_fielding_independent_pitching_isValid = false;

    m_fly_outs_isSet = false;
    m_fly_outs_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_grand_slams_isSet = false;
    m_grand_slams_isValid = false;

    m_ground_into_double_play_isSet = false;
    m_ground_into_double_play_isValid = false;

    m_ground_outs_isSet = false;
    m_ground_outs_isValid = false;

    m_hit_by_pitch_isSet = false;
    m_hit_by_pitch_isValid = false;

    m_hits_isSet = false;
    m_hits_isValid = false;

    m_home_runs_isSet = false;
    m_home_runs_isValid = false;

    m_innings_pitched_decimal_isSet = false;
    m_innings_pitched_decimal_isValid = false;

    m_innings_pitched_full_isSet = false;
    m_innings_pitched_full_isValid = false;

    m_innings_pitched_outs_isSet = false;
    m_innings_pitched_outs_isValid = false;

    m_intentional_walks_isSet = false;
    m_intentional_walks_isValid = false;

    m_isolated_power_isSet = false;
    m_isolated_power_isValid = false;

    m_left_on_base_isSet = false;
    m_left_on_base_isValid = false;

    m_line_outs_isSet = false;
    m_line_outs_isValid = false;

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_on_base_percentage_isSet = false;
    m_on_base_percentage_isValid = false;

    m_on_base_plus_slugging_isSet = false;
    m_on_base_plus_slugging_isValid = false;

    m_outs_isSet = false;
    m_outs_isValid = false;

    m_pitches_seen_isSet = false;
    m_pitches_seen_isValid = false;

    m_pitches_thrown_isSet = false;
    m_pitches_thrown_isValid = false;

    m_pitches_thrown_strikes_isSet = false;
    m_pitches_thrown_strikes_isValid = false;

    m_pitching_balls_in_play_isSet = false;
    m_pitching_balls_in_play_isValid = false;

    m_pitching_batting_average_against_isSet = false;
    m_pitching_batting_average_against_isValid = false;

    m_pitching_batting_average_on_balls_in_play_isSet = false;
    m_pitching_batting_average_on_balls_in_play_isValid = false;

    m_pitching_blown_saves_isSet = false;
    m_pitching_blown_saves_isValid = false;

    m_pitching_catchers_interference_isSet = false;
    m_pitching_catchers_interference_isValid = false;

    m_pitching_complete_games_isSet = false;
    m_pitching_complete_games_isValid = false;

    m_pitching_double_plays_isSet = false;
    m_pitching_double_plays_isValid = false;

    m_pitching_doubles_isSet = false;
    m_pitching_doubles_isValid = false;

    m_pitching_earned_runs_isSet = false;
    m_pitching_earned_runs_isValid = false;

    m_pitching_fly_outs_isSet = false;
    m_pitching_fly_outs_isValid = false;

    m_pitching_grand_slams_isSet = false;
    m_pitching_grand_slams_isValid = false;

    m_pitching_ground_into_double_play_isSet = false;
    m_pitching_ground_into_double_play_isValid = false;

    m_pitching_ground_outs_isSet = false;
    m_pitching_ground_outs_isValid = false;

    m_pitching_hit_by_pitch_isSet = false;
    m_pitching_hit_by_pitch_isValid = false;

    m_pitching_hits_isSet = false;
    m_pitching_hits_isValid = false;

    m_pitching_holds_isSet = false;
    m_pitching_holds_isValid = false;

    m_pitching_home_runs_isSet = false;
    m_pitching_home_runs_isValid = false;

    m_pitching_inning_started_isSet = false;
    m_pitching_inning_started_isValid = false;

    m_pitching_intentional_walks_isSet = false;
    m_pitching_intentional_walks_isValid = false;

    m_pitching_line_outs_isSet = false;
    m_pitching_line_outs_isValid = false;

    m_pitching_no_hitters_isSet = false;
    m_pitching_no_hitters_isValid = false;

    m_pitching_on_base_percentage_isSet = false;
    m_pitching_on_base_percentage_isValid = false;

    m_pitching_on_base_plus_slugging_isSet = false;
    m_pitching_on_base_plus_slugging_isValid = false;

    m_pitching_perfect_games_isSet = false;
    m_pitching_perfect_games_isValid = false;

    m_pitching_plate_appearances_isSet = false;
    m_pitching_plate_appearances_isValid = false;

    m_pitching_pop_outs_isSet = false;
    m_pitching_pop_outs_isValid = false;

    m_pitching_quality_starts_isSet = false;
    m_pitching_quality_starts_isValid = false;

    m_pitching_reached_on_error_isSet = false;
    m_pitching_reached_on_error_isValid = false;

    m_pitching_runs_isSet = false;
    m_pitching_runs_isValid = false;

    m_pitching_sacrifice_flies_isSet = false;
    m_pitching_sacrifice_flies_isValid = false;

    m_pitching_sacrifices_isSet = false;
    m_pitching_sacrifices_isValid = false;

    m_pitching_shut_outs_isSet = false;
    m_pitching_shut_outs_isValid = false;

    m_pitching_singles_isSet = false;
    m_pitching_singles_isValid = false;

    m_pitching_slugging_percentage_isSet = false;
    m_pitching_slugging_percentage_isValid = false;

    m_pitching_strikeouts_isSet = false;
    m_pitching_strikeouts_isValid = false;

    m_pitching_strikeouts_per_nine_innings_isSet = false;
    m_pitching_strikeouts_per_nine_innings_isValid = false;

    m_pitching_total_bases_isSet = false;
    m_pitching_total_bases_isValid = false;

    m_pitching_triples_isSet = false;
    m_pitching_triples_isValid = false;

    m_pitching_walks_isSet = false;
    m_pitching_walks_isValid = false;

    m_pitching_walks_per_nine_innings_isSet = false;
    m_pitching_walks_per_nine_innings_isValid = false;

    m_pitching_weighted_on_base_percentage_isSet = false;
    m_pitching_weighted_on_base_percentage_isValid = false;

    m_plate_appearances_isSet = false;
    m_plate_appearances_isValid = false;

    m_pop_outs_isSet = false;
    m_pop_outs_isValid = false;

    m_reached_on_error_isSet = false;
    m_reached_on_error_isValid = false;

    m_runs_isSet = false;
    m_runs_isValid = false;

    m_runs_batted_in_isSet = false;
    m_runs_batted_in_isValid = false;

    m_sacrifice_flies_isSet = false;
    m_sacrifice_flies_isValid = false;

    m_sacrifices_isSet = false;
    m_sacrifices_isValid = false;

    m_saves_isSet = false;
    m_saves_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_singles_isSet = false;
    m_singles_isValid = false;

    m_slugging_percentage_isSet = false;
    m_slugging_percentage_isValid = false;

    m_stat_id_isSet = false;
    m_stat_id_isValid = false;

    m_stolen_bases_isSet = false;
    m_stolen_bases_isValid = false;

    m_strikeouts_isSet = false;
    m_strikeouts_isValid = false;

    m_substitute_batting_order_isSet = false;
    m_substitute_batting_order_isValid = false;

    m_substitute_batting_order_sequence_isSet = false;
    m_substitute_batting_order_sequence_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_total_bases_isSet = false;
    m_total_bases_isValid = false;

    m_total_outs_pitched_isSet = false;
    m_total_outs_pitched_isValid = false;

    m_triples_isSet = false;
    m_triples_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_walks_isSet = false;
    m_walks_isValid = false;

    m_walks_hits_per_innings_pitched_isSet = false;
    m_walks_hits_per_innings_pitched_isValid = false;

    m_weighted_on_base_percentage_isSet = false;
    m_weighted_on_base_percentage_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAITeamSeason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamSeason::fromJsonObject(QJsonObject json) {

    m_at_bats_isValid = ::OpenAPI::fromJsonValue(m_at_bats, json[QString("AtBats")]);
    m_at_bats_isSet = !json[QString("AtBats")].isNull() && m_at_bats_isValid;

    m_balls_in_play_isValid = ::OpenAPI::fromJsonValue(m_balls_in_play, json[QString("BallsInPlay")]);
    m_balls_in_play_isSet = !json[QString("BallsInPlay")].isNull() && m_balls_in_play_isValid;

    m_batting_average_isValid = ::OpenAPI::fromJsonValue(m_batting_average, json[QString("BattingAverage")]);
    m_batting_average_isSet = !json[QString("BattingAverage")].isNull() && m_batting_average_isValid;

    m_batting_average_on_balls_in_play_isValid = ::OpenAPI::fromJsonValue(m_batting_average_on_balls_in_play, json[QString("BattingAverageOnBallsInPlay")]);
    m_batting_average_on_balls_in_play_isSet = !json[QString("BattingAverageOnBallsInPlay")].isNull() && m_batting_average_on_balls_in_play_isValid;

    m_batting_order_confirmed_isValid = ::OpenAPI::fromJsonValue(m_batting_order_confirmed, json[QString("BattingOrderConfirmed")]);
    m_batting_order_confirmed_isSet = !json[QString("BattingOrderConfirmed")].isNull() && m_batting_order_confirmed_isValid;

    m_caught_stealing_isValid = ::OpenAPI::fromJsonValue(m_caught_stealing, json[QString("CaughtStealing")]);
    m_caught_stealing_isSet = !json[QString("CaughtStealing")].isNull() && m_caught_stealing_isValid;

    m_double_plays_isValid = ::OpenAPI::fromJsonValue(m_double_plays, json[QString("DoublePlays")]);
    m_double_plays_isSet = !json[QString("DoublePlays")].isNull() && m_double_plays_isValid;

    m_doubles_isValid = ::OpenAPI::fromJsonValue(m_doubles, json[QString("Doubles")]);
    m_doubles_isSet = !json[QString("Doubles")].isNull() && m_doubles_isValid;

    m_earned_run_average_isValid = ::OpenAPI::fromJsonValue(m_earned_run_average, json[QString("EarnedRunAverage")]);
    m_earned_run_average_isSet = !json[QString("EarnedRunAverage")].isNull() && m_earned_run_average_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_batting_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_batting, json[QString("FantasyPointsBatting")]);
    m_fantasy_points_batting_isSet = !json[QString("FantasyPointsBatting")].isNull() && m_fantasy_points_batting_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_fantasy_draft_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fantasy_draft, json[QString("FantasyPointsFantasyDraft")]);
    m_fantasy_points_fantasy_draft_isSet = !json[QString("FantasyPointsFantasyDraft")].isNull() && m_fantasy_points_fantasy_draft_isValid;

    m_fantasy_points_pitching_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_pitching, json[QString("FantasyPointsPitching")]);
    m_fantasy_points_pitching_isSet = !json[QString("FantasyPointsPitching")].isNull() && m_fantasy_points_pitching_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_fielding_independent_pitching_isValid = ::OpenAPI::fromJsonValue(m_fielding_independent_pitching, json[QString("FieldingIndependentPitching")]);
    m_fielding_independent_pitching_isSet = !json[QString("FieldingIndependentPitching")].isNull() && m_fielding_independent_pitching_isValid;

    m_fly_outs_isValid = ::OpenAPI::fromJsonValue(m_fly_outs, json[QString("FlyOuts")]);
    m_fly_outs_isSet = !json[QString("FlyOuts")].isNull() && m_fly_outs_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_grand_slams_isValid = ::OpenAPI::fromJsonValue(m_grand_slams, json[QString("GrandSlams")]);
    m_grand_slams_isSet = !json[QString("GrandSlams")].isNull() && m_grand_slams_isValid;

    m_ground_into_double_play_isValid = ::OpenAPI::fromJsonValue(m_ground_into_double_play, json[QString("GroundIntoDoublePlay")]);
    m_ground_into_double_play_isSet = !json[QString("GroundIntoDoublePlay")].isNull() && m_ground_into_double_play_isValid;

    m_ground_outs_isValid = ::OpenAPI::fromJsonValue(m_ground_outs, json[QString("GroundOuts")]);
    m_ground_outs_isSet = !json[QString("GroundOuts")].isNull() && m_ground_outs_isValid;

    m_hit_by_pitch_isValid = ::OpenAPI::fromJsonValue(m_hit_by_pitch, json[QString("HitByPitch")]);
    m_hit_by_pitch_isSet = !json[QString("HitByPitch")].isNull() && m_hit_by_pitch_isValid;

    m_hits_isValid = ::OpenAPI::fromJsonValue(m_hits, json[QString("Hits")]);
    m_hits_isSet = !json[QString("Hits")].isNull() && m_hits_isValid;

    m_home_runs_isValid = ::OpenAPI::fromJsonValue(m_home_runs, json[QString("HomeRuns")]);
    m_home_runs_isSet = !json[QString("HomeRuns")].isNull() && m_home_runs_isValid;

    m_innings_pitched_decimal_isValid = ::OpenAPI::fromJsonValue(m_innings_pitched_decimal, json[QString("InningsPitchedDecimal")]);
    m_innings_pitched_decimal_isSet = !json[QString("InningsPitchedDecimal")].isNull() && m_innings_pitched_decimal_isValid;

    m_innings_pitched_full_isValid = ::OpenAPI::fromJsonValue(m_innings_pitched_full, json[QString("InningsPitchedFull")]);
    m_innings_pitched_full_isSet = !json[QString("InningsPitchedFull")].isNull() && m_innings_pitched_full_isValid;

    m_innings_pitched_outs_isValid = ::OpenAPI::fromJsonValue(m_innings_pitched_outs, json[QString("InningsPitchedOuts")]);
    m_innings_pitched_outs_isSet = !json[QString("InningsPitchedOuts")].isNull() && m_innings_pitched_outs_isValid;

    m_intentional_walks_isValid = ::OpenAPI::fromJsonValue(m_intentional_walks, json[QString("IntentionalWalks")]);
    m_intentional_walks_isSet = !json[QString("IntentionalWalks")].isNull() && m_intentional_walks_isValid;

    m_isolated_power_isValid = ::OpenAPI::fromJsonValue(m_isolated_power, json[QString("IsolatedPower")]);
    m_isolated_power_isSet = !json[QString("IsolatedPower")].isNull() && m_isolated_power_isValid;

    m_left_on_base_isValid = ::OpenAPI::fromJsonValue(m_left_on_base, json[QString("LeftOnBase")]);
    m_left_on_base_isSet = !json[QString("LeftOnBase")].isNull() && m_left_on_base_isValid;

    m_line_outs_isValid = ::OpenAPI::fromJsonValue(m_line_outs, json[QString("LineOuts")]);
    m_line_outs_isSet = !json[QString("LineOuts")].isNull() && m_line_outs_isValid;

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("Losses")]);
    m_losses_isSet = !json[QString("Losses")].isNull() && m_losses_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_on_base_percentage_isValid = ::OpenAPI::fromJsonValue(m_on_base_percentage, json[QString("OnBasePercentage")]);
    m_on_base_percentage_isSet = !json[QString("OnBasePercentage")].isNull() && m_on_base_percentage_isValid;

    m_on_base_plus_slugging_isValid = ::OpenAPI::fromJsonValue(m_on_base_plus_slugging, json[QString("OnBasePlusSlugging")]);
    m_on_base_plus_slugging_isSet = !json[QString("OnBasePlusSlugging")].isNull() && m_on_base_plus_slugging_isValid;

    m_outs_isValid = ::OpenAPI::fromJsonValue(m_outs, json[QString("Outs")]);
    m_outs_isSet = !json[QString("Outs")].isNull() && m_outs_isValid;

    m_pitches_seen_isValid = ::OpenAPI::fromJsonValue(m_pitches_seen, json[QString("PitchesSeen")]);
    m_pitches_seen_isSet = !json[QString("PitchesSeen")].isNull() && m_pitches_seen_isValid;

    m_pitches_thrown_isValid = ::OpenAPI::fromJsonValue(m_pitches_thrown, json[QString("PitchesThrown")]);
    m_pitches_thrown_isSet = !json[QString("PitchesThrown")].isNull() && m_pitches_thrown_isValid;

    m_pitches_thrown_strikes_isValid = ::OpenAPI::fromJsonValue(m_pitches_thrown_strikes, json[QString("PitchesThrownStrikes")]);
    m_pitches_thrown_strikes_isSet = !json[QString("PitchesThrownStrikes")].isNull() && m_pitches_thrown_strikes_isValid;

    m_pitching_balls_in_play_isValid = ::OpenAPI::fromJsonValue(m_pitching_balls_in_play, json[QString("PitchingBallsInPlay")]);
    m_pitching_balls_in_play_isSet = !json[QString("PitchingBallsInPlay")].isNull() && m_pitching_balls_in_play_isValid;

    m_pitching_batting_average_against_isValid = ::OpenAPI::fromJsonValue(m_pitching_batting_average_against, json[QString("PitchingBattingAverageAgainst")]);
    m_pitching_batting_average_against_isSet = !json[QString("PitchingBattingAverageAgainst")].isNull() && m_pitching_batting_average_against_isValid;

    m_pitching_batting_average_on_balls_in_play_isValid = ::OpenAPI::fromJsonValue(m_pitching_batting_average_on_balls_in_play, json[QString("PitchingBattingAverageOnBallsInPlay")]);
    m_pitching_batting_average_on_balls_in_play_isSet = !json[QString("PitchingBattingAverageOnBallsInPlay")].isNull() && m_pitching_batting_average_on_balls_in_play_isValid;

    m_pitching_blown_saves_isValid = ::OpenAPI::fromJsonValue(m_pitching_blown_saves, json[QString("PitchingBlownSaves")]);
    m_pitching_blown_saves_isSet = !json[QString("PitchingBlownSaves")].isNull() && m_pitching_blown_saves_isValid;

    m_pitching_catchers_interference_isValid = ::OpenAPI::fromJsonValue(m_pitching_catchers_interference, json[QString("PitchingCatchersInterference")]);
    m_pitching_catchers_interference_isSet = !json[QString("PitchingCatchersInterference")].isNull() && m_pitching_catchers_interference_isValid;

    m_pitching_complete_games_isValid = ::OpenAPI::fromJsonValue(m_pitching_complete_games, json[QString("PitchingCompleteGames")]);
    m_pitching_complete_games_isSet = !json[QString("PitchingCompleteGames")].isNull() && m_pitching_complete_games_isValid;

    m_pitching_double_plays_isValid = ::OpenAPI::fromJsonValue(m_pitching_double_plays, json[QString("PitchingDoublePlays")]);
    m_pitching_double_plays_isSet = !json[QString("PitchingDoublePlays")].isNull() && m_pitching_double_plays_isValid;

    m_pitching_doubles_isValid = ::OpenAPI::fromJsonValue(m_pitching_doubles, json[QString("PitchingDoubles")]);
    m_pitching_doubles_isSet = !json[QString("PitchingDoubles")].isNull() && m_pitching_doubles_isValid;

    m_pitching_earned_runs_isValid = ::OpenAPI::fromJsonValue(m_pitching_earned_runs, json[QString("PitchingEarnedRuns")]);
    m_pitching_earned_runs_isSet = !json[QString("PitchingEarnedRuns")].isNull() && m_pitching_earned_runs_isValid;

    m_pitching_fly_outs_isValid = ::OpenAPI::fromJsonValue(m_pitching_fly_outs, json[QString("PitchingFlyOuts")]);
    m_pitching_fly_outs_isSet = !json[QString("PitchingFlyOuts")].isNull() && m_pitching_fly_outs_isValid;

    m_pitching_grand_slams_isValid = ::OpenAPI::fromJsonValue(m_pitching_grand_slams, json[QString("PitchingGrandSlams")]);
    m_pitching_grand_slams_isSet = !json[QString("PitchingGrandSlams")].isNull() && m_pitching_grand_slams_isValid;

    m_pitching_ground_into_double_play_isValid = ::OpenAPI::fromJsonValue(m_pitching_ground_into_double_play, json[QString("PitchingGroundIntoDoublePlay")]);
    m_pitching_ground_into_double_play_isSet = !json[QString("PitchingGroundIntoDoublePlay")].isNull() && m_pitching_ground_into_double_play_isValid;

    m_pitching_ground_outs_isValid = ::OpenAPI::fromJsonValue(m_pitching_ground_outs, json[QString("PitchingGroundOuts")]);
    m_pitching_ground_outs_isSet = !json[QString("PitchingGroundOuts")].isNull() && m_pitching_ground_outs_isValid;

    m_pitching_hit_by_pitch_isValid = ::OpenAPI::fromJsonValue(m_pitching_hit_by_pitch, json[QString("PitchingHitByPitch")]);
    m_pitching_hit_by_pitch_isSet = !json[QString("PitchingHitByPitch")].isNull() && m_pitching_hit_by_pitch_isValid;

    m_pitching_hits_isValid = ::OpenAPI::fromJsonValue(m_pitching_hits, json[QString("PitchingHits")]);
    m_pitching_hits_isSet = !json[QString("PitchingHits")].isNull() && m_pitching_hits_isValid;

    m_pitching_holds_isValid = ::OpenAPI::fromJsonValue(m_pitching_holds, json[QString("PitchingHolds")]);
    m_pitching_holds_isSet = !json[QString("PitchingHolds")].isNull() && m_pitching_holds_isValid;

    m_pitching_home_runs_isValid = ::OpenAPI::fromJsonValue(m_pitching_home_runs, json[QString("PitchingHomeRuns")]);
    m_pitching_home_runs_isSet = !json[QString("PitchingHomeRuns")].isNull() && m_pitching_home_runs_isValid;

    m_pitching_inning_started_isValid = ::OpenAPI::fromJsonValue(m_pitching_inning_started, json[QString("PitchingInningStarted")]);
    m_pitching_inning_started_isSet = !json[QString("PitchingInningStarted")].isNull() && m_pitching_inning_started_isValid;

    m_pitching_intentional_walks_isValid = ::OpenAPI::fromJsonValue(m_pitching_intentional_walks, json[QString("PitchingIntentionalWalks")]);
    m_pitching_intentional_walks_isSet = !json[QString("PitchingIntentionalWalks")].isNull() && m_pitching_intentional_walks_isValid;

    m_pitching_line_outs_isValid = ::OpenAPI::fromJsonValue(m_pitching_line_outs, json[QString("PitchingLineOuts")]);
    m_pitching_line_outs_isSet = !json[QString("PitchingLineOuts")].isNull() && m_pitching_line_outs_isValid;

    m_pitching_no_hitters_isValid = ::OpenAPI::fromJsonValue(m_pitching_no_hitters, json[QString("PitchingNoHitters")]);
    m_pitching_no_hitters_isSet = !json[QString("PitchingNoHitters")].isNull() && m_pitching_no_hitters_isValid;

    m_pitching_on_base_percentage_isValid = ::OpenAPI::fromJsonValue(m_pitching_on_base_percentage, json[QString("PitchingOnBasePercentage")]);
    m_pitching_on_base_percentage_isSet = !json[QString("PitchingOnBasePercentage")].isNull() && m_pitching_on_base_percentage_isValid;

    m_pitching_on_base_plus_slugging_isValid = ::OpenAPI::fromJsonValue(m_pitching_on_base_plus_slugging, json[QString("PitchingOnBasePlusSlugging")]);
    m_pitching_on_base_plus_slugging_isSet = !json[QString("PitchingOnBasePlusSlugging")].isNull() && m_pitching_on_base_plus_slugging_isValid;

    m_pitching_perfect_games_isValid = ::OpenAPI::fromJsonValue(m_pitching_perfect_games, json[QString("PitchingPerfectGames")]);
    m_pitching_perfect_games_isSet = !json[QString("PitchingPerfectGames")].isNull() && m_pitching_perfect_games_isValid;

    m_pitching_plate_appearances_isValid = ::OpenAPI::fromJsonValue(m_pitching_plate_appearances, json[QString("PitchingPlateAppearances")]);
    m_pitching_plate_appearances_isSet = !json[QString("PitchingPlateAppearances")].isNull() && m_pitching_plate_appearances_isValid;

    m_pitching_pop_outs_isValid = ::OpenAPI::fromJsonValue(m_pitching_pop_outs, json[QString("PitchingPopOuts")]);
    m_pitching_pop_outs_isSet = !json[QString("PitchingPopOuts")].isNull() && m_pitching_pop_outs_isValid;

    m_pitching_quality_starts_isValid = ::OpenAPI::fromJsonValue(m_pitching_quality_starts, json[QString("PitchingQualityStarts")]);
    m_pitching_quality_starts_isSet = !json[QString("PitchingQualityStarts")].isNull() && m_pitching_quality_starts_isValid;

    m_pitching_reached_on_error_isValid = ::OpenAPI::fromJsonValue(m_pitching_reached_on_error, json[QString("PitchingReachedOnError")]);
    m_pitching_reached_on_error_isSet = !json[QString("PitchingReachedOnError")].isNull() && m_pitching_reached_on_error_isValid;

    m_pitching_runs_isValid = ::OpenAPI::fromJsonValue(m_pitching_runs, json[QString("PitchingRuns")]);
    m_pitching_runs_isSet = !json[QString("PitchingRuns")].isNull() && m_pitching_runs_isValid;

    m_pitching_sacrifice_flies_isValid = ::OpenAPI::fromJsonValue(m_pitching_sacrifice_flies, json[QString("PitchingSacrificeFlies")]);
    m_pitching_sacrifice_flies_isSet = !json[QString("PitchingSacrificeFlies")].isNull() && m_pitching_sacrifice_flies_isValid;

    m_pitching_sacrifices_isValid = ::OpenAPI::fromJsonValue(m_pitching_sacrifices, json[QString("PitchingSacrifices")]);
    m_pitching_sacrifices_isSet = !json[QString("PitchingSacrifices")].isNull() && m_pitching_sacrifices_isValid;

    m_pitching_shut_outs_isValid = ::OpenAPI::fromJsonValue(m_pitching_shut_outs, json[QString("PitchingShutOuts")]);
    m_pitching_shut_outs_isSet = !json[QString("PitchingShutOuts")].isNull() && m_pitching_shut_outs_isValid;

    m_pitching_singles_isValid = ::OpenAPI::fromJsonValue(m_pitching_singles, json[QString("PitchingSingles")]);
    m_pitching_singles_isSet = !json[QString("PitchingSingles")].isNull() && m_pitching_singles_isValid;

    m_pitching_slugging_percentage_isValid = ::OpenAPI::fromJsonValue(m_pitching_slugging_percentage, json[QString("PitchingSluggingPercentage")]);
    m_pitching_slugging_percentage_isSet = !json[QString("PitchingSluggingPercentage")].isNull() && m_pitching_slugging_percentage_isValid;

    m_pitching_strikeouts_isValid = ::OpenAPI::fromJsonValue(m_pitching_strikeouts, json[QString("PitchingStrikeouts")]);
    m_pitching_strikeouts_isSet = !json[QString("PitchingStrikeouts")].isNull() && m_pitching_strikeouts_isValid;

    m_pitching_strikeouts_per_nine_innings_isValid = ::OpenAPI::fromJsonValue(m_pitching_strikeouts_per_nine_innings, json[QString("PitchingStrikeoutsPerNineInnings")]);
    m_pitching_strikeouts_per_nine_innings_isSet = !json[QString("PitchingStrikeoutsPerNineInnings")].isNull() && m_pitching_strikeouts_per_nine_innings_isValid;

    m_pitching_total_bases_isValid = ::OpenAPI::fromJsonValue(m_pitching_total_bases, json[QString("PitchingTotalBases")]);
    m_pitching_total_bases_isSet = !json[QString("PitchingTotalBases")].isNull() && m_pitching_total_bases_isValid;

    m_pitching_triples_isValid = ::OpenAPI::fromJsonValue(m_pitching_triples, json[QString("PitchingTriples")]);
    m_pitching_triples_isSet = !json[QString("PitchingTriples")].isNull() && m_pitching_triples_isValid;

    m_pitching_walks_isValid = ::OpenAPI::fromJsonValue(m_pitching_walks, json[QString("PitchingWalks")]);
    m_pitching_walks_isSet = !json[QString("PitchingWalks")].isNull() && m_pitching_walks_isValid;

    m_pitching_walks_per_nine_innings_isValid = ::OpenAPI::fromJsonValue(m_pitching_walks_per_nine_innings, json[QString("PitchingWalksPerNineInnings")]);
    m_pitching_walks_per_nine_innings_isSet = !json[QString("PitchingWalksPerNineInnings")].isNull() && m_pitching_walks_per_nine_innings_isValid;

    m_pitching_weighted_on_base_percentage_isValid = ::OpenAPI::fromJsonValue(m_pitching_weighted_on_base_percentage, json[QString("PitchingWeightedOnBasePercentage")]);
    m_pitching_weighted_on_base_percentage_isSet = !json[QString("PitchingWeightedOnBasePercentage")].isNull() && m_pitching_weighted_on_base_percentage_isValid;

    m_plate_appearances_isValid = ::OpenAPI::fromJsonValue(m_plate_appearances, json[QString("PlateAppearances")]);
    m_plate_appearances_isSet = !json[QString("PlateAppearances")].isNull() && m_plate_appearances_isValid;

    m_pop_outs_isValid = ::OpenAPI::fromJsonValue(m_pop_outs, json[QString("PopOuts")]);
    m_pop_outs_isSet = !json[QString("PopOuts")].isNull() && m_pop_outs_isValid;

    m_reached_on_error_isValid = ::OpenAPI::fromJsonValue(m_reached_on_error, json[QString("ReachedOnError")]);
    m_reached_on_error_isSet = !json[QString("ReachedOnError")].isNull() && m_reached_on_error_isValid;

    m_runs_isValid = ::OpenAPI::fromJsonValue(m_runs, json[QString("Runs")]);
    m_runs_isSet = !json[QString("Runs")].isNull() && m_runs_isValid;

    m_runs_batted_in_isValid = ::OpenAPI::fromJsonValue(m_runs_batted_in, json[QString("RunsBattedIn")]);
    m_runs_batted_in_isSet = !json[QString("RunsBattedIn")].isNull() && m_runs_batted_in_isValid;

    m_sacrifice_flies_isValid = ::OpenAPI::fromJsonValue(m_sacrifice_flies, json[QString("SacrificeFlies")]);
    m_sacrifice_flies_isSet = !json[QString("SacrificeFlies")].isNull() && m_sacrifice_flies_isValid;

    m_sacrifices_isValid = ::OpenAPI::fromJsonValue(m_sacrifices, json[QString("Sacrifices")]);
    m_sacrifices_isSet = !json[QString("Sacrifices")].isNull() && m_sacrifices_isValid;

    m_saves_isValid = ::OpenAPI::fromJsonValue(m_saves, json[QString("Saves")]);
    m_saves_isSet = !json[QString("Saves")].isNull() && m_saves_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_singles_isValid = ::OpenAPI::fromJsonValue(m_singles, json[QString("Singles")]);
    m_singles_isSet = !json[QString("Singles")].isNull() && m_singles_isValid;

    m_slugging_percentage_isValid = ::OpenAPI::fromJsonValue(m_slugging_percentage, json[QString("SluggingPercentage")]);
    m_slugging_percentage_isSet = !json[QString("SluggingPercentage")].isNull() && m_slugging_percentage_isValid;

    m_stat_id_isValid = ::OpenAPI::fromJsonValue(m_stat_id, json[QString("StatID")]);
    m_stat_id_isSet = !json[QString("StatID")].isNull() && m_stat_id_isValid;

    m_stolen_bases_isValid = ::OpenAPI::fromJsonValue(m_stolen_bases, json[QString("StolenBases")]);
    m_stolen_bases_isSet = !json[QString("StolenBases")].isNull() && m_stolen_bases_isValid;

    m_strikeouts_isValid = ::OpenAPI::fromJsonValue(m_strikeouts, json[QString("Strikeouts")]);
    m_strikeouts_isSet = !json[QString("Strikeouts")].isNull() && m_strikeouts_isValid;

    m_substitute_batting_order_isValid = ::OpenAPI::fromJsonValue(m_substitute_batting_order, json[QString("SubstituteBattingOrder")]);
    m_substitute_batting_order_isSet = !json[QString("SubstituteBattingOrder")].isNull() && m_substitute_batting_order_isValid;

    m_substitute_batting_order_sequence_isValid = ::OpenAPI::fromJsonValue(m_substitute_batting_order_sequence, json[QString("SubstituteBattingOrderSequence")]);
    m_substitute_batting_order_sequence_isSet = !json[QString("SubstituteBattingOrderSequence")].isNull() && m_substitute_batting_order_sequence_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_total_bases_isValid = ::OpenAPI::fromJsonValue(m_total_bases, json[QString("TotalBases")]);
    m_total_bases_isSet = !json[QString("TotalBases")].isNull() && m_total_bases_isValid;

    m_total_outs_pitched_isValid = ::OpenAPI::fromJsonValue(m_total_outs_pitched, json[QString("TotalOutsPitched")]);
    m_total_outs_pitched_isSet = !json[QString("TotalOutsPitched")].isNull() && m_total_outs_pitched_isValid;

    m_triples_isValid = ::OpenAPI::fromJsonValue(m_triples, json[QString("Triples")]);
    m_triples_isSet = !json[QString("Triples")].isNull() && m_triples_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_walks_isValid = ::OpenAPI::fromJsonValue(m_walks, json[QString("Walks")]);
    m_walks_isSet = !json[QString("Walks")].isNull() && m_walks_isValid;

    m_walks_hits_per_innings_pitched_isValid = ::OpenAPI::fromJsonValue(m_walks_hits_per_innings_pitched, json[QString("WalksHitsPerInningsPitched")]);
    m_walks_hits_per_innings_pitched_isSet = !json[QString("WalksHitsPerInningsPitched")].isNull() && m_walks_hits_per_innings_pitched_isValid;

    m_weighted_on_base_percentage_isValid = ::OpenAPI::fromJsonValue(m_weighted_on_base_percentage, json[QString("WeightedOnBasePercentage")]);
    m_weighted_on_base_percentage_isSet = !json[QString("WeightedOnBasePercentage")].isNull() && m_weighted_on_base_percentage_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("Wins")]);
    m_wins_isSet = !json[QString("Wins")].isNull() && m_wins_isValid;
}

QString OAITeamSeason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamSeason::asJsonObject() const {
    QJsonObject obj;
    if (m_at_bats_isSet) {
        obj.insert(QString("AtBats"), ::OpenAPI::toJsonValue(m_at_bats));
    }
    if (m_balls_in_play_isSet) {
        obj.insert(QString("BallsInPlay"), ::OpenAPI::toJsonValue(m_balls_in_play));
    }
    if (m_batting_average_isSet) {
        obj.insert(QString("BattingAverage"), ::OpenAPI::toJsonValue(m_batting_average));
    }
    if (m_batting_average_on_balls_in_play_isSet) {
        obj.insert(QString("BattingAverageOnBallsInPlay"), ::OpenAPI::toJsonValue(m_batting_average_on_balls_in_play));
    }
    if (m_batting_order_confirmed_isSet) {
        obj.insert(QString("BattingOrderConfirmed"), ::OpenAPI::toJsonValue(m_batting_order_confirmed));
    }
    if (m_caught_stealing_isSet) {
        obj.insert(QString("CaughtStealing"), ::OpenAPI::toJsonValue(m_caught_stealing));
    }
    if (m_double_plays_isSet) {
        obj.insert(QString("DoublePlays"), ::OpenAPI::toJsonValue(m_double_plays));
    }
    if (m_doubles_isSet) {
        obj.insert(QString("Doubles"), ::OpenAPI::toJsonValue(m_doubles));
    }
    if (m_earned_run_average_isSet) {
        obj.insert(QString("EarnedRunAverage"), ::OpenAPI::toJsonValue(m_earned_run_average));
    }
    if (m_errors_isSet) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_batting_isSet) {
        obj.insert(QString("FantasyPointsBatting"), ::OpenAPI::toJsonValue(m_fantasy_points_batting));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_fantasy_draft_isSet) {
        obj.insert(QString("FantasyPointsFantasyDraft"), ::OpenAPI::toJsonValue(m_fantasy_points_fantasy_draft));
    }
    if (m_fantasy_points_pitching_isSet) {
        obj.insert(QString("FantasyPointsPitching"), ::OpenAPI::toJsonValue(m_fantasy_points_pitching));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_fielding_independent_pitching_isSet) {
        obj.insert(QString("FieldingIndependentPitching"), ::OpenAPI::toJsonValue(m_fielding_independent_pitching));
    }
    if (m_fly_outs_isSet) {
        obj.insert(QString("FlyOuts"), ::OpenAPI::toJsonValue(m_fly_outs));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_grand_slams_isSet) {
        obj.insert(QString("GrandSlams"), ::OpenAPI::toJsonValue(m_grand_slams));
    }
    if (m_ground_into_double_play_isSet) {
        obj.insert(QString("GroundIntoDoublePlay"), ::OpenAPI::toJsonValue(m_ground_into_double_play));
    }
    if (m_ground_outs_isSet) {
        obj.insert(QString("GroundOuts"), ::OpenAPI::toJsonValue(m_ground_outs));
    }
    if (m_hit_by_pitch_isSet) {
        obj.insert(QString("HitByPitch"), ::OpenAPI::toJsonValue(m_hit_by_pitch));
    }
    if (m_hits_isSet) {
        obj.insert(QString("Hits"), ::OpenAPI::toJsonValue(m_hits));
    }
    if (m_home_runs_isSet) {
        obj.insert(QString("HomeRuns"), ::OpenAPI::toJsonValue(m_home_runs));
    }
    if (m_innings_pitched_decimal_isSet) {
        obj.insert(QString("InningsPitchedDecimal"), ::OpenAPI::toJsonValue(m_innings_pitched_decimal));
    }
    if (m_innings_pitched_full_isSet) {
        obj.insert(QString("InningsPitchedFull"), ::OpenAPI::toJsonValue(m_innings_pitched_full));
    }
    if (m_innings_pitched_outs_isSet) {
        obj.insert(QString("InningsPitchedOuts"), ::OpenAPI::toJsonValue(m_innings_pitched_outs));
    }
    if (m_intentional_walks_isSet) {
        obj.insert(QString("IntentionalWalks"), ::OpenAPI::toJsonValue(m_intentional_walks));
    }
    if (m_isolated_power_isSet) {
        obj.insert(QString("IsolatedPower"), ::OpenAPI::toJsonValue(m_isolated_power));
    }
    if (m_left_on_base_isSet) {
        obj.insert(QString("LeftOnBase"), ::OpenAPI::toJsonValue(m_left_on_base));
    }
    if (m_line_outs_isSet) {
        obj.insert(QString("LineOuts"), ::OpenAPI::toJsonValue(m_line_outs));
    }
    if (m_losses_isSet) {
        obj.insert(QString("Losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_on_base_percentage_isSet) {
        obj.insert(QString("OnBasePercentage"), ::OpenAPI::toJsonValue(m_on_base_percentage));
    }
    if (m_on_base_plus_slugging_isSet) {
        obj.insert(QString("OnBasePlusSlugging"), ::OpenAPI::toJsonValue(m_on_base_plus_slugging));
    }
    if (m_outs_isSet) {
        obj.insert(QString("Outs"), ::OpenAPI::toJsonValue(m_outs));
    }
    if (m_pitches_seen_isSet) {
        obj.insert(QString("PitchesSeen"), ::OpenAPI::toJsonValue(m_pitches_seen));
    }
    if (m_pitches_thrown_isSet) {
        obj.insert(QString("PitchesThrown"), ::OpenAPI::toJsonValue(m_pitches_thrown));
    }
    if (m_pitches_thrown_strikes_isSet) {
        obj.insert(QString("PitchesThrownStrikes"), ::OpenAPI::toJsonValue(m_pitches_thrown_strikes));
    }
    if (m_pitching_balls_in_play_isSet) {
        obj.insert(QString("PitchingBallsInPlay"), ::OpenAPI::toJsonValue(m_pitching_balls_in_play));
    }
    if (m_pitching_batting_average_against_isSet) {
        obj.insert(QString("PitchingBattingAverageAgainst"), ::OpenAPI::toJsonValue(m_pitching_batting_average_against));
    }
    if (m_pitching_batting_average_on_balls_in_play_isSet) {
        obj.insert(QString("PitchingBattingAverageOnBallsInPlay"), ::OpenAPI::toJsonValue(m_pitching_batting_average_on_balls_in_play));
    }
    if (m_pitching_blown_saves_isSet) {
        obj.insert(QString("PitchingBlownSaves"), ::OpenAPI::toJsonValue(m_pitching_blown_saves));
    }
    if (m_pitching_catchers_interference_isSet) {
        obj.insert(QString("PitchingCatchersInterference"), ::OpenAPI::toJsonValue(m_pitching_catchers_interference));
    }
    if (m_pitching_complete_games_isSet) {
        obj.insert(QString("PitchingCompleteGames"), ::OpenAPI::toJsonValue(m_pitching_complete_games));
    }
    if (m_pitching_double_plays_isSet) {
        obj.insert(QString("PitchingDoublePlays"), ::OpenAPI::toJsonValue(m_pitching_double_plays));
    }
    if (m_pitching_doubles_isSet) {
        obj.insert(QString("PitchingDoubles"), ::OpenAPI::toJsonValue(m_pitching_doubles));
    }
    if (m_pitching_earned_runs_isSet) {
        obj.insert(QString("PitchingEarnedRuns"), ::OpenAPI::toJsonValue(m_pitching_earned_runs));
    }
    if (m_pitching_fly_outs_isSet) {
        obj.insert(QString("PitchingFlyOuts"), ::OpenAPI::toJsonValue(m_pitching_fly_outs));
    }
    if (m_pitching_grand_slams_isSet) {
        obj.insert(QString("PitchingGrandSlams"), ::OpenAPI::toJsonValue(m_pitching_grand_slams));
    }
    if (m_pitching_ground_into_double_play_isSet) {
        obj.insert(QString("PitchingGroundIntoDoublePlay"), ::OpenAPI::toJsonValue(m_pitching_ground_into_double_play));
    }
    if (m_pitching_ground_outs_isSet) {
        obj.insert(QString("PitchingGroundOuts"), ::OpenAPI::toJsonValue(m_pitching_ground_outs));
    }
    if (m_pitching_hit_by_pitch_isSet) {
        obj.insert(QString("PitchingHitByPitch"), ::OpenAPI::toJsonValue(m_pitching_hit_by_pitch));
    }
    if (m_pitching_hits_isSet) {
        obj.insert(QString("PitchingHits"), ::OpenAPI::toJsonValue(m_pitching_hits));
    }
    if (m_pitching_holds_isSet) {
        obj.insert(QString("PitchingHolds"), ::OpenAPI::toJsonValue(m_pitching_holds));
    }
    if (m_pitching_home_runs_isSet) {
        obj.insert(QString("PitchingHomeRuns"), ::OpenAPI::toJsonValue(m_pitching_home_runs));
    }
    if (m_pitching_inning_started_isSet) {
        obj.insert(QString("PitchingInningStarted"), ::OpenAPI::toJsonValue(m_pitching_inning_started));
    }
    if (m_pitching_intentional_walks_isSet) {
        obj.insert(QString("PitchingIntentionalWalks"), ::OpenAPI::toJsonValue(m_pitching_intentional_walks));
    }
    if (m_pitching_line_outs_isSet) {
        obj.insert(QString("PitchingLineOuts"), ::OpenAPI::toJsonValue(m_pitching_line_outs));
    }
    if (m_pitching_no_hitters_isSet) {
        obj.insert(QString("PitchingNoHitters"), ::OpenAPI::toJsonValue(m_pitching_no_hitters));
    }
    if (m_pitching_on_base_percentage_isSet) {
        obj.insert(QString("PitchingOnBasePercentage"), ::OpenAPI::toJsonValue(m_pitching_on_base_percentage));
    }
    if (m_pitching_on_base_plus_slugging_isSet) {
        obj.insert(QString("PitchingOnBasePlusSlugging"), ::OpenAPI::toJsonValue(m_pitching_on_base_plus_slugging));
    }
    if (m_pitching_perfect_games_isSet) {
        obj.insert(QString("PitchingPerfectGames"), ::OpenAPI::toJsonValue(m_pitching_perfect_games));
    }
    if (m_pitching_plate_appearances_isSet) {
        obj.insert(QString("PitchingPlateAppearances"), ::OpenAPI::toJsonValue(m_pitching_plate_appearances));
    }
    if (m_pitching_pop_outs_isSet) {
        obj.insert(QString("PitchingPopOuts"), ::OpenAPI::toJsonValue(m_pitching_pop_outs));
    }
    if (m_pitching_quality_starts_isSet) {
        obj.insert(QString("PitchingQualityStarts"), ::OpenAPI::toJsonValue(m_pitching_quality_starts));
    }
    if (m_pitching_reached_on_error_isSet) {
        obj.insert(QString("PitchingReachedOnError"), ::OpenAPI::toJsonValue(m_pitching_reached_on_error));
    }
    if (m_pitching_runs_isSet) {
        obj.insert(QString("PitchingRuns"), ::OpenAPI::toJsonValue(m_pitching_runs));
    }
    if (m_pitching_sacrifice_flies_isSet) {
        obj.insert(QString("PitchingSacrificeFlies"), ::OpenAPI::toJsonValue(m_pitching_sacrifice_flies));
    }
    if (m_pitching_sacrifices_isSet) {
        obj.insert(QString("PitchingSacrifices"), ::OpenAPI::toJsonValue(m_pitching_sacrifices));
    }
    if (m_pitching_shut_outs_isSet) {
        obj.insert(QString("PitchingShutOuts"), ::OpenAPI::toJsonValue(m_pitching_shut_outs));
    }
    if (m_pitching_singles_isSet) {
        obj.insert(QString("PitchingSingles"), ::OpenAPI::toJsonValue(m_pitching_singles));
    }
    if (m_pitching_slugging_percentage_isSet) {
        obj.insert(QString("PitchingSluggingPercentage"), ::OpenAPI::toJsonValue(m_pitching_slugging_percentage));
    }
    if (m_pitching_strikeouts_isSet) {
        obj.insert(QString("PitchingStrikeouts"), ::OpenAPI::toJsonValue(m_pitching_strikeouts));
    }
    if (m_pitching_strikeouts_per_nine_innings_isSet) {
        obj.insert(QString("PitchingStrikeoutsPerNineInnings"), ::OpenAPI::toJsonValue(m_pitching_strikeouts_per_nine_innings));
    }
    if (m_pitching_total_bases_isSet) {
        obj.insert(QString("PitchingTotalBases"), ::OpenAPI::toJsonValue(m_pitching_total_bases));
    }
    if (m_pitching_triples_isSet) {
        obj.insert(QString("PitchingTriples"), ::OpenAPI::toJsonValue(m_pitching_triples));
    }
    if (m_pitching_walks_isSet) {
        obj.insert(QString("PitchingWalks"), ::OpenAPI::toJsonValue(m_pitching_walks));
    }
    if (m_pitching_walks_per_nine_innings_isSet) {
        obj.insert(QString("PitchingWalksPerNineInnings"), ::OpenAPI::toJsonValue(m_pitching_walks_per_nine_innings));
    }
    if (m_pitching_weighted_on_base_percentage_isSet) {
        obj.insert(QString("PitchingWeightedOnBasePercentage"), ::OpenAPI::toJsonValue(m_pitching_weighted_on_base_percentage));
    }
    if (m_plate_appearances_isSet) {
        obj.insert(QString("PlateAppearances"), ::OpenAPI::toJsonValue(m_plate_appearances));
    }
    if (m_pop_outs_isSet) {
        obj.insert(QString("PopOuts"), ::OpenAPI::toJsonValue(m_pop_outs));
    }
    if (m_reached_on_error_isSet) {
        obj.insert(QString("ReachedOnError"), ::OpenAPI::toJsonValue(m_reached_on_error));
    }
    if (m_runs_isSet) {
        obj.insert(QString("Runs"), ::OpenAPI::toJsonValue(m_runs));
    }
    if (m_runs_batted_in_isSet) {
        obj.insert(QString("RunsBattedIn"), ::OpenAPI::toJsonValue(m_runs_batted_in));
    }
    if (m_sacrifice_flies_isSet) {
        obj.insert(QString("SacrificeFlies"), ::OpenAPI::toJsonValue(m_sacrifice_flies));
    }
    if (m_sacrifices_isSet) {
        obj.insert(QString("Sacrifices"), ::OpenAPI::toJsonValue(m_sacrifices));
    }
    if (m_saves_isSet) {
        obj.insert(QString("Saves"), ::OpenAPI::toJsonValue(m_saves));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_singles_isSet) {
        obj.insert(QString("Singles"), ::OpenAPI::toJsonValue(m_singles));
    }
    if (m_slugging_percentage_isSet) {
        obj.insert(QString("SluggingPercentage"), ::OpenAPI::toJsonValue(m_slugging_percentage));
    }
    if (m_stat_id_isSet) {
        obj.insert(QString("StatID"), ::OpenAPI::toJsonValue(m_stat_id));
    }
    if (m_stolen_bases_isSet) {
        obj.insert(QString("StolenBases"), ::OpenAPI::toJsonValue(m_stolen_bases));
    }
    if (m_strikeouts_isSet) {
        obj.insert(QString("Strikeouts"), ::OpenAPI::toJsonValue(m_strikeouts));
    }
    if (m_substitute_batting_order_isSet) {
        obj.insert(QString("SubstituteBattingOrder"), ::OpenAPI::toJsonValue(m_substitute_batting_order));
    }
    if (m_substitute_batting_order_sequence_isSet) {
        obj.insert(QString("SubstituteBattingOrderSequence"), ::OpenAPI::toJsonValue(m_substitute_batting_order_sequence));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_total_bases_isSet) {
        obj.insert(QString("TotalBases"), ::OpenAPI::toJsonValue(m_total_bases));
    }
    if (m_total_outs_pitched_isSet) {
        obj.insert(QString("TotalOutsPitched"), ::OpenAPI::toJsonValue(m_total_outs_pitched));
    }
    if (m_triples_isSet) {
        obj.insert(QString("Triples"), ::OpenAPI::toJsonValue(m_triples));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_walks_isSet) {
        obj.insert(QString("Walks"), ::OpenAPI::toJsonValue(m_walks));
    }
    if (m_walks_hits_per_innings_pitched_isSet) {
        obj.insert(QString("WalksHitsPerInningsPitched"), ::OpenAPI::toJsonValue(m_walks_hits_per_innings_pitched));
    }
    if (m_weighted_on_base_percentage_isSet) {
        obj.insert(QString("WeightedOnBasePercentage"), ::OpenAPI::toJsonValue(m_weighted_on_base_percentage));
    }
    if (m_wins_isSet) {
        obj.insert(QString("Wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

double OAITeamSeason::getAtBats() const {
    return m_at_bats;
}
void OAITeamSeason::setAtBats(const double &at_bats) {
    m_at_bats = at_bats;
    m_at_bats_isSet = true;
}

bool OAITeamSeason::is_at_bats_Set() const{
    return m_at_bats_isSet;
}

bool OAITeamSeason::is_at_bats_Valid() const{
    return m_at_bats_isValid;
}

double OAITeamSeason::getBallsInPlay() const {
    return m_balls_in_play;
}
void OAITeamSeason::setBallsInPlay(const double &balls_in_play) {
    m_balls_in_play = balls_in_play;
    m_balls_in_play_isSet = true;
}

bool OAITeamSeason::is_balls_in_play_Set() const{
    return m_balls_in_play_isSet;
}

bool OAITeamSeason::is_balls_in_play_Valid() const{
    return m_balls_in_play_isValid;
}

double OAITeamSeason::getBattingAverage() const {
    return m_batting_average;
}
void OAITeamSeason::setBattingAverage(const double &batting_average) {
    m_batting_average = batting_average;
    m_batting_average_isSet = true;
}

bool OAITeamSeason::is_batting_average_Set() const{
    return m_batting_average_isSet;
}

bool OAITeamSeason::is_batting_average_Valid() const{
    return m_batting_average_isValid;
}

double OAITeamSeason::getBattingAverageOnBallsInPlay() const {
    return m_batting_average_on_balls_in_play;
}
void OAITeamSeason::setBattingAverageOnBallsInPlay(const double &batting_average_on_balls_in_play) {
    m_batting_average_on_balls_in_play = batting_average_on_balls_in_play;
    m_batting_average_on_balls_in_play_isSet = true;
}

bool OAITeamSeason::is_batting_average_on_balls_in_play_Set() const{
    return m_batting_average_on_balls_in_play_isSet;
}

bool OAITeamSeason::is_batting_average_on_balls_in_play_Valid() const{
    return m_batting_average_on_balls_in_play_isValid;
}

bool OAITeamSeason::isBattingOrderConfirmed() const {
    return m_batting_order_confirmed;
}
void OAITeamSeason::setBattingOrderConfirmed(const bool &batting_order_confirmed) {
    m_batting_order_confirmed = batting_order_confirmed;
    m_batting_order_confirmed_isSet = true;
}

bool OAITeamSeason::is_batting_order_confirmed_Set() const{
    return m_batting_order_confirmed_isSet;
}

bool OAITeamSeason::is_batting_order_confirmed_Valid() const{
    return m_batting_order_confirmed_isValid;
}

double OAITeamSeason::getCaughtStealing() const {
    return m_caught_stealing;
}
void OAITeamSeason::setCaughtStealing(const double &caught_stealing) {
    m_caught_stealing = caught_stealing;
    m_caught_stealing_isSet = true;
}

bool OAITeamSeason::is_caught_stealing_Set() const{
    return m_caught_stealing_isSet;
}

bool OAITeamSeason::is_caught_stealing_Valid() const{
    return m_caught_stealing_isValid;
}

double OAITeamSeason::getDoublePlays() const {
    return m_double_plays;
}
void OAITeamSeason::setDoublePlays(const double &double_plays) {
    m_double_plays = double_plays;
    m_double_plays_isSet = true;
}

bool OAITeamSeason::is_double_plays_Set() const{
    return m_double_plays_isSet;
}

bool OAITeamSeason::is_double_plays_Valid() const{
    return m_double_plays_isValid;
}

double OAITeamSeason::getDoubles() const {
    return m_doubles;
}
void OAITeamSeason::setDoubles(const double &doubles) {
    m_doubles = doubles;
    m_doubles_isSet = true;
}

bool OAITeamSeason::is_doubles_Set() const{
    return m_doubles_isSet;
}

bool OAITeamSeason::is_doubles_Valid() const{
    return m_doubles_isValid;
}

double OAITeamSeason::getEarnedRunAverage() const {
    return m_earned_run_average;
}
void OAITeamSeason::setEarnedRunAverage(const double &earned_run_average) {
    m_earned_run_average = earned_run_average;
    m_earned_run_average_isSet = true;
}

bool OAITeamSeason::is_earned_run_average_Set() const{
    return m_earned_run_average_isSet;
}

bool OAITeamSeason::is_earned_run_average_Valid() const{
    return m_earned_run_average_isValid;
}

double OAITeamSeason::getErrors() const {
    return m_errors;
}
void OAITeamSeason::setErrors(const double &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAITeamSeason::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAITeamSeason::is_errors_Valid() const{
    return m_errors_isValid;
}

double OAITeamSeason::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAITeamSeason::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAITeamSeason::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAITeamSeason::getFantasyPointsBatting() const {
    return m_fantasy_points_batting;
}
void OAITeamSeason::setFantasyPointsBatting(const double &fantasy_points_batting) {
    m_fantasy_points_batting = fantasy_points_batting;
    m_fantasy_points_batting_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_batting_Set() const{
    return m_fantasy_points_batting_isSet;
}

bool OAITeamSeason::is_fantasy_points_batting_Valid() const{
    return m_fantasy_points_batting_isValid;
}

double OAITeamSeason::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAITeamSeason::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAITeamSeason::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAITeamSeason::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAITeamSeason::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAITeamSeason::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAITeamSeason::getFantasyPointsFantasyDraft() const {
    return m_fantasy_points_fantasy_draft;
}
void OAITeamSeason::setFantasyPointsFantasyDraft(const double &fantasy_points_fantasy_draft) {
    m_fantasy_points_fantasy_draft = fantasy_points_fantasy_draft;
    m_fantasy_points_fantasy_draft_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_fantasy_draft_Set() const{
    return m_fantasy_points_fantasy_draft_isSet;
}

bool OAITeamSeason::is_fantasy_points_fantasy_draft_Valid() const{
    return m_fantasy_points_fantasy_draft_isValid;
}

double OAITeamSeason::getFantasyPointsPitching() const {
    return m_fantasy_points_pitching;
}
void OAITeamSeason::setFantasyPointsPitching(const double &fantasy_points_pitching) {
    m_fantasy_points_pitching = fantasy_points_pitching;
    m_fantasy_points_pitching_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_pitching_Set() const{
    return m_fantasy_points_pitching_isSet;
}

bool OAITeamSeason::is_fantasy_points_pitching_Valid() const{
    return m_fantasy_points_pitching_isValid;
}

double OAITeamSeason::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAITeamSeason::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAITeamSeason::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAITeamSeason::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

double OAITeamSeason::getFieldingIndependentPitching() const {
    return m_fielding_independent_pitching;
}
void OAITeamSeason::setFieldingIndependentPitching(const double &fielding_independent_pitching) {
    m_fielding_independent_pitching = fielding_independent_pitching;
    m_fielding_independent_pitching_isSet = true;
}

bool OAITeamSeason::is_fielding_independent_pitching_Set() const{
    return m_fielding_independent_pitching_isSet;
}

bool OAITeamSeason::is_fielding_independent_pitching_Valid() const{
    return m_fielding_independent_pitching_isValid;
}

double OAITeamSeason::getFlyOuts() const {
    return m_fly_outs;
}
void OAITeamSeason::setFlyOuts(const double &fly_outs) {
    m_fly_outs = fly_outs;
    m_fly_outs_isSet = true;
}

bool OAITeamSeason::is_fly_outs_Set() const{
    return m_fly_outs_isSet;
}

bool OAITeamSeason::is_fly_outs_Valid() const{
    return m_fly_outs_isValid;
}

qint32 OAITeamSeason::getGames() const {
    return m_games;
}
void OAITeamSeason::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITeamSeason::is_games_Set() const{
    return m_games_isSet;
}

bool OAITeamSeason::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAITeamSeason::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAITeamSeason::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAITeamSeason::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAITeamSeason::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

double OAITeamSeason::getGrandSlams() const {
    return m_grand_slams;
}
void OAITeamSeason::setGrandSlams(const double &grand_slams) {
    m_grand_slams = grand_slams;
    m_grand_slams_isSet = true;
}

bool OAITeamSeason::is_grand_slams_Set() const{
    return m_grand_slams_isSet;
}

bool OAITeamSeason::is_grand_slams_Valid() const{
    return m_grand_slams_isValid;
}

double OAITeamSeason::getGroundIntoDoublePlay() const {
    return m_ground_into_double_play;
}
void OAITeamSeason::setGroundIntoDoublePlay(const double &ground_into_double_play) {
    m_ground_into_double_play = ground_into_double_play;
    m_ground_into_double_play_isSet = true;
}

bool OAITeamSeason::is_ground_into_double_play_Set() const{
    return m_ground_into_double_play_isSet;
}

bool OAITeamSeason::is_ground_into_double_play_Valid() const{
    return m_ground_into_double_play_isValid;
}

double OAITeamSeason::getGroundOuts() const {
    return m_ground_outs;
}
void OAITeamSeason::setGroundOuts(const double &ground_outs) {
    m_ground_outs = ground_outs;
    m_ground_outs_isSet = true;
}

bool OAITeamSeason::is_ground_outs_Set() const{
    return m_ground_outs_isSet;
}

bool OAITeamSeason::is_ground_outs_Valid() const{
    return m_ground_outs_isValid;
}

double OAITeamSeason::getHitByPitch() const {
    return m_hit_by_pitch;
}
void OAITeamSeason::setHitByPitch(const double &hit_by_pitch) {
    m_hit_by_pitch = hit_by_pitch;
    m_hit_by_pitch_isSet = true;
}

bool OAITeamSeason::is_hit_by_pitch_Set() const{
    return m_hit_by_pitch_isSet;
}

bool OAITeamSeason::is_hit_by_pitch_Valid() const{
    return m_hit_by_pitch_isValid;
}

double OAITeamSeason::getHits() const {
    return m_hits;
}
void OAITeamSeason::setHits(const double &hits) {
    m_hits = hits;
    m_hits_isSet = true;
}

bool OAITeamSeason::is_hits_Set() const{
    return m_hits_isSet;
}

bool OAITeamSeason::is_hits_Valid() const{
    return m_hits_isValid;
}

double OAITeamSeason::getHomeRuns() const {
    return m_home_runs;
}
void OAITeamSeason::setHomeRuns(const double &home_runs) {
    m_home_runs = home_runs;
    m_home_runs_isSet = true;
}

bool OAITeamSeason::is_home_runs_Set() const{
    return m_home_runs_isSet;
}

bool OAITeamSeason::is_home_runs_Valid() const{
    return m_home_runs_isValid;
}

double OAITeamSeason::getInningsPitchedDecimal() const {
    return m_innings_pitched_decimal;
}
void OAITeamSeason::setInningsPitchedDecimal(const double &innings_pitched_decimal) {
    m_innings_pitched_decimal = innings_pitched_decimal;
    m_innings_pitched_decimal_isSet = true;
}

bool OAITeamSeason::is_innings_pitched_decimal_Set() const{
    return m_innings_pitched_decimal_isSet;
}

bool OAITeamSeason::is_innings_pitched_decimal_Valid() const{
    return m_innings_pitched_decimal_isValid;
}

double OAITeamSeason::getInningsPitchedFull() const {
    return m_innings_pitched_full;
}
void OAITeamSeason::setInningsPitchedFull(const double &innings_pitched_full) {
    m_innings_pitched_full = innings_pitched_full;
    m_innings_pitched_full_isSet = true;
}

bool OAITeamSeason::is_innings_pitched_full_Set() const{
    return m_innings_pitched_full_isSet;
}

bool OAITeamSeason::is_innings_pitched_full_Valid() const{
    return m_innings_pitched_full_isValid;
}

double OAITeamSeason::getInningsPitchedOuts() const {
    return m_innings_pitched_outs;
}
void OAITeamSeason::setInningsPitchedOuts(const double &innings_pitched_outs) {
    m_innings_pitched_outs = innings_pitched_outs;
    m_innings_pitched_outs_isSet = true;
}

bool OAITeamSeason::is_innings_pitched_outs_Set() const{
    return m_innings_pitched_outs_isSet;
}

bool OAITeamSeason::is_innings_pitched_outs_Valid() const{
    return m_innings_pitched_outs_isValid;
}

double OAITeamSeason::getIntentionalWalks() const {
    return m_intentional_walks;
}
void OAITeamSeason::setIntentionalWalks(const double &intentional_walks) {
    m_intentional_walks = intentional_walks;
    m_intentional_walks_isSet = true;
}

bool OAITeamSeason::is_intentional_walks_Set() const{
    return m_intentional_walks_isSet;
}

bool OAITeamSeason::is_intentional_walks_Valid() const{
    return m_intentional_walks_isValid;
}

double OAITeamSeason::getIsolatedPower() const {
    return m_isolated_power;
}
void OAITeamSeason::setIsolatedPower(const double &isolated_power) {
    m_isolated_power = isolated_power;
    m_isolated_power_isSet = true;
}

bool OAITeamSeason::is_isolated_power_Set() const{
    return m_isolated_power_isSet;
}

bool OAITeamSeason::is_isolated_power_Valid() const{
    return m_isolated_power_isValid;
}

double OAITeamSeason::getLeftOnBase() const {
    return m_left_on_base;
}
void OAITeamSeason::setLeftOnBase(const double &left_on_base) {
    m_left_on_base = left_on_base;
    m_left_on_base_isSet = true;
}

bool OAITeamSeason::is_left_on_base_Set() const{
    return m_left_on_base_isSet;
}

bool OAITeamSeason::is_left_on_base_Valid() const{
    return m_left_on_base_isValid;
}

double OAITeamSeason::getLineOuts() const {
    return m_line_outs;
}
void OAITeamSeason::setLineOuts(const double &line_outs) {
    m_line_outs = line_outs;
    m_line_outs_isSet = true;
}

bool OAITeamSeason::is_line_outs_Set() const{
    return m_line_outs_isSet;
}

bool OAITeamSeason::is_line_outs_Valid() const{
    return m_line_outs_isValid;
}

double OAITeamSeason::getLosses() const {
    return m_losses;
}
void OAITeamSeason::setLosses(const double &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAITeamSeason::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAITeamSeason::is_losses_Valid() const{
    return m_losses_isValid;
}

QString OAITeamSeason::getName() const {
    return m_name;
}
void OAITeamSeason::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamSeason::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamSeason::is_name_Valid() const{
    return m_name_isValid;
}

double OAITeamSeason::getOnBasePercentage() const {
    return m_on_base_percentage;
}
void OAITeamSeason::setOnBasePercentage(const double &on_base_percentage) {
    m_on_base_percentage = on_base_percentage;
    m_on_base_percentage_isSet = true;
}

bool OAITeamSeason::is_on_base_percentage_Set() const{
    return m_on_base_percentage_isSet;
}

bool OAITeamSeason::is_on_base_percentage_Valid() const{
    return m_on_base_percentage_isValid;
}

double OAITeamSeason::getOnBasePlusSlugging() const {
    return m_on_base_plus_slugging;
}
void OAITeamSeason::setOnBasePlusSlugging(const double &on_base_plus_slugging) {
    m_on_base_plus_slugging = on_base_plus_slugging;
    m_on_base_plus_slugging_isSet = true;
}

bool OAITeamSeason::is_on_base_plus_slugging_Set() const{
    return m_on_base_plus_slugging_isSet;
}

bool OAITeamSeason::is_on_base_plus_slugging_Valid() const{
    return m_on_base_plus_slugging_isValid;
}

double OAITeamSeason::getOuts() const {
    return m_outs;
}
void OAITeamSeason::setOuts(const double &outs) {
    m_outs = outs;
    m_outs_isSet = true;
}

bool OAITeamSeason::is_outs_Set() const{
    return m_outs_isSet;
}

bool OAITeamSeason::is_outs_Valid() const{
    return m_outs_isValid;
}

double OAITeamSeason::getPitchesSeen() const {
    return m_pitches_seen;
}
void OAITeamSeason::setPitchesSeen(const double &pitches_seen) {
    m_pitches_seen = pitches_seen;
    m_pitches_seen_isSet = true;
}

bool OAITeamSeason::is_pitches_seen_Set() const{
    return m_pitches_seen_isSet;
}

bool OAITeamSeason::is_pitches_seen_Valid() const{
    return m_pitches_seen_isValid;
}

double OAITeamSeason::getPitchesThrown() const {
    return m_pitches_thrown;
}
void OAITeamSeason::setPitchesThrown(const double &pitches_thrown) {
    m_pitches_thrown = pitches_thrown;
    m_pitches_thrown_isSet = true;
}

bool OAITeamSeason::is_pitches_thrown_Set() const{
    return m_pitches_thrown_isSet;
}

bool OAITeamSeason::is_pitches_thrown_Valid() const{
    return m_pitches_thrown_isValid;
}

double OAITeamSeason::getPitchesThrownStrikes() const {
    return m_pitches_thrown_strikes;
}
void OAITeamSeason::setPitchesThrownStrikes(const double &pitches_thrown_strikes) {
    m_pitches_thrown_strikes = pitches_thrown_strikes;
    m_pitches_thrown_strikes_isSet = true;
}

bool OAITeamSeason::is_pitches_thrown_strikes_Set() const{
    return m_pitches_thrown_strikes_isSet;
}

bool OAITeamSeason::is_pitches_thrown_strikes_Valid() const{
    return m_pitches_thrown_strikes_isValid;
}

double OAITeamSeason::getPitchingBallsInPlay() const {
    return m_pitching_balls_in_play;
}
void OAITeamSeason::setPitchingBallsInPlay(const double &pitching_balls_in_play) {
    m_pitching_balls_in_play = pitching_balls_in_play;
    m_pitching_balls_in_play_isSet = true;
}

bool OAITeamSeason::is_pitching_balls_in_play_Set() const{
    return m_pitching_balls_in_play_isSet;
}

bool OAITeamSeason::is_pitching_balls_in_play_Valid() const{
    return m_pitching_balls_in_play_isValid;
}

double OAITeamSeason::getPitchingBattingAverageAgainst() const {
    return m_pitching_batting_average_against;
}
void OAITeamSeason::setPitchingBattingAverageAgainst(const double &pitching_batting_average_against) {
    m_pitching_batting_average_against = pitching_batting_average_against;
    m_pitching_batting_average_against_isSet = true;
}

bool OAITeamSeason::is_pitching_batting_average_against_Set() const{
    return m_pitching_batting_average_against_isSet;
}

bool OAITeamSeason::is_pitching_batting_average_against_Valid() const{
    return m_pitching_batting_average_against_isValid;
}

double OAITeamSeason::getPitchingBattingAverageOnBallsInPlay() const {
    return m_pitching_batting_average_on_balls_in_play;
}
void OAITeamSeason::setPitchingBattingAverageOnBallsInPlay(const double &pitching_batting_average_on_balls_in_play) {
    m_pitching_batting_average_on_balls_in_play = pitching_batting_average_on_balls_in_play;
    m_pitching_batting_average_on_balls_in_play_isSet = true;
}

bool OAITeamSeason::is_pitching_batting_average_on_balls_in_play_Set() const{
    return m_pitching_batting_average_on_balls_in_play_isSet;
}

bool OAITeamSeason::is_pitching_batting_average_on_balls_in_play_Valid() const{
    return m_pitching_batting_average_on_balls_in_play_isValid;
}

double OAITeamSeason::getPitchingBlownSaves() const {
    return m_pitching_blown_saves;
}
void OAITeamSeason::setPitchingBlownSaves(const double &pitching_blown_saves) {
    m_pitching_blown_saves = pitching_blown_saves;
    m_pitching_blown_saves_isSet = true;
}

bool OAITeamSeason::is_pitching_blown_saves_Set() const{
    return m_pitching_blown_saves_isSet;
}

bool OAITeamSeason::is_pitching_blown_saves_Valid() const{
    return m_pitching_blown_saves_isValid;
}

double OAITeamSeason::getPitchingCatchersInterference() const {
    return m_pitching_catchers_interference;
}
void OAITeamSeason::setPitchingCatchersInterference(const double &pitching_catchers_interference) {
    m_pitching_catchers_interference = pitching_catchers_interference;
    m_pitching_catchers_interference_isSet = true;
}

bool OAITeamSeason::is_pitching_catchers_interference_Set() const{
    return m_pitching_catchers_interference_isSet;
}

bool OAITeamSeason::is_pitching_catchers_interference_Valid() const{
    return m_pitching_catchers_interference_isValid;
}

double OAITeamSeason::getPitchingCompleteGames() const {
    return m_pitching_complete_games;
}
void OAITeamSeason::setPitchingCompleteGames(const double &pitching_complete_games) {
    m_pitching_complete_games = pitching_complete_games;
    m_pitching_complete_games_isSet = true;
}

bool OAITeamSeason::is_pitching_complete_games_Set() const{
    return m_pitching_complete_games_isSet;
}

bool OAITeamSeason::is_pitching_complete_games_Valid() const{
    return m_pitching_complete_games_isValid;
}

double OAITeamSeason::getPitchingDoublePlays() const {
    return m_pitching_double_plays;
}
void OAITeamSeason::setPitchingDoublePlays(const double &pitching_double_plays) {
    m_pitching_double_plays = pitching_double_plays;
    m_pitching_double_plays_isSet = true;
}

bool OAITeamSeason::is_pitching_double_plays_Set() const{
    return m_pitching_double_plays_isSet;
}

bool OAITeamSeason::is_pitching_double_plays_Valid() const{
    return m_pitching_double_plays_isValid;
}

double OAITeamSeason::getPitchingDoubles() const {
    return m_pitching_doubles;
}
void OAITeamSeason::setPitchingDoubles(const double &pitching_doubles) {
    m_pitching_doubles = pitching_doubles;
    m_pitching_doubles_isSet = true;
}

bool OAITeamSeason::is_pitching_doubles_Set() const{
    return m_pitching_doubles_isSet;
}

bool OAITeamSeason::is_pitching_doubles_Valid() const{
    return m_pitching_doubles_isValid;
}

double OAITeamSeason::getPitchingEarnedRuns() const {
    return m_pitching_earned_runs;
}
void OAITeamSeason::setPitchingEarnedRuns(const double &pitching_earned_runs) {
    m_pitching_earned_runs = pitching_earned_runs;
    m_pitching_earned_runs_isSet = true;
}

bool OAITeamSeason::is_pitching_earned_runs_Set() const{
    return m_pitching_earned_runs_isSet;
}

bool OAITeamSeason::is_pitching_earned_runs_Valid() const{
    return m_pitching_earned_runs_isValid;
}

double OAITeamSeason::getPitchingFlyOuts() const {
    return m_pitching_fly_outs;
}
void OAITeamSeason::setPitchingFlyOuts(const double &pitching_fly_outs) {
    m_pitching_fly_outs = pitching_fly_outs;
    m_pitching_fly_outs_isSet = true;
}

bool OAITeamSeason::is_pitching_fly_outs_Set() const{
    return m_pitching_fly_outs_isSet;
}

bool OAITeamSeason::is_pitching_fly_outs_Valid() const{
    return m_pitching_fly_outs_isValid;
}

double OAITeamSeason::getPitchingGrandSlams() const {
    return m_pitching_grand_slams;
}
void OAITeamSeason::setPitchingGrandSlams(const double &pitching_grand_slams) {
    m_pitching_grand_slams = pitching_grand_slams;
    m_pitching_grand_slams_isSet = true;
}

bool OAITeamSeason::is_pitching_grand_slams_Set() const{
    return m_pitching_grand_slams_isSet;
}

bool OAITeamSeason::is_pitching_grand_slams_Valid() const{
    return m_pitching_grand_slams_isValid;
}

double OAITeamSeason::getPitchingGroundIntoDoublePlay() const {
    return m_pitching_ground_into_double_play;
}
void OAITeamSeason::setPitchingGroundIntoDoublePlay(const double &pitching_ground_into_double_play) {
    m_pitching_ground_into_double_play = pitching_ground_into_double_play;
    m_pitching_ground_into_double_play_isSet = true;
}

bool OAITeamSeason::is_pitching_ground_into_double_play_Set() const{
    return m_pitching_ground_into_double_play_isSet;
}

bool OAITeamSeason::is_pitching_ground_into_double_play_Valid() const{
    return m_pitching_ground_into_double_play_isValid;
}

double OAITeamSeason::getPitchingGroundOuts() const {
    return m_pitching_ground_outs;
}
void OAITeamSeason::setPitchingGroundOuts(const double &pitching_ground_outs) {
    m_pitching_ground_outs = pitching_ground_outs;
    m_pitching_ground_outs_isSet = true;
}

bool OAITeamSeason::is_pitching_ground_outs_Set() const{
    return m_pitching_ground_outs_isSet;
}

bool OAITeamSeason::is_pitching_ground_outs_Valid() const{
    return m_pitching_ground_outs_isValid;
}

double OAITeamSeason::getPitchingHitByPitch() const {
    return m_pitching_hit_by_pitch;
}
void OAITeamSeason::setPitchingHitByPitch(const double &pitching_hit_by_pitch) {
    m_pitching_hit_by_pitch = pitching_hit_by_pitch;
    m_pitching_hit_by_pitch_isSet = true;
}

bool OAITeamSeason::is_pitching_hit_by_pitch_Set() const{
    return m_pitching_hit_by_pitch_isSet;
}

bool OAITeamSeason::is_pitching_hit_by_pitch_Valid() const{
    return m_pitching_hit_by_pitch_isValid;
}

double OAITeamSeason::getPitchingHits() const {
    return m_pitching_hits;
}
void OAITeamSeason::setPitchingHits(const double &pitching_hits) {
    m_pitching_hits = pitching_hits;
    m_pitching_hits_isSet = true;
}

bool OAITeamSeason::is_pitching_hits_Set() const{
    return m_pitching_hits_isSet;
}

bool OAITeamSeason::is_pitching_hits_Valid() const{
    return m_pitching_hits_isValid;
}

double OAITeamSeason::getPitchingHolds() const {
    return m_pitching_holds;
}
void OAITeamSeason::setPitchingHolds(const double &pitching_holds) {
    m_pitching_holds = pitching_holds;
    m_pitching_holds_isSet = true;
}

bool OAITeamSeason::is_pitching_holds_Set() const{
    return m_pitching_holds_isSet;
}

bool OAITeamSeason::is_pitching_holds_Valid() const{
    return m_pitching_holds_isValid;
}

double OAITeamSeason::getPitchingHomeRuns() const {
    return m_pitching_home_runs;
}
void OAITeamSeason::setPitchingHomeRuns(const double &pitching_home_runs) {
    m_pitching_home_runs = pitching_home_runs;
    m_pitching_home_runs_isSet = true;
}

bool OAITeamSeason::is_pitching_home_runs_Set() const{
    return m_pitching_home_runs_isSet;
}

bool OAITeamSeason::is_pitching_home_runs_Valid() const{
    return m_pitching_home_runs_isValid;
}

qint32 OAITeamSeason::getPitchingInningStarted() const {
    return m_pitching_inning_started;
}
void OAITeamSeason::setPitchingInningStarted(const qint32 &pitching_inning_started) {
    m_pitching_inning_started = pitching_inning_started;
    m_pitching_inning_started_isSet = true;
}

bool OAITeamSeason::is_pitching_inning_started_Set() const{
    return m_pitching_inning_started_isSet;
}

bool OAITeamSeason::is_pitching_inning_started_Valid() const{
    return m_pitching_inning_started_isValid;
}

double OAITeamSeason::getPitchingIntentionalWalks() const {
    return m_pitching_intentional_walks;
}
void OAITeamSeason::setPitchingIntentionalWalks(const double &pitching_intentional_walks) {
    m_pitching_intentional_walks = pitching_intentional_walks;
    m_pitching_intentional_walks_isSet = true;
}

bool OAITeamSeason::is_pitching_intentional_walks_Set() const{
    return m_pitching_intentional_walks_isSet;
}

bool OAITeamSeason::is_pitching_intentional_walks_Valid() const{
    return m_pitching_intentional_walks_isValid;
}

double OAITeamSeason::getPitchingLineOuts() const {
    return m_pitching_line_outs;
}
void OAITeamSeason::setPitchingLineOuts(const double &pitching_line_outs) {
    m_pitching_line_outs = pitching_line_outs;
    m_pitching_line_outs_isSet = true;
}

bool OAITeamSeason::is_pitching_line_outs_Set() const{
    return m_pitching_line_outs_isSet;
}

bool OAITeamSeason::is_pitching_line_outs_Valid() const{
    return m_pitching_line_outs_isValid;
}

double OAITeamSeason::getPitchingNoHitters() const {
    return m_pitching_no_hitters;
}
void OAITeamSeason::setPitchingNoHitters(const double &pitching_no_hitters) {
    m_pitching_no_hitters = pitching_no_hitters;
    m_pitching_no_hitters_isSet = true;
}

bool OAITeamSeason::is_pitching_no_hitters_Set() const{
    return m_pitching_no_hitters_isSet;
}

bool OAITeamSeason::is_pitching_no_hitters_Valid() const{
    return m_pitching_no_hitters_isValid;
}

double OAITeamSeason::getPitchingOnBasePercentage() const {
    return m_pitching_on_base_percentage;
}
void OAITeamSeason::setPitchingOnBasePercentage(const double &pitching_on_base_percentage) {
    m_pitching_on_base_percentage = pitching_on_base_percentage;
    m_pitching_on_base_percentage_isSet = true;
}

bool OAITeamSeason::is_pitching_on_base_percentage_Set() const{
    return m_pitching_on_base_percentage_isSet;
}

bool OAITeamSeason::is_pitching_on_base_percentage_Valid() const{
    return m_pitching_on_base_percentage_isValid;
}

double OAITeamSeason::getPitchingOnBasePlusSlugging() const {
    return m_pitching_on_base_plus_slugging;
}
void OAITeamSeason::setPitchingOnBasePlusSlugging(const double &pitching_on_base_plus_slugging) {
    m_pitching_on_base_plus_slugging = pitching_on_base_plus_slugging;
    m_pitching_on_base_plus_slugging_isSet = true;
}

bool OAITeamSeason::is_pitching_on_base_plus_slugging_Set() const{
    return m_pitching_on_base_plus_slugging_isSet;
}

bool OAITeamSeason::is_pitching_on_base_plus_slugging_Valid() const{
    return m_pitching_on_base_plus_slugging_isValid;
}

double OAITeamSeason::getPitchingPerfectGames() const {
    return m_pitching_perfect_games;
}
void OAITeamSeason::setPitchingPerfectGames(const double &pitching_perfect_games) {
    m_pitching_perfect_games = pitching_perfect_games;
    m_pitching_perfect_games_isSet = true;
}

bool OAITeamSeason::is_pitching_perfect_games_Set() const{
    return m_pitching_perfect_games_isSet;
}

bool OAITeamSeason::is_pitching_perfect_games_Valid() const{
    return m_pitching_perfect_games_isValid;
}

double OAITeamSeason::getPitchingPlateAppearances() const {
    return m_pitching_plate_appearances;
}
void OAITeamSeason::setPitchingPlateAppearances(const double &pitching_plate_appearances) {
    m_pitching_plate_appearances = pitching_plate_appearances;
    m_pitching_plate_appearances_isSet = true;
}

bool OAITeamSeason::is_pitching_plate_appearances_Set() const{
    return m_pitching_plate_appearances_isSet;
}

bool OAITeamSeason::is_pitching_plate_appearances_Valid() const{
    return m_pitching_plate_appearances_isValid;
}

double OAITeamSeason::getPitchingPopOuts() const {
    return m_pitching_pop_outs;
}
void OAITeamSeason::setPitchingPopOuts(const double &pitching_pop_outs) {
    m_pitching_pop_outs = pitching_pop_outs;
    m_pitching_pop_outs_isSet = true;
}

bool OAITeamSeason::is_pitching_pop_outs_Set() const{
    return m_pitching_pop_outs_isSet;
}

bool OAITeamSeason::is_pitching_pop_outs_Valid() const{
    return m_pitching_pop_outs_isValid;
}

double OAITeamSeason::getPitchingQualityStarts() const {
    return m_pitching_quality_starts;
}
void OAITeamSeason::setPitchingQualityStarts(const double &pitching_quality_starts) {
    m_pitching_quality_starts = pitching_quality_starts;
    m_pitching_quality_starts_isSet = true;
}

bool OAITeamSeason::is_pitching_quality_starts_Set() const{
    return m_pitching_quality_starts_isSet;
}

bool OAITeamSeason::is_pitching_quality_starts_Valid() const{
    return m_pitching_quality_starts_isValid;
}

double OAITeamSeason::getPitchingReachedOnError() const {
    return m_pitching_reached_on_error;
}
void OAITeamSeason::setPitchingReachedOnError(const double &pitching_reached_on_error) {
    m_pitching_reached_on_error = pitching_reached_on_error;
    m_pitching_reached_on_error_isSet = true;
}

bool OAITeamSeason::is_pitching_reached_on_error_Set() const{
    return m_pitching_reached_on_error_isSet;
}

bool OAITeamSeason::is_pitching_reached_on_error_Valid() const{
    return m_pitching_reached_on_error_isValid;
}

double OAITeamSeason::getPitchingRuns() const {
    return m_pitching_runs;
}
void OAITeamSeason::setPitchingRuns(const double &pitching_runs) {
    m_pitching_runs = pitching_runs;
    m_pitching_runs_isSet = true;
}

bool OAITeamSeason::is_pitching_runs_Set() const{
    return m_pitching_runs_isSet;
}

bool OAITeamSeason::is_pitching_runs_Valid() const{
    return m_pitching_runs_isValid;
}

double OAITeamSeason::getPitchingSacrificeFlies() const {
    return m_pitching_sacrifice_flies;
}
void OAITeamSeason::setPitchingSacrificeFlies(const double &pitching_sacrifice_flies) {
    m_pitching_sacrifice_flies = pitching_sacrifice_flies;
    m_pitching_sacrifice_flies_isSet = true;
}

bool OAITeamSeason::is_pitching_sacrifice_flies_Set() const{
    return m_pitching_sacrifice_flies_isSet;
}

bool OAITeamSeason::is_pitching_sacrifice_flies_Valid() const{
    return m_pitching_sacrifice_flies_isValid;
}

double OAITeamSeason::getPitchingSacrifices() const {
    return m_pitching_sacrifices;
}
void OAITeamSeason::setPitchingSacrifices(const double &pitching_sacrifices) {
    m_pitching_sacrifices = pitching_sacrifices;
    m_pitching_sacrifices_isSet = true;
}

bool OAITeamSeason::is_pitching_sacrifices_Set() const{
    return m_pitching_sacrifices_isSet;
}

bool OAITeamSeason::is_pitching_sacrifices_Valid() const{
    return m_pitching_sacrifices_isValid;
}

double OAITeamSeason::getPitchingShutOuts() const {
    return m_pitching_shut_outs;
}
void OAITeamSeason::setPitchingShutOuts(const double &pitching_shut_outs) {
    m_pitching_shut_outs = pitching_shut_outs;
    m_pitching_shut_outs_isSet = true;
}

bool OAITeamSeason::is_pitching_shut_outs_Set() const{
    return m_pitching_shut_outs_isSet;
}

bool OAITeamSeason::is_pitching_shut_outs_Valid() const{
    return m_pitching_shut_outs_isValid;
}

double OAITeamSeason::getPitchingSingles() const {
    return m_pitching_singles;
}
void OAITeamSeason::setPitchingSingles(const double &pitching_singles) {
    m_pitching_singles = pitching_singles;
    m_pitching_singles_isSet = true;
}

bool OAITeamSeason::is_pitching_singles_Set() const{
    return m_pitching_singles_isSet;
}

bool OAITeamSeason::is_pitching_singles_Valid() const{
    return m_pitching_singles_isValid;
}

double OAITeamSeason::getPitchingSluggingPercentage() const {
    return m_pitching_slugging_percentage;
}
void OAITeamSeason::setPitchingSluggingPercentage(const double &pitching_slugging_percentage) {
    m_pitching_slugging_percentage = pitching_slugging_percentage;
    m_pitching_slugging_percentage_isSet = true;
}

bool OAITeamSeason::is_pitching_slugging_percentage_Set() const{
    return m_pitching_slugging_percentage_isSet;
}

bool OAITeamSeason::is_pitching_slugging_percentage_Valid() const{
    return m_pitching_slugging_percentage_isValid;
}

double OAITeamSeason::getPitchingStrikeouts() const {
    return m_pitching_strikeouts;
}
void OAITeamSeason::setPitchingStrikeouts(const double &pitching_strikeouts) {
    m_pitching_strikeouts = pitching_strikeouts;
    m_pitching_strikeouts_isSet = true;
}

bool OAITeamSeason::is_pitching_strikeouts_Set() const{
    return m_pitching_strikeouts_isSet;
}

bool OAITeamSeason::is_pitching_strikeouts_Valid() const{
    return m_pitching_strikeouts_isValid;
}

double OAITeamSeason::getPitchingStrikeoutsPerNineInnings() const {
    return m_pitching_strikeouts_per_nine_innings;
}
void OAITeamSeason::setPitchingStrikeoutsPerNineInnings(const double &pitching_strikeouts_per_nine_innings) {
    m_pitching_strikeouts_per_nine_innings = pitching_strikeouts_per_nine_innings;
    m_pitching_strikeouts_per_nine_innings_isSet = true;
}

bool OAITeamSeason::is_pitching_strikeouts_per_nine_innings_Set() const{
    return m_pitching_strikeouts_per_nine_innings_isSet;
}

bool OAITeamSeason::is_pitching_strikeouts_per_nine_innings_Valid() const{
    return m_pitching_strikeouts_per_nine_innings_isValid;
}

double OAITeamSeason::getPitchingTotalBases() const {
    return m_pitching_total_bases;
}
void OAITeamSeason::setPitchingTotalBases(const double &pitching_total_bases) {
    m_pitching_total_bases = pitching_total_bases;
    m_pitching_total_bases_isSet = true;
}

bool OAITeamSeason::is_pitching_total_bases_Set() const{
    return m_pitching_total_bases_isSet;
}

bool OAITeamSeason::is_pitching_total_bases_Valid() const{
    return m_pitching_total_bases_isValid;
}

double OAITeamSeason::getPitchingTriples() const {
    return m_pitching_triples;
}
void OAITeamSeason::setPitchingTriples(const double &pitching_triples) {
    m_pitching_triples = pitching_triples;
    m_pitching_triples_isSet = true;
}

bool OAITeamSeason::is_pitching_triples_Set() const{
    return m_pitching_triples_isSet;
}

bool OAITeamSeason::is_pitching_triples_Valid() const{
    return m_pitching_triples_isValid;
}

double OAITeamSeason::getPitchingWalks() const {
    return m_pitching_walks;
}
void OAITeamSeason::setPitchingWalks(const double &pitching_walks) {
    m_pitching_walks = pitching_walks;
    m_pitching_walks_isSet = true;
}

bool OAITeamSeason::is_pitching_walks_Set() const{
    return m_pitching_walks_isSet;
}

bool OAITeamSeason::is_pitching_walks_Valid() const{
    return m_pitching_walks_isValid;
}

double OAITeamSeason::getPitchingWalksPerNineInnings() const {
    return m_pitching_walks_per_nine_innings;
}
void OAITeamSeason::setPitchingWalksPerNineInnings(const double &pitching_walks_per_nine_innings) {
    m_pitching_walks_per_nine_innings = pitching_walks_per_nine_innings;
    m_pitching_walks_per_nine_innings_isSet = true;
}

bool OAITeamSeason::is_pitching_walks_per_nine_innings_Set() const{
    return m_pitching_walks_per_nine_innings_isSet;
}

bool OAITeamSeason::is_pitching_walks_per_nine_innings_Valid() const{
    return m_pitching_walks_per_nine_innings_isValid;
}

double OAITeamSeason::getPitchingWeightedOnBasePercentage() const {
    return m_pitching_weighted_on_base_percentage;
}
void OAITeamSeason::setPitchingWeightedOnBasePercentage(const double &pitching_weighted_on_base_percentage) {
    m_pitching_weighted_on_base_percentage = pitching_weighted_on_base_percentage;
    m_pitching_weighted_on_base_percentage_isSet = true;
}

bool OAITeamSeason::is_pitching_weighted_on_base_percentage_Set() const{
    return m_pitching_weighted_on_base_percentage_isSet;
}

bool OAITeamSeason::is_pitching_weighted_on_base_percentage_Valid() const{
    return m_pitching_weighted_on_base_percentage_isValid;
}

double OAITeamSeason::getPlateAppearances() const {
    return m_plate_appearances;
}
void OAITeamSeason::setPlateAppearances(const double &plate_appearances) {
    m_plate_appearances = plate_appearances;
    m_plate_appearances_isSet = true;
}

bool OAITeamSeason::is_plate_appearances_Set() const{
    return m_plate_appearances_isSet;
}

bool OAITeamSeason::is_plate_appearances_Valid() const{
    return m_plate_appearances_isValid;
}

double OAITeamSeason::getPopOuts() const {
    return m_pop_outs;
}
void OAITeamSeason::setPopOuts(const double &pop_outs) {
    m_pop_outs = pop_outs;
    m_pop_outs_isSet = true;
}

bool OAITeamSeason::is_pop_outs_Set() const{
    return m_pop_outs_isSet;
}

bool OAITeamSeason::is_pop_outs_Valid() const{
    return m_pop_outs_isValid;
}

double OAITeamSeason::getReachedOnError() const {
    return m_reached_on_error;
}
void OAITeamSeason::setReachedOnError(const double &reached_on_error) {
    m_reached_on_error = reached_on_error;
    m_reached_on_error_isSet = true;
}

bool OAITeamSeason::is_reached_on_error_Set() const{
    return m_reached_on_error_isSet;
}

bool OAITeamSeason::is_reached_on_error_Valid() const{
    return m_reached_on_error_isValid;
}

double OAITeamSeason::getRuns() const {
    return m_runs;
}
void OAITeamSeason::setRuns(const double &runs) {
    m_runs = runs;
    m_runs_isSet = true;
}

bool OAITeamSeason::is_runs_Set() const{
    return m_runs_isSet;
}

bool OAITeamSeason::is_runs_Valid() const{
    return m_runs_isValid;
}

double OAITeamSeason::getRunsBattedIn() const {
    return m_runs_batted_in;
}
void OAITeamSeason::setRunsBattedIn(const double &runs_batted_in) {
    m_runs_batted_in = runs_batted_in;
    m_runs_batted_in_isSet = true;
}

bool OAITeamSeason::is_runs_batted_in_Set() const{
    return m_runs_batted_in_isSet;
}

bool OAITeamSeason::is_runs_batted_in_Valid() const{
    return m_runs_batted_in_isValid;
}

double OAITeamSeason::getSacrificeFlies() const {
    return m_sacrifice_flies;
}
void OAITeamSeason::setSacrificeFlies(const double &sacrifice_flies) {
    m_sacrifice_flies = sacrifice_flies;
    m_sacrifice_flies_isSet = true;
}

bool OAITeamSeason::is_sacrifice_flies_Set() const{
    return m_sacrifice_flies_isSet;
}

bool OAITeamSeason::is_sacrifice_flies_Valid() const{
    return m_sacrifice_flies_isValid;
}

double OAITeamSeason::getSacrifices() const {
    return m_sacrifices;
}
void OAITeamSeason::setSacrifices(const double &sacrifices) {
    m_sacrifices = sacrifices;
    m_sacrifices_isSet = true;
}

bool OAITeamSeason::is_sacrifices_Set() const{
    return m_sacrifices_isSet;
}

bool OAITeamSeason::is_sacrifices_Valid() const{
    return m_sacrifices_isValid;
}

double OAITeamSeason::getSaves() const {
    return m_saves;
}
void OAITeamSeason::setSaves(const double &saves) {
    m_saves = saves;
    m_saves_isSet = true;
}

bool OAITeamSeason::is_saves_Set() const{
    return m_saves_isSet;
}

bool OAITeamSeason::is_saves_Valid() const{
    return m_saves_isValid;
}

qint32 OAITeamSeason::getSeason() const {
    return m_season;
}
void OAITeamSeason::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAITeamSeason::is_season_Set() const{
    return m_season_isSet;
}

bool OAITeamSeason::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAITeamSeason::getSeasonType() const {
    return m_season_type;
}
void OAITeamSeason::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAITeamSeason::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAITeamSeason::is_season_type_Valid() const{
    return m_season_type_isValid;
}

double OAITeamSeason::getSingles() const {
    return m_singles;
}
void OAITeamSeason::setSingles(const double &singles) {
    m_singles = singles;
    m_singles_isSet = true;
}

bool OAITeamSeason::is_singles_Set() const{
    return m_singles_isSet;
}

bool OAITeamSeason::is_singles_Valid() const{
    return m_singles_isValid;
}

double OAITeamSeason::getSluggingPercentage() const {
    return m_slugging_percentage;
}
void OAITeamSeason::setSluggingPercentage(const double &slugging_percentage) {
    m_slugging_percentage = slugging_percentage;
    m_slugging_percentage_isSet = true;
}

bool OAITeamSeason::is_slugging_percentage_Set() const{
    return m_slugging_percentage_isSet;
}

bool OAITeamSeason::is_slugging_percentage_Valid() const{
    return m_slugging_percentage_isValid;
}

qint32 OAITeamSeason::getStatId() const {
    return m_stat_id;
}
void OAITeamSeason::setStatId(const qint32 &stat_id) {
    m_stat_id = stat_id;
    m_stat_id_isSet = true;
}

bool OAITeamSeason::is_stat_id_Set() const{
    return m_stat_id_isSet;
}

bool OAITeamSeason::is_stat_id_Valid() const{
    return m_stat_id_isValid;
}

double OAITeamSeason::getStolenBases() const {
    return m_stolen_bases;
}
void OAITeamSeason::setStolenBases(const double &stolen_bases) {
    m_stolen_bases = stolen_bases;
    m_stolen_bases_isSet = true;
}

bool OAITeamSeason::is_stolen_bases_Set() const{
    return m_stolen_bases_isSet;
}

bool OAITeamSeason::is_stolen_bases_Valid() const{
    return m_stolen_bases_isValid;
}

double OAITeamSeason::getStrikeouts() const {
    return m_strikeouts;
}
void OAITeamSeason::setStrikeouts(const double &strikeouts) {
    m_strikeouts = strikeouts;
    m_strikeouts_isSet = true;
}

bool OAITeamSeason::is_strikeouts_Set() const{
    return m_strikeouts_isSet;
}

bool OAITeamSeason::is_strikeouts_Valid() const{
    return m_strikeouts_isValid;
}

qint32 OAITeamSeason::getSubstituteBattingOrder() const {
    return m_substitute_batting_order;
}
void OAITeamSeason::setSubstituteBattingOrder(const qint32 &substitute_batting_order) {
    m_substitute_batting_order = substitute_batting_order;
    m_substitute_batting_order_isSet = true;
}

bool OAITeamSeason::is_substitute_batting_order_Set() const{
    return m_substitute_batting_order_isSet;
}

bool OAITeamSeason::is_substitute_batting_order_Valid() const{
    return m_substitute_batting_order_isValid;
}

qint32 OAITeamSeason::getSubstituteBattingOrderSequence() const {
    return m_substitute_batting_order_sequence;
}
void OAITeamSeason::setSubstituteBattingOrderSequence(const qint32 &substitute_batting_order_sequence) {
    m_substitute_batting_order_sequence = substitute_batting_order_sequence;
    m_substitute_batting_order_sequence_isSet = true;
}

bool OAITeamSeason::is_substitute_batting_order_sequence_Set() const{
    return m_substitute_batting_order_sequence_isSet;
}

bool OAITeamSeason::is_substitute_batting_order_sequence_Valid() const{
    return m_substitute_batting_order_sequence_isValid;
}

QString OAITeamSeason::getTeam() const {
    return m_team;
}
void OAITeamSeason::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamSeason::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamSeason::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAITeamSeason::getTeamId() const {
    return m_team_id;
}
void OAITeamSeason::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamSeason::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamSeason::is_team_id_Valid() const{
    return m_team_id_isValid;
}

double OAITeamSeason::getTotalBases() const {
    return m_total_bases;
}
void OAITeamSeason::setTotalBases(const double &total_bases) {
    m_total_bases = total_bases;
    m_total_bases_isSet = true;
}

bool OAITeamSeason::is_total_bases_Set() const{
    return m_total_bases_isSet;
}

bool OAITeamSeason::is_total_bases_Valid() const{
    return m_total_bases_isValid;
}

double OAITeamSeason::getTotalOutsPitched() const {
    return m_total_outs_pitched;
}
void OAITeamSeason::setTotalOutsPitched(const double &total_outs_pitched) {
    m_total_outs_pitched = total_outs_pitched;
    m_total_outs_pitched_isSet = true;
}

bool OAITeamSeason::is_total_outs_pitched_Set() const{
    return m_total_outs_pitched_isSet;
}

bool OAITeamSeason::is_total_outs_pitched_Valid() const{
    return m_total_outs_pitched_isValid;
}

double OAITeamSeason::getTriples() const {
    return m_triples;
}
void OAITeamSeason::setTriples(const double &triples) {
    m_triples = triples;
    m_triples_isSet = true;
}

bool OAITeamSeason::is_triples_Set() const{
    return m_triples_isSet;
}

bool OAITeamSeason::is_triples_Valid() const{
    return m_triples_isValid;
}

QString OAITeamSeason::getUpdated() const {
    return m_updated;
}
void OAITeamSeason::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITeamSeason::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITeamSeason::is_updated_Valid() const{
    return m_updated_isValid;
}

double OAITeamSeason::getWalks() const {
    return m_walks;
}
void OAITeamSeason::setWalks(const double &walks) {
    m_walks = walks;
    m_walks_isSet = true;
}

bool OAITeamSeason::is_walks_Set() const{
    return m_walks_isSet;
}

bool OAITeamSeason::is_walks_Valid() const{
    return m_walks_isValid;
}

double OAITeamSeason::getWalksHitsPerInningsPitched() const {
    return m_walks_hits_per_innings_pitched;
}
void OAITeamSeason::setWalksHitsPerInningsPitched(const double &walks_hits_per_innings_pitched) {
    m_walks_hits_per_innings_pitched = walks_hits_per_innings_pitched;
    m_walks_hits_per_innings_pitched_isSet = true;
}

bool OAITeamSeason::is_walks_hits_per_innings_pitched_Set() const{
    return m_walks_hits_per_innings_pitched_isSet;
}

bool OAITeamSeason::is_walks_hits_per_innings_pitched_Valid() const{
    return m_walks_hits_per_innings_pitched_isValid;
}

double OAITeamSeason::getWeightedOnBasePercentage() const {
    return m_weighted_on_base_percentage;
}
void OAITeamSeason::setWeightedOnBasePercentage(const double &weighted_on_base_percentage) {
    m_weighted_on_base_percentage = weighted_on_base_percentage;
    m_weighted_on_base_percentage_isSet = true;
}

bool OAITeamSeason::is_weighted_on_base_percentage_Set() const{
    return m_weighted_on_base_percentage_isSet;
}

bool OAITeamSeason::is_weighted_on_base_percentage_Valid() const{
    return m_weighted_on_base_percentage_isValid;
}

double OAITeamSeason::getWins() const {
    return m_wins;
}
void OAITeamSeason::setWins(const double &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAITeamSeason::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAITeamSeason::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAITeamSeason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_at_bats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balls_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batting_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batting_average_on_balls_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batting_order_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caught_stealing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doubles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earned_run_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_batting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fantasy_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_pitching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fielding_independent_pitching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fly_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_slams_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_into_double_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_by_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innings_pitched_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innings_pitched_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innings_pitched_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intentional_walks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isolated_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_on_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_base_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_base_plus_slugging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitches_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitches_thrown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitches_thrown_strikes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_balls_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_batting_average_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_batting_average_on_balls_in_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_blown_saves_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_catchers_interference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_complete_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_double_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_doubles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_earned_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_fly_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_grand_slams_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_ground_into_double_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_ground_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_hit_by_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_holds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_home_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_inning_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_intentional_walks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_line_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_no_hitters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_on_base_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_on_base_plus_slugging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_perfect_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_plate_appearances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_pop_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_quality_starts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_reached_on_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_sacrifice_flies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_sacrifices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_shut_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_singles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_slugging_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_strikeouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_strikeouts_per_nine_innings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_total_bases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_triples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_walks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_walks_per_nine_innings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitching_weighted_on_base_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plate_appearances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pop_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reached_on_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs_batted_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacrifice_flies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacrifices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saves_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_singles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slugging_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stolen_bases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikeouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitute_batting_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitute_batting_order_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_outs_pitched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walks_hits_per_innings_pitched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_on_base_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamSeason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
