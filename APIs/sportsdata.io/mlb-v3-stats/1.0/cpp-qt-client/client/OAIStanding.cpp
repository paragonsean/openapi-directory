/**
 * MLB v3 Stats
 * MLB scores, stats, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStanding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStanding::OAIStanding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStanding::OAIStanding() {
    this->initializeModel();
}

OAIStanding::~OAIStanding() {}

void OAIStanding::initializeModel() {

    m_away_losses_isSet = false;
    m_away_losses_isValid = false;

    m_away_wins_isSet = false;
    m_away_wins_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_day_losses_isSet = false;
    m_day_losses_isValid = false;

    m_day_wins_isSet = false;
    m_day_wins_isValid = false;

    m_division_isSet = false;
    m_division_isValid = false;

    m_division_losses_isSet = false;
    m_division_losses_isValid = false;

    m_division_rank_isSet = false;
    m_division_rank_isValid = false;

    m_division_wins_isSet = false;
    m_division_wins_isValid = false;

    m_games_behind_isSet = false;
    m_games_behind_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_home_losses_isSet = false;
    m_home_losses_isValid = false;

    m_home_wins_isSet = false;
    m_home_wins_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_ten_games_losses_isSet = false;
    m_last_ten_games_losses_isValid = false;

    m_last_ten_games_wins_isSet = false;
    m_last_ten_games_wins_isValid = false;

    m_league_isSet = false;
    m_league_isValid = false;

    m_league_rank_isSet = false;
    m_league_rank_isValid = false;

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_night_losses_isSet = false;
    m_night_losses_isValid = false;

    m_night_wins_isSet = false;
    m_night_wins_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_runs_against_isSet = false;
    m_runs_against_isValid = false;

    m_runs_scored_isSet = false;
    m_runs_scored_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_streak_isSet = false;
    m_streak_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_wild_card_games_behind_isSet = false;
    m_wild_card_games_behind_isValid = false;

    m_wild_card_rank_isSet = false;
    m_wild_card_rank_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAIStanding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStanding::fromJsonObject(QJsonObject json) {

    m_away_losses_isValid = ::OpenAPI::fromJsonValue(m_away_losses, json[QString("AwayLosses")]);
    m_away_losses_isSet = !json[QString("AwayLosses")].isNull() && m_away_losses_isValid;

    m_away_wins_isValid = ::OpenAPI::fromJsonValue(m_away_wins, json[QString("AwayWins")]);
    m_away_wins_isSet = !json[QString("AwayWins")].isNull() && m_away_wins_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_day_losses_isValid = ::OpenAPI::fromJsonValue(m_day_losses, json[QString("DayLosses")]);
    m_day_losses_isSet = !json[QString("DayLosses")].isNull() && m_day_losses_isValid;

    m_day_wins_isValid = ::OpenAPI::fromJsonValue(m_day_wins, json[QString("DayWins")]);
    m_day_wins_isSet = !json[QString("DayWins")].isNull() && m_day_wins_isValid;

    m_division_isValid = ::OpenAPI::fromJsonValue(m_division, json[QString("Division")]);
    m_division_isSet = !json[QString("Division")].isNull() && m_division_isValid;

    m_division_losses_isValid = ::OpenAPI::fromJsonValue(m_division_losses, json[QString("DivisionLosses")]);
    m_division_losses_isSet = !json[QString("DivisionLosses")].isNull() && m_division_losses_isValid;

    m_division_rank_isValid = ::OpenAPI::fromJsonValue(m_division_rank, json[QString("DivisionRank")]);
    m_division_rank_isSet = !json[QString("DivisionRank")].isNull() && m_division_rank_isValid;

    m_division_wins_isValid = ::OpenAPI::fromJsonValue(m_division_wins, json[QString("DivisionWins")]);
    m_division_wins_isSet = !json[QString("DivisionWins")].isNull() && m_division_wins_isValid;

    m_games_behind_isValid = ::OpenAPI::fromJsonValue(m_games_behind, json[QString("GamesBehind")]);
    m_games_behind_isSet = !json[QString("GamesBehind")].isNull() && m_games_behind_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_home_losses_isValid = ::OpenAPI::fromJsonValue(m_home_losses, json[QString("HomeLosses")]);
    m_home_losses_isSet = !json[QString("HomeLosses")].isNull() && m_home_losses_isValid;

    m_home_wins_isValid = ::OpenAPI::fromJsonValue(m_home_wins, json[QString("HomeWins")]);
    m_home_wins_isSet = !json[QString("HomeWins")].isNull() && m_home_wins_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_last_ten_games_losses_isValid = ::OpenAPI::fromJsonValue(m_last_ten_games_losses, json[QString("LastTenGamesLosses")]);
    m_last_ten_games_losses_isSet = !json[QString("LastTenGamesLosses")].isNull() && m_last_ten_games_losses_isValid;

    m_last_ten_games_wins_isValid = ::OpenAPI::fromJsonValue(m_last_ten_games_wins, json[QString("LastTenGamesWins")]);
    m_last_ten_games_wins_isSet = !json[QString("LastTenGamesWins")].isNull() && m_last_ten_games_wins_isValid;

    m_league_isValid = ::OpenAPI::fromJsonValue(m_league, json[QString("League")]);
    m_league_isSet = !json[QString("League")].isNull() && m_league_isValid;

    m_league_rank_isValid = ::OpenAPI::fromJsonValue(m_league_rank, json[QString("LeagueRank")]);
    m_league_rank_isSet = !json[QString("LeagueRank")].isNull() && m_league_rank_isValid;

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("Losses")]);
    m_losses_isSet = !json[QString("Losses")].isNull() && m_losses_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_night_losses_isValid = ::OpenAPI::fromJsonValue(m_night_losses, json[QString("NightLosses")]);
    m_night_losses_isSet = !json[QString("NightLosses")].isNull() && m_night_losses_isValid;

    m_night_wins_isValid = ::OpenAPI::fromJsonValue(m_night_wins, json[QString("NightWins")]);
    m_night_wins_isSet = !json[QString("NightWins")].isNull() && m_night_wins_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("Percentage")]);
    m_percentage_isSet = !json[QString("Percentage")].isNull() && m_percentage_isValid;

    m_runs_against_isValid = ::OpenAPI::fromJsonValue(m_runs_against, json[QString("RunsAgainst")]);
    m_runs_against_isSet = !json[QString("RunsAgainst")].isNull() && m_runs_against_isValid;

    m_runs_scored_isValid = ::OpenAPI::fromJsonValue(m_runs_scored, json[QString("RunsScored")]);
    m_runs_scored_isSet = !json[QString("RunsScored")].isNull() && m_runs_scored_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_streak_isValid = ::OpenAPI::fromJsonValue(m_streak, json[QString("Streak")]);
    m_streak_isSet = !json[QString("Streak")].isNull() && m_streak_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_wild_card_games_behind_isValid = ::OpenAPI::fromJsonValue(m_wild_card_games_behind, json[QString("WildCardGamesBehind")]);
    m_wild_card_games_behind_isSet = !json[QString("WildCardGamesBehind")].isNull() && m_wild_card_games_behind_isValid;

    m_wild_card_rank_isValid = ::OpenAPI::fromJsonValue(m_wild_card_rank, json[QString("WildCardRank")]);
    m_wild_card_rank_isSet = !json[QString("WildCardRank")].isNull() && m_wild_card_rank_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("Wins")]);
    m_wins_isSet = !json[QString("Wins")].isNull() && m_wins_isValid;
}

QString OAIStanding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStanding::asJsonObject() const {
    QJsonObject obj;
    if (m_away_losses_isSet) {
        obj.insert(QString("AwayLosses"), ::OpenAPI::toJsonValue(m_away_losses));
    }
    if (m_away_wins_isSet) {
        obj.insert(QString("AwayWins"), ::OpenAPI::toJsonValue(m_away_wins));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_day_losses_isSet) {
        obj.insert(QString("DayLosses"), ::OpenAPI::toJsonValue(m_day_losses));
    }
    if (m_day_wins_isSet) {
        obj.insert(QString("DayWins"), ::OpenAPI::toJsonValue(m_day_wins));
    }
    if (m_division_isSet) {
        obj.insert(QString("Division"), ::OpenAPI::toJsonValue(m_division));
    }
    if (m_division_losses_isSet) {
        obj.insert(QString("DivisionLosses"), ::OpenAPI::toJsonValue(m_division_losses));
    }
    if (m_division_rank_isSet) {
        obj.insert(QString("DivisionRank"), ::OpenAPI::toJsonValue(m_division_rank));
    }
    if (m_division_wins_isSet) {
        obj.insert(QString("DivisionWins"), ::OpenAPI::toJsonValue(m_division_wins));
    }
    if (m_games_behind_isSet) {
        obj.insert(QString("GamesBehind"), ::OpenAPI::toJsonValue(m_games_behind));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_home_losses_isSet) {
        obj.insert(QString("HomeLosses"), ::OpenAPI::toJsonValue(m_home_losses));
    }
    if (m_home_wins_isSet) {
        obj.insert(QString("HomeWins"), ::OpenAPI::toJsonValue(m_home_wins));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_ten_games_losses_isSet) {
        obj.insert(QString("LastTenGamesLosses"), ::OpenAPI::toJsonValue(m_last_ten_games_losses));
    }
    if (m_last_ten_games_wins_isSet) {
        obj.insert(QString("LastTenGamesWins"), ::OpenAPI::toJsonValue(m_last_ten_games_wins));
    }
    if (m_league_isSet) {
        obj.insert(QString("League"), ::OpenAPI::toJsonValue(m_league));
    }
    if (m_league_rank_isSet) {
        obj.insert(QString("LeagueRank"), ::OpenAPI::toJsonValue(m_league_rank));
    }
    if (m_losses_isSet) {
        obj.insert(QString("Losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_night_losses_isSet) {
        obj.insert(QString("NightLosses"), ::OpenAPI::toJsonValue(m_night_losses));
    }
    if (m_night_wins_isSet) {
        obj.insert(QString("NightWins"), ::OpenAPI::toJsonValue(m_night_wins));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("Percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_runs_against_isSet) {
        obj.insert(QString("RunsAgainst"), ::OpenAPI::toJsonValue(m_runs_against));
    }
    if (m_runs_scored_isSet) {
        obj.insert(QString("RunsScored"), ::OpenAPI::toJsonValue(m_runs_scored));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_streak_isSet) {
        obj.insert(QString("Streak"), ::OpenAPI::toJsonValue(m_streak));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_wild_card_games_behind_isSet) {
        obj.insert(QString("WildCardGamesBehind"), ::OpenAPI::toJsonValue(m_wild_card_games_behind));
    }
    if (m_wild_card_rank_isSet) {
        obj.insert(QString("WildCardRank"), ::OpenAPI::toJsonValue(m_wild_card_rank));
    }
    if (m_wins_isSet) {
        obj.insert(QString("Wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

qint32 OAIStanding::getAwayLosses() const {
    return m_away_losses;
}
void OAIStanding::setAwayLosses(const qint32 &away_losses) {
    m_away_losses = away_losses;
    m_away_losses_isSet = true;
}

bool OAIStanding::is_away_losses_Set() const{
    return m_away_losses_isSet;
}

bool OAIStanding::is_away_losses_Valid() const{
    return m_away_losses_isValid;
}

qint32 OAIStanding::getAwayWins() const {
    return m_away_wins;
}
void OAIStanding::setAwayWins(const qint32 &away_wins) {
    m_away_wins = away_wins;
    m_away_wins_isSet = true;
}

bool OAIStanding::is_away_wins_Set() const{
    return m_away_wins_isSet;
}

bool OAIStanding::is_away_wins_Valid() const{
    return m_away_wins_isValid;
}

QString OAIStanding::getCity() const {
    return m_city;
}
void OAIStanding::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIStanding::is_city_Set() const{
    return m_city_isSet;
}

bool OAIStanding::is_city_Valid() const{
    return m_city_isValid;
}

qint32 OAIStanding::getDayLosses() const {
    return m_day_losses;
}
void OAIStanding::setDayLosses(const qint32 &day_losses) {
    m_day_losses = day_losses;
    m_day_losses_isSet = true;
}

bool OAIStanding::is_day_losses_Set() const{
    return m_day_losses_isSet;
}

bool OAIStanding::is_day_losses_Valid() const{
    return m_day_losses_isValid;
}

qint32 OAIStanding::getDayWins() const {
    return m_day_wins;
}
void OAIStanding::setDayWins(const qint32 &day_wins) {
    m_day_wins = day_wins;
    m_day_wins_isSet = true;
}

bool OAIStanding::is_day_wins_Set() const{
    return m_day_wins_isSet;
}

bool OAIStanding::is_day_wins_Valid() const{
    return m_day_wins_isValid;
}

QString OAIStanding::getDivision() const {
    return m_division;
}
void OAIStanding::setDivision(const QString &division) {
    m_division = division;
    m_division_isSet = true;
}

bool OAIStanding::is_division_Set() const{
    return m_division_isSet;
}

bool OAIStanding::is_division_Valid() const{
    return m_division_isValid;
}

qint32 OAIStanding::getDivisionLosses() const {
    return m_division_losses;
}
void OAIStanding::setDivisionLosses(const qint32 &division_losses) {
    m_division_losses = division_losses;
    m_division_losses_isSet = true;
}

bool OAIStanding::is_division_losses_Set() const{
    return m_division_losses_isSet;
}

bool OAIStanding::is_division_losses_Valid() const{
    return m_division_losses_isValid;
}

qint32 OAIStanding::getDivisionRank() const {
    return m_division_rank;
}
void OAIStanding::setDivisionRank(const qint32 &division_rank) {
    m_division_rank = division_rank;
    m_division_rank_isSet = true;
}

bool OAIStanding::is_division_rank_Set() const{
    return m_division_rank_isSet;
}

bool OAIStanding::is_division_rank_Valid() const{
    return m_division_rank_isValid;
}

qint32 OAIStanding::getDivisionWins() const {
    return m_division_wins;
}
void OAIStanding::setDivisionWins(const qint32 &division_wins) {
    m_division_wins = division_wins;
    m_division_wins_isSet = true;
}

bool OAIStanding::is_division_wins_Set() const{
    return m_division_wins_isSet;
}

bool OAIStanding::is_division_wins_Valid() const{
    return m_division_wins_isValid;
}

double OAIStanding::getGamesBehind() const {
    return m_games_behind;
}
void OAIStanding::setGamesBehind(const double &games_behind) {
    m_games_behind = games_behind;
    m_games_behind_isSet = true;
}

bool OAIStanding::is_games_behind_Set() const{
    return m_games_behind_isSet;
}

bool OAIStanding::is_games_behind_Valid() const{
    return m_games_behind_isValid;
}

qint32 OAIStanding::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIStanding::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIStanding::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIStanding::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

qint32 OAIStanding::getHomeLosses() const {
    return m_home_losses;
}
void OAIStanding::setHomeLosses(const qint32 &home_losses) {
    m_home_losses = home_losses;
    m_home_losses_isSet = true;
}

bool OAIStanding::is_home_losses_Set() const{
    return m_home_losses_isSet;
}

bool OAIStanding::is_home_losses_Valid() const{
    return m_home_losses_isValid;
}

qint32 OAIStanding::getHomeWins() const {
    return m_home_wins;
}
void OAIStanding::setHomeWins(const qint32 &home_wins) {
    m_home_wins = home_wins;
    m_home_wins_isSet = true;
}

bool OAIStanding::is_home_wins_Set() const{
    return m_home_wins_isSet;
}

bool OAIStanding::is_home_wins_Valid() const{
    return m_home_wins_isValid;
}

QString OAIStanding::getKey() const {
    return m_key;
}
void OAIStanding::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIStanding::is_key_Set() const{
    return m_key_isSet;
}

bool OAIStanding::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIStanding::getLastTenGamesLosses() const {
    return m_last_ten_games_losses;
}
void OAIStanding::setLastTenGamesLosses(const qint32 &last_ten_games_losses) {
    m_last_ten_games_losses = last_ten_games_losses;
    m_last_ten_games_losses_isSet = true;
}

bool OAIStanding::is_last_ten_games_losses_Set() const{
    return m_last_ten_games_losses_isSet;
}

bool OAIStanding::is_last_ten_games_losses_Valid() const{
    return m_last_ten_games_losses_isValid;
}

qint32 OAIStanding::getLastTenGamesWins() const {
    return m_last_ten_games_wins;
}
void OAIStanding::setLastTenGamesWins(const qint32 &last_ten_games_wins) {
    m_last_ten_games_wins = last_ten_games_wins;
    m_last_ten_games_wins_isSet = true;
}

bool OAIStanding::is_last_ten_games_wins_Set() const{
    return m_last_ten_games_wins_isSet;
}

bool OAIStanding::is_last_ten_games_wins_Valid() const{
    return m_last_ten_games_wins_isValid;
}

QString OAIStanding::getLeague() const {
    return m_league;
}
void OAIStanding::setLeague(const QString &league) {
    m_league = league;
    m_league_isSet = true;
}

bool OAIStanding::is_league_Set() const{
    return m_league_isSet;
}

bool OAIStanding::is_league_Valid() const{
    return m_league_isValid;
}

qint32 OAIStanding::getLeagueRank() const {
    return m_league_rank;
}
void OAIStanding::setLeagueRank(const qint32 &league_rank) {
    m_league_rank = league_rank;
    m_league_rank_isSet = true;
}

bool OAIStanding::is_league_rank_Set() const{
    return m_league_rank_isSet;
}

bool OAIStanding::is_league_rank_Valid() const{
    return m_league_rank_isValid;
}

qint32 OAIStanding::getLosses() const {
    return m_losses;
}
void OAIStanding::setLosses(const qint32 &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAIStanding::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAIStanding::is_losses_Valid() const{
    return m_losses_isValid;
}

QString OAIStanding::getName() const {
    return m_name;
}
void OAIStanding::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStanding::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStanding::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStanding::getNightLosses() const {
    return m_night_losses;
}
void OAIStanding::setNightLosses(const qint32 &night_losses) {
    m_night_losses = night_losses;
    m_night_losses_isSet = true;
}

bool OAIStanding::is_night_losses_Set() const{
    return m_night_losses_isSet;
}

bool OAIStanding::is_night_losses_Valid() const{
    return m_night_losses_isValid;
}

qint32 OAIStanding::getNightWins() const {
    return m_night_wins;
}
void OAIStanding::setNightWins(const qint32 &night_wins) {
    m_night_wins = night_wins;
    m_night_wins_isSet = true;
}

bool OAIStanding::is_night_wins_Set() const{
    return m_night_wins_isSet;
}

bool OAIStanding::is_night_wins_Valid() const{
    return m_night_wins_isValid;
}

double OAIStanding::getPercentage() const {
    return m_percentage;
}
void OAIStanding::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIStanding::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIStanding::is_percentage_Valid() const{
    return m_percentage_isValid;
}

qint32 OAIStanding::getRunsAgainst() const {
    return m_runs_against;
}
void OAIStanding::setRunsAgainst(const qint32 &runs_against) {
    m_runs_against = runs_against;
    m_runs_against_isSet = true;
}

bool OAIStanding::is_runs_against_Set() const{
    return m_runs_against_isSet;
}

bool OAIStanding::is_runs_against_Valid() const{
    return m_runs_against_isValid;
}

qint32 OAIStanding::getRunsScored() const {
    return m_runs_scored;
}
void OAIStanding::setRunsScored(const qint32 &runs_scored) {
    m_runs_scored = runs_scored;
    m_runs_scored_isSet = true;
}

bool OAIStanding::is_runs_scored_Set() const{
    return m_runs_scored_isSet;
}

bool OAIStanding::is_runs_scored_Valid() const{
    return m_runs_scored_isValid;
}

qint32 OAIStanding::getSeason() const {
    return m_season;
}
void OAIStanding::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIStanding::is_season_Set() const{
    return m_season_isSet;
}

bool OAIStanding::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIStanding::getSeasonType() const {
    return m_season_type;
}
void OAIStanding::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIStanding::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIStanding::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIStanding::getStreak() const {
    return m_streak;
}
void OAIStanding::setStreak(const QString &streak) {
    m_streak = streak;
    m_streak_isSet = true;
}

bool OAIStanding::is_streak_Set() const{
    return m_streak_isSet;
}

bool OAIStanding::is_streak_Valid() const{
    return m_streak_isValid;
}

qint32 OAIStanding::getTeamId() const {
    return m_team_id;
}
void OAIStanding::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIStanding::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIStanding::is_team_id_Valid() const{
    return m_team_id_isValid;
}

double OAIStanding::getWildCardGamesBehind() const {
    return m_wild_card_games_behind;
}
void OAIStanding::setWildCardGamesBehind(const double &wild_card_games_behind) {
    m_wild_card_games_behind = wild_card_games_behind;
    m_wild_card_games_behind_isSet = true;
}

bool OAIStanding::is_wild_card_games_behind_Set() const{
    return m_wild_card_games_behind_isSet;
}

bool OAIStanding::is_wild_card_games_behind_Valid() const{
    return m_wild_card_games_behind_isValid;
}

qint32 OAIStanding::getWildCardRank() const {
    return m_wild_card_rank;
}
void OAIStanding::setWildCardRank(const qint32 &wild_card_rank) {
    m_wild_card_rank = wild_card_rank;
    m_wild_card_rank_isSet = true;
}

bool OAIStanding::is_wild_card_rank_Set() const{
    return m_wild_card_rank_isSet;
}

bool OAIStanding::is_wild_card_rank_Valid() const{
    return m_wild_card_rank_isValid;
}

qint32 OAIStanding::getWins() const {
    return m_wins;
}
void OAIStanding::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAIStanding::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAIStanding::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAIStanding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_behind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_ten_games_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_ten_games_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_league_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_league_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_night_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_night_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs_scored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streak_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wild_card_games_behind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wild_card_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStanding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
