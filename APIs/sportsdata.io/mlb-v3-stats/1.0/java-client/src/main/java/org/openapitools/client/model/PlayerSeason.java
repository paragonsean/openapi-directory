/*
 * MLB v3 Stats
 * MLB scores, stats, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerSeason
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:52.246450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerSeason {
  public static final String SERIALIZED_NAME_AT_BATS = "AtBats";
  @SerializedName(SERIALIZED_NAME_AT_BATS)
  private BigDecimal atBats;

  public static final String SERIALIZED_NAME_AUCTION_VALUE = "AuctionValue";
  @SerializedName(SERIALIZED_NAME_AUCTION_VALUE)
  private Integer auctionValue;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION = "AverageDraftPosition";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION)
  private BigDecimal averageDraftPosition;

  public static final String SERIALIZED_NAME_BALLS_IN_PLAY = "BallsInPlay";
  @SerializedName(SERIALIZED_NAME_BALLS_IN_PLAY)
  private BigDecimal ballsInPlay;

  public static final String SERIALIZED_NAME_BATTING_AVERAGE = "BattingAverage";
  @SerializedName(SERIALIZED_NAME_BATTING_AVERAGE)
  private BigDecimal battingAverage;

  public static final String SERIALIZED_NAME_BATTING_AVERAGE_ON_BALLS_IN_PLAY = "BattingAverageOnBallsInPlay";
  @SerializedName(SERIALIZED_NAME_BATTING_AVERAGE_ON_BALLS_IN_PLAY)
  private BigDecimal battingAverageOnBallsInPlay;

  public static final String SERIALIZED_NAME_BATTING_ORDER = "BattingOrder";
  @SerializedName(SERIALIZED_NAME_BATTING_ORDER)
  private Integer battingOrder;

  public static final String SERIALIZED_NAME_BATTING_ORDER_CONFIRMED = "BattingOrderConfirmed";
  @SerializedName(SERIALIZED_NAME_BATTING_ORDER_CONFIRMED)
  private Boolean battingOrderConfirmed;

  public static final String SERIALIZED_NAME_CAUGHT_STEALING = "CaughtStealing";
  @SerializedName(SERIALIZED_NAME_CAUGHT_STEALING)
  private BigDecimal caughtStealing;

  public static final String SERIALIZED_NAME_DOUBLE_PLAYS = "DoublePlays";
  @SerializedName(SERIALIZED_NAME_DOUBLE_PLAYS)
  private BigDecimal doublePlays;

  public static final String SERIALIZED_NAME_DOUBLES = "Doubles";
  @SerializedName(SERIALIZED_NAME_DOUBLES)
  private BigDecimal doubles;

  public static final String SERIALIZED_NAME_EARNED_RUN_AVERAGE = "EarnedRunAverage";
  @SerializedName(SERIALIZED_NAME_EARNED_RUN_AVERAGE)
  private BigDecimal earnedRunAverage;

  public static final String SERIALIZED_NAME_ERRORS = "Errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private BigDecimal errors;

  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_BATTING = "FantasyPointsBatting";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_BATTING)
  private BigDecimal fantasyPointsBatting;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS = "FantasyPointsDraftKings";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS)
  private BigDecimal fantasyPointsDraftKings;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_FAN_DUEL = "FantasyPointsFanDuel";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_FAN_DUEL)
  private BigDecimal fantasyPointsFanDuel;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_FANTASY_DRAFT = "FantasyPointsFantasyDraft";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_FANTASY_DRAFT)
  private BigDecimal fantasyPointsFantasyDraft;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_PITCHING = "FantasyPointsPitching";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_PITCHING)
  private BigDecimal fantasyPointsPitching;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_YAHOO = "FantasyPointsYahoo";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_YAHOO)
  private BigDecimal fantasyPointsYahoo;

  public static final String SERIALIZED_NAME_FIELDING_INDEPENDENT_PITCHING = "FieldingIndependentPitching";
  @SerializedName(SERIALIZED_NAME_FIELDING_INDEPENDENT_PITCHING)
  private BigDecimal fieldingIndependentPitching;

  public static final String SERIALIZED_NAME_FLY_OUTS = "FlyOuts";
  @SerializedName(SERIALIZED_NAME_FLY_OUTS)
  private BigDecimal flyOuts;

  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private Integer games;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_GRAND_SLAMS = "GrandSlams";
  @SerializedName(SERIALIZED_NAME_GRAND_SLAMS)
  private BigDecimal grandSlams;

  public static final String SERIALIZED_NAME_GROUND_INTO_DOUBLE_PLAY = "GroundIntoDoublePlay";
  @SerializedName(SERIALIZED_NAME_GROUND_INTO_DOUBLE_PLAY)
  private BigDecimal groundIntoDoublePlay;

  public static final String SERIALIZED_NAME_GROUND_OUTS = "GroundOuts";
  @SerializedName(SERIALIZED_NAME_GROUND_OUTS)
  private BigDecimal groundOuts;

  public static final String SERIALIZED_NAME_HIT_BY_PITCH = "HitByPitch";
  @SerializedName(SERIALIZED_NAME_HIT_BY_PITCH)
  private BigDecimal hitByPitch;

  public static final String SERIALIZED_NAME_HITS = "Hits";
  @SerializedName(SERIALIZED_NAME_HITS)
  private BigDecimal hits;

  public static final String SERIALIZED_NAME_HOME_RUNS = "HomeRuns";
  @SerializedName(SERIALIZED_NAME_HOME_RUNS)
  private BigDecimal homeRuns;

  public static final String SERIALIZED_NAME_INNINGS_PITCHED_DECIMAL = "InningsPitchedDecimal";
  @SerializedName(SERIALIZED_NAME_INNINGS_PITCHED_DECIMAL)
  private BigDecimal inningsPitchedDecimal;

  public static final String SERIALIZED_NAME_INNINGS_PITCHED_FULL = "InningsPitchedFull";
  @SerializedName(SERIALIZED_NAME_INNINGS_PITCHED_FULL)
  private BigDecimal inningsPitchedFull;

  public static final String SERIALIZED_NAME_INNINGS_PITCHED_OUTS = "InningsPitchedOuts";
  @SerializedName(SERIALIZED_NAME_INNINGS_PITCHED_OUTS)
  private BigDecimal inningsPitchedOuts;

  public static final String SERIALIZED_NAME_INTENTIONAL_WALKS = "IntentionalWalks";
  @SerializedName(SERIALIZED_NAME_INTENTIONAL_WALKS)
  private BigDecimal intentionalWalks;

  public static final String SERIALIZED_NAME_ISOLATED_POWER = "IsolatedPower";
  @SerializedName(SERIALIZED_NAME_ISOLATED_POWER)
  private BigDecimal isolatedPower;

  public static final String SERIALIZED_NAME_LEFT_ON_BASE = "LeftOnBase";
  @SerializedName(SERIALIZED_NAME_LEFT_ON_BASE)
  private BigDecimal leftOnBase;

  public static final String SERIALIZED_NAME_LINE_OUTS = "LineOuts";
  @SerializedName(SERIALIZED_NAME_LINE_OUTS)
  private BigDecimal lineOuts;

  public static final String SERIALIZED_NAME_LOSSES = "Losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private BigDecimal losses;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_BASE_PERCENTAGE = "OnBasePercentage";
  @SerializedName(SERIALIZED_NAME_ON_BASE_PERCENTAGE)
  private BigDecimal onBasePercentage;

  public static final String SERIALIZED_NAME_ON_BASE_PLUS_SLUGGING = "OnBasePlusSlugging";
  @SerializedName(SERIALIZED_NAME_ON_BASE_PLUS_SLUGGING)
  private BigDecimal onBasePlusSlugging;

  public static final String SERIALIZED_NAME_OUTS = "Outs";
  @SerializedName(SERIALIZED_NAME_OUTS)
  private BigDecimal outs;

  public static final String SERIALIZED_NAME_PITCHES_SEEN = "PitchesSeen";
  @SerializedName(SERIALIZED_NAME_PITCHES_SEEN)
  private BigDecimal pitchesSeen;

  public static final String SERIALIZED_NAME_PITCHES_THROWN = "PitchesThrown";
  @SerializedName(SERIALIZED_NAME_PITCHES_THROWN)
  private BigDecimal pitchesThrown;

  public static final String SERIALIZED_NAME_PITCHES_THROWN_STRIKES = "PitchesThrownStrikes";
  @SerializedName(SERIALIZED_NAME_PITCHES_THROWN_STRIKES)
  private BigDecimal pitchesThrownStrikes;

  public static final String SERIALIZED_NAME_PITCHING_BALLS_IN_PLAY = "PitchingBallsInPlay";
  @SerializedName(SERIALIZED_NAME_PITCHING_BALLS_IN_PLAY)
  private BigDecimal pitchingBallsInPlay;

  public static final String SERIALIZED_NAME_PITCHING_BATTING_AVERAGE_AGAINST = "PitchingBattingAverageAgainst";
  @SerializedName(SERIALIZED_NAME_PITCHING_BATTING_AVERAGE_AGAINST)
  private BigDecimal pitchingBattingAverageAgainst;

  public static final String SERIALIZED_NAME_PITCHING_BATTING_AVERAGE_ON_BALLS_IN_PLAY = "PitchingBattingAverageOnBallsInPlay";
  @SerializedName(SERIALIZED_NAME_PITCHING_BATTING_AVERAGE_ON_BALLS_IN_PLAY)
  private BigDecimal pitchingBattingAverageOnBallsInPlay;

  public static final String SERIALIZED_NAME_PITCHING_BLOWN_SAVES = "PitchingBlownSaves";
  @SerializedName(SERIALIZED_NAME_PITCHING_BLOWN_SAVES)
  private BigDecimal pitchingBlownSaves;

  public static final String SERIALIZED_NAME_PITCHING_CATCHERS_INTERFERENCE = "PitchingCatchersInterference";
  @SerializedName(SERIALIZED_NAME_PITCHING_CATCHERS_INTERFERENCE)
  private BigDecimal pitchingCatchersInterference;

  public static final String SERIALIZED_NAME_PITCHING_COMPLETE_GAMES = "PitchingCompleteGames";
  @SerializedName(SERIALIZED_NAME_PITCHING_COMPLETE_GAMES)
  private BigDecimal pitchingCompleteGames;

  public static final String SERIALIZED_NAME_PITCHING_DOUBLE_PLAYS = "PitchingDoublePlays";
  @SerializedName(SERIALIZED_NAME_PITCHING_DOUBLE_PLAYS)
  private BigDecimal pitchingDoublePlays;

  public static final String SERIALIZED_NAME_PITCHING_DOUBLES = "PitchingDoubles";
  @SerializedName(SERIALIZED_NAME_PITCHING_DOUBLES)
  private BigDecimal pitchingDoubles;

  public static final String SERIALIZED_NAME_PITCHING_EARNED_RUNS = "PitchingEarnedRuns";
  @SerializedName(SERIALIZED_NAME_PITCHING_EARNED_RUNS)
  private BigDecimal pitchingEarnedRuns;

  public static final String SERIALIZED_NAME_PITCHING_FLY_OUTS = "PitchingFlyOuts";
  @SerializedName(SERIALIZED_NAME_PITCHING_FLY_OUTS)
  private BigDecimal pitchingFlyOuts;

  public static final String SERIALIZED_NAME_PITCHING_GRAND_SLAMS = "PitchingGrandSlams";
  @SerializedName(SERIALIZED_NAME_PITCHING_GRAND_SLAMS)
  private BigDecimal pitchingGrandSlams;

  public static final String SERIALIZED_NAME_PITCHING_GROUND_INTO_DOUBLE_PLAY = "PitchingGroundIntoDoublePlay";
  @SerializedName(SERIALIZED_NAME_PITCHING_GROUND_INTO_DOUBLE_PLAY)
  private BigDecimal pitchingGroundIntoDoublePlay;

  public static final String SERIALIZED_NAME_PITCHING_GROUND_OUTS = "PitchingGroundOuts";
  @SerializedName(SERIALIZED_NAME_PITCHING_GROUND_OUTS)
  private BigDecimal pitchingGroundOuts;

  public static final String SERIALIZED_NAME_PITCHING_HIT_BY_PITCH = "PitchingHitByPitch";
  @SerializedName(SERIALIZED_NAME_PITCHING_HIT_BY_PITCH)
  private BigDecimal pitchingHitByPitch;

  public static final String SERIALIZED_NAME_PITCHING_HITS = "PitchingHits";
  @SerializedName(SERIALIZED_NAME_PITCHING_HITS)
  private BigDecimal pitchingHits;

  public static final String SERIALIZED_NAME_PITCHING_HOLDS = "PitchingHolds";
  @SerializedName(SERIALIZED_NAME_PITCHING_HOLDS)
  private BigDecimal pitchingHolds;

  public static final String SERIALIZED_NAME_PITCHING_HOME_RUNS = "PitchingHomeRuns";
  @SerializedName(SERIALIZED_NAME_PITCHING_HOME_RUNS)
  private BigDecimal pitchingHomeRuns;

  public static final String SERIALIZED_NAME_PITCHING_INNING_STARTED = "PitchingInningStarted";
  @SerializedName(SERIALIZED_NAME_PITCHING_INNING_STARTED)
  private Integer pitchingInningStarted;

  public static final String SERIALIZED_NAME_PITCHING_INTENTIONAL_WALKS = "PitchingIntentionalWalks";
  @SerializedName(SERIALIZED_NAME_PITCHING_INTENTIONAL_WALKS)
  private BigDecimal pitchingIntentionalWalks;

  public static final String SERIALIZED_NAME_PITCHING_LINE_OUTS = "PitchingLineOuts";
  @SerializedName(SERIALIZED_NAME_PITCHING_LINE_OUTS)
  private BigDecimal pitchingLineOuts;

  public static final String SERIALIZED_NAME_PITCHING_NO_HITTERS = "PitchingNoHitters";
  @SerializedName(SERIALIZED_NAME_PITCHING_NO_HITTERS)
  private BigDecimal pitchingNoHitters;

  public static final String SERIALIZED_NAME_PITCHING_ON_BASE_PERCENTAGE = "PitchingOnBasePercentage";
  @SerializedName(SERIALIZED_NAME_PITCHING_ON_BASE_PERCENTAGE)
  private BigDecimal pitchingOnBasePercentage;

  public static final String SERIALIZED_NAME_PITCHING_ON_BASE_PLUS_SLUGGING = "PitchingOnBasePlusSlugging";
  @SerializedName(SERIALIZED_NAME_PITCHING_ON_BASE_PLUS_SLUGGING)
  private BigDecimal pitchingOnBasePlusSlugging;

  public static final String SERIALIZED_NAME_PITCHING_PERFECT_GAMES = "PitchingPerfectGames";
  @SerializedName(SERIALIZED_NAME_PITCHING_PERFECT_GAMES)
  private BigDecimal pitchingPerfectGames;

  public static final String SERIALIZED_NAME_PITCHING_PLATE_APPEARANCES = "PitchingPlateAppearances";
  @SerializedName(SERIALIZED_NAME_PITCHING_PLATE_APPEARANCES)
  private BigDecimal pitchingPlateAppearances;

  public static final String SERIALIZED_NAME_PITCHING_POP_OUTS = "PitchingPopOuts";
  @SerializedName(SERIALIZED_NAME_PITCHING_POP_OUTS)
  private BigDecimal pitchingPopOuts;

  public static final String SERIALIZED_NAME_PITCHING_QUALITY_STARTS = "PitchingQualityStarts";
  @SerializedName(SERIALIZED_NAME_PITCHING_QUALITY_STARTS)
  private BigDecimal pitchingQualityStarts;

  public static final String SERIALIZED_NAME_PITCHING_REACHED_ON_ERROR = "PitchingReachedOnError";
  @SerializedName(SERIALIZED_NAME_PITCHING_REACHED_ON_ERROR)
  private BigDecimal pitchingReachedOnError;

  public static final String SERIALIZED_NAME_PITCHING_RUNS = "PitchingRuns";
  @SerializedName(SERIALIZED_NAME_PITCHING_RUNS)
  private BigDecimal pitchingRuns;

  public static final String SERIALIZED_NAME_PITCHING_SACRIFICE_FLIES = "PitchingSacrificeFlies";
  @SerializedName(SERIALIZED_NAME_PITCHING_SACRIFICE_FLIES)
  private BigDecimal pitchingSacrificeFlies;

  public static final String SERIALIZED_NAME_PITCHING_SACRIFICES = "PitchingSacrifices";
  @SerializedName(SERIALIZED_NAME_PITCHING_SACRIFICES)
  private BigDecimal pitchingSacrifices;

  public static final String SERIALIZED_NAME_PITCHING_SHUT_OUTS = "PitchingShutOuts";
  @SerializedName(SERIALIZED_NAME_PITCHING_SHUT_OUTS)
  private BigDecimal pitchingShutOuts;

  public static final String SERIALIZED_NAME_PITCHING_SINGLES = "PitchingSingles";
  @SerializedName(SERIALIZED_NAME_PITCHING_SINGLES)
  private BigDecimal pitchingSingles;

  public static final String SERIALIZED_NAME_PITCHING_SLUGGING_PERCENTAGE = "PitchingSluggingPercentage";
  @SerializedName(SERIALIZED_NAME_PITCHING_SLUGGING_PERCENTAGE)
  private BigDecimal pitchingSluggingPercentage;

  public static final String SERIALIZED_NAME_PITCHING_STRIKEOUTS = "PitchingStrikeouts";
  @SerializedName(SERIALIZED_NAME_PITCHING_STRIKEOUTS)
  private BigDecimal pitchingStrikeouts;

  public static final String SERIALIZED_NAME_PITCHING_STRIKEOUTS_PER_NINE_INNINGS = "PitchingStrikeoutsPerNineInnings";
  @SerializedName(SERIALIZED_NAME_PITCHING_STRIKEOUTS_PER_NINE_INNINGS)
  private BigDecimal pitchingStrikeoutsPerNineInnings;

  public static final String SERIALIZED_NAME_PITCHING_TOTAL_BASES = "PitchingTotalBases";
  @SerializedName(SERIALIZED_NAME_PITCHING_TOTAL_BASES)
  private BigDecimal pitchingTotalBases;

  public static final String SERIALIZED_NAME_PITCHING_TRIPLES = "PitchingTriples";
  @SerializedName(SERIALIZED_NAME_PITCHING_TRIPLES)
  private BigDecimal pitchingTriples;

  public static final String SERIALIZED_NAME_PITCHING_WALKS = "PitchingWalks";
  @SerializedName(SERIALIZED_NAME_PITCHING_WALKS)
  private BigDecimal pitchingWalks;

  public static final String SERIALIZED_NAME_PITCHING_WALKS_PER_NINE_INNINGS = "PitchingWalksPerNineInnings";
  @SerializedName(SERIALIZED_NAME_PITCHING_WALKS_PER_NINE_INNINGS)
  private BigDecimal pitchingWalksPerNineInnings;

  public static final String SERIALIZED_NAME_PITCHING_WEIGHTED_ON_BASE_PERCENTAGE = "PitchingWeightedOnBasePercentage";
  @SerializedName(SERIALIZED_NAME_PITCHING_WEIGHTED_ON_BASE_PERCENTAGE)
  private BigDecimal pitchingWeightedOnBasePercentage;

  public static final String SERIALIZED_NAME_PLATE_APPEARANCES = "PlateAppearances";
  @SerializedName(SERIALIZED_NAME_PLATE_APPEARANCES)
  private BigDecimal plateAppearances;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POP_OUTS = "PopOuts";
  @SerializedName(SERIALIZED_NAME_POP_OUTS)
  private BigDecimal popOuts;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POSITION_CATEGORY = "PositionCategory";
  @SerializedName(SERIALIZED_NAME_POSITION_CATEGORY)
  private String positionCategory;

  public static final String SERIALIZED_NAME_REACHED_ON_ERROR = "ReachedOnError";
  @SerializedName(SERIALIZED_NAME_REACHED_ON_ERROR)
  private BigDecimal reachedOnError;

  public static final String SERIALIZED_NAME_RUNS = "Runs";
  @SerializedName(SERIALIZED_NAME_RUNS)
  private BigDecimal runs;

  public static final String SERIALIZED_NAME_RUNS_BATTED_IN = "RunsBattedIn";
  @SerializedName(SERIALIZED_NAME_RUNS_BATTED_IN)
  private BigDecimal runsBattedIn;

  public static final String SERIALIZED_NAME_SACRIFICE_FLIES = "SacrificeFlies";
  @SerializedName(SERIALIZED_NAME_SACRIFICE_FLIES)
  private BigDecimal sacrificeFlies;

  public static final String SERIALIZED_NAME_SACRIFICES = "Sacrifices";
  @SerializedName(SERIALIZED_NAME_SACRIFICES)
  private BigDecimal sacrifices;

  public static final String SERIALIZED_NAME_SAVES = "Saves";
  @SerializedName(SERIALIZED_NAME_SAVES)
  private BigDecimal saves;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_SINGLES = "Singles";
  @SerializedName(SERIALIZED_NAME_SINGLES)
  private BigDecimal singles;

  public static final String SERIALIZED_NAME_SLUGGING_PERCENTAGE = "SluggingPercentage";
  @SerializedName(SERIALIZED_NAME_SLUGGING_PERCENTAGE)
  private BigDecimal sluggingPercentage;

  public static final String SERIALIZED_NAME_STARTED = "Started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private Integer started;

  public static final String SERIALIZED_NAME_STAT_I_D = "StatID";
  @SerializedName(SERIALIZED_NAME_STAT_I_D)
  private Integer statID;

  public static final String SERIALIZED_NAME_STOLEN_BASES = "StolenBases";
  @SerializedName(SERIALIZED_NAME_STOLEN_BASES)
  private BigDecimal stolenBases;

  public static final String SERIALIZED_NAME_STRIKEOUTS = "Strikeouts";
  @SerializedName(SERIALIZED_NAME_STRIKEOUTS)
  private BigDecimal strikeouts;

  public static final String SERIALIZED_NAME_SUBSTITUTE_BATTING_ORDER = "SubstituteBattingOrder";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_BATTING_ORDER)
  private Integer substituteBattingOrder;

  public static final String SERIALIZED_NAME_SUBSTITUTE_BATTING_ORDER_SEQUENCE = "SubstituteBattingOrderSequence";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_BATTING_ORDER_SEQUENCE)
  private Integer substituteBattingOrderSequence;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_TOTAL_BASES = "TotalBases";
  @SerializedName(SERIALIZED_NAME_TOTAL_BASES)
  private BigDecimal totalBases;

  public static final String SERIALIZED_NAME_TOTAL_OUTS_PITCHED = "TotalOutsPitched";
  @SerializedName(SERIALIZED_NAME_TOTAL_OUTS_PITCHED)
  private BigDecimal totalOutsPitched;

  public static final String SERIALIZED_NAME_TRIPLES = "Triples";
  @SerializedName(SERIALIZED_NAME_TRIPLES)
  private BigDecimal triples;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_WALKS = "Walks";
  @SerializedName(SERIALIZED_NAME_WALKS)
  private BigDecimal walks;

  public static final String SERIALIZED_NAME_WALKS_HITS_PER_INNINGS_PITCHED = "WalksHitsPerInningsPitched";
  @SerializedName(SERIALIZED_NAME_WALKS_HITS_PER_INNINGS_PITCHED)
  private BigDecimal walksHitsPerInningsPitched;

  public static final String SERIALIZED_NAME_WEIGHTED_ON_BASE_PERCENTAGE = "WeightedOnBasePercentage";
  @SerializedName(SERIALIZED_NAME_WEIGHTED_ON_BASE_PERCENTAGE)
  private BigDecimal weightedOnBasePercentage;

  public static final String SERIALIZED_NAME_WINS = "Wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private BigDecimal wins;

  public PlayerSeason() {
  }

  public PlayerSeason atBats(BigDecimal atBats) {
    this.atBats = atBats;
    return this;
  }

  /**
   * Get atBats
   * @return atBats
   */
  @javax.annotation.Nullable
  public BigDecimal getAtBats() {
    return atBats;
  }

  public void setAtBats(BigDecimal atBats) {
    this.atBats = atBats;
  }


  public PlayerSeason auctionValue(Integer auctionValue) {
    this.auctionValue = auctionValue;
    return this;
  }

  /**
   * Get auctionValue
   * @return auctionValue
   */
  @javax.annotation.Nullable
  public Integer getAuctionValue() {
    return auctionValue;
  }

  public void setAuctionValue(Integer auctionValue) {
    this.auctionValue = auctionValue;
  }


  public PlayerSeason averageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
    return this;
  }

  /**
   * Get averageDraftPosition
   * @return averageDraftPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPosition() {
    return averageDraftPosition;
  }

  public void setAverageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
  }


  public PlayerSeason ballsInPlay(BigDecimal ballsInPlay) {
    this.ballsInPlay = ballsInPlay;
    return this;
  }

  /**
   * Get ballsInPlay
   * @return ballsInPlay
   */
  @javax.annotation.Nullable
  public BigDecimal getBallsInPlay() {
    return ballsInPlay;
  }

  public void setBallsInPlay(BigDecimal ballsInPlay) {
    this.ballsInPlay = ballsInPlay;
  }


  public PlayerSeason battingAverage(BigDecimal battingAverage) {
    this.battingAverage = battingAverage;
    return this;
  }

  /**
   * Get battingAverage
   * @return battingAverage
   */
  @javax.annotation.Nullable
  public BigDecimal getBattingAverage() {
    return battingAverage;
  }

  public void setBattingAverage(BigDecimal battingAverage) {
    this.battingAverage = battingAverage;
  }


  public PlayerSeason battingAverageOnBallsInPlay(BigDecimal battingAverageOnBallsInPlay) {
    this.battingAverageOnBallsInPlay = battingAverageOnBallsInPlay;
    return this;
  }

  /**
   * Get battingAverageOnBallsInPlay
   * @return battingAverageOnBallsInPlay
   */
  @javax.annotation.Nullable
  public BigDecimal getBattingAverageOnBallsInPlay() {
    return battingAverageOnBallsInPlay;
  }

  public void setBattingAverageOnBallsInPlay(BigDecimal battingAverageOnBallsInPlay) {
    this.battingAverageOnBallsInPlay = battingAverageOnBallsInPlay;
  }


  public PlayerSeason battingOrder(Integer battingOrder) {
    this.battingOrder = battingOrder;
    return this;
  }

  /**
   * Get battingOrder
   * @return battingOrder
   */
  @javax.annotation.Nullable
  public Integer getBattingOrder() {
    return battingOrder;
  }

  public void setBattingOrder(Integer battingOrder) {
    this.battingOrder = battingOrder;
  }


  public PlayerSeason battingOrderConfirmed(Boolean battingOrderConfirmed) {
    this.battingOrderConfirmed = battingOrderConfirmed;
    return this;
  }

  /**
   * Get battingOrderConfirmed
   * @return battingOrderConfirmed
   */
  @javax.annotation.Nullable
  public Boolean getBattingOrderConfirmed() {
    return battingOrderConfirmed;
  }

  public void setBattingOrderConfirmed(Boolean battingOrderConfirmed) {
    this.battingOrderConfirmed = battingOrderConfirmed;
  }


  public PlayerSeason caughtStealing(BigDecimal caughtStealing) {
    this.caughtStealing = caughtStealing;
    return this;
  }

  /**
   * Get caughtStealing
   * @return caughtStealing
   */
  @javax.annotation.Nullable
  public BigDecimal getCaughtStealing() {
    return caughtStealing;
  }

  public void setCaughtStealing(BigDecimal caughtStealing) {
    this.caughtStealing = caughtStealing;
  }


  public PlayerSeason doublePlays(BigDecimal doublePlays) {
    this.doublePlays = doublePlays;
    return this;
  }

  /**
   * Get doublePlays
   * @return doublePlays
   */
  @javax.annotation.Nullable
  public BigDecimal getDoublePlays() {
    return doublePlays;
  }

  public void setDoublePlays(BigDecimal doublePlays) {
    this.doublePlays = doublePlays;
  }


  public PlayerSeason doubles(BigDecimal doubles) {
    this.doubles = doubles;
    return this;
  }

  /**
   * Get doubles
   * @return doubles
   */
  @javax.annotation.Nullable
  public BigDecimal getDoubles() {
    return doubles;
  }

  public void setDoubles(BigDecimal doubles) {
    this.doubles = doubles;
  }


  public PlayerSeason earnedRunAverage(BigDecimal earnedRunAverage) {
    this.earnedRunAverage = earnedRunAverage;
    return this;
  }

  /**
   * Get earnedRunAverage
   * @return earnedRunAverage
   */
  @javax.annotation.Nullable
  public BigDecimal getEarnedRunAverage() {
    return earnedRunAverage;
  }

  public void setEarnedRunAverage(BigDecimal earnedRunAverage) {
    this.earnedRunAverage = earnedRunAverage;
  }


  public PlayerSeason errors(BigDecimal errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public BigDecimal getErrors() {
    return errors;
  }

  public void setErrors(BigDecimal errors) {
    this.errors = errors;
  }


  public PlayerSeason fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public PlayerSeason fantasyPointsBatting(BigDecimal fantasyPointsBatting) {
    this.fantasyPointsBatting = fantasyPointsBatting;
    return this;
  }

  /**
   * Get fantasyPointsBatting
   * @return fantasyPointsBatting
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsBatting() {
    return fantasyPointsBatting;
  }

  public void setFantasyPointsBatting(BigDecimal fantasyPointsBatting) {
    this.fantasyPointsBatting = fantasyPointsBatting;
  }


  public PlayerSeason fantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
    return this;
  }

  /**
   * Get fantasyPointsDraftKings
   * @return fantasyPointsDraftKings
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsDraftKings() {
    return fantasyPointsDraftKings;
  }

  public void setFantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
  }


  public PlayerSeason fantasyPointsFanDuel(BigDecimal fantasyPointsFanDuel) {
    this.fantasyPointsFanDuel = fantasyPointsFanDuel;
    return this;
  }

  /**
   * Get fantasyPointsFanDuel
   * @return fantasyPointsFanDuel
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsFanDuel() {
    return fantasyPointsFanDuel;
  }

  public void setFantasyPointsFanDuel(BigDecimal fantasyPointsFanDuel) {
    this.fantasyPointsFanDuel = fantasyPointsFanDuel;
  }


  public PlayerSeason fantasyPointsFantasyDraft(BigDecimal fantasyPointsFantasyDraft) {
    this.fantasyPointsFantasyDraft = fantasyPointsFantasyDraft;
    return this;
  }

  /**
   * Get fantasyPointsFantasyDraft
   * @return fantasyPointsFantasyDraft
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsFantasyDraft() {
    return fantasyPointsFantasyDraft;
  }

  public void setFantasyPointsFantasyDraft(BigDecimal fantasyPointsFantasyDraft) {
    this.fantasyPointsFantasyDraft = fantasyPointsFantasyDraft;
  }


  public PlayerSeason fantasyPointsPitching(BigDecimal fantasyPointsPitching) {
    this.fantasyPointsPitching = fantasyPointsPitching;
    return this;
  }

  /**
   * Get fantasyPointsPitching
   * @return fantasyPointsPitching
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsPitching() {
    return fantasyPointsPitching;
  }

  public void setFantasyPointsPitching(BigDecimal fantasyPointsPitching) {
    this.fantasyPointsPitching = fantasyPointsPitching;
  }


  public PlayerSeason fantasyPointsYahoo(BigDecimal fantasyPointsYahoo) {
    this.fantasyPointsYahoo = fantasyPointsYahoo;
    return this;
  }

  /**
   * Get fantasyPointsYahoo
   * @return fantasyPointsYahoo
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsYahoo() {
    return fantasyPointsYahoo;
  }

  public void setFantasyPointsYahoo(BigDecimal fantasyPointsYahoo) {
    this.fantasyPointsYahoo = fantasyPointsYahoo;
  }


  public PlayerSeason fieldingIndependentPitching(BigDecimal fieldingIndependentPitching) {
    this.fieldingIndependentPitching = fieldingIndependentPitching;
    return this;
  }

  /**
   * Get fieldingIndependentPitching
   * @return fieldingIndependentPitching
   */
  @javax.annotation.Nullable
  public BigDecimal getFieldingIndependentPitching() {
    return fieldingIndependentPitching;
  }

  public void setFieldingIndependentPitching(BigDecimal fieldingIndependentPitching) {
    this.fieldingIndependentPitching = fieldingIndependentPitching;
  }


  public PlayerSeason flyOuts(BigDecimal flyOuts) {
    this.flyOuts = flyOuts;
    return this;
  }

  /**
   * Get flyOuts
   * @return flyOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getFlyOuts() {
    return flyOuts;
  }

  public void setFlyOuts(BigDecimal flyOuts) {
    this.flyOuts = flyOuts;
  }


  public PlayerSeason games(Integer games) {
    this.games = games;
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public Integer getGames() {
    return games;
  }

  public void setGames(Integer games) {
    this.games = games;
  }


  public PlayerSeason globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public PlayerSeason grandSlams(BigDecimal grandSlams) {
    this.grandSlams = grandSlams;
    return this;
  }

  /**
   * Get grandSlams
   * @return grandSlams
   */
  @javax.annotation.Nullable
  public BigDecimal getGrandSlams() {
    return grandSlams;
  }

  public void setGrandSlams(BigDecimal grandSlams) {
    this.grandSlams = grandSlams;
  }


  public PlayerSeason groundIntoDoublePlay(BigDecimal groundIntoDoublePlay) {
    this.groundIntoDoublePlay = groundIntoDoublePlay;
    return this;
  }

  /**
   * Get groundIntoDoublePlay
   * @return groundIntoDoublePlay
   */
  @javax.annotation.Nullable
  public BigDecimal getGroundIntoDoublePlay() {
    return groundIntoDoublePlay;
  }

  public void setGroundIntoDoublePlay(BigDecimal groundIntoDoublePlay) {
    this.groundIntoDoublePlay = groundIntoDoublePlay;
  }


  public PlayerSeason groundOuts(BigDecimal groundOuts) {
    this.groundOuts = groundOuts;
    return this;
  }

  /**
   * Get groundOuts
   * @return groundOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getGroundOuts() {
    return groundOuts;
  }

  public void setGroundOuts(BigDecimal groundOuts) {
    this.groundOuts = groundOuts;
  }


  public PlayerSeason hitByPitch(BigDecimal hitByPitch) {
    this.hitByPitch = hitByPitch;
    return this;
  }

  /**
   * Get hitByPitch
   * @return hitByPitch
   */
  @javax.annotation.Nullable
  public BigDecimal getHitByPitch() {
    return hitByPitch;
  }

  public void setHitByPitch(BigDecimal hitByPitch) {
    this.hitByPitch = hitByPitch;
  }


  public PlayerSeason hits(BigDecimal hits) {
    this.hits = hits;
    return this;
  }

  /**
   * Get hits
   * @return hits
   */
  @javax.annotation.Nullable
  public BigDecimal getHits() {
    return hits;
  }

  public void setHits(BigDecimal hits) {
    this.hits = hits;
  }


  public PlayerSeason homeRuns(BigDecimal homeRuns) {
    this.homeRuns = homeRuns;
    return this;
  }

  /**
   * Get homeRuns
   * @return homeRuns
   */
  @javax.annotation.Nullable
  public BigDecimal getHomeRuns() {
    return homeRuns;
  }

  public void setHomeRuns(BigDecimal homeRuns) {
    this.homeRuns = homeRuns;
  }


  public PlayerSeason inningsPitchedDecimal(BigDecimal inningsPitchedDecimal) {
    this.inningsPitchedDecimal = inningsPitchedDecimal;
    return this;
  }

  /**
   * Get inningsPitchedDecimal
   * @return inningsPitchedDecimal
   */
  @javax.annotation.Nullable
  public BigDecimal getInningsPitchedDecimal() {
    return inningsPitchedDecimal;
  }

  public void setInningsPitchedDecimal(BigDecimal inningsPitchedDecimal) {
    this.inningsPitchedDecimal = inningsPitchedDecimal;
  }


  public PlayerSeason inningsPitchedFull(BigDecimal inningsPitchedFull) {
    this.inningsPitchedFull = inningsPitchedFull;
    return this;
  }

  /**
   * Get inningsPitchedFull
   * @return inningsPitchedFull
   */
  @javax.annotation.Nullable
  public BigDecimal getInningsPitchedFull() {
    return inningsPitchedFull;
  }

  public void setInningsPitchedFull(BigDecimal inningsPitchedFull) {
    this.inningsPitchedFull = inningsPitchedFull;
  }


  public PlayerSeason inningsPitchedOuts(BigDecimal inningsPitchedOuts) {
    this.inningsPitchedOuts = inningsPitchedOuts;
    return this;
  }

  /**
   * Get inningsPitchedOuts
   * @return inningsPitchedOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getInningsPitchedOuts() {
    return inningsPitchedOuts;
  }

  public void setInningsPitchedOuts(BigDecimal inningsPitchedOuts) {
    this.inningsPitchedOuts = inningsPitchedOuts;
  }


  public PlayerSeason intentionalWalks(BigDecimal intentionalWalks) {
    this.intentionalWalks = intentionalWalks;
    return this;
  }

  /**
   * Get intentionalWalks
   * @return intentionalWalks
   */
  @javax.annotation.Nullable
  public BigDecimal getIntentionalWalks() {
    return intentionalWalks;
  }

  public void setIntentionalWalks(BigDecimal intentionalWalks) {
    this.intentionalWalks = intentionalWalks;
  }


  public PlayerSeason isolatedPower(BigDecimal isolatedPower) {
    this.isolatedPower = isolatedPower;
    return this;
  }

  /**
   * Get isolatedPower
   * @return isolatedPower
   */
  @javax.annotation.Nullable
  public BigDecimal getIsolatedPower() {
    return isolatedPower;
  }

  public void setIsolatedPower(BigDecimal isolatedPower) {
    this.isolatedPower = isolatedPower;
  }


  public PlayerSeason leftOnBase(BigDecimal leftOnBase) {
    this.leftOnBase = leftOnBase;
    return this;
  }

  /**
   * Get leftOnBase
   * @return leftOnBase
   */
  @javax.annotation.Nullable
  public BigDecimal getLeftOnBase() {
    return leftOnBase;
  }

  public void setLeftOnBase(BigDecimal leftOnBase) {
    this.leftOnBase = leftOnBase;
  }


  public PlayerSeason lineOuts(BigDecimal lineOuts) {
    this.lineOuts = lineOuts;
    return this;
  }

  /**
   * Get lineOuts
   * @return lineOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getLineOuts() {
    return lineOuts;
  }

  public void setLineOuts(BigDecimal lineOuts) {
    this.lineOuts = lineOuts;
  }


  public PlayerSeason losses(BigDecimal losses) {
    this.losses = losses;
    return this;
  }

  /**
   * Get losses
   * @return losses
   */
  @javax.annotation.Nullable
  public BigDecimal getLosses() {
    return losses;
  }

  public void setLosses(BigDecimal losses) {
    this.losses = losses;
  }


  public PlayerSeason name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerSeason onBasePercentage(BigDecimal onBasePercentage) {
    this.onBasePercentage = onBasePercentage;
    return this;
  }

  /**
   * Get onBasePercentage
   * @return onBasePercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getOnBasePercentage() {
    return onBasePercentage;
  }

  public void setOnBasePercentage(BigDecimal onBasePercentage) {
    this.onBasePercentage = onBasePercentage;
  }


  public PlayerSeason onBasePlusSlugging(BigDecimal onBasePlusSlugging) {
    this.onBasePlusSlugging = onBasePlusSlugging;
    return this;
  }

  /**
   * Get onBasePlusSlugging
   * @return onBasePlusSlugging
   */
  @javax.annotation.Nullable
  public BigDecimal getOnBasePlusSlugging() {
    return onBasePlusSlugging;
  }

  public void setOnBasePlusSlugging(BigDecimal onBasePlusSlugging) {
    this.onBasePlusSlugging = onBasePlusSlugging;
  }


  public PlayerSeason outs(BigDecimal outs) {
    this.outs = outs;
    return this;
  }

  /**
   * Get outs
   * @return outs
   */
  @javax.annotation.Nullable
  public BigDecimal getOuts() {
    return outs;
  }

  public void setOuts(BigDecimal outs) {
    this.outs = outs;
  }


  public PlayerSeason pitchesSeen(BigDecimal pitchesSeen) {
    this.pitchesSeen = pitchesSeen;
    return this;
  }

  /**
   * Get pitchesSeen
   * @return pitchesSeen
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchesSeen() {
    return pitchesSeen;
  }

  public void setPitchesSeen(BigDecimal pitchesSeen) {
    this.pitchesSeen = pitchesSeen;
  }


  public PlayerSeason pitchesThrown(BigDecimal pitchesThrown) {
    this.pitchesThrown = pitchesThrown;
    return this;
  }

  /**
   * Get pitchesThrown
   * @return pitchesThrown
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchesThrown() {
    return pitchesThrown;
  }

  public void setPitchesThrown(BigDecimal pitchesThrown) {
    this.pitchesThrown = pitchesThrown;
  }


  public PlayerSeason pitchesThrownStrikes(BigDecimal pitchesThrownStrikes) {
    this.pitchesThrownStrikes = pitchesThrownStrikes;
    return this;
  }

  /**
   * Get pitchesThrownStrikes
   * @return pitchesThrownStrikes
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchesThrownStrikes() {
    return pitchesThrownStrikes;
  }

  public void setPitchesThrownStrikes(BigDecimal pitchesThrownStrikes) {
    this.pitchesThrownStrikes = pitchesThrownStrikes;
  }


  public PlayerSeason pitchingBallsInPlay(BigDecimal pitchingBallsInPlay) {
    this.pitchingBallsInPlay = pitchingBallsInPlay;
    return this;
  }

  /**
   * Get pitchingBallsInPlay
   * @return pitchingBallsInPlay
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingBallsInPlay() {
    return pitchingBallsInPlay;
  }

  public void setPitchingBallsInPlay(BigDecimal pitchingBallsInPlay) {
    this.pitchingBallsInPlay = pitchingBallsInPlay;
  }


  public PlayerSeason pitchingBattingAverageAgainst(BigDecimal pitchingBattingAverageAgainst) {
    this.pitchingBattingAverageAgainst = pitchingBattingAverageAgainst;
    return this;
  }

  /**
   * Get pitchingBattingAverageAgainst
   * @return pitchingBattingAverageAgainst
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingBattingAverageAgainst() {
    return pitchingBattingAverageAgainst;
  }

  public void setPitchingBattingAverageAgainst(BigDecimal pitchingBattingAverageAgainst) {
    this.pitchingBattingAverageAgainst = pitchingBattingAverageAgainst;
  }


  public PlayerSeason pitchingBattingAverageOnBallsInPlay(BigDecimal pitchingBattingAverageOnBallsInPlay) {
    this.pitchingBattingAverageOnBallsInPlay = pitchingBattingAverageOnBallsInPlay;
    return this;
  }

  /**
   * Get pitchingBattingAverageOnBallsInPlay
   * @return pitchingBattingAverageOnBallsInPlay
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingBattingAverageOnBallsInPlay() {
    return pitchingBattingAverageOnBallsInPlay;
  }

  public void setPitchingBattingAverageOnBallsInPlay(BigDecimal pitchingBattingAverageOnBallsInPlay) {
    this.pitchingBattingAverageOnBallsInPlay = pitchingBattingAverageOnBallsInPlay;
  }


  public PlayerSeason pitchingBlownSaves(BigDecimal pitchingBlownSaves) {
    this.pitchingBlownSaves = pitchingBlownSaves;
    return this;
  }

  /**
   * Get pitchingBlownSaves
   * @return pitchingBlownSaves
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingBlownSaves() {
    return pitchingBlownSaves;
  }

  public void setPitchingBlownSaves(BigDecimal pitchingBlownSaves) {
    this.pitchingBlownSaves = pitchingBlownSaves;
  }


  public PlayerSeason pitchingCatchersInterference(BigDecimal pitchingCatchersInterference) {
    this.pitchingCatchersInterference = pitchingCatchersInterference;
    return this;
  }

  /**
   * Get pitchingCatchersInterference
   * @return pitchingCatchersInterference
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingCatchersInterference() {
    return pitchingCatchersInterference;
  }

  public void setPitchingCatchersInterference(BigDecimal pitchingCatchersInterference) {
    this.pitchingCatchersInterference = pitchingCatchersInterference;
  }


  public PlayerSeason pitchingCompleteGames(BigDecimal pitchingCompleteGames) {
    this.pitchingCompleteGames = pitchingCompleteGames;
    return this;
  }

  /**
   * Get pitchingCompleteGames
   * @return pitchingCompleteGames
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingCompleteGames() {
    return pitchingCompleteGames;
  }

  public void setPitchingCompleteGames(BigDecimal pitchingCompleteGames) {
    this.pitchingCompleteGames = pitchingCompleteGames;
  }


  public PlayerSeason pitchingDoublePlays(BigDecimal pitchingDoublePlays) {
    this.pitchingDoublePlays = pitchingDoublePlays;
    return this;
  }

  /**
   * Get pitchingDoublePlays
   * @return pitchingDoublePlays
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingDoublePlays() {
    return pitchingDoublePlays;
  }

  public void setPitchingDoublePlays(BigDecimal pitchingDoublePlays) {
    this.pitchingDoublePlays = pitchingDoublePlays;
  }


  public PlayerSeason pitchingDoubles(BigDecimal pitchingDoubles) {
    this.pitchingDoubles = pitchingDoubles;
    return this;
  }

  /**
   * Get pitchingDoubles
   * @return pitchingDoubles
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingDoubles() {
    return pitchingDoubles;
  }

  public void setPitchingDoubles(BigDecimal pitchingDoubles) {
    this.pitchingDoubles = pitchingDoubles;
  }


  public PlayerSeason pitchingEarnedRuns(BigDecimal pitchingEarnedRuns) {
    this.pitchingEarnedRuns = pitchingEarnedRuns;
    return this;
  }

  /**
   * Get pitchingEarnedRuns
   * @return pitchingEarnedRuns
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingEarnedRuns() {
    return pitchingEarnedRuns;
  }

  public void setPitchingEarnedRuns(BigDecimal pitchingEarnedRuns) {
    this.pitchingEarnedRuns = pitchingEarnedRuns;
  }


  public PlayerSeason pitchingFlyOuts(BigDecimal pitchingFlyOuts) {
    this.pitchingFlyOuts = pitchingFlyOuts;
    return this;
  }

  /**
   * Get pitchingFlyOuts
   * @return pitchingFlyOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingFlyOuts() {
    return pitchingFlyOuts;
  }

  public void setPitchingFlyOuts(BigDecimal pitchingFlyOuts) {
    this.pitchingFlyOuts = pitchingFlyOuts;
  }


  public PlayerSeason pitchingGrandSlams(BigDecimal pitchingGrandSlams) {
    this.pitchingGrandSlams = pitchingGrandSlams;
    return this;
  }

  /**
   * Get pitchingGrandSlams
   * @return pitchingGrandSlams
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingGrandSlams() {
    return pitchingGrandSlams;
  }

  public void setPitchingGrandSlams(BigDecimal pitchingGrandSlams) {
    this.pitchingGrandSlams = pitchingGrandSlams;
  }


  public PlayerSeason pitchingGroundIntoDoublePlay(BigDecimal pitchingGroundIntoDoublePlay) {
    this.pitchingGroundIntoDoublePlay = pitchingGroundIntoDoublePlay;
    return this;
  }

  /**
   * Get pitchingGroundIntoDoublePlay
   * @return pitchingGroundIntoDoublePlay
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingGroundIntoDoublePlay() {
    return pitchingGroundIntoDoublePlay;
  }

  public void setPitchingGroundIntoDoublePlay(BigDecimal pitchingGroundIntoDoublePlay) {
    this.pitchingGroundIntoDoublePlay = pitchingGroundIntoDoublePlay;
  }


  public PlayerSeason pitchingGroundOuts(BigDecimal pitchingGroundOuts) {
    this.pitchingGroundOuts = pitchingGroundOuts;
    return this;
  }

  /**
   * Get pitchingGroundOuts
   * @return pitchingGroundOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingGroundOuts() {
    return pitchingGroundOuts;
  }

  public void setPitchingGroundOuts(BigDecimal pitchingGroundOuts) {
    this.pitchingGroundOuts = pitchingGroundOuts;
  }


  public PlayerSeason pitchingHitByPitch(BigDecimal pitchingHitByPitch) {
    this.pitchingHitByPitch = pitchingHitByPitch;
    return this;
  }

  /**
   * Get pitchingHitByPitch
   * @return pitchingHitByPitch
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingHitByPitch() {
    return pitchingHitByPitch;
  }

  public void setPitchingHitByPitch(BigDecimal pitchingHitByPitch) {
    this.pitchingHitByPitch = pitchingHitByPitch;
  }


  public PlayerSeason pitchingHits(BigDecimal pitchingHits) {
    this.pitchingHits = pitchingHits;
    return this;
  }

  /**
   * Get pitchingHits
   * @return pitchingHits
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingHits() {
    return pitchingHits;
  }

  public void setPitchingHits(BigDecimal pitchingHits) {
    this.pitchingHits = pitchingHits;
  }


  public PlayerSeason pitchingHolds(BigDecimal pitchingHolds) {
    this.pitchingHolds = pitchingHolds;
    return this;
  }

  /**
   * Get pitchingHolds
   * @return pitchingHolds
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingHolds() {
    return pitchingHolds;
  }

  public void setPitchingHolds(BigDecimal pitchingHolds) {
    this.pitchingHolds = pitchingHolds;
  }


  public PlayerSeason pitchingHomeRuns(BigDecimal pitchingHomeRuns) {
    this.pitchingHomeRuns = pitchingHomeRuns;
    return this;
  }

  /**
   * Get pitchingHomeRuns
   * @return pitchingHomeRuns
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingHomeRuns() {
    return pitchingHomeRuns;
  }

  public void setPitchingHomeRuns(BigDecimal pitchingHomeRuns) {
    this.pitchingHomeRuns = pitchingHomeRuns;
  }


  public PlayerSeason pitchingInningStarted(Integer pitchingInningStarted) {
    this.pitchingInningStarted = pitchingInningStarted;
    return this;
  }

  /**
   * Get pitchingInningStarted
   * @return pitchingInningStarted
   */
  @javax.annotation.Nullable
  public Integer getPitchingInningStarted() {
    return pitchingInningStarted;
  }

  public void setPitchingInningStarted(Integer pitchingInningStarted) {
    this.pitchingInningStarted = pitchingInningStarted;
  }


  public PlayerSeason pitchingIntentionalWalks(BigDecimal pitchingIntentionalWalks) {
    this.pitchingIntentionalWalks = pitchingIntentionalWalks;
    return this;
  }

  /**
   * Get pitchingIntentionalWalks
   * @return pitchingIntentionalWalks
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingIntentionalWalks() {
    return pitchingIntentionalWalks;
  }

  public void setPitchingIntentionalWalks(BigDecimal pitchingIntentionalWalks) {
    this.pitchingIntentionalWalks = pitchingIntentionalWalks;
  }


  public PlayerSeason pitchingLineOuts(BigDecimal pitchingLineOuts) {
    this.pitchingLineOuts = pitchingLineOuts;
    return this;
  }

  /**
   * Get pitchingLineOuts
   * @return pitchingLineOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingLineOuts() {
    return pitchingLineOuts;
  }

  public void setPitchingLineOuts(BigDecimal pitchingLineOuts) {
    this.pitchingLineOuts = pitchingLineOuts;
  }


  public PlayerSeason pitchingNoHitters(BigDecimal pitchingNoHitters) {
    this.pitchingNoHitters = pitchingNoHitters;
    return this;
  }

  /**
   * Get pitchingNoHitters
   * @return pitchingNoHitters
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingNoHitters() {
    return pitchingNoHitters;
  }

  public void setPitchingNoHitters(BigDecimal pitchingNoHitters) {
    this.pitchingNoHitters = pitchingNoHitters;
  }


  public PlayerSeason pitchingOnBasePercentage(BigDecimal pitchingOnBasePercentage) {
    this.pitchingOnBasePercentage = pitchingOnBasePercentage;
    return this;
  }

  /**
   * Get pitchingOnBasePercentage
   * @return pitchingOnBasePercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingOnBasePercentage() {
    return pitchingOnBasePercentage;
  }

  public void setPitchingOnBasePercentage(BigDecimal pitchingOnBasePercentage) {
    this.pitchingOnBasePercentage = pitchingOnBasePercentage;
  }


  public PlayerSeason pitchingOnBasePlusSlugging(BigDecimal pitchingOnBasePlusSlugging) {
    this.pitchingOnBasePlusSlugging = pitchingOnBasePlusSlugging;
    return this;
  }

  /**
   * Get pitchingOnBasePlusSlugging
   * @return pitchingOnBasePlusSlugging
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingOnBasePlusSlugging() {
    return pitchingOnBasePlusSlugging;
  }

  public void setPitchingOnBasePlusSlugging(BigDecimal pitchingOnBasePlusSlugging) {
    this.pitchingOnBasePlusSlugging = pitchingOnBasePlusSlugging;
  }


  public PlayerSeason pitchingPerfectGames(BigDecimal pitchingPerfectGames) {
    this.pitchingPerfectGames = pitchingPerfectGames;
    return this;
  }

  /**
   * Get pitchingPerfectGames
   * @return pitchingPerfectGames
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingPerfectGames() {
    return pitchingPerfectGames;
  }

  public void setPitchingPerfectGames(BigDecimal pitchingPerfectGames) {
    this.pitchingPerfectGames = pitchingPerfectGames;
  }


  public PlayerSeason pitchingPlateAppearances(BigDecimal pitchingPlateAppearances) {
    this.pitchingPlateAppearances = pitchingPlateAppearances;
    return this;
  }

  /**
   * Get pitchingPlateAppearances
   * @return pitchingPlateAppearances
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingPlateAppearances() {
    return pitchingPlateAppearances;
  }

  public void setPitchingPlateAppearances(BigDecimal pitchingPlateAppearances) {
    this.pitchingPlateAppearances = pitchingPlateAppearances;
  }


  public PlayerSeason pitchingPopOuts(BigDecimal pitchingPopOuts) {
    this.pitchingPopOuts = pitchingPopOuts;
    return this;
  }

  /**
   * Get pitchingPopOuts
   * @return pitchingPopOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingPopOuts() {
    return pitchingPopOuts;
  }

  public void setPitchingPopOuts(BigDecimal pitchingPopOuts) {
    this.pitchingPopOuts = pitchingPopOuts;
  }


  public PlayerSeason pitchingQualityStarts(BigDecimal pitchingQualityStarts) {
    this.pitchingQualityStarts = pitchingQualityStarts;
    return this;
  }

  /**
   * Get pitchingQualityStarts
   * @return pitchingQualityStarts
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingQualityStarts() {
    return pitchingQualityStarts;
  }

  public void setPitchingQualityStarts(BigDecimal pitchingQualityStarts) {
    this.pitchingQualityStarts = pitchingQualityStarts;
  }


  public PlayerSeason pitchingReachedOnError(BigDecimal pitchingReachedOnError) {
    this.pitchingReachedOnError = pitchingReachedOnError;
    return this;
  }

  /**
   * Get pitchingReachedOnError
   * @return pitchingReachedOnError
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingReachedOnError() {
    return pitchingReachedOnError;
  }

  public void setPitchingReachedOnError(BigDecimal pitchingReachedOnError) {
    this.pitchingReachedOnError = pitchingReachedOnError;
  }


  public PlayerSeason pitchingRuns(BigDecimal pitchingRuns) {
    this.pitchingRuns = pitchingRuns;
    return this;
  }

  /**
   * Get pitchingRuns
   * @return pitchingRuns
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingRuns() {
    return pitchingRuns;
  }

  public void setPitchingRuns(BigDecimal pitchingRuns) {
    this.pitchingRuns = pitchingRuns;
  }


  public PlayerSeason pitchingSacrificeFlies(BigDecimal pitchingSacrificeFlies) {
    this.pitchingSacrificeFlies = pitchingSacrificeFlies;
    return this;
  }

  /**
   * Get pitchingSacrificeFlies
   * @return pitchingSacrificeFlies
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingSacrificeFlies() {
    return pitchingSacrificeFlies;
  }

  public void setPitchingSacrificeFlies(BigDecimal pitchingSacrificeFlies) {
    this.pitchingSacrificeFlies = pitchingSacrificeFlies;
  }


  public PlayerSeason pitchingSacrifices(BigDecimal pitchingSacrifices) {
    this.pitchingSacrifices = pitchingSacrifices;
    return this;
  }

  /**
   * Get pitchingSacrifices
   * @return pitchingSacrifices
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingSacrifices() {
    return pitchingSacrifices;
  }

  public void setPitchingSacrifices(BigDecimal pitchingSacrifices) {
    this.pitchingSacrifices = pitchingSacrifices;
  }


  public PlayerSeason pitchingShutOuts(BigDecimal pitchingShutOuts) {
    this.pitchingShutOuts = pitchingShutOuts;
    return this;
  }

  /**
   * Get pitchingShutOuts
   * @return pitchingShutOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingShutOuts() {
    return pitchingShutOuts;
  }

  public void setPitchingShutOuts(BigDecimal pitchingShutOuts) {
    this.pitchingShutOuts = pitchingShutOuts;
  }


  public PlayerSeason pitchingSingles(BigDecimal pitchingSingles) {
    this.pitchingSingles = pitchingSingles;
    return this;
  }

  /**
   * Get pitchingSingles
   * @return pitchingSingles
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingSingles() {
    return pitchingSingles;
  }

  public void setPitchingSingles(BigDecimal pitchingSingles) {
    this.pitchingSingles = pitchingSingles;
  }


  public PlayerSeason pitchingSluggingPercentage(BigDecimal pitchingSluggingPercentage) {
    this.pitchingSluggingPercentage = pitchingSluggingPercentage;
    return this;
  }

  /**
   * Get pitchingSluggingPercentage
   * @return pitchingSluggingPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingSluggingPercentage() {
    return pitchingSluggingPercentage;
  }

  public void setPitchingSluggingPercentage(BigDecimal pitchingSluggingPercentage) {
    this.pitchingSluggingPercentage = pitchingSluggingPercentage;
  }


  public PlayerSeason pitchingStrikeouts(BigDecimal pitchingStrikeouts) {
    this.pitchingStrikeouts = pitchingStrikeouts;
    return this;
  }

  /**
   * Get pitchingStrikeouts
   * @return pitchingStrikeouts
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingStrikeouts() {
    return pitchingStrikeouts;
  }

  public void setPitchingStrikeouts(BigDecimal pitchingStrikeouts) {
    this.pitchingStrikeouts = pitchingStrikeouts;
  }


  public PlayerSeason pitchingStrikeoutsPerNineInnings(BigDecimal pitchingStrikeoutsPerNineInnings) {
    this.pitchingStrikeoutsPerNineInnings = pitchingStrikeoutsPerNineInnings;
    return this;
  }

  /**
   * Get pitchingStrikeoutsPerNineInnings
   * @return pitchingStrikeoutsPerNineInnings
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingStrikeoutsPerNineInnings() {
    return pitchingStrikeoutsPerNineInnings;
  }

  public void setPitchingStrikeoutsPerNineInnings(BigDecimal pitchingStrikeoutsPerNineInnings) {
    this.pitchingStrikeoutsPerNineInnings = pitchingStrikeoutsPerNineInnings;
  }


  public PlayerSeason pitchingTotalBases(BigDecimal pitchingTotalBases) {
    this.pitchingTotalBases = pitchingTotalBases;
    return this;
  }

  /**
   * Get pitchingTotalBases
   * @return pitchingTotalBases
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingTotalBases() {
    return pitchingTotalBases;
  }

  public void setPitchingTotalBases(BigDecimal pitchingTotalBases) {
    this.pitchingTotalBases = pitchingTotalBases;
  }


  public PlayerSeason pitchingTriples(BigDecimal pitchingTriples) {
    this.pitchingTriples = pitchingTriples;
    return this;
  }

  /**
   * Get pitchingTriples
   * @return pitchingTriples
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingTriples() {
    return pitchingTriples;
  }

  public void setPitchingTriples(BigDecimal pitchingTriples) {
    this.pitchingTriples = pitchingTriples;
  }


  public PlayerSeason pitchingWalks(BigDecimal pitchingWalks) {
    this.pitchingWalks = pitchingWalks;
    return this;
  }

  /**
   * Get pitchingWalks
   * @return pitchingWalks
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingWalks() {
    return pitchingWalks;
  }

  public void setPitchingWalks(BigDecimal pitchingWalks) {
    this.pitchingWalks = pitchingWalks;
  }


  public PlayerSeason pitchingWalksPerNineInnings(BigDecimal pitchingWalksPerNineInnings) {
    this.pitchingWalksPerNineInnings = pitchingWalksPerNineInnings;
    return this;
  }

  /**
   * Get pitchingWalksPerNineInnings
   * @return pitchingWalksPerNineInnings
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingWalksPerNineInnings() {
    return pitchingWalksPerNineInnings;
  }

  public void setPitchingWalksPerNineInnings(BigDecimal pitchingWalksPerNineInnings) {
    this.pitchingWalksPerNineInnings = pitchingWalksPerNineInnings;
  }


  public PlayerSeason pitchingWeightedOnBasePercentage(BigDecimal pitchingWeightedOnBasePercentage) {
    this.pitchingWeightedOnBasePercentage = pitchingWeightedOnBasePercentage;
    return this;
  }

  /**
   * Get pitchingWeightedOnBasePercentage
   * @return pitchingWeightedOnBasePercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPitchingWeightedOnBasePercentage() {
    return pitchingWeightedOnBasePercentage;
  }

  public void setPitchingWeightedOnBasePercentage(BigDecimal pitchingWeightedOnBasePercentage) {
    this.pitchingWeightedOnBasePercentage = pitchingWeightedOnBasePercentage;
  }


  public PlayerSeason plateAppearances(BigDecimal plateAppearances) {
    this.plateAppearances = plateAppearances;
    return this;
  }

  /**
   * Get plateAppearances
   * @return plateAppearances
   */
  @javax.annotation.Nullable
  public BigDecimal getPlateAppearances() {
    return plateAppearances;
  }

  public void setPlateAppearances(BigDecimal plateAppearances) {
    this.plateAppearances = plateAppearances;
  }


  public PlayerSeason playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayerSeason popOuts(BigDecimal popOuts) {
    this.popOuts = popOuts;
    return this;
  }

  /**
   * Get popOuts
   * @return popOuts
   */
  @javax.annotation.Nullable
  public BigDecimal getPopOuts() {
    return popOuts;
  }

  public void setPopOuts(BigDecimal popOuts) {
    this.popOuts = popOuts;
  }


  public PlayerSeason position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public PlayerSeason positionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
    return this;
  }

  /**
   * Get positionCategory
   * @return positionCategory
   */
  @javax.annotation.Nullable
  public String getPositionCategory() {
    return positionCategory;
  }

  public void setPositionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
  }


  public PlayerSeason reachedOnError(BigDecimal reachedOnError) {
    this.reachedOnError = reachedOnError;
    return this;
  }

  /**
   * Get reachedOnError
   * @return reachedOnError
   */
  @javax.annotation.Nullable
  public BigDecimal getReachedOnError() {
    return reachedOnError;
  }

  public void setReachedOnError(BigDecimal reachedOnError) {
    this.reachedOnError = reachedOnError;
  }


  public PlayerSeason runs(BigDecimal runs) {
    this.runs = runs;
    return this;
  }

  /**
   * Get runs
   * @return runs
   */
  @javax.annotation.Nullable
  public BigDecimal getRuns() {
    return runs;
  }

  public void setRuns(BigDecimal runs) {
    this.runs = runs;
  }


  public PlayerSeason runsBattedIn(BigDecimal runsBattedIn) {
    this.runsBattedIn = runsBattedIn;
    return this;
  }

  /**
   * Get runsBattedIn
   * @return runsBattedIn
   */
  @javax.annotation.Nullable
  public BigDecimal getRunsBattedIn() {
    return runsBattedIn;
  }

  public void setRunsBattedIn(BigDecimal runsBattedIn) {
    this.runsBattedIn = runsBattedIn;
  }


  public PlayerSeason sacrificeFlies(BigDecimal sacrificeFlies) {
    this.sacrificeFlies = sacrificeFlies;
    return this;
  }

  /**
   * Get sacrificeFlies
   * @return sacrificeFlies
   */
  @javax.annotation.Nullable
  public BigDecimal getSacrificeFlies() {
    return sacrificeFlies;
  }

  public void setSacrificeFlies(BigDecimal sacrificeFlies) {
    this.sacrificeFlies = sacrificeFlies;
  }


  public PlayerSeason sacrifices(BigDecimal sacrifices) {
    this.sacrifices = sacrifices;
    return this;
  }

  /**
   * Get sacrifices
   * @return sacrifices
   */
  @javax.annotation.Nullable
  public BigDecimal getSacrifices() {
    return sacrifices;
  }

  public void setSacrifices(BigDecimal sacrifices) {
    this.sacrifices = sacrifices;
  }


  public PlayerSeason saves(BigDecimal saves) {
    this.saves = saves;
    return this;
  }

  /**
   * Get saves
   * @return saves
   */
  @javax.annotation.Nullable
  public BigDecimal getSaves() {
    return saves;
  }

  public void setSaves(BigDecimal saves) {
    this.saves = saves;
  }


  public PlayerSeason season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public PlayerSeason seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public PlayerSeason singles(BigDecimal singles) {
    this.singles = singles;
    return this;
  }

  /**
   * Get singles
   * @return singles
   */
  @javax.annotation.Nullable
  public BigDecimal getSingles() {
    return singles;
  }

  public void setSingles(BigDecimal singles) {
    this.singles = singles;
  }


  public PlayerSeason sluggingPercentage(BigDecimal sluggingPercentage) {
    this.sluggingPercentage = sluggingPercentage;
    return this;
  }

  /**
   * Get sluggingPercentage
   * @return sluggingPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getSluggingPercentage() {
    return sluggingPercentage;
  }

  public void setSluggingPercentage(BigDecimal sluggingPercentage) {
    this.sluggingPercentage = sluggingPercentage;
  }


  public PlayerSeason started(Integer started) {
    this.started = started;
    return this;
  }

  /**
   * Get started
   * @return started
   */
  @javax.annotation.Nullable
  public Integer getStarted() {
    return started;
  }

  public void setStarted(Integer started) {
    this.started = started;
  }


  public PlayerSeason statID(Integer statID) {
    this.statID = statID;
    return this;
  }

  /**
   * Get statID
   * @return statID
   */
  @javax.annotation.Nullable
  public Integer getStatID() {
    return statID;
  }

  public void setStatID(Integer statID) {
    this.statID = statID;
  }


  public PlayerSeason stolenBases(BigDecimal stolenBases) {
    this.stolenBases = stolenBases;
    return this;
  }

  /**
   * Get stolenBases
   * @return stolenBases
   */
  @javax.annotation.Nullable
  public BigDecimal getStolenBases() {
    return stolenBases;
  }

  public void setStolenBases(BigDecimal stolenBases) {
    this.stolenBases = stolenBases;
  }


  public PlayerSeason strikeouts(BigDecimal strikeouts) {
    this.strikeouts = strikeouts;
    return this;
  }

  /**
   * Get strikeouts
   * @return strikeouts
   */
  @javax.annotation.Nullable
  public BigDecimal getStrikeouts() {
    return strikeouts;
  }

  public void setStrikeouts(BigDecimal strikeouts) {
    this.strikeouts = strikeouts;
  }


  public PlayerSeason substituteBattingOrder(Integer substituteBattingOrder) {
    this.substituteBattingOrder = substituteBattingOrder;
    return this;
  }

  /**
   * Get substituteBattingOrder
   * @return substituteBattingOrder
   */
  @javax.annotation.Nullable
  public Integer getSubstituteBattingOrder() {
    return substituteBattingOrder;
  }

  public void setSubstituteBattingOrder(Integer substituteBattingOrder) {
    this.substituteBattingOrder = substituteBattingOrder;
  }


  public PlayerSeason substituteBattingOrderSequence(Integer substituteBattingOrderSequence) {
    this.substituteBattingOrderSequence = substituteBattingOrderSequence;
    return this;
  }

  /**
   * Get substituteBattingOrderSequence
   * @return substituteBattingOrderSequence
   */
  @javax.annotation.Nullable
  public Integer getSubstituteBattingOrderSequence() {
    return substituteBattingOrderSequence;
  }

  public void setSubstituteBattingOrderSequence(Integer substituteBattingOrderSequence) {
    this.substituteBattingOrderSequence = substituteBattingOrderSequence;
  }


  public PlayerSeason team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayerSeason teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public PlayerSeason totalBases(BigDecimal totalBases) {
    this.totalBases = totalBases;
    return this;
  }

  /**
   * Get totalBases
   * @return totalBases
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalBases() {
    return totalBases;
  }

  public void setTotalBases(BigDecimal totalBases) {
    this.totalBases = totalBases;
  }


  public PlayerSeason totalOutsPitched(BigDecimal totalOutsPitched) {
    this.totalOutsPitched = totalOutsPitched;
    return this;
  }

  /**
   * Get totalOutsPitched
   * @return totalOutsPitched
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalOutsPitched() {
    return totalOutsPitched;
  }

  public void setTotalOutsPitched(BigDecimal totalOutsPitched) {
    this.totalOutsPitched = totalOutsPitched;
  }


  public PlayerSeason triples(BigDecimal triples) {
    this.triples = triples;
    return this;
  }

  /**
   * Get triples
   * @return triples
   */
  @javax.annotation.Nullable
  public BigDecimal getTriples() {
    return triples;
  }

  public void setTriples(BigDecimal triples) {
    this.triples = triples;
  }


  public PlayerSeason updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public PlayerSeason walks(BigDecimal walks) {
    this.walks = walks;
    return this;
  }

  /**
   * Get walks
   * @return walks
   */
  @javax.annotation.Nullable
  public BigDecimal getWalks() {
    return walks;
  }

  public void setWalks(BigDecimal walks) {
    this.walks = walks;
  }


  public PlayerSeason walksHitsPerInningsPitched(BigDecimal walksHitsPerInningsPitched) {
    this.walksHitsPerInningsPitched = walksHitsPerInningsPitched;
    return this;
  }

  /**
   * Get walksHitsPerInningsPitched
   * @return walksHitsPerInningsPitched
   */
  @javax.annotation.Nullable
  public BigDecimal getWalksHitsPerInningsPitched() {
    return walksHitsPerInningsPitched;
  }

  public void setWalksHitsPerInningsPitched(BigDecimal walksHitsPerInningsPitched) {
    this.walksHitsPerInningsPitched = walksHitsPerInningsPitched;
  }


  public PlayerSeason weightedOnBasePercentage(BigDecimal weightedOnBasePercentage) {
    this.weightedOnBasePercentage = weightedOnBasePercentage;
    return this;
  }

  /**
   * Get weightedOnBasePercentage
   * @return weightedOnBasePercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getWeightedOnBasePercentage() {
    return weightedOnBasePercentage;
  }

  public void setWeightedOnBasePercentage(BigDecimal weightedOnBasePercentage) {
    this.weightedOnBasePercentage = weightedOnBasePercentage;
  }


  public PlayerSeason wins(BigDecimal wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public BigDecimal getWins() {
    return wins;
  }

  public void setWins(BigDecimal wins) {
    this.wins = wins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerSeason playerSeason = (PlayerSeason) o;
    return Objects.equals(this.atBats, playerSeason.atBats) &&
        Objects.equals(this.auctionValue, playerSeason.auctionValue) &&
        Objects.equals(this.averageDraftPosition, playerSeason.averageDraftPosition) &&
        Objects.equals(this.ballsInPlay, playerSeason.ballsInPlay) &&
        Objects.equals(this.battingAverage, playerSeason.battingAverage) &&
        Objects.equals(this.battingAverageOnBallsInPlay, playerSeason.battingAverageOnBallsInPlay) &&
        Objects.equals(this.battingOrder, playerSeason.battingOrder) &&
        Objects.equals(this.battingOrderConfirmed, playerSeason.battingOrderConfirmed) &&
        Objects.equals(this.caughtStealing, playerSeason.caughtStealing) &&
        Objects.equals(this.doublePlays, playerSeason.doublePlays) &&
        Objects.equals(this.doubles, playerSeason.doubles) &&
        Objects.equals(this.earnedRunAverage, playerSeason.earnedRunAverage) &&
        Objects.equals(this.errors, playerSeason.errors) &&
        Objects.equals(this.fantasyPoints, playerSeason.fantasyPoints) &&
        Objects.equals(this.fantasyPointsBatting, playerSeason.fantasyPointsBatting) &&
        Objects.equals(this.fantasyPointsDraftKings, playerSeason.fantasyPointsDraftKings) &&
        Objects.equals(this.fantasyPointsFanDuel, playerSeason.fantasyPointsFanDuel) &&
        Objects.equals(this.fantasyPointsFantasyDraft, playerSeason.fantasyPointsFantasyDraft) &&
        Objects.equals(this.fantasyPointsPitching, playerSeason.fantasyPointsPitching) &&
        Objects.equals(this.fantasyPointsYahoo, playerSeason.fantasyPointsYahoo) &&
        Objects.equals(this.fieldingIndependentPitching, playerSeason.fieldingIndependentPitching) &&
        Objects.equals(this.flyOuts, playerSeason.flyOuts) &&
        Objects.equals(this.games, playerSeason.games) &&
        Objects.equals(this.globalTeamID, playerSeason.globalTeamID) &&
        Objects.equals(this.grandSlams, playerSeason.grandSlams) &&
        Objects.equals(this.groundIntoDoublePlay, playerSeason.groundIntoDoublePlay) &&
        Objects.equals(this.groundOuts, playerSeason.groundOuts) &&
        Objects.equals(this.hitByPitch, playerSeason.hitByPitch) &&
        Objects.equals(this.hits, playerSeason.hits) &&
        Objects.equals(this.homeRuns, playerSeason.homeRuns) &&
        Objects.equals(this.inningsPitchedDecimal, playerSeason.inningsPitchedDecimal) &&
        Objects.equals(this.inningsPitchedFull, playerSeason.inningsPitchedFull) &&
        Objects.equals(this.inningsPitchedOuts, playerSeason.inningsPitchedOuts) &&
        Objects.equals(this.intentionalWalks, playerSeason.intentionalWalks) &&
        Objects.equals(this.isolatedPower, playerSeason.isolatedPower) &&
        Objects.equals(this.leftOnBase, playerSeason.leftOnBase) &&
        Objects.equals(this.lineOuts, playerSeason.lineOuts) &&
        Objects.equals(this.losses, playerSeason.losses) &&
        Objects.equals(this.name, playerSeason.name) &&
        Objects.equals(this.onBasePercentage, playerSeason.onBasePercentage) &&
        Objects.equals(this.onBasePlusSlugging, playerSeason.onBasePlusSlugging) &&
        Objects.equals(this.outs, playerSeason.outs) &&
        Objects.equals(this.pitchesSeen, playerSeason.pitchesSeen) &&
        Objects.equals(this.pitchesThrown, playerSeason.pitchesThrown) &&
        Objects.equals(this.pitchesThrownStrikes, playerSeason.pitchesThrownStrikes) &&
        Objects.equals(this.pitchingBallsInPlay, playerSeason.pitchingBallsInPlay) &&
        Objects.equals(this.pitchingBattingAverageAgainst, playerSeason.pitchingBattingAverageAgainst) &&
        Objects.equals(this.pitchingBattingAverageOnBallsInPlay, playerSeason.pitchingBattingAverageOnBallsInPlay) &&
        Objects.equals(this.pitchingBlownSaves, playerSeason.pitchingBlownSaves) &&
        Objects.equals(this.pitchingCatchersInterference, playerSeason.pitchingCatchersInterference) &&
        Objects.equals(this.pitchingCompleteGames, playerSeason.pitchingCompleteGames) &&
        Objects.equals(this.pitchingDoublePlays, playerSeason.pitchingDoublePlays) &&
        Objects.equals(this.pitchingDoubles, playerSeason.pitchingDoubles) &&
        Objects.equals(this.pitchingEarnedRuns, playerSeason.pitchingEarnedRuns) &&
        Objects.equals(this.pitchingFlyOuts, playerSeason.pitchingFlyOuts) &&
        Objects.equals(this.pitchingGrandSlams, playerSeason.pitchingGrandSlams) &&
        Objects.equals(this.pitchingGroundIntoDoublePlay, playerSeason.pitchingGroundIntoDoublePlay) &&
        Objects.equals(this.pitchingGroundOuts, playerSeason.pitchingGroundOuts) &&
        Objects.equals(this.pitchingHitByPitch, playerSeason.pitchingHitByPitch) &&
        Objects.equals(this.pitchingHits, playerSeason.pitchingHits) &&
        Objects.equals(this.pitchingHolds, playerSeason.pitchingHolds) &&
        Objects.equals(this.pitchingHomeRuns, playerSeason.pitchingHomeRuns) &&
        Objects.equals(this.pitchingInningStarted, playerSeason.pitchingInningStarted) &&
        Objects.equals(this.pitchingIntentionalWalks, playerSeason.pitchingIntentionalWalks) &&
        Objects.equals(this.pitchingLineOuts, playerSeason.pitchingLineOuts) &&
        Objects.equals(this.pitchingNoHitters, playerSeason.pitchingNoHitters) &&
        Objects.equals(this.pitchingOnBasePercentage, playerSeason.pitchingOnBasePercentage) &&
        Objects.equals(this.pitchingOnBasePlusSlugging, playerSeason.pitchingOnBasePlusSlugging) &&
        Objects.equals(this.pitchingPerfectGames, playerSeason.pitchingPerfectGames) &&
        Objects.equals(this.pitchingPlateAppearances, playerSeason.pitchingPlateAppearances) &&
        Objects.equals(this.pitchingPopOuts, playerSeason.pitchingPopOuts) &&
        Objects.equals(this.pitchingQualityStarts, playerSeason.pitchingQualityStarts) &&
        Objects.equals(this.pitchingReachedOnError, playerSeason.pitchingReachedOnError) &&
        Objects.equals(this.pitchingRuns, playerSeason.pitchingRuns) &&
        Objects.equals(this.pitchingSacrificeFlies, playerSeason.pitchingSacrificeFlies) &&
        Objects.equals(this.pitchingSacrifices, playerSeason.pitchingSacrifices) &&
        Objects.equals(this.pitchingShutOuts, playerSeason.pitchingShutOuts) &&
        Objects.equals(this.pitchingSingles, playerSeason.pitchingSingles) &&
        Objects.equals(this.pitchingSluggingPercentage, playerSeason.pitchingSluggingPercentage) &&
        Objects.equals(this.pitchingStrikeouts, playerSeason.pitchingStrikeouts) &&
        Objects.equals(this.pitchingStrikeoutsPerNineInnings, playerSeason.pitchingStrikeoutsPerNineInnings) &&
        Objects.equals(this.pitchingTotalBases, playerSeason.pitchingTotalBases) &&
        Objects.equals(this.pitchingTriples, playerSeason.pitchingTriples) &&
        Objects.equals(this.pitchingWalks, playerSeason.pitchingWalks) &&
        Objects.equals(this.pitchingWalksPerNineInnings, playerSeason.pitchingWalksPerNineInnings) &&
        Objects.equals(this.pitchingWeightedOnBasePercentage, playerSeason.pitchingWeightedOnBasePercentage) &&
        Objects.equals(this.plateAppearances, playerSeason.plateAppearances) &&
        Objects.equals(this.playerID, playerSeason.playerID) &&
        Objects.equals(this.popOuts, playerSeason.popOuts) &&
        Objects.equals(this.position, playerSeason.position) &&
        Objects.equals(this.positionCategory, playerSeason.positionCategory) &&
        Objects.equals(this.reachedOnError, playerSeason.reachedOnError) &&
        Objects.equals(this.runs, playerSeason.runs) &&
        Objects.equals(this.runsBattedIn, playerSeason.runsBattedIn) &&
        Objects.equals(this.sacrificeFlies, playerSeason.sacrificeFlies) &&
        Objects.equals(this.sacrifices, playerSeason.sacrifices) &&
        Objects.equals(this.saves, playerSeason.saves) &&
        Objects.equals(this.season, playerSeason.season) &&
        Objects.equals(this.seasonType, playerSeason.seasonType) &&
        Objects.equals(this.singles, playerSeason.singles) &&
        Objects.equals(this.sluggingPercentage, playerSeason.sluggingPercentage) &&
        Objects.equals(this.started, playerSeason.started) &&
        Objects.equals(this.statID, playerSeason.statID) &&
        Objects.equals(this.stolenBases, playerSeason.stolenBases) &&
        Objects.equals(this.strikeouts, playerSeason.strikeouts) &&
        Objects.equals(this.substituteBattingOrder, playerSeason.substituteBattingOrder) &&
        Objects.equals(this.substituteBattingOrderSequence, playerSeason.substituteBattingOrderSequence) &&
        Objects.equals(this.team, playerSeason.team) &&
        Objects.equals(this.teamID, playerSeason.teamID) &&
        Objects.equals(this.totalBases, playerSeason.totalBases) &&
        Objects.equals(this.totalOutsPitched, playerSeason.totalOutsPitched) &&
        Objects.equals(this.triples, playerSeason.triples) &&
        Objects.equals(this.updated, playerSeason.updated) &&
        Objects.equals(this.walks, playerSeason.walks) &&
        Objects.equals(this.walksHitsPerInningsPitched, playerSeason.walksHitsPerInningsPitched) &&
        Objects.equals(this.weightedOnBasePercentage, playerSeason.weightedOnBasePercentage) &&
        Objects.equals(this.wins, playerSeason.wins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(atBats, auctionValue, averageDraftPosition, ballsInPlay, battingAverage, battingAverageOnBallsInPlay, battingOrder, battingOrderConfirmed, caughtStealing, doublePlays, doubles, earnedRunAverage, errors, fantasyPoints, fantasyPointsBatting, fantasyPointsDraftKings, fantasyPointsFanDuel, fantasyPointsFantasyDraft, fantasyPointsPitching, fantasyPointsYahoo, fieldingIndependentPitching, flyOuts, games, globalTeamID, grandSlams, groundIntoDoublePlay, groundOuts, hitByPitch, hits, homeRuns, inningsPitchedDecimal, inningsPitchedFull, inningsPitchedOuts, intentionalWalks, isolatedPower, leftOnBase, lineOuts, losses, name, onBasePercentage, onBasePlusSlugging, outs, pitchesSeen, pitchesThrown, pitchesThrownStrikes, pitchingBallsInPlay, pitchingBattingAverageAgainst, pitchingBattingAverageOnBallsInPlay, pitchingBlownSaves, pitchingCatchersInterference, pitchingCompleteGames, pitchingDoublePlays, pitchingDoubles, pitchingEarnedRuns, pitchingFlyOuts, pitchingGrandSlams, pitchingGroundIntoDoublePlay, pitchingGroundOuts, pitchingHitByPitch, pitchingHits, pitchingHolds, pitchingHomeRuns, pitchingInningStarted, pitchingIntentionalWalks, pitchingLineOuts, pitchingNoHitters, pitchingOnBasePercentage, pitchingOnBasePlusSlugging, pitchingPerfectGames, pitchingPlateAppearances, pitchingPopOuts, pitchingQualityStarts, pitchingReachedOnError, pitchingRuns, pitchingSacrificeFlies, pitchingSacrifices, pitchingShutOuts, pitchingSingles, pitchingSluggingPercentage, pitchingStrikeouts, pitchingStrikeoutsPerNineInnings, pitchingTotalBases, pitchingTriples, pitchingWalks, pitchingWalksPerNineInnings, pitchingWeightedOnBasePercentage, plateAppearances, playerID, popOuts, position, positionCategory, reachedOnError, runs, runsBattedIn, sacrificeFlies, sacrifices, saves, season, seasonType, singles, sluggingPercentage, started, statID, stolenBases, strikeouts, substituteBattingOrder, substituteBattingOrderSequence, team, teamID, totalBases, totalOutsPitched, triples, updated, walks, walksHitsPerInningsPitched, weightedOnBasePercentage, wins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerSeason {\n");
    sb.append("    atBats: ").append(toIndentedString(atBats)).append("\n");
    sb.append("    auctionValue: ").append(toIndentedString(auctionValue)).append("\n");
    sb.append("    averageDraftPosition: ").append(toIndentedString(averageDraftPosition)).append("\n");
    sb.append("    ballsInPlay: ").append(toIndentedString(ballsInPlay)).append("\n");
    sb.append("    battingAverage: ").append(toIndentedString(battingAverage)).append("\n");
    sb.append("    battingAverageOnBallsInPlay: ").append(toIndentedString(battingAverageOnBallsInPlay)).append("\n");
    sb.append("    battingOrder: ").append(toIndentedString(battingOrder)).append("\n");
    sb.append("    battingOrderConfirmed: ").append(toIndentedString(battingOrderConfirmed)).append("\n");
    sb.append("    caughtStealing: ").append(toIndentedString(caughtStealing)).append("\n");
    sb.append("    doublePlays: ").append(toIndentedString(doublePlays)).append("\n");
    sb.append("    doubles: ").append(toIndentedString(doubles)).append("\n");
    sb.append("    earnedRunAverage: ").append(toIndentedString(earnedRunAverage)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    fantasyPointsBatting: ").append(toIndentedString(fantasyPointsBatting)).append("\n");
    sb.append("    fantasyPointsDraftKings: ").append(toIndentedString(fantasyPointsDraftKings)).append("\n");
    sb.append("    fantasyPointsFanDuel: ").append(toIndentedString(fantasyPointsFanDuel)).append("\n");
    sb.append("    fantasyPointsFantasyDraft: ").append(toIndentedString(fantasyPointsFantasyDraft)).append("\n");
    sb.append("    fantasyPointsPitching: ").append(toIndentedString(fantasyPointsPitching)).append("\n");
    sb.append("    fantasyPointsYahoo: ").append(toIndentedString(fantasyPointsYahoo)).append("\n");
    sb.append("    fieldingIndependentPitching: ").append(toIndentedString(fieldingIndependentPitching)).append("\n");
    sb.append("    flyOuts: ").append(toIndentedString(flyOuts)).append("\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    grandSlams: ").append(toIndentedString(grandSlams)).append("\n");
    sb.append("    groundIntoDoublePlay: ").append(toIndentedString(groundIntoDoublePlay)).append("\n");
    sb.append("    groundOuts: ").append(toIndentedString(groundOuts)).append("\n");
    sb.append("    hitByPitch: ").append(toIndentedString(hitByPitch)).append("\n");
    sb.append("    hits: ").append(toIndentedString(hits)).append("\n");
    sb.append("    homeRuns: ").append(toIndentedString(homeRuns)).append("\n");
    sb.append("    inningsPitchedDecimal: ").append(toIndentedString(inningsPitchedDecimal)).append("\n");
    sb.append("    inningsPitchedFull: ").append(toIndentedString(inningsPitchedFull)).append("\n");
    sb.append("    inningsPitchedOuts: ").append(toIndentedString(inningsPitchedOuts)).append("\n");
    sb.append("    intentionalWalks: ").append(toIndentedString(intentionalWalks)).append("\n");
    sb.append("    isolatedPower: ").append(toIndentedString(isolatedPower)).append("\n");
    sb.append("    leftOnBase: ").append(toIndentedString(leftOnBase)).append("\n");
    sb.append("    lineOuts: ").append(toIndentedString(lineOuts)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onBasePercentage: ").append(toIndentedString(onBasePercentage)).append("\n");
    sb.append("    onBasePlusSlugging: ").append(toIndentedString(onBasePlusSlugging)).append("\n");
    sb.append("    outs: ").append(toIndentedString(outs)).append("\n");
    sb.append("    pitchesSeen: ").append(toIndentedString(pitchesSeen)).append("\n");
    sb.append("    pitchesThrown: ").append(toIndentedString(pitchesThrown)).append("\n");
    sb.append("    pitchesThrownStrikes: ").append(toIndentedString(pitchesThrownStrikes)).append("\n");
    sb.append("    pitchingBallsInPlay: ").append(toIndentedString(pitchingBallsInPlay)).append("\n");
    sb.append("    pitchingBattingAverageAgainst: ").append(toIndentedString(pitchingBattingAverageAgainst)).append("\n");
    sb.append("    pitchingBattingAverageOnBallsInPlay: ").append(toIndentedString(pitchingBattingAverageOnBallsInPlay)).append("\n");
    sb.append("    pitchingBlownSaves: ").append(toIndentedString(pitchingBlownSaves)).append("\n");
    sb.append("    pitchingCatchersInterference: ").append(toIndentedString(pitchingCatchersInterference)).append("\n");
    sb.append("    pitchingCompleteGames: ").append(toIndentedString(pitchingCompleteGames)).append("\n");
    sb.append("    pitchingDoublePlays: ").append(toIndentedString(pitchingDoublePlays)).append("\n");
    sb.append("    pitchingDoubles: ").append(toIndentedString(pitchingDoubles)).append("\n");
    sb.append("    pitchingEarnedRuns: ").append(toIndentedString(pitchingEarnedRuns)).append("\n");
    sb.append("    pitchingFlyOuts: ").append(toIndentedString(pitchingFlyOuts)).append("\n");
    sb.append("    pitchingGrandSlams: ").append(toIndentedString(pitchingGrandSlams)).append("\n");
    sb.append("    pitchingGroundIntoDoublePlay: ").append(toIndentedString(pitchingGroundIntoDoublePlay)).append("\n");
    sb.append("    pitchingGroundOuts: ").append(toIndentedString(pitchingGroundOuts)).append("\n");
    sb.append("    pitchingHitByPitch: ").append(toIndentedString(pitchingHitByPitch)).append("\n");
    sb.append("    pitchingHits: ").append(toIndentedString(pitchingHits)).append("\n");
    sb.append("    pitchingHolds: ").append(toIndentedString(pitchingHolds)).append("\n");
    sb.append("    pitchingHomeRuns: ").append(toIndentedString(pitchingHomeRuns)).append("\n");
    sb.append("    pitchingInningStarted: ").append(toIndentedString(pitchingInningStarted)).append("\n");
    sb.append("    pitchingIntentionalWalks: ").append(toIndentedString(pitchingIntentionalWalks)).append("\n");
    sb.append("    pitchingLineOuts: ").append(toIndentedString(pitchingLineOuts)).append("\n");
    sb.append("    pitchingNoHitters: ").append(toIndentedString(pitchingNoHitters)).append("\n");
    sb.append("    pitchingOnBasePercentage: ").append(toIndentedString(pitchingOnBasePercentage)).append("\n");
    sb.append("    pitchingOnBasePlusSlugging: ").append(toIndentedString(pitchingOnBasePlusSlugging)).append("\n");
    sb.append("    pitchingPerfectGames: ").append(toIndentedString(pitchingPerfectGames)).append("\n");
    sb.append("    pitchingPlateAppearances: ").append(toIndentedString(pitchingPlateAppearances)).append("\n");
    sb.append("    pitchingPopOuts: ").append(toIndentedString(pitchingPopOuts)).append("\n");
    sb.append("    pitchingQualityStarts: ").append(toIndentedString(pitchingQualityStarts)).append("\n");
    sb.append("    pitchingReachedOnError: ").append(toIndentedString(pitchingReachedOnError)).append("\n");
    sb.append("    pitchingRuns: ").append(toIndentedString(pitchingRuns)).append("\n");
    sb.append("    pitchingSacrificeFlies: ").append(toIndentedString(pitchingSacrificeFlies)).append("\n");
    sb.append("    pitchingSacrifices: ").append(toIndentedString(pitchingSacrifices)).append("\n");
    sb.append("    pitchingShutOuts: ").append(toIndentedString(pitchingShutOuts)).append("\n");
    sb.append("    pitchingSingles: ").append(toIndentedString(pitchingSingles)).append("\n");
    sb.append("    pitchingSluggingPercentage: ").append(toIndentedString(pitchingSluggingPercentage)).append("\n");
    sb.append("    pitchingStrikeouts: ").append(toIndentedString(pitchingStrikeouts)).append("\n");
    sb.append("    pitchingStrikeoutsPerNineInnings: ").append(toIndentedString(pitchingStrikeoutsPerNineInnings)).append("\n");
    sb.append("    pitchingTotalBases: ").append(toIndentedString(pitchingTotalBases)).append("\n");
    sb.append("    pitchingTriples: ").append(toIndentedString(pitchingTriples)).append("\n");
    sb.append("    pitchingWalks: ").append(toIndentedString(pitchingWalks)).append("\n");
    sb.append("    pitchingWalksPerNineInnings: ").append(toIndentedString(pitchingWalksPerNineInnings)).append("\n");
    sb.append("    pitchingWeightedOnBasePercentage: ").append(toIndentedString(pitchingWeightedOnBasePercentage)).append("\n");
    sb.append("    plateAppearances: ").append(toIndentedString(plateAppearances)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    popOuts: ").append(toIndentedString(popOuts)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionCategory: ").append(toIndentedString(positionCategory)).append("\n");
    sb.append("    reachedOnError: ").append(toIndentedString(reachedOnError)).append("\n");
    sb.append("    runs: ").append(toIndentedString(runs)).append("\n");
    sb.append("    runsBattedIn: ").append(toIndentedString(runsBattedIn)).append("\n");
    sb.append("    sacrificeFlies: ").append(toIndentedString(sacrificeFlies)).append("\n");
    sb.append("    sacrifices: ").append(toIndentedString(sacrifices)).append("\n");
    sb.append("    saves: ").append(toIndentedString(saves)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    singles: ").append(toIndentedString(singles)).append("\n");
    sb.append("    sluggingPercentage: ").append(toIndentedString(sluggingPercentage)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    statID: ").append(toIndentedString(statID)).append("\n");
    sb.append("    stolenBases: ").append(toIndentedString(stolenBases)).append("\n");
    sb.append("    strikeouts: ").append(toIndentedString(strikeouts)).append("\n");
    sb.append("    substituteBattingOrder: ").append(toIndentedString(substituteBattingOrder)).append("\n");
    sb.append("    substituteBattingOrderSequence: ").append(toIndentedString(substituteBattingOrderSequence)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    totalBases: ").append(toIndentedString(totalBases)).append("\n");
    sb.append("    totalOutsPitched: ").append(toIndentedString(totalOutsPitched)).append("\n");
    sb.append("    triples: ").append(toIndentedString(triples)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    walks: ").append(toIndentedString(walks)).append("\n");
    sb.append("    walksHitsPerInningsPitched: ").append(toIndentedString(walksHitsPerInningsPitched)).append("\n");
    sb.append("    weightedOnBasePercentage: ").append(toIndentedString(weightedOnBasePercentage)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AtBats");
    openapiFields.add("AuctionValue");
    openapiFields.add("AverageDraftPosition");
    openapiFields.add("BallsInPlay");
    openapiFields.add("BattingAverage");
    openapiFields.add("BattingAverageOnBallsInPlay");
    openapiFields.add("BattingOrder");
    openapiFields.add("BattingOrderConfirmed");
    openapiFields.add("CaughtStealing");
    openapiFields.add("DoublePlays");
    openapiFields.add("Doubles");
    openapiFields.add("EarnedRunAverage");
    openapiFields.add("Errors");
    openapiFields.add("FantasyPoints");
    openapiFields.add("FantasyPointsBatting");
    openapiFields.add("FantasyPointsDraftKings");
    openapiFields.add("FantasyPointsFanDuel");
    openapiFields.add("FantasyPointsFantasyDraft");
    openapiFields.add("FantasyPointsPitching");
    openapiFields.add("FantasyPointsYahoo");
    openapiFields.add("FieldingIndependentPitching");
    openapiFields.add("FlyOuts");
    openapiFields.add("Games");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("GrandSlams");
    openapiFields.add("GroundIntoDoublePlay");
    openapiFields.add("GroundOuts");
    openapiFields.add("HitByPitch");
    openapiFields.add("Hits");
    openapiFields.add("HomeRuns");
    openapiFields.add("InningsPitchedDecimal");
    openapiFields.add("InningsPitchedFull");
    openapiFields.add("InningsPitchedOuts");
    openapiFields.add("IntentionalWalks");
    openapiFields.add("IsolatedPower");
    openapiFields.add("LeftOnBase");
    openapiFields.add("LineOuts");
    openapiFields.add("Losses");
    openapiFields.add("Name");
    openapiFields.add("OnBasePercentage");
    openapiFields.add("OnBasePlusSlugging");
    openapiFields.add("Outs");
    openapiFields.add("PitchesSeen");
    openapiFields.add("PitchesThrown");
    openapiFields.add("PitchesThrownStrikes");
    openapiFields.add("PitchingBallsInPlay");
    openapiFields.add("PitchingBattingAverageAgainst");
    openapiFields.add("PitchingBattingAverageOnBallsInPlay");
    openapiFields.add("PitchingBlownSaves");
    openapiFields.add("PitchingCatchersInterference");
    openapiFields.add("PitchingCompleteGames");
    openapiFields.add("PitchingDoublePlays");
    openapiFields.add("PitchingDoubles");
    openapiFields.add("PitchingEarnedRuns");
    openapiFields.add("PitchingFlyOuts");
    openapiFields.add("PitchingGrandSlams");
    openapiFields.add("PitchingGroundIntoDoublePlay");
    openapiFields.add("PitchingGroundOuts");
    openapiFields.add("PitchingHitByPitch");
    openapiFields.add("PitchingHits");
    openapiFields.add("PitchingHolds");
    openapiFields.add("PitchingHomeRuns");
    openapiFields.add("PitchingInningStarted");
    openapiFields.add("PitchingIntentionalWalks");
    openapiFields.add("PitchingLineOuts");
    openapiFields.add("PitchingNoHitters");
    openapiFields.add("PitchingOnBasePercentage");
    openapiFields.add("PitchingOnBasePlusSlugging");
    openapiFields.add("PitchingPerfectGames");
    openapiFields.add("PitchingPlateAppearances");
    openapiFields.add("PitchingPopOuts");
    openapiFields.add("PitchingQualityStarts");
    openapiFields.add("PitchingReachedOnError");
    openapiFields.add("PitchingRuns");
    openapiFields.add("PitchingSacrificeFlies");
    openapiFields.add("PitchingSacrifices");
    openapiFields.add("PitchingShutOuts");
    openapiFields.add("PitchingSingles");
    openapiFields.add("PitchingSluggingPercentage");
    openapiFields.add("PitchingStrikeouts");
    openapiFields.add("PitchingStrikeoutsPerNineInnings");
    openapiFields.add("PitchingTotalBases");
    openapiFields.add("PitchingTriples");
    openapiFields.add("PitchingWalks");
    openapiFields.add("PitchingWalksPerNineInnings");
    openapiFields.add("PitchingWeightedOnBasePercentage");
    openapiFields.add("PlateAppearances");
    openapiFields.add("PlayerID");
    openapiFields.add("PopOuts");
    openapiFields.add("Position");
    openapiFields.add("PositionCategory");
    openapiFields.add("ReachedOnError");
    openapiFields.add("Runs");
    openapiFields.add("RunsBattedIn");
    openapiFields.add("SacrificeFlies");
    openapiFields.add("Sacrifices");
    openapiFields.add("Saves");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Singles");
    openapiFields.add("SluggingPercentage");
    openapiFields.add("Started");
    openapiFields.add("StatID");
    openapiFields.add("StolenBases");
    openapiFields.add("Strikeouts");
    openapiFields.add("SubstituteBattingOrder");
    openapiFields.add("SubstituteBattingOrderSequence");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("TotalBases");
    openapiFields.add("TotalOutsPitched");
    openapiFields.add("Triples");
    openapiFields.add("Updated");
    openapiFields.add("Walks");
    openapiFields.add("WalksHitsPerInningsPitched");
    openapiFields.add("WeightedOnBasePercentage");
    openapiFields.add("Wins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerSeason
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerSeason.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerSeason is not found in the empty JSON string", PlayerSeason.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerSeason.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerSeason` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("PositionCategory") != null && !jsonObj.get("PositionCategory").isJsonNull()) && !jsonObj.get("PositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionCategory").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerSeason.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerSeason' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerSeason> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerSeason.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerSeason>() {
           @Override
           public void write(JsonWriter out, PlayerSeason value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerSeason read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerSeason given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerSeason
   * @throws IOException if the JSON string is invalid with respect to PlayerSeason
   */
  public static PlayerSeason fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerSeason.class);
  }

  /**
   * Convert an instance of PlayerSeason to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

