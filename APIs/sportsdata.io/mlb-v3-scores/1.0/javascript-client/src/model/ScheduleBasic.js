/**
 * MLB v3 Scores
 * MLB scores API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Series from './Series';

/**
 * The ScheduleBasic model module.
 * @module model/ScheduleBasic
 * @version 1.0
 */
class ScheduleBasic {
    /**
     * Constructs a new <code>ScheduleBasic</code>.
     * @alias module:model/ScheduleBasic
     */
    constructor() { 
        
        ScheduleBasic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScheduleBasic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleBasic} obj Optional instance to populate.
     * @return {module:model/ScheduleBasic} The populated <code>ScheduleBasic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleBasic();

            if (data.hasOwnProperty('AwayTeam')) {
                obj['AwayTeam'] = ApiClient.convertToType(data['AwayTeam'], 'String');
            }
            if (data.hasOwnProperty('AwayTeamID')) {
                obj['AwayTeamID'] = ApiClient.convertToType(data['AwayTeamID'], 'Number');
            }
            if (data.hasOwnProperty('DateTime')) {
                obj['DateTime'] = ApiClient.convertToType(data['DateTime'], 'String');
            }
            if (data.hasOwnProperty('DateTimeUTC')) {
                obj['DateTimeUTC'] = ApiClient.convertToType(data['DateTimeUTC'], 'String');
            }
            if (data.hasOwnProperty('Day')) {
                obj['Day'] = ApiClient.convertToType(data['Day'], 'String');
            }
            if (data.hasOwnProperty('GameEndDateTime')) {
                obj['GameEndDateTime'] = ApiClient.convertToType(data['GameEndDateTime'], 'String');
            }
            if (data.hasOwnProperty('GameID')) {
                obj['GameID'] = ApiClient.convertToType(data['GameID'], 'Number');
            }
            if (data.hasOwnProperty('HomeTeam')) {
                obj['HomeTeam'] = ApiClient.convertToType(data['HomeTeam'], 'String');
            }
            if (data.hasOwnProperty('HomeTeamID')) {
                obj['HomeTeamID'] = ApiClient.convertToType(data['HomeTeamID'], 'Number');
            }
            if (data.hasOwnProperty('IsClosed')) {
                obj['IsClosed'] = ApiClient.convertToType(data['IsClosed'], 'Boolean');
            }
            if (data.hasOwnProperty('RescheduledFromGameID')) {
                obj['RescheduledFromGameID'] = ApiClient.convertToType(data['RescheduledFromGameID'], 'Number');
            }
            if (data.hasOwnProperty('RescheduledGameID')) {
                obj['RescheduledGameID'] = ApiClient.convertToType(data['RescheduledGameID'], 'Number');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('SeasonType')) {
                obj['SeasonType'] = ApiClient.convertToType(data['SeasonType'], 'Number');
            }
            if (data.hasOwnProperty('SeriesInfo')) {
                obj['SeriesInfo'] = Series.constructFromObject(data['SeriesInfo']);
            }
            if (data.hasOwnProperty('StadiumID')) {
                obj['StadiumID'] = ApiClient.convertToType(data['StadiumID'], 'Number');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduleBasic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduleBasic</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AwayTeam'] && !(typeof data['AwayTeam'] === 'string' || data['AwayTeam'] instanceof String)) {
            throw new Error("Expected the field `AwayTeam` to be a primitive type in the JSON string but got " + data['AwayTeam']);
        }
        // ensure the json data is a string
        if (data['DateTime'] && !(typeof data['DateTime'] === 'string' || data['DateTime'] instanceof String)) {
            throw new Error("Expected the field `DateTime` to be a primitive type in the JSON string but got " + data['DateTime']);
        }
        // ensure the json data is a string
        if (data['DateTimeUTC'] && !(typeof data['DateTimeUTC'] === 'string' || data['DateTimeUTC'] instanceof String)) {
            throw new Error("Expected the field `DateTimeUTC` to be a primitive type in the JSON string but got " + data['DateTimeUTC']);
        }
        // ensure the json data is a string
        if (data['Day'] && !(typeof data['Day'] === 'string' || data['Day'] instanceof String)) {
            throw new Error("Expected the field `Day` to be a primitive type in the JSON string but got " + data['Day']);
        }
        // ensure the json data is a string
        if (data['GameEndDateTime'] && !(typeof data['GameEndDateTime'] === 'string' || data['GameEndDateTime'] instanceof String)) {
            throw new Error("Expected the field `GameEndDateTime` to be a primitive type in the JSON string but got " + data['GameEndDateTime']);
        }
        // ensure the json data is a string
        if (data['HomeTeam'] && !(typeof data['HomeTeam'] === 'string' || data['HomeTeam'] instanceof String)) {
            throw new Error("Expected the field `HomeTeam` to be a primitive type in the JSON string but got " + data['HomeTeam']);
        }
        // validate the optional field `SeriesInfo`
        if (data['SeriesInfo']) { // data not null
          Series.validateJSON(data['SeriesInfo']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }

        return true;
    }


}



/**
 * @member {String} AwayTeam
 */
ScheduleBasic.prototype['AwayTeam'] = undefined;

/**
 * @member {Number} AwayTeamID
 */
ScheduleBasic.prototype['AwayTeamID'] = undefined;

/**
 * @member {String} DateTime
 */
ScheduleBasic.prototype['DateTime'] = undefined;

/**
 * @member {String} DateTimeUTC
 */
ScheduleBasic.prototype['DateTimeUTC'] = undefined;

/**
 * @member {String} Day
 */
ScheduleBasic.prototype['Day'] = undefined;

/**
 * @member {String} GameEndDateTime
 */
ScheduleBasic.prototype['GameEndDateTime'] = undefined;

/**
 * @member {Number} GameID
 */
ScheduleBasic.prototype['GameID'] = undefined;

/**
 * @member {String} HomeTeam
 */
ScheduleBasic.prototype['HomeTeam'] = undefined;

/**
 * @member {Number} HomeTeamID
 */
ScheduleBasic.prototype['HomeTeamID'] = undefined;

/**
 * @member {Boolean} IsClosed
 */
ScheduleBasic.prototype['IsClosed'] = undefined;

/**
 * @member {Number} RescheduledFromGameID
 */
ScheduleBasic.prototype['RescheduledFromGameID'] = undefined;

/**
 * @member {Number} RescheduledGameID
 */
ScheduleBasic.prototype['RescheduledGameID'] = undefined;

/**
 * @member {Number} Season
 */
ScheduleBasic.prototype['Season'] = undefined;

/**
 * @member {Number} SeasonType
 */
ScheduleBasic.prototype['SeasonType'] = undefined;

/**
 * @member {module:model/Series} SeriesInfo
 */
ScheduleBasic.prototype['SeriesInfo'] = undefined;

/**
 * @member {Number} StadiumID
 */
ScheduleBasic.prototype['StadiumID'] = undefined;

/**
 * @member {String} Status
 */
ScheduleBasic.prototype['Status'] = undefined;

/**
 * @member {String} Updated
 */
ScheduleBasic.prototype['Updated'] = undefined;






export default ScheduleBasic;

