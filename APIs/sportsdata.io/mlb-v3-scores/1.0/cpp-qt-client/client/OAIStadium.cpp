/**
 * MLB v3 Scores
 * MLB scores API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStadium.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStadium::OAIStadium(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStadium::OAIStadium() {
    this->initializeModel();
}

OAIStadium::~OAIStadium() {}

void OAIStadium::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_center_field_isSet = false;
    m_center_field_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_geo_lat_isSet = false;
    m_geo_lat_isValid = false;

    m_geo_long_isSet = false;
    m_geo_long_isValid = false;

    m_home_plate_direction_isSet = false;
    m_home_plate_direction_isValid = false;

    m_left_center_field_isSet = false;
    m_left_center_field_isValid = false;

    m_left_field_isSet = false;
    m_left_field_isValid = false;

    m_mid_left_center_field_isSet = false;
    m_mid_left_center_field_isValid = false;

    m_mid_left_field_isSet = false;
    m_mid_left_field_isValid = false;

    m_mid_right_center_field_isSet = false;
    m_mid_right_center_field_isValid = false;

    m_mid_right_field_isSet = false;
    m_mid_right_field_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_right_center_field_isSet = false;
    m_right_center_field_isValid = false;

    m_right_field_isSet = false;
    m_right_field_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_surface_isSet = false;
    m_surface_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStadium::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStadium::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("Altitude")]);
    m_altitude_isSet = !json[QString("Altitude")].isNull() && m_altitude_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("Capacity")]);
    m_capacity_isSet = !json[QString("Capacity")].isNull() && m_capacity_isValid;

    m_center_field_isValid = ::OpenAPI::fromJsonValue(m_center_field, json[QString("CenterField")]);
    m_center_field_isSet = !json[QString("CenterField")].isNull() && m_center_field_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_geo_lat_isValid = ::OpenAPI::fromJsonValue(m_geo_lat, json[QString("GeoLat")]);
    m_geo_lat_isSet = !json[QString("GeoLat")].isNull() && m_geo_lat_isValid;

    m_geo_long_isValid = ::OpenAPI::fromJsonValue(m_geo_long, json[QString("GeoLong")]);
    m_geo_long_isSet = !json[QString("GeoLong")].isNull() && m_geo_long_isValid;

    m_home_plate_direction_isValid = ::OpenAPI::fromJsonValue(m_home_plate_direction, json[QString("HomePlateDirection")]);
    m_home_plate_direction_isSet = !json[QString("HomePlateDirection")].isNull() && m_home_plate_direction_isValid;

    m_left_center_field_isValid = ::OpenAPI::fromJsonValue(m_left_center_field, json[QString("LeftCenterField")]);
    m_left_center_field_isSet = !json[QString("LeftCenterField")].isNull() && m_left_center_field_isValid;

    m_left_field_isValid = ::OpenAPI::fromJsonValue(m_left_field, json[QString("LeftField")]);
    m_left_field_isSet = !json[QString("LeftField")].isNull() && m_left_field_isValid;

    m_mid_left_center_field_isValid = ::OpenAPI::fromJsonValue(m_mid_left_center_field, json[QString("MidLeftCenterField")]);
    m_mid_left_center_field_isSet = !json[QString("MidLeftCenterField")].isNull() && m_mid_left_center_field_isValid;

    m_mid_left_field_isValid = ::OpenAPI::fromJsonValue(m_mid_left_field, json[QString("MidLeftField")]);
    m_mid_left_field_isSet = !json[QString("MidLeftField")].isNull() && m_mid_left_field_isValid;

    m_mid_right_center_field_isValid = ::OpenAPI::fromJsonValue(m_mid_right_center_field, json[QString("MidRightCenterField")]);
    m_mid_right_center_field_isSet = !json[QString("MidRightCenterField")].isNull() && m_mid_right_center_field_isValid;

    m_mid_right_field_isValid = ::OpenAPI::fromJsonValue(m_mid_right_field, json[QString("MidRightField")]);
    m_mid_right_field_isSet = !json[QString("MidRightField")].isNull() && m_mid_right_field_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_right_center_field_isValid = ::OpenAPI::fromJsonValue(m_right_center_field, json[QString("RightCenterField")]);
    m_right_center_field_isSet = !json[QString("RightCenterField")].isNull() && m_right_center_field_isValid;

    m_right_field_isValid = ::OpenAPI::fromJsonValue(m_right_field, json[QString("RightField")]);
    m_right_field_isSet = !json[QString("RightField")].isNull() && m_right_field_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_surface_isValid = ::OpenAPI::fromJsonValue(m_surface, json[QString("Surface")]);
    m_surface_isSet = !json[QString("Surface")].isNull() && m_surface_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIStadium::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStadium::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_altitude_isSet) {
        obj.insert(QString("Altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_capacity_isSet) {
        obj.insert(QString("Capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_center_field_isSet) {
        obj.insert(QString("CenterField"), ::OpenAPI::toJsonValue(m_center_field));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_geo_lat_isSet) {
        obj.insert(QString("GeoLat"), ::OpenAPI::toJsonValue(m_geo_lat));
    }
    if (m_geo_long_isSet) {
        obj.insert(QString("GeoLong"), ::OpenAPI::toJsonValue(m_geo_long));
    }
    if (m_home_plate_direction_isSet) {
        obj.insert(QString("HomePlateDirection"), ::OpenAPI::toJsonValue(m_home_plate_direction));
    }
    if (m_left_center_field_isSet) {
        obj.insert(QString("LeftCenterField"), ::OpenAPI::toJsonValue(m_left_center_field));
    }
    if (m_left_field_isSet) {
        obj.insert(QString("LeftField"), ::OpenAPI::toJsonValue(m_left_field));
    }
    if (m_mid_left_center_field_isSet) {
        obj.insert(QString("MidLeftCenterField"), ::OpenAPI::toJsonValue(m_mid_left_center_field));
    }
    if (m_mid_left_field_isSet) {
        obj.insert(QString("MidLeftField"), ::OpenAPI::toJsonValue(m_mid_left_field));
    }
    if (m_mid_right_center_field_isSet) {
        obj.insert(QString("MidRightCenterField"), ::OpenAPI::toJsonValue(m_mid_right_center_field));
    }
    if (m_mid_right_field_isSet) {
        obj.insert(QString("MidRightField"), ::OpenAPI::toJsonValue(m_mid_right_field));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_right_center_field_isSet) {
        obj.insert(QString("RightCenterField"), ::OpenAPI::toJsonValue(m_right_center_field));
    }
    if (m_right_field_isSet) {
        obj.insert(QString("RightField"), ::OpenAPI::toJsonValue(m_right_field));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_surface_isSet) {
        obj.insert(QString("Surface"), ::OpenAPI::toJsonValue(m_surface));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIStadium::isActive() const {
    return m_active;
}
void OAIStadium::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIStadium::is_active_Set() const{
    return m_active_isSet;
}

bool OAIStadium::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAIStadium::getAltitude() const {
    return m_altitude;
}
void OAIStadium::setAltitude(const qint32 &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAIStadium::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAIStadium::is_altitude_Valid() const{
    return m_altitude_isValid;
}

qint32 OAIStadium::getCapacity() const {
    return m_capacity;
}
void OAIStadium::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIStadium::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIStadium::is_capacity_Valid() const{
    return m_capacity_isValid;
}

qint32 OAIStadium::getCenterField() const {
    return m_center_field;
}
void OAIStadium::setCenterField(const qint32 &center_field) {
    m_center_field = center_field;
    m_center_field_isSet = true;
}

bool OAIStadium::is_center_field_Set() const{
    return m_center_field_isSet;
}

bool OAIStadium::is_center_field_Valid() const{
    return m_center_field_isValid;
}

QString OAIStadium::getCity() const {
    return m_city;
}
void OAIStadium::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIStadium::is_city_Set() const{
    return m_city_isSet;
}

bool OAIStadium::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIStadium::getCountry() const {
    return m_country;
}
void OAIStadium::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIStadium::is_country_Set() const{
    return m_country_isSet;
}

bool OAIStadium::is_country_Valid() const{
    return m_country_isValid;
}

double OAIStadium::getGeoLat() const {
    return m_geo_lat;
}
void OAIStadium::setGeoLat(const double &geo_lat) {
    m_geo_lat = geo_lat;
    m_geo_lat_isSet = true;
}

bool OAIStadium::is_geo_lat_Set() const{
    return m_geo_lat_isSet;
}

bool OAIStadium::is_geo_lat_Valid() const{
    return m_geo_lat_isValid;
}

double OAIStadium::getGeoLong() const {
    return m_geo_long;
}
void OAIStadium::setGeoLong(const double &geo_long) {
    m_geo_long = geo_long;
    m_geo_long_isSet = true;
}

bool OAIStadium::is_geo_long_Set() const{
    return m_geo_long_isSet;
}

bool OAIStadium::is_geo_long_Valid() const{
    return m_geo_long_isValid;
}

qint32 OAIStadium::getHomePlateDirection() const {
    return m_home_plate_direction;
}
void OAIStadium::setHomePlateDirection(const qint32 &home_plate_direction) {
    m_home_plate_direction = home_plate_direction;
    m_home_plate_direction_isSet = true;
}

bool OAIStadium::is_home_plate_direction_Set() const{
    return m_home_plate_direction_isSet;
}

bool OAIStadium::is_home_plate_direction_Valid() const{
    return m_home_plate_direction_isValid;
}

qint32 OAIStadium::getLeftCenterField() const {
    return m_left_center_field;
}
void OAIStadium::setLeftCenterField(const qint32 &left_center_field) {
    m_left_center_field = left_center_field;
    m_left_center_field_isSet = true;
}

bool OAIStadium::is_left_center_field_Set() const{
    return m_left_center_field_isSet;
}

bool OAIStadium::is_left_center_field_Valid() const{
    return m_left_center_field_isValid;
}

qint32 OAIStadium::getLeftField() const {
    return m_left_field;
}
void OAIStadium::setLeftField(const qint32 &left_field) {
    m_left_field = left_field;
    m_left_field_isSet = true;
}

bool OAIStadium::is_left_field_Set() const{
    return m_left_field_isSet;
}

bool OAIStadium::is_left_field_Valid() const{
    return m_left_field_isValid;
}

qint32 OAIStadium::getMidLeftCenterField() const {
    return m_mid_left_center_field;
}
void OAIStadium::setMidLeftCenterField(const qint32 &mid_left_center_field) {
    m_mid_left_center_field = mid_left_center_field;
    m_mid_left_center_field_isSet = true;
}

bool OAIStadium::is_mid_left_center_field_Set() const{
    return m_mid_left_center_field_isSet;
}

bool OAIStadium::is_mid_left_center_field_Valid() const{
    return m_mid_left_center_field_isValid;
}

qint32 OAIStadium::getMidLeftField() const {
    return m_mid_left_field;
}
void OAIStadium::setMidLeftField(const qint32 &mid_left_field) {
    m_mid_left_field = mid_left_field;
    m_mid_left_field_isSet = true;
}

bool OAIStadium::is_mid_left_field_Set() const{
    return m_mid_left_field_isSet;
}

bool OAIStadium::is_mid_left_field_Valid() const{
    return m_mid_left_field_isValid;
}

qint32 OAIStadium::getMidRightCenterField() const {
    return m_mid_right_center_field;
}
void OAIStadium::setMidRightCenterField(const qint32 &mid_right_center_field) {
    m_mid_right_center_field = mid_right_center_field;
    m_mid_right_center_field_isSet = true;
}

bool OAIStadium::is_mid_right_center_field_Set() const{
    return m_mid_right_center_field_isSet;
}

bool OAIStadium::is_mid_right_center_field_Valid() const{
    return m_mid_right_center_field_isValid;
}

qint32 OAIStadium::getMidRightField() const {
    return m_mid_right_field;
}
void OAIStadium::setMidRightField(const qint32 &mid_right_field) {
    m_mid_right_field = mid_right_field;
    m_mid_right_field_isSet = true;
}

bool OAIStadium::is_mid_right_field_Set() const{
    return m_mid_right_field_isSet;
}

bool OAIStadium::is_mid_right_field_Valid() const{
    return m_mid_right_field_isValid;
}

QString OAIStadium::getName() const {
    return m_name;
}
void OAIStadium::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStadium::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStadium::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStadium::getRightCenterField() const {
    return m_right_center_field;
}
void OAIStadium::setRightCenterField(const qint32 &right_center_field) {
    m_right_center_field = right_center_field;
    m_right_center_field_isSet = true;
}

bool OAIStadium::is_right_center_field_Set() const{
    return m_right_center_field_isSet;
}

bool OAIStadium::is_right_center_field_Valid() const{
    return m_right_center_field_isValid;
}

qint32 OAIStadium::getRightField() const {
    return m_right_field;
}
void OAIStadium::setRightField(const qint32 &right_field) {
    m_right_field = right_field;
    m_right_field_isSet = true;
}

bool OAIStadium::is_right_field_Set() const{
    return m_right_field_isSet;
}

bool OAIStadium::is_right_field_Valid() const{
    return m_right_field_isValid;
}

qint32 OAIStadium::getStadiumId() const {
    return m_stadium_id;
}
void OAIStadium::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAIStadium::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAIStadium::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

QString OAIStadium::getState() const {
    return m_state;
}
void OAIStadium::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStadium::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStadium::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIStadium::getSurface() const {
    return m_surface;
}
void OAIStadium::setSurface(const QString &surface) {
    m_surface = surface;
    m_surface_isSet = true;
}

bool OAIStadium::is_surface_Set() const{
    return m_surface_isSet;
}

bool OAIStadium::is_surface_Valid() const{
    return m_surface_isValid;
}

QString OAIStadium::getType() const {
    return m_type;
}
void OAIStadium::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStadium::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStadium::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStadium::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_center_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_plate_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_center_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_left_center_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_left_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_right_center_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_right_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_center_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStadium::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
