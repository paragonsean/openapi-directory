/**
 * MLB v3 Scores
 * MLB scores API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGame::OAIGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGame::OAIGame() {
    this->initializeModel();
}

OAIGame::~OAIGame() {}

void OAIGame::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_away_rotation_number_isSet = false;
    m_away_rotation_number_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_away_team_errors_isSet = false;
    m_away_team_errors_isValid = false;

    m_away_team_hits_isSet = false;
    m_away_team_hits_isValid = false;

    m_away_team_id_isSet = false;
    m_away_team_id_isValid = false;

    m_away_team_money_line_isSet = false;
    m_away_team_money_line_isValid = false;

    m_away_team_probable_pitcher_id_isSet = false;
    m_away_team_probable_pitcher_id_isValid = false;

    m_away_team_runs_isSet = false;
    m_away_team_runs_isValid = false;

    m_away_team_starting_pitcher_isSet = false;
    m_away_team_starting_pitcher_isValid = false;

    m_away_team_starting_pitcher_id_isSet = false;
    m_away_team_starting_pitcher_id_isValid = false;

    m_balls_isSet = false;
    m_balls_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_current_hitter_isSet = false;
    m_current_hitter_isValid = false;

    m_current_hitter_id_isSet = false;
    m_current_hitter_id_isValid = false;

    m_current_hitting_team_id_isSet = false;
    m_current_hitting_team_id_isValid = false;

    m_current_pitcher_isSet = false;
    m_current_pitcher_isValid = false;

    m_current_pitcher_id_isSet = false;
    m_current_pitcher_id_isValid = false;

    m_current_pitching_team_id_isSet = false;
    m_current_pitching_team_id_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_date_time_utc_isSet = false;
    m_date_time_utc_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_due_up_hitter_id1_isSet = false;
    m_due_up_hitter_id1_isValid = false;

    m_due_up_hitter_id2_isSet = false;
    m_due_up_hitter_id2_isValid = false;

    m_due_up_hitter_id3_isSet = false;
    m_due_up_hitter_id3_isValid = false;

    m_forecast_description_isSet = false;
    m_forecast_description_isValid = false;

    m_forecast_temp_high_isSet = false;
    m_forecast_temp_high_isValid = false;

    m_forecast_temp_low_isSet = false;
    m_forecast_temp_low_isValid = false;

    m_forecast_wind_chill_isSet = false;
    m_forecast_wind_chill_isValid = false;

    m_forecast_wind_direction_isSet = false;
    m_forecast_wind_direction_isValid = false;

    m_forecast_wind_speed_isSet = false;
    m_forecast_wind_speed_isValid = false;

    m_game_end_date_time_isSet = false;
    m_game_end_date_time_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_global_away_team_id_isSet = false;
    m_global_away_team_id_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_home_team_id_isSet = false;
    m_global_home_team_id_isValid = false;

    m_home_rotation_number_isSet = false;
    m_home_rotation_number_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_home_team_errors_isSet = false;
    m_home_team_errors_isValid = false;

    m_home_team_hits_isSet = false;
    m_home_team_hits_isValid = false;

    m_home_team_id_isSet = false;
    m_home_team_id_isValid = false;

    m_home_team_money_line_isSet = false;
    m_home_team_money_line_isValid = false;

    m_home_team_probable_pitcher_id_isSet = false;
    m_home_team_probable_pitcher_id_isValid = false;

    m_home_team_runs_isSet = false;
    m_home_team_runs_isValid = false;

    m_home_team_starting_pitcher_isSet = false;
    m_home_team_starting_pitcher_isValid = false;

    m_home_team_starting_pitcher_id_isSet = false;
    m_home_team_starting_pitcher_id_isValid = false;

    m_inning_isSet = false;
    m_inning_isValid = false;

    m_inning_description_isSet = false;
    m_inning_description_isValid = false;

    m_inning_half_isSet = false;
    m_inning_half_isValid = false;

    m_innings_isSet = false;
    m_innings_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_last_play_isSet = false;
    m_last_play_isValid = false;

    m_losing_pitcher_isSet = false;
    m_losing_pitcher_isValid = false;

    m_losing_pitcher_id_isSet = false;
    m_losing_pitcher_id_isValid = false;

    m_neutral_venue_isSet = false;
    m_neutral_venue_isValid = false;

    m_outs_isSet = false;
    m_outs_isValid = false;

    m_over_payout_isSet = false;
    m_over_payout_isValid = false;

    m_over_under_isSet = false;
    m_over_under_isValid = false;

    m_point_spread_isSet = false;
    m_point_spread_isValid = false;

    m_point_spread_away_team_money_line_isSet = false;
    m_point_spread_away_team_money_line_isValid = false;

    m_point_spread_home_team_money_line_isSet = false;
    m_point_spread_home_team_money_line_isValid = false;

    m_rescheduled_from_game_id_isSet = false;
    m_rescheduled_from_game_id_isValid = false;

    m_rescheduled_game_id_isSet = false;
    m_rescheduled_game_id_isValid = false;

    m_runner_on_first_isSet = false;
    m_runner_on_first_isValid = false;

    m_runner_on_second_isSet = false;
    m_runner_on_second_isValid = false;

    m_runner_on_third_isSet = false;
    m_runner_on_third_isValid = false;

    m_saving_pitcher_isSet = false;
    m_saving_pitcher_isValid = false;

    m_saving_pitcher_id_isSet = false;
    m_saving_pitcher_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_series_info_isSet = false;
    m_series_info_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_strikes_isSet = false;
    m_strikes_isValid = false;

    m_under_payout_isSet = false;
    m_under_payout_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_winning_pitcher_isSet = false;
    m_winning_pitcher_isValid = false;

    m_winning_pitcher_id_isSet = false;
    m_winning_pitcher_id_isValid = false;
}

void OAIGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGame::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("Attendance")]);
    m_attendance_isSet = !json[QString("Attendance")].isNull() && m_attendance_isValid;

    m_away_rotation_number_isValid = ::OpenAPI::fromJsonValue(m_away_rotation_number, json[QString("AwayRotationNumber")]);
    m_away_rotation_number_isSet = !json[QString("AwayRotationNumber")].isNull() && m_away_rotation_number_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("AwayTeam")]);
    m_away_team_isSet = !json[QString("AwayTeam")].isNull() && m_away_team_isValid;

    m_away_team_errors_isValid = ::OpenAPI::fromJsonValue(m_away_team_errors, json[QString("AwayTeamErrors")]);
    m_away_team_errors_isSet = !json[QString("AwayTeamErrors")].isNull() && m_away_team_errors_isValid;

    m_away_team_hits_isValid = ::OpenAPI::fromJsonValue(m_away_team_hits, json[QString("AwayTeamHits")]);
    m_away_team_hits_isSet = !json[QString("AwayTeamHits")].isNull() && m_away_team_hits_isValid;

    m_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_away_team_id, json[QString("AwayTeamID")]);
    m_away_team_id_isSet = !json[QString("AwayTeamID")].isNull() && m_away_team_id_isValid;

    m_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_away_team_money_line, json[QString("AwayTeamMoneyLine")]);
    m_away_team_money_line_isSet = !json[QString("AwayTeamMoneyLine")].isNull() && m_away_team_money_line_isValid;

    m_away_team_probable_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_away_team_probable_pitcher_id, json[QString("AwayTeamProbablePitcherID")]);
    m_away_team_probable_pitcher_id_isSet = !json[QString("AwayTeamProbablePitcherID")].isNull() && m_away_team_probable_pitcher_id_isValid;

    m_away_team_runs_isValid = ::OpenAPI::fromJsonValue(m_away_team_runs, json[QString("AwayTeamRuns")]);
    m_away_team_runs_isSet = !json[QString("AwayTeamRuns")].isNull() && m_away_team_runs_isValid;

    m_away_team_starting_pitcher_isValid = ::OpenAPI::fromJsonValue(m_away_team_starting_pitcher, json[QString("AwayTeamStartingPitcher")]);
    m_away_team_starting_pitcher_isSet = !json[QString("AwayTeamStartingPitcher")].isNull() && m_away_team_starting_pitcher_isValid;

    m_away_team_starting_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_away_team_starting_pitcher_id, json[QString("AwayTeamStartingPitcherID")]);
    m_away_team_starting_pitcher_id_isSet = !json[QString("AwayTeamStartingPitcherID")].isNull() && m_away_team_starting_pitcher_id_isValid;

    m_balls_isValid = ::OpenAPI::fromJsonValue(m_balls, json[QString("Balls")]);
    m_balls_isSet = !json[QString("Balls")].isNull() && m_balls_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_current_hitter_isValid = ::OpenAPI::fromJsonValue(m_current_hitter, json[QString("CurrentHitter")]);
    m_current_hitter_isSet = !json[QString("CurrentHitter")].isNull() && m_current_hitter_isValid;

    m_current_hitter_id_isValid = ::OpenAPI::fromJsonValue(m_current_hitter_id, json[QString("CurrentHitterID")]);
    m_current_hitter_id_isSet = !json[QString("CurrentHitterID")].isNull() && m_current_hitter_id_isValid;

    m_current_hitting_team_id_isValid = ::OpenAPI::fromJsonValue(m_current_hitting_team_id, json[QString("CurrentHittingTeamID")]);
    m_current_hitting_team_id_isSet = !json[QString("CurrentHittingTeamID")].isNull() && m_current_hitting_team_id_isValid;

    m_current_pitcher_isValid = ::OpenAPI::fromJsonValue(m_current_pitcher, json[QString("CurrentPitcher")]);
    m_current_pitcher_isSet = !json[QString("CurrentPitcher")].isNull() && m_current_pitcher_isValid;

    m_current_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_current_pitcher_id, json[QString("CurrentPitcherID")]);
    m_current_pitcher_id_isSet = !json[QString("CurrentPitcherID")].isNull() && m_current_pitcher_id_isValid;

    m_current_pitching_team_id_isValid = ::OpenAPI::fromJsonValue(m_current_pitching_team_id, json[QString("CurrentPitchingTeamID")]);
    m_current_pitching_team_id_isSet = !json[QString("CurrentPitchingTeamID")].isNull() && m_current_pitching_team_id_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_date_time_utc, json[QString("DateTimeUTC")]);
    m_date_time_utc_isSet = !json[QString("DateTimeUTC")].isNull() && m_date_time_utc_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_due_up_hitter_id1_isValid = ::OpenAPI::fromJsonValue(m_due_up_hitter_id1, json[QString("DueUpHitterID1")]);
    m_due_up_hitter_id1_isSet = !json[QString("DueUpHitterID1")].isNull() && m_due_up_hitter_id1_isValid;

    m_due_up_hitter_id2_isValid = ::OpenAPI::fromJsonValue(m_due_up_hitter_id2, json[QString("DueUpHitterID2")]);
    m_due_up_hitter_id2_isSet = !json[QString("DueUpHitterID2")].isNull() && m_due_up_hitter_id2_isValid;

    m_due_up_hitter_id3_isValid = ::OpenAPI::fromJsonValue(m_due_up_hitter_id3, json[QString("DueUpHitterID3")]);
    m_due_up_hitter_id3_isSet = !json[QString("DueUpHitterID3")].isNull() && m_due_up_hitter_id3_isValid;

    m_forecast_description_isValid = ::OpenAPI::fromJsonValue(m_forecast_description, json[QString("ForecastDescription")]);
    m_forecast_description_isSet = !json[QString("ForecastDescription")].isNull() && m_forecast_description_isValid;

    m_forecast_temp_high_isValid = ::OpenAPI::fromJsonValue(m_forecast_temp_high, json[QString("ForecastTempHigh")]);
    m_forecast_temp_high_isSet = !json[QString("ForecastTempHigh")].isNull() && m_forecast_temp_high_isValid;

    m_forecast_temp_low_isValid = ::OpenAPI::fromJsonValue(m_forecast_temp_low, json[QString("ForecastTempLow")]);
    m_forecast_temp_low_isSet = !json[QString("ForecastTempLow")].isNull() && m_forecast_temp_low_isValid;

    m_forecast_wind_chill_isValid = ::OpenAPI::fromJsonValue(m_forecast_wind_chill, json[QString("ForecastWindChill")]);
    m_forecast_wind_chill_isSet = !json[QString("ForecastWindChill")].isNull() && m_forecast_wind_chill_isValid;

    m_forecast_wind_direction_isValid = ::OpenAPI::fromJsonValue(m_forecast_wind_direction, json[QString("ForecastWindDirection")]);
    m_forecast_wind_direction_isSet = !json[QString("ForecastWindDirection")].isNull() && m_forecast_wind_direction_isValid;

    m_forecast_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_forecast_wind_speed, json[QString("ForecastWindSpeed")]);
    m_forecast_wind_speed_isSet = !json[QString("ForecastWindSpeed")].isNull() && m_forecast_wind_speed_isValid;

    m_game_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_game_end_date_time, json[QString("GameEndDateTime")]);
    m_game_end_date_time_isSet = !json[QString("GameEndDateTime")].isNull() && m_game_end_date_time_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_global_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_away_team_id, json[QString("GlobalAwayTeamID")]);
    m_global_away_team_id_isSet = !json[QString("GlobalAwayTeamID")].isNull() && m_global_away_team_id_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_home_team_id, json[QString("GlobalHomeTeamID")]);
    m_global_home_team_id_isSet = !json[QString("GlobalHomeTeamID")].isNull() && m_global_home_team_id_isValid;

    m_home_rotation_number_isValid = ::OpenAPI::fromJsonValue(m_home_rotation_number, json[QString("HomeRotationNumber")]);
    m_home_rotation_number_isSet = !json[QString("HomeRotationNumber")].isNull() && m_home_rotation_number_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("HomeTeam")]);
    m_home_team_isSet = !json[QString("HomeTeam")].isNull() && m_home_team_isValid;

    m_home_team_errors_isValid = ::OpenAPI::fromJsonValue(m_home_team_errors, json[QString("HomeTeamErrors")]);
    m_home_team_errors_isSet = !json[QString("HomeTeamErrors")].isNull() && m_home_team_errors_isValid;

    m_home_team_hits_isValid = ::OpenAPI::fromJsonValue(m_home_team_hits, json[QString("HomeTeamHits")]);
    m_home_team_hits_isSet = !json[QString("HomeTeamHits")].isNull() && m_home_team_hits_isValid;

    m_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_home_team_id, json[QString("HomeTeamID")]);
    m_home_team_id_isSet = !json[QString("HomeTeamID")].isNull() && m_home_team_id_isValid;

    m_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_home_team_money_line, json[QString("HomeTeamMoneyLine")]);
    m_home_team_money_line_isSet = !json[QString("HomeTeamMoneyLine")].isNull() && m_home_team_money_line_isValid;

    m_home_team_probable_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_home_team_probable_pitcher_id, json[QString("HomeTeamProbablePitcherID")]);
    m_home_team_probable_pitcher_id_isSet = !json[QString("HomeTeamProbablePitcherID")].isNull() && m_home_team_probable_pitcher_id_isValid;

    m_home_team_runs_isValid = ::OpenAPI::fromJsonValue(m_home_team_runs, json[QString("HomeTeamRuns")]);
    m_home_team_runs_isSet = !json[QString("HomeTeamRuns")].isNull() && m_home_team_runs_isValid;

    m_home_team_starting_pitcher_isValid = ::OpenAPI::fromJsonValue(m_home_team_starting_pitcher, json[QString("HomeTeamStartingPitcher")]);
    m_home_team_starting_pitcher_isSet = !json[QString("HomeTeamStartingPitcher")].isNull() && m_home_team_starting_pitcher_isValid;

    m_home_team_starting_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_home_team_starting_pitcher_id, json[QString("HomeTeamStartingPitcherID")]);
    m_home_team_starting_pitcher_id_isSet = !json[QString("HomeTeamStartingPitcherID")].isNull() && m_home_team_starting_pitcher_id_isValid;

    m_inning_isValid = ::OpenAPI::fromJsonValue(m_inning, json[QString("Inning")]);
    m_inning_isSet = !json[QString("Inning")].isNull() && m_inning_isValid;

    m_inning_description_isValid = ::OpenAPI::fromJsonValue(m_inning_description, json[QString("InningDescription")]);
    m_inning_description_isSet = !json[QString("InningDescription")].isNull() && m_inning_description_isValid;

    m_inning_half_isValid = ::OpenAPI::fromJsonValue(m_inning_half, json[QString("InningHalf")]);
    m_inning_half_isSet = !json[QString("InningHalf")].isNull() && m_inning_half_isValid;

    m_innings_isValid = ::OpenAPI::fromJsonValue(m_innings, json[QString("Innings")]);
    m_innings_isSet = !json[QString("Innings")].isNull() && m_innings_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("IsClosed")]);
    m_is_closed_isSet = !json[QString("IsClosed")].isNull() && m_is_closed_isValid;

    m_last_play_isValid = ::OpenAPI::fromJsonValue(m_last_play, json[QString("LastPlay")]);
    m_last_play_isSet = !json[QString("LastPlay")].isNull() && m_last_play_isValid;

    m_losing_pitcher_isValid = ::OpenAPI::fromJsonValue(m_losing_pitcher, json[QString("LosingPitcher")]);
    m_losing_pitcher_isSet = !json[QString("LosingPitcher")].isNull() && m_losing_pitcher_isValid;

    m_losing_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_losing_pitcher_id, json[QString("LosingPitcherID")]);
    m_losing_pitcher_id_isSet = !json[QString("LosingPitcherID")].isNull() && m_losing_pitcher_id_isValid;

    m_neutral_venue_isValid = ::OpenAPI::fromJsonValue(m_neutral_venue, json[QString("NeutralVenue")]);
    m_neutral_venue_isSet = !json[QString("NeutralVenue")].isNull() && m_neutral_venue_isValid;

    m_outs_isValid = ::OpenAPI::fromJsonValue(m_outs, json[QString("Outs")]);
    m_outs_isSet = !json[QString("Outs")].isNull() && m_outs_isValid;

    m_over_payout_isValid = ::OpenAPI::fromJsonValue(m_over_payout, json[QString("OverPayout")]);
    m_over_payout_isSet = !json[QString("OverPayout")].isNull() && m_over_payout_isValid;

    m_over_under_isValid = ::OpenAPI::fromJsonValue(m_over_under, json[QString("OverUnder")]);
    m_over_under_isSet = !json[QString("OverUnder")].isNull() && m_over_under_isValid;

    m_point_spread_isValid = ::OpenAPI::fromJsonValue(m_point_spread, json[QString("PointSpread")]);
    m_point_spread_isSet = !json[QString("PointSpread")].isNull() && m_point_spread_isValid;

    m_point_spread_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_point_spread_away_team_money_line, json[QString("PointSpreadAwayTeamMoneyLine")]);
    m_point_spread_away_team_money_line_isSet = !json[QString("PointSpreadAwayTeamMoneyLine")].isNull() && m_point_spread_away_team_money_line_isValid;

    m_point_spread_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_point_spread_home_team_money_line, json[QString("PointSpreadHomeTeamMoneyLine")]);
    m_point_spread_home_team_money_line_isSet = !json[QString("PointSpreadHomeTeamMoneyLine")].isNull() && m_point_spread_home_team_money_line_isValid;

    m_rescheduled_from_game_id_isValid = ::OpenAPI::fromJsonValue(m_rescheduled_from_game_id, json[QString("RescheduledFromGameID")]);
    m_rescheduled_from_game_id_isSet = !json[QString("RescheduledFromGameID")].isNull() && m_rescheduled_from_game_id_isValid;

    m_rescheduled_game_id_isValid = ::OpenAPI::fromJsonValue(m_rescheduled_game_id, json[QString("RescheduledGameID")]);
    m_rescheduled_game_id_isSet = !json[QString("RescheduledGameID")].isNull() && m_rescheduled_game_id_isValid;

    m_runner_on_first_isValid = ::OpenAPI::fromJsonValue(m_runner_on_first, json[QString("RunnerOnFirst")]);
    m_runner_on_first_isSet = !json[QString("RunnerOnFirst")].isNull() && m_runner_on_first_isValid;

    m_runner_on_second_isValid = ::OpenAPI::fromJsonValue(m_runner_on_second, json[QString("RunnerOnSecond")]);
    m_runner_on_second_isSet = !json[QString("RunnerOnSecond")].isNull() && m_runner_on_second_isValid;

    m_runner_on_third_isValid = ::OpenAPI::fromJsonValue(m_runner_on_third, json[QString("RunnerOnThird")]);
    m_runner_on_third_isSet = !json[QString("RunnerOnThird")].isNull() && m_runner_on_third_isValid;

    m_saving_pitcher_isValid = ::OpenAPI::fromJsonValue(m_saving_pitcher, json[QString("SavingPitcher")]);
    m_saving_pitcher_isSet = !json[QString("SavingPitcher")].isNull() && m_saving_pitcher_isValid;

    m_saving_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_saving_pitcher_id, json[QString("SavingPitcherID")]);
    m_saving_pitcher_id_isSet = !json[QString("SavingPitcherID")].isNull() && m_saving_pitcher_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_series_info_isValid = ::OpenAPI::fromJsonValue(m_series_info, json[QString("SeriesInfo")]);
    m_series_info_isSet = !json[QString("SeriesInfo")].isNull() && m_series_info_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_strikes_isValid = ::OpenAPI::fromJsonValue(m_strikes, json[QString("Strikes")]);
    m_strikes_isSet = !json[QString("Strikes")].isNull() && m_strikes_isValid;

    m_under_payout_isValid = ::OpenAPI::fromJsonValue(m_under_payout, json[QString("UnderPayout")]);
    m_under_payout_isSet = !json[QString("UnderPayout")].isNull() && m_under_payout_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_winning_pitcher_isValid = ::OpenAPI::fromJsonValue(m_winning_pitcher, json[QString("WinningPitcher")]);
    m_winning_pitcher_isSet = !json[QString("WinningPitcher")].isNull() && m_winning_pitcher_isValid;

    m_winning_pitcher_id_isValid = ::OpenAPI::fromJsonValue(m_winning_pitcher_id, json[QString("WinningPitcherID")]);
    m_winning_pitcher_id_isSet = !json[QString("WinningPitcherID")].isNull() && m_winning_pitcher_id_isValid;
}

QString OAIGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGame::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance_isSet) {
        obj.insert(QString("Attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_away_rotation_number_isSet) {
        obj.insert(QString("AwayRotationNumber"), ::OpenAPI::toJsonValue(m_away_rotation_number));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("AwayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_away_team_errors_isSet) {
        obj.insert(QString("AwayTeamErrors"), ::OpenAPI::toJsonValue(m_away_team_errors));
    }
    if (m_away_team_hits_isSet) {
        obj.insert(QString("AwayTeamHits"), ::OpenAPI::toJsonValue(m_away_team_hits));
    }
    if (m_away_team_id_isSet) {
        obj.insert(QString("AwayTeamID"), ::OpenAPI::toJsonValue(m_away_team_id));
    }
    if (m_away_team_money_line_isSet) {
        obj.insert(QString("AwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_away_team_money_line));
    }
    if (m_away_team_probable_pitcher_id_isSet) {
        obj.insert(QString("AwayTeamProbablePitcherID"), ::OpenAPI::toJsonValue(m_away_team_probable_pitcher_id));
    }
    if (m_away_team_runs_isSet) {
        obj.insert(QString("AwayTeamRuns"), ::OpenAPI::toJsonValue(m_away_team_runs));
    }
    if (m_away_team_starting_pitcher_isSet) {
        obj.insert(QString("AwayTeamStartingPitcher"), ::OpenAPI::toJsonValue(m_away_team_starting_pitcher));
    }
    if (m_away_team_starting_pitcher_id_isSet) {
        obj.insert(QString("AwayTeamStartingPitcherID"), ::OpenAPI::toJsonValue(m_away_team_starting_pitcher_id));
    }
    if (m_balls_isSet) {
        obj.insert(QString("Balls"), ::OpenAPI::toJsonValue(m_balls));
    }
    if (m_channel_isSet) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_current_hitter_isSet) {
        obj.insert(QString("CurrentHitter"), ::OpenAPI::toJsonValue(m_current_hitter));
    }
    if (m_current_hitter_id_isSet) {
        obj.insert(QString("CurrentHitterID"), ::OpenAPI::toJsonValue(m_current_hitter_id));
    }
    if (m_current_hitting_team_id_isSet) {
        obj.insert(QString("CurrentHittingTeamID"), ::OpenAPI::toJsonValue(m_current_hitting_team_id));
    }
    if (m_current_pitcher_isSet) {
        obj.insert(QString("CurrentPitcher"), ::OpenAPI::toJsonValue(m_current_pitcher));
    }
    if (m_current_pitcher_id_isSet) {
        obj.insert(QString("CurrentPitcherID"), ::OpenAPI::toJsonValue(m_current_pitcher_id));
    }
    if (m_current_pitching_team_id_isSet) {
        obj.insert(QString("CurrentPitchingTeamID"), ::OpenAPI::toJsonValue(m_current_pitching_team_id));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_date_time_utc_isSet) {
        obj.insert(QString("DateTimeUTC"), ::OpenAPI::toJsonValue(m_date_time_utc));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_due_up_hitter_id1_isSet) {
        obj.insert(QString("DueUpHitterID1"), ::OpenAPI::toJsonValue(m_due_up_hitter_id1));
    }
    if (m_due_up_hitter_id2_isSet) {
        obj.insert(QString("DueUpHitterID2"), ::OpenAPI::toJsonValue(m_due_up_hitter_id2));
    }
    if (m_due_up_hitter_id3_isSet) {
        obj.insert(QString("DueUpHitterID3"), ::OpenAPI::toJsonValue(m_due_up_hitter_id3));
    }
    if (m_forecast_description_isSet) {
        obj.insert(QString("ForecastDescription"), ::OpenAPI::toJsonValue(m_forecast_description));
    }
    if (m_forecast_temp_high_isSet) {
        obj.insert(QString("ForecastTempHigh"), ::OpenAPI::toJsonValue(m_forecast_temp_high));
    }
    if (m_forecast_temp_low_isSet) {
        obj.insert(QString("ForecastTempLow"), ::OpenAPI::toJsonValue(m_forecast_temp_low));
    }
    if (m_forecast_wind_chill_isSet) {
        obj.insert(QString("ForecastWindChill"), ::OpenAPI::toJsonValue(m_forecast_wind_chill));
    }
    if (m_forecast_wind_direction_isSet) {
        obj.insert(QString("ForecastWindDirection"), ::OpenAPI::toJsonValue(m_forecast_wind_direction));
    }
    if (m_forecast_wind_speed_isSet) {
        obj.insert(QString("ForecastWindSpeed"), ::OpenAPI::toJsonValue(m_forecast_wind_speed));
    }
    if (m_game_end_date_time_isSet) {
        obj.insert(QString("GameEndDateTime"), ::OpenAPI::toJsonValue(m_game_end_date_time));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_global_away_team_id_isSet) {
        obj.insert(QString("GlobalAwayTeamID"), ::OpenAPI::toJsonValue(m_global_away_team_id));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_home_team_id_isSet) {
        obj.insert(QString("GlobalHomeTeamID"), ::OpenAPI::toJsonValue(m_global_home_team_id));
    }
    if (m_home_rotation_number_isSet) {
        obj.insert(QString("HomeRotationNumber"), ::OpenAPI::toJsonValue(m_home_rotation_number));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("HomeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_home_team_errors_isSet) {
        obj.insert(QString("HomeTeamErrors"), ::OpenAPI::toJsonValue(m_home_team_errors));
    }
    if (m_home_team_hits_isSet) {
        obj.insert(QString("HomeTeamHits"), ::OpenAPI::toJsonValue(m_home_team_hits));
    }
    if (m_home_team_id_isSet) {
        obj.insert(QString("HomeTeamID"), ::OpenAPI::toJsonValue(m_home_team_id));
    }
    if (m_home_team_money_line_isSet) {
        obj.insert(QString("HomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_home_team_money_line));
    }
    if (m_home_team_probable_pitcher_id_isSet) {
        obj.insert(QString("HomeTeamProbablePitcherID"), ::OpenAPI::toJsonValue(m_home_team_probable_pitcher_id));
    }
    if (m_home_team_runs_isSet) {
        obj.insert(QString("HomeTeamRuns"), ::OpenAPI::toJsonValue(m_home_team_runs));
    }
    if (m_home_team_starting_pitcher_isSet) {
        obj.insert(QString("HomeTeamStartingPitcher"), ::OpenAPI::toJsonValue(m_home_team_starting_pitcher));
    }
    if (m_home_team_starting_pitcher_id_isSet) {
        obj.insert(QString("HomeTeamStartingPitcherID"), ::OpenAPI::toJsonValue(m_home_team_starting_pitcher_id));
    }
    if (m_inning_isSet) {
        obj.insert(QString("Inning"), ::OpenAPI::toJsonValue(m_inning));
    }
    if (m_inning_description_isSet) {
        obj.insert(QString("InningDescription"), ::OpenAPI::toJsonValue(m_inning_description));
    }
    if (m_inning_half_isSet) {
        obj.insert(QString("InningHalf"), ::OpenAPI::toJsonValue(m_inning_half));
    }
    if (m_innings.size() > 0) {
        obj.insert(QString("Innings"), ::OpenAPI::toJsonValue(m_innings));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("IsClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_last_play_isSet) {
        obj.insert(QString("LastPlay"), ::OpenAPI::toJsonValue(m_last_play));
    }
    if (m_losing_pitcher_isSet) {
        obj.insert(QString("LosingPitcher"), ::OpenAPI::toJsonValue(m_losing_pitcher));
    }
    if (m_losing_pitcher_id_isSet) {
        obj.insert(QString("LosingPitcherID"), ::OpenAPI::toJsonValue(m_losing_pitcher_id));
    }
    if (m_neutral_venue_isSet) {
        obj.insert(QString("NeutralVenue"), ::OpenAPI::toJsonValue(m_neutral_venue));
    }
    if (m_outs_isSet) {
        obj.insert(QString("Outs"), ::OpenAPI::toJsonValue(m_outs));
    }
    if (m_over_payout_isSet) {
        obj.insert(QString("OverPayout"), ::OpenAPI::toJsonValue(m_over_payout));
    }
    if (m_over_under_isSet) {
        obj.insert(QString("OverUnder"), ::OpenAPI::toJsonValue(m_over_under));
    }
    if (m_point_spread_isSet) {
        obj.insert(QString("PointSpread"), ::OpenAPI::toJsonValue(m_point_spread));
    }
    if (m_point_spread_away_team_money_line_isSet) {
        obj.insert(QString("PointSpreadAwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_point_spread_away_team_money_line));
    }
    if (m_point_spread_home_team_money_line_isSet) {
        obj.insert(QString("PointSpreadHomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_point_spread_home_team_money_line));
    }
    if (m_rescheduled_from_game_id_isSet) {
        obj.insert(QString("RescheduledFromGameID"), ::OpenAPI::toJsonValue(m_rescheduled_from_game_id));
    }
    if (m_rescheduled_game_id_isSet) {
        obj.insert(QString("RescheduledGameID"), ::OpenAPI::toJsonValue(m_rescheduled_game_id));
    }
    if (m_runner_on_first_isSet) {
        obj.insert(QString("RunnerOnFirst"), ::OpenAPI::toJsonValue(m_runner_on_first));
    }
    if (m_runner_on_second_isSet) {
        obj.insert(QString("RunnerOnSecond"), ::OpenAPI::toJsonValue(m_runner_on_second));
    }
    if (m_runner_on_third_isSet) {
        obj.insert(QString("RunnerOnThird"), ::OpenAPI::toJsonValue(m_runner_on_third));
    }
    if (m_saving_pitcher_isSet) {
        obj.insert(QString("SavingPitcher"), ::OpenAPI::toJsonValue(m_saving_pitcher));
    }
    if (m_saving_pitcher_id_isSet) {
        obj.insert(QString("SavingPitcherID"), ::OpenAPI::toJsonValue(m_saving_pitcher_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_series_info.isSet()) {
        obj.insert(QString("SeriesInfo"), ::OpenAPI::toJsonValue(m_series_info));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_strikes_isSet) {
        obj.insert(QString("Strikes"), ::OpenAPI::toJsonValue(m_strikes));
    }
    if (m_under_payout_isSet) {
        obj.insert(QString("UnderPayout"), ::OpenAPI::toJsonValue(m_under_payout));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_winning_pitcher_isSet) {
        obj.insert(QString("WinningPitcher"), ::OpenAPI::toJsonValue(m_winning_pitcher));
    }
    if (m_winning_pitcher_id_isSet) {
        obj.insert(QString("WinningPitcherID"), ::OpenAPI::toJsonValue(m_winning_pitcher_id));
    }
    return obj;
}

qint32 OAIGame::getAttendance() const {
    return m_attendance;
}
void OAIGame::setAttendance(const qint32 &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAIGame::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAIGame::is_attendance_Valid() const{
    return m_attendance_isValid;
}

qint32 OAIGame::getAwayRotationNumber() const {
    return m_away_rotation_number;
}
void OAIGame::setAwayRotationNumber(const qint32 &away_rotation_number) {
    m_away_rotation_number = away_rotation_number;
    m_away_rotation_number_isSet = true;
}

bool OAIGame::is_away_rotation_number_Set() const{
    return m_away_rotation_number_isSet;
}

bool OAIGame::is_away_rotation_number_Valid() const{
    return m_away_rotation_number_isValid;
}

QString OAIGame::getAwayTeam() const {
    return m_away_team;
}
void OAIGame::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIGame::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIGame::is_away_team_Valid() const{
    return m_away_team_isValid;
}

qint32 OAIGame::getAwayTeamErrors() const {
    return m_away_team_errors;
}
void OAIGame::setAwayTeamErrors(const qint32 &away_team_errors) {
    m_away_team_errors = away_team_errors;
    m_away_team_errors_isSet = true;
}

bool OAIGame::is_away_team_errors_Set() const{
    return m_away_team_errors_isSet;
}

bool OAIGame::is_away_team_errors_Valid() const{
    return m_away_team_errors_isValid;
}

qint32 OAIGame::getAwayTeamHits() const {
    return m_away_team_hits;
}
void OAIGame::setAwayTeamHits(const qint32 &away_team_hits) {
    m_away_team_hits = away_team_hits;
    m_away_team_hits_isSet = true;
}

bool OAIGame::is_away_team_hits_Set() const{
    return m_away_team_hits_isSet;
}

bool OAIGame::is_away_team_hits_Valid() const{
    return m_away_team_hits_isValid;
}

qint32 OAIGame::getAwayTeamId() const {
    return m_away_team_id;
}
void OAIGame::setAwayTeamId(const qint32 &away_team_id) {
    m_away_team_id = away_team_id;
    m_away_team_id_isSet = true;
}

bool OAIGame::is_away_team_id_Set() const{
    return m_away_team_id_isSet;
}

bool OAIGame::is_away_team_id_Valid() const{
    return m_away_team_id_isValid;
}

qint32 OAIGame::getAwayTeamMoneyLine() const {
    return m_away_team_money_line;
}
void OAIGame::setAwayTeamMoneyLine(const qint32 &away_team_money_line) {
    m_away_team_money_line = away_team_money_line;
    m_away_team_money_line_isSet = true;
}

bool OAIGame::is_away_team_money_line_Set() const{
    return m_away_team_money_line_isSet;
}

bool OAIGame::is_away_team_money_line_Valid() const{
    return m_away_team_money_line_isValid;
}

qint32 OAIGame::getAwayTeamProbablePitcherId() const {
    return m_away_team_probable_pitcher_id;
}
void OAIGame::setAwayTeamProbablePitcherId(const qint32 &away_team_probable_pitcher_id) {
    m_away_team_probable_pitcher_id = away_team_probable_pitcher_id;
    m_away_team_probable_pitcher_id_isSet = true;
}

bool OAIGame::is_away_team_probable_pitcher_id_Set() const{
    return m_away_team_probable_pitcher_id_isSet;
}

bool OAIGame::is_away_team_probable_pitcher_id_Valid() const{
    return m_away_team_probable_pitcher_id_isValid;
}

qint32 OAIGame::getAwayTeamRuns() const {
    return m_away_team_runs;
}
void OAIGame::setAwayTeamRuns(const qint32 &away_team_runs) {
    m_away_team_runs = away_team_runs;
    m_away_team_runs_isSet = true;
}

bool OAIGame::is_away_team_runs_Set() const{
    return m_away_team_runs_isSet;
}

bool OAIGame::is_away_team_runs_Valid() const{
    return m_away_team_runs_isValid;
}

QString OAIGame::getAwayTeamStartingPitcher() const {
    return m_away_team_starting_pitcher;
}
void OAIGame::setAwayTeamStartingPitcher(const QString &away_team_starting_pitcher) {
    m_away_team_starting_pitcher = away_team_starting_pitcher;
    m_away_team_starting_pitcher_isSet = true;
}

bool OAIGame::is_away_team_starting_pitcher_Set() const{
    return m_away_team_starting_pitcher_isSet;
}

bool OAIGame::is_away_team_starting_pitcher_Valid() const{
    return m_away_team_starting_pitcher_isValid;
}

qint32 OAIGame::getAwayTeamStartingPitcherId() const {
    return m_away_team_starting_pitcher_id;
}
void OAIGame::setAwayTeamStartingPitcherId(const qint32 &away_team_starting_pitcher_id) {
    m_away_team_starting_pitcher_id = away_team_starting_pitcher_id;
    m_away_team_starting_pitcher_id_isSet = true;
}

bool OAIGame::is_away_team_starting_pitcher_id_Set() const{
    return m_away_team_starting_pitcher_id_isSet;
}

bool OAIGame::is_away_team_starting_pitcher_id_Valid() const{
    return m_away_team_starting_pitcher_id_isValid;
}

qint32 OAIGame::getBalls() const {
    return m_balls;
}
void OAIGame::setBalls(const qint32 &balls) {
    m_balls = balls;
    m_balls_isSet = true;
}

bool OAIGame::is_balls_Set() const{
    return m_balls_isSet;
}

bool OAIGame::is_balls_Valid() const{
    return m_balls_isValid;
}

QString OAIGame::getChannel() const {
    return m_channel;
}
void OAIGame::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIGame::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIGame::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIGame::getCurrentHitter() const {
    return m_current_hitter;
}
void OAIGame::setCurrentHitter(const QString &current_hitter) {
    m_current_hitter = current_hitter;
    m_current_hitter_isSet = true;
}

bool OAIGame::is_current_hitter_Set() const{
    return m_current_hitter_isSet;
}

bool OAIGame::is_current_hitter_Valid() const{
    return m_current_hitter_isValid;
}

qint32 OAIGame::getCurrentHitterId() const {
    return m_current_hitter_id;
}
void OAIGame::setCurrentHitterId(const qint32 &current_hitter_id) {
    m_current_hitter_id = current_hitter_id;
    m_current_hitter_id_isSet = true;
}

bool OAIGame::is_current_hitter_id_Set() const{
    return m_current_hitter_id_isSet;
}

bool OAIGame::is_current_hitter_id_Valid() const{
    return m_current_hitter_id_isValid;
}

qint32 OAIGame::getCurrentHittingTeamId() const {
    return m_current_hitting_team_id;
}
void OAIGame::setCurrentHittingTeamId(const qint32 &current_hitting_team_id) {
    m_current_hitting_team_id = current_hitting_team_id;
    m_current_hitting_team_id_isSet = true;
}

bool OAIGame::is_current_hitting_team_id_Set() const{
    return m_current_hitting_team_id_isSet;
}

bool OAIGame::is_current_hitting_team_id_Valid() const{
    return m_current_hitting_team_id_isValid;
}

QString OAIGame::getCurrentPitcher() const {
    return m_current_pitcher;
}
void OAIGame::setCurrentPitcher(const QString &current_pitcher) {
    m_current_pitcher = current_pitcher;
    m_current_pitcher_isSet = true;
}

bool OAIGame::is_current_pitcher_Set() const{
    return m_current_pitcher_isSet;
}

bool OAIGame::is_current_pitcher_Valid() const{
    return m_current_pitcher_isValid;
}

qint32 OAIGame::getCurrentPitcherId() const {
    return m_current_pitcher_id;
}
void OAIGame::setCurrentPitcherId(const qint32 &current_pitcher_id) {
    m_current_pitcher_id = current_pitcher_id;
    m_current_pitcher_id_isSet = true;
}

bool OAIGame::is_current_pitcher_id_Set() const{
    return m_current_pitcher_id_isSet;
}

bool OAIGame::is_current_pitcher_id_Valid() const{
    return m_current_pitcher_id_isValid;
}

qint32 OAIGame::getCurrentPitchingTeamId() const {
    return m_current_pitching_team_id;
}
void OAIGame::setCurrentPitchingTeamId(const qint32 &current_pitching_team_id) {
    m_current_pitching_team_id = current_pitching_team_id;
    m_current_pitching_team_id_isSet = true;
}

bool OAIGame::is_current_pitching_team_id_Set() const{
    return m_current_pitching_team_id_isSet;
}

bool OAIGame::is_current_pitching_team_id_Valid() const{
    return m_current_pitching_team_id_isValid;
}

QString OAIGame::getDateTime() const {
    return m_date_time;
}
void OAIGame::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIGame::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIGame::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIGame::getDateTimeUtc() const {
    return m_date_time_utc;
}
void OAIGame::setDateTimeUtc(const QString &date_time_utc) {
    m_date_time_utc = date_time_utc;
    m_date_time_utc_isSet = true;
}

bool OAIGame::is_date_time_utc_Set() const{
    return m_date_time_utc_isSet;
}

bool OAIGame::is_date_time_utc_Valid() const{
    return m_date_time_utc_isValid;
}

QString OAIGame::getDay() const {
    return m_day;
}
void OAIGame::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIGame::is_day_Set() const{
    return m_day_isSet;
}

bool OAIGame::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIGame::getDueUpHitterId1() const {
    return m_due_up_hitter_id1;
}
void OAIGame::setDueUpHitterId1(const qint32 &due_up_hitter_id1) {
    m_due_up_hitter_id1 = due_up_hitter_id1;
    m_due_up_hitter_id1_isSet = true;
}

bool OAIGame::is_due_up_hitter_id1_Set() const{
    return m_due_up_hitter_id1_isSet;
}

bool OAIGame::is_due_up_hitter_id1_Valid() const{
    return m_due_up_hitter_id1_isValid;
}

qint32 OAIGame::getDueUpHitterId2() const {
    return m_due_up_hitter_id2;
}
void OAIGame::setDueUpHitterId2(const qint32 &due_up_hitter_id2) {
    m_due_up_hitter_id2 = due_up_hitter_id2;
    m_due_up_hitter_id2_isSet = true;
}

bool OAIGame::is_due_up_hitter_id2_Set() const{
    return m_due_up_hitter_id2_isSet;
}

bool OAIGame::is_due_up_hitter_id2_Valid() const{
    return m_due_up_hitter_id2_isValid;
}

qint32 OAIGame::getDueUpHitterId3() const {
    return m_due_up_hitter_id3;
}
void OAIGame::setDueUpHitterId3(const qint32 &due_up_hitter_id3) {
    m_due_up_hitter_id3 = due_up_hitter_id3;
    m_due_up_hitter_id3_isSet = true;
}

bool OAIGame::is_due_up_hitter_id3_Set() const{
    return m_due_up_hitter_id3_isSet;
}

bool OAIGame::is_due_up_hitter_id3_Valid() const{
    return m_due_up_hitter_id3_isValid;
}

QString OAIGame::getForecastDescription() const {
    return m_forecast_description;
}
void OAIGame::setForecastDescription(const QString &forecast_description) {
    m_forecast_description = forecast_description;
    m_forecast_description_isSet = true;
}

bool OAIGame::is_forecast_description_Set() const{
    return m_forecast_description_isSet;
}

bool OAIGame::is_forecast_description_Valid() const{
    return m_forecast_description_isValid;
}

qint32 OAIGame::getForecastTempHigh() const {
    return m_forecast_temp_high;
}
void OAIGame::setForecastTempHigh(const qint32 &forecast_temp_high) {
    m_forecast_temp_high = forecast_temp_high;
    m_forecast_temp_high_isSet = true;
}

bool OAIGame::is_forecast_temp_high_Set() const{
    return m_forecast_temp_high_isSet;
}

bool OAIGame::is_forecast_temp_high_Valid() const{
    return m_forecast_temp_high_isValid;
}

qint32 OAIGame::getForecastTempLow() const {
    return m_forecast_temp_low;
}
void OAIGame::setForecastTempLow(const qint32 &forecast_temp_low) {
    m_forecast_temp_low = forecast_temp_low;
    m_forecast_temp_low_isSet = true;
}

bool OAIGame::is_forecast_temp_low_Set() const{
    return m_forecast_temp_low_isSet;
}

bool OAIGame::is_forecast_temp_low_Valid() const{
    return m_forecast_temp_low_isValid;
}

qint32 OAIGame::getForecastWindChill() const {
    return m_forecast_wind_chill;
}
void OAIGame::setForecastWindChill(const qint32 &forecast_wind_chill) {
    m_forecast_wind_chill = forecast_wind_chill;
    m_forecast_wind_chill_isSet = true;
}

bool OAIGame::is_forecast_wind_chill_Set() const{
    return m_forecast_wind_chill_isSet;
}

bool OAIGame::is_forecast_wind_chill_Valid() const{
    return m_forecast_wind_chill_isValid;
}

qint32 OAIGame::getForecastWindDirection() const {
    return m_forecast_wind_direction;
}
void OAIGame::setForecastWindDirection(const qint32 &forecast_wind_direction) {
    m_forecast_wind_direction = forecast_wind_direction;
    m_forecast_wind_direction_isSet = true;
}

bool OAIGame::is_forecast_wind_direction_Set() const{
    return m_forecast_wind_direction_isSet;
}

bool OAIGame::is_forecast_wind_direction_Valid() const{
    return m_forecast_wind_direction_isValid;
}

qint32 OAIGame::getForecastWindSpeed() const {
    return m_forecast_wind_speed;
}
void OAIGame::setForecastWindSpeed(const qint32 &forecast_wind_speed) {
    m_forecast_wind_speed = forecast_wind_speed;
    m_forecast_wind_speed_isSet = true;
}

bool OAIGame::is_forecast_wind_speed_Set() const{
    return m_forecast_wind_speed_isSet;
}

bool OAIGame::is_forecast_wind_speed_Valid() const{
    return m_forecast_wind_speed_isValid;
}

QString OAIGame::getGameEndDateTime() const {
    return m_game_end_date_time;
}
void OAIGame::setGameEndDateTime(const QString &game_end_date_time) {
    m_game_end_date_time = game_end_date_time;
    m_game_end_date_time_isSet = true;
}

bool OAIGame::is_game_end_date_time_Set() const{
    return m_game_end_date_time_isSet;
}

bool OAIGame::is_game_end_date_time_Valid() const{
    return m_game_end_date_time_isValid;
}

qint32 OAIGame::getGameId() const {
    return m_game_id;
}
void OAIGame::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIGame::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIGame::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIGame::getGlobalAwayTeamId() const {
    return m_global_away_team_id;
}
void OAIGame::setGlobalAwayTeamId(const qint32 &global_away_team_id) {
    m_global_away_team_id = global_away_team_id;
    m_global_away_team_id_isSet = true;
}

bool OAIGame::is_global_away_team_id_Set() const{
    return m_global_away_team_id_isSet;
}

bool OAIGame::is_global_away_team_id_Valid() const{
    return m_global_away_team_id_isValid;
}

qint32 OAIGame::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIGame::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIGame::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIGame::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIGame::getGlobalHomeTeamId() const {
    return m_global_home_team_id;
}
void OAIGame::setGlobalHomeTeamId(const qint32 &global_home_team_id) {
    m_global_home_team_id = global_home_team_id;
    m_global_home_team_id_isSet = true;
}

bool OAIGame::is_global_home_team_id_Set() const{
    return m_global_home_team_id_isSet;
}

bool OAIGame::is_global_home_team_id_Valid() const{
    return m_global_home_team_id_isValid;
}

qint32 OAIGame::getHomeRotationNumber() const {
    return m_home_rotation_number;
}
void OAIGame::setHomeRotationNumber(const qint32 &home_rotation_number) {
    m_home_rotation_number = home_rotation_number;
    m_home_rotation_number_isSet = true;
}

bool OAIGame::is_home_rotation_number_Set() const{
    return m_home_rotation_number_isSet;
}

bool OAIGame::is_home_rotation_number_Valid() const{
    return m_home_rotation_number_isValid;
}

QString OAIGame::getHomeTeam() const {
    return m_home_team;
}
void OAIGame::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIGame::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIGame::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIGame::getHomeTeamErrors() const {
    return m_home_team_errors;
}
void OAIGame::setHomeTeamErrors(const qint32 &home_team_errors) {
    m_home_team_errors = home_team_errors;
    m_home_team_errors_isSet = true;
}

bool OAIGame::is_home_team_errors_Set() const{
    return m_home_team_errors_isSet;
}

bool OAIGame::is_home_team_errors_Valid() const{
    return m_home_team_errors_isValid;
}

qint32 OAIGame::getHomeTeamHits() const {
    return m_home_team_hits;
}
void OAIGame::setHomeTeamHits(const qint32 &home_team_hits) {
    m_home_team_hits = home_team_hits;
    m_home_team_hits_isSet = true;
}

bool OAIGame::is_home_team_hits_Set() const{
    return m_home_team_hits_isSet;
}

bool OAIGame::is_home_team_hits_Valid() const{
    return m_home_team_hits_isValid;
}

qint32 OAIGame::getHomeTeamId() const {
    return m_home_team_id;
}
void OAIGame::setHomeTeamId(const qint32 &home_team_id) {
    m_home_team_id = home_team_id;
    m_home_team_id_isSet = true;
}

bool OAIGame::is_home_team_id_Set() const{
    return m_home_team_id_isSet;
}

bool OAIGame::is_home_team_id_Valid() const{
    return m_home_team_id_isValid;
}

qint32 OAIGame::getHomeTeamMoneyLine() const {
    return m_home_team_money_line;
}
void OAIGame::setHomeTeamMoneyLine(const qint32 &home_team_money_line) {
    m_home_team_money_line = home_team_money_line;
    m_home_team_money_line_isSet = true;
}

bool OAIGame::is_home_team_money_line_Set() const{
    return m_home_team_money_line_isSet;
}

bool OAIGame::is_home_team_money_line_Valid() const{
    return m_home_team_money_line_isValid;
}

qint32 OAIGame::getHomeTeamProbablePitcherId() const {
    return m_home_team_probable_pitcher_id;
}
void OAIGame::setHomeTeamProbablePitcherId(const qint32 &home_team_probable_pitcher_id) {
    m_home_team_probable_pitcher_id = home_team_probable_pitcher_id;
    m_home_team_probable_pitcher_id_isSet = true;
}

bool OAIGame::is_home_team_probable_pitcher_id_Set() const{
    return m_home_team_probable_pitcher_id_isSet;
}

bool OAIGame::is_home_team_probable_pitcher_id_Valid() const{
    return m_home_team_probable_pitcher_id_isValid;
}

qint32 OAIGame::getHomeTeamRuns() const {
    return m_home_team_runs;
}
void OAIGame::setHomeTeamRuns(const qint32 &home_team_runs) {
    m_home_team_runs = home_team_runs;
    m_home_team_runs_isSet = true;
}

bool OAIGame::is_home_team_runs_Set() const{
    return m_home_team_runs_isSet;
}

bool OAIGame::is_home_team_runs_Valid() const{
    return m_home_team_runs_isValid;
}

QString OAIGame::getHomeTeamStartingPitcher() const {
    return m_home_team_starting_pitcher;
}
void OAIGame::setHomeTeamStartingPitcher(const QString &home_team_starting_pitcher) {
    m_home_team_starting_pitcher = home_team_starting_pitcher;
    m_home_team_starting_pitcher_isSet = true;
}

bool OAIGame::is_home_team_starting_pitcher_Set() const{
    return m_home_team_starting_pitcher_isSet;
}

bool OAIGame::is_home_team_starting_pitcher_Valid() const{
    return m_home_team_starting_pitcher_isValid;
}

qint32 OAIGame::getHomeTeamStartingPitcherId() const {
    return m_home_team_starting_pitcher_id;
}
void OAIGame::setHomeTeamStartingPitcherId(const qint32 &home_team_starting_pitcher_id) {
    m_home_team_starting_pitcher_id = home_team_starting_pitcher_id;
    m_home_team_starting_pitcher_id_isSet = true;
}

bool OAIGame::is_home_team_starting_pitcher_id_Set() const{
    return m_home_team_starting_pitcher_id_isSet;
}

bool OAIGame::is_home_team_starting_pitcher_id_Valid() const{
    return m_home_team_starting_pitcher_id_isValid;
}

qint32 OAIGame::getInning() const {
    return m_inning;
}
void OAIGame::setInning(const qint32 &inning) {
    m_inning = inning;
    m_inning_isSet = true;
}

bool OAIGame::is_inning_Set() const{
    return m_inning_isSet;
}

bool OAIGame::is_inning_Valid() const{
    return m_inning_isValid;
}

QString OAIGame::getInningDescription() const {
    return m_inning_description;
}
void OAIGame::setInningDescription(const QString &inning_description) {
    m_inning_description = inning_description;
    m_inning_description_isSet = true;
}

bool OAIGame::is_inning_description_Set() const{
    return m_inning_description_isSet;
}

bool OAIGame::is_inning_description_Valid() const{
    return m_inning_description_isValid;
}

QString OAIGame::getInningHalf() const {
    return m_inning_half;
}
void OAIGame::setInningHalf(const QString &inning_half) {
    m_inning_half = inning_half;
    m_inning_half_isSet = true;
}

bool OAIGame::is_inning_half_Set() const{
    return m_inning_half_isSet;
}

bool OAIGame::is_inning_half_Valid() const{
    return m_inning_half_isValid;
}

QList<OAIInning> OAIGame::getInnings() const {
    return m_innings;
}
void OAIGame::setInnings(const QList<OAIInning> &innings) {
    m_innings = innings;
    m_innings_isSet = true;
}

bool OAIGame::is_innings_Set() const{
    return m_innings_isSet;
}

bool OAIGame::is_innings_Valid() const{
    return m_innings_isValid;
}

bool OAIGame::isIsClosed() const {
    return m_is_closed;
}
void OAIGame::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAIGame::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAIGame::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

QString OAIGame::getLastPlay() const {
    return m_last_play;
}
void OAIGame::setLastPlay(const QString &last_play) {
    m_last_play = last_play;
    m_last_play_isSet = true;
}

bool OAIGame::is_last_play_Set() const{
    return m_last_play_isSet;
}

bool OAIGame::is_last_play_Valid() const{
    return m_last_play_isValid;
}

QString OAIGame::getLosingPitcher() const {
    return m_losing_pitcher;
}
void OAIGame::setLosingPitcher(const QString &losing_pitcher) {
    m_losing_pitcher = losing_pitcher;
    m_losing_pitcher_isSet = true;
}

bool OAIGame::is_losing_pitcher_Set() const{
    return m_losing_pitcher_isSet;
}

bool OAIGame::is_losing_pitcher_Valid() const{
    return m_losing_pitcher_isValid;
}

qint32 OAIGame::getLosingPitcherId() const {
    return m_losing_pitcher_id;
}
void OAIGame::setLosingPitcherId(const qint32 &losing_pitcher_id) {
    m_losing_pitcher_id = losing_pitcher_id;
    m_losing_pitcher_id_isSet = true;
}

bool OAIGame::is_losing_pitcher_id_Set() const{
    return m_losing_pitcher_id_isSet;
}

bool OAIGame::is_losing_pitcher_id_Valid() const{
    return m_losing_pitcher_id_isValid;
}

bool OAIGame::isNeutralVenue() const {
    return m_neutral_venue;
}
void OAIGame::setNeutralVenue(const bool &neutral_venue) {
    m_neutral_venue = neutral_venue;
    m_neutral_venue_isSet = true;
}

bool OAIGame::is_neutral_venue_Set() const{
    return m_neutral_venue_isSet;
}

bool OAIGame::is_neutral_venue_Valid() const{
    return m_neutral_venue_isValid;
}

qint32 OAIGame::getOuts() const {
    return m_outs;
}
void OAIGame::setOuts(const qint32 &outs) {
    m_outs = outs;
    m_outs_isSet = true;
}

bool OAIGame::is_outs_Set() const{
    return m_outs_isSet;
}

bool OAIGame::is_outs_Valid() const{
    return m_outs_isValid;
}

qint32 OAIGame::getOverPayout() const {
    return m_over_payout;
}
void OAIGame::setOverPayout(const qint32 &over_payout) {
    m_over_payout = over_payout;
    m_over_payout_isSet = true;
}

bool OAIGame::is_over_payout_Set() const{
    return m_over_payout_isSet;
}

bool OAIGame::is_over_payout_Valid() const{
    return m_over_payout_isValid;
}

double OAIGame::getOverUnder() const {
    return m_over_under;
}
void OAIGame::setOverUnder(const double &over_under) {
    m_over_under = over_under;
    m_over_under_isSet = true;
}

bool OAIGame::is_over_under_Set() const{
    return m_over_under_isSet;
}

bool OAIGame::is_over_under_Valid() const{
    return m_over_under_isValid;
}

double OAIGame::getPointSpread() const {
    return m_point_spread;
}
void OAIGame::setPointSpread(const double &point_spread) {
    m_point_spread = point_spread;
    m_point_spread_isSet = true;
}

bool OAIGame::is_point_spread_Set() const{
    return m_point_spread_isSet;
}

bool OAIGame::is_point_spread_Valid() const{
    return m_point_spread_isValid;
}

qint32 OAIGame::getPointSpreadAwayTeamMoneyLine() const {
    return m_point_spread_away_team_money_line;
}
void OAIGame::setPointSpreadAwayTeamMoneyLine(const qint32 &point_spread_away_team_money_line) {
    m_point_spread_away_team_money_line = point_spread_away_team_money_line;
    m_point_spread_away_team_money_line_isSet = true;
}

bool OAIGame::is_point_spread_away_team_money_line_Set() const{
    return m_point_spread_away_team_money_line_isSet;
}

bool OAIGame::is_point_spread_away_team_money_line_Valid() const{
    return m_point_spread_away_team_money_line_isValid;
}

qint32 OAIGame::getPointSpreadHomeTeamMoneyLine() const {
    return m_point_spread_home_team_money_line;
}
void OAIGame::setPointSpreadHomeTeamMoneyLine(const qint32 &point_spread_home_team_money_line) {
    m_point_spread_home_team_money_line = point_spread_home_team_money_line;
    m_point_spread_home_team_money_line_isSet = true;
}

bool OAIGame::is_point_spread_home_team_money_line_Set() const{
    return m_point_spread_home_team_money_line_isSet;
}

bool OAIGame::is_point_spread_home_team_money_line_Valid() const{
    return m_point_spread_home_team_money_line_isValid;
}

qint32 OAIGame::getRescheduledFromGameId() const {
    return m_rescheduled_from_game_id;
}
void OAIGame::setRescheduledFromGameId(const qint32 &rescheduled_from_game_id) {
    m_rescheduled_from_game_id = rescheduled_from_game_id;
    m_rescheduled_from_game_id_isSet = true;
}

bool OAIGame::is_rescheduled_from_game_id_Set() const{
    return m_rescheduled_from_game_id_isSet;
}

bool OAIGame::is_rescheduled_from_game_id_Valid() const{
    return m_rescheduled_from_game_id_isValid;
}

qint32 OAIGame::getRescheduledGameId() const {
    return m_rescheduled_game_id;
}
void OAIGame::setRescheduledGameId(const qint32 &rescheduled_game_id) {
    m_rescheduled_game_id = rescheduled_game_id;
    m_rescheduled_game_id_isSet = true;
}

bool OAIGame::is_rescheduled_game_id_Set() const{
    return m_rescheduled_game_id_isSet;
}

bool OAIGame::is_rescheduled_game_id_Valid() const{
    return m_rescheduled_game_id_isValid;
}

bool OAIGame::isRunnerOnFirst() const {
    return m_runner_on_first;
}
void OAIGame::setRunnerOnFirst(const bool &runner_on_first) {
    m_runner_on_first = runner_on_first;
    m_runner_on_first_isSet = true;
}

bool OAIGame::is_runner_on_first_Set() const{
    return m_runner_on_first_isSet;
}

bool OAIGame::is_runner_on_first_Valid() const{
    return m_runner_on_first_isValid;
}

bool OAIGame::isRunnerOnSecond() const {
    return m_runner_on_second;
}
void OAIGame::setRunnerOnSecond(const bool &runner_on_second) {
    m_runner_on_second = runner_on_second;
    m_runner_on_second_isSet = true;
}

bool OAIGame::is_runner_on_second_Set() const{
    return m_runner_on_second_isSet;
}

bool OAIGame::is_runner_on_second_Valid() const{
    return m_runner_on_second_isValid;
}

bool OAIGame::isRunnerOnThird() const {
    return m_runner_on_third;
}
void OAIGame::setRunnerOnThird(const bool &runner_on_third) {
    m_runner_on_third = runner_on_third;
    m_runner_on_third_isSet = true;
}

bool OAIGame::is_runner_on_third_Set() const{
    return m_runner_on_third_isSet;
}

bool OAIGame::is_runner_on_third_Valid() const{
    return m_runner_on_third_isValid;
}

QString OAIGame::getSavingPitcher() const {
    return m_saving_pitcher;
}
void OAIGame::setSavingPitcher(const QString &saving_pitcher) {
    m_saving_pitcher = saving_pitcher;
    m_saving_pitcher_isSet = true;
}

bool OAIGame::is_saving_pitcher_Set() const{
    return m_saving_pitcher_isSet;
}

bool OAIGame::is_saving_pitcher_Valid() const{
    return m_saving_pitcher_isValid;
}

qint32 OAIGame::getSavingPitcherId() const {
    return m_saving_pitcher_id;
}
void OAIGame::setSavingPitcherId(const qint32 &saving_pitcher_id) {
    m_saving_pitcher_id = saving_pitcher_id;
    m_saving_pitcher_id_isSet = true;
}

bool OAIGame::is_saving_pitcher_id_Set() const{
    return m_saving_pitcher_id_isSet;
}

bool OAIGame::is_saving_pitcher_id_Valid() const{
    return m_saving_pitcher_id_isValid;
}

qint32 OAIGame::getSeason() const {
    return m_season;
}
void OAIGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGame::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIGame::getSeasonType() const {
    return m_season_type;
}
void OAIGame::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

OAISeries OAIGame::getSeriesInfo() const {
    return m_series_info;
}
void OAIGame::setSeriesInfo(const OAISeries &series_info) {
    m_series_info = series_info;
    m_series_info_isSet = true;
}

bool OAIGame::is_series_info_Set() const{
    return m_series_info_isSet;
}

bool OAIGame::is_series_info_Valid() const{
    return m_series_info_isValid;
}

qint32 OAIGame::getStadiumId() const {
    return m_stadium_id;
}
void OAIGame::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAIGame::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAIGame::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

QString OAIGame::getStatus() const {
    return m_status;
}
void OAIGame::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGame::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGame::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIGame::getStrikes() const {
    return m_strikes;
}
void OAIGame::setStrikes(const qint32 &strikes) {
    m_strikes = strikes;
    m_strikes_isSet = true;
}

bool OAIGame::is_strikes_Set() const{
    return m_strikes_isSet;
}

bool OAIGame::is_strikes_Valid() const{
    return m_strikes_isValid;
}

qint32 OAIGame::getUnderPayout() const {
    return m_under_payout;
}
void OAIGame::setUnderPayout(const qint32 &under_payout) {
    m_under_payout = under_payout;
    m_under_payout_isSet = true;
}

bool OAIGame::is_under_payout_Set() const{
    return m_under_payout_isSet;
}

bool OAIGame::is_under_payout_Valid() const{
    return m_under_payout_isValid;
}

QString OAIGame::getUpdated() const {
    return m_updated;
}
void OAIGame::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIGame::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIGame::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIGame::getWinningPitcher() const {
    return m_winning_pitcher;
}
void OAIGame::setWinningPitcher(const QString &winning_pitcher) {
    m_winning_pitcher = winning_pitcher;
    m_winning_pitcher_isSet = true;
}

bool OAIGame::is_winning_pitcher_Set() const{
    return m_winning_pitcher_isSet;
}

bool OAIGame::is_winning_pitcher_Valid() const{
    return m_winning_pitcher_isValid;
}

qint32 OAIGame::getWinningPitcherId() const {
    return m_winning_pitcher_id;
}
void OAIGame::setWinningPitcherId(const qint32 &winning_pitcher_id) {
    m_winning_pitcher_id = winning_pitcher_id;
    m_winning_pitcher_id_isSet = true;
}

bool OAIGame::is_winning_pitcher_id_Set() const{
    return m_winning_pitcher_id_isSet;
}

bool OAIGame::is_winning_pitcher_id_Valid() const{
    return m_winning_pitcher_id_isValid;
}

bool OAIGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_rotation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_probable_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_starting_pitcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_starting_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hitter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_hitting_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_pitcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_pitching_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_up_hitter_id1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_up_hitter_id2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_up_hitter_id3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_temp_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_temp_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_wind_chill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_wind_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_rotation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_probable_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_starting_pitcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_starting_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inning_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inning_half_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losing_pitcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losing_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescheduled_from_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescheduled_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runner_on_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runner_on_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runner_on_third_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saving_pitcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saving_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_pitcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_pitcher_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
