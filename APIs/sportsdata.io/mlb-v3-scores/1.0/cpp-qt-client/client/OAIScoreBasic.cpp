/**
 * MLB v3 Scores
 * MLB scores API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreBasic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreBasic::OAIScoreBasic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreBasic::OAIScoreBasic() {
    this->initializeModel();
}

OAIScoreBasic::~OAIScoreBasic() {}

void OAIScoreBasic::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_away_team_errors_isSet = false;
    m_away_team_errors_isValid = false;

    m_away_team_hits_isSet = false;
    m_away_team_hits_isValid = false;

    m_away_team_id_isSet = false;
    m_away_team_id_isValid = false;

    m_away_team_runs_isSet = false;
    m_away_team_runs_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_date_time_utc_isSet = false;
    m_date_time_utc_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_game_end_date_time_isSet = false;
    m_game_end_date_time_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_global_away_team_id_isSet = false;
    m_global_away_team_id_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_home_team_id_isSet = false;
    m_global_home_team_id_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_home_team_errors_isSet = false;
    m_home_team_errors_isValid = false;

    m_home_team_hits_isSet = false;
    m_home_team_hits_isValid = false;

    m_home_team_id_isSet = false;
    m_home_team_id_isValid = false;

    m_home_team_runs_isSet = false;
    m_home_team_runs_isValid = false;

    m_inning_isSet = false;
    m_inning_isValid = false;

    m_inning_half_isSet = false;
    m_inning_half_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_neutral_venue_isSet = false;
    m_neutral_venue_isValid = false;

    m_rescheduled_from_game_id_isSet = false;
    m_rescheduled_from_game_id_isValid = false;

    m_rescheduled_game_id_isSet = false;
    m_rescheduled_game_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_series_info_isSet = false;
    m_series_info_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIScoreBasic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreBasic::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("Attendance")]);
    m_attendance_isSet = !json[QString("Attendance")].isNull() && m_attendance_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("AwayTeam")]);
    m_away_team_isSet = !json[QString("AwayTeam")].isNull() && m_away_team_isValid;

    m_away_team_errors_isValid = ::OpenAPI::fromJsonValue(m_away_team_errors, json[QString("AwayTeamErrors")]);
    m_away_team_errors_isSet = !json[QString("AwayTeamErrors")].isNull() && m_away_team_errors_isValid;

    m_away_team_hits_isValid = ::OpenAPI::fromJsonValue(m_away_team_hits, json[QString("AwayTeamHits")]);
    m_away_team_hits_isSet = !json[QString("AwayTeamHits")].isNull() && m_away_team_hits_isValid;

    m_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_away_team_id, json[QString("AwayTeamID")]);
    m_away_team_id_isSet = !json[QString("AwayTeamID")].isNull() && m_away_team_id_isValid;

    m_away_team_runs_isValid = ::OpenAPI::fromJsonValue(m_away_team_runs, json[QString("AwayTeamRuns")]);
    m_away_team_runs_isSet = !json[QString("AwayTeamRuns")].isNull() && m_away_team_runs_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_date_time_utc, json[QString("DateTimeUTC")]);
    m_date_time_utc_isSet = !json[QString("DateTimeUTC")].isNull() && m_date_time_utc_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_game_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_game_end_date_time, json[QString("GameEndDateTime")]);
    m_game_end_date_time_isSet = !json[QString("GameEndDateTime")].isNull() && m_game_end_date_time_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_global_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_away_team_id, json[QString("GlobalAwayTeamID")]);
    m_global_away_team_id_isSet = !json[QString("GlobalAwayTeamID")].isNull() && m_global_away_team_id_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_home_team_id, json[QString("GlobalHomeTeamID")]);
    m_global_home_team_id_isSet = !json[QString("GlobalHomeTeamID")].isNull() && m_global_home_team_id_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("HomeTeam")]);
    m_home_team_isSet = !json[QString("HomeTeam")].isNull() && m_home_team_isValid;

    m_home_team_errors_isValid = ::OpenAPI::fromJsonValue(m_home_team_errors, json[QString("HomeTeamErrors")]);
    m_home_team_errors_isSet = !json[QString("HomeTeamErrors")].isNull() && m_home_team_errors_isValid;

    m_home_team_hits_isValid = ::OpenAPI::fromJsonValue(m_home_team_hits, json[QString("HomeTeamHits")]);
    m_home_team_hits_isSet = !json[QString("HomeTeamHits")].isNull() && m_home_team_hits_isValid;

    m_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_home_team_id, json[QString("HomeTeamID")]);
    m_home_team_id_isSet = !json[QString("HomeTeamID")].isNull() && m_home_team_id_isValid;

    m_home_team_runs_isValid = ::OpenAPI::fromJsonValue(m_home_team_runs, json[QString("HomeTeamRuns")]);
    m_home_team_runs_isSet = !json[QString("HomeTeamRuns")].isNull() && m_home_team_runs_isValid;

    m_inning_isValid = ::OpenAPI::fromJsonValue(m_inning, json[QString("Inning")]);
    m_inning_isSet = !json[QString("Inning")].isNull() && m_inning_isValid;

    m_inning_half_isValid = ::OpenAPI::fromJsonValue(m_inning_half, json[QString("InningHalf")]);
    m_inning_half_isSet = !json[QString("InningHalf")].isNull() && m_inning_half_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("IsClosed")]);
    m_is_closed_isSet = !json[QString("IsClosed")].isNull() && m_is_closed_isValid;

    m_neutral_venue_isValid = ::OpenAPI::fromJsonValue(m_neutral_venue, json[QString("NeutralVenue")]);
    m_neutral_venue_isSet = !json[QString("NeutralVenue")].isNull() && m_neutral_venue_isValid;

    m_rescheduled_from_game_id_isValid = ::OpenAPI::fromJsonValue(m_rescheduled_from_game_id, json[QString("RescheduledFromGameID")]);
    m_rescheduled_from_game_id_isSet = !json[QString("RescheduledFromGameID")].isNull() && m_rescheduled_from_game_id_isValid;

    m_rescheduled_game_id_isValid = ::OpenAPI::fromJsonValue(m_rescheduled_game_id, json[QString("RescheduledGameID")]);
    m_rescheduled_game_id_isSet = !json[QString("RescheduledGameID")].isNull() && m_rescheduled_game_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_series_info_isValid = ::OpenAPI::fromJsonValue(m_series_info, json[QString("SeriesInfo")]);
    m_series_info_isSet = !json[QString("SeriesInfo")].isNull() && m_series_info_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIScoreBasic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreBasic::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance_isSet) {
        obj.insert(QString("Attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("AwayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_away_team_errors_isSet) {
        obj.insert(QString("AwayTeamErrors"), ::OpenAPI::toJsonValue(m_away_team_errors));
    }
    if (m_away_team_hits_isSet) {
        obj.insert(QString("AwayTeamHits"), ::OpenAPI::toJsonValue(m_away_team_hits));
    }
    if (m_away_team_id_isSet) {
        obj.insert(QString("AwayTeamID"), ::OpenAPI::toJsonValue(m_away_team_id));
    }
    if (m_away_team_runs_isSet) {
        obj.insert(QString("AwayTeamRuns"), ::OpenAPI::toJsonValue(m_away_team_runs));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_date_time_utc_isSet) {
        obj.insert(QString("DateTimeUTC"), ::OpenAPI::toJsonValue(m_date_time_utc));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_game_end_date_time_isSet) {
        obj.insert(QString("GameEndDateTime"), ::OpenAPI::toJsonValue(m_game_end_date_time));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_global_away_team_id_isSet) {
        obj.insert(QString("GlobalAwayTeamID"), ::OpenAPI::toJsonValue(m_global_away_team_id));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_home_team_id_isSet) {
        obj.insert(QString("GlobalHomeTeamID"), ::OpenAPI::toJsonValue(m_global_home_team_id));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("HomeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_home_team_errors_isSet) {
        obj.insert(QString("HomeTeamErrors"), ::OpenAPI::toJsonValue(m_home_team_errors));
    }
    if (m_home_team_hits_isSet) {
        obj.insert(QString("HomeTeamHits"), ::OpenAPI::toJsonValue(m_home_team_hits));
    }
    if (m_home_team_id_isSet) {
        obj.insert(QString("HomeTeamID"), ::OpenAPI::toJsonValue(m_home_team_id));
    }
    if (m_home_team_runs_isSet) {
        obj.insert(QString("HomeTeamRuns"), ::OpenAPI::toJsonValue(m_home_team_runs));
    }
    if (m_inning_isSet) {
        obj.insert(QString("Inning"), ::OpenAPI::toJsonValue(m_inning));
    }
    if (m_inning_half_isSet) {
        obj.insert(QString("InningHalf"), ::OpenAPI::toJsonValue(m_inning_half));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("IsClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_neutral_venue_isSet) {
        obj.insert(QString("NeutralVenue"), ::OpenAPI::toJsonValue(m_neutral_venue));
    }
    if (m_rescheduled_from_game_id_isSet) {
        obj.insert(QString("RescheduledFromGameID"), ::OpenAPI::toJsonValue(m_rescheduled_from_game_id));
    }
    if (m_rescheduled_game_id_isSet) {
        obj.insert(QString("RescheduledGameID"), ::OpenAPI::toJsonValue(m_rescheduled_game_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_series_info.isSet()) {
        obj.insert(QString("SeriesInfo"), ::OpenAPI::toJsonValue(m_series_info));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIScoreBasic::getAttendance() const {
    return m_attendance;
}
void OAIScoreBasic::setAttendance(const qint32 &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAIScoreBasic::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAIScoreBasic::is_attendance_Valid() const{
    return m_attendance_isValid;
}

QString OAIScoreBasic::getAwayTeam() const {
    return m_away_team;
}
void OAIScoreBasic::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIScoreBasic::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIScoreBasic::is_away_team_Valid() const{
    return m_away_team_isValid;
}

qint32 OAIScoreBasic::getAwayTeamErrors() const {
    return m_away_team_errors;
}
void OAIScoreBasic::setAwayTeamErrors(const qint32 &away_team_errors) {
    m_away_team_errors = away_team_errors;
    m_away_team_errors_isSet = true;
}

bool OAIScoreBasic::is_away_team_errors_Set() const{
    return m_away_team_errors_isSet;
}

bool OAIScoreBasic::is_away_team_errors_Valid() const{
    return m_away_team_errors_isValid;
}

qint32 OAIScoreBasic::getAwayTeamHits() const {
    return m_away_team_hits;
}
void OAIScoreBasic::setAwayTeamHits(const qint32 &away_team_hits) {
    m_away_team_hits = away_team_hits;
    m_away_team_hits_isSet = true;
}

bool OAIScoreBasic::is_away_team_hits_Set() const{
    return m_away_team_hits_isSet;
}

bool OAIScoreBasic::is_away_team_hits_Valid() const{
    return m_away_team_hits_isValid;
}

qint32 OAIScoreBasic::getAwayTeamId() const {
    return m_away_team_id;
}
void OAIScoreBasic::setAwayTeamId(const qint32 &away_team_id) {
    m_away_team_id = away_team_id;
    m_away_team_id_isSet = true;
}

bool OAIScoreBasic::is_away_team_id_Set() const{
    return m_away_team_id_isSet;
}

bool OAIScoreBasic::is_away_team_id_Valid() const{
    return m_away_team_id_isValid;
}

qint32 OAIScoreBasic::getAwayTeamRuns() const {
    return m_away_team_runs;
}
void OAIScoreBasic::setAwayTeamRuns(const qint32 &away_team_runs) {
    m_away_team_runs = away_team_runs;
    m_away_team_runs_isSet = true;
}

bool OAIScoreBasic::is_away_team_runs_Set() const{
    return m_away_team_runs_isSet;
}

bool OAIScoreBasic::is_away_team_runs_Valid() const{
    return m_away_team_runs_isValid;
}

QString OAIScoreBasic::getDateTime() const {
    return m_date_time;
}
void OAIScoreBasic::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIScoreBasic::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIScoreBasic::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIScoreBasic::getDateTimeUtc() const {
    return m_date_time_utc;
}
void OAIScoreBasic::setDateTimeUtc(const QString &date_time_utc) {
    m_date_time_utc = date_time_utc;
    m_date_time_utc_isSet = true;
}

bool OAIScoreBasic::is_date_time_utc_Set() const{
    return m_date_time_utc_isSet;
}

bool OAIScoreBasic::is_date_time_utc_Valid() const{
    return m_date_time_utc_isValid;
}

QString OAIScoreBasic::getDay() const {
    return m_day;
}
void OAIScoreBasic::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIScoreBasic::is_day_Set() const{
    return m_day_isSet;
}

bool OAIScoreBasic::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIScoreBasic::getGameEndDateTime() const {
    return m_game_end_date_time;
}
void OAIScoreBasic::setGameEndDateTime(const QString &game_end_date_time) {
    m_game_end_date_time = game_end_date_time;
    m_game_end_date_time_isSet = true;
}

bool OAIScoreBasic::is_game_end_date_time_Set() const{
    return m_game_end_date_time_isSet;
}

bool OAIScoreBasic::is_game_end_date_time_Valid() const{
    return m_game_end_date_time_isValid;
}

qint32 OAIScoreBasic::getGameId() const {
    return m_game_id;
}
void OAIScoreBasic::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIScoreBasic::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIScoreBasic::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIScoreBasic::getGlobalAwayTeamId() const {
    return m_global_away_team_id;
}
void OAIScoreBasic::setGlobalAwayTeamId(const qint32 &global_away_team_id) {
    m_global_away_team_id = global_away_team_id;
    m_global_away_team_id_isSet = true;
}

bool OAIScoreBasic::is_global_away_team_id_Set() const{
    return m_global_away_team_id_isSet;
}

bool OAIScoreBasic::is_global_away_team_id_Valid() const{
    return m_global_away_team_id_isValid;
}

qint32 OAIScoreBasic::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIScoreBasic::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIScoreBasic::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIScoreBasic::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIScoreBasic::getGlobalHomeTeamId() const {
    return m_global_home_team_id;
}
void OAIScoreBasic::setGlobalHomeTeamId(const qint32 &global_home_team_id) {
    m_global_home_team_id = global_home_team_id;
    m_global_home_team_id_isSet = true;
}

bool OAIScoreBasic::is_global_home_team_id_Set() const{
    return m_global_home_team_id_isSet;
}

bool OAIScoreBasic::is_global_home_team_id_Valid() const{
    return m_global_home_team_id_isValid;
}

QString OAIScoreBasic::getHomeTeam() const {
    return m_home_team;
}
void OAIScoreBasic::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIScoreBasic::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIScoreBasic::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIScoreBasic::getHomeTeamErrors() const {
    return m_home_team_errors;
}
void OAIScoreBasic::setHomeTeamErrors(const qint32 &home_team_errors) {
    m_home_team_errors = home_team_errors;
    m_home_team_errors_isSet = true;
}

bool OAIScoreBasic::is_home_team_errors_Set() const{
    return m_home_team_errors_isSet;
}

bool OAIScoreBasic::is_home_team_errors_Valid() const{
    return m_home_team_errors_isValid;
}

qint32 OAIScoreBasic::getHomeTeamHits() const {
    return m_home_team_hits;
}
void OAIScoreBasic::setHomeTeamHits(const qint32 &home_team_hits) {
    m_home_team_hits = home_team_hits;
    m_home_team_hits_isSet = true;
}

bool OAIScoreBasic::is_home_team_hits_Set() const{
    return m_home_team_hits_isSet;
}

bool OAIScoreBasic::is_home_team_hits_Valid() const{
    return m_home_team_hits_isValid;
}

qint32 OAIScoreBasic::getHomeTeamId() const {
    return m_home_team_id;
}
void OAIScoreBasic::setHomeTeamId(const qint32 &home_team_id) {
    m_home_team_id = home_team_id;
    m_home_team_id_isSet = true;
}

bool OAIScoreBasic::is_home_team_id_Set() const{
    return m_home_team_id_isSet;
}

bool OAIScoreBasic::is_home_team_id_Valid() const{
    return m_home_team_id_isValid;
}

qint32 OAIScoreBasic::getHomeTeamRuns() const {
    return m_home_team_runs;
}
void OAIScoreBasic::setHomeTeamRuns(const qint32 &home_team_runs) {
    m_home_team_runs = home_team_runs;
    m_home_team_runs_isSet = true;
}

bool OAIScoreBasic::is_home_team_runs_Set() const{
    return m_home_team_runs_isSet;
}

bool OAIScoreBasic::is_home_team_runs_Valid() const{
    return m_home_team_runs_isValid;
}

qint32 OAIScoreBasic::getInning() const {
    return m_inning;
}
void OAIScoreBasic::setInning(const qint32 &inning) {
    m_inning = inning;
    m_inning_isSet = true;
}

bool OAIScoreBasic::is_inning_Set() const{
    return m_inning_isSet;
}

bool OAIScoreBasic::is_inning_Valid() const{
    return m_inning_isValid;
}

QString OAIScoreBasic::getInningHalf() const {
    return m_inning_half;
}
void OAIScoreBasic::setInningHalf(const QString &inning_half) {
    m_inning_half = inning_half;
    m_inning_half_isSet = true;
}

bool OAIScoreBasic::is_inning_half_Set() const{
    return m_inning_half_isSet;
}

bool OAIScoreBasic::is_inning_half_Valid() const{
    return m_inning_half_isValid;
}

bool OAIScoreBasic::isIsClosed() const {
    return m_is_closed;
}
void OAIScoreBasic::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAIScoreBasic::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAIScoreBasic::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

bool OAIScoreBasic::isNeutralVenue() const {
    return m_neutral_venue;
}
void OAIScoreBasic::setNeutralVenue(const bool &neutral_venue) {
    m_neutral_venue = neutral_venue;
    m_neutral_venue_isSet = true;
}

bool OAIScoreBasic::is_neutral_venue_Set() const{
    return m_neutral_venue_isSet;
}

bool OAIScoreBasic::is_neutral_venue_Valid() const{
    return m_neutral_venue_isValid;
}

qint32 OAIScoreBasic::getRescheduledFromGameId() const {
    return m_rescheduled_from_game_id;
}
void OAIScoreBasic::setRescheduledFromGameId(const qint32 &rescheduled_from_game_id) {
    m_rescheduled_from_game_id = rescheduled_from_game_id;
    m_rescheduled_from_game_id_isSet = true;
}

bool OAIScoreBasic::is_rescheduled_from_game_id_Set() const{
    return m_rescheduled_from_game_id_isSet;
}

bool OAIScoreBasic::is_rescheduled_from_game_id_Valid() const{
    return m_rescheduled_from_game_id_isValid;
}

qint32 OAIScoreBasic::getRescheduledGameId() const {
    return m_rescheduled_game_id;
}
void OAIScoreBasic::setRescheduledGameId(const qint32 &rescheduled_game_id) {
    m_rescheduled_game_id = rescheduled_game_id;
    m_rescheduled_game_id_isSet = true;
}

bool OAIScoreBasic::is_rescheduled_game_id_Set() const{
    return m_rescheduled_game_id_isSet;
}

bool OAIScoreBasic::is_rescheduled_game_id_Valid() const{
    return m_rescheduled_game_id_isValid;
}

qint32 OAIScoreBasic::getSeason() const {
    return m_season;
}
void OAIScoreBasic::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIScoreBasic::is_season_Set() const{
    return m_season_isSet;
}

bool OAIScoreBasic::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIScoreBasic::getSeasonType() const {
    return m_season_type;
}
void OAIScoreBasic::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIScoreBasic::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIScoreBasic::is_season_type_Valid() const{
    return m_season_type_isValid;
}

OAISeries OAIScoreBasic::getSeriesInfo() const {
    return m_series_info;
}
void OAIScoreBasic::setSeriesInfo(const OAISeries &series_info) {
    m_series_info = series_info;
    m_series_info_isSet = true;
}

bool OAIScoreBasic::is_series_info_Set() const{
    return m_series_info_isSet;
}

bool OAIScoreBasic::is_series_info_Valid() const{
    return m_series_info_isValid;
}

qint32 OAIScoreBasic::getStadiumId() const {
    return m_stadium_id;
}
void OAIScoreBasic::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAIScoreBasic::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAIScoreBasic::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

QString OAIScoreBasic::getStatus() const {
    return m_status;
}
void OAIScoreBasic::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScoreBasic::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScoreBasic::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIScoreBasic::getUpdated() const {
    return m_updated;
}
void OAIScoreBasic::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIScoreBasic::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIScoreBasic::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIScoreBasic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inning_half_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescheduled_from_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescheduled_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreBasic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
