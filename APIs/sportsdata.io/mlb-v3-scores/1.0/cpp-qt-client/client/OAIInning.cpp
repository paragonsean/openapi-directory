/**
 * MLB v3 Scores
 * MLB scores API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInning::OAIInning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInning::OAIInning() {
    this->initializeModel();
}

OAIInning::~OAIInning() {}

void OAIInning::initializeModel() {

    m_away_team_runs_isSet = false;
    m_away_team_runs_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_home_team_runs_isSet = false;
    m_home_team_runs_isValid = false;

    m_inning_id_isSet = false;
    m_inning_id_isValid = false;

    m_inning_number_isSet = false;
    m_inning_number_isValid = false;
}

void OAIInning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInning::fromJsonObject(QJsonObject json) {

    m_away_team_runs_isValid = ::OpenAPI::fromJsonValue(m_away_team_runs, json[QString("AwayTeamRuns")]);
    m_away_team_runs_isSet = !json[QString("AwayTeamRuns")].isNull() && m_away_team_runs_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_home_team_runs_isValid = ::OpenAPI::fromJsonValue(m_home_team_runs, json[QString("HomeTeamRuns")]);
    m_home_team_runs_isSet = !json[QString("HomeTeamRuns")].isNull() && m_home_team_runs_isValid;

    m_inning_id_isValid = ::OpenAPI::fromJsonValue(m_inning_id, json[QString("InningID")]);
    m_inning_id_isSet = !json[QString("InningID")].isNull() && m_inning_id_isValid;

    m_inning_number_isValid = ::OpenAPI::fromJsonValue(m_inning_number, json[QString("InningNumber")]);
    m_inning_number_isSet = !json[QString("InningNumber")].isNull() && m_inning_number_isValid;
}

QString OAIInning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInning::asJsonObject() const {
    QJsonObject obj;
    if (m_away_team_runs_isSet) {
        obj.insert(QString("AwayTeamRuns"), ::OpenAPI::toJsonValue(m_away_team_runs));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_home_team_runs_isSet) {
        obj.insert(QString("HomeTeamRuns"), ::OpenAPI::toJsonValue(m_home_team_runs));
    }
    if (m_inning_id_isSet) {
        obj.insert(QString("InningID"), ::OpenAPI::toJsonValue(m_inning_id));
    }
    if (m_inning_number_isSet) {
        obj.insert(QString("InningNumber"), ::OpenAPI::toJsonValue(m_inning_number));
    }
    return obj;
}

qint32 OAIInning::getAwayTeamRuns() const {
    return m_away_team_runs;
}
void OAIInning::setAwayTeamRuns(const qint32 &away_team_runs) {
    m_away_team_runs = away_team_runs;
    m_away_team_runs_isSet = true;
}

bool OAIInning::is_away_team_runs_Set() const{
    return m_away_team_runs_isSet;
}

bool OAIInning::is_away_team_runs_Valid() const{
    return m_away_team_runs_isValid;
}

qint32 OAIInning::getGameId() const {
    return m_game_id;
}
void OAIInning::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIInning::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIInning::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIInning::getHomeTeamRuns() const {
    return m_home_team_runs;
}
void OAIInning::setHomeTeamRuns(const qint32 &home_team_runs) {
    m_home_team_runs = home_team_runs;
    m_home_team_runs_isSet = true;
}

bool OAIInning::is_home_team_runs_Set() const{
    return m_home_team_runs_isSet;
}

bool OAIInning::is_home_team_runs_Valid() const{
    return m_home_team_runs_isValid;
}

qint32 OAIInning::getInningId() const {
    return m_inning_id;
}
void OAIInning::setInningId(const qint32 &inning_id) {
    m_inning_id = inning_id;
    m_inning_id_isSet = true;
}

bool OAIInning::is_inning_id_Set() const{
    return m_inning_id_isSet;
}

bool OAIInning::is_inning_id_Valid() const{
    return m_inning_id_isValid;
}

qint32 OAIInning::getInningNumber() const {
    return m_inning_number;
}
void OAIInning::setInningNumber(const qint32 &inning_number) {
    m_inning_number = inning_number;
    m_inning_number_isSet = true;
}

bool OAIInning::is_inning_number_Set() const{
    return m_inning_number_isSet;
}

bool OAIInning::is_inning_number_Valid() const{
    return m_inning_number_isValid;
}

bool OAIInning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_team_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inning_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inning_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInning::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
