/*
 * MLB v3 Scores
 * MLB scores API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:28.482142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Standing {
  public static final String SERIALIZED_NAME_AWAY_LOSSES = "AwayLosses";
  @SerializedName(SERIALIZED_NAME_AWAY_LOSSES)
  private Integer awayLosses;

  public static final String SERIALIZED_NAME_AWAY_WINS = "AwayWins";
  @SerializedName(SERIALIZED_NAME_AWAY_WINS)
  private Integer awayWins;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_DAY_LOSSES = "DayLosses";
  @SerializedName(SERIALIZED_NAME_DAY_LOSSES)
  private Integer dayLosses;

  public static final String SERIALIZED_NAME_DAY_WINS = "DayWins";
  @SerializedName(SERIALIZED_NAME_DAY_WINS)
  private Integer dayWins;

  public static final String SERIALIZED_NAME_DIVISION = "Division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private String division;

  public static final String SERIALIZED_NAME_DIVISION_LOSSES = "DivisionLosses";
  @SerializedName(SERIALIZED_NAME_DIVISION_LOSSES)
  private Integer divisionLosses;

  public static final String SERIALIZED_NAME_DIVISION_RANK = "DivisionRank";
  @SerializedName(SERIALIZED_NAME_DIVISION_RANK)
  private Integer divisionRank;

  public static final String SERIALIZED_NAME_DIVISION_WINS = "DivisionWins";
  @SerializedName(SERIALIZED_NAME_DIVISION_WINS)
  private Integer divisionWins;

  public static final String SERIALIZED_NAME_GAMES_BEHIND = "GamesBehind";
  @SerializedName(SERIALIZED_NAME_GAMES_BEHIND)
  private BigDecimal gamesBehind;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_HOME_LOSSES = "HomeLosses";
  @SerializedName(SERIALIZED_NAME_HOME_LOSSES)
  private Integer homeLosses;

  public static final String SERIALIZED_NAME_HOME_WINS = "HomeWins";
  @SerializedName(SERIALIZED_NAME_HOME_WINS)
  private Integer homeWins;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LAST_TEN_GAMES_LOSSES = "LastTenGamesLosses";
  @SerializedName(SERIALIZED_NAME_LAST_TEN_GAMES_LOSSES)
  private Integer lastTenGamesLosses;

  public static final String SERIALIZED_NAME_LAST_TEN_GAMES_WINS = "LastTenGamesWins";
  @SerializedName(SERIALIZED_NAME_LAST_TEN_GAMES_WINS)
  private Integer lastTenGamesWins;

  public static final String SERIALIZED_NAME_LEAGUE = "League";
  @SerializedName(SERIALIZED_NAME_LEAGUE)
  private String league;

  public static final String SERIALIZED_NAME_LEAGUE_RANK = "LeagueRank";
  @SerializedName(SERIALIZED_NAME_LEAGUE_RANK)
  private Integer leagueRank;

  public static final String SERIALIZED_NAME_LOSSES = "Losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private Integer losses;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NIGHT_LOSSES = "NightLosses";
  @SerializedName(SERIALIZED_NAME_NIGHT_LOSSES)
  private Integer nightLosses;

  public static final String SERIALIZED_NAME_NIGHT_WINS = "NightWins";
  @SerializedName(SERIALIZED_NAME_NIGHT_WINS)
  private Integer nightWins;

  public static final String SERIALIZED_NAME_PERCENTAGE = "Percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private BigDecimal percentage;

  public static final String SERIALIZED_NAME_RUNS_AGAINST = "RunsAgainst";
  @SerializedName(SERIALIZED_NAME_RUNS_AGAINST)
  private Integer runsAgainst;

  public static final String SERIALIZED_NAME_RUNS_SCORED = "RunsScored";
  @SerializedName(SERIALIZED_NAME_RUNS_SCORED)
  private Integer runsScored;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_STREAK = "Streak";
  @SerializedName(SERIALIZED_NAME_STREAK)
  private String streak;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_WILD_CARD_GAMES_BEHIND = "WildCardGamesBehind";
  @SerializedName(SERIALIZED_NAME_WILD_CARD_GAMES_BEHIND)
  private BigDecimal wildCardGamesBehind;

  public static final String SERIALIZED_NAME_WILD_CARD_RANK = "WildCardRank";
  @SerializedName(SERIALIZED_NAME_WILD_CARD_RANK)
  private Integer wildCardRank;

  public static final String SERIALIZED_NAME_WINS = "Wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public Standing() {
  }

  public Standing awayLosses(Integer awayLosses) {
    this.awayLosses = awayLosses;
    return this;
  }

  /**
   * Get awayLosses
   * @return awayLosses
   */
  @javax.annotation.Nullable
  public Integer getAwayLosses() {
    return awayLosses;
  }

  public void setAwayLosses(Integer awayLosses) {
    this.awayLosses = awayLosses;
  }


  public Standing awayWins(Integer awayWins) {
    this.awayWins = awayWins;
    return this;
  }

  /**
   * Get awayWins
   * @return awayWins
   */
  @javax.annotation.Nullable
  public Integer getAwayWins() {
    return awayWins;
  }

  public void setAwayWins(Integer awayWins) {
    this.awayWins = awayWins;
  }


  public Standing city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Standing dayLosses(Integer dayLosses) {
    this.dayLosses = dayLosses;
    return this;
  }

  /**
   * Get dayLosses
   * @return dayLosses
   */
  @javax.annotation.Nullable
  public Integer getDayLosses() {
    return dayLosses;
  }

  public void setDayLosses(Integer dayLosses) {
    this.dayLosses = dayLosses;
  }


  public Standing dayWins(Integer dayWins) {
    this.dayWins = dayWins;
    return this;
  }

  /**
   * Get dayWins
   * @return dayWins
   */
  @javax.annotation.Nullable
  public Integer getDayWins() {
    return dayWins;
  }

  public void setDayWins(Integer dayWins) {
    this.dayWins = dayWins;
  }


  public Standing division(String division) {
    this.division = division;
    return this;
  }

  /**
   * Get division
   * @return division
   */
  @javax.annotation.Nullable
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }


  public Standing divisionLosses(Integer divisionLosses) {
    this.divisionLosses = divisionLosses;
    return this;
  }

  /**
   * Get divisionLosses
   * @return divisionLosses
   */
  @javax.annotation.Nullable
  public Integer getDivisionLosses() {
    return divisionLosses;
  }

  public void setDivisionLosses(Integer divisionLosses) {
    this.divisionLosses = divisionLosses;
  }


  public Standing divisionRank(Integer divisionRank) {
    this.divisionRank = divisionRank;
    return this;
  }

  /**
   * Get divisionRank
   * @return divisionRank
   */
  @javax.annotation.Nullable
  public Integer getDivisionRank() {
    return divisionRank;
  }

  public void setDivisionRank(Integer divisionRank) {
    this.divisionRank = divisionRank;
  }


  public Standing divisionWins(Integer divisionWins) {
    this.divisionWins = divisionWins;
    return this;
  }

  /**
   * Get divisionWins
   * @return divisionWins
   */
  @javax.annotation.Nullable
  public Integer getDivisionWins() {
    return divisionWins;
  }

  public void setDivisionWins(Integer divisionWins) {
    this.divisionWins = divisionWins;
  }


  public Standing gamesBehind(BigDecimal gamesBehind) {
    this.gamesBehind = gamesBehind;
    return this;
  }

  /**
   * Get gamesBehind
   * @return gamesBehind
   */
  @javax.annotation.Nullable
  public BigDecimal getGamesBehind() {
    return gamesBehind;
  }

  public void setGamesBehind(BigDecimal gamesBehind) {
    this.gamesBehind = gamesBehind;
  }


  public Standing globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public Standing homeLosses(Integer homeLosses) {
    this.homeLosses = homeLosses;
    return this;
  }

  /**
   * Get homeLosses
   * @return homeLosses
   */
  @javax.annotation.Nullable
  public Integer getHomeLosses() {
    return homeLosses;
  }

  public void setHomeLosses(Integer homeLosses) {
    this.homeLosses = homeLosses;
  }


  public Standing homeWins(Integer homeWins) {
    this.homeWins = homeWins;
    return this;
  }

  /**
   * Get homeWins
   * @return homeWins
   */
  @javax.annotation.Nullable
  public Integer getHomeWins() {
    return homeWins;
  }

  public void setHomeWins(Integer homeWins) {
    this.homeWins = homeWins;
  }


  public Standing key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Standing lastTenGamesLosses(Integer lastTenGamesLosses) {
    this.lastTenGamesLosses = lastTenGamesLosses;
    return this;
  }

  /**
   * Get lastTenGamesLosses
   * @return lastTenGamesLosses
   */
  @javax.annotation.Nullable
  public Integer getLastTenGamesLosses() {
    return lastTenGamesLosses;
  }

  public void setLastTenGamesLosses(Integer lastTenGamesLosses) {
    this.lastTenGamesLosses = lastTenGamesLosses;
  }


  public Standing lastTenGamesWins(Integer lastTenGamesWins) {
    this.lastTenGamesWins = lastTenGamesWins;
    return this;
  }

  /**
   * Get lastTenGamesWins
   * @return lastTenGamesWins
   */
  @javax.annotation.Nullable
  public Integer getLastTenGamesWins() {
    return lastTenGamesWins;
  }

  public void setLastTenGamesWins(Integer lastTenGamesWins) {
    this.lastTenGamesWins = lastTenGamesWins;
  }


  public Standing league(String league) {
    this.league = league;
    return this;
  }

  /**
   * Get league
   * @return league
   */
  @javax.annotation.Nullable
  public String getLeague() {
    return league;
  }

  public void setLeague(String league) {
    this.league = league;
  }


  public Standing leagueRank(Integer leagueRank) {
    this.leagueRank = leagueRank;
    return this;
  }

  /**
   * Get leagueRank
   * @return leagueRank
   */
  @javax.annotation.Nullable
  public Integer getLeagueRank() {
    return leagueRank;
  }

  public void setLeagueRank(Integer leagueRank) {
    this.leagueRank = leagueRank;
  }


  public Standing losses(Integer losses) {
    this.losses = losses;
    return this;
  }

  /**
   * Get losses
   * @return losses
   */
  @javax.annotation.Nullable
  public Integer getLosses() {
    return losses;
  }

  public void setLosses(Integer losses) {
    this.losses = losses;
  }


  public Standing name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Standing nightLosses(Integer nightLosses) {
    this.nightLosses = nightLosses;
    return this;
  }

  /**
   * Get nightLosses
   * @return nightLosses
   */
  @javax.annotation.Nullable
  public Integer getNightLosses() {
    return nightLosses;
  }

  public void setNightLosses(Integer nightLosses) {
    this.nightLosses = nightLosses;
  }


  public Standing nightWins(Integer nightWins) {
    this.nightWins = nightWins;
    return this;
  }

  /**
   * Get nightWins
   * @return nightWins
   */
  @javax.annotation.Nullable
  public Integer getNightWins() {
    return nightWins;
  }

  public void setNightWins(Integer nightWins) {
    this.nightWins = nightWins;
  }


  public Standing percentage(BigDecimal percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentage() {
    return percentage;
  }

  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }


  public Standing runsAgainst(Integer runsAgainst) {
    this.runsAgainst = runsAgainst;
    return this;
  }

  /**
   * Get runsAgainst
   * @return runsAgainst
   */
  @javax.annotation.Nullable
  public Integer getRunsAgainst() {
    return runsAgainst;
  }

  public void setRunsAgainst(Integer runsAgainst) {
    this.runsAgainst = runsAgainst;
  }


  public Standing runsScored(Integer runsScored) {
    this.runsScored = runsScored;
    return this;
  }

  /**
   * Get runsScored
   * @return runsScored
   */
  @javax.annotation.Nullable
  public Integer getRunsScored() {
    return runsScored;
  }

  public void setRunsScored(Integer runsScored) {
    this.runsScored = runsScored;
  }


  public Standing season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Standing seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Standing streak(String streak) {
    this.streak = streak;
    return this;
  }

  /**
   * Get streak
   * @return streak
   */
  @javax.annotation.Nullable
  public String getStreak() {
    return streak;
  }

  public void setStreak(String streak) {
    this.streak = streak;
  }


  public Standing teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Standing wildCardGamesBehind(BigDecimal wildCardGamesBehind) {
    this.wildCardGamesBehind = wildCardGamesBehind;
    return this;
  }

  /**
   * Get wildCardGamesBehind
   * @return wildCardGamesBehind
   */
  @javax.annotation.Nullable
  public BigDecimal getWildCardGamesBehind() {
    return wildCardGamesBehind;
  }

  public void setWildCardGamesBehind(BigDecimal wildCardGamesBehind) {
    this.wildCardGamesBehind = wildCardGamesBehind;
  }


  public Standing wildCardRank(Integer wildCardRank) {
    this.wildCardRank = wildCardRank;
    return this;
  }

  /**
   * Get wildCardRank
   * @return wildCardRank
   */
  @javax.annotation.Nullable
  public Integer getWildCardRank() {
    return wildCardRank;
  }

  public void setWildCardRank(Integer wildCardRank) {
    this.wildCardRank = wildCardRank;
  }


  public Standing wins(Integer wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Standing standing = (Standing) o;
    return Objects.equals(this.awayLosses, standing.awayLosses) &&
        Objects.equals(this.awayWins, standing.awayWins) &&
        Objects.equals(this.city, standing.city) &&
        Objects.equals(this.dayLosses, standing.dayLosses) &&
        Objects.equals(this.dayWins, standing.dayWins) &&
        Objects.equals(this.division, standing.division) &&
        Objects.equals(this.divisionLosses, standing.divisionLosses) &&
        Objects.equals(this.divisionRank, standing.divisionRank) &&
        Objects.equals(this.divisionWins, standing.divisionWins) &&
        Objects.equals(this.gamesBehind, standing.gamesBehind) &&
        Objects.equals(this.globalTeamID, standing.globalTeamID) &&
        Objects.equals(this.homeLosses, standing.homeLosses) &&
        Objects.equals(this.homeWins, standing.homeWins) &&
        Objects.equals(this.key, standing.key) &&
        Objects.equals(this.lastTenGamesLosses, standing.lastTenGamesLosses) &&
        Objects.equals(this.lastTenGamesWins, standing.lastTenGamesWins) &&
        Objects.equals(this.league, standing.league) &&
        Objects.equals(this.leagueRank, standing.leagueRank) &&
        Objects.equals(this.losses, standing.losses) &&
        Objects.equals(this.name, standing.name) &&
        Objects.equals(this.nightLosses, standing.nightLosses) &&
        Objects.equals(this.nightWins, standing.nightWins) &&
        Objects.equals(this.percentage, standing.percentage) &&
        Objects.equals(this.runsAgainst, standing.runsAgainst) &&
        Objects.equals(this.runsScored, standing.runsScored) &&
        Objects.equals(this.season, standing.season) &&
        Objects.equals(this.seasonType, standing.seasonType) &&
        Objects.equals(this.streak, standing.streak) &&
        Objects.equals(this.teamID, standing.teamID) &&
        Objects.equals(this.wildCardGamesBehind, standing.wildCardGamesBehind) &&
        Objects.equals(this.wildCardRank, standing.wildCardRank) &&
        Objects.equals(this.wins, standing.wins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayLosses, awayWins, city, dayLosses, dayWins, division, divisionLosses, divisionRank, divisionWins, gamesBehind, globalTeamID, homeLosses, homeWins, key, lastTenGamesLosses, lastTenGamesWins, league, leagueRank, losses, name, nightLosses, nightWins, percentage, runsAgainst, runsScored, season, seasonType, streak, teamID, wildCardGamesBehind, wildCardRank, wins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Standing {\n");
    sb.append("    awayLosses: ").append(toIndentedString(awayLosses)).append("\n");
    sb.append("    awayWins: ").append(toIndentedString(awayWins)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    dayLosses: ").append(toIndentedString(dayLosses)).append("\n");
    sb.append("    dayWins: ").append(toIndentedString(dayWins)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    divisionLosses: ").append(toIndentedString(divisionLosses)).append("\n");
    sb.append("    divisionRank: ").append(toIndentedString(divisionRank)).append("\n");
    sb.append("    divisionWins: ").append(toIndentedString(divisionWins)).append("\n");
    sb.append("    gamesBehind: ").append(toIndentedString(gamesBehind)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    homeLosses: ").append(toIndentedString(homeLosses)).append("\n");
    sb.append("    homeWins: ").append(toIndentedString(homeWins)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastTenGamesLosses: ").append(toIndentedString(lastTenGamesLosses)).append("\n");
    sb.append("    lastTenGamesWins: ").append(toIndentedString(lastTenGamesWins)).append("\n");
    sb.append("    league: ").append(toIndentedString(league)).append("\n");
    sb.append("    leagueRank: ").append(toIndentedString(leagueRank)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nightLosses: ").append(toIndentedString(nightLosses)).append("\n");
    sb.append("    nightWins: ").append(toIndentedString(nightWins)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    runsAgainst: ").append(toIndentedString(runsAgainst)).append("\n");
    sb.append("    runsScored: ").append(toIndentedString(runsScored)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    streak: ").append(toIndentedString(streak)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    wildCardGamesBehind: ").append(toIndentedString(wildCardGamesBehind)).append("\n");
    sb.append("    wildCardRank: ").append(toIndentedString(wildCardRank)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AwayLosses");
    openapiFields.add("AwayWins");
    openapiFields.add("City");
    openapiFields.add("DayLosses");
    openapiFields.add("DayWins");
    openapiFields.add("Division");
    openapiFields.add("DivisionLosses");
    openapiFields.add("DivisionRank");
    openapiFields.add("DivisionWins");
    openapiFields.add("GamesBehind");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("HomeLosses");
    openapiFields.add("HomeWins");
    openapiFields.add("Key");
    openapiFields.add("LastTenGamesLosses");
    openapiFields.add("LastTenGamesWins");
    openapiFields.add("League");
    openapiFields.add("LeagueRank");
    openapiFields.add("Losses");
    openapiFields.add("Name");
    openapiFields.add("NightLosses");
    openapiFields.add("NightWins");
    openapiFields.add("Percentage");
    openapiFields.add("RunsAgainst");
    openapiFields.add("RunsScored");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Streak");
    openapiFields.add("TeamID");
    openapiFields.add("WildCardGamesBehind");
    openapiFields.add("WildCardRank");
    openapiFields.add("Wins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Standing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Standing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Standing is not found in the empty JSON string", Standing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Standing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Standing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("Division") != null && !jsonObj.get("Division").isJsonNull()) && !jsonObj.get("Division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Division").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      if ((jsonObj.get("League") != null && !jsonObj.get("League").isJsonNull()) && !jsonObj.get("League").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `League` to be a primitive type in the JSON string but got `%s`", jsonObj.get("League").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Streak") != null && !jsonObj.get("Streak").isJsonNull()) && !jsonObj.get("Streak").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Streak` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Streak").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Standing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Standing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Standing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Standing.class));

       return (TypeAdapter<T>) new TypeAdapter<Standing>() {
           @Override
           public void write(JsonWriter out, Standing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Standing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Standing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Standing
   * @throws IOException if the JSON string is invalid with respect to Standing
   */
  public static Standing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Standing.class);
  }

  /**
   * Convert an instance of Standing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

