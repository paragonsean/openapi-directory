/*
 * MLB v3 Scores
 * MLB scores API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Series;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScoreBasic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:28.482142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreBasic {
  public static final String SERIALIZED_NAME_ATTENDANCE = "Attendance";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE)
  private Integer attendance;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "AwayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_AWAY_TEAM_ERRORS = "AwayTeamErrors";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_ERRORS)
  private Integer awayTeamErrors;

  public static final String SERIALIZED_NAME_AWAY_TEAM_HITS = "AwayTeamHits";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_HITS)
  private Integer awayTeamHits;

  public static final String SERIALIZED_NAME_AWAY_TEAM_I_D = "AwayTeamID";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_I_D)
  private Integer awayTeamID;

  public static final String SERIALIZED_NAME_AWAY_TEAM_RUNS = "AwayTeamRuns";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_RUNS)
  private Integer awayTeamRuns;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DATE_TIME_U_T_C = "DateTimeUTC";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_U_T_C)
  private String dateTimeUTC;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_GAME_END_DATE_TIME = "GameEndDateTime";
  @SerializedName(SERIALIZED_NAME_GAME_END_DATE_TIME)
  private String gameEndDateTime;

  public static final String SERIALIZED_NAME_GAME_I_D = "GameID";
  @SerializedName(SERIALIZED_NAME_GAME_I_D)
  private Integer gameID;

  public static final String SERIALIZED_NAME_GLOBAL_AWAY_TEAM_I_D = "GlobalAwayTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_AWAY_TEAM_I_D)
  private Integer globalAwayTeamID;

  public static final String SERIALIZED_NAME_GLOBAL_GAME_I_D = "GlobalGameID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_GAME_I_D)
  private Integer globalGameID;

  public static final String SERIALIZED_NAME_GLOBAL_HOME_TEAM_I_D = "GlobalHomeTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_HOME_TEAM_I_D)
  private Integer globalHomeTeamID;

  public static final String SERIALIZED_NAME_HOME_TEAM = "HomeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_HOME_TEAM_ERRORS = "HomeTeamErrors";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_ERRORS)
  private Integer homeTeamErrors;

  public static final String SERIALIZED_NAME_HOME_TEAM_HITS = "HomeTeamHits";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_HITS)
  private Integer homeTeamHits;

  public static final String SERIALIZED_NAME_HOME_TEAM_I_D = "HomeTeamID";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_I_D)
  private Integer homeTeamID;

  public static final String SERIALIZED_NAME_HOME_TEAM_RUNS = "HomeTeamRuns";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_RUNS)
  private Integer homeTeamRuns;

  public static final String SERIALIZED_NAME_INNING = "Inning";
  @SerializedName(SERIALIZED_NAME_INNING)
  private Integer inning;

  public static final String SERIALIZED_NAME_INNING_HALF = "InningHalf";
  @SerializedName(SERIALIZED_NAME_INNING_HALF)
  private String inningHalf;

  public static final String SERIALIZED_NAME_IS_CLOSED = "IsClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_NEUTRAL_VENUE = "NeutralVenue";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_VENUE)
  private Boolean neutralVenue;

  public static final String SERIALIZED_NAME_RESCHEDULED_FROM_GAME_I_D = "RescheduledFromGameID";
  @SerializedName(SERIALIZED_NAME_RESCHEDULED_FROM_GAME_I_D)
  private Integer rescheduledFromGameID;

  public static final String SERIALIZED_NAME_RESCHEDULED_GAME_I_D = "RescheduledGameID";
  @SerializedName(SERIALIZED_NAME_RESCHEDULED_GAME_I_D)
  private Integer rescheduledGameID;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_SERIES_INFO = "SeriesInfo";
  @SerializedName(SERIALIZED_NAME_SERIES_INFO)
  private Series seriesInfo;

  public static final String SERIALIZED_NAME_STADIUM_I_D = "StadiumID";
  @SerializedName(SERIALIZED_NAME_STADIUM_I_D)
  private Integer stadiumID;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public ScoreBasic() {
  }

  public ScoreBasic attendance(Integer attendance) {
    this.attendance = attendance;
    return this;
  }

  /**
   * Get attendance
   * @return attendance
   */
  @javax.annotation.Nullable
  public Integer getAttendance() {
    return attendance;
  }

  public void setAttendance(Integer attendance) {
    this.attendance = attendance;
  }


  public ScoreBasic awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public ScoreBasic awayTeamErrors(Integer awayTeamErrors) {
    this.awayTeamErrors = awayTeamErrors;
    return this;
  }

  /**
   * Get awayTeamErrors
   * @return awayTeamErrors
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamErrors() {
    return awayTeamErrors;
  }

  public void setAwayTeamErrors(Integer awayTeamErrors) {
    this.awayTeamErrors = awayTeamErrors;
  }


  public ScoreBasic awayTeamHits(Integer awayTeamHits) {
    this.awayTeamHits = awayTeamHits;
    return this;
  }

  /**
   * Get awayTeamHits
   * @return awayTeamHits
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamHits() {
    return awayTeamHits;
  }

  public void setAwayTeamHits(Integer awayTeamHits) {
    this.awayTeamHits = awayTeamHits;
  }


  public ScoreBasic awayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
    return this;
  }

  /**
   * Get awayTeamID
   * @return awayTeamID
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamID() {
    return awayTeamID;
  }

  public void setAwayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
  }


  public ScoreBasic awayTeamRuns(Integer awayTeamRuns) {
    this.awayTeamRuns = awayTeamRuns;
    return this;
  }

  /**
   * Get awayTeamRuns
   * @return awayTeamRuns
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamRuns() {
    return awayTeamRuns;
  }

  public void setAwayTeamRuns(Integer awayTeamRuns) {
    this.awayTeamRuns = awayTeamRuns;
  }


  public ScoreBasic dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public ScoreBasic dateTimeUTC(String dateTimeUTC) {
    this.dateTimeUTC = dateTimeUTC;
    return this;
  }

  /**
   * Get dateTimeUTC
   * @return dateTimeUTC
   */
  @javax.annotation.Nullable
  public String getDateTimeUTC() {
    return dateTimeUTC;
  }

  public void setDateTimeUTC(String dateTimeUTC) {
    this.dateTimeUTC = dateTimeUTC;
  }


  public ScoreBasic day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public ScoreBasic gameEndDateTime(String gameEndDateTime) {
    this.gameEndDateTime = gameEndDateTime;
    return this;
  }

  /**
   * Get gameEndDateTime
   * @return gameEndDateTime
   */
  @javax.annotation.Nullable
  public String getGameEndDateTime() {
    return gameEndDateTime;
  }

  public void setGameEndDateTime(String gameEndDateTime) {
    this.gameEndDateTime = gameEndDateTime;
  }


  public ScoreBasic gameID(Integer gameID) {
    this.gameID = gameID;
    return this;
  }

  /**
   * Get gameID
   * @return gameID
   */
  @javax.annotation.Nullable
  public Integer getGameID() {
    return gameID;
  }

  public void setGameID(Integer gameID) {
    this.gameID = gameID;
  }


  public ScoreBasic globalAwayTeamID(Integer globalAwayTeamID) {
    this.globalAwayTeamID = globalAwayTeamID;
    return this;
  }

  /**
   * Get globalAwayTeamID
   * @return globalAwayTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalAwayTeamID() {
    return globalAwayTeamID;
  }

  public void setGlobalAwayTeamID(Integer globalAwayTeamID) {
    this.globalAwayTeamID = globalAwayTeamID;
  }


  public ScoreBasic globalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
    return this;
  }

  /**
   * Get globalGameID
   * @return globalGameID
   */
  @javax.annotation.Nullable
  public Integer getGlobalGameID() {
    return globalGameID;
  }

  public void setGlobalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
  }


  public ScoreBasic globalHomeTeamID(Integer globalHomeTeamID) {
    this.globalHomeTeamID = globalHomeTeamID;
    return this;
  }

  /**
   * Get globalHomeTeamID
   * @return globalHomeTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalHomeTeamID() {
    return globalHomeTeamID;
  }

  public void setGlobalHomeTeamID(Integer globalHomeTeamID) {
    this.globalHomeTeamID = globalHomeTeamID;
  }


  public ScoreBasic homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public ScoreBasic homeTeamErrors(Integer homeTeamErrors) {
    this.homeTeamErrors = homeTeamErrors;
    return this;
  }

  /**
   * Get homeTeamErrors
   * @return homeTeamErrors
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamErrors() {
    return homeTeamErrors;
  }

  public void setHomeTeamErrors(Integer homeTeamErrors) {
    this.homeTeamErrors = homeTeamErrors;
  }


  public ScoreBasic homeTeamHits(Integer homeTeamHits) {
    this.homeTeamHits = homeTeamHits;
    return this;
  }

  /**
   * Get homeTeamHits
   * @return homeTeamHits
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamHits() {
    return homeTeamHits;
  }

  public void setHomeTeamHits(Integer homeTeamHits) {
    this.homeTeamHits = homeTeamHits;
  }


  public ScoreBasic homeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
    return this;
  }

  /**
   * Get homeTeamID
   * @return homeTeamID
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamID() {
    return homeTeamID;
  }

  public void setHomeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
  }


  public ScoreBasic homeTeamRuns(Integer homeTeamRuns) {
    this.homeTeamRuns = homeTeamRuns;
    return this;
  }

  /**
   * Get homeTeamRuns
   * @return homeTeamRuns
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamRuns() {
    return homeTeamRuns;
  }

  public void setHomeTeamRuns(Integer homeTeamRuns) {
    this.homeTeamRuns = homeTeamRuns;
  }


  public ScoreBasic inning(Integer inning) {
    this.inning = inning;
    return this;
  }

  /**
   * Get inning
   * @return inning
   */
  @javax.annotation.Nullable
  public Integer getInning() {
    return inning;
  }

  public void setInning(Integer inning) {
    this.inning = inning;
  }


  public ScoreBasic inningHalf(String inningHalf) {
    this.inningHalf = inningHalf;
    return this;
  }

  /**
   * Get inningHalf
   * @return inningHalf
   */
  @javax.annotation.Nullable
  public String getInningHalf() {
    return inningHalf;
  }

  public void setInningHalf(String inningHalf) {
    this.inningHalf = inningHalf;
  }


  public ScoreBasic isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public ScoreBasic neutralVenue(Boolean neutralVenue) {
    this.neutralVenue = neutralVenue;
    return this;
  }

  /**
   * Get neutralVenue
   * @return neutralVenue
   */
  @javax.annotation.Nullable
  public Boolean getNeutralVenue() {
    return neutralVenue;
  }

  public void setNeutralVenue(Boolean neutralVenue) {
    this.neutralVenue = neutralVenue;
  }


  public ScoreBasic rescheduledFromGameID(Integer rescheduledFromGameID) {
    this.rescheduledFromGameID = rescheduledFromGameID;
    return this;
  }

  /**
   * Get rescheduledFromGameID
   * @return rescheduledFromGameID
   */
  @javax.annotation.Nullable
  public Integer getRescheduledFromGameID() {
    return rescheduledFromGameID;
  }

  public void setRescheduledFromGameID(Integer rescheduledFromGameID) {
    this.rescheduledFromGameID = rescheduledFromGameID;
  }


  public ScoreBasic rescheduledGameID(Integer rescheduledGameID) {
    this.rescheduledGameID = rescheduledGameID;
    return this;
  }

  /**
   * Get rescheduledGameID
   * @return rescheduledGameID
   */
  @javax.annotation.Nullable
  public Integer getRescheduledGameID() {
    return rescheduledGameID;
  }

  public void setRescheduledGameID(Integer rescheduledGameID) {
    this.rescheduledGameID = rescheduledGameID;
  }


  public ScoreBasic season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public ScoreBasic seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public ScoreBasic seriesInfo(Series seriesInfo) {
    this.seriesInfo = seriesInfo;
    return this;
  }

  /**
   * Get seriesInfo
   * @return seriesInfo
   */
  @javax.annotation.Nullable
  public Series getSeriesInfo() {
    return seriesInfo;
  }

  public void setSeriesInfo(Series seriesInfo) {
    this.seriesInfo = seriesInfo;
  }


  public ScoreBasic stadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
    return this;
  }

  /**
   * Get stadiumID
   * @return stadiumID
   */
  @javax.annotation.Nullable
  public Integer getStadiumID() {
    return stadiumID;
  }

  public void setStadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
  }


  public ScoreBasic status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ScoreBasic updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreBasic scoreBasic = (ScoreBasic) o;
    return Objects.equals(this.attendance, scoreBasic.attendance) &&
        Objects.equals(this.awayTeam, scoreBasic.awayTeam) &&
        Objects.equals(this.awayTeamErrors, scoreBasic.awayTeamErrors) &&
        Objects.equals(this.awayTeamHits, scoreBasic.awayTeamHits) &&
        Objects.equals(this.awayTeamID, scoreBasic.awayTeamID) &&
        Objects.equals(this.awayTeamRuns, scoreBasic.awayTeamRuns) &&
        Objects.equals(this.dateTime, scoreBasic.dateTime) &&
        Objects.equals(this.dateTimeUTC, scoreBasic.dateTimeUTC) &&
        Objects.equals(this.day, scoreBasic.day) &&
        Objects.equals(this.gameEndDateTime, scoreBasic.gameEndDateTime) &&
        Objects.equals(this.gameID, scoreBasic.gameID) &&
        Objects.equals(this.globalAwayTeamID, scoreBasic.globalAwayTeamID) &&
        Objects.equals(this.globalGameID, scoreBasic.globalGameID) &&
        Objects.equals(this.globalHomeTeamID, scoreBasic.globalHomeTeamID) &&
        Objects.equals(this.homeTeam, scoreBasic.homeTeam) &&
        Objects.equals(this.homeTeamErrors, scoreBasic.homeTeamErrors) &&
        Objects.equals(this.homeTeamHits, scoreBasic.homeTeamHits) &&
        Objects.equals(this.homeTeamID, scoreBasic.homeTeamID) &&
        Objects.equals(this.homeTeamRuns, scoreBasic.homeTeamRuns) &&
        Objects.equals(this.inning, scoreBasic.inning) &&
        Objects.equals(this.inningHalf, scoreBasic.inningHalf) &&
        Objects.equals(this.isClosed, scoreBasic.isClosed) &&
        Objects.equals(this.neutralVenue, scoreBasic.neutralVenue) &&
        Objects.equals(this.rescheduledFromGameID, scoreBasic.rescheduledFromGameID) &&
        Objects.equals(this.rescheduledGameID, scoreBasic.rescheduledGameID) &&
        Objects.equals(this.season, scoreBasic.season) &&
        Objects.equals(this.seasonType, scoreBasic.seasonType) &&
        Objects.equals(this.seriesInfo, scoreBasic.seriesInfo) &&
        Objects.equals(this.stadiumID, scoreBasic.stadiumID) &&
        Objects.equals(this.status, scoreBasic.status) &&
        Objects.equals(this.updated, scoreBasic.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendance, awayTeam, awayTeamErrors, awayTeamHits, awayTeamID, awayTeamRuns, dateTime, dateTimeUTC, day, gameEndDateTime, gameID, globalAwayTeamID, globalGameID, globalHomeTeamID, homeTeam, homeTeamErrors, homeTeamHits, homeTeamID, homeTeamRuns, inning, inningHalf, isClosed, neutralVenue, rescheduledFromGameID, rescheduledGameID, season, seasonType, seriesInfo, stadiumID, status, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreBasic {\n");
    sb.append("    attendance: ").append(toIndentedString(attendance)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    awayTeamErrors: ").append(toIndentedString(awayTeamErrors)).append("\n");
    sb.append("    awayTeamHits: ").append(toIndentedString(awayTeamHits)).append("\n");
    sb.append("    awayTeamID: ").append(toIndentedString(awayTeamID)).append("\n");
    sb.append("    awayTeamRuns: ").append(toIndentedString(awayTeamRuns)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    dateTimeUTC: ").append(toIndentedString(dateTimeUTC)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    gameEndDateTime: ").append(toIndentedString(gameEndDateTime)).append("\n");
    sb.append("    gameID: ").append(toIndentedString(gameID)).append("\n");
    sb.append("    globalAwayTeamID: ").append(toIndentedString(globalAwayTeamID)).append("\n");
    sb.append("    globalGameID: ").append(toIndentedString(globalGameID)).append("\n");
    sb.append("    globalHomeTeamID: ").append(toIndentedString(globalHomeTeamID)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    homeTeamErrors: ").append(toIndentedString(homeTeamErrors)).append("\n");
    sb.append("    homeTeamHits: ").append(toIndentedString(homeTeamHits)).append("\n");
    sb.append("    homeTeamID: ").append(toIndentedString(homeTeamID)).append("\n");
    sb.append("    homeTeamRuns: ").append(toIndentedString(homeTeamRuns)).append("\n");
    sb.append("    inning: ").append(toIndentedString(inning)).append("\n");
    sb.append("    inningHalf: ").append(toIndentedString(inningHalf)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    neutralVenue: ").append(toIndentedString(neutralVenue)).append("\n");
    sb.append("    rescheduledFromGameID: ").append(toIndentedString(rescheduledFromGameID)).append("\n");
    sb.append("    rescheduledGameID: ").append(toIndentedString(rescheduledGameID)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    seriesInfo: ").append(toIndentedString(seriesInfo)).append("\n");
    sb.append("    stadiumID: ").append(toIndentedString(stadiumID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attendance");
    openapiFields.add("AwayTeam");
    openapiFields.add("AwayTeamErrors");
    openapiFields.add("AwayTeamHits");
    openapiFields.add("AwayTeamID");
    openapiFields.add("AwayTeamRuns");
    openapiFields.add("DateTime");
    openapiFields.add("DateTimeUTC");
    openapiFields.add("Day");
    openapiFields.add("GameEndDateTime");
    openapiFields.add("GameID");
    openapiFields.add("GlobalAwayTeamID");
    openapiFields.add("GlobalGameID");
    openapiFields.add("GlobalHomeTeamID");
    openapiFields.add("HomeTeam");
    openapiFields.add("HomeTeamErrors");
    openapiFields.add("HomeTeamHits");
    openapiFields.add("HomeTeamID");
    openapiFields.add("HomeTeamRuns");
    openapiFields.add("Inning");
    openapiFields.add("InningHalf");
    openapiFields.add("IsClosed");
    openapiFields.add("NeutralVenue");
    openapiFields.add("RescheduledFromGameID");
    openapiFields.add("RescheduledGameID");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("SeriesInfo");
    openapiFields.add("StadiumID");
    openapiFields.add("Status");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreBasic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreBasic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreBasic is not found in the empty JSON string", ScoreBasic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreBasic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreBasic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AwayTeam") != null && !jsonObj.get("AwayTeam").isJsonNull()) && !jsonObj.get("AwayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeam").toString()));
      }
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("DateTimeUTC") != null && !jsonObj.get("DateTimeUTC").isJsonNull()) && !jsonObj.get("DateTimeUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTimeUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTimeUTC").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("GameEndDateTime") != null && !jsonObj.get("GameEndDateTime").isJsonNull()) && !jsonObj.get("GameEndDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GameEndDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GameEndDateTime").toString()));
      }
      if ((jsonObj.get("HomeTeam") != null && !jsonObj.get("HomeTeam").isJsonNull()) && !jsonObj.get("HomeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeam").toString()));
      }
      if ((jsonObj.get("InningHalf") != null && !jsonObj.get("InningHalf").isJsonNull()) && !jsonObj.get("InningHalf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InningHalf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InningHalf").toString()));
      }
      // validate the optional field `SeriesInfo`
      if (jsonObj.get("SeriesInfo") != null && !jsonObj.get("SeriesInfo").isJsonNull()) {
        Series.validateJsonElement(jsonObj.get("SeriesInfo"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreBasic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreBasic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreBasic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreBasic.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreBasic>() {
           @Override
           public void write(JsonWriter out, ScoreBasic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreBasic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreBasic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreBasic
   * @throws IOException if the JSON string is invalid with respect to ScoreBasic
   */
  public static ScoreBasic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreBasic.class);
  }

  /**
   * Convert an instance of ScoreBasic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

