/**
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Leaderboard model module.
 * @module model/Leaderboard
 * @version 1.0
 */
class Leaderboard {
    /**
     * Constructs a new <code>Leaderboard</code>.
     * @alias module:model/Leaderboard
     */
    constructor() { 
        
        Leaderboard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Leaderboard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Leaderboard} obj Optional instance to populate.
     * @return {module:model/Leaderboard} The populated <code>Leaderboard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Leaderboard();

            if (data.hasOwnProperty('Aces')) {
                obj['Aces'] = ApiClient.convertToType(data['Aces'], 'Number');
            }
            if (data.hasOwnProperty('Assists')) {
                obj['Assists'] = ApiClient.convertToType(data['Assists'], 'Number');
            }
            if (data.hasOwnProperty('AverageDamagePerRound')) {
                obj['AverageDamagePerRound'] = ApiClient.convertToType(data['AverageDamagePerRound'], 'Number');
            }
            if (data.hasOwnProperty('Clutch1v2s')) {
                obj['Clutch1v2s'] = ApiClient.convertToType(data['Clutch1v2s'], 'Number');
            }
            if (data.hasOwnProperty('Clutch1v3s')) {
                obj['Clutch1v3s'] = ApiClient.convertToType(data['Clutch1v3s'], 'Number');
            }
            if (data.hasOwnProperty('Clutch1v4s')) {
                obj['Clutch1v4s'] = ApiClient.convertToType(data['Clutch1v4s'], 'Number');
            }
            if (data.hasOwnProperty('Clutch1v5s')) {
                obj['Clutch1v5s'] = ApiClient.convertToType(data['Clutch1v5s'], 'Number');
            }
            if (data.hasOwnProperty('DateTime')) {
                obj['DateTime'] = ApiClient.convertToType(data['DateTime'], 'String');
            }
            if (data.hasOwnProperty('Day')) {
                obj['Day'] = ApiClient.convertToType(data['Day'], 'String');
            }
            if (data.hasOwnProperty('Deaths')) {
                obj['Deaths'] = ApiClient.convertToType(data['Deaths'], 'Number');
            }
            if (data.hasOwnProperty('EntryKills')) {
                obj['EntryKills'] = ApiClient.convertToType(data['EntryKills'], 'Number');
            }
            if (data.hasOwnProperty('FantasyPoints')) {
                obj['FantasyPoints'] = ApiClient.convertToType(data['FantasyPoints'], 'Number');
            }
            if (data.hasOwnProperty('GameId')) {
                obj['GameId'] = ApiClient.convertToType(data['GameId'], 'Number');
            }
            if (data.hasOwnProperty('Games')) {
                obj['Games'] = ApiClient.convertToType(data['Games'], 'Number');
            }
            if (data.hasOwnProperty('Headshots')) {
                obj['Headshots'] = ApiClient.convertToType(data['Headshots'], 'Number');
            }
            if (data.hasOwnProperty('IsClosed')) {
                obj['IsClosed'] = ApiClient.convertToType(data['IsClosed'], 'Boolean');
            }
            if (data.hasOwnProperty('Kast')) {
                obj['Kast'] = ApiClient.convertToType(data['Kast'], 'Number');
            }
            if (data.hasOwnProperty('Kills')) {
                obj['Kills'] = ApiClient.convertToType(data['Kills'], 'Number');
            }
            if (data.hasOwnProperty('Maps')) {
                obj['Maps'] = ApiClient.convertToType(data['Maps'], 'Number');
            }
            if (data.hasOwnProperty('MatchName')) {
                obj['MatchName'] = ApiClient.convertToType(data['MatchName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Opponent')) {
                obj['Opponent'] = ApiClient.convertToType(data['Opponent'], 'String');
            }
            if (data.hasOwnProperty('OpponentId')) {
                obj['OpponentId'] = ApiClient.convertToType(data['OpponentId'], 'Number');
            }
            if (data.hasOwnProperty('PlayerId')) {
                obj['PlayerId'] = ApiClient.convertToType(data['PlayerId'], 'Number');
            }
            if (data.hasOwnProperty('QuadKills')) {
                obj['QuadKills'] = ApiClient.convertToType(data['QuadKills'], 'Number');
            }
            if (data.hasOwnProperty('Rating')) {
                obj['Rating'] = ApiClient.convertToType(data['Rating'], 'Number');
            }
            if (data.hasOwnProperty('Team')) {
                obj['Team'] = ApiClient.convertToType(data['Team'], 'String');
            }
            if (data.hasOwnProperty('TeamId')) {
                obj['TeamId'] = ApiClient.convertToType(data['TeamId'], 'Number');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
            if (data.hasOwnProperty('UpdatedUtc')) {
                obj['UpdatedUtc'] = ApiClient.convertToType(data['UpdatedUtc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Leaderboard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Leaderboard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DateTime'] && !(typeof data['DateTime'] === 'string' || data['DateTime'] instanceof String)) {
            throw new Error("Expected the field `DateTime` to be a primitive type in the JSON string but got " + data['DateTime']);
        }
        // ensure the json data is a string
        if (data['Day'] && !(typeof data['Day'] === 'string' || data['Day'] instanceof String)) {
            throw new Error("Expected the field `Day` to be a primitive type in the JSON string but got " + data['Day']);
        }
        // ensure the json data is a string
        if (data['MatchName'] && !(typeof data['MatchName'] === 'string' || data['MatchName'] instanceof String)) {
            throw new Error("Expected the field `MatchName` to be a primitive type in the JSON string but got " + data['MatchName']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Opponent'] && !(typeof data['Opponent'] === 'string' || data['Opponent'] instanceof String)) {
            throw new Error("Expected the field `Opponent` to be a primitive type in the JSON string but got " + data['Opponent']);
        }
        // ensure the json data is a string
        if (data['Team'] && !(typeof data['Team'] === 'string' || data['Team'] instanceof String)) {
            throw new Error("Expected the field `Team` to be a primitive type in the JSON string but got " + data['Team']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }
        // ensure the json data is a string
        if (data['UpdatedUtc'] && !(typeof data['UpdatedUtc'] === 'string' || data['UpdatedUtc'] instanceof String)) {
            throw new Error("Expected the field `UpdatedUtc` to be a primitive type in the JSON string but got " + data['UpdatedUtc']);
        }

        return true;
    }


}



/**
 * @member {Number} Aces
 */
Leaderboard.prototype['Aces'] = undefined;

/**
 * @member {Number} Assists
 */
Leaderboard.prototype['Assists'] = undefined;

/**
 * @member {Number} AverageDamagePerRound
 */
Leaderboard.prototype['AverageDamagePerRound'] = undefined;

/**
 * @member {Number} Clutch1v2s
 */
Leaderboard.prototype['Clutch1v2s'] = undefined;

/**
 * @member {Number} Clutch1v3s
 */
Leaderboard.prototype['Clutch1v3s'] = undefined;

/**
 * @member {Number} Clutch1v4s
 */
Leaderboard.prototype['Clutch1v4s'] = undefined;

/**
 * @member {Number} Clutch1v5s
 */
Leaderboard.prototype['Clutch1v5s'] = undefined;

/**
 * @member {String} DateTime
 */
Leaderboard.prototype['DateTime'] = undefined;

/**
 * @member {String} Day
 */
Leaderboard.prototype['Day'] = undefined;

/**
 * @member {Number} Deaths
 */
Leaderboard.prototype['Deaths'] = undefined;

/**
 * @member {Number} EntryKills
 */
Leaderboard.prototype['EntryKills'] = undefined;

/**
 * @member {Number} FantasyPoints
 */
Leaderboard.prototype['FantasyPoints'] = undefined;

/**
 * @member {Number} GameId
 */
Leaderboard.prototype['GameId'] = undefined;

/**
 * @member {Number} Games
 */
Leaderboard.prototype['Games'] = undefined;

/**
 * @member {Number} Headshots
 */
Leaderboard.prototype['Headshots'] = undefined;

/**
 * @member {Boolean} IsClosed
 */
Leaderboard.prototype['IsClosed'] = undefined;

/**
 * @member {Number} Kast
 */
Leaderboard.prototype['Kast'] = undefined;

/**
 * @member {Number} Kills
 */
Leaderboard.prototype['Kills'] = undefined;

/**
 * @member {Number} Maps
 */
Leaderboard.prototype['Maps'] = undefined;

/**
 * @member {String} MatchName
 */
Leaderboard.prototype['MatchName'] = undefined;

/**
 * @member {String} Name
 */
Leaderboard.prototype['Name'] = undefined;

/**
 * @member {String} Opponent
 */
Leaderboard.prototype['Opponent'] = undefined;

/**
 * @member {Number} OpponentId
 */
Leaderboard.prototype['OpponentId'] = undefined;

/**
 * @member {Number} PlayerId
 */
Leaderboard.prototype['PlayerId'] = undefined;

/**
 * @member {Number} QuadKills
 */
Leaderboard.prototype['QuadKills'] = undefined;

/**
 * @member {Number} Rating
 */
Leaderboard.prototype['Rating'] = undefined;

/**
 * @member {String} Team
 */
Leaderboard.prototype['Team'] = undefined;

/**
 * @member {Number} TeamId
 */
Leaderboard.prototype['TeamId'] = undefined;

/**
 * @member {String} Updated
 */
Leaderboard.prototype['Updated'] = undefined;

/**
 * @member {String} UpdatedUtc
 */
Leaderboard.prototype['UpdatedUtc'] = undefined;






export default Leaderboard;

