# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Venue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, capacity: int=None, city: str=None, country: str=None, geo_lat: float=None, geo_long: float=None, name: str=None, nickname1: str=None, nickname2: str=None, open: bool=None, opened: int=None, venue_id: int=None, zip: str=None):
        """Venue - a model defined in OpenAPI

        :param address: The address of this Venue.
        :param capacity: The capacity of this Venue.
        :param city: The city of this Venue.
        :param country: The country of this Venue.
        :param geo_lat: The geo_lat of this Venue.
        :param geo_long: The geo_long of this Venue.
        :param name: The name of this Venue.
        :param nickname1: The nickname1 of this Venue.
        :param nickname2: The nickname2 of this Venue.
        :param open: The open of this Venue.
        :param opened: The opened of this Venue.
        :param venue_id: The venue_id of this Venue.
        :param zip: The zip of this Venue.
        """
        self.openapi_types = {
            'address': str,
            'capacity': int,
            'city': str,
            'country': str,
            'geo_lat': float,
            'geo_long': float,
            'name': str,
            'nickname1': str,
            'nickname2': str,
            'open': bool,
            'opened': int,
            'venue_id': int,
            'zip': str
        }

        self.attribute_map = {
            'address': 'Address',
            'capacity': 'Capacity',
            'city': 'City',
            'country': 'Country',
            'geo_lat': 'GeoLat',
            'geo_long': 'GeoLong',
            'name': 'Name',
            'nickname1': 'Nickname1',
            'nickname2': 'Nickname2',
            'open': 'Open',
            'opened': 'Opened',
            'venue_id': 'VenueId',
            'zip': 'Zip'
        }

        self._address = address
        self._capacity = capacity
        self._city = city
        self._country = country
        self._geo_lat = geo_lat
        self._geo_long = geo_long
        self._name = name
        self._nickname1 = nickname1
        self._nickname2 = nickname2
        self._open = open
        self._opened = opened
        self._venue_id = venue_id
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Venue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Venue of this Venue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Venue.


        :return: The address of this Venue.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Venue.


        :param address: The address of this Venue.
        :type address: str
        """

        self._address = address

    @property
    def capacity(self):
        """Gets the capacity of this Venue.


        :return: The capacity of this Venue.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Venue.


        :param capacity: The capacity of this Venue.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def city(self):
        """Gets the city of this Venue.


        :return: The city of this Venue.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Venue.


        :param city: The city of this Venue.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Venue.


        :return: The country of this Venue.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Venue.


        :param country: The country of this Venue.
        :type country: str
        """

        self._country = country

    @property
    def geo_lat(self):
        """Gets the geo_lat of this Venue.


        :return: The geo_lat of this Venue.
        :rtype: float
        """
        return self._geo_lat

    @geo_lat.setter
    def geo_lat(self, geo_lat):
        """Sets the geo_lat of this Venue.


        :param geo_lat: The geo_lat of this Venue.
        :type geo_lat: float
        """

        self._geo_lat = geo_lat

    @property
    def geo_long(self):
        """Gets the geo_long of this Venue.


        :return: The geo_long of this Venue.
        :rtype: float
        """
        return self._geo_long

    @geo_long.setter
    def geo_long(self, geo_long):
        """Sets the geo_long of this Venue.


        :param geo_long: The geo_long of this Venue.
        :type geo_long: float
        """

        self._geo_long = geo_long

    @property
    def name(self):
        """Gets the name of this Venue.


        :return: The name of this Venue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Venue.


        :param name: The name of this Venue.
        :type name: str
        """

        self._name = name

    @property
    def nickname1(self):
        """Gets the nickname1 of this Venue.


        :return: The nickname1 of this Venue.
        :rtype: str
        """
        return self._nickname1

    @nickname1.setter
    def nickname1(self, nickname1):
        """Sets the nickname1 of this Venue.


        :param nickname1: The nickname1 of this Venue.
        :type nickname1: str
        """

        self._nickname1 = nickname1

    @property
    def nickname2(self):
        """Gets the nickname2 of this Venue.


        :return: The nickname2 of this Venue.
        :rtype: str
        """
        return self._nickname2

    @nickname2.setter
    def nickname2(self, nickname2):
        """Sets the nickname2 of this Venue.


        :param nickname2: The nickname2 of this Venue.
        :type nickname2: str
        """

        self._nickname2 = nickname2

    @property
    def open(self):
        """Gets the open of this Venue.


        :return: The open of this Venue.
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Venue.


        :param open: The open of this Venue.
        :type open: bool
        """

        self._open = open

    @property
    def opened(self):
        """Gets the opened of this Venue.


        :return: The opened of this Venue.
        :rtype: int
        """
        return self._opened

    @opened.setter
    def opened(self, opened):
        """Sets the opened of this Venue.


        :param opened: The opened of this Venue.
        :type opened: int
        """

        self._opened = opened

    @property
    def venue_id(self):
        """Gets the venue_id of this Venue.


        :return: The venue_id of this Venue.
        :rtype: int
        """
        return self._venue_id

    @venue_id.setter
    def venue_id(self, venue_id):
        """Sets the venue_id of this Venue.


        :param venue_id: The venue_id of this Venue.
        :type venue_id: int
        """

        self._venue_id = venue_id

    @property
    def zip(self):
        """Gets the zip of this Venue.


        :return: The zip of this Venue.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Venue.


        :param zip: The zip of this Venue.
        :type zip: str
        """

        self._zip = zip
