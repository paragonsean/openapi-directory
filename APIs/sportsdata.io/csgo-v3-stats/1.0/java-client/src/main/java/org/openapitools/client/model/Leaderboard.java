/*
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Leaderboard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:01.432193-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Leaderboard {
  public static final String SERIALIZED_NAME_ACES = "Aces";
  @SerializedName(SERIALIZED_NAME_ACES)
  private BigDecimal aces;

  public static final String SERIALIZED_NAME_ASSISTS = "Assists";
  @SerializedName(SERIALIZED_NAME_ASSISTS)
  private BigDecimal assists;

  public static final String SERIALIZED_NAME_AVERAGE_DAMAGE_PER_ROUND = "AverageDamagePerRound";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DAMAGE_PER_ROUND)
  private BigDecimal averageDamagePerRound;

  public static final String SERIALIZED_NAME_CLUTCH1V2S = "Clutch1v2s";
  @SerializedName(SERIALIZED_NAME_CLUTCH1V2S)
  private BigDecimal clutch1v2s;

  public static final String SERIALIZED_NAME_CLUTCH1V3S = "Clutch1v3s";
  @SerializedName(SERIALIZED_NAME_CLUTCH1V3S)
  private BigDecimal clutch1v3s;

  public static final String SERIALIZED_NAME_CLUTCH1V4S = "Clutch1v4s";
  @SerializedName(SERIALIZED_NAME_CLUTCH1V4S)
  private BigDecimal clutch1v4s;

  public static final String SERIALIZED_NAME_CLUTCH1V5S = "Clutch1v5s";
  @SerializedName(SERIALIZED_NAME_CLUTCH1V5S)
  private BigDecimal clutch1v5s;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_DEATHS = "Deaths";
  @SerializedName(SERIALIZED_NAME_DEATHS)
  private BigDecimal deaths;

  public static final String SERIALIZED_NAME_ENTRY_KILLS = "EntryKills";
  @SerializedName(SERIALIZED_NAME_ENTRY_KILLS)
  private BigDecimal entryKills;

  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_GAME_ID = "GameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private Integer games;

  public static final String SERIALIZED_NAME_HEADSHOTS = "Headshots";
  @SerializedName(SERIALIZED_NAME_HEADSHOTS)
  private BigDecimal headshots;

  public static final String SERIALIZED_NAME_IS_CLOSED = "IsClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_KAST = "Kast";
  @SerializedName(SERIALIZED_NAME_KAST)
  private BigDecimal kast;

  public static final String SERIALIZED_NAME_KILLS = "Kills";
  @SerializedName(SERIALIZED_NAME_KILLS)
  private BigDecimal kills;

  public static final String SERIALIZED_NAME_MAPS = "Maps";
  @SerializedName(SERIALIZED_NAME_MAPS)
  private BigDecimal maps;

  public static final String SERIALIZED_NAME_MATCH_NAME = "MatchName";
  @SerializedName(SERIALIZED_NAME_MATCH_NAME)
  private String matchName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_OPPONENT_ID = "OpponentId";
  @SerializedName(SERIALIZED_NAME_OPPONENT_ID)
  private Integer opponentId;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public static final String SERIALIZED_NAME_QUAD_KILLS = "QuadKills";
  @SerializedName(SERIALIZED_NAME_QUAD_KILLS)
  private BigDecimal quadKills;

  public static final String SERIALIZED_NAME_RATING = "Rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_UPDATED_UTC = "UpdatedUtc";
  @SerializedName(SERIALIZED_NAME_UPDATED_UTC)
  private String updatedUtc;

  public Leaderboard() {
  }

  public Leaderboard aces(BigDecimal aces) {
    this.aces = aces;
    return this;
  }

  /**
   * Get aces
   * @return aces
   */
  @javax.annotation.Nullable
  public BigDecimal getAces() {
    return aces;
  }

  public void setAces(BigDecimal aces) {
    this.aces = aces;
  }


  public Leaderboard assists(BigDecimal assists) {
    this.assists = assists;
    return this;
  }

  /**
   * Get assists
   * @return assists
   */
  @javax.annotation.Nullable
  public BigDecimal getAssists() {
    return assists;
  }

  public void setAssists(BigDecimal assists) {
    this.assists = assists;
  }


  public Leaderboard averageDamagePerRound(BigDecimal averageDamagePerRound) {
    this.averageDamagePerRound = averageDamagePerRound;
    return this;
  }

  /**
   * Get averageDamagePerRound
   * @return averageDamagePerRound
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDamagePerRound() {
    return averageDamagePerRound;
  }

  public void setAverageDamagePerRound(BigDecimal averageDamagePerRound) {
    this.averageDamagePerRound = averageDamagePerRound;
  }


  public Leaderboard clutch1v2s(BigDecimal clutch1v2s) {
    this.clutch1v2s = clutch1v2s;
    return this;
  }

  /**
   * Get clutch1v2s
   * @return clutch1v2s
   */
  @javax.annotation.Nullable
  public BigDecimal getClutch1v2s() {
    return clutch1v2s;
  }

  public void setClutch1v2s(BigDecimal clutch1v2s) {
    this.clutch1v2s = clutch1v2s;
  }


  public Leaderboard clutch1v3s(BigDecimal clutch1v3s) {
    this.clutch1v3s = clutch1v3s;
    return this;
  }

  /**
   * Get clutch1v3s
   * @return clutch1v3s
   */
  @javax.annotation.Nullable
  public BigDecimal getClutch1v3s() {
    return clutch1v3s;
  }

  public void setClutch1v3s(BigDecimal clutch1v3s) {
    this.clutch1v3s = clutch1v3s;
  }


  public Leaderboard clutch1v4s(BigDecimal clutch1v4s) {
    this.clutch1v4s = clutch1v4s;
    return this;
  }

  /**
   * Get clutch1v4s
   * @return clutch1v4s
   */
  @javax.annotation.Nullable
  public BigDecimal getClutch1v4s() {
    return clutch1v4s;
  }

  public void setClutch1v4s(BigDecimal clutch1v4s) {
    this.clutch1v4s = clutch1v4s;
  }


  public Leaderboard clutch1v5s(BigDecimal clutch1v5s) {
    this.clutch1v5s = clutch1v5s;
    return this;
  }

  /**
   * Get clutch1v5s
   * @return clutch1v5s
   */
  @javax.annotation.Nullable
  public BigDecimal getClutch1v5s() {
    return clutch1v5s;
  }

  public void setClutch1v5s(BigDecimal clutch1v5s) {
    this.clutch1v5s = clutch1v5s;
  }


  public Leaderboard dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public Leaderboard day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Leaderboard deaths(BigDecimal deaths) {
    this.deaths = deaths;
    return this;
  }

  /**
   * Get deaths
   * @return deaths
   */
  @javax.annotation.Nullable
  public BigDecimal getDeaths() {
    return deaths;
  }

  public void setDeaths(BigDecimal deaths) {
    this.deaths = deaths;
  }


  public Leaderboard entryKills(BigDecimal entryKills) {
    this.entryKills = entryKills;
    return this;
  }

  /**
   * Get entryKills
   * @return entryKills
   */
  @javax.annotation.Nullable
  public BigDecimal getEntryKills() {
    return entryKills;
  }

  public void setEntryKills(BigDecimal entryKills) {
    this.entryKills = entryKills;
  }


  public Leaderboard fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public Leaderboard gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public Leaderboard games(Integer games) {
    this.games = games;
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public Integer getGames() {
    return games;
  }

  public void setGames(Integer games) {
    this.games = games;
  }


  public Leaderboard headshots(BigDecimal headshots) {
    this.headshots = headshots;
    return this;
  }

  /**
   * Get headshots
   * @return headshots
   */
  @javax.annotation.Nullable
  public BigDecimal getHeadshots() {
    return headshots;
  }

  public void setHeadshots(BigDecimal headshots) {
    this.headshots = headshots;
  }


  public Leaderboard isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public Leaderboard kast(BigDecimal kast) {
    this.kast = kast;
    return this;
  }

  /**
   * Get kast
   * @return kast
   */
  @javax.annotation.Nullable
  public BigDecimal getKast() {
    return kast;
  }

  public void setKast(BigDecimal kast) {
    this.kast = kast;
  }


  public Leaderboard kills(BigDecimal kills) {
    this.kills = kills;
    return this;
  }

  /**
   * Get kills
   * @return kills
   */
  @javax.annotation.Nullable
  public BigDecimal getKills() {
    return kills;
  }

  public void setKills(BigDecimal kills) {
    this.kills = kills;
  }


  public Leaderboard maps(BigDecimal maps) {
    this.maps = maps;
    return this;
  }

  /**
   * Get maps
   * @return maps
   */
  @javax.annotation.Nullable
  public BigDecimal getMaps() {
    return maps;
  }

  public void setMaps(BigDecimal maps) {
    this.maps = maps;
  }


  public Leaderboard matchName(String matchName) {
    this.matchName = matchName;
    return this;
  }

  /**
   * Get matchName
   * @return matchName
   */
  @javax.annotation.Nullable
  public String getMatchName() {
    return matchName;
  }

  public void setMatchName(String matchName) {
    this.matchName = matchName;
  }


  public Leaderboard name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Leaderboard opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public Leaderboard opponentId(Integer opponentId) {
    this.opponentId = opponentId;
    return this;
  }

  /**
   * Get opponentId
   * @return opponentId
   */
  @javax.annotation.Nullable
  public Integer getOpponentId() {
    return opponentId;
  }

  public void setOpponentId(Integer opponentId) {
    this.opponentId = opponentId;
  }


  public Leaderboard playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }


  public Leaderboard quadKills(BigDecimal quadKills) {
    this.quadKills = quadKills;
    return this;
  }

  /**
   * Get quadKills
   * @return quadKills
   */
  @javax.annotation.Nullable
  public BigDecimal getQuadKills() {
    return quadKills;
  }

  public void setQuadKills(BigDecimal quadKills) {
    this.quadKills = quadKills;
  }


  public Leaderboard rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  public Leaderboard team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Leaderboard teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public Leaderboard updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Leaderboard updatedUtc(String updatedUtc) {
    this.updatedUtc = updatedUtc;
    return this;
  }

  /**
   * Get updatedUtc
   * @return updatedUtc
   */
  @javax.annotation.Nullable
  public String getUpdatedUtc() {
    return updatedUtc;
  }

  public void setUpdatedUtc(String updatedUtc) {
    this.updatedUtc = updatedUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Leaderboard leaderboard = (Leaderboard) o;
    return Objects.equals(this.aces, leaderboard.aces) &&
        Objects.equals(this.assists, leaderboard.assists) &&
        Objects.equals(this.averageDamagePerRound, leaderboard.averageDamagePerRound) &&
        Objects.equals(this.clutch1v2s, leaderboard.clutch1v2s) &&
        Objects.equals(this.clutch1v3s, leaderboard.clutch1v3s) &&
        Objects.equals(this.clutch1v4s, leaderboard.clutch1v4s) &&
        Objects.equals(this.clutch1v5s, leaderboard.clutch1v5s) &&
        Objects.equals(this.dateTime, leaderboard.dateTime) &&
        Objects.equals(this.day, leaderboard.day) &&
        Objects.equals(this.deaths, leaderboard.deaths) &&
        Objects.equals(this.entryKills, leaderboard.entryKills) &&
        Objects.equals(this.fantasyPoints, leaderboard.fantasyPoints) &&
        Objects.equals(this.gameId, leaderboard.gameId) &&
        Objects.equals(this.games, leaderboard.games) &&
        Objects.equals(this.headshots, leaderboard.headshots) &&
        Objects.equals(this.isClosed, leaderboard.isClosed) &&
        Objects.equals(this.kast, leaderboard.kast) &&
        Objects.equals(this.kills, leaderboard.kills) &&
        Objects.equals(this.maps, leaderboard.maps) &&
        Objects.equals(this.matchName, leaderboard.matchName) &&
        Objects.equals(this.name, leaderboard.name) &&
        Objects.equals(this.opponent, leaderboard.opponent) &&
        Objects.equals(this.opponentId, leaderboard.opponentId) &&
        Objects.equals(this.playerId, leaderboard.playerId) &&
        Objects.equals(this.quadKills, leaderboard.quadKills) &&
        Objects.equals(this.rating, leaderboard.rating) &&
        Objects.equals(this.team, leaderboard.team) &&
        Objects.equals(this.teamId, leaderboard.teamId) &&
        Objects.equals(this.updated, leaderboard.updated) &&
        Objects.equals(this.updatedUtc, leaderboard.updatedUtc);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aces, assists, averageDamagePerRound, clutch1v2s, clutch1v3s, clutch1v4s, clutch1v5s, dateTime, day, deaths, entryKills, fantasyPoints, gameId, games, headshots, isClosed, kast, kills, maps, matchName, name, opponent, opponentId, playerId, quadKills, rating, team, teamId, updated, updatedUtc);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Leaderboard {\n");
    sb.append("    aces: ").append(toIndentedString(aces)).append("\n");
    sb.append("    assists: ").append(toIndentedString(assists)).append("\n");
    sb.append("    averageDamagePerRound: ").append(toIndentedString(averageDamagePerRound)).append("\n");
    sb.append("    clutch1v2s: ").append(toIndentedString(clutch1v2s)).append("\n");
    sb.append("    clutch1v3s: ").append(toIndentedString(clutch1v3s)).append("\n");
    sb.append("    clutch1v4s: ").append(toIndentedString(clutch1v4s)).append("\n");
    sb.append("    clutch1v5s: ").append(toIndentedString(clutch1v5s)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    deaths: ").append(toIndentedString(deaths)).append("\n");
    sb.append("    entryKills: ").append(toIndentedString(entryKills)).append("\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    headshots: ").append(toIndentedString(headshots)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    kast: ").append(toIndentedString(kast)).append("\n");
    sb.append("    kills: ").append(toIndentedString(kills)).append("\n");
    sb.append("    maps: ").append(toIndentedString(maps)).append("\n");
    sb.append("    matchName: ").append(toIndentedString(matchName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    opponentId: ").append(toIndentedString(opponentId)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    quadKills: ").append(toIndentedString(quadKills)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updatedUtc: ").append(toIndentedString(updatedUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Aces");
    openapiFields.add("Assists");
    openapiFields.add("AverageDamagePerRound");
    openapiFields.add("Clutch1v2s");
    openapiFields.add("Clutch1v3s");
    openapiFields.add("Clutch1v4s");
    openapiFields.add("Clutch1v5s");
    openapiFields.add("DateTime");
    openapiFields.add("Day");
    openapiFields.add("Deaths");
    openapiFields.add("EntryKills");
    openapiFields.add("FantasyPoints");
    openapiFields.add("GameId");
    openapiFields.add("Games");
    openapiFields.add("Headshots");
    openapiFields.add("IsClosed");
    openapiFields.add("Kast");
    openapiFields.add("Kills");
    openapiFields.add("Maps");
    openapiFields.add("MatchName");
    openapiFields.add("Name");
    openapiFields.add("Opponent");
    openapiFields.add("OpponentId");
    openapiFields.add("PlayerId");
    openapiFields.add("QuadKills");
    openapiFields.add("Rating");
    openapiFields.add("Team");
    openapiFields.add("TeamId");
    openapiFields.add("Updated");
    openapiFields.add("UpdatedUtc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Leaderboard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Leaderboard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Leaderboard is not found in the empty JSON string", Leaderboard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Leaderboard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Leaderboard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("MatchName") != null && !jsonObj.get("MatchName").isJsonNull()) && !jsonObj.get("MatchName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MatchName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MatchName").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
      if ((jsonObj.get("UpdatedUtc") != null && !jsonObj.get("UpdatedUtc").isJsonNull()) && !jsonObj.get("UpdatedUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatedUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatedUtc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Leaderboard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Leaderboard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Leaderboard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Leaderboard.class));

       return (TypeAdapter<T>) new TypeAdapter<Leaderboard>() {
           @Override
           public void write(JsonWriter out, Leaderboard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Leaderboard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Leaderboard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Leaderboard
   * @throws IOException if the JSON string is invalid with respect to Leaderboard
   */
  public static Leaderboard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Leaderboard.class);
  }

  /**
   * Convert an instance of Leaderboard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

