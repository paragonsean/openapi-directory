/*
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Leaderboard;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Map
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:01.432193-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Map {
  public static final String SERIALIZED_NAME_CURRENT_ROUND = "CurrentRound";
  @SerializedName(SERIALIZED_NAME_CURRENT_ROUND)
  private Integer currentRound;

  public static final String SERIALIZED_NAME_LEADERBOARDS = "Leaderboards";
  @SerializedName(SERIALIZED_NAME_LEADERBOARDS)
  private List<Leaderboard> leaderboards = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEAM_A_SCORE = "TeamAScore";
  @SerializedName(SERIALIZED_NAME_TEAM_A_SCORE)
  private Integer teamAScore;

  public static final String SERIALIZED_NAME_TEAM_B_SCORE = "TeamBScore";
  @SerializedName(SERIALIZED_NAME_TEAM_B_SCORE)
  private Integer teamBScore;

  public Map() {
  }

  public Map currentRound(Integer currentRound) {
    this.currentRound = currentRound;
    return this;
  }

  /**
   * Get currentRound
   * @return currentRound
   */
  @javax.annotation.Nullable
  public Integer getCurrentRound() {
    return currentRound;
  }

  public void setCurrentRound(Integer currentRound) {
    this.currentRound = currentRound;
  }


  public Map leaderboards(List<Leaderboard> leaderboards) {
    this.leaderboards = leaderboards;
    return this;
  }

  public Map addLeaderboardsItem(Leaderboard leaderboardsItem) {
    if (this.leaderboards == null) {
      this.leaderboards = new ArrayList<>();
    }
    this.leaderboards.add(leaderboardsItem);
    return this;
  }

  /**
   * Get leaderboards
   * @return leaderboards
   */
  @javax.annotation.Nullable
  public List<Leaderboard> getLeaderboards() {
    return leaderboards;
  }

  public void setLeaderboards(List<Leaderboard> leaderboards) {
    this.leaderboards = leaderboards;
  }


  public Map name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Map number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public Map status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Map teamAScore(Integer teamAScore) {
    this.teamAScore = teamAScore;
    return this;
  }

  /**
   * Get teamAScore
   * @return teamAScore
   */
  @javax.annotation.Nullable
  public Integer getTeamAScore() {
    return teamAScore;
  }

  public void setTeamAScore(Integer teamAScore) {
    this.teamAScore = teamAScore;
  }


  public Map teamBScore(Integer teamBScore) {
    this.teamBScore = teamBScore;
    return this;
  }

  /**
   * Get teamBScore
   * @return teamBScore
   */
  @javax.annotation.Nullable
  public Integer getTeamBScore() {
    return teamBScore;
  }

  public void setTeamBScore(Integer teamBScore) {
    this.teamBScore = teamBScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Map map = (Map) o;
    return Objects.equals(this.currentRound, map.currentRound) &&
        Objects.equals(this.leaderboards, map.leaderboards) &&
        Objects.equals(this.name, map.name) &&
        Objects.equals(this.number, map.number) &&
        Objects.equals(this.status, map.status) &&
        Objects.equals(this.teamAScore, map.teamAScore) &&
        Objects.equals(this.teamBScore, map.teamBScore);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentRound, leaderboards, name, number, status, teamAScore, teamBScore);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Map {\n");
    sb.append("    currentRound: ").append(toIndentedString(currentRound)).append("\n");
    sb.append("    leaderboards: ").append(toIndentedString(leaderboards)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    teamAScore: ").append(toIndentedString(teamAScore)).append("\n");
    sb.append("    teamBScore: ").append(toIndentedString(teamBScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentRound");
    openapiFields.add("Leaderboards");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("Status");
    openapiFields.add("TeamAScore");
    openapiFields.add("TeamBScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Map
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Map.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Map is not found in the empty JSON string", Map.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Map.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Map` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Leaderboards") != null && !jsonObj.get("Leaderboards").isJsonNull()) {
        JsonArray jsonArrayleaderboards = jsonObj.getAsJsonArray("Leaderboards");
        if (jsonArrayleaderboards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Leaderboards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Leaderboards` to be an array in the JSON string but got `%s`", jsonObj.get("Leaderboards").toString()));
          }

          // validate the optional field `Leaderboards` (array)
          for (int i = 0; i < jsonArrayleaderboards.size(); i++) {
            Leaderboard.validateJsonElement(jsonArrayleaderboards.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Map.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Map' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Map> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Map.class));

       return (TypeAdapter<T>) new TypeAdapter<Map>() {
           @Override
           public void write(JsonWriter out, Map value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Map read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Map given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Map
   * @throws IOException if the JSON string is invalid with respect to Map
   */
  public static Map fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Map.class);
  }

  /**
   * Convert an instance of Map to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

