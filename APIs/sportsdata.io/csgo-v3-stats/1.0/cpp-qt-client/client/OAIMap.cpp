/**
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMap::OAIMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMap::OAIMap() {
    this->initializeModel();
}

OAIMap::~OAIMap() {}

void OAIMap::initializeModel() {

    m_current_round_isSet = false;
    m_current_round_isValid = false;

    m_leaderboards_isSet = false;
    m_leaderboards_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_team_a_score_isSet = false;
    m_team_a_score_isValid = false;

    m_team_b_score_isSet = false;
    m_team_b_score_isValid = false;
}

void OAIMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMap::fromJsonObject(QJsonObject json) {

    m_current_round_isValid = ::OpenAPI::fromJsonValue(m_current_round, json[QString("CurrentRound")]);
    m_current_round_isSet = !json[QString("CurrentRound")].isNull() && m_current_round_isValid;

    m_leaderboards_isValid = ::OpenAPI::fromJsonValue(m_leaderboards, json[QString("Leaderboards")]);
    m_leaderboards_isSet = !json[QString("Leaderboards")].isNull() && m_leaderboards_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_team_a_score_isValid = ::OpenAPI::fromJsonValue(m_team_a_score, json[QString("TeamAScore")]);
    m_team_a_score_isSet = !json[QString("TeamAScore")].isNull() && m_team_a_score_isValid;

    m_team_b_score_isValid = ::OpenAPI::fromJsonValue(m_team_b_score, json[QString("TeamBScore")]);
    m_team_b_score_isSet = !json[QString("TeamBScore")].isNull() && m_team_b_score_isValid;
}

QString OAIMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMap::asJsonObject() const {
    QJsonObject obj;
    if (m_current_round_isSet) {
        obj.insert(QString("CurrentRound"), ::OpenAPI::toJsonValue(m_current_round));
    }
    if (m_leaderboards.size() > 0) {
        obj.insert(QString("Leaderboards"), ::OpenAPI::toJsonValue(m_leaderboards));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_team_a_score_isSet) {
        obj.insert(QString("TeamAScore"), ::OpenAPI::toJsonValue(m_team_a_score));
    }
    if (m_team_b_score_isSet) {
        obj.insert(QString("TeamBScore"), ::OpenAPI::toJsonValue(m_team_b_score));
    }
    return obj;
}

qint32 OAIMap::getCurrentRound() const {
    return m_current_round;
}
void OAIMap::setCurrentRound(const qint32 &current_round) {
    m_current_round = current_round;
    m_current_round_isSet = true;
}

bool OAIMap::is_current_round_Set() const{
    return m_current_round_isSet;
}

bool OAIMap::is_current_round_Valid() const{
    return m_current_round_isValid;
}

QList<OAILeaderboard> OAIMap::getLeaderboards() const {
    return m_leaderboards;
}
void OAIMap::setLeaderboards(const QList<OAILeaderboard> &leaderboards) {
    m_leaderboards = leaderboards;
    m_leaderboards_isSet = true;
}

bool OAIMap::is_leaderboards_Set() const{
    return m_leaderboards_isSet;
}

bool OAIMap::is_leaderboards_Valid() const{
    return m_leaderboards_isValid;
}

QString OAIMap::getName() const {
    return m_name;
}
void OAIMap::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMap::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMap::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIMap::getNumber() const {
    return m_number;
}
void OAIMap::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIMap::is_number_Set() const{
    return m_number_isSet;
}

bool OAIMap::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIMap::getStatus() const {
    return m_status;
}
void OAIMap::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMap::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMap::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIMap::getTeamAScore() const {
    return m_team_a_score;
}
void OAIMap::setTeamAScore(const qint32 &team_a_score) {
    m_team_a_score = team_a_score;
    m_team_a_score_isSet = true;
}

bool OAIMap::is_team_a_score_Set() const{
    return m_team_a_score_isSet;
}

bool OAIMap::is_team_a_score_Valid() const{
    return m_team_a_score_isValid;
}

qint32 OAIMap::getTeamBScore() const {
    return m_team_b_score;
}
void OAIMap::setTeamBScore(const qint32 &team_b_score) {
    m_team_b_score = team_b_score;
    m_team_b_score_isSet = true;
}

bool OAIMap::is_team_b_score_Set() const{
    return m_team_b_score_isSet;
}

bool OAIMap::is_team_b_score_Valid() const{
    return m_team_b_score_isValid;
}

bool OAIMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_round_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaderboards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_a_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_b_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
