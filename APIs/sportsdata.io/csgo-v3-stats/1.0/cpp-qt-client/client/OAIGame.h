/**
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGame.h
 *
 * 
 */

#ifndef OAIGame_H
#define OAIGame_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGame : public OAIObject {
public:
    OAIGame();
    OAIGame(QString json);
    ~OAIGame() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBestOf() const;
    void setBestOf(const QString &best_of);
    bool is_best_of_Set() const;
    bool is_best_of_Valid() const;

    QString getDateTime() const;
    void setDateTime(const QString &date_time);
    bool is_date_time_Set() const;
    bool is_date_time_Valid() const;

    QString getDay() const;
    void setDay(const QString &day);
    bool is_day_Set() const;
    bool is_day_Valid() const;

    qint32 getDrawMoneyLine() const;
    void setDrawMoneyLine(const qint32 &draw_money_line);
    bool is_draw_money_line_Set() const;
    bool is_draw_money_line_Valid() const;

    qint32 getGameId() const;
    void setGameId(const qint32 &game_id);
    bool is_game_id_Set() const;
    bool is_game_id_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    bool isIsClosed() const;
    void setIsClosed(const bool &is_closed);
    bool is_is_closed_Set() const;
    bool is_is_closed_Valid() const;

    double getPointSpread() const;
    void setPointSpread(const double &point_spread);
    bool is_point_spread_Set() const;
    bool is_point_spread_Valid() const;

    qint32 getRoundId() const;
    void setRoundId(const qint32 &round_id);
    bool is_round_id_Set() const;
    bool is_round_id_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    qint32 getSeasonType() const;
    void setSeasonType(const qint32 &season_type);
    bool is_season_type_Set() const;
    bool is_season_type_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getTeamAid() const;
    void setTeamAid(const qint32 &team_aid);
    bool is_team_aid_Set() const;
    bool is_team_aid_Valid() const;

    QString getTeamAKey() const;
    void setTeamAKey(const QString &team_a_key);
    bool is_team_a_key_Set() const;
    bool is_team_a_key_Valid() const;

    qint32 getTeamAMoneyLine() const;
    void setTeamAMoneyLine(const qint32 &team_a_money_line);
    bool is_team_a_money_line_Set() const;
    bool is_team_a_money_line_Valid() const;

    QString getTeamAName() const;
    void setTeamAName(const QString &team_a_name);
    bool is_team_a_name_Set() const;
    bool is_team_a_name_Valid() const;

    qint32 getTeamAPointSpreadPayout() const;
    void setTeamAPointSpreadPayout(const qint32 &team_a_point_spread_payout);
    bool is_team_a_point_spread_payout_Set() const;
    bool is_team_a_point_spread_payout_Valid() const;

    qint32 getTeamAScore() const;
    void setTeamAScore(const qint32 &team_a_score);
    bool is_team_a_score_Set() const;
    bool is_team_a_score_Valid() const;

    qint32 getTeamBid() const;
    void setTeamBid(const qint32 &team_bid);
    bool is_team_bid_Set() const;
    bool is_team_bid_Valid() const;

    QString getTeamBKey() const;
    void setTeamBKey(const QString &team_b_key);
    bool is_team_b_key_Set() const;
    bool is_team_b_key_Valid() const;

    qint32 getTeamBMoneyLine() const;
    void setTeamBMoneyLine(const qint32 &team_b_money_line);
    bool is_team_b_money_line_Set() const;
    bool is_team_b_money_line_Valid() const;

    QString getTeamBName() const;
    void setTeamBName(const QString &team_b_name);
    bool is_team_b_name_Set() const;
    bool is_team_b_name_Valid() const;

    qint32 getTeamBPointSpreadPayout() const;
    void setTeamBPointSpreadPayout(const qint32 &team_b_point_spread_payout);
    bool is_team_b_point_spread_payout_Set() const;
    bool is_team_b_point_spread_payout_Valid() const;

    qint32 getTeamBScore() const;
    void setTeamBScore(const qint32 &team_b_score);
    bool is_team_b_score_Set() const;
    bool is_team_b_score_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QString getUpdatedUtc() const;
    void setUpdatedUtc(const QString &updated_utc);
    bool is_updated_utc_Set() const;
    bool is_updated_utc_Valid() const;

    qint32 getVenueId() const;
    void setVenueId(const qint32 &venue_id);
    bool is_venue_id_Set() const;
    bool is_venue_id_Valid() const;

    QString getVenueType() const;
    void setVenueType(const QString &venue_type);
    bool is_venue_type_Set() const;
    bool is_venue_type_Valid() const;

    qint32 getWeek() const;
    void setWeek(const qint32 &week);
    bool is_week_Set() const;
    bool is_week_Valid() const;

    QString getWinner() const;
    void setWinner(const QString &winner);
    bool is_winner_Set() const;
    bool is_winner_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_best_of;
    bool m_best_of_isSet;
    bool m_best_of_isValid;

    QString m_date_time;
    bool m_date_time_isSet;
    bool m_date_time_isValid;

    QString m_day;
    bool m_day_isSet;
    bool m_day_isValid;

    qint32 m_draw_money_line;
    bool m_draw_money_line_isSet;
    bool m_draw_money_line_isValid;

    qint32 m_game_id;
    bool m_game_id_isSet;
    bool m_game_id_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    bool m_is_closed;
    bool m_is_closed_isSet;
    bool m_is_closed_isValid;

    double m_point_spread;
    bool m_point_spread_isSet;
    bool m_point_spread_isValid;

    qint32 m_round_id;
    bool m_round_id_isSet;
    bool m_round_id_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    qint32 m_season_type;
    bool m_season_type_isSet;
    bool m_season_type_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_team_aid;
    bool m_team_aid_isSet;
    bool m_team_aid_isValid;

    QString m_team_a_key;
    bool m_team_a_key_isSet;
    bool m_team_a_key_isValid;

    qint32 m_team_a_money_line;
    bool m_team_a_money_line_isSet;
    bool m_team_a_money_line_isValid;

    QString m_team_a_name;
    bool m_team_a_name_isSet;
    bool m_team_a_name_isValid;

    qint32 m_team_a_point_spread_payout;
    bool m_team_a_point_spread_payout_isSet;
    bool m_team_a_point_spread_payout_isValid;

    qint32 m_team_a_score;
    bool m_team_a_score_isSet;
    bool m_team_a_score_isValid;

    qint32 m_team_bid;
    bool m_team_bid_isSet;
    bool m_team_bid_isValid;

    QString m_team_b_key;
    bool m_team_b_key_isSet;
    bool m_team_b_key_isValid;

    qint32 m_team_b_money_line;
    bool m_team_b_money_line_isSet;
    bool m_team_b_money_line_isValid;

    QString m_team_b_name;
    bool m_team_b_name_isSet;
    bool m_team_b_name_isValid;

    qint32 m_team_b_point_spread_payout;
    bool m_team_b_point_spread_payout_isSet;
    bool m_team_b_point_spread_payout_isValid;

    qint32 m_team_b_score;
    bool m_team_b_score_isSet;
    bool m_team_b_score_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QString m_updated_utc;
    bool m_updated_utc_isSet;
    bool m_updated_utc_isValid;

    qint32 m_venue_id;
    bool m_venue_id_isSet;
    bool m_venue_id_isValid;

    QString m_venue_type;
    bool m_venue_type_isSet;
    bool m_venue_type_isValid;

    qint32 m_week;
    bool m_week_isSet;
    bool m_week_isValid;

    QString m_winner;
    bool m_winner_isSet;
    bool m_winner_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGame)

#endif // OAIGame_H
