/**
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILeaderboard.h
 *
 * 
 */

#ifndef OAILeaderboard_H
#define OAILeaderboard_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILeaderboard : public OAIObject {
public:
    OAILeaderboard();
    OAILeaderboard(QString json);
    ~OAILeaderboard() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAces() const;
    void setAces(const double &aces);
    bool is_aces_Set() const;
    bool is_aces_Valid() const;

    double getAssists() const;
    void setAssists(const double &assists);
    bool is_assists_Set() const;
    bool is_assists_Valid() const;

    double getAverageDamagePerRound() const;
    void setAverageDamagePerRound(const double &average_damage_per_round);
    bool is_average_damage_per_round_Set() const;
    bool is_average_damage_per_round_Valid() const;

    double getClutch1v2s() const;
    void setClutch1v2s(const double &clutch1v2s);
    bool is_clutch1v2s_Set() const;
    bool is_clutch1v2s_Valid() const;

    double getClutch1v3s() const;
    void setClutch1v3s(const double &clutch1v3s);
    bool is_clutch1v3s_Set() const;
    bool is_clutch1v3s_Valid() const;

    double getClutch1v4s() const;
    void setClutch1v4s(const double &clutch1v4s);
    bool is_clutch1v4s_Set() const;
    bool is_clutch1v4s_Valid() const;

    double getClutch1v5s() const;
    void setClutch1v5s(const double &clutch1v5s);
    bool is_clutch1v5s_Set() const;
    bool is_clutch1v5s_Valid() const;

    QString getDateTime() const;
    void setDateTime(const QString &date_time);
    bool is_date_time_Set() const;
    bool is_date_time_Valid() const;

    QString getDay() const;
    void setDay(const QString &day);
    bool is_day_Set() const;
    bool is_day_Valid() const;

    double getDeaths() const;
    void setDeaths(const double &deaths);
    bool is_deaths_Set() const;
    bool is_deaths_Valid() const;

    double getEntryKills() const;
    void setEntryKills(const double &entry_kills);
    bool is_entry_kills_Set() const;
    bool is_entry_kills_Valid() const;

    double getFantasyPoints() const;
    void setFantasyPoints(const double &fantasy_points);
    bool is_fantasy_points_Set() const;
    bool is_fantasy_points_Valid() const;

    qint32 getGameId() const;
    void setGameId(const qint32 &game_id);
    bool is_game_id_Set() const;
    bool is_game_id_Valid() const;

    qint32 getGames() const;
    void setGames(const qint32 &games);
    bool is_games_Set() const;
    bool is_games_Valid() const;

    double getHeadshots() const;
    void setHeadshots(const double &headshots);
    bool is_headshots_Set() const;
    bool is_headshots_Valid() const;

    bool isIsClosed() const;
    void setIsClosed(const bool &is_closed);
    bool is_is_closed_Set() const;
    bool is_is_closed_Valid() const;

    double getKast() const;
    void setKast(const double &kast);
    bool is_kast_Set() const;
    bool is_kast_Valid() const;

    double getKills() const;
    void setKills(const double &kills);
    bool is_kills_Set() const;
    bool is_kills_Valid() const;

    double getMaps() const;
    void setMaps(const double &maps);
    bool is_maps_Set() const;
    bool is_maps_Valid() const;

    QString getMatchName() const;
    void setMatchName(const QString &match_name);
    bool is_match_name_Set() const;
    bool is_match_name_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOpponent() const;
    void setOpponent(const QString &opponent);
    bool is_opponent_Set() const;
    bool is_opponent_Valid() const;

    qint32 getOpponentId() const;
    void setOpponentId(const qint32 &opponent_id);
    bool is_opponent_id_Set() const;
    bool is_opponent_id_Valid() const;

    qint32 getPlayerId() const;
    void setPlayerId(const qint32 &player_id);
    bool is_player_id_Set() const;
    bool is_player_id_Valid() const;

    double getQuadKills() const;
    void setQuadKills(const double &quad_kills);
    bool is_quad_kills_Set() const;
    bool is_quad_kills_Valid() const;

    double getRating() const;
    void setRating(const double &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QString getUpdatedUtc() const;
    void setUpdatedUtc(const QString &updated_utc);
    bool is_updated_utc_Set() const;
    bool is_updated_utc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_aces;
    bool m_aces_isSet;
    bool m_aces_isValid;

    double m_assists;
    bool m_assists_isSet;
    bool m_assists_isValid;

    double m_average_damage_per_round;
    bool m_average_damage_per_round_isSet;
    bool m_average_damage_per_round_isValid;

    double m_clutch1v2s;
    bool m_clutch1v2s_isSet;
    bool m_clutch1v2s_isValid;

    double m_clutch1v3s;
    bool m_clutch1v3s_isSet;
    bool m_clutch1v3s_isValid;

    double m_clutch1v4s;
    bool m_clutch1v4s_isSet;
    bool m_clutch1v4s_isValid;

    double m_clutch1v5s;
    bool m_clutch1v5s_isSet;
    bool m_clutch1v5s_isValid;

    QString m_date_time;
    bool m_date_time_isSet;
    bool m_date_time_isValid;

    QString m_day;
    bool m_day_isSet;
    bool m_day_isValid;

    double m_deaths;
    bool m_deaths_isSet;
    bool m_deaths_isValid;

    double m_entry_kills;
    bool m_entry_kills_isSet;
    bool m_entry_kills_isValid;

    double m_fantasy_points;
    bool m_fantasy_points_isSet;
    bool m_fantasy_points_isValid;

    qint32 m_game_id;
    bool m_game_id_isSet;
    bool m_game_id_isValid;

    qint32 m_games;
    bool m_games_isSet;
    bool m_games_isValid;

    double m_headshots;
    bool m_headshots_isSet;
    bool m_headshots_isValid;

    bool m_is_closed;
    bool m_is_closed_isSet;
    bool m_is_closed_isValid;

    double m_kast;
    bool m_kast_isSet;
    bool m_kast_isValid;

    double m_kills;
    bool m_kills_isSet;
    bool m_kills_isValid;

    double m_maps;
    bool m_maps_isSet;
    bool m_maps_isValid;

    QString m_match_name;
    bool m_match_name_isSet;
    bool m_match_name_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_opponent;
    bool m_opponent_isSet;
    bool m_opponent_isValid;

    qint32 m_opponent_id;
    bool m_opponent_id_isSet;
    bool m_opponent_id_isValid;

    qint32 m_player_id;
    bool m_player_id_isSet;
    bool m_player_id_isValid;

    double m_quad_kills;
    bool m_quad_kills_isSet;
    bool m_quad_kills_isValid;

    double m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QString m_updated_utc;
    bool m_updated_utc_isSet;
    bool m_updated_utc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILeaderboard)

#endif // OAILeaderboard_H
