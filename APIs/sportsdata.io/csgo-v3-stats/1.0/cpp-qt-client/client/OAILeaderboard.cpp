/**
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaderboard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaderboard::OAILeaderboard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaderboard::OAILeaderboard() {
    this->initializeModel();
}

OAILeaderboard::~OAILeaderboard() {}

void OAILeaderboard::initializeModel() {

    m_aces_isSet = false;
    m_aces_isValid = false;

    m_assists_isSet = false;
    m_assists_isValid = false;

    m_average_damage_per_round_isSet = false;
    m_average_damage_per_round_isValid = false;

    m_clutch1v2s_isSet = false;
    m_clutch1v2s_isValid = false;

    m_clutch1v3s_isSet = false;
    m_clutch1v3s_isValid = false;

    m_clutch1v4s_isSet = false;
    m_clutch1v4s_isValid = false;

    m_clutch1v5s_isSet = false;
    m_clutch1v5s_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_deaths_isSet = false;
    m_deaths_isValid = false;

    m_entry_kills_isSet = false;
    m_entry_kills_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_headshots_isSet = false;
    m_headshots_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_kast_isSet = false;
    m_kast_isValid = false;

    m_kills_isSet = false;
    m_kills_isValid = false;

    m_maps_isSet = false;
    m_maps_isValid = false;

    m_match_name_isSet = false;
    m_match_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_quad_kills_isSet = false;
    m_quad_kills_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_updated_utc_isSet = false;
    m_updated_utc_isValid = false;
}

void OAILeaderboard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaderboard::fromJsonObject(QJsonObject json) {

    m_aces_isValid = ::OpenAPI::fromJsonValue(m_aces, json[QString("Aces")]);
    m_aces_isSet = !json[QString("Aces")].isNull() && m_aces_isValid;

    m_assists_isValid = ::OpenAPI::fromJsonValue(m_assists, json[QString("Assists")]);
    m_assists_isSet = !json[QString("Assists")].isNull() && m_assists_isValid;

    m_average_damage_per_round_isValid = ::OpenAPI::fromJsonValue(m_average_damage_per_round, json[QString("AverageDamagePerRound")]);
    m_average_damage_per_round_isSet = !json[QString("AverageDamagePerRound")].isNull() && m_average_damage_per_round_isValid;

    m_clutch1v2s_isValid = ::OpenAPI::fromJsonValue(m_clutch1v2s, json[QString("Clutch1v2s")]);
    m_clutch1v2s_isSet = !json[QString("Clutch1v2s")].isNull() && m_clutch1v2s_isValid;

    m_clutch1v3s_isValid = ::OpenAPI::fromJsonValue(m_clutch1v3s, json[QString("Clutch1v3s")]);
    m_clutch1v3s_isSet = !json[QString("Clutch1v3s")].isNull() && m_clutch1v3s_isValid;

    m_clutch1v4s_isValid = ::OpenAPI::fromJsonValue(m_clutch1v4s, json[QString("Clutch1v4s")]);
    m_clutch1v4s_isSet = !json[QString("Clutch1v4s")].isNull() && m_clutch1v4s_isValid;

    m_clutch1v5s_isValid = ::OpenAPI::fromJsonValue(m_clutch1v5s, json[QString("Clutch1v5s")]);
    m_clutch1v5s_isSet = !json[QString("Clutch1v5s")].isNull() && m_clutch1v5s_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_deaths_isValid = ::OpenAPI::fromJsonValue(m_deaths, json[QString("Deaths")]);
    m_deaths_isSet = !json[QString("Deaths")].isNull() && m_deaths_isValid;

    m_entry_kills_isValid = ::OpenAPI::fromJsonValue(m_entry_kills, json[QString("EntryKills")]);
    m_entry_kills_isSet = !json[QString("EntryKills")].isNull() && m_entry_kills_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameId")]);
    m_game_id_isSet = !json[QString("GameId")].isNull() && m_game_id_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_headshots_isValid = ::OpenAPI::fromJsonValue(m_headshots, json[QString("Headshots")]);
    m_headshots_isSet = !json[QString("Headshots")].isNull() && m_headshots_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("IsClosed")]);
    m_is_closed_isSet = !json[QString("IsClosed")].isNull() && m_is_closed_isValid;

    m_kast_isValid = ::OpenAPI::fromJsonValue(m_kast, json[QString("Kast")]);
    m_kast_isSet = !json[QString("Kast")].isNull() && m_kast_isValid;

    m_kills_isValid = ::OpenAPI::fromJsonValue(m_kills, json[QString("Kills")]);
    m_kills_isSet = !json[QString("Kills")].isNull() && m_kills_isValid;

    m_maps_isValid = ::OpenAPI::fromJsonValue(m_maps, json[QString("Maps")]);
    m_maps_isSet = !json[QString("Maps")].isNull() && m_maps_isValid;

    m_match_name_isValid = ::OpenAPI::fromJsonValue(m_match_name, json[QString("MatchName")]);
    m_match_name_isSet = !json[QString("MatchName")].isNull() && m_match_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentId")]);
    m_opponent_id_isSet = !json[QString("OpponentId")].isNull() && m_opponent_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerId")]);
    m_player_id_isSet = !json[QString("PlayerId")].isNull() && m_player_id_isValid;

    m_quad_kills_isValid = ::OpenAPI::fromJsonValue(m_quad_kills, json[QString("QuadKills")]);
    m_quad_kills_isSet = !json[QString("QuadKills")].isNull() && m_quad_kills_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("Rating")]);
    m_rating_isSet = !json[QString("Rating")].isNull() && m_rating_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_updated_utc_isValid = ::OpenAPI::fromJsonValue(m_updated_utc, json[QString("UpdatedUtc")]);
    m_updated_utc_isSet = !json[QString("UpdatedUtc")].isNull() && m_updated_utc_isValid;
}

QString OAILeaderboard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaderboard::asJsonObject() const {
    QJsonObject obj;
    if (m_aces_isSet) {
        obj.insert(QString("Aces"), ::OpenAPI::toJsonValue(m_aces));
    }
    if (m_assists_isSet) {
        obj.insert(QString("Assists"), ::OpenAPI::toJsonValue(m_assists));
    }
    if (m_average_damage_per_round_isSet) {
        obj.insert(QString("AverageDamagePerRound"), ::OpenAPI::toJsonValue(m_average_damage_per_round));
    }
    if (m_clutch1v2s_isSet) {
        obj.insert(QString("Clutch1v2s"), ::OpenAPI::toJsonValue(m_clutch1v2s));
    }
    if (m_clutch1v3s_isSet) {
        obj.insert(QString("Clutch1v3s"), ::OpenAPI::toJsonValue(m_clutch1v3s));
    }
    if (m_clutch1v4s_isSet) {
        obj.insert(QString("Clutch1v4s"), ::OpenAPI::toJsonValue(m_clutch1v4s));
    }
    if (m_clutch1v5s_isSet) {
        obj.insert(QString("Clutch1v5s"), ::OpenAPI::toJsonValue(m_clutch1v5s));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_deaths_isSet) {
        obj.insert(QString("Deaths"), ::OpenAPI::toJsonValue(m_deaths));
    }
    if (m_entry_kills_isSet) {
        obj.insert(QString("EntryKills"), ::OpenAPI::toJsonValue(m_entry_kills));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_headshots_isSet) {
        obj.insert(QString("Headshots"), ::OpenAPI::toJsonValue(m_headshots));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("IsClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_kast_isSet) {
        obj.insert(QString("Kast"), ::OpenAPI::toJsonValue(m_kast));
    }
    if (m_kills_isSet) {
        obj.insert(QString("Kills"), ::OpenAPI::toJsonValue(m_kills));
    }
    if (m_maps_isSet) {
        obj.insert(QString("Maps"), ::OpenAPI::toJsonValue(m_maps));
    }
    if (m_match_name_isSet) {
        obj.insert(QString("MatchName"), ::OpenAPI::toJsonValue(m_match_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentId"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_quad_kills_isSet) {
        obj.insert(QString("QuadKills"), ::OpenAPI::toJsonValue(m_quad_kills));
    }
    if (m_rating_isSet) {
        obj.insert(QString("Rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_updated_utc_isSet) {
        obj.insert(QString("UpdatedUtc"), ::OpenAPI::toJsonValue(m_updated_utc));
    }
    return obj;
}

double OAILeaderboard::getAces() const {
    return m_aces;
}
void OAILeaderboard::setAces(const double &aces) {
    m_aces = aces;
    m_aces_isSet = true;
}

bool OAILeaderboard::is_aces_Set() const{
    return m_aces_isSet;
}

bool OAILeaderboard::is_aces_Valid() const{
    return m_aces_isValid;
}

double OAILeaderboard::getAssists() const {
    return m_assists;
}
void OAILeaderboard::setAssists(const double &assists) {
    m_assists = assists;
    m_assists_isSet = true;
}

bool OAILeaderboard::is_assists_Set() const{
    return m_assists_isSet;
}

bool OAILeaderboard::is_assists_Valid() const{
    return m_assists_isValid;
}

double OAILeaderboard::getAverageDamagePerRound() const {
    return m_average_damage_per_round;
}
void OAILeaderboard::setAverageDamagePerRound(const double &average_damage_per_round) {
    m_average_damage_per_round = average_damage_per_round;
    m_average_damage_per_round_isSet = true;
}

bool OAILeaderboard::is_average_damage_per_round_Set() const{
    return m_average_damage_per_round_isSet;
}

bool OAILeaderboard::is_average_damage_per_round_Valid() const{
    return m_average_damage_per_round_isValid;
}

double OAILeaderboard::getClutch1v2s() const {
    return m_clutch1v2s;
}
void OAILeaderboard::setClutch1v2s(const double &clutch1v2s) {
    m_clutch1v2s = clutch1v2s;
    m_clutch1v2s_isSet = true;
}

bool OAILeaderboard::is_clutch1v2s_Set() const{
    return m_clutch1v2s_isSet;
}

bool OAILeaderboard::is_clutch1v2s_Valid() const{
    return m_clutch1v2s_isValid;
}

double OAILeaderboard::getClutch1v3s() const {
    return m_clutch1v3s;
}
void OAILeaderboard::setClutch1v3s(const double &clutch1v3s) {
    m_clutch1v3s = clutch1v3s;
    m_clutch1v3s_isSet = true;
}

bool OAILeaderboard::is_clutch1v3s_Set() const{
    return m_clutch1v3s_isSet;
}

bool OAILeaderboard::is_clutch1v3s_Valid() const{
    return m_clutch1v3s_isValid;
}

double OAILeaderboard::getClutch1v4s() const {
    return m_clutch1v4s;
}
void OAILeaderboard::setClutch1v4s(const double &clutch1v4s) {
    m_clutch1v4s = clutch1v4s;
    m_clutch1v4s_isSet = true;
}

bool OAILeaderboard::is_clutch1v4s_Set() const{
    return m_clutch1v4s_isSet;
}

bool OAILeaderboard::is_clutch1v4s_Valid() const{
    return m_clutch1v4s_isValid;
}

double OAILeaderboard::getClutch1v5s() const {
    return m_clutch1v5s;
}
void OAILeaderboard::setClutch1v5s(const double &clutch1v5s) {
    m_clutch1v5s = clutch1v5s;
    m_clutch1v5s_isSet = true;
}

bool OAILeaderboard::is_clutch1v5s_Set() const{
    return m_clutch1v5s_isSet;
}

bool OAILeaderboard::is_clutch1v5s_Valid() const{
    return m_clutch1v5s_isValid;
}

QString OAILeaderboard::getDateTime() const {
    return m_date_time;
}
void OAILeaderboard::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAILeaderboard::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAILeaderboard::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAILeaderboard::getDay() const {
    return m_day;
}
void OAILeaderboard::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAILeaderboard::is_day_Set() const{
    return m_day_isSet;
}

bool OAILeaderboard::is_day_Valid() const{
    return m_day_isValid;
}

double OAILeaderboard::getDeaths() const {
    return m_deaths;
}
void OAILeaderboard::setDeaths(const double &deaths) {
    m_deaths = deaths;
    m_deaths_isSet = true;
}

bool OAILeaderboard::is_deaths_Set() const{
    return m_deaths_isSet;
}

bool OAILeaderboard::is_deaths_Valid() const{
    return m_deaths_isValid;
}

double OAILeaderboard::getEntryKills() const {
    return m_entry_kills;
}
void OAILeaderboard::setEntryKills(const double &entry_kills) {
    m_entry_kills = entry_kills;
    m_entry_kills_isSet = true;
}

bool OAILeaderboard::is_entry_kills_Set() const{
    return m_entry_kills_isSet;
}

bool OAILeaderboard::is_entry_kills_Valid() const{
    return m_entry_kills_isValid;
}

double OAILeaderboard::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAILeaderboard::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAILeaderboard::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAILeaderboard::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

qint32 OAILeaderboard::getGameId() const {
    return m_game_id;
}
void OAILeaderboard::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAILeaderboard::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAILeaderboard::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAILeaderboard::getGames() const {
    return m_games;
}
void OAILeaderboard::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAILeaderboard::is_games_Set() const{
    return m_games_isSet;
}

bool OAILeaderboard::is_games_Valid() const{
    return m_games_isValid;
}

double OAILeaderboard::getHeadshots() const {
    return m_headshots;
}
void OAILeaderboard::setHeadshots(const double &headshots) {
    m_headshots = headshots;
    m_headshots_isSet = true;
}

bool OAILeaderboard::is_headshots_Set() const{
    return m_headshots_isSet;
}

bool OAILeaderboard::is_headshots_Valid() const{
    return m_headshots_isValid;
}

bool OAILeaderboard::isIsClosed() const {
    return m_is_closed;
}
void OAILeaderboard::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAILeaderboard::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAILeaderboard::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

double OAILeaderboard::getKast() const {
    return m_kast;
}
void OAILeaderboard::setKast(const double &kast) {
    m_kast = kast;
    m_kast_isSet = true;
}

bool OAILeaderboard::is_kast_Set() const{
    return m_kast_isSet;
}

bool OAILeaderboard::is_kast_Valid() const{
    return m_kast_isValid;
}

double OAILeaderboard::getKills() const {
    return m_kills;
}
void OAILeaderboard::setKills(const double &kills) {
    m_kills = kills;
    m_kills_isSet = true;
}

bool OAILeaderboard::is_kills_Set() const{
    return m_kills_isSet;
}

bool OAILeaderboard::is_kills_Valid() const{
    return m_kills_isValid;
}

double OAILeaderboard::getMaps() const {
    return m_maps;
}
void OAILeaderboard::setMaps(const double &maps) {
    m_maps = maps;
    m_maps_isSet = true;
}

bool OAILeaderboard::is_maps_Set() const{
    return m_maps_isSet;
}

bool OAILeaderboard::is_maps_Valid() const{
    return m_maps_isValid;
}

QString OAILeaderboard::getMatchName() const {
    return m_match_name;
}
void OAILeaderboard::setMatchName(const QString &match_name) {
    m_match_name = match_name;
    m_match_name_isSet = true;
}

bool OAILeaderboard::is_match_name_Set() const{
    return m_match_name_isSet;
}

bool OAILeaderboard::is_match_name_Valid() const{
    return m_match_name_isValid;
}

QString OAILeaderboard::getName() const {
    return m_name;
}
void OAILeaderboard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILeaderboard::is_name_Set() const{
    return m_name_isSet;
}

bool OAILeaderboard::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILeaderboard::getOpponent() const {
    return m_opponent;
}
void OAILeaderboard::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAILeaderboard::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAILeaderboard::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAILeaderboard::getOpponentId() const {
    return m_opponent_id;
}
void OAILeaderboard::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAILeaderboard::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAILeaderboard::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

qint32 OAILeaderboard::getPlayerId() const {
    return m_player_id;
}
void OAILeaderboard::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAILeaderboard::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAILeaderboard::is_player_id_Valid() const{
    return m_player_id_isValid;
}

double OAILeaderboard::getQuadKills() const {
    return m_quad_kills;
}
void OAILeaderboard::setQuadKills(const double &quad_kills) {
    m_quad_kills = quad_kills;
    m_quad_kills_isSet = true;
}

bool OAILeaderboard::is_quad_kills_Set() const{
    return m_quad_kills_isSet;
}

bool OAILeaderboard::is_quad_kills_Valid() const{
    return m_quad_kills_isValid;
}

double OAILeaderboard::getRating() const {
    return m_rating;
}
void OAILeaderboard::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAILeaderboard::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAILeaderboard::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAILeaderboard::getTeam() const {
    return m_team;
}
void OAILeaderboard::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAILeaderboard::is_team_Set() const{
    return m_team_isSet;
}

bool OAILeaderboard::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAILeaderboard::getTeamId() const {
    return m_team_id;
}
void OAILeaderboard::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAILeaderboard::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAILeaderboard::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAILeaderboard::getUpdated() const {
    return m_updated;
}
void OAILeaderboard::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAILeaderboard::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAILeaderboard::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAILeaderboard::getUpdatedUtc() const {
    return m_updated_utc;
}
void OAILeaderboard::setUpdatedUtc(const QString &updated_utc) {
    m_updated_utc = updated_utc;
    m_updated_utc_isSet = true;
}

bool OAILeaderboard::is_updated_utc_Set() const{
    return m_updated_utc_isSet;
}

bool OAILeaderboard::is_updated_utc_Valid() const{
    return m_updated_utc_isValid;
}

bool OAILeaderboard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_damage_per_round_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clutch1v2s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clutch1v3s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clutch1v4s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clutch1v5s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headshots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quad_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaderboard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
