/**
 * CS:GO v3 Stats
 * CS:GO v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompetitionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompetitionDetail::OAICompetitionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompetitionDetail::OAICompetitionDetail() {
    this->initializeModel();
}

OAICompetitionDetail::~OAICompetitionDetail() {}

void OAICompetitionDetail::initializeModel() {

    m_area_id_isSet = false;
    m_area_id_isValid = false;

    m_area_name_isSet = false;
    m_area_name_isValid = false;

    m_competition_id_isSet = false;
    m_competition_id_isValid = false;

    m_current_season_isSet = false;
    m_current_season_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_stats_coverage_isSet = false;
    m_player_stats_coverage_isValid = false;

    m_seasons_isSet = false;
    m_seasons_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICompetitionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompetitionDetail::fromJsonObject(QJsonObject json) {

    m_area_id_isValid = ::OpenAPI::fromJsonValue(m_area_id, json[QString("AreaId")]);
    m_area_id_isSet = !json[QString("AreaId")].isNull() && m_area_id_isValid;

    m_area_name_isValid = ::OpenAPI::fromJsonValue(m_area_name, json[QString("AreaName")]);
    m_area_name_isSet = !json[QString("AreaName")].isNull() && m_area_name_isValid;

    m_competition_id_isValid = ::OpenAPI::fromJsonValue(m_competition_id, json[QString("CompetitionId")]);
    m_competition_id_isSet = !json[QString("CompetitionId")].isNull() && m_competition_id_isValid;

    m_current_season_isValid = ::OpenAPI::fromJsonValue(m_current_season, json[QString("CurrentSeason")]);
    m_current_season_isSet = !json[QString("CurrentSeason")].isNull() && m_current_season_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_player_stats_coverage_isValid = ::OpenAPI::fromJsonValue(m_player_stats_coverage, json[QString("PlayerStatsCoverage")]);
    m_player_stats_coverage_isSet = !json[QString("PlayerStatsCoverage")].isNull() && m_player_stats_coverage_isValid;

    m_seasons_isValid = ::OpenAPI::fromJsonValue(m_seasons, json[QString("Seasons")]);
    m_seasons_isSet = !json[QString("Seasons")].isNull() && m_seasons_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("Teams")]);
    m_teams_isSet = !json[QString("Teams")].isNull() && m_teams_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAICompetitionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompetitionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_area_id_isSet) {
        obj.insert(QString("AreaId"), ::OpenAPI::toJsonValue(m_area_id));
    }
    if (m_area_name_isSet) {
        obj.insert(QString("AreaName"), ::OpenAPI::toJsonValue(m_area_name));
    }
    if (m_competition_id_isSet) {
        obj.insert(QString("CompetitionId"), ::OpenAPI::toJsonValue(m_competition_id));
    }
    if (m_current_season.isSet()) {
        obj.insert(QString("CurrentSeason"), ::OpenAPI::toJsonValue(m_current_season));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_games.size() > 0) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_gender_isSet) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_stats_coverage_isSet) {
        obj.insert(QString("PlayerStatsCoverage"), ::OpenAPI::toJsonValue(m_player_stats_coverage));
    }
    if (m_seasons.size() > 0) {
        obj.insert(QString("Seasons"), ::OpenAPI::toJsonValue(m_seasons));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("Teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAICompetitionDetail::getAreaId() const {
    return m_area_id;
}
void OAICompetitionDetail::setAreaId(const qint32 &area_id) {
    m_area_id = area_id;
    m_area_id_isSet = true;
}

bool OAICompetitionDetail::is_area_id_Set() const{
    return m_area_id_isSet;
}

bool OAICompetitionDetail::is_area_id_Valid() const{
    return m_area_id_isValid;
}

QString OAICompetitionDetail::getAreaName() const {
    return m_area_name;
}
void OAICompetitionDetail::setAreaName(const QString &area_name) {
    m_area_name = area_name;
    m_area_name_isSet = true;
}

bool OAICompetitionDetail::is_area_name_Set() const{
    return m_area_name_isSet;
}

bool OAICompetitionDetail::is_area_name_Valid() const{
    return m_area_name_isValid;
}

qint32 OAICompetitionDetail::getCompetitionId() const {
    return m_competition_id;
}
void OAICompetitionDetail::setCompetitionId(const qint32 &competition_id) {
    m_competition_id = competition_id;
    m_competition_id_isSet = true;
}

bool OAICompetitionDetail::is_competition_id_Set() const{
    return m_competition_id_isSet;
}

bool OAICompetitionDetail::is_competition_id_Valid() const{
    return m_competition_id_isValid;
}

OAISeason OAICompetitionDetail::getCurrentSeason() const {
    return m_current_season;
}
void OAICompetitionDetail::setCurrentSeason(const OAISeason &current_season) {
    m_current_season = current_season;
    m_current_season_isSet = true;
}

bool OAICompetitionDetail::is_current_season_Set() const{
    return m_current_season_isSet;
}

bool OAICompetitionDetail::is_current_season_Valid() const{
    return m_current_season_isValid;
}

QString OAICompetitionDetail::getFormat() const {
    return m_format;
}
void OAICompetitionDetail::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICompetitionDetail::is_format_Set() const{
    return m_format_isSet;
}

bool OAICompetitionDetail::is_format_Valid() const{
    return m_format_isValid;
}

QList<OAIGame> OAICompetitionDetail::getGames() const {
    return m_games;
}
void OAICompetitionDetail::setGames(const QList<OAIGame> &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAICompetitionDetail::is_games_Set() const{
    return m_games_isSet;
}

bool OAICompetitionDetail::is_games_Valid() const{
    return m_games_isValid;
}

QString OAICompetitionDetail::getGender() const {
    return m_gender;
}
void OAICompetitionDetail::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAICompetitionDetail::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAICompetitionDetail::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAICompetitionDetail::getName() const {
    return m_name;
}
void OAICompetitionDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompetitionDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompetitionDetail::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICompetitionDetail::isPlayerStatsCoverage() const {
    return m_player_stats_coverage;
}
void OAICompetitionDetail::setPlayerStatsCoverage(const bool &player_stats_coverage) {
    m_player_stats_coverage = player_stats_coverage;
    m_player_stats_coverage_isSet = true;
}

bool OAICompetitionDetail::is_player_stats_coverage_Set() const{
    return m_player_stats_coverage_isSet;
}

bool OAICompetitionDetail::is_player_stats_coverage_Valid() const{
    return m_player_stats_coverage_isValid;
}

QList<OAISeason> OAICompetitionDetail::getSeasons() const {
    return m_seasons;
}
void OAICompetitionDetail::setSeasons(const QList<OAISeason> &seasons) {
    m_seasons = seasons;
    m_seasons_isSet = true;
}

bool OAICompetitionDetail::is_seasons_Set() const{
    return m_seasons_isSet;
}

bool OAICompetitionDetail::is_seasons_Valid() const{
    return m_seasons_isValid;
}

QList<OAITeamDetail> OAICompetitionDetail::getTeams() const {
    return m_teams;
}
void OAICompetitionDetail::setTeams(const QList<OAITeamDetail> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAICompetitionDetail::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAICompetitionDetail::is_teams_Valid() const{
    return m_teams_isValid;
}

QString OAICompetitionDetail::getType() const {
    return m_type;
}
void OAICompetitionDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICompetitionDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAICompetitionDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICompetitionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_competition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_season.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_stats_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompetitionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
