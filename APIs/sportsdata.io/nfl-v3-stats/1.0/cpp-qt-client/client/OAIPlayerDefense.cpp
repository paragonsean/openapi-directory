/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerDefense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerDefense::OAIPlayerDefense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerDefense::OAIPlayerDefense() {
    this->initializeModel();
}

OAIPlayerDefense::~OAIPlayerDefense() {}

void OAIPlayerDefense::initializeModel() {

    m_assisted_tackles_isSet = false;
    m_assisted_tackles_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_position_isSet = false;
    m_fantasy_position_isValid = false;

    m_fumble_return_touchdowns_isSet = false;
    m_fumble_return_touchdowns_isValid = false;

    m_fumbles_forced_isSet = false;
    m_fumbles_forced_isValid = false;

    m_fumbles_recovered_isSet = false;
    m_fumbles_recovered_isValid = false;

    m_interception_return_touchdowns_isSet = false;
    m_interception_return_touchdowns_isValid = false;

    m_interception_return_yards_isSet = false;
    m_interception_return_yards_isValid = false;

    m_interceptions_isSet = false;
    m_interceptions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_passes_defended_isSet = false;
    m_passes_defended_isValid = false;

    m_player_game_id_isSet = false;
    m_player_game_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_quarterback_hits_isSet = false;
    m_quarterback_hits_isValid = false;

    m_sack_yards_isSet = false;
    m_sack_yards_isValid = false;

    m_sacks_isSet = false;
    m_sacks_isValid = false;

    m_safeties_isSet = false;
    m_safeties_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_solo_tackles_isSet = false;
    m_solo_tackles_isValid = false;

    m_tackles_isSet = false;
    m_tackles_isValid = false;

    m_tackles_for_loss_isSet = false;
    m_tackles_for_loss_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPlayerDefense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerDefense::fromJsonObject(QJsonObject json) {

    m_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_assisted_tackles, json[QString("AssistedTackles")]);
    m_assisted_tackles_isSet = !json[QString("AssistedTackles")].isNull() && m_assisted_tackles_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position, json[QString("FantasyPosition")]);
    m_fantasy_position_isSet = !json[QString("FantasyPosition")].isNull() && m_fantasy_position_isValid;

    m_fumble_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_touchdowns, json[QString("FumbleReturnTouchdowns")]);
    m_fumble_return_touchdowns_isSet = !json[QString("FumbleReturnTouchdowns")].isNull() && m_fumble_return_touchdowns_isValid;

    m_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_fumbles_forced, json[QString("FumblesForced")]);
    m_fumbles_forced_isSet = !json[QString("FumblesForced")].isNull() && m_fumbles_forced_isValid;

    m_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_fumbles_recovered, json[QString("FumblesRecovered")]);
    m_fumbles_recovered_isSet = !json[QString("FumblesRecovered")].isNull() && m_fumbles_recovered_isValid;

    m_interception_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_interception_return_touchdowns, json[QString("InterceptionReturnTouchdowns")]);
    m_interception_return_touchdowns_isSet = !json[QString("InterceptionReturnTouchdowns")].isNull() && m_interception_return_touchdowns_isValid;

    m_interception_return_yards_isValid = ::OpenAPI::fromJsonValue(m_interception_return_yards, json[QString("InterceptionReturnYards")]);
    m_interception_return_yards_isSet = !json[QString("InterceptionReturnYards")].isNull() && m_interception_return_yards_isValid;

    m_interceptions_isValid = ::OpenAPI::fromJsonValue(m_interceptions, json[QString("Interceptions")]);
    m_interceptions_isSet = !json[QString("Interceptions")].isNull() && m_interceptions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_passes_defended_isValid = ::OpenAPI::fromJsonValue(m_passes_defended, json[QString("PassesDefended")]);
    m_passes_defended_isSet = !json[QString("PassesDefended")].isNull() && m_passes_defended_isValid;

    m_player_game_id_isValid = ::OpenAPI::fromJsonValue(m_player_game_id, json[QString("PlayerGameID")]);
    m_player_game_id_isSet = !json[QString("PlayerGameID")].isNull() && m_player_game_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_quarterback_hits_isValid = ::OpenAPI::fromJsonValue(m_quarterback_hits, json[QString("QuarterbackHits")]);
    m_quarterback_hits_isSet = !json[QString("QuarterbackHits")].isNull() && m_quarterback_hits_isValid;

    m_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_sack_yards, json[QString("SackYards")]);
    m_sack_yards_isSet = !json[QString("SackYards")].isNull() && m_sack_yards_isValid;

    m_sacks_isValid = ::OpenAPI::fromJsonValue(m_sacks, json[QString("Sacks")]);
    m_sacks_isSet = !json[QString("Sacks")].isNull() && m_sacks_isValid;

    m_safeties_isValid = ::OpenAPI::fromJsonValue(m_safeties, json[QString("Safeties")]);
    m_safeties_isSet = !json[QString("Safeties")].isNull() && m_safeties_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_solo_tackles, json[QString("SoloTackles")]);
    m_solo_tackles_isSet = !json[QString("SoloTackles")].isNull() && m_solo_tackles_isValid;

    m_tackles_isValid = ::OpenAPI::fromJsonValue(m_tackles, json[QString("Tackles")]);
    m_tackles_isSet = !json[QString("Tackles")].isNull() && m_tackles_isValid;

    m_tackles_for_loss_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss, json[QString("TacklesForLoss")]);
    m_tackles_for_loss_isSet = !json[QString("TacklesForLoss")].isNull() && m_tackles_for_loss_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIPlayerDefense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerDefense::asJsonObject() const {
    QJsonObject obj;
    if (m_assisted_tackles_isSet) {
        obj.insert(QString("AssistedTackles"), ::OpenAPI::toJsonValue(m_assisted_tackles));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_position_isSet) {
        obj.insert(QString("FantasyPosition"), ::OpenAPI::toJsonValue(m_fantasy_position));
    }
    if (m_fumble_return_touchdowns_isSet) {
        obj.insert(QString("FumbleReturnTouchdowns"), ::OpenAPI::toJsonValue(m_fumble_return_touchdowns));
    }
    if (m_fumbles_forced_isSet) {
        obj.insert(QString("FumblesForced"), ::OpenAPI::toJsonValue(m_fumbles_forced));
    }
    if (m_fumbles_recovered_isSet) {
        obj.insert(QString("FumblesRecovered"), ::OpenAPI::toJsonValue(m_fumbles_recovered));
    }
    if (m_interception_return_touchdowns_isSet) {
        obj.insert(QString("InterceptionReturnTouchdowns"), ::OpenAPI::toJsonValue(m_interception_return_touchdowns));
    }
    if (m_interception_return_yards_isSet) {
        obj.insert(QString("InterceptionReturnYards"), ::OpenAPI::toJsonValue(m_interception_return_yards));
    }
    if (m_interceptions_isSet) {
        obj.insert(QString("Interceptions"), ::OpenAPI::toJsonValue(m_interceptions));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_passes_defended_isSet) {
        obj.insert(QString("PassesDefended"), ::OpenAPI::toJsonValue(m_passes_defended));
    }
    if (m_player_game_id_isSet) {
        obj.insert(QString("PlayerGameID"), ::OpenAPI::toJsonValue(m_player_game_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_quarterback_hits_isSet) {
        obj.insert(QString("QuarterbackHits"), ::OpenAPI::toJsonValue(m_quarterback_hits));
    }
    if (m_sack_yards_isSet) {
        obj.insert(QString("SackYards"), ::OpenAPI::toJsonValue(m_sack_yards));
    }
    if (m_sacks_isSet) {
        obj.insert(QString("Sacks"), ::OpenAPI::toJsonValue(m_sacks));
    }
    if (m_safeties_isSet) {
        obj.insert(QString("Safeties"), ::OpenAPI::toJsonValue(m_safeties));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_solo_tackles_isSet) {
        obj.insert(QString("SoloTackles"), ::OpenAPI::toJsonValue(m_solo_tackles));
    }
    if (m_tackles_isSet) {
        obj.insert(QString("Tackles"), ::OpenAPI::toJsonValue(m_tackles));
    }
    if (m_tackles_for_loss_isSet) {
        obj.insert(QString("TacklesForLoss"), ::OpenAPI::toJsonValue(m_tackles_for_loss));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIPlayerDefense::getAssistedTackles() const {
    return m_assisted_tackles;
}
void OAIPlayerDefense::setAssistedTackles(const qint32 &assisted_tackles) {
    m_assisted_tackles = assisted_tackles;
    m_assisted_tackles_isSet = true;
}

bool OAIPlayerDefense::is_assisted_tackles_Set() const{
    return m_assisted_tackles_isSet;
}

bool OAIPlayerDefense::is_assisted_tackles_Valid() const{
    return m_assisted_tackles_isValid;
}

double OAIPlayerDefense::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerDefense::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerDefense::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerDefense::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

QString OAIPlayerDefense::getFantasyPosition() const {
    return m_fantasy_position;
}
void OAIPlayerDefense::setFantasyPosition(const QString &fantasy_position) {
    m_fantasy_position = fantasy_position;
    m_fantasy_position_isSet = true;
}

bool OAIPlayerDefense::is_fantasy_position_Set() const{
    return m_fantasy_position_isSet;
}

bool OAIPlayerDefense::is_fantasy_position_Valid() const{
    return m_fantasy_position_isValid;
}

qint32 OAIPlayerDefense::getFumbleReturnTouchdowns() const {
    return m_fumble_return_touchdowns;
}
void OAIPlayerDefense::setFumbleReturnTouchdowns(const qint32 &fumble_return_touchdowns) {
    m_fumble_return_touchdowns = fumble_return_touchdowns;
    m_fumble_return_touchdowns_isSet = true;
}

bool OAIPlayerDefense::is_fumble_return_touchdowns_Set() const{
    return m_fumble_return_touchdowns_isSet;
}

bool OAIPlayerDefense::is_fumble_return_touchdowns_Valid() const{
    return m_fumble_return_touchdowns_isValid;
}

qint32 OAIPlayerDefense::getFumblesForced() const {
    return m_fumbles_forced;
}
void OAIPlayerDefense::setFumblesForced(const qint32 &fumbles_forced) {
    m_fumbles_forced = fumbles_forced;
    m_fumbles_forced_isSet = true;
}

bool OAIPlayerDefense::is_fumbles_forced_Set() const{
    return m_fumbles_forced_isSet;
}

bool OAIPlayerDefense::is_fumbles_forced_Valid() const{
    return m_fumbles_forced_isValid;
}

qint32 OAIPlayerDefense::getFumblesRecovered() const {
    return m_fumbles_recovered;
}
void OAIPlayerDefense::setFumblesRecovered(const qint32 &fumbles_recovered) {
    m_fumbles_recovered = fumbles_recovered;
    m_fumbles_recovered_isSet = true;
}

bool OAIPlayerDefense::is_fumbles_recovered_Set() const{
    return m_fumbles_recovered_isSet;
}

bool OAIPlayerDefense::is_fumbles_recovered_Valid() const{
    return m_fumbles_recovered_isValid;
}

qint32 OAIPlayerDefense::getInterceptionReturnTouchdowns() const {
    return m_interception_return_touchdowns;
}
void OAIPlayerDefense::setInterceptionReturnTouchdowns(const qint32 &interception_return_touchdowns) {
    m_interception_return_touchdowns = interception_return_touchdowns;
    m_interception_return_touchdowns_isSet = true;
}

bool OAIPlayerDefense::is_interception_return_touchdowns_Set() const{
    return m_interception_return_touchdowns_isSet;
}

bool OAIPlayerDefense::is_interception_return_touchdowns_Valid() const{
    return m_interception_return_touchdowns_isValid;
}

qint32 OAIPlayerDefense::getInterceptionReturnYards() const {
    return m_interception_return_yards;
}
void OAIPlayerDefense::setInterceptionReturnYards(const qint32 &interception_return_yards) {
    m_interception_return_yards = interception_return_yards;
    m_interception_return_yards_isSet = true;
}

bool OAIPlayerDefense::is_interception_return_yards_Set() const{
    return m_interception_return_yards_isSet;
}

bool OAIPlayerDefense::is_interception_return_yards_Valid() const{
    return m_interception_return_yards_isValid;
}

qint32 OAIPlayerDefense::getInterceptions() const {
    return m_interceptions;
}
void OAIPlayerDefense::setInterceptions(const qint32 &interceptions) {
    m_interceptions = interceptions;
    m_interceptions_isSet = true;
}

bool OAIPlayerDefense::is_interceptions_Set() const{
    return m_interceptions_isSet;
}

bool OAIPlayerDefense::is_interceptions_Valid() const{
    return m_interceptions_isValid;
}

QString OAIPlayerDefense::getName() const {
    return m_name;
}
void OAIPlayerDefense::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerDefense::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerDefense::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerDefense::getNumber() const {
    return m_number;
}
void OAIPlayerDefense::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerDefense::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerDefense::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlayerDefense::getPassesDefended() const {
    return m_passes_defended;
}
void OAIPlayerDefense::setPassesDefended(const qint32 &passes_defended) {
    m_passes_defended = passes_defended;
    m_passes_defended_isSet = true;
}

bool OAIPlayerDefense::is_passes_defended_Set() const{
    return m_passes_defended_isSet;
}

bool OAIPlayerDefense::is_passes_defended_Valid() const{
    return m_passes_defended_isValid;
}

qint32 OAIPlayerDefense::getPlayerGameId() const {
    return m_player_game_id;
}
void OAIPlayerDefense::setPlayerGameId(const qint32 &player_game_id) {
    m_player_game_id = player_game_id;
    m_player_game_id_isSet = true;
}

bool OAIPlayerDefense::is_player_game_id_Set() const{
    return m_player_game_id_isSet;
}

bool OAIPlayerDefense::is_player_game_id_Valid() const{
    return m_player_game_id_isValid;
}

qint32 OAIPlayerDefense::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerDefense::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerDefense::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerDefense::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerDefense::getPosition() const {
    return m_position;
}
void OAIPlayerDefense::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerDefense::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerDefense::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerDefense::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerDefense::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerDefense::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerDefense::is_position_category_Valid() const{
    return m_position_category_isValid;
}

qint32 OAIPlayerDefense::getQuarterbackHits() const {
    return m_quarterback_hits;
}
void OAIPlayerDefense::setQuarterbackHits(const qint32 &quarterback_hits) {
    m_quarterback_hits = quarterback_hits;
    m_quarterback_hits_isSet = true;
}

bool OAIPlayerDefense::is_quarterback_hits_Set() const{
    return m_quarterback_hits_isSet;
}

bool OAIPlayerDefense::is_quarterback_hits_Valid() const{
    return m_quarterback_hits_isValid;
}

qint32 OAIPlayerDefense::getSackYards() const {
    return m_sack_yards;
}
void OAIPlayerDefense::setSackYards(const qint32 &sack_yards) {
    m_sack_yards = sack_yards;
    m_sack_yards_isSet = true;
}

bool OAIPlayerDefense::is_sack_yards_Set() const{
    return m_sack_yards_isSet;
}

bool OAIPlayerDefense::is_sack_yards_Valid() const{
    return m_sack_yards_isValid;
}

double OAIPlayerDefense::getSacks() const {
    return m_sacks;
}
void OAIPlayerDefense::setSacks(const double &sacks) {
    m_sacks = sacks;
    m_sacks_isSet = true;
}

bool OAIPlayerDefense::is_sacks_Set() const{
    return m_sacks_isSet;
}

bool OAIPlayerDefense::is_sacks_Valid() const{
    return m_sacks_isValid;
}

qint32 OAIPlayerDefense::getSafeties() const {
    return m_safeties;
}
void OAIPlayerDefense::setSafeties(const qint32 &safeties) {
    m_safeties = safeties;
    m_safeties_isSet = true;
}

bool OAIPlayerDefense::is_safeties_Set() const{
    return m_safeties_isSet;
}

bool OAIPlayerDefense::is_safeties_Valid() const{
    return m_safeties_isValid;
}

QString OAIPlayerDefense::getShortName() const {
    return m_short_name;
}
void OAIPlayerDefense::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayerDefense::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayerDefense::is_short_name_Valid() const{
    return m_short_name_isValid;
}

qint32 OAIPlayerDefense::getSoloTackles() const {
    return m_solo_tackles;
}
void OAIPlayerDefense::setSoloTackles(const qint32 &solo_tackles) {
    m_solo_tackles = solo_tackles;
    m_solo_tackles_isSet = true;
}

bool OAIPlayerDefense::is_solo_tackles_Set() const{
    return m_solo_tackles_isSet;
}

bool OAIPlayerDefense::is_solo_tackles_Valid() const{
    return m_solo_tackles_isValid;
}

qint32 OAIPlayerDefense::getTackles() const {
    return m_tackles;
}
void OAIPlayerDefense::setTackles(const qint32 &tackles) {
    m_tackles = tackles;
    m_tackles_isSet = true;
}

bool OAIPlayerDefense::is_tackles_Set() const{
    return m_tackles_isSet;
}

bool OAIPlayerDefense::is_tackles_Valid() const{
    return m_tackles_isValid;
}

qint32 OAIPlayerDefense::getTacklesForLoss() const {
    return m_tackles_for_loss;
}
void OAIPlayerDefense::setTacklesForLoss(const qint32 &tackles_for_loss) {
    m_tackles_for_loss = tackles_for_loss;
    m_tackles_for_loss_isSet = true;
}

bool OAIPlayerDefense::is_tackles_for_loss_Set() const{
    return m_tackles_for_loss_isSet;
}

bool OAIPlayerDefense::is_tackles_for_loss_Valid() const{
    return m_tackles_for_loss_isValid;
}

QString OAIPlayerDefense::getTeam() const {
    return m_team;
}
void OAIPlayerDefense::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerDefense::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerDefense::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIPlayerDefense::getUpdated() const {
    return m_updated;
}
void OAIPlayerDefense::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayerDefense::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayerDefense::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPlayerDefense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_defended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerDefense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
