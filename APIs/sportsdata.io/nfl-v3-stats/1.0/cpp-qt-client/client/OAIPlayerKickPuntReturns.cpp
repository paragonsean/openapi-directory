/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerKickPuntReturns.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerKickPuntReturns::OAIPlayerKickPuntReturns(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerKickPuntReturns::OAIPlayerKickPuntReturns() {
    this->initializeModel();
}

OAIPlayerKickPuntReturns::~OAIPlayerKickPuntReturns() {}

void OAIPlayerKickPuntReturns::initializeModel() {

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_position_isSet = false;
    m_fantasy_position_isValid = false;

    m_fumbles_lost_isSet = false;
    m_fumbles_lost_isValid = false;

    m_kick_return_long_isSet = false;
    m_kick_return_long_isValid = false;

    m_kick_return_touchdowns_isSet = false;
    m_kick_return_touchdowns_isValid = false;

    m_kick_return_yards_isSet = false;
    m_kick_return_yards_isValid = false;

    m_kick_return_yards_per_attempt_isSet = false;
    m_kick_return_yards_per_attempt_isValid = false;

    m_kick_returns_isSet = false;
    m_kick_returns_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_player_game_id_isSet = false;
    m_player_game_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_punt_return_long_isSet = false;
    m_punt_return_long_isValid = false;

    m_punt_return_touchdowns_isSet = false;
    m_punt_return_touchdowns_isValid = false;

    m_punt_return_yards_isSet = false;
    m_punt_return_yards_isValid = false;

    m_punt_return_yards_per_attempt_isSet = false;
    m_punt_return_yards_per_attempt_isValid = false;

    m_punt_returns_isSet = false;
    m_punt_returns_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPlayerKickPuntReturns::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerKickPuntReturns::fromJsonObject(QJsonObject json) {

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position, json[QString("FantasyPosition")]);
    m_fantasy_position_isSet = !json[QString("FantasyPosition")].isNull() && m_fantasy_position_isValid;

    m_fumbles_lost_isValid = ::OpenAPI::fromJsonValue(m_fumbles_lost, json[QString("FumblesLost")]);
    m_fumbles_lost_isSet = !json[QString("FumblesLost")].isNull() && m_fumbles_lost_isValid;

    m_kick_return_long_isValid = ::OpenAPI::fromJsonValue(m_kick_return_long, json[QString("KickReturnLong")]);
    m_kick_return_long_isSet = !json[QString("KickReturnLong")].isNull() && m_kick_return_long_isValid;

    m_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_kick_return_touchdowns, json[QString("KickReturnTouchdowns")]);
    m_kick_return_touchdowns_isSet = !json[QString("KickReturnTouchdowns")].isNull() && m_kick_return_touchdowns_isValid;

    m_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards, json[QString("KickReturnYards")]);
    m_kick_return_yards_isSet = !json[QString("KickReturnYards")].isNull() && m_kick_return_yards_isValid;

    m_kick_return_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards_per_attempt, json[QString("KickReturnYardsPerAttempt")]);
    m_kick_return_yards_per_attempt_isSet = !json[QString("KickReturnYardsPerAttempt")].isNull() && m_kick_return_yards_per_attempt_isValid;

    m_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_kick_returns, json[QString("KickReturns")]);
    m_kick_returns_isSet = !json[QString("KickReturns")].isNull() && m_kick_returns_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_player_game_id_isValid = ::OpenAPI::fromJsonValue(m_player_game_id, json[QString("PlayerGameID")]);
    m_player_game_id_isSet = !json[QString("PlayerGameID")].isNull() && m_player_game_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_punt_return_long_isValid = ::OpenAPI::fromJsonValue(m_punt_return_long, json[QString("PuntReturnLong")]);
    m_punt_return_long_isSet = !json[QString("PuntReturnLong")].isNull() && m_punt_return_long_isValid;

    m_punt_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_punt_return_touchdowns, json[QString("PuntReturnTouchdowns")]);
    m_punt_return_touchdowns_isSet = !json[QString("PuntReturnTouchdowns")].isNull() && m_punt_return_touchdowns_isValid;

    m_punt_return_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards, json[QString("PuntReturnYards")]);
    m_punt_return_yards_isSet = !json[QString("PuntReturnYards")].isNull() && m_punt_return_yards_isValid;

    m_punt_return_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards_per_attempt, json[QString("PuntReturnYardsPerAttempt")]);
    m_punt_return_yards_per_attempt_isSet = !json[QString("PuntReturnYardsPerAttempt")].isNull() && m_punt_return_yards_per_attempt_isValid;

    m_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_punt_returns, json[QString("PuntReturns")]);
    m_punt_returns_isSet = !json[QString("PuntReturns")].isNull() && m_punt_returns_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIPlayerKickPuntReturns::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerKickPuntReturns::asJsonObject() const {
    QJsonObject obj;
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_position_isSet) {
        obj.insert(QString("FantasyPosition"), ::OpenAPI::toJsonValue(m_fantasy_position));
    }
    if (m_fumbles_lost_isSet) {
        obj.insert(QString("FumblesLost"), ::OpenAPI::toJsonValue(m_fumbles_lost));
    }
    if (m_kick_return_long_isSet) {
        obj.insert(QString("KickReturnLong"), ::OpenAPI::toJsonValue(m_kick_return_long));
    }
    if (m_kick_return_touchdowns_isSet) {
        obj.insert(QString("KickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_kick_return_touchdowns));
    }
    if (m_kick_return_yards_isSet) {
        obj.insert(QString("KickReturnYards"), ::OpenAPI::toJsonValue(m_kick_return_yards));
    }
    if (m_kick_return_yards_per_attempt_isSet) {
        obj.insert(QString("KickReturnYardsPerAttempt"), ::OpenAPI::toJsonValue(m_kick_return_yards_per_attempt));
    }
    if (m_kick_returns_isSet) {
        obj.insert(QString("KickReturns"), ::OpenAPI::toJsonValue(m_kick_returns));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_player_game_id_isSet) {
        obj.insert(QString("PlayerGameID"), ::OpenAPI::toJsonValue(m_player_game_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_punt_return_long_isSet) {
        obj.insert(QString("PuntReturnLong"), ::OpenAPI::toJsonValue(m_punt_return_long));
    }
    if (m_punt_return_touchdowns_isSet) {
        obj.insert(QString("PuntReturnTouchdowns"), ::OpenAPI::toJsonValue(m_punt_return_touchdowns));
    }
    if (m_punt_return_yards_isSet) {
        obj.insert(QString("PuntReturnYards"), ::OpenAPI::toJsonValue(m_punt_return_yards));
    }
    if (m_punt_return_yards_per_attempt_isSet) {
        obj.insert(QString("PuntReturnYardsPerAttempt"), ::OpenAPI::toJsonValue(m_punt_return_yards_per_attempt));
    }
    if (m_punt_returns_isSet) {
        obj.insert(QString("PuntReturns"), ::OpenAPI::toJsonValue(m_punt_returns));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

double OAIPlayerKickPuntReturns::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerKickPuntReturns::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerKickPuntReturns::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

QString OAIPlayerKickPuntReturns::getFantasyPosition() const {
    return m_fantasy_position;
}
void OAIPlayerKickPuntReturns::setFantasyPosition(const QString &fantasy_position) {
    m_fantasy_position = fantasy_position;
    m_fantasy_position_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_fantasy_position_Set() const{
    return m_fantasy_position_isSet;
}

bool OAIPlayerKickPuntReturns::is_fantasy_position_Valid() const{
    return m_fantasy_position_isValid;
}

qint32 OAIPlayerKickPuntReturns::getFumblesLost() const {
    return m_fumbles_lost;
}
void OAIPlayerKickPuntReturns::setFumblesLost(const qint32 &fumbles_lost) {
    m_fumbles_lost = fumbles_lost;
    m_fumbles_lost_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_fumbles_lost_Set() const{
    return m_fumbles_lost_isSet;
}

bool OAIPlayerKickPuntReturns::is_fumbles_lost_Valid() const{
    return m_fumbles_lost_isValid;
}

qint32 OAIPlayerKickPuntReturns::getKickReturnLong() const {
    return m_kick_return_long;
}
void OAIPlayerKickPuntReturns::setKickReturnLong(const qint32 &kick_return_long) {
    m_kick_return_long = kick_return_long;
    m_kick_return_long_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_kick_return_long_Set() const{
    return m_kick_return_long_isSet;
}

bool OAIPlayerKickPuntReturns::is_kick_return_long_Valid() const{
    return m_kick_return_long_isValid;
}

qint32 OAIPlayerKickPuntReturns::getKickReturnTouchdowns() const {
    return m_kick_return_touchdowns;
}
void OAIPlayerKickPuntReturns::setKickReturnTouchdowns(const qint32 &kick_return_touchdowns) {
    m_kick_return_touchdowns = kick_return_touchdowns;
    m_kick_return_touchdowns_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_kick_return_touchdowns_Set() const{
    return m_kick_return_touchdowns_isSet;
}

bool OAIPlayerKickPuntReturns::is_kick_return_touchdowns_Valid() const{
    return m_kick_return_touchdowns_isValid;
}

qint32 OAIPlayerKickPuntReturns::getKickReturnYards() const {
    return m_kick_return_yards;
}
void OAIPlayerKickPuntReturns::setKickReturnYards(const qint32 &kick_return_yards) {
    m_kick_return_yards = kick_return_yards;
    m_kick_return_yards_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_kick_return_yards_Set() const{
    return m_kick_return_yards_isSet;
}

bool OAIPlayerKickPuntReturns::is_kick_return_yards_Valid() const{
    return m_kick_return_yards_isValid;
}

double OAIPlayerKickPuntReturns::getKickReturnYardsPerAttempt() const {
    return m_kick_return_yards_per_attempt;
}
void OAIPlayerKickPuntReturns::setKickReturnYardsPerAttempt(const double &kick_return_yards_per_attempt) {
    m_kick_return_yards_per_attempt = kick_return_yards_per_attempt;
    m_kick_return_yards_per_attempt_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_kick_return_yards_per_attempt_Set() const{
    return m_kick_return_yards_per_attempt_isSet;
}

bool OAIPlayerKickPuntReturns::is_kick_return_yards_per_attempt_Valid() const{
    return m_kick_return_yards_per_attempt_isValid;
}

qint32 OAIPlayerKickPuntReturns::getKickReturns() const {
    return m_kick_returns;
}
void OAIPlayerKickPuntReturns::setKickReturns(const qint32 &kick_returns) {
    m_kick_returns = kick_returns;
    m_kick_returns_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_kick_returns_Set() const{
    return m_kick_returns_isSet;
}

bool OAIPlayerKickPuntReturns::is_kick_returns_Valid() const{
    return m_kick_returns_isValid;
}

QString OAIPlayerKickPuntReturns::getName() const {
    return m_name;
}
void OAIPlayerKickPuntReturns::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerKickPuntReturns::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerKickPuntReturns::getNumber() const {
    return m_number;
}
void OAIPlayerKickPuntReturns::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerKickPuntReturns::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlayerKickPuntReturns::getPlayerGameId() const {
    return m_player_game_id;
}
void OAIPlayerKickPuntReturns::setPlayerGameId(const qint32 &player_game_id) {
    m_player_game_id = player_game_id;
    m_player_game_id_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_player_game_id_Set() const{
    return m_player_game_id_isSet;
}

bool OAIPlayerKickPuntReturns::is_player_game_id_Valid() const{
    return m_player_game_id_isValid;
}

qint32 OAIPlayerKickPuntReturns::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerKickPuntReturns::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerKickPuntReturns::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerKickPuntReturns::getPosition() const {
    return m_position;
}
void OAIPlayerKickPuntReturns::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerKickPuntReturns::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerKickPuntReturns::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerKickPuntReturns::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerKickPuntReturns::is_position_category_Valid() const{
    return m_position_category_isValid;
}

qint32 OAIPlayerKickPuntReturns::getPuntReturnLong() const {
    return m_punt_return_long;
}
void OAIPlayerKickPuntReturns::setPuntReturnLong(const qint32 &punt_return_long) {
    m_punt_return_long = punt_return_long;
    m_punt_return_long_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_punt_return_long_Set() const{
    return m_punt_return_long_isSet;
}

bool OAIPlayerKickPuntReturns::is_punt_return_long_Valid() const{
    return m_punt_return_long_isValid;
}

qint32 OAIPlayerKickPuntReturns::getPuntReturnTouchdowns() const {
    return m_punt_return_touchdowns;
}
void OAIPlayerKickPuntReturns::setPuntReturnTouchdowns(const qint32 &punt_return_touchdowns) {
    m_punt_return_touchdowns = punt_return_touchdowns;
    m_punt_return_touchdowns_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_punt_return_touchdowns_Set() const{
    return m_punt_return_touchdowns_isSet;
}

bool OAIPlayerKickPuntReturns::is_punt_return_touchdowns_Valid() const{
    return m_punt_return_touchdowns_isValid;
}

qint32 OAIPlayerKickPuntReturns::getPuntReturnYards() const {
    return m_punt_return_yards;
}
void OAIPlayerKickPuntReturns::setPuntReturnYards(const qint32 &punt_return_yards) {
    m_punt_return_yards = punt_return_yards;
    m_punt_return_yards_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_punt_return_yards_Set() const{
    return m_punt_return_yards_isSet;
}

bool OAIPlayerKickPuntReturns::is_punt_return_yards_Valid() const{
    return m_punt_return_yards_isValid;
}

double OAIPlayerKickPuntReturns::getPuntReturnYardsPerAttempt() const {
    return m_punt_return_yards_per_attempt;
}
void OAIPlayerKickPuntReturns::setPuntReturnYardsPerAttempt(const double &punt_return_yards_per_attempt) {
    m_punt_return_yards_per_attempt = punt_return_yards_per_attempt;
    m_punt_return_yards_per_attempt_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_punt_return_yards_per_attempt_Set() const{
    return m_punt_return_yards_per_attempt_isSet;
}

bool OAIPlayerKickPuntReturns::is_punt_return_yards_per_attempt_Valid() const{
    return m_punt_return_yards_per_attempt_isValid;
}

qint32 OAIPlayerKickPuntReturns::getPuntReturns() const {
    return m_punt_returns;
}
void OAIPlayerKickPuntReturns::setPuntReturns(const qint32 &punt_returns) {
    m_punt_returns = punt_returns;
    m_punt_returns_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_punt_returns_Set() const{
    return m_punt_returns_isSet;
}

bool OAIPlayerKickPuntReturns::is_punt_returns_Valid() const{
    return m_punt_returns_isValid;
}

QString OAIPlayerKickPuntReturns::getShortName() const {
    return m_short_name;
}
void OAIPlayerKickPuntReturns::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayerKickPuntReturns::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIPlayerKickPuntReturns::getTeam() const {
    return m_team;
}
void OAIPlayerKickPuntReturns::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerKickPuntReturns::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIPlayerKickPuntReturns::getUpdated() const {
    return m_updated;
}
void OAIPlayerKickPuntReturns::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayerKickPuntReturns::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayerKickPuntReturns::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPlayerKickPuntReturns::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerKickPuntReturns::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
