/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBye.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBye::OAIBye(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBye::OAIBye() {
    this->initializeModel();
}

OAIBye::~OAIBye() {}

void OAIBye::initializeModel() {

    m_season_isSet = false;
    m_season_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIBye::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBye::fromJsonObject(QJsonObject json) {

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;
}

QString OAIBye::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBye::asJsonObject() const {
    QJsonObject obj;
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

qint32 OAIBye::getSeason() const {
    return m_season;
}
void OAIBye::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIBye::is_season_Set() const{
    return m_season_isSet;
}

bool OAIBye::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIBye::getTeam() const {
    return m_team;
}
void OAIBye::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBye::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBye::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIBye::getWeek() const {
    return m_week;
}
void OAIBye::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIBye::is_week_Set() const{
    return m_week_isSet;
}

bool OAIBye::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIBye::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBye::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
