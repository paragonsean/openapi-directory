/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScoreV3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScoreV3::OAIBoxScoreV3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScoreV3::OAIBoxScoreV3() {
    this->initializeModel();
}

OAIBoxScoreV3::~OAIBoxScoreV3() {}

void OAIBoxScoreV3::initializeModel() {

    m_fantasy_defense_games_isSet = false;
    m_fantasy_defense_games_isValid = false;

    m_player_games_isSet = false;
    m_player_games_isValid = false;

    m_quarters_isSet = false;
    m_quarters_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_scoring_details_isSet = false;
    m_scoring_details_isValid = false;

    m_scoring_plays_isSet = false;
    m_scoring_plays_isValid = false;

    m_team_games_isSet = false;
    m_team_games_isValid = false;
}

void OAIBoxScoreV3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScoreV3::fromJsonObject(QJsonObject json) {

    m_fantasy_defense_games_isValid = ::OpenAPI::fromJsonValue(m_fantasy_defense_games, json[QString("FantasyDefenseGames")]);
    m_fantasy_defense_games_isSet = !json[QString("FantasyDefenseGames")].isNull() && m_fantasy_defense_games_isValid;

    m_player_games_isValid = ::OpenAPI::fromJsonValue(m_player_games, json[QString("PlayerGames")]);
    m_player_games_isSet = !json[QString("PlayerGames")].isNull() && m_player_games_isValid;

    m_quarters_isValid = ::OpenAPI::fromJsonValue(m_quarters, json[QString("Quarters")]);
    m_quarters_isSet = !json[QString("Quarters")].isNull() && m_quarters_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_scoring_details_isValid = ::OpenAPI::fromJsonValue(m_scoring_details, json[QString("ScoringDetails")]);
    m_scoring_details_isSet = !json[QString("ScoringDetails")].isNull() && m_scoring_details_isValid;

    m_scoring_plays_isValid = ::OpenAPI::fromJsonValue(m_scoring_plays, json[QString("ScoringPlays")]);
    m_scoring_plays_isSet = !json[QString("ScoringPlays")].isNull() && m_scoring_plays_isValid;

    m_team_games_isValid = ::OpenAPI::fromJsonValue(m_team_games, json[QString("TeamGames")]);
    m_team_games_isSet = !json[QString("TeamGames")].isNull() && m_team_games_isValid;
}

QString OAIBoxScoreV3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScoreV3::asJsonObject() const {
    QJsonObject obj;
    if (m_fantasy_defense_games.size() > 0) {
        obj.insert(QString("FantasyDefenseGames"), ::OpenAPI::toJsonValue(m_fantasy_defense_games));
    }
    if (m_player_games.size() > 0) {
        obj.insert(QString("PlayerGames"), ::OpenAPI::toJsonValue(m_player_games));
    }
    if (m_quarters.size() > 0) {
        obj.insert(QString("Quarters"), ::OpenAPI::toJsonValue(m_quarters));
    }
    if (m_score.isSet()) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_scoring_details.size() > 0) {
        obj.insert(QString("ScoringDetails"), ::OpenAPI::toJsonValue(m_scoring_details));
    }
    if (m_scoring_plays.size() > 0) {
        obj.insert(QString("ScoringPlays"), ::OpenAPI::toJsonValue(m_scoring_plays));
    }
    if (m_team_games.size() > 0) {
        obj.insert(QString("TeamGames"), ::OpenAPI::toJsonValue(m_team_games));
    }
    return obj;
}

QList<OAIFantasyDefenseGame> OAIBoxScoreV3::getFantasyDefenseGames() const {
    return m_fantasy_defense_games;
}
void OAIBoxScoreV3::setFantasyDefenseGames(const QList<OAIFantasyDefenseGame> &fantasy_defense_games) {
    m_fantasy_defense_games = fantasy_defense_games;
    m_fantasy_defense_games_isSet = true;
}

bool OAIBoxScoreV3::is_fantasy_defense_games_Set() const{
    return m_fantasy_defense_games_isSet;
}

bool OAIBoxScoreV3::is_fantasy_defense_games_Valid() const{
    return m_fantasy_defense_games_isValid;
}

QList<OAIPlayerGame> OAIBoxScoreV3::getPlayerGames() const {
    return m_player_games;
}
void OAIBoxScoreV3::setPlayerGames(const QList<OAIPlayerGame> &player_games) {
    m_player_games = player_games;
    m_player_games_isSet = true;
}

bool OAIBoxScoreV3::is_player_games_Set() const{
    return m_player_games_isSet;
}

bool OAIBoxScoreV3::is_player_games_Valid() const{
    return m_player_games_isValid;
}

QList<OAIQuarter> OAIBoxScoreV3::getQuarters() const {
    return m_quarters;
}
void OAIBoxScoreV3::setQuarters(const QList<OAIQuarter> &quarters) {
    m_quarters = quarters;
    m_quarters_isSet = true;
}

bool OAIBoxScoreV3::is_quarters_Set() const{
    return m_quarters_isSet;
}

bool OAIBoxScoreV3::is_quarters_Valid() const{
    return m_quarters_isValid;
}

OAIScore OAIBoxScoreV3::getScore() const {
    return m_score;
}
void OAIBoxScoreV3::setScore(const OAIScore &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIBoxScoreV3::is_score_Set() const{
    return m_score_isSet;
}

bool OAIBoxScoreV3::is_score_Valid() const{
    return m_score_isValid;
}

QList<OAIScoringDetail> OAIBoxScoreV3::getScoringDetails() const {
    return m_scoring_details;
}
void OAIBoxScoreV3::setScoringDetails(const QList<OAIScoringDetail> &scoring_details) {
    m_scoring_details = scoring_details;
    m_scoring_details_isSet = true;
}

bool OAIBoxScoreV3::is_scoring_details_Set() const{
    return m_scoring_details_isSet;
}

bool OAIBoxScoreV3::is_scoring_details_Valid() const{
    return m_scoring_details_isValid;
}

QList<OAIScoringPlay> OAIBoxScoreV3::getScoringPlays() const {
    return m_scoring_plays;
}
void OAIBoxScoreV3::setScoringPlays(const QList<OAIScoringPlay> &scoring_plays) {
    m_scoring_plays = scoring_plays;
    m_scoring_plays_isSet = true;
}

bool OAIBoxScoreV3::is_scoring_plays_Set() const{
    return m_scoring_plays_isSet;
}

bool OAIBoxScoreV3::is_scoring_plays_Valid() const{
    return m_scoring_plays_isValid;
}

QList<OAITeamGame> OAIBoxScoreV3::getTeamGames() const {
    return m_team_games;
}
void OAIBoxScoreV3::setTeamGames(const QList<OAITeamGame> &team_games) {
    m_team_games = team_games;
    m_team_games_isSet = true;
}

bool OAIBoxScoreV3::is_team_games_Set() const{
    return m_team_games_isSet;
}

bool OAIBoxScoreV3::is_team_games_Valid() const{
    return m_team_games_isValid;
}

bool OAIBoxScoreV3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fantasy_defense_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_plays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScoreV3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
