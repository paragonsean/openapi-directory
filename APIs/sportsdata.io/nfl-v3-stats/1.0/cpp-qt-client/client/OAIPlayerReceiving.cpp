/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerReceiving.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerReceiving::OAIPlayerReceiving(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerReceiving::OAIPlayerReceiving() {
    this->initializeModel();
}

OAIPlayerReceiving::~OAIPlayerReceiving() {}

void OAIPlayerReceiving::initializeModel() {

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_position_isSet = false;
    m_fantasy_position_isValid = false;

    m_fumbles_lost_isSet = false;
    m_fumbles_lost_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_player_game_id_isSet = false;
    m_player_game_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_receiving_long_isSet = false;
    m_receiving_long_isValid = false;

    m_receiving_targets_isSet = false;
    m_receiving_targets_isValid = false;

    m_receiving_touchdowns_isSet = false;
    m_receiving_touchdowns_isValid = false;

    m_receiving_yards_isSet = false;
    m_receiving_yards_isValid = false;

    m_receiving_yards_per_reception_isSet = false;
    m_receiving_yards_per_reception_isValid = false;

    m_receiving_yards_per_target_isSet = false;
    m_receiving_yards_per_target_isValid = false;

    m_reception_percentage_isSet = false;
    m_reception_percentage_isValid = false;

    m_receptions_isSet = false;
    m_receptions_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_two_point_conversion_receptions_isSet = false;
    m_two_point_conversion_receptions_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPlayerReceiving::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerReceiving::fromJsonObject(QJsonObject json) {

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position, json[QString("FantasyPosition")]);
    m_fantasy_position_isSet = !json[QString("FantasyPosition")].isNull() && m_fantasy_position_isValid;

    m_fumbles_lost_isValid = ::OpenAPI::fromJsonValue(m_fumbles_lost, json[QString("FumblesLost")]);
    m_fumbles_lost_isSet = !json[QString("FumblesLost")].isNull() && m_fumbles_lost_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_player_game_id_isValid = ::OpenAPI::fromJsonValue(m_player_game_id, json[QString("PlayerGameID")]);
    m_player_game_id_isSet = !json[QString("PlayerGameID")].isNull() && m_player_game_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_receiving_long_isValid = ::OpenAPI::fromJsonValue(m_receiving_long, json[QString("ReceivingLong")]);
    m_receiving_long_isSet = !json[QString("ReceivingLong")].isNull() && m_receiving_long_isValid;

    m_receiving_targets_isValid = ::OpenAPI::fromJsonValue(m_receiving_targets, json[QString("ReceivingTargets")]);
    m_receiving_targets_isSet = !json[QString("ReceivingTargets")].isNull() && m_receiving_targets_isValid;

    m_receiving_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_receiving_touchdowns, json[QString("ReceivingTouchdowns")]);
    m_receiving_touchdowns_isSet = !json[QString("ReceivingTouchdowns")].isNull() && m_receiving_touchdowns_isValid;

    m_receiving_yards_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards, json[QString("ReceivingYards")]);
    m_receiving_yards_isSet = !json[QString("ReceivingYards")].isNull() && m_receiving_yards_isValid;

    m_receiving_yards_per_reception_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards_per_reception, json[QString("ReceivingYardsPerReception")]);
    m_receiving_yards_per_reception_isSet = !json[QString("ReceivingYardsPerReception")].isNull() && m_receiving_yards_per_reception_isValid;

    m_receiving_yards_per_target_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards_per_target, json[QString("ReceivingYardsPerTarget")]);
    m_receiving_yards_per_target_isSet = !json[QString("ReceivingYardsPerTarget")].isNull() && m_receiving_yards_per_target_isValid;

    m_reception_percentage_isValid = ::OpenAPI::fromJsonValue(m_reception_percentage, json[QString("ReceptionPercentage")]);
    m_reception_percentage_isSet = !json[QString("ReceptionPercentage")].isNull() && m_reception_percentage_isValid;

    m_receptions_isValid = ::OpenAPI::fromJsonValue(m_receptions, json[QString("Receptions")]);
    m_receptions_isSet = !json[QString("Receptions")].isNull() && m_receptions_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_two_point_conversion_receptions_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_receptions, json[QString("TwoPointConversionReceptions")]);
    m_two_point_conversion_receptions_isSet = !json[QString("TwoPointConversionReceptions")].isNull() && m_two_point_conversion_receptions_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIPlayerReceiving::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerReceiving::asJsonObject() const {
    QJsonObject obj;
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_position_isSet) {
        obj.insert(QString("FantasyPosition"), ::OpenAPI::toJsonValue(m_fantasy_position));
    }
    if (m_fumbles_lost_isSet) {
        obj.insert(QString("FumblesLost"), ::OpenAPI::toJsonValue(m_fumbles_lost));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_player_game_id_isSet) {
        obj.insert(QString("PlayerGameID"), ::OpenAPI::toJsonValue(m_player_game_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_receiving_long_isSet) {
        obj.insert(QString("ReceivingLong"), ::OpenAPI::toJsonValue(m_receiving_long));
    }
    if (m_receiving_targets_isSet) {
        obj.insert(QString("ReceivingTargets"), ::OpenAPI::toJsonValue(m_receiving_targets));
    }
    if (m_receiving_touchdowns_isSet) {
        obj.insert(QString("ReceivingTouchdowns"), ::OpenAPI::toJsonValue(m_receiving_touchdowns));
    }
    if (m_receiving_yards_isSet) {
        obj.insert(QString("ReceivingYards"), ::OpenAPI::toJsonValue(m_receiving_yards));
    }
    if (m_receiving_yards_per_reception_isSet) {
        obj.insert(QString("ReceivingYardsPerReception"), ::OpenAPI::toJsonValue(m_receiving_yards_per_reception));
    }
    if (m_receiving_yards_per_target_isSet) {
        obj.insert(QString("ReceivingYardsPerTarget"), ::OpenAPI::toJsonValue(m_receiving_yards_per_target));
    }
    if (m_reception_percentage_isSet) {
        obj.insert(QString("ReceptionPercentage"), ::OpenAPI::toJsonValue(m_reception_percentage));
    }
    if (m_receptions_isSet) {
        obj.insert(QString("Receptions"), ::OpenAPI::toJsonValue(m_receptions));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_two_point_conversion_receptions_isSet) {
        obj.insert(QString("TwoPointConversionReceptions"), ::OpenAPI::toJsonValue(m_two_point_conversion_receptions));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

double OAIPlayerReceiving::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerReceiving::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerReceiving::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerReceiving::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

QString OAIPlayerReceiving::getFantasyPosition() const {
    return m_fantasy_position;
}
void OAIPlayerReceiving::setFantasyPosition(const QString &fantasy_position) {
    m_fantasy_position = fantasy_position;
    m_fantasy_position_isSet = true;
}

bool OAIPlayerReceiving::is_fantasy_position_Set() const{
    return m_fantasy_position_isSet;
}

bool OAIPlayerReceiving::is_fantasy_position_Valid() const{
    return m_fantasy_position_isValid;
}

qint32 OAIPlayerReceiving::getFumblesLost() const {
    return m_fumbles_lost;
}
void OAIPlayerReceiving::setFumblesLost(const qint32 &fumbles_lost) {
    m_fumbles_lost = fumbles_lost;
    m_fumbles_lost_isSet = true;
}

bool OAIPlayerReceiving::is_fumbles_lost_Set() const{
    return m_fumbles_lost_isSet;
}

bool OAIPlayerReceiving::is_fumbles_lost_Valid() const{
    return m_fumbles_lost_isValid;
}

QString OAIPlayerReceiving::getName() const {
    return m_name;
}
void OAIPlayerReceiving::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerReceiving::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerReceiving::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerReceiving::getNumber() const {
    return m_number;
}
void OAIPlayerReceiving::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerReceiving::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerReceiving::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlayerReceiving::getPlayerGameId() const {
    return m_player_game_id;
}
void OAIPlayerReceiving::setPlayerGameId(const qint32 &player_game_id) {
    m_player_game_id = player_game_id;
    m_player_game_id_isSet = true;
}

bool OAIPlayerReceiving::is_player_game_id_Set() const{
    return m_player_game_id_isSet;
}

bool OAIPlayerReceiving::is_player_game_id_Valid() const{
    return m_player_game_id_isValid;
}

qint32 OAIPlayerReceiving::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerReceiving::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerReceiving::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerReceiving::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerReceiving::getPosition() const {
    return m_position;
}
void OAIPlayerReceiving::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerReceiving::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerReceiving::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerReceiving::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerReceiving::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerReceiving::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerReceiving::is_position_category_Valid() const{
    return m_position_category_isValid;
}

qint32 OAIPlayerReceiving::getReceivingLong() const {
    return m_receiving_long;
}
void OAIPlayerReceiving::setReceivingLong(const qint32 &receiving_long) {
    m_receiving_long = receiving_long;
    m_receiving_long_isSet = true;
}

bool OAIPlayerReceiving::is_receiving_long_Set() const{
    return m_receiving_long_isSet;
}

bool OAIPlayerReceiving::is_receiving_long_Valid() const{
    return m_receiving_long_isValid;
}

qint32 OAIPlayerReceiving::getReceivingTargets() const {
    return m_receiving_targets;
}
void OAIPlayerReceiving::setReceivingTargets(const qint32 &receiving_targets) {
    m_receiving_targets = receiving_targets;
    m_receiving_targets_isSet = true;
}

bool OAIPlayerReceiving::is_receiving_targets_Set() const{
    return m_receiving_targets_isSet;
}

bool OAIPlayerReceiving::is_receiving_targets_Valid() const{
    return m_receiving_targets_isValid;
}

qint32 OAIPlayerReceiving::getReceivingTouchdowns() const {
    return m_receiving_touchdowns;
}
void OAIPlayerReceiving::setReceivingTouchdowns(const qint32 &receiving_touchdowns) {
    m_receiving_touchdowns = receiving_touchdowns;
    m_receiving_touchdowns_isSet = true;
}

bool OAIPlayerReceiving::is_receiving_touchdowns_Set() const{
    return m_receiving_touchdowns_isSet;
}

bool OAIPlayerReceiving::is_receiving_touchdowns_Valid() const{
    return m_receiving_touchdowns_isValid;
}

qint32 OAIPlayerReceiving::getReceivingYards() const {
    return m_receiving_yards;
}
void OAIPlayerReceiving::setReceivingYards(const qint32 &receiving_yards) {
    m_receiving_yards = receiving_yards;
    m_receiving_yards_isSet = true;
}

bool OAIPlayerReceiving::is_receiving_yards_Set() const{
    return m_receiving_yards_isSet;
}

bool OAIPlayerReceiving::is_receiving_yards_Valid() const{
    return m_receiving_yards_isValid;
}

double OAIPlayerReceiving::getReceivingYardsPerReception() const {
    return m_receiving_yards_per_reception;
}
void OAIPlayerReceiving::setReceivingYardsPerReception(const double &receiving_yards_per_reception) {
    m_receiving_yards_per_reception = receiving_yards_per_reception;
    m_receiving_yards_per_reception_isSet = true;
}

bool OAIPlayerReceiving::is_receiving_yards_per_reception_Set() const{
    return m_receiving_yards_per_reception_isSet;
}

bool OAIPlayerReceiving::is_receiving_yards_per_reception_Valid() const{
    return m_receiving_yards_per_reception_isValid;
}

double OAIPlayerReceiving::getReceivingYardsPerTarget() const {
    return m_receiving_yards_per_target;
}
void OAIPlayerReceiving::setReceivingYardsPerTarget(const double &receiving_yards_per_target) {
    m_receiving_yards_per_target = receiving_yards_per_target;
    m_receiving_yards_per_target_isSet = true;
}

bool OAIPlayerReceiving::is_receiving_yards_per_target_Set() const{
    return m_receiving_yards_per_target_isSet;
}

bool OAIPlayerReceiving::is_receiving_yards_per_target_Valid() const{
    return m_receiving_yards_per_target_isValid;
}

double OAIPlayerReceiving::getReceptionPercentage() const {
    return m_reception_percentage;
}
void OAIPlayerReceiving::setReceptionPercentage(const double &reception_percentage) {
    m_reception_percentage = reception_percentage;
    m_reception_percentage_isSet = true;
}

bool OAIPlayerReceiving::is_reception_percentage_Set() const{
    return m_reception_percentage_isSet;
}

bool OAIPlayerReceiving::is_reception_percentage_Valid() const{
    return m_reception_percentage_isValid;
}

qint32 OAIPlayerReceiving::getReceptions() const {
    return m_receptions;
}
void OAIPlayerReceiving::setReceptions(const qint32 &receptions) {
    m_receptions = receptions;
    m_receptions_isSet = true;
}

bool OAIPlayerReceiving::is_receptions_Set() const{
    return m_receptions_isSet;
}

bool OAIPlayerReceiving::is_receptions_Valid() const{
    return m_receptions_isValid;
}

QString OAIPlayerReceiving::getShortName() const {
    return m_short_name;
}
void OAIPlayerReceiving::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayerReceiving::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayerReceiving::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIPlayerReceiving::getTeam() const {
    return m_team;
}
void OAIPlayerReceiving::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerReceiving::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerReceiving::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayerReceiving::getTwoPointConversionReceptions() const {
    return m_two_point_conversion_receptions;
}
void OAIPlayerReceiving::setTwoPointConversionReceptions(const qint32 &two_point_conversion_receptions) {
    m_two_point_conversion_receptions = two_point_conversion_receptions;
    m_two_point_conversion_receptions_isSet = true;
}

bool OAIPlayerReceiving::is_two_point_conversion_receptions_Set() const{
    return m_two_point_conversion_receptions_isSet;
}

bool OAIPlayerReceiving::is_two_point_conversion_receptions_Valid() const{
    return m_two_point_conversion_receptions_isValid;
}

QString OAIPlayerReceiving::getUpdated() const {
    return m_updated;
}
void OAIPlayerReceiving::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayerReceiving::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayerReceiving::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPlayerReceiving::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_targets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_per_reception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_per_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reception_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_receptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerReceiving::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
