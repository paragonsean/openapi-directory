/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFantasyPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFantasyPlayer::OAIFantasyPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFantasyPlayer::OAIFantasyPlayer() {
    this->initializeModel();
}

OAIFantasyPlayer::~OAIFantasyPlayer() {}

void OAIFantasyPlayer::initializeModel() {

    m_auction_value_isSet = false;
    m_auction_value_isValid = false;

    m_auction_value_ppr_isSet = false;
    m_auction_value_ppr_isValid = false;

    m_average_draft_position_isSet = false;
    m_average_draft_position_isValid = false;

    m_average_draft_position2_qb_isSet = false;
    m_average_draft_position2_qb_isValid = false;

    m_average_draft_position_dynasty_isSet = false;
    m_average_draft_position_dynasty_isValid = false;

    m_average_draft_position_idp_isSet = false;
    m_average_draft_position_idp_isValid = false;

    m_average_draft_position_ppr_isSet = false;
    m_average_draft_position_ppr_isValid = false;

    m_average_draft_position_rookie_isSet = false;
    m_average_draft_position_rookie_isValid = false;

    m_bye_week_isSet = false;
    m_bye_week_isValid = false;

    m_fantasy_player_key_isSet = false;
    m_fantasy_player_key_isValid = false;

    m_last_season_fantasy_points_isSet = false;
    m_last_season_fantasy_points_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_projected_fantasy_points_isSet = false;
    m_projected_fantasy_points_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIFantasyPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFantasyPlayer::fromJsonObject(QJsonObject json) {

    m_auction_value_isValid = ::OpenAPI::fromJsonValue(m_auction_value, json[QString("AuctionValue")]);
    m_auction_value_isSet = !json[QString("AuctionValue")].isNull() && m_auction_value_isValid;

    m_auction_value_ppr_isValid = ::OpenAPI::fromJsonValue(m_auction_value_ppr, json[QString("AuctionValuePPR")]);
    m_auction_value_ppr_isSet = !json[QString("AuctionValuePPR")].isNull() && m_auction_value_ppr_isValid;

    m_average_draft_position_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position, json[QString("AverageDraftPosition")]);
    m_average_draft_position_isSet = !json[QString("AverageDraftPosition")].isNull() && m_average_draft_position_isValid;

    m_average_draft_position2_qb_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position2_qb, json[QString("AverageDraftPosition2QB")]);
    m_average_draft_position2_qb_isSet = !json[QString("AverageDraftPosition2QB")].isNull() && m_average_draft_position2_qb_isValid;

    m_average_draft_position_dynasty_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position_dynasty, json[QString("AverageDraftPositionDynasty")]);
    m_average_draft_position_dynasty_isSet = !json[QString("AverageDraftPositionDynasty")].isNull() && m_average_draft_position_dynasty_isValid;

    m_average_draft_position_idp_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position_idp, json[QString("AverageDraftPositionIDP")]);
    m_average_draft_position_idp_isSet = !json[QString("AverageDraftPositionIDP")].isNull() && m_average_draft_position_idp_isValid;

    m_average_draft_position_ppr_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position_ppr, json[QString("AverageDraftPositionPPR")]);
    m_average_draft_position_ppr_isSet = !json[QString("AverageDraftPositionPPR")].isNull() && m_average_draft_position_ppr_isValid;

    m_average_draft_position_rookie_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position_rookie, json[QString("AverageDraftPositionRookie")]);
    m_average_draft_position_rookie_isSet = !json[QString("AverageDraftPositionRookie")].isNull() && m_average_draft_position_rookie_isValid;

    m_bye_week_isValid = ::OpenAPI::fromJsonValue(m_bye_week, json[QString("ByeWeek")]);
    m_bye_week_isSet = !json[QString("ByeWeek")].isNull() && m_bye_week_isValid;

    m_fantasy_player_key_isValid = ::OpenAPI::fromJsonValue(m_fantasy_player_key, json[QString("FantasyPlayerKey")]);
    m_fantasy_player_key_isSet = !json[QString("FantasyPlayerKey")].isNull() && m_fantasy_player_key_isValid;

    m_last_season_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_last_season_fantasy_points, json[QString("LastSeasonFantasyPoints")]);
    m_last_season_fantasy_points_isSet = !json[QString("LastSeasonFantasyPoints")].isNull() && m_last_season_fantasy_points_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_projected_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_projected_fantasy_points, json[QString("ProjectedFantasyPoints")]);
    m_projected_fantasy_points_isSet = !json[QString("ProjectedFantasyPoints")].isNull() && m_projected_fantasy_points_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;
}

QString OAIFantasyPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFantasyPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_auction_value_isSet) {
        obj.insert(QString("AuctionValue"), ::OpenAPI::toJsonValue(m_auction_value));
    }
    if (m_auction_value_ppr_isSet) {
        obj.insert(QString("AuctionValuePPR"), ::OpenAPI::toJsonValue(m_auction_value_ppr));
    }
    if (m_average_draft_position_isSet) {
        obj.insert(QString("AverageDraftPosition"), ::OpenAPI::toJsonValue(m_average_draft_position));
    }
    if (m_average_draft_position2_qb_isSet) {
        obj.insert(QString("AverageDraftPosition2QB"), ::OpenAPI::toJsonValue(m_average_draft_position2_qb));
    }
    if (m_average_draft_position_dynasty_isSet) {
        obj.insert(QString("AverageDraftPositionDynasty"), ::OpenAPI::toJsonValue(m_average_draft_position_dynasty));
    }
    if (m_average_draft_position_idp_isSet) {
        obj.insert(QString("AverageDraftPositionIDP"), ::OpenAPI::toJsonValue(m_average_draft_position_idp));
    }
    if (m_average_draft_position_ppr_isSet) {
        obj.insert(QString("AverageDraftPositionPPR"), ::OpenAPI::toJsonValue(m_average_draft_position_ppr));
    }
    if (m_average_draft_position_rookie_isSet) {
        obj.insert(QString("AverageDraftPositionRookie"), ::OpenAPI::toJsonValue(m_average_draft_position_rookie));
    }
    if (m_bye_week_isSet) {
        obj.insert(QString("ByeWeek"), ::OpenAPI::toJsonValue(m_bye_week));
    }
    if (m_fantasy_player_key_isSet) {
        obj.insert(QString("FantasyPlayerKey"), ::OpenAPI::toJsonValue(m_fantasy_player_key));
    }
    if (m_last_season_fantasy_points_isSet) {
        obj.insert(QString("LastSeasonFantasyPoints"), ::OpenAPI::toJsonValue(m_last_season_fantasy_points));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_projected_fantasy_points_isSet) {
        obj.insert(QString("ProjectedFantasyPoints"), ::OpenAPI::toJsonValue(m_projected_fantasy_points));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

qint32 OAIFantasyPlayer::getAuctionValue() const {
    return m_auction_value;
}
void OAIFantasyPlayer::setAuctionValue(const qint32 &auction_value) {
    m_auction_value = auction_value;
    m_auction_value_isSet = true;
}

bool OAIFantasyPlayer::is_auction_value_Set() const{
    return m_auction_value_isSet;
}

bool OAIFantasyPlayer::is_auction_value_Valid() const{
    return m_auction_value_isValid;
}

qint32 OAIFantasyPlayer::getAuctionValuePpr() const {
    return m_auction_value_ppr;
}
void OAIFantasyPlayer::setAuctionValuePpr(const qint32 &auction_value_ppr) {
    m_auction_value_ppr = auction_value_ppr;
    m_auction_value_ppr_isSet = true;
}

bool OAIFantasyPlayer::is_auction_value_ppr_Set() const{
    return m_auction_value_ppr_isSet;
}

bool OAIFantasyPlayer::is_auction_value_ppr_Valid() const{
    return m_auction_value_ppr_isValid;
}

double OAIFantasyPlayer::getAverageDraftPosition() const {
    return m_average_draft_position;
}
void OAIFantasyPlayer::setAverageDraftPosition(const double &average_draft_position) {
    m_average_draft_position = average_draft_position;
    m_average_draft_position_isSet = true;
}

bool OAIFantasyPlayer::is_average_draft_position_Set() const{
    return m_average_draft_position_isSet;
}

bool OAIFantasyPlayer::is_average_draft_position_Valid() const{
    return m_average_draft_position_isValid;
}

double OAIFantasyPlayer::getAverageDraftPosition2Qb() const {
    return m_average_draft_position2_qb;
}
void OAIFantasyPlayer::setAverageDraftPosition2Qb(const double &average_draft_position2_qb) {
    m_average_draft_position2_qb = average_draft_position2_qb;
    m_average_draft_position2_qb_isSet = true;
}

bool OAIFantasyPlayer::is_average_draft_position2_qb_Set() const{
    return m_average_draft_position2_qb_isSet;
}

bool OAIFantasyPlayer::is_average_draft_position2_qb_Valid() const{
    return m_average_draft_position2_qb_isValid;
}

double OAIFantasyPlayer::getAverageDraftPositionDynasty() const {
    return m_average_draft_position_dynasty;
}
void OAIFantasyPlayer::setAverageDraftPositionDynasty(const double &average_draft_position_dynasty) {
    m_average_draft_position_dynasty = average_draft_position_dynasty;
    m_average_draft_position_dynasty_isSet = true;
}

bool OAIFantasyPlayer::is_average_draft_position_dynasty_Set() const{
    return m_average_draft_position_dynasty_isSet;
}

bool OAIFantasyPlayer::is_average_draft_position_dynasty_Valid() const{
    return m_average_draft_position_dynasty_isValid;
}

qint32 OAIFantasyPlayer::getAverageDraftPositionIdp() const {
    return m_average_draft_position_idp;
}
void OAIFantasyPlayer::setAverageDraftPositionIdp(const qint32 &average_draft_position_idp) {
    m_average_draft_position_idp = average_draft_position_idp;
    m_average_draft_position_idp_isSet = true;
}

bool OAIFantasyPlayer::is_average_draft_position_idp_Set() const{
    return m_average_draft_position_idp_isSet;
}

bool OAIFantasyPlayer::is_average_draft_position_idp_Valid() const{
    return m_average_draft_position_idp_isValid;
}

double OAIFantasyPlayer::getAverageDraftPositionPpr() const {
    return m_average_draft_position_ppr;
}
void OAIFantasyPlayer::setAverageDraftPositionPpr(const double &average_draft_position_ppr) {
    m_average_draft_position_ppr = average_draft_position_ppr;
    m_average_draft_position_ppr_isSet = true;
}

bool OAIFantasyPlayer::is_average_draft_position_ppr_Set() const{
    return m_average_draft_position_ppr_isSet;
}

bool OAIFantasyPlayer::is_average_draft_position_ppr_Valid() const{
    return m_average_draft_position_ppr_isValid;
}

double OAIFantasyPlayer::getAverageDraftPositionRookie() const {
    return m_average_draft_position_rookie;
}
void OAIFantasyPlayer::setAverageDraftPositionRookie(const double &average_draft_position_rookie) {
    m_average_draft_position_rookie = average_draft_position_rookie;
    m_average_draft_position_rookie_isSet = true;
}

bool OAIFantasyPlayer::is_average_draft_position_rookie_Set() const{
    return m_average_draft_position_rookie_isSet;
}

bool OAIFantasyPlayer::is_average_draft_position_rookie_Valid() const{
    return m_average_draft_position_rookie_isValid;
}

qint32 OAIFantasyPlayer::getByeWeek() const {
    return m_bye_week;
}
void OAIFantasyPlayer::setByeWeek(const qint32 &bye_week) {
    m_bye_week = bye_week;
    m_bye_week_isSet = true;
}

bool OAIFantasyPlayer::is_bye_week_Set() const{
    return m_bye_week_isSet;
}

bool OAIFantasyPlayer::is_bye_week_Valid() const{
    return m_bye_week_isValid;
}

QString OAIFantasyPlayer::getFantasyPlayerKey() const {
    return m_fantasy_player_key;
}
void OAIFantasyPlayer::setFantasyPlayerKey(const QString &fantasy_player_key) {
    m_fantasy_player_key = fantasy_player_key;
    m_fantasy_player_key_isSet = true;
}

bool OAIFantasyPlayer::is_fantasy_player_key_Set() const{
    return m_fantasy_player_key_isSet;
}

bool OAIFantasyPlayer::is_fantasy_player_key_Valid() const{
    return m_fantasy_player_key_isValid;
}

double OAIFantasyPlayer::getLastSeasonFantasyPoints() const {
    return m_last_season_fantasy_points;
}
void OAIFantasyPlayer::setLastSeasonFantasyPoints(const double &last_season_fantasy_points) {
    m_last_season_fantasy_points = last_season_fantasy_points;
    m_last_season_fantasy_points_isSet = true;
}

bool OAIFantasyPlayer::is_last_season_fantasy_points_Set() const{
    return m_last_season_fantasy_points_isSet;
}

bool OAIFantasyPlayer::is_last_season_fantasy_points_Valid() const{
    return m_last_season_fantasy_points_isValid;
}

QString OAIFantasyPlayer::getName() const {
    return m_name;
}
void OAIFantasyPlayer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFantasyPlayer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFantasyPlayer::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFantasyPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIFantasyPlayer::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIFantasyPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIFantasyPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIFantasyPlayer::getPosition() const {
    return m_position;
}
void OAIFantasyPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIFantasyPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIFantasyPlayer::is_position_Valid() const{
    return m_position_isValid;
}

double OAIFantasyPlayer::getProjectedFantasyPoints() const {
    return m_projected_fantasy_points;
}
void OAIFantasyPlayer::setProjectedFantasyPoints(const double &projected_fantasy_points) {
    m_projected_fantasy_points = projected_fantasy_points;
    m_projected_fantasy_points_isSet = true;
}

bool OAIFantasyPlayer::is_projected_fantasy_points_Set() const{
    return m_projected_fantasy_points_isSet;
}

bool OAIFantasyPlayer::is_projected_fantasy_points_Valid() const{
    return m_projected_fantasy_points_isValid;
}

QString OAIFantasyPlayer::getTeam() const {
    return m_team;
}
void OAIFantasyPlayer::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIFantasyPlayer::is_team_Set() const{
    return m_team_isSet;
}

bool OAIFantasyPlayer::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIFantasyPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auction_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auction_value_ppr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position2_qb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_dynasty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_idp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_ppr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_rookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bye_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_player_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_season_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFantasyPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
