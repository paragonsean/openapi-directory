/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamGame::OAITeamGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamGame::OAITeamGame() {
    this->initializeModel();
}

OAITeamGame::~OAITeamGame() {}

void OAITeamGame::initializeModel() {

    m_assisted_tackles_isSet = false;
    m_assisted_tackles_isValid = false;

    m_blocked_kick_return_touchdowns_isSet = false;
    m_blocked_kick_return_touchdowns_isValid = false;

    m_blocked_kick_return_yards_isSet = false;
    m_blocked_kick_return_yards_isValid = false;

    m_blocked_kicks_isSet = false;
    m_blocked_kicks_isValid = false;

    m_completion_percentage_isSet = false;
    m_completion_percentage_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_extra_point_kicking_attempts_isSet = false;
    m_extra_point_kicking_attempts_isValid = false;

    m_extra_point_kicking_conversions_isSet = false;
    m_extra_point_kicking_conversions_isValid = false;

    m_extra_point_passing_attempts_isSet = false;
    m_extra_point_passing_attempts_isValid = false;

    m_extra_point_passing_conversions_isSet = false;
    m_extra_point_passing_conversions_isValid = false;

    m_extra_point_percentage_isSet = false;
    m_extra_point_percentage_isValid = false;

    m_extra_point_rushing_attempts_isSet = false;
    m_extra_point_rushing_attempts_isValid = false;

    m_extra_point_rushing_conversions_isSet = false;
    m_extra_point_rushing_conversions_isValid = false;

    m_extra_points_had_blocked_isSet = false;
    m_extra_points_had_blocked_isValid = false;

    m_field_goal_attempts_isSet = false;
    m_field_goal_attempts_isValid = false;

    m_field_goal_percentage_isSet = false;
    m_field_goal_percentage_isValid = false;

    m_field_goal_return_touchdowns_isSet = false;
    m_field_goal_return_touchdowns_isValid = false;

    m_field_goal_return_yards_isSet = false;
    m_field_goal_return_yards_isValid = false;

    m_field_goals_had_blocked_isSet = false;
    m_field_goals_had_blocked_isValid = false;

    m_field_goals_made_isSet = false;
    m_field_goals_made_isValid = false;

    m_first_downs_isSet = false;
    m_first_downs_isValid = false;

    m_first_downs_by_passing_isSet = false;
    m_first_downs_by_passing_isValid = false;

    m_first_downs_by_penalty_isSet = false;
    m_first_downs_by_penalty_isValid = false;

    m_first_downs_by_rushing_isSet = false;
    m_first_downs_by_rushing_isValid = false;

    m_fourth_down_attempts_isSet = false;
    m_fourth_down_attempts_isValid = false;

    m_fourth_down_conversions_isSet = false;
    m_fourth_down_conversions_isValid = false;

    m_fourth_down_percentage_isSet = false;
    m_fourth_down_percentage_isValid = false;

    m_fumble_return_touchdowns_isSet = false;
    m_fumble_return_touchdowns_isValid = false;

    m_fumble_return_yards_isSet = false;
    m_fumble_return_yards_isValid = false;

    m_fumbles_isSet = false;
    m_fumbles_isValid = false;

    m_fumbles_forced_isSet = false;
    m_fumbles_forced_isValid = false;

    m_fumbles_lost_isSet = false;
    m_fumbles_lost_isValid = false;

    m_fumbles_recovered_isSet = false;
    m_fumbles_recovered_isValid = false;

    m_game_key_isSet = false;
    m_game_key_isValid = false;

    m_giveaways_isSet = false;
    m_giveaways_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_opponent_id_isSet = false;
    m_global_opponent_id_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_goal_to_go_attempts_isSet = false;
    m_goal_to_go_attempts_isValid = false;

    m_goal_to_go_conversions_isSet = false;
    m_goal_to_go_conversions_isValid = false;

    m_goal_to_go_percentage_isSet = false;
    m_goal_to_go_percentage_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_humidity_isSet = false;
    m_humidity_isValid = false;

    m_interception_return_touchdowns_isSet = false;
    m_interception_return_touchdowns_isValid = false;

    m_interception_return_yards_isSet = false;
    m_interception_return_yards_isValid = false;

    m_interception_returns_isSet = false;
    m_interception_returns_isValid = false;

    m_is_game_over_isSet = false;
    m_is_game_over_isValid = false;

    m_kick_return_average_isSet = false;
    m_kick_return_average_isValid = false;

    m_kick_return_long_isSet = false;
    m_kick_return_long_isValid = false;

    m_kick_return_touchdowns_isSet = false;
    m_kick_return_touchdowns_isValid = false;

    m_kick_return_yard_differential_isSet = false;
    m_kick_return_yard_differential_isValid = false;

    m_kick_return_yards_isSet = false;
    m_kick_return_yards_isValid = false;

    m_kick_returns_isSet = false;
    m_kick_returns_isValid = false;

    m_kickoff_touchbacks_isSet = false;
    m_kickoff_touchbacks_isValid = false;

    m_kickoffs_isSet = false;
    m_kickoffs_isValid = false;

    m_kickoffs_in_end_zone_isSet = false;
    m_kickoffs_in_end_zone_isValid = false;

    m_offensive_plays_isSet = false;
    m_offensive_plays_isValid = false;

    m_offensive_yards_isSet = false;
    m_offensive_yards_isValid = false;

    m_offensive_yards_per_play_isSet = false;
    m_offensive_yards_per_play_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_assisted_tackles_isSet = false;
    m_opponent_assisted_tackles_isValid = false;

    m_opponent_blocked_kick_return_touchdowns_isSet = false;
    m_opponent_blocked_kick_return_touchdowns_isValid = false;

    m_opponent_blocked_kick_return_yards_isSet = false;
    m_opponent_blocked_kick_return_yards_isValid = false;

    m_opponent_blocked_kicks_isSet = false;
    m_opponent_blocked_kicks_isValid = false;

    m_opponent_completion_percentage_isSet = false;
    m_opponent_completion_percentage_isValid = false;

    m_opponent_extra_point_kicking_attempts_isSet = false;
    m_opponent_extra_point_kicking_attempts_isValid = false;

    m_opponent_extra_point_kicking_conversions_isSet = false;
    m_opponent_extra_point_kicking_conversions_isValid = false;

    m_opponent_extra_point_passing_attempts_isSet = false;
    m_opponent_extra_point_passing_attempts_isValid = false;

    m_opponent_extra_point_passing_conversions_isSet = false;
    m_opponent_extra_point_passing_conversions_isValid = false;

    m_opponent_extra_point_percentage_isSet = false;
    m_opponent_extra_point_percentage_isValid = false;

    m_opponent_extra_point_rushing_attempts_isSet = false;
    m_opponent_extra_point_rushing_attempts_isValid = false;

    m_opponent_extra_point_rushing_conversions_isSet = false;
    m_opponent_extra_point_rushing_conversions_isValid = false;

    m_opponent_extra_points_had_blocked_isSet = false;
    m_opponent_extra_points_had_blocked_isValid = false;

    m_opponent_field_goal_attempts_isSet = false;
    m_opponent_field_goal_attempts_isValid = false;

    m_opponent_field_goal_percentage_isSet = false;
    m_opponent_field_goal_percentage_isValid = false;

    m_opponent_field_goal_return_touchdowns_isSet = false;
    m_opponent_field_goal_return_touchdowns_isValid = false;

    m_opponent_field_goal_return_yards_isSet = false;
    m_opponent_field_goal_return_yards_isValid = false;

    m_opponent_field_goals_had_blocked_isSet = false;
    m_opponent_field_goals_had_blocked_isValid = false;

    m_opponent_field_goals_made_isSet = false;
    m_opponent_field_goals_made_isValid = false;

    m_opponent_first_downs_isSet = false;
    m_opponent_first_downs_isValid = false;

    m_opponent_first_downs_by_passing_isSet = false;
    m_opponent_first_downs_by_passing_isValid = false;

    m_opponent_first_downs_by_penalty_isSet = false;
    m_opponent_first_downs_by_penalty_isValid = false;

    m_opponent_first_downs_by_rushing_isSet = false;
    m_opponent_first_downs_by_rushing_isValid = false;

    m_opponent_fourth_down_attempts_isSet = false;
    m_opponent_fourth_down_attempts_isValid = false;

    m_opponent_fourth_down_conversions_isSet = false;
    m_opponent_fourth_down_conversions_isValid = false;

    m_opponent_fourth_down_percentage_isSet = false;
    m_opponent_fourth_down_percentage_isValid = false;

    m_opponent_fumble_return_touchdowns_isSet = false;
    m_opponent_fumble_return_touchdowns_isValid = false;

    m_opponent_fumble_return_yards_isSet = false;
    m_opponent_fumble_return_yards_isValid = false;

    m_opponent_fumbles_isSet = false;
    m_opponent_fumbles_isValid = false;

    m_opponent_fumbles_forced_isSet = false;
    m_opponent_fumbles_forced_isValid = false;

    m_opponent_fumbles_lost_isSet = false;
    m_opponent_fumbles_lost_isValid = false;

    m_opponent_fumbles_recovered_isSet = false;
    m_opponent_fumbles_recovered_isValid = false;

    m_opponent_giveaways_isSet = false;
    m_opponent_giveaways_isValid = false;

    m_opponent_goal_to_go_attempts_isSet = false;
    m_opponent_goal_to_go_attempts_isValid = false;

    m_opponent_goal_to_go_conversions_isSet = false;
    m_opponent_goal_to_go_conversions_isValid = false;

    m_opponent_goal_to_go_percentage_isSet = false;
    m_opponent_goal_to_go_percentage_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_opponent_interception_return_touchdowns_isSet = false;
    m_opponent_interception_return_touchdowns_isValid = false;

    m_opponent_interception_return_yards_isSet = false;
    m_opponent_interception_return_yards_isValid = false;

    m_opponent_interception_returns_isSet = false;
    m_opponent_interception_returns_isValid = false;

    m_opponent_kick_return_average_isSet = false;
    m_opponent_kick_return_average_isValid = false;

    m_opponent_kick_return_long_isSet = false;
    m_opponent_kick_return_long_isValid = false;

    m_opponent_kick_return_touchdowns_isSet = false;
    m_opponent_kick_return_touchdowns_isValid = false;

    m_opponent_kick_return_yards_isSet = false;
    m_opponent_kick_return_yards_isValid = false;

    m_opponent_kick_returns_isSet = false;
    m_opponent_kick_returns_isValid = false;

    m_opponent_kickoff_touchbacks_isSet = false;
    m_opponent_kickoff_touchbacks_isValid = false;

    m_opponent_kickoffs_isSet = false;
    m_opponent_kickoffs_isValid = false;

    m_opponent_kickoffs_in_end_zone_isSet = false;
    m_opponent_kickoffs_in_end_zone_isValid = false;

    m_opponent_offensive_plays_isSet = false;
    m_opponent_offensive_plays_isValid = false;

    m_opponent_offensive_yards_isSet = false;
    m_opponent_offensive_yards_isValid = false;

    m_opponent_offensive_yards_per_play_isSet = false;
    m_opponent_offensive_yards_per_play_isValid = false;

    m_opponent_passer_rating_isSet = false;
    m_opponent_passer_rating_isValid = false;

    m_opponent_passes_defended_isSet = false;
    m_opponent_passes_defended_isValid = false;

    m_opponent_passing_attempts_isSet = false;
    m_opponent_passing_attempts_isValid = false;

    m_opponent_passing_completions_isSet = false;
    m_opponent_passing_completions_isValid = false;

    m_opponent_passing_dropbacks_isSet = false;
    m_opponent_passing_dropbacks_isValid = false;

    m_opponent_passing_interception_percentage_isSet = false;
    m_opponent_passing_interception_percentage_isValid = false;

    m_opponent_passing_interceptions_isSet = false;
    m_opponent_passing_interceptions_isValid = false;

    m_opponent_passing_touchdowns_isSet = false;
    m_opponent_passing_touchdowns_isValid = false;

    m_opponent_passing_yards_isSet = false;
    m_opponent_passing_yards_isValid = false;

    m_opponent_passing_yards_per_attempt_isSet = false;
    m_opponent_passing_yards_per_attempt_isValid = false;

    m_opponent_passing_yards_per_completion_isSet = false;
    m_opponent_passing_yards_per_completion_isValid = false;

    m_opponent_penalties_isSet = false;
    m_opponent_penalties_isValid = false;

    m_opponent_penalty_yards_isSet = false;
    m_opponent_penalty_yards_isValid = false;

    m_opponent_punt_average_isSet = false;
    m_opponent_punt_average_isValid = false;

    m_opponent_punt_net_average_isSet = false;
    m_opponent_punt_net_average_isValid = false;

    m_opponent_punt_net_yards_isSet = false;
    m_opponent_punt_net_yards_isValid = false;

    m_opponent_punt_return_average_isSet = false;
    m_opponent_punt_return_average_isValid = false;

    m_opponent_punt_return_long_isSet = false;
    m_opponent_punt_return_long_isValid = false;

    m_opponent_punt_return_touchdowns_isSet = false;
    m_opponent_punt_return_touchdowns_isValid = false;

    m_opponent_punt_return_yards_isSet = false;
    m_opponent_punt_return_yards_isValid = false;

    m_opponent_punt_returns_isSet = false;
    m_opponent_punt_returns_isValid = false;

    m_opponent_punt_yards_isSet = false;
    m_opponent_punt_yards_isValid = false;

    m_opponent_punts_isSet = false;
    m_opponent_punts_isValid = false;

    m_opponent_punts_had_blocked_isSet = false;
    m_opponent_punts_had_blocked_isValid = false;

    m_opponent_quarterback_hits_isSet = false;
    m_opponent_quarterback_hits_isValid = false;

    m_opponent_quarterback_hits_differential_isSet = false;
    m_opponent_quarterback_hits_differential_isValid = false;

    m_opponent_quarterback_hits_percentage_isSet = false;
    m_opponent_quarterback_hits_percentage_isValid = false;

    m_opponent_quarterback_sacks_differential_isSet = false;
    m_opponent_quarterback_sacks_differential_isValid = false;

    m_opponent_red_zone_attempts_isSet = false;
    m_opponent_red_zone_attempts_isValid = false;

    m_opponent_red_zone_conversions_isSet = false;
    m_opponent_red_zone_conversions_isValid = false;

    m_opponent_red_zone_percentage_isSet = false;
    m_opponent_red_zone_percentage_isValid = false;

    m_opponent_return_yards_isSet = false;
    m_opponent_return_yards_isValid = false;

    m_opponent_rushing_attempts_isSet = false;
    m_opponent_rushing_attempts_isValid = false;

    m_opponent_rushing_touchdowns_isSet = false;
    m_opponent_rushing_touchdowns_isValid = false;

    m_opponent_rushing_yards_isSet = false;
    m_opponent_rushing_yards_isValid = false;

    m_opponent_rushing_yards_per_attempt_isSet = false;
    m_opponent_rushing_yards_per_attempt_isValid = false;

    m_opponent_sack_yards_isSet = false;
    m_opponent_sack_yards_isValid = false;

    m_opponent_sacks_isSet = false;
    m_opponent_sacks_isValid = false;

    m_opponent_safeties_isSet = false;
    m_opponent_safeties_isValid = false;

    m_opponent_score_isSet = false;
    m_opponent_score_isValid = false;

    m_opponent_score_overtime_isSet = false;
    m_opponent_score_overtime_isValid = false;

    m_opponent_score_quarter1_isSet = false;
    m_opponent_score_quarter1_isValid = false;

    m_opponent_score_quarter2_isSet = false;
    m_opponent_score_quarter2_isValid = false;

    m_opponent_score_quarter3_isSet = false;
    m_opponent_score_quarter3_isValid = false;

    m_opponent_score_quarter4_isSet = false;
    m_opponent_score_quarter4_isValid = false;

    m_opponent_solo_tackles_isSet = false;
    m_opponent_solo_tackles_isValid = false;

    m_opponent_tackles_for_loss_isSet = false;
    m_opponent_tackles_for_loss_isValid = false;

    m_opponent_tackles_for_loss_differential_isSet = false;
    m_opponent_tackles_for_loss_differential_isValid = false;

    m_opponent_tackles_for_loss_percentage_isSet = false;
    m_opponent_tackles_for_loss_percentage_isValid = false;

    m_opponent_takeaways_isSet = false;
    m_opponent_takeaways_isValid = false;

    m_opponent_third_down_attempts_isSet = false;
    m_opponent_third_down_attempts_isValid = false;

    m_opponent_third_down_conversions_isSet = false;
    m_opponent_third_down_conversions_isValid = false;

    m_opponent_third_down_percentage_isSet = false;
    m_opponent_third_down_percentage_isValid = false;

    m_opponent_time_of_possession_isSet = false;
    m_opponent_time_of_possession_isValid = false;

    m_opponent_time_of_possession_minutes_isSet = false;
    m_opponent_time_of_possession_minutes_isValid = false;

    m_opponent_time_of_possession_seconds_isSet = false;
    m_opponent_time_of_possession_seconds_isValid = false;

    m_opponent_times_sacked_isSet = false;
    m_opponent_times_sacked_isValid = false;

    m_opponent_times_sacked_percentage_isSet = false;
    m_opponent_times_sacked_percentage_isValid = false;

    m_opponent_times_sacked_yards_isSet = false;
    m_opponent_times_sacked_yards_isValid = false;

    m_opponent_touchdowns_isSet = false;
    m_opponent_touchdowns_isValid = false;

    m_opponent_turnover_differential_isSet = false;
    m_opponent_turnover_differential_isValid = false;

    m_opponent_two_point_conversion_returns_isSet = false;
    m_opponent_two_point_conversion_returns_isValid = false;

    m_over_under_isSet = false;
    m_over_under_isValid = false;

    m_passer_rating_isSet = false;
    m_passer_rating_isValid = false;

    m_passes_defended_isSet = false;
    m_passes_defended_isValid = false;

    m_passing_attempts_isSet = false;
    m_passing_attempts_isValid = false;

    m_passing_completions_isSet = false;
    m_passing_completions_isValid = false;

    m_passing_dropbacks_isSet = false;
    m_passing_dropbacks_isValid = false;

    m_passing_interception_percentage_isSet = false;
    m_passing_interception_percentage_isValid = false;

    m_passing_interceptions_isSet = false;
    m_passing_interceptions_isValid = false;

    m_passing_touchdowns_isSet = false;
    m_passing_touchdowns_isValid = false;

    m_passing_yards_isSet = false;
    m_passing_yards_isValid = false;

    m_passing_yards_per_attempt_isSet = false;
    m_passing_yards_per_attempt_isValid = false;

    m_passing_yards_per_completion_isSet = false;
    m_passing_yards_per_completion_isValid = false;

    m_penalties_isSet = false;
    m_penalties_isValid = false;

    m_penalty_yard_differential_isSet = false;
    m_penalty_yard_differential_isValid = false;

    m_penalty_yards_isSet = false;
    m_penalty_yards_isValid = false;

    m_playing_surface_isSet = false;
    m_playing_surface_isValid = false;

    m_point_differential_isSet = false;
    m_point_differential_isValid = false;

    m_point_spread_isSet = false;
    m_point_spread_isValid = false;

    m_punt_average_isSet = false;
    m_punt_average_isValid = false;

    m_punt_net_average_isSet = false;
    m_punt_net_average_isValid = false;

    m_punt_net_yards_isSet = false;
    m_punt_net_yards_isValid = false;

    m_punt_return_average_isSet = false;
    m_punt_return_average_isValid = false;

    m_punt_return_long_isSet = false;
    m_punt_return_long_isValid = false;

    m_punt_return_touchdowns_isSet = false;
    m_punt_return_touchdowns_isValid = false;

    m_punt_return_yard_differential_isSet = false;
    m_punt_return_yard_differential_isValid = false;

    m_punt_return_yards_isSet = false;
    m_punt_return_yards_isValid = false;

    m_punt_returns_isSet = false;
    m_punt_returns_isValid = false;

    m_punt_yards_isSet = false;
    m_punt_yards_isValid = false;

    m_punts_isSet = false;
    m_punts_isValid = false;

    m_punts_had_blocked_isSet = false;
    m_punts_had_blocked_isValid = false;

    m_quarterback_hits_isSet = false;
    m_quarterback_hits_isValid = false;

    m_quarterback_hits_differential_isSet = false;
    m_quarterback_hits_differential_isValid = false;

    m_quarterback_hits_percentage_isSet = false;
    m_quarterback_hits_percentage_isValid = false;

    m_quarterback_sacks_differential_isSet = false;
    m_quarterback_sacks_differential_isValid = false;

    m_red_zone_attempts_isSet = false;
    m_red_zone_attempts_isValid = false;

    m_red_zone_conversions_isSet = false;
    m_red_zone_conversions_isValid = false;

    m_red_zone_percentage_isSet = false;
    m_red_zone_percentage_isValid = false;

    m_return_yards_isSet = false;
    m_return_yards_isValid = false;

    m_rushing_attempts_isSet = false;
    m_rushing_attempts_isValid = false;

    m_rushing_touchdowns_isSet = false;
    m_rushing_touchdowns_isValid = false;

    m_rushing_yards_isSet = false;
    m_rushing_yards_isValid = false;

    m_rushing_yards_per_attempt_isSet = false;
    m_rushing_yards_per_attempt_isValid = false;

    m_sack_yards_isSet = false;
    m_sack_yards_isValid = false;

    m_sacks_isSet = false;
    m_sacks_isValid = false;

    m_safeties_isSet = false;
    m_safeties_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_score_id_isSet = false;
    m_score_id_isValid = false;

    m_score_overtime_isSet = false;
    m_score_overtime_isValid = false;

    m_score_quarter1_isSet = false;
    m_score_quarter1_isValid = false;

    m_score_quarter2_isSet = false;
    m_score_quarter2_isValid = false;

    m_score_quarter3_isSet = false;
    m_score_quarter3_isValid = false;

    m_score_quarter4_isSet = false;
    m_score_quarter4_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_solo_tackles_isSet = false;
    m_solo_tackles_isValid = false;

    m_stadium_isSet = false;
    m_stadium_isValid = false;

    m_tackles_for_loss_isSet = false;
    m_tackles_for_loss_isValid = false;

    m_tackles_for_loss_differential_isSet = false;
    m_tackles_for_loss_differential_isValid = false;

    m_tackles_for_loss_percentage_isSet = false;
    m_tackles_for_loss_percentage_isValid = false;

    m_takeaways_isSet = false;
    m_takeaways_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_game_id_isSet = false;
    m_team_game_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_team_name_isSet = false;
    m_team_name_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_third_down_attempts_isSet = false;
    m_third_down_attempts_isValid = false;

    m_third_down_conversions_isSet = false;
    m_third_down_conversions_isValid = false;

    m_third_down_percentage_isSet = false;
    m_third_down_percentage_isValid = false;

    m_time_of_possession_isSet = false;
    m_time_of_possession_isValid = false;

    m_time_of_possession_minutes_isSet = false;
    m_time_of_possession_minutes_isValid = false;

    m_time_of_possession_seconds_isSet = false;
    m_time_of_possession_seconds_isValid = false;

    m_times_sacked_isSet = false;
    m_times_sacked_isValid = false;

    m_times_sacked_percentage_isSet = false;
    m_times_sacked_percentage_isValid = false;

    m_times_sacked_yards_isSet = false;
    m_times_sacked_yards_isValid = false;

    m_total_score_isSet = false;
    m_total_score_isValid = false;

    m_touchdowns_isSet = false;
    m_touchdowns_isValid = false;

    m_turnover_differential_isSet = false;
    m_turnover_differential_isValid = false;

    m_two_point_conversion_returns_isSet = false;
    m_two_point_conversion_returns_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_wind_speed_isSet = false;
    m_wind_speed_isValid = false;
}

void OAITeamGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamGame::fromJsonObject(QJsonObject json) {

    m_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_assisted_tackles, json[QString("AssistedTackles")]);
    m_assisted_tackles_isSet = !json[QString("AssistedTackles")].isNull() && m_assisted_tackles_isValid;

    m_blocked_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_touchdowns, json[QString("BlockedKickReturnTouchdowns")]);
    m_blocked_kick_return_touchdowns_isSet = !json[QString("BlockedKickReturnTouchdowns")].isNull() && m_blocked_kick_return_touchdowns_isValid;

    m_blocked_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_yards, json[QString("BlockedKickReturnYards")]);
    m_blocked_kick_return_yards_isSet = !json[QString("BlockedKickReturnYards")].isNull() && m_blocked_kick_return_yards_isValid;

    m_blocked_kicks_isValid = ::OpenAPI::fromJsonValue(m_blocked_kicks, json[QString("BlockedKicks")]);
    m_blocked_kicks_isSet = !json[QString("BlockedKicks")].isNull() && m_blocked_kicks_isValid;

    m_completion_percentage_isValid = ::OpenAPI::fromJsonValue(m_completion_percentage, json[QString("CompletionPercentage")]);
    m_completion_percentage_isSet = !json[QString("CompletionPercentage")].isNull() && m_completion_percentage_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("DayOfWeek")]);
    m_day_of_week_isSet = !json[QString("DayOfWeek")].isNull() && m_day_of_week_isValid;

    m_extra_point_kicking_attempts_isValid = ::OpenAPI::fromJsonValue(m_extra_point_kicking_attempts, json[QString("ExtraPointKickingAttempts")]);
    m_extra_point_kicking_attempts_isSet = !json[QString("ExtraPointKickingAttempts")].isNull() && m_extra_point_kicking_attempts_isValid;

    m_extra_point_kicking_conversions_isValid = ::OpenAPI::fromJsonValue(m_extra_point_kicking_conversions, json[QString("ExtraPointKickingConversions")]);
    m_extra_point_kicking_conversions_isSet = !json[QString("ExtraPointKickingConversions")].isNull() && m_extra_point_kicking_conversions_isValid;

    m_extra_point_passing_attempts_isValid = ::OpenAPI::fromJsonValue(m_extra_point_passing_attempts, json[QString("ExtraPointPassingAttempts")]);
    m_extra_point_passing_attempts_isSet = !json[QString("ExtraPointPassingAttempts")].isNull() && m_extra_point_passing_attempts_isValid;

    m_extra_point_passing_conversions_isValid = ::OpenAPI::fromJsonValue(m_extra_point_passing_conversions, json[QString("ExtraPointPassingConversions")]);
    m_extra_point_passing_conversions_isSet = !json[QString("ExtraPointPassingConversions")].isNull() && m_extra_point_passing_conversions_isValid;

    m_extra_point_percentage_isValid = ::OpenAPI::fromJsonValue(m_extra_point_percentage, json[QString("ExtraPointPercentage")]);
    m_extra_point_percentage_isSet = !json[QString("ExtraPointPercentage")].isNull() && m_extra_point_percentage_isValid;

    m_extra_point_rushing_attempts_isValid = ::OpenAPI::fromJsonValue(m_extra_point_rushing_attempts, json[QString("ExtraPointRushingAttempts")]);
    m_extra_point_rushing_attempts_isSet = !json[QString("ExtraPointRushingAttempts")].isNull() && m_extra_point_rushing_attempts_isValid;

    m_extra_point_rushing_conversions_isValid = ::OpenAPI::fromJsonValue(m_extra_point_rushing_conversions, json[QString("ExtraPointRushingConversions")]);
    m_extra_point_rushing_conversions_isSet = !json[QString("ExtraPointRushingConversions")].isNull() && m_extra_point_rushing_conversions_isValid;

    m_extra_points_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_extra_points_had_blocked, json[QString("ExtraPointsHadBlocked")]);
    m_extra_points_had_blocked_isSet = !json[QString("ExtraPointsHadBlocked")].isNull() && m_extra_points_had_blocked_isValid;

    m_field_goal_attempts_isValid = ::OpenAPI::fromJsonValue(m_field_goal_attempts, json[QString("FieldGoalAttempts")]);
    m_field_goal_attempts_isSet = !json[QString("FieldGoalAttempts")].isNull() && m_field_goal_attempts_isValid;

    m_field_goal_percentage_isValid = ::OpenAPI::fromJsonValue(m_field_goal_percentage, json[QString("FieldGoalPercentage")]);
    m_field_goal_percentage_isSet = !json[QString("FieldGoalPercentage")].isNull() && m_field_goal_percentage_isValid;

    m_field_goal_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_touchdowns, json[QString("FieldGoalReturnTouchdowns")]);
    m_field_goal_return_touchdowns_isSet = !json[QString("FieldGoalReturnTouchdowns")].isNull() && m_field_goal_return_touchdowns_isValid;

    m_field_goal_return_yards_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_yards, json[QString("FieldGoalReturnYards")]);
    m_field_goal_return_yards_isSet = !json[QString("FieldGoalReturnYards")].isNull() && m_field_goal_return_yards_isValid;

    m_field_goals_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_field_goals_had_blocked, json[QString("FieldGoalsHadBlocked")]);
    m_field_goals_had_blocked_isSet = !json[QString("FieldGoalsHadBlocked")].isNull() && m_field_goals_had_blocked_isValid;

    m_field_goals_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made, json[QString("FieldGoalsMade")]);
    m_field_goals_made_isSet = !json[QString("FieldGoalsMade")].isNull() && m_field_goals_made_isValid;

    m_first_downs_isValid = ::OpenAPI::fromJsonValue(m_first_downs, json[QString("FirstDowns")]);
    m_first_downs_isSet = !json[QString("FirstDowns")].isNull() && m_first_downs_isValid;

    m_first_downs_by_passing_isValid = ::OpenAPI::fromJsonValue(m_first_downs_by_passing, json[QString("FirstDownsByPassing")]);
    m_first_downs_by_passing_isSet = !json[QString("FirstDownsByPassing")].isNull() && m_first_downs_by_passing_isValid;

    m_first_downs_by_penalty_isValid = ::OpenAPI::fromJsonValue(m_first_downs_by_penalty, json[QString("FirstDownsByPenalty")]);
    m_first_downs_by_penalty_isSet = !json[QString("FirstDownsByPenalty")].isNull() && m_first_downs_by_penalty_isValid;

    m_first_downs_by_rushing_isValid = ::OpenAPI::fromJsonValue(m_first_downs_by_rushing, json[QString("FirstDownsByRushing")]);
    m_first_downs_by_rushing_isSet = !json[QString("FirstDownsByRushing")].isNull() && m_first_downs_by_rushing_isValid;

    m_fourth_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_fourth_down_attempts, json[QString("FourthDownAttempts")]);
    m_fourth_down_attempts_isSet = !json[QString("FourthDownAttempts")].isNull() && m_fourth_down_attempts_isValid;

    m_fourth_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_fourth_down_conversions, json[QString("FourthDownConversions")]);
    m_fourth_down_conversions_isSet = !json[QString("FourthDownConversions")].isNull() && m_fourth_down_conversions_isValid;

    m_fourth_down_percentage_isValid = ::OpenAPI::fromJsonValue(m_fourth_down_percentage, json[QString("FourthDownPercentage")]);
    m_fourth_down_percentage_isSet = !json[QString("FourthDownPercentage")].isNull() && m_fourth_down_percentage_isValid;

    m_fumble_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_touchdowns, json[QString("FumbleReturnTouchdowns")]);
    m_fumble_return_touchdowns_isSet = !json[QString("FumbleReturnTouchdowns")].isNull() && m_fumble_return_touchdowns_isValid;

    m_fumble_return_yards_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_yards, json[QString("FumbleReturnYards")]);
    m_fumble_return_yards_isSet = !json[QString("FumbleReturnYards")].isNull() && m_fumble_return_yards_isValid;

    m_fumbles_isValid = ::OpenAPI::fromJsonValue(m_fumbles, json[QString("Fumbles")]);
    m_fumbles_isSet = !json[QString("Fumbles")].isNull() && m_fumbles_isValid;

    m_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_fumbles_forced, json[QString("FumblesForced")]);
    m_fumbles_forced_isSet = !json[QString("FumblesForced")].isNull() && m_fumbles_forced_isValid;

    m_fumbles_lost_isValid = ::OpenAPI::fromJsonValue(m_fumbles_lost, json[QString("FumblesLost")]);
    m_fumbles_lost_isSet = !json[QString("FumblesLost")].isNull() && m_fumbles_lost_isValid;

    m_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_fumbles_recovered, json[QString("FumblesRecovered")]);
    m_fumbles_recovered_isSet = !json[QString("FumblesRecovered")].isNull() && m_fumbles_recovered_isValid;

    m_game_key_isValid = ::OpenAPI::fromJsonValue(m_game_key, json[QString("GameKey")]);
    m_game_key_isSet = !json[QString("GameKey")].isNull() && m_game_key_isValid;

    m_giveaways_isValid = ::OpenAPI::fromJsonValue(m_giveaways, json[QString("Giveaways")]);
    m_giveaways_isSet = !json[QString("Giveaways")].isNull() && m_giveaways_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_global_opponent_id, json[QString("GlobalOpponentID")]);
    m_global_opponent_id_isSet = !json[QString("GlobalOpponentID")].isNull() && m_global_opponent_id_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_goal_to_go_attempts_isValid = ::OpenAPI::fromJsonValue(m_goal_to_go_attempts, json[QString("GoalToGoAttempts")]);
    m_goal_to_go_attempts_isSet = !json[QString("GoalToGoAttempts")].isNull() && m_goal_to_go_attempts_isValid;

    m_goal_to_go_conversions_isValid = ::OpenAPI::fromJsonValue(m_goal_to_go_conversions, json[QString("GoalToGoConversions")]);
    m_goal_to_go_conversions_isSet = !json[QString("GoalToGoConversions")].isNull() && m_goal_to_go_conversions_isValid;

    m_goal_to_go_percentage_isValid = ::OpenAPI::fromJsonValue(m_goal_to_go_percentage, json[QString("GoalToGoPercentage")]);
    m_goal_to_go_percentage_isSet = !json[QString("GoalToGoPercentage")].isNull() && m_goal_to_go_percentage_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_humidity_isValid = ::OpenAPI::fromJsonValue(m_humidity, json[QString("Humidity")]);
    m_humidity_isSet = !json[QString("Humidity")].isNull() && m_humidity_isValid;

    m_interception_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_interception_return_touchdowns, json[QString("InterceptionReturnTouchdowns")]);
    m_interception_return_touchdowns_isSet = !json[QString("InterceptionReturnTouchdowns")].isNull() && m_interception_return_touchdowns_isValid;

    m_interception_return_yards_isValid = ::OpenAPI::fromJsonValue(m_interception_return_yards, json[QString("InterceptionReturnYards")]);
    m_interception_return_yards_isSet = !json[QString("InterceptionReturnYards")].isNull() && m_interception_return_yards_isValid;

    m_interception_returns_isValid = ::OpenAPI::fromJsonValue(m_interception_returns, json[QString("InterceptionReturns")]);
    m_interception_returns_isSet = !json[QString("InterceptionReturns")].isNull() && m_interception_returns_isValid;

    m_is_game_over_isValid = ::OpenAPI::fromJsonValue(m_is_game_over, json[QString("IsGameOver")]);
    m_is_game_over_isSet = !json[QString("IsGameOver")].isNull() && m_is_game_over_isValid;

    m_kick_return_average_isValid = ::OpenAPI::fromJsonValue(m_kick_return_average, json[QString("KickReturnAverage")]);
    m_kick_return_average_isSet = !json[QString("KickReturnAverage")].isNull() && m_kick_return_average_isValid;

    m_kick_return_long_isValid = ::OpenAPI::fromJsonValue(m_kick_return_long, json[QString("KickReturnLong")]);
    m_kick_return_long_isSet = !json[QString("KickReturnLong")].isNull() && m_kick_return_long_isValid;

    m_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_kick_return_touchdowns, json[QString("KickReturnTouchdowns")]);
    m_kick_return_touchdowns_isSet = !json[QString("KickReturnTouchdowns")].isNull() && m_kick_return_touchdowns_isValid;

    m_kick_return_yard_differential_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yard_differential, json[QString("KickReturnYardDifferential")]);
    m_kick_return_yard_differential_isSet = !json[QString("KickReturnYardDifferential")].isNull() && m_kick_return_yard_differential_isValid;

    m_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards, json[QString("KickReturnYards")]);
    m_kick_return_yards_isSet = !json[QString("KickReturnYards")].isNull() && m_kick_return_yards_isValid;

    m_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_kick_returns, json[QString("KickReturns")]);
    m_kick_returns_isSet = !json[QString("KickReturns")].isNull() && m_kick_returns_isValid;

    m_kickoff_touchbacks_isValid = ::OpenAPI::fromJsonValue(m_kickoff_touchbacks, json[QString("KickoffTouchbacks")]);
    m_kickoff_touchbacks_isSet = !json[QString("KickoffTouchbacks")].isNull() && m_kickoff_touchbacks_isValid;

    m_kickoffs_isValid = ::OpenAPI::fromJsonValue(m_kickoffs, json[QString("Kickoffs")]);
    m_kickoffs_isSet = !json[QString("Kickoffs")].isNull() && m_kickoffs_isValid;

    m_kickoffs_in_end_zone_isValid = ::OpenAPI::fromJsonValue(m_kickoffs_in_end_zone, json[QString("KickoffsInEndZone")]);
    m_kickoffs_in_end_zone_isSet = !json[QString("KickoffsInEndZone")].isNull() && m_kickoffs_in_end_zone_isValid;

    m_offensive_plays_isValid = ::OpenAPI::fromJsonValue(m_offensive_plays, json[QString("OffensivePlays")]);
    m_offensive_plays_isSet = !json[QString("OffensivePlays")].isNull() && m_offensive_plays_isValid;

    m_offensive_yards_isValid = ::OpenAPI::fromJsonValue(m_offensive_yards, json[QString("OffensiveYards")]);
    m_offensive_yards_isSet = !json[QString("OffensiveYards")].isNull() && m_offensive_yards_isValid;

    m_offensive_yards_per_play_isValid = ::OpenAPI::fromJsonValue(m_offensive_yards_per_play, json[QString("OffensiveYardsPerPlay")]);
    m_offensive_yards_per_play_isSet = !json[QString("OffensiveYardsPerPlay")].isNull() && m_offensive_yards_per_play_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_opponent_assisted_tackles, json[QString("OpponentAssistedTackles")]);
    m_opponent_assisted_tackles_isSet = !json[QString("OpponentAssistedTackles")].isNull() && m_opponent_assisted_tackles_isValid;

    m_opponent_blocked_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_blocked_kick_return_touchdowns, json[QString("OpponentBlockedKickReturnTouchdowns")]);
    m_opponent_blocked_kick_return_touchdowns_isSet = !json[QString("OpponentBlockedKickReturnTouchdowns")].isNull() && m_opponent_blocked_kick_return_touchdowns_isValid;

    m_opponent_blocked_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_blocked_kick_return_yards, json[QString("OpponentBlockedKickReturnYards")]);
    m_opponent_blocked_kick_return_yards_isSet = !json[QString("OpponentBlockedKickReturnYards")].isNull() && m_opponent_blocked_kick_return_yards_isValid;

    m_opponent_blocked_kicks_isValid = ::OpenAPI::fromJsonValue(m_opponent_blocked_kicks, json[QString("OpponentBlockedKicks")]);
    m_opponent_blocked_kicks_isSet = !json[QString("OpponentBlockedKicks")].isNull() && m_opponent_blocked_kicks_isValid;

    m_opponent_completion_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_completion_percentage, json[QString("OpponentCompletionPercentage")]);
    m_opponent_completion_percentage_isSet = !json[QString("OpponentCompletionPercentage")].isNull() && m_opponent_completion_percentage_isValid;

    m_opponent_extra_point_kicking_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_point_kicking_attempts, json[QString("OpponentExtraPointKickingAttempts")]);
    m_opponent_extra_point_kicking_attempts_isSet = !json[QString("OpponentExtraPointKickingAttempts")].isNull() && m_opponent_extra_point_kicking_attempts_isValid;

    m_opponent_extra_point_kicking_conversions_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_point_kicking_conversions, json[QString("OpponentExtraPointKickingConversions")]);
    m_opponent_extra_point_kicking_conversions_isSet = !json[QString("OpponentExtraPointKickingConversions")].isNull() && m_opponent_extra_point_kicking_conversions_isValid;

    m_opponent_extra_point_passing_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_point_passing_attempts, json[QString("OpponentExtraPointPassingAttempts")]);
    m_opponent_extra_point_passing_attempts_isSet = !json[QString("OpponentExtraPointPassingAttempts")].isNull() && m_opponent_extra_point_passing_attempts_isValid;

    m_opponent_extra_point_passing_conversions_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_point_passing_conversions, json[QString("OpponentExtraPointPassingConversions")]);
    m_opponent_extra_point_passing_conversions_isSet = !json[QString("OpponentExtraPointPassingConversions")].isNull() && m_opponent_extra_point_passing_conversions_isValid;

    m_opponent_extra_point_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_point_percentage, json[QString("OpponentExtraPointPercentage")]);
    m_opponent_extra_point_percentage_isSet = !json[QString("OpponentExtraPointPercentage")].isNull() && m_opponent_extra_point_percentage_isValid;

    m_opponent_extra_point_rushing_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_point_rushing_attempts, json[QString("OpponentExtraPointRushingAttempts")]);
    m_opponent_extra_point_rushing_attempts_isSet = !json[QString("OpponentExtraPointRushingAttempts")].isNull() && m_opponent_extra_point_rushing_attempts_isValid;

    m_opponent_extra_point_rushing_conversions_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_point_rushing_conversions, json[QString("OpponentExtraPointRushingConversions")]);
    m_opponent_extra_point_rushing_conversions_isSet = !json[QString("OpponentExtraPointRushingConversions")].isNull() && m_opponent_extra_point_rushing_conversions_isValid;

    m_opponent_extra_points_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_opponent_extra_points_had_blocked, json[QString("OpponentExtraPointsHadBlocked")]);
    m_opponent_extra_points_had_blocked_isSet = !json[QString("OpponentExtraPointsHadBlocked")].isNull() && m_opponent_extra_points_had_blocked_isValid;

    m_opponent_field_goal_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_field_goal_attempts, json[QString("OpponentFieldGoalAttempts")]);
    m_opponent_field_goal_attempts_isSet = !json[QString("OpponentFieldGoalAttempts")].isNull() && m_opponent_field_goal_attempts_isValid;

    m_opponent_field_goal_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_field_goal_percentage, json[QString("OpponentFieldGoalPercentage")]);
    m_opponent_field_goal_percentage_isSet = !json[QString("OpponentFieldGoalPercentage")].isNull() && m_opponent_field_goal_percentage_isValid;

    m_opponent_field_goal_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_field_goal_return_touchdowns, json[QString("OpponentFieldGoalReturnTouchdowns")]);
    m_opponent_field_goal_return_touchdowns_isSet = !json[QString("OpponentFieldGoalReturnTouchdowns")].isNull() && m_opponent_field_goal_return_touchdowns_isValid;

    m_opponent_field_goal_return_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_field_goal_return_yards, json[QString("OpponentFieldGoalReturnYards")]);
    m_opponent_field_goal_return_yards_isSet = !json[QString("OpponentFieldGoalReturnYards")].isNull() && m_opponent_field_goal_return_yards_isValid;

    m_opponent_field_goals_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_opponent_field_goals_had_blocked, json[QString("OpponentFieldGoalsHadBlocked")]);
    m_opponent_field_goals_had_blocked_isSet = !json[QString("OpponentFieldGoalsHadBlocked")].isNull() && m_opponent_field_goals_had_blocked_isValid;

    m_opponent_field_goals_made_isValid = ::OpenAPI::fromJsonValue(m_opponent_field_goals_made, json[QString("OpponentFieldGoalsMade")]);
    m_opponent_field_goals_made_isSet = !json[QString("OpponentFieldGoalsMade")].isNull() && m_opponent_field_goals_made_isValid;

    m_opponent_first_downs_isValid = ::OpenAPI::fromJsonValue(m_opponent_first_downs, json[QString("OpponentFirstDowns")]);
    m_opponent_first_downs_isSet = !json[QString("OpponentFirstDowns")].isNull() && m_opponent_first_downs_isValid;

    m_opponent_first_downs_by_passing_isValid = ::OpenAPI::fromJsonValue(m_opponent_first_downs_by_passing, json[QString("OpponentFirstDownsByPassing")]);
    m_opponent_first_downs_by_passing_isSet = !json[QString("OpponentFirstDownsByPassing")].isNull() && m_opponent_first_downs_by_passing_isValid;

    m_opponent_first_downs_by_penalty_isValid = ::OpenAPI::fromJsonValue(m_opponent_first_downs_by_penalty, json[QString("OpponentFirstDownsByPenalty")]);
    m_opponent_first_downs_by_penalty_isSet = !json[QString("OpponentFirstDownsByPenalty")].isNull() && m_opponent_first_downs_by_penalty_isValid;

    m_opponent_first_downs_by_rushing_isValid = ::OpenAPI::fromJsonValue(m_opponent_first_downs_by_rushing, json[QString("OpponentFirstDownsByRushing")]);
    m_opponent_first_downs_by_rushing_isSet = !json[QString("OpponentFirstDownsByRushing")].isNull() && m_opponent_first_downs_by_rushing_isValid;

    m_opponent_fourth_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_fourth_down_attempts, json[QString("OpponentFourthDownAttempts")]);
    m_opponent_fourth_down_attempts_isSet = !json[QString("OpponentFourthDownAttempts")].isNull() && m_opponent_fourth_down_attempts_isValid;

    m_opponent_fourth_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_opponent_fourth_down_conversions, json[QString("OpponentFourthDownConversions")]);
    m_opponent_fourth_down_conversions_isSet = !json[QString("OpponentFourthDownConversions")].isNull() && m_opponent_fourth_down_conversions_isValid;

    m_opponent_fourth_down_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_fourth_down_percentage, json[QString("OpponentFourthDownPercentage")]);
    m_opponent_fourth_down_percentage_isSet = !json[QString("OpponentFourthDownPercentage")].isNull() && m_opponent_fourth_down_percentage_isValid;

    m_opponent_fumble_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_fumble_return_touchdowns, json[QString("OpponentFumbleReturnTouchdowns")]);
    m_opponent_fumble_return_touchdowns_isSet = !json[QString("OpponentFumbleReturnTouchdowns")].isNull() && m_opponent_fumble_return_touchdowns_isValid;

    m_opponent_fumble_return_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_fumble_return_yards, json[QString("OpponentFumbleReturnYards")]);
    m_opponent_fumble_return_yards_isSet = !json[QString("OpponentFumbleReturnYards")].isNull() && m_opponent_fumble_return_yards_isValid;

    m_opponent_fumbles_isValid = ::OpenAPI::fromJsonValue(m_opponent_fumbles, json[QString("OpponentFumbles")]);
    m_opponent_fumbles_isSet = !json[QString("OpponentFumbles")].isNull() && m_opponent_fumbles_isValid;

    m_opponent_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_opponent_fumbles_forced, json[QString("OpponentFumblesForced")]);
    m_opponent_fumbles_forced_isSet = !json[QString("OpponentFumblesForced")].isNull() && m_opponent_fumbles_forced_isValid;

    m_opponent_fumbles_lost_isValid = ::OpenAPI::fromJsonValue(m_opponent_fumbles_lost, json[QString("OpponentFumblesLost")]);
    m_opponent_fumbles_lost_isSet = !json[QString("OpponentFumblesLost")].isNull() && m_opponent_fumbles_lost_isValid;

    m_opponent_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_opponent_fumbles_recovered, json[QString("OpponentFumblesRecovered")]);
    m_opponent_fumbles_recovered_isSet = !json[QString("OpponentFumblesRecovered")].isNull() && m_opponent_fumbles_recovered_isValid;

    m_opponent_giveaways_isValid = ::OpenAPI::fromJsonValue(m_opponent_giveaways, json[QString("OpponentGiveaways")]);
    m_opponent_giveaways_isSet = !json[QString("OpponentGiveaways")].isNull() && m_opponent_giveaways_isValid;

    m_opponent_goal_to_go_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_goal_to_go_attempts, json[QString("OpponentGoalToGoAttempts")]);
    m_opponent_goal_to_go_attempts_isSet = !json[QString("OpponentGoalToGoAttempts")].isNull() && m_opponent_goal_to_go_attempts_isValid;

    m_opponent_goal_to_go_conversions_isValid = ::OpenAPI::fromJsonValue(m_opponent_goal_to_go_conversions, json[QString("OpponentGoalToGoConversions")]);
    m_opponent_goal_to_go_conversions_isSet = !json[QString("OpponentGoalToGoConversions")].isNull() && m_opponent_goal_to_go_conversions_isValid;

    m_opponent_goal_to_go_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_goal_to_go_percentage, json[QString("OpponentGoalToGoPercentage")]);
    m_opponent_goal_to_go_percentage_isSet = !json[QString("OpponentGoalToGoPercentage")].isNull() && m_opponent_goal_to_go_percentage_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentID")]);
    m_opponent_id_isSet = !json[QString("OpponentID")].isNull() && m_opponent_id_isValid;

    m_opponent_interception_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_interception_return_touchdowns, json[QString("OpponentInterceptionReturnTouchdowns")]);
    m_opponent_interception_return_touchdowns_isSet = !json[QString("OpponentInterceptionReturnTouchdowns")].isNull() && m_opponent_interception_return_touchdowns_isValid;

    m_opponent_interception_return_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_interception_return_yards, json[QString("OpponentInterceptionReturnYards")]);
    m_opponent_interception_return_yards_isSet = !json[QString("OpponentInterceptionReturnYards")].isNull() && m_opponent_interception_return_yards_isValid;

    m_opponent_interception_returns_isValid = ::OpenAPI::fromJsonValue(m_opponent_interception_returns, json[QString("OpponentInterceptionReturns")]);
    m_opponent_interception_returns_isSet = !json[QString("OpponentInterceptionReturns")].isNull() && m_opponent_interception_returns_isValid;

    m_opponent_kick_return_average_isValid = ::OpenAPI::fromJsonValue(m_opponent_kick_return_average, json[QString("OpponentKickReturnAverage")]);
    m_opponent_kick_return_average_isSet = !json[QString("OpponentKickReturnAverage")].isNull() && m_opponent_kick_return_average_isValid;

    m_opponent_kick_return_long_isValid = ::OpenAPI::fromJsonValue(m_opponent_kick_return_long, json[QString("OpponentKickReturnLong")]);
    m_opponent_kick_return_long_isSet = !json[QString("OpponentKickReturnLong")].isNull() && m_opponent_kick_return_long_isValid;

    m_opponent_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_kick_return_touchdowns, json[QString("OpponentKickReturnTouchdowns")]);
    m_opponent_kick_return_touchdowns_isSet = !json[QString("OpponentKickReturnTouchdowns")].isNull() && m_opponent_kick_return_touchdowns_isValid;

    m_opponent_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_kick_return_yards, json[QString("OpponentKickReturnYards")]);
    m_opponent_kick_return_yards_isSet = !json[QString("OpponentKickReturnYards")].isNull() && m_opponent_kick_return_yards_isValid;

    m_opponent_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_opponent_kick_returns, json[QString("OpponentKickReturns")]);
    m_opponent_kick_returns_isSet = !json[QString("OpponentKickReturns")].isNull() && m_opponent_kick_returns_isValid;

    m_opponent_kickoff_touchbacks_isValid = ::OpenAPI::fromJsonValue(m_opponent_kickoff_touchbacks, json[QString("OpponentKickoffTouchbacks")]);
    m_opponent_kickoff_touchbacks_isSet = !json[QString("OpponentKickoffTouchbacks")].isNull() && m_opponent_kickoff_touchbacks_isValid;

    m_opponent_kickoffs_isValid = ::OpenAPI::fromJsonValue(m_opponent_kickoffs, json[QString("OpponentKickoffs")]);
    m_opponent_kickoffs_isSet = !json[QString("OpponentKickoffs")].isNull() && m_opponent_kickoffs_isValid;

    m_opponent_kickoffs_in_end_zone_isValid = ::OpenAPI::fromJsonValue(m_opponent_kickoffs_in_end_zone, json[QString("OpponentKickoffsInEndZone")]);
    m_opponent_kickoffs_in_end_zone_isSet = !json[QString("OpponentKickoffsInEndZone")].isNull() && m_opponent_kickoffs_in_end_zone_isValid;

    m_opponent_offensive_plays_isValid = ::OpenAPI::fromJsonValue(m_opponent_offensive_plays, json[QString("OpponentOffensivePlays")]);
    m_opponent_offensive_plays_isSet = !json[QString("OpponentOffensivePlays")].isNull() && m_opponent_offensive_plays_isValid;

    m_opponent_offensive_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_offensive_yards, json[QString("OpponentOffensiveYards")]);
    m_opponent_offensive_yards_isSet = !json[QString("OpponentOffensiveYards")].isNull() && m_opponent_offensive_yards_isValid;

    m_opponent_offensive_yards_per_play_isValid = ::OpenAPI::fromJsonValue(m_opponent_offensive_yards_per_play, json[QString("OpponentOffensiveYardsPerPlay")]);
    m_opponent_offensive_yards_per_play_isSet = !json[QString("OpponentOffensiveYardsPerPlay")].isNull() && m_opponent_offensive_yards_per_play_isValid;

    m_opponent_passer_rating_isValid = ::OpenAPI::fromJsonValue(m_opponent_passer_rating, json[QString("OpponentPasserRating")]);
    m_opponent_passer_rating_isSet = !json[QString("OpponentPasserRating")].isNull() && m_opponent_passer_rating_isValid;

    m_opponent_passes_defended_isValid = ::OpenAPI::fromJsonValue(m_opponent_passes_defended, json[QString("OpponentPassesDefended")]);
    m_opponent_passes_defended_isSet = !json[QString("OpponentPassesDefended")].isNull() && m_opponent_passes_defended_isValid;

    m_opponent_passing_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_attempts, json[QString("OpponentPassingAttempts")]);
    m_opponent_passing_attempts_isSet = !json[QString("OpponentPassingAttempts")].isNull() && m_opponent_passing_attempts_isValid;

    m_opponent_passing_completions_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_completions, json[QString("OpponentPassingCompletions")]);
    m_opponent_passing_completions_isSet = !json[QString("OpponentPassingCompletions")].isNull() && m_opponent_passing_completions_isValid;

    m_opponent_passing_dropbacks_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_dropbacks, json[QString("OpponentPassingDropbacks")]);
    m_opponent_passing_dropbacks_isSet = !json[QString("OpponentPassingDropbacks")].isNull() && m_opponent_passing_dropbacks_isValid;

    m_opponent_passing_interception_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_interception_percentage, json[QString("OpponentPassingInterceptionPercentage")]);
    m_opponent_passing_interception_percentage_isSet = !json[QString("OpponentPassingInterceptionPercentage")].isNull() && m_opponent_passing_interception_percentage_isValid;

    m_opponent_passing_interceptions_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_interceptions, json[QString("OpponentPassingInterceptions")]);
    m_opponent_passing_interceptions_isSet = !json[QString("OpponentPassingInterceptions")].isNull() && m_opponent_passing_interceptions_isValid;

    m_opponent_passing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_touchdowns, json[QString("OpponentPassingTouchdowns")]);
    m_opponent_passing_touchdowns_isSet = !json[QString("OpponentPassingTouchdowns")].isNull() && m_opponent_passing_touchdowns_isValid;

    m_opponent_passing_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_yards, json[QString("OpponentPassingYards")]);
    m_opponent_passing_yards_isSet = !json[QString("OpponentPassingYards")].isNull() && m_opponent_passing_yards_isValid;

    m_opponent_passing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_yards_per_attempt, json[QString("OpponentPassingYardsPerAttempt")]);
    m_opponent_passing_yards_per_attempt_isSet = !json[QString("OpponentPassingYardsPerAttempt")].isNull() && m_opponent_passing_yards_per_attempt_isValid;

    m_opponent_passing_yards_per_completion_isValid = ::OpenAPI::fromJsonValue(m_opponent_passing_yards_per_completion, json[QString("OpponentPassingYardsPerCompletion")]);
    m_opponent_passing_yards_per_completion_isSet = !json[QString("OpponentPassingYardsPerCompletion")].isNull() && m_opponent_passing_yards_per_completion_isValid;

    m_opponent_penalties_isValid = ::OpenAPI::fromJsonValue(m_opponent_penalties, json[QString("OpponentPenalties")]);
    m_opponent_penalties_isSet = !json[QString("OpponentPenalties")].isNull() && m_opponent_penalties_isValid;

    m_opponent_penalty_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_penalty_yards, json[QString("OpponentPenaltyYards")]);
    m_opponent_penalty_yards_isSet = !json[QString("OpponentPenaltyYards")].isNull() && m_opponent_penalty_yards_isValid;

    m_opponent_punt_average_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_average, json[QString("OpponentPuntAverage")]);
    m_opponent_punt_average_isSet = !json[QString("OpponentPuntAverage")].isNull() && m_opponent_punt_average_isValid;

    m_opponent_punt_net_average_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_net_average, json[QString("OpponentPuntNetAverage")]);
    m_opponent_punt_net_average_isSet = !json[QString("OpponentPuntNetAverage")].isNull() && m_opponent_punt_net_average_isValid;

    m_opponent_punt_net_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_net_yards, json[QString("OpponentPuntNetYards")]);
    m_opponent_punt_net_yards_isSet = !json[QString("OpponentPuntNetYards")].isNull() && m_opponent_punt_net_yards_isValid;

    m_opponent_punt_return_average_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_return_average, json[QString("OpponentPuntReturnAverage")]);
    m_opponent_punt_return_average_isSet = !json[QString("OpponentPuntReturnAverage")].isNull() && m_opponent_punt_return_average_isValid;

    m_opponent_punt_return_long_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_return_long, json[QString("OpponentPuntReturnLong")]);
    m_opponent_punt_return_long_isSet = !json[QString("OpponentPuntReturnLong")].isNull() && m_opponent_punt_return_long_isValid;

    m_opponent_punt_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_return_touchdowns, json[QString("OpponentPuntReturnTouchdowns")]);
    m_opponent_punt_return_touchdowns_isSet = !json[QString("OpponentPuntReturnTouchdowns")].isNull() && m_opponent_punt_return_touchdowns_isValid;

    m_opponent_punt_return_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_return_yards, json[QString("OpponentPuntReturnYards")]);
    m_opponent_punt_return_yards_isSet = !json[QString("OpponentPuntReturnYards")].isNull() && m_opponent_punt_return_yards_isValid;

    m_opponent_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_returns, json[QString("OpponentPuntReturns")]);
    m_opponent_punt_returns_isSet = !json[QString("OpponentPuntReturns")].isNull() && m_opponent_punt_returns_isValid;

    m_opponent_punt_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_punt_yards, json[QString("OpponentPuntYards")]);
    m_opponent_punt_yards_isSet = !json[QString("OpponentPuntYards")].isNull() && m_opponent_punt_yards_isValid;

    m_opponent_punts_isValid = ::OpenAPI::fromJsonValue(m_opponent_punts, json[QString("OpponentPunts")]);
    m_opponent_punts_isSet = !json[QString("OpponentPunts")].isNull() && m_opponent_punts_isValid;

    m_opponent_punts_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_opponent_punts_had_blocked, json[QString("OpponentPuntsHadBlocked")]);
    m_opponent_punts_had_blocked_isSet = !json[QString("OpponentPuntsHadBlocked")].isNull() && m_opponent_punts_had_blocked_isValid;

    m_opponent_quarterback_hits_isValid = ::OpenAPI::fromJsonValue(m_opponent_quarterback_hits, json[QString("OpponentQuarterbackHits")]);
    m_opponent_quarterback_hits_isSet = !json[QString("OpponentQuarterbackHits")].isNull() && m_opponent_quarterback_hits_isValid;

    m_opponent_quarterback_hits_differential_isValid = ::OpenAPI::fromJsonValue(m_opponent_quarterback_hits_differential, json[QString("OpponentQuarterbackHitsDifferential")]);
    m_opponent_quarterback_hits_differential_isSet = !json[QString("OpponentQuarterbackHitsDifferential")].isNull() && m_opponent_quarterback_hits_differential_isValid;

    m_opponent_quarterback_hits_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_quarterback_hits_percentage, json[QString("OpponentQuarterbackHitsPercentage")]);
    m_opponent_quarterback_hits_percentage_isSet = !json[QString("OpponentQuarterbackHitsPercentage")].isNull() && m_opponent_quarterback_hits_percentage_isValid;

    m_opponent_quarterback_sacks_differential_isValid = ::OpenAPI::fromJsonValue(m_opponent_quarterback_sacks_differential, json[QString("OpponentQuarterbackSacksDifferential")]);
    m_opponent_quarterback_sacks_differential_isSet = !json[QString("OpponentQuarterbackSacksDifferential")].isNull() && m_opponent_quarterback_sacks_differential_isValid;

    m_opponent_red_zone_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_red_zone_attempts, json[QString("OpponentRedZoneAttempts")]);
    m_opponent_red_zone_attempts_isSet = !json[QString("OpponentRedZoneAttempts")].isNull() && m_opponent_red_zone_attempts_isValid;

    m_opponent_red_zone_conversions_isValid = ::OpenAPI::fromJsonValue(m_opponent_red_zone_conversions, json[QString("OpponentRedZoneConversions")]);
    m_opponent_red_zone_conversions_isSet = !json[QString("OpponentRedZoneConversions")].isNull() && m_opponent_red_zone_conversions_isValid;

    m_opponent_red_zone_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_red_zone_percentage, json[QString("OpponentRedZonePercentage")]);
    m_opponent_red_zone_percentage_isSet = !json[QString("OpponentRedZonePercentage")].isNull() && m_opponent_red_zone_percentage_isValid;

    m_opponent_return_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_return_yards, json[QString("OpponentReturnYards")]);
    m_opponent_return_yards_isSet = !json[QString("OpponentReturnYards")].isNull() && m_opponent_return_yards_isValid;

    m_opponent_rushing_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_rushing_attempts, json[QString("OpponentRushingAttempts")]);
    m_opponent_rushing_attempts_isSet = !json[QString("OpponentRushingAttempts")].isNull() && m_opponent_rushing_attempts_isValid;

    m_opponent_rushing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_rushing_touchdowns, json[QString("OpponentRushingTouchdowns")]);
    m_opponent_rushing_touchdowns_isSet = !json[QString("OpponentRushingTouchdowns")].isNull() && m_opponent_rushing_touchdowns_isValid;

    m_opponent_rushing_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_rushing_yards, json[QString("OpponentRushingYards")]);
    m_opponent_rushing_yards_isSet = !json[QString("OpponentRushingYards")].isNull() && m_opponent_rushing_yards_isValid;

    m_opponent_rushing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_opponent_rushing_yards_per_attempt, json[QString("OpponentRushingYardsPerAttempt")]);
    m_opponent_rushing_yards_per_attempt_isSet = !json[QString("OpponentRushingYardsPerAttempt")].isNull() && m_opponent_rushing_yards_per_attempt_isValid;

    m_opponent_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_sack_yards, json[QString("OpponentSackYards")]);
    m_opponent_sack_yards_isSet = !json[QString("OpponentSackYards")].isNull() && m_opponent_sack_yards_isValid;

    m_opponent_sacks_isValid = ::OpenAPI::fromJsonValue(m_opponent_sacks, json[QString("OpponentSacks")]);
    m_opponent_sacks_isSet = !json[QString("OpponentSacks")].isNull() && m_opponent_sacks_isValid;

    m_opponent_safeties_isValid = ::OpenAPI::fromJsonValue(m_opponent_safeties, json[QString("OpponentSafeties")]);
    m_opponent_safeties_isSet = !json[QString("OpponentSafeties")].isNull() && m_opponent_safeties_isValid;

    m_opponent_score_isValid = ::OpenAPI::fromJsonValue(m_opponent_score, json[QString("OpponentScore")]);
    m_opponent_score_isSet = !json[QString("OpponentScore")].isNull() && m_opponent_score_isValid;

    m_opponent_score_overtime_isValid = ::OpenAPI::fromJsonValue(m_opponent_score_overtime, json[QString("OpponentScoreOvertime")]);
    m_opponent_score_overtime_isSet = !json[QString("OpponentScoreOvertime")].isNull() && m_opponent_score_overtime_isValid;

    m_opponent_score_quarter1_isValid = ::OpenAPI::fromJsonValue(m_opponent_score_quarter1, json[QString("OpponentScoreQuarter1")]);
    m_opponent_score_quarter1_isSet = !json[QString("OpponentScoreQuarter1")].isNull() && m_opponent_score_quarter1_isValid;

    m_opponent_score_quarter2_isValid = ::OpenAPI::fromJsonValue(m_opponent_score_quarter2, json[QString("OpponentScoreQuarter2")]);
    m_opponent_score_quarter2_isSet = !json[QString("OpponentScoreQuarter2")].isNull() && m_opponent_score_quarter2_isValid;

    m_opponent_score_quarter3_isValid = ::OpenAPI::fromJsonValue(m_opponent_score_quarter3, json[QString("OpponentScoreQuarter3")]);
    m_opponent_score_quarter3_isSet = !json[QString("OpponentScoreQuarter3")].isNull() && m_opponent_score_quarter3_isValid;

    m_opponent_score_quarter4_isValid = ::OpenAPI::fromJsonValue(m_opponent_score_quarter4, json[QString("OpponentScoreQuarter4")]);
    m_opponent_score_quarter4_isSet = !json[QString("OpponentScoreQuarter4")].isNull() && m_opponent_score_quarter4_isValid;

    m_opponent_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_opponent_solo_tackles, json[QString("OpponentSoloTackles")]);
    m_opponent_solo_tackles_isSet = !json[QString("OpponentSoloTackles")].isNull() && m_opponent_solo_tackles_isValid;

    m_opponent_tackles_for_loss_isValid = ::OpenAPI::fromJsonValue(m_opponent_tackles_for_loss, json[QString("OpponentTacklesForLoss")]);
    m_opponent_tackles_for_loss_isSet = !json[QString("OpponentTacklesForLoss")].isNull() && m_opponent_tackles_for_loss_isValid;

    m_opponent_tackles_for_loss_differential_isValid = ::OpenAPI::fromJsonValue(m_opponent_tackles_for_loss_differential, json[QString("OpponentTacklesForLossDifferential")]);
    m_opponent_tackles_for_loss_differential_isSet = !json[QString("OpponentTacklesForLossDifferential")].isNull() && m_opponent_tackles_for_loss_differential_isValid;

    m_opponent_tackles_for_loss_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_tackles_for_loss_percentage, json[QString("OpponentTacklesForLossPercentage")]);
    m_opponent_tackles_for_loss_percentage_isSet = !json[QString("OpponentTacklesForLossPercentage")].isNull() && m_opponent_tackles_for_loss_percentage_isValid;

    m_opponent_takeaways_isValid = ::OpenAPI::fromJsonValue(m_opponent_takeaways, json[QString("OpponentTakeaways")]);
    m_opponent_takeaways_isSet = !json[QString("OpponentTakeaways")].isNull() && m_opponent_takeaways_isValid;

    m_opponent_third_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_opponent_third_down_attempts, json[QString("OpponentThirdDownAttempts")]);
    m_opponent_third_down_attempts_isSet = !json[QString("OpponentThirdDownAttempts")].isNull() && m_opponent_third_down_attempts_isValid;

    m_opponent_third_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_opponent_third_down_conversions, json[QString("OpponentThirdDownConversions")]);
    m_opponent_third_down_conversions_isSet = !json[QString("OpponentThirdDownConversions")].isNull() && m_opponent_third_down_conversions_isValid;

    m_opponent_third_down_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_third_down_percentage, json[QString("OpponentThirdDownPercentage")]);
    m_opponent_third_down_percentage_isSet = !json[QString("OpponentThirdDownPercentage")].isNull() && m_opponent_third_down_percentage_isValid;

    m_opponent_time_of_possession_isValid = ::OpenAPI::fromJsonValue(m_opponent_time_of_possession, json[QString("OpponentTimeOfPossession")]);
    m_opponent_time_of_possession_isSet = !json[QString("OpponentTimeOfPossession")].isNull() && m_opponent_time_of_possession_isValid;

    m_opponent_time_of_possession_minutes_isValid = ::OpenAPI::fromJsonValue(m_opponent_time_of_possession_minutes, json[QString("OpponentTimeOfPossessionMinutes")]);
    m_opponent_time_of_possession_minutes_isSet = !json[QString("OpponentTimeOfPossessionMinutes")].isNull() && m_opponent_time_of_possession_minutes_isValid;

    m_opponent_time_of_possession_seconds_isValid = ::OpenAPI::fromJsonValue(m_opponent_time_of_possession_seconds, json[QString("OpponentTimeOfPossessionSeconds")]);
    m_opponent_time_of_possession_seconds_isSet = !json[QString("OpponentTimeOfPossessionSeconds")].isNull() && m_opponent_time_of_possession_seconds_isValid;

    m_opponent_times_sacked_isValid = ::OpenAPI::fromJsonValue(m_opponent_times_sacked, json[QString("OpponentTimesSacked")]);
    m_opponent_times_sacked_isSet = !json[QString("OpponentTimesSacked")].isNull() && m_opponent_times_sacked_isValid;

    m_opponent_times_sacked_percentage_isValid = ::OpenAPI::fromJsonValue(m_opponent_times_sacked_percentage, json[QString("OpponentTimesSackedPercentage")]);
    m_opponent_times_sacked_percentage_isSet = !json[QString("OpponentTimesSackedPercentage")].isNull() && m_opponent_times_sacked_percentage_isValid;

    m_opponent_times_sacked_yards_isValid = ::OpenAPI::fromJsonValue(m_opponent_times_sacked_yards, json[QString("OpponentTimesSackedYards")]);
    m_opponent_times_sacked_yards_isSet = !json[QString("OpponentTimesSackedYards")].isNull() && m_opponent_times_sacked_yards_isValid;

    m_opponent_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_opponent_touchdowns, json[QString("OpponentTouchdowns")]);
    m_opponent_touchdowns_isSet = !json[QString("OpponentTouchdowns")].isNull() && m_opponent_touchdowns_isValid;

    m_opponent_turnover_differential_isValid = ::OpenAPI::fromJsonValue(m_opponent_turnover_differential, json[QString("OpponentTurnoverDifferential")]);
    m_opponent_turnover_differential_isSet = !json[QString("OpponentTurnoverDifferential")].isNull() && m_opponent_turnover_differential_isValid;

    m_opponent_two_point_conversion_returns_isValid = ::OpenAPI::fromJsonValue(m_opponent_two_point_conversion_returns, json[QString("OpponentTwoPointConversionReturns")]);
    m_opponent_two_point_conversion_returns_isSet = !json[QString("OpponentTwoPointConversionReturns")].isNull() && m_opponent_two_point_conversion_returns_isValid;

    m_over_under_isValid = ::OpenAPI::fromJsonValue(m_over_under, json[QString("OverUnder")]);
    m_over_under_isSet = !json[QString("OverUnder")].isNull() && m_over_under_isValid;

    m_passer_rating_isValid = ::OpenAPI::fromJsonValue(m_passer_rating, json[QString("PasserRating")]);
    m_passer_rating_isSet = !json[QString("PasserRating")].isNull() && m_passer_rating_isValid;

    m_passes_defended_isValid = ::OpenAPI::fromJsonValue(m_passes_defended, json[QString("PassesDefended")]);
    m_passes_defended_isSet = !json[QString("PassesDefended")].isNull() && m_passes_defended_isValid;

    m_passing_attempts_isValid = ::OpenAPI::fromJsonValue(m_passing_attempts, json[QString("PassingAttempts")]);
    m_passing_attempts_isSet = !json[QString("PassingAttempts")].isNull() && m_passing_attempts_isValid;

    m_passing_completions_isValid = ::OpenAPI::fromJsonValue(m_passing_completions, json[QString("PassingCompletions")]);
    m_passing_completions_isSet = !json[QString("PassingCompletions")].isNull() && m_passing_completions_isValid;

    m_passing_dropbacks_isValid = ::OpenAPI::fromJsonValue(m_passing_dropbacks, json[QString("PassingDropbacks")]);
    m_passing_dropbacks_isSet = !json[QString("PassingDropbacks")].isNull() && m_passing_dropbacks_isValid;

    m_passing_interception_percentage_isValid = ::OpenAPI::fromJsonValue(m_passing_interception_percentage, json[QString("PassingInterceptionPercentage")]);
    m_passing_interception_percentage_isSet = !json[QString("PassingInterceptionPercentage")].isNull() && m_passing_interception_percentage_isValid;

    m_passing_interceptions_isValid = ::OpenAPI::fromJsonValue(m_passing_interceptions, json[QString("PassingInterceptions")]);
    m_passing_interceptions_isSet = !json[QString("PassingInterceptions")].isNull() && m_passing_interceptions_isValid;

    m_passing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_passing_touchdowns, json[QString("PassingTouchdowns")]);
    m_passing_touchdowns_isSet = !json[QString("PassingTouchdowns")].isNull() && m_passing_touchdowns_isValid;

    m_passing_yards_isValid = ::OpenAPI::fromJsonValue(m_passing_yards, json[QString("PassingYards")]);
    m_passing_yards_isSet = !json[QString("PassingYards")].isNull() && m_passing_yards_isValid;

    m_passing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_passing_yards_per_attempt, json[QString("PassingYardsPerAttempt")]);
    m_passing_yards_per_attempt_isSet = !json[QString("PassingYardsPerAttempt")].isNull() && m_passing_yards_per_attempt_isValid;

    m_passing_yards_per_completion_isValid = ::OpenAPI::fromJsonValue(m_passing_yards_per_completion, json[QString("PassingYardsPerCompletion")]);
    m_passing_yards_per_completion_isSet = !json[QString("PassingYardsPerCompletion")].isNull() && m_passing_yards_per_completion_isValid;

    m_penalties_isValid = ::OpenAPI::fromJsonValue(m_penalties, json[QString("Penalties")]);
    m_penalties_isSet = !json[QString("Penalties")].isNull() && m_penalties_isValid;

    m_penalty_yard_differential_isValid = ::OpenAPI::fromJsonValue(m_penalty_yard_differential, json[QString("PenaltyYardDifferential")]);
    m_penalty_yard_differential_isSet = !json[QString("PenaltyYardDifferential")].isNull() && m_penalty_yard_differential_isValid;

    m_penalty_yards_isValid = ::OpenAPI::fromJsonValue(m_penalty_yards, json[QString("PenaltyYards")]);
    m_penalty_yards_isSet = !json[QString("PenaltyYards")].isNull() && m_penalty_yards_isValid;

    m_playing_surface_isValid = ::OpenAPI::fromJsonValue(m_playing_surface, json[QString("PlayingSurface")]);
    m_playing_surface_isSet = !json[QString("PlayingSurface")].isNull() && m_playing_surface_isValid;

    m_point_differential_isValid = ::OpenAPI::fromJsonValue(m_point_differential, json[QString("PointDifferential")]);
    m_point_differential_isSet = !json[QString("PointDifferential")].isNull() && m_point_differential_isValid;

    m_point_spread_isValid = ::OpenAPI::fromJsonValue(m_point_spread, json[QString("PointSpread")]);
    m_point_spread_isSet = !json[QString("PointSpread")].isNull() && m_point_spread_isValid;

    m_punt_average_isValid = ::OpenAPI::fromJsonValue(m_punt_average, json[QString("PuntAverage")]);
    m_punt_average_isSet = !json[QString("PuntAverage")].isNull() && m_punt_average_isValid;

    m_punt_net_average_isValid = ::OpenAPI::fromJsonValue(m_punt_net_average, json[QString("PuntNetAverage")]);
    m_punt_net_average_isSet = !json[QString("PuntNetAverage")].isNull() && m_punt_net_average_isValid;

    m_punt_net_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_net_yards, json[QString("PuntNetYards")]);
    m_punt_net_yards_isSet = !json[QString("PuntNetYards")].isNull() && m_punt_net_yards_isValid;

    m_punt_return_average_isValid = ::OpenAPI::fromJsonValue(m_punt_return_average, json[QString("PuntReturnAverage")]);
    m_punt_return_average_isSet = !json[QString("PuntReturnAverage")].isNull() && m_punt_return_average_isValid;

    m_punt_return_long_isValid = ::OpenAPI::fromJsonValue(m_punt_return_long, json[QString("PuntReturnLong")]);
    m_punt_return_long_isSet = !json[QString("PuntReturnLong")].isNull() && m_punt_return_long_isValid;

    m_punt_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_punt_return_touchdowns, json[QString("PuntReturnTouchdowns")]);
    m_punt_return_touchdowns_isSet = !json[QString("PuntReturnTouchdowns")].isNull() && m_punt_return_touchdowns_isValid;

    m_punt_return_yard_differential_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yard_differential, json[QString("PuntReturnYardDifferential")]);
    m_punt_return_yard_differential_isSet = !json[QString("PuntReturnYardDifferential")].isNull() && m_punt_return_yard_differential_isValid;

    m_punt_return_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards, json[QString("PuntReturnYards")]);
    m_punt_return_yards_isSet = !json[QString("PuntReturnYards")].isNull() && m_punt_return_yards_isValid;

    m_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_punt_returns, json[QString("PuntReturns")]);
    m_punt_returns_isSet = !json[QString("PuntReturns")].isNull() && m_punt_returns_isValid;

    m_punt_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_yards, json[QString("PuntYards")]);
    m_punt_yards_isSet = !json[QString("PuntYards")].isNull() && m_punt_yards_isValid;

    m_punts_isValid = ::OpenAPI::fromJsonValue(m_punts, json[QString("Punts")]);
    m_punts_isSet = !json[QString("Punts")].isNull() && m_punts_isValid;

    m_punts_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_punts_had_blocked, json[QString("PuntsHadBlocked")]);
    m_punts_had_blocked_isSet = !json[QString("PuntsHadBlocked")].isNull() && m_punts_had_blocked_isValid;

    m_quarterback_hits_isValid = ::OpenAPI::fromJsonValue(m_quarterback_hits, json[QString("QuarterbackHits")]);
    m_quarterback_hits_isSet = !json[QString("QuarterbackHits")].isNull() && m_quarterback_hits_isValid;

    m_quarterback_hits_differential_isValid = ::OpenAPI::fromJsonValue(m_quarterback_hits_differential, json[QString("QuarterbackHitsDifferential")]);
    m_quarterback_hits_differential_isSet = !json[QString("QuarterbackHitsDifferential")].isNull() && m_quarterback_hits_differential_isValid;

    m_quarterback_hits_percentage_isValid = ::OpenAPI::fromJsonValue(m_quarterback_hits_percentage, json[QString("QuarterbackHitsPercentage")]);
    m_quarterback_hits_percentage_isSet = !json[QString("QuarterbackHitsPercentage")].isNull() && m_quarterback_hits_percentage_isValid;

    m_quarterback_sacks_differential_isValid = ::OpenAPI::fromJsonValue(m_quarterback_sacks_differential, json[QString("QuarterbackSacksDifferential")]);
    m_quarterback_sacks_differential_isSet = !json[QString("QuarterbackSacksDifferential")].isNull() && m_quarterback_sacks_differential_isValid;

    m_red_zone_attempts_isValid = ::OpenAPI::fromJsonValue(m_red_zone_attempts, json[QString("RedZoneAttempts")]);
    m_red_zone_attempts_isSet = !json[QString("RedZoneAttempts")].isNull() && m_red_zone_attempts_isValid;

    m_red_zone_conversions_isValid = ::OpenAPI::fromJsonValue(m_red_zone_conversions, json[QString("RedZoneConversions")]);
    m_red_zone_conversions_isSet = !json[QString("RedZoneConversions")].isNull() && m_red_zone_conversions_isValid;

    m_red_zone_percentage_isValid = ::OpenAPI::fromJsonValue(m_red_zone_percentage, json[QString("RedZonePercentage")]);
    m_red_zone_percentage_isSet = !json[QString("RedZonePercentage")].isNull() && m_red_zone_percentage_isValid;

    m_return_yards_isValid = ::OpenAPI::fromJsonValue(m_return_yards, json[QString("ReturnYards")]);
    m_return_yards_isSet = !json[QString("ReturnYards")].isNull() && m_return_yards_isValid;

    m_rushing_attempts_isValid = ::OpenAPI::fromJsonValue(m_rushing_attempts, json[QString("RushingAttempts")]);
    m_rushing_attempts_isSet = !json[QString("RushingAttempts")].isNull() && m_rushing_attempts_isValid;

    m_rushing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_rushing_touchdowns, json[QString("RushingTouchdowns")]);
    m_rushing_touchdowns_isSet = !json[QString("RushingTouchdowns")].isNull() && m_rushing_touchdowns_isValid;

    m_rushing_yards_isValid = ::OpenAPI::fromJsonValue(m_rushing_yards, json[QString("RushingYards")]);
    m_rushing_yards_isSet = !json[QString("RushingYards")].isNull() && m_rushing_yards_isValid;

    m_rushing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_rushing_yards_per_attempt, json[QString("RushingYardsPerAttempt")]);
    m_rushing_yards_per_attempt_isSet = !json[QString("RushingYardsPerAttempt")].isNull() && m_rushing_yards_per_attempt_isValid;

    m_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_sack_yards, json[QString("SackYards")]);
    m_sack_yards_isSet = !json[QString("SackYards")].isNull() && m_sack_yards_isValid;

    m_sacks_isValid = ::OpenAPI::fromJsonValue(m_sacks, json[QString("Sacks")]);
    m_sacks_isSet = !json[QString("Sacks")].isNull() && m_sacks_isValid;

    m_safeties_isValid = ::OpenAPI::fromJsonValue(m_safeties, json[QString("Safeties")]);
    m_safeties_isSet = !json[QString("Safeties")].isNull() && m_safeties_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_score_id_isValid = ::OpenAPI::fromJsonValue(m_score_id, json[QString("ScoreID")]);
    m_score_id_isSet = !json[QString("ScoreID")].isNull() && m_score_id_isValid;

    m_score_overtime_isValid = ::OpenAPI::fromJsonValue(m_score_overtime, json[QString("ScoreOvertime")]);
    m_score_overtime_isSet = !json[QString("ScoreOvertime")].isNull() && m_score_overtime_isValid;

    m_score_quarter1_isValid = ::OpenAPI::fromJsonValue(m_score_quarter1, json[QString("ScoreQuarter1")]);
    m_score_quarter1_isSet = !json[QString("ScoreQuarter1")].isNull() && m_score_quarter1_isValid;

    m_score_quarter2_isValid = ::OpenAPI::fromJsonValue(m_score_quarter2, json[QString("ScoreQuarter2")]);
    m_score_quarter2_isSet = !json[QString("ScoreQuarter2")].isNull() && m_score_quarter2_isValid;

    m_score_quarter3_isValid = ::OpenAPI::fromJsonValue(m_score_quarter3, json[QString("ScoreQuarter3")]);
    m_score_quarter3_isSet = !json[QString("ScoreQuarter3")].isNull() && m_score_quarter3_isValid;

    m_score_quarter4_isValid = ::OpenAPI::fromJsonValue(m_score_quarter4, json[QString("ScoreQuarter4")]);
    m_score_quarter4_isSet = !json[QString("ScoreQuarter4")].isNull() && m_score_quarter4_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_solo_tackles, json[QString("SoloTackles")]);
    m_solo_tackles_isSet = !json[QString("SoloTackles")].isNull() && m_solo_tackles_isValid;

    m_stadium_isValid = ::OpenAPI::fromJsonValue(m_stadium, json[QString("Stadium")]);
    m_stadium_isSet = !json[QString("Stadium")].isNull() && m_stadium_isValid;

    m_tackles_for_loss_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss, json[QString("TacklesForLoss")]);
    m_tackles_for_loss_isSet = !json[QString("TacklesForLoss")].isNull() && m_tackles_for_loss_isValid;

    m_tackles_for_loss_differential_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss_differential, json[QString("TacklesForLossDifferential")]);
    m_tackles_for_loss_differential_isSet = !json[QString("TacklesForLossDifferential")].isNull() && m_tackles_for_loss_differential_isValid;

    m_tackles_for_loss_percentage_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss_percentage, json[QString("TacklesForLossPercentage")]);
    m_tackles_for_loss_percentage_isSet = !json[QString("TacklesForLossPercentage")].isNull() && m_tackles_for_loss_percentage_isValid;

    m_takeaways_isValid = ::OpenAPI::fromJsonValue(m_takeaways, json[QString("Takeaways")]);
    m_takeaways_isSet = !json[QString("Takeaways")].isNull() && m_takeaways_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_game_id_isValid = ::OpenAPI::fromJsonValue(m_team_game_id, json[QString("TeamGameID")]);
    m_team_game_id_isSet = !json[QString("TeamGameID")].isNull() && m_team_game_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_team_name_isValid = ::OpenAPI::fromJsonValue(m_team_name, json[QString("TeamName")]);
    m_team_name_isSet = !json[QString("TeamName")].isNull() && m_team_name_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("Temperature")]);
    m_temperature_isSet = !json[QString("Temperature")].isNull() && m_temperature_isValid;

    m_third_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_third_down_attempts, json[QString("ThirdDownAttempts")]);
    m_third_down_attempts_isSet = !json[QString("ThirdDownAttempts")].isNull() && m_third_down_attempts_isValid;

    m_third_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_third_down_conversions, json[QString("ThirdDownConversions")]);
    m_third_down_conversions_isSet = !json[QString("ThirdDownConversions")].isNull() && m_third_down_conversions_isValid;

    m_third_down_percentage_isValid = ::OpenAPI::fromJsonValue(m_third_down_percentage, json[QString("ThirdDownPercentage")]);
    m_third_down_percentage_isSet = !json[QString("ThirdDownPercentage")].isNull() && m_third_down_percentage_isValid;

    m_time_of_possession_isValid = ::OpenAPI::fromJsonValue(m_time_of_possession, json[QString("TimeOfPossession")]);
    m_time_of_possession_isSet = !json[QString("TimeOfPossession")].isNull() && m_time_of_possession_isValid;

    m_time_of_possession_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_of_possession_minutes, json[QString("TimeOfPossessionMinutes")]);
    m_time_of_possession_minutes_isSet = !json[QString("TimeOfPossessionMinutes")].isNull() && m_time_of_possession_minutes_isValid;

    m_time_of_possession_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_of_possession_seconds, json[QString("TimeOfPossessionSeconds")]);
    m_time_of_possession_seconds_isSet = !json[QString("TimeOfPossessionSeconds")].isNull() && m_time_of_possession_seconds_isValid;

    m_times_sacked_isValid = ::OpenAPI::fromJsonValue(m_times_sacked, json[QString("TimesSacked")]);
    m_times_sacked_isSet = !json[QString("TimesSacked")].isNull() && m_times_sacked_isValid;

    m_times_sacked_percentage_isValid = ::OpenAPI::fromJsonValue(m_times_sacked_percentage, json[QString("TimesSackedPercentage")]);
    m_times_sacked_percentage_isSet = !json[QString("TimesSackedPercentage")].isNull() && m_times_sacked_percentage_isValid;

    m_times_sacked_yards_isValid = ::OpenAPI::fromJsonValue(m_times_sacked_yards, json[QString("TimesSackedYards")]);
    m_times_sacked_yards_isSet = !json[QString("TimesSackedYards")].isNull() && m_times_sacked_yards_isValid;

    m_total_score_isValid = ::OpenAPI::fromJsonValue(m_total_score, json[QString("TotalScore")]);
    m_total_score_isSet = !json[QString("TotalScore")].isNull() && m_total_score_isValid;

    m_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_touchdowns, json[QString("Touchdowns")]);
    m_touchdowns_isSet = !json[QString("Touchdowns")].isNull() && m_touchdowns_isValid;

    m_turnover_differential_isValid = ::OpenAPI::fromJsonValue(m_turnover_differential, json[QString("TurnoverDifferential")]);
    m_turnover_differential_isSet = !json[QString("TurnoverDifferential")].isNull() && m_turnover_differential_isValid;

    m_two_point_conversion_returns_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_returns, json[QString("TwoPointConversionReturns")]);
    m_two_point_conversion_returns_isSet = !json[QString("TwoPointConversionReturns")].isNull() && m_two_point_conversion_returns_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;

    m_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_wind_speed, json[QString("WindSpeed")]);
    m_wind_speed_isSet = !json[QString("WindSpeed")].isNull() && m_wind_speed_isValid;
}

QString OAITeamGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamGame::asJsonObject() const {
    QJsonObject obj;
    if (m_assisted_tackles_isSet) {
        obj.insert(QString("AssistedTackles"), ::OpenAPI::toJsonValue(m_assisted_tackles));
    }
    if (m_blocked_kick_return_touchdowns_isSet) {
        obj.insert(QString("BlockedKickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_blocked_kick_return_touchdowns));
    }
    if (m_blocked_kick_return_yards_isSet) {
        obj.insert(QString("BlockedKickReturnYards"), ::OpenAPI::toJsonValue(m_blocked_kick_return_yards));
    }
    if (m_blocked_kicks_isSet) {
        obj.insert(QString("BlockedKicks"), ::OpenAPI::toJsonValue(m_blocked_kicks));
    }
    if (m_completion_percentage_isSet) {
        obj.insert(QString("CompletionPercentage"), ::OpenAPI::toJsonValue(m_completion_percentage));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_day_of_week_isSet) {
        obj.insert(QString("DayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_extra_point_kicking_attempts_isSet) {
        obj.insert(QString("ExtraPointKickingAttempts"), ::OpenAPI::toJsonValue(m_extra_point_kicking_attempts));
    }
    if (m_extra_point_kicking_conversions_isSet) {
        obj.insert(QString("ExtraPointKickingConversions"), ::OpenAPI::toJsonValue(m_extra_point_kicking_conversions));
    }
    if (m_extra_point_passing_attempts_isSet) {
        obj.insert(QString("ExtraPointPassingAttempts"), ::OpenAPI::toJsonValue(m_extra_point_passing_attempts));
    }
    if (m_extra_point_passing_conversions_isSet) {
        obj.insert(QString("ExtraPointPassingConversions"), ::OpenAPI::toJsonValue(m_extra_point_passing_conversions));
    }
    if (m_extra_point_percentage_isSet) {
        obj.insert(QString("ExtraPointPercentage"), ::OpenAPI::toJsonValue(m_extra_point_percentage));
    }
    if (m_extra_point_rushing_attempts_isSet) {
        obj.insert(QString("ExtraPointRushingAttempts"), ::OpenAPI::toJsonValue(m_extra_point_rushing_attempts));
    }
    if (m_extra_point_rushing_conversions_isSet) {
        obj.insert(QString("ExtraPointRushingConversions"), ::OpenAPI::toJsonValue(m_extra_point_rushing_conversions));
    }
    if (m_extra_points_had_blocked_isSet) {
        obj.insert(QString("ExtraPointsHadBlocked"), ::OpenAPI::toJsonValue(m_extra_points_had_blocked));
    }
    if (m_field_goal_attempts_isSet) {
        obj.insert(QString("FieldGoalAttempts"), ::OpenAPI::toJsonValue(m_field_goal_attempts));
    }
    if (m_field_goal_percentage_isSet) {
        obj.insert(QString("FieldGoalPercentage"), ::OpenAPI::toJsonValue(m_field_goal_percentage));
    }
    if (m_field_goal_return_touchdowns_isSet) {
        obj.insert(QString("FieldGoalReturnTouchdowns"), ::OpenAPI::toJsonValue(m_field_goal_return_touchdowns));
    }
    if (m_field_goal_return_yards_isSet) {
        obj.insert(QString("FieldGoalReturnYards"), ::OpenAPI::toJsonValue(m_field_goal_return_yards));
    }
    if (m_field_goals_had_blocked_isSet) {
        obj.insert(QString("FieldGoalsHadBlocked"), ::OpenAPI::toJsonValue(m_field_goals_had_blocked));
    }
    if (m_field_goals_made_isSet) {
        obj.insert(QString("FieldGoalsMade"), ::OpenAPI::toJsonValue(m_field_goals_made));
    }
    if (m_first_downs_isSet) {
        obj.insert(QString("FirstDowns"), ::OpenAPI::toJsonValue(m_first_downs));
    }
    if (m_first_downs_by_passing_isSet) {
        obj.insert(QString("FirstDownsByPassing"), ::OpenAPI::toJsonValue(m_first_downs_by_passing));
    }
    if (m_first_downs_by_penalty_isSet) {
        obj.insert(QString("FirstDownsByPenalty"), ::OpenAPI::toJsonValue(m_first_downs_by_penalty));
    }
    if (m_first_downs_by_rushing_isSet) {
        obj.insert(QString("FirstDownsByRushing"), ::OpenAPI::toJsonValue(m_first_downs_by_rushing));
    }
    if (m_fourth_down_attempts_isSet) {
        obj.insert(QString("FourthDownAttempts"), ::OpenAPI::toJsonValue(m_fourth_down_attempts));
    }
    if (m_fourth_down_conversions_isSet) {
        obj.insert(QString("FourthDownConversions"), ::OpenAPI::toJsonValue(m_fourth_down_conversions));
    }
    if (m_fourth_down_percentage_isSet) {
        obj.insert(QString("FourthDownPercentage"), ::OpenAPI::toJsonValue(m_fourth_down_percentage));
    }
    if (m_fumble_return_touchdowns_isSet) {
        obj.insert(QString("FumbleReturnTouchdowns"), ::OpenAPI::toJsonValue(m_fumble_return_touchdowns));
    }
    if (m_fumble_return_yards_isSet) {
        obj.insert(QString("FumbleReturnYards"), ::OpenAPI::toJsonValue(m_fumble_return_yards));
    }
    if (m_fumbles_isSet) {
        obj.insert(QString("Fumbles"), ::OpenAPI::toJsonValue(m_fumbles));
    }
    if (m_fumbles_forced_isSet) {
        obj.insert(QString("FumblesForced"), ::OpenAPI::toJsonValue(m_fumbles_forced));
    }
    if (m_fumbles_lost_isSet) {
        obj.insert(QString("FumblesLost"), ::OpenAPI::toJsonValue(m_fumbles_lost));
    }
    if (m_fumbles_recovered_isSet) {
        obj.insert(QString("FumblesRecovered"), ::OpenAPI::toJsonValue(m_fumbles_recovered));
    }
    if (m_game_key_isSet) {
        obj.insert(QString("GameKey"), ::OpenAPI::toJsonValue(m_game_key));
    }
    if (m_giveaways_isSet) {
        obj.insert(QString("Giveaways"), ::OpenAPI::toJsonValue(m_giveaways));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_opponent_id_isSet) {
        obj.insert(QString("GlobalOpponentID"), ::OpenAPI::toJsonValue(m_global_opponent_id));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_goal_to_go_attempts_isSet) {
        obj.insert(QString("GoalToGoAttempts"), ::OpenAPI::toJsonValue(m_goal_to_go_attempts));
    }
    if (m_goal_to_go_conversions_isSet) {
        obj.insert(QString("GoalToGoConversions"), ::OpenAPI::toJsonValue(m_goal_to_go_conversions));
    }
    if (m_goal_to_go_percentage_isSet) {
        obj.insert(QString("GoalToGoPercentage"), ::OpenAPI::toJsonValue(m_goal_to_go_percentage));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_humidity_isSet) {
        obj.insert(QString("Humidity"), ::OpenAPI::toJsonValue(m_humidity));
    }
    if (m_interception_return_touchdowns_isSet) {
        obj.insert(QString("InterceptionReturnTouchdowns"), ::OpenAPI::toJsonValue(m_interception_return_touchdowns));
    }
    if (m_interception_return_yards_isSet) {
        obj.insert(QString("InterceptionReturnYards"), ::OpenAPI::toJsonValue(m_interception_return_yards));
    }
    if (m_interception_returns_isSet) {
        obj.insert(QString("InterceptionReturns"), ::OpenAPI::toJsonValue(m_interception_returns));
    }
    if (m_is_game_over_isSet) {
        obj.insert(QString("IsGameOver"), ::OpenAPI::toJsonValue(m_is_game_over));
    }
    if (m_kick_return_average_isSet) {
        obj.insert(QString("KickReturnAverage"), ::OpenAPI::toJsonValue(m_kick_return_average));
    }
    if (m_kick_return_long_isSet) {
        obj.insert(QString("KickReturnLong"), ::OpenAPI::toJsonValue(m_kick_return_long));
    }
    if (m_kick_return_touchdowns_isSet) {
        obj.insert(QString("KickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_kick_return_touchdowns));
    }
    if (m_kick_return_yard_differential_isSet) {
        obj.insert(QString("KickReturnYardDifferential"), ::OpenAPI::toJsonValue(m_kick_return_yard_differential));
    }
    if (m_kick_return_yards_isSet) {
        obj.insert(QString("KickReturnYards"), ::OpenAPI::toJsonValue(m_kick_return_yards));
    }
    if (m_kick_returns_isSet) {
        obj.insert(QString("KickReturns"), ::OpenAPI::toJsonValue(m_kick_returns));
    }
    if (m_kickoff_touchbacks_isSet) {
        obj.insert(QString("KickoffTouchbacks"), ::OpenAPI::toJsonValue(m_kickoff_touchbacks));
    }
    if (m_kickoffs_isSet) {
        obj.insert(QString("Kickoffs"), ::OpenAPI::toJsonValue(m_kickoffs));
    }
    if (m_kickoffs_in_end_zone_isSet) {
        obj.insert(QString("KickoffsInEndZone"), ::OpenAPI::toJsonValue(m_kickoffs_in_end_zone));
    }
    if (m_offensive_plays_isSet) {
        obj.insert(QString("OffensivePlays"), ::OpenAPI::toJsonValue(m_offensive_plays));
    }
    if (m_offensive_yards_isSet) {
        obj.insert(QString("OffensiveYards"), ::OpenAPI::toJsonValue(m_offensive_yards));
    }
    if (m_offensive_yards_per_play_isSet) {
        obj.insert(QString("OffensiveYardsPerPlay"), ::OpenAPI::toJsonValue(m_offensive_yards_per_play));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_assisted_tackles_isSet) {
        obj.insert(QString("OpponentAssistedTackles"), ::OpenAPI::toJsonValue(m_opponent_assisted_tackles));
    }
    if (m_opponent_blocked_kick_return_touchdowns_isSet) {
        obj.insert(QString("OpponentBlockedKickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_blocked_kick_return_touchdowns));
    }
    if (m_opponent_blocked_kick_return_yards_isSet) {
        obj.insert(QString("OpponentBlockedKickReturnYards"), ::OpenAPI::toJsonValue(m_opponent_blocked_kick_return_yards));
    }
    if (m_opponent_blocked_kicks_isSet) {
        obj.insert(QString("OpponentBlockedKicks"), ::OpenAPI::toJsonValue(m_opponent_blocked_kicks));
    }
    if (m_opponent_completion_percentage_isSet) {
        obj.insert(QString("OpponentCompletionPercentage"), ::OpenAPI::toJsonValue(m_opponent_completion_percentage));
    }
    if (m_opponent_extra_point_kicking_attempts_isSet) {
        obj.insert(QString("OpponentExtraPointKickingAttempts"), ::OpenAPI::toJsonValue(m_opponent_extra_point_kicking_attempts));
    }
    if (m_opponent_extra_point_kicking_conversions_isSet) {
        obj.insert(QString("OpponentExtraPointKickingConversions"), ::OpenAPI::toJsonValue(m_opponent_extra_point_kicking_conversions));
    }
    if (m_opponent_extra_point_passing_attempts_isSet) {
        obj.insert(QString("OpponentExtraPointPassingAttempts"), ::OpenAPI::toJsonValue(m_opponent_extra_point_passing_attempts));
    }
    if (m_opponent_extra_point_passing_conversions_isSet) {
        obj.insert(QString("OpponentExtraPointPassingConversions"), ::OpenAPI::toJsonValue(m_opponent_extra_point_passing_conversions));
    }
    if (m_opponent_extra_point_percentage_isSet) {
        obj.insert(QString("OpponentExtraPointPercentage"), ::OpenAPI::toJsonValue(m_opponent_extra_point_percentage));
    }
    if (m_opponent_extra_point_rushing_attempts_isSet) {
        obj.insert(QString("OpponentExtraPointRushingAttempts"), ::OpenAPI::toJsonValue(m_opponent_extra_point_rushing_attempts));
    }
    if (m_opponent_extra_point_rushing_conversions_isSet) {
        obj.insert(QString("OpponentExtraPointRushingConversions"), ::OpenAPI::toJsonValue(m_opponent_extra_point_rushing_conversions));
    }
    if (m_opponent_extra_points_had_blocked_isSet) {
        obj.insert(QString("OpponentExtraPointsHadBlocked"), ::OpenAPI::toJsonValue(m_opponent_extra_points_had_blocked));
    }
    if (m_opponent_field_goal_attempts_isSet) {
        obj.insert(QString("OpponentFieldGoalAttempts"), ::OpenAPI::toJsonValue(m_opponent_field_goal_attempts));
    }
    if (m_opponent_field_goal_percentage_isSet) {
        obj.insert(QString("OpponentFieldGoalPercentage"), ::OpenAPI::toJsonValue(m_opponent_field_goal_percentage));
    }
    if (m_opponent_field_goal_return_touchdowns_isSet) {
        obj.insert(QString("OpponentFieldGoalReturnTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_field_goal_return_touchdowns));
    }
    if (m_opponent_field_goal_return_yards_isSet) {
        obj.insert(QString("OpponentFieldGoalReturnYards"), ::OpenAPI::toJsonValue(m_opponent_field_goal_return_yards));
    }
    if (m_opponent_field_goals_had_blocked_isSet) {
        obj.insert(QString("OpponentFieldGoalsHadBlocked"), ::OpenAPI::toJsonValue(m_opponent_field_goals_had_blocked));
    }
    if (m_opponent_field_goals_made_isSet) {
        obj.insert(QString("OpponentFieldGoalsMade"), ::OpenAPI::toJsonValue(m_opponent_field_goals_made));
    }
    if (m_opponent_first_downs_isSet) {
        obj.insert(QString("OpponentFirstDowns"), ::OpenAPI::toJsonValue(m_opponent_first_downs));
    }
    if (m_opponent_first_downs_by_passing_isSet) {
        obj.insert(QString("OpponentFirstDownsByPassing"), ::OpenAPI::toJsonValue(m_opponent_first_downs_by_passing));
    }
    if (m_opponent_first_downs_by_penalty_isSet) {
        obj.insert(QString("OpponentFirstDownsByPenalty"), ::OpenAPI::toJsonValue(m_opponent_first_downs_by_penalty));
    }
    if (m_opponent_first_downs_by_rushing_isSet) {
        obj.insert(QString("OpponentFirstDownsByRushing"), ::OpenAPI::toJsonValue(m_opponent_first_downs_by_rushing));
    }
    if (m_opponent_fourth_down_attempts_isSet) {
        obj.insert(QString("OpponentFourthDownAttempts"), ::OpenAPI::toJsonValue(m_opponent_fourth_down_attempts));
    }
    if (m_opponent_fourth_down_conversions_isSet) {
        obj.insert(QString("OpponentFourthDownConversions"), ::OpenAPI::toJsonValue(m_opponent_fourth_down_conversions));
    }
    if (m_opponent_fourth_down_percentage_isSet) {
        obj.insert(QString("OpponentFourthDownPercentage"), ::OpenAPI::toJsonValue(m_opponent_fourth_down_percentage));
    }
    if (m_opponent_fumble_return_touchdowns_isSet) {
        obj.insert(QString("OpponentFumbleReturnTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_fumble_return_touchdowns));
    }
    if (m_opponent_fumble_return_yards_isSet) {
        obj.insert(QString("OpponentFumbleReturnYards"), ::OpenAPI::toJsonValue(m_opponent_fumble_return_yards));
    }
    if (m_opponent_fumbles_isSet) {
        obj.insert(QString("OpponentFumbles"), ::OpenAPI::toJsonValue(m_opponent_fumbles));
    }
    if (m_opponent_fumbles_forced_isSet) {
        obj.insert(QString("OpponentFumblesForced"), ::OpenAPI::toJsonValue(m_opponent_fumbles_forced));
    }
    if (m_opponent_fumbles_lost_isSet) {
        obj.insert(QString("OpponentFumblesLost"), ::OpenAPI::toJsonValue(m_opponent_fumbles_lost));
    }
    if (m_opponent_fumbles_recovered_isSet) {
        obj.insert(QString("OpponentFumblesRecovered"), ::OpenAPI::toJsonValue(m_opponent_fumbles_recovered));
    }
    if (m_opponent_giveaways_isSet) {
        obj.insert(QString("OpponentGiveaways"), ::OpenAPI::toJsonValue(m_opponent_giveaways));
    }
    if (m_opponent_goal_to_go_attempts_isSet) {
        obj.insert(QString("OpponentGoalToGoAttempts"), ::OpenAPI::toJsonValue(m_opponent_goal_to_go_attempts));
    }
    if (m_opponent_goal_to_go_conversions_isSet) {
        obj.insert(QString("OpponentGoalToGoConversions"), ::OpenAPI::toJsonValue(m_opponent_goal_to_go_conversions));
    }
    if (m_opponent_goal_to_go_percentage_isSet) {
        obj.insert(QString("OpponentGoalToGoPercentage"), ::OpenAPI::toJsonValue(m_opponent_goal_to_go_percentage));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentID"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_opponent_interception_return_touchdowns_isSet) {
        obj.insert(QString("OpponentInterceptionReturnTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_interception_return_touchdowns));
    }
    if (m_opponent_interception_return_yards_isSet) {
        obj.insert(QString("OpponentInterceptionReturnYards"), ::OpenAPI::toJsonValue(m_opponent_interception_return_yards));
    }
    if (m_opponent_interception_returns_isSet) {
        obj.insert(QString("OpponentInterceptionReturns"), ::OpenAPI::toJsonValue(m_opponent_interception_returns));
    }
    if (m_opponent_kick_return_average_isSet) {
        obj.insert(QString("OpponentKickReturnAverage"), ::OpenAPI::toJsonValue(m_opponent_kick_return_average));
    }
    if (m_opponent_kick_return_long_isSet) {
        obj.insert(QString("OpponentKickReturnLong"), ::OpenAPI::toJsonValue(m_opponent_kick_return_long));
    }
    if (m_opponent_kick_return_touchdowns_isSet) {
        obj.insert(QString("OpponentKickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_kick_return_touchdowns));
    }
    if (m_opponent_kick_return_yards_isSet) {
        obj.insert(QString("OpponentKickReturnYards"), ::OpenAPI::toJsonValue(m_opponent_kick_return_yards));
    }
    if (m_opponent_kick_returns_isSet) {
        obj.insert(QString("OpponentKickReturns"), ::OpenAPI::toJsonValue(m_opponent_kick_returns));
    }
    if (m_opponent_kickoff_touchbacks_isSet) {
        obj.insert(QString("OpponentKickoffTouchbacks"), ::OpenAPI::toJsonValue(m_opponent_kickoff_touchbacks));
    }
    if (m_opponent_kickoffs_isSet) {
        obj.insert(QString("OpponentKickoffs"), ::OpenAPI::toJsonValue(m_opponent_kickoffs));
    }
    if (m_opponent_kickoffs_in_end_zone_isSet) {
        obj.insert(QString("OpponentKickoffsInEndZone"), ::OpenAPI::toJsonValue(m_opponent_kickoffs_in_end_zone));
    }
    if (m_opponent_offensive_plays_isSet) {
        obj.insert(QString("OpponentOffensivePlays"), ::OpenAPI::toJsonValue(m_opponent_offensive_plays));
    }
    if (m_opponent_offensive_yards_isSet) {
        obj.insert(QString("OpponentOffensiveYards"), ::OpenAPI::toJsonValue(m_opponent_offensive_yards));
    }
    if (m_opponent_offensive_yards_per_play_isSet) {
        obj.insert(QString("OpponentOffensiveYardsPerPlay"), ::OpenAPI::toJsonValue(m_opponent_offensive_yards_per_play));
    }
    if (m_opponent_passer_rating_isSet) {
        obj.insert(QString("OpponentPasserRating"), ::OpenAPI::toJsonValue(m_opponent_passer_rating));
    }
    if (m_opponent_passes_defended_isSet) {
        obj.insert(QString("OpponentPassesDefended"), ::OpenAPI::toJsonValue(m_opponent_passes_defended));
    }
    if (m_opponent_passing_attempts_isSet) {
        obj.insert(QString("OpponentPassingAttempts"), ::OpenAPI::toJsonValue(m_opponent_passing_attempts));
    }
    if (m_opponent_passing_completions_isSet) {
        obj.insert(QString("OpponentPassingCompletions"), ::OpenAPI::toJsonValue(m_opponent_passing_completions));
    }
    if (m_opponent_passing_dropbacks_isSet) {
        obj.insert(QString("OpponentPassingDropbacks"), ::OpenAPI::toJsonValue(m_opponent_passing_dropbacks));
    }
    if (m_opponent_passing_interception_percentage_isSet) {
        obj.insert(QString("OpponentPassingInterceptionPercentage"), ::OpenAPI::toJsonValue(m_opponent_passing_interception_percentage));
    }
    if (m_opponent_passing_interceptions_isSet) {
        obj.insert(QString("OpponentPassingInterceptions"), ::OpenAPI::toJsonValue(m_opponent_passing_interceptions));
    }
    if (m_opponent_passing_touchdowns_isSet) {
        obj.insert(QString("OpponentPassingTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_passing_touchdowns));
    }
    if (m_opponent_passing_yards_isSet) {
        obj.insert(QString("OpponentPassingYards"), ::OpenAPI::toJsonValue(m_opponent_passing_yards));
    }
    if (m_opponent_passing_yards_per_attempt_isSet) {
        obj.insert(QString("OpponentPassingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_opponent_passing_yards_per_attempt));
    }
    if (m_opponent_passing_yards_per_completion_isSet) {
        obj.insert(QString("OpponentPassingYardsPerCompletion"), ::OpenAPI::toJsonValue(m_opponent_passing_yards_per_completion));
    }
    if (m_opponent_penalties_isSet) {
        obj.insert(QString("OpponentPenalties"), ::OpenAPI::toJsonValue(m_opponent_penalties));
    }
    if (m_opponent_penalty_yards_isSet) {
        obj.insert(QString("OpponentPenaltyYards"), ::OpenAPI::toJsonValue(m_opponent_penalty_yards));
    }
    if (m_opponent_punt_average_isSet) {
        obj.insert(QString("OpponentPuntAverage"), ::OpenAPI::toJsonValue(m_opponent_punt_average));
    }
    if (m_opponent_punt_net_average_isSet) {
        obj.insert(QString("OpponentPuntNetAverage"), ::OpenAPI::toJsonValue(m_opponent_punt_net_average));
    }
    if (m_opponent_punt_net_yards_isSet) {
        obj.insert(QString("OpponentPuntNetYards"), ::OpenAPI::toJsonValue(m_opponent_punt_net_yards));
    }
    if (m_opponent_punt_return_average_isSet) {
        obj.insert(QString("OpponentPuntReturnAverage"), ::OpenAPI::toJsonValue(m_opponent_punt_return_average));
    }
    if (m_opponent_punt_return_long_isSet) {
        obj.insert(QString("OpponentPuntReturnLong"), ::OpenAPI::toJsonValue(m_opponent_punt_return_long));
    }
    if (m_opponent_punt_return_touchdowns_isSet) {
        obj.insert(QString("OpponentPuntReturnTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_punt_return_touchdowns));
    }
    if (m_opponent_punt_return_yards_isSet) {
        obj.insert(QString("OpponentPuntReturnYards"), ::OpenAPI::toJsonValue(m_opponent_punt_return_yards));
    }
    if (m_opponent_punt_returns_isSet) {
        obj.insert(QString("OpponentPuntReturns"), ::OpenAPI::toJsonValue(m_opponent_punt_returns));
    }
    if (m_opponent_punt_yards_isSet) {
        obj.insert(QString("OpponentPuntYards"), ::OpenAPI::toJsonValue(m_opponent_punt_yards));
    }
    if (m_opponent_punts_isSet) {
        obj.insert(QString("OpponentPunts"), ::OpenAPI::toJsonValue(m_opponent_punts));
    }
    if (m_opponent_punts_had_blocked_isSet) {
        obj.insert(QString("OpponentPuntsHadBlocked"), ::OpenAPI::toJsonValue(m_opponent_punts_had_blocked));
    }
    if (m_opponent_quarterback_hits_isSet) {
        obj.insert(QString("OpponentQuarterbackHits"), ::OpenAPI::toJsonValue(m_opponent_quarterback_hits));
    }
    if (m_opponent_quarterback_hits_differential_isSet) {
        obj.insert(QString("OpponentQuarterbackHitsDifferential"), ::OpenAPI::toJsonValue(m_opponent_quarterback_hits_differential));
    }
    if (m_opponent_quarterback_hits_percentage_isSet) {
        obj.insert(QString("OpponentQuarterbackHitsPercentage"), ::OpenAPI::toJsonValue(m_opponent_quarterback_hits_percentage));
    }
    if (m_opponent_quarterback_sacks_differential_isSet) {
        obj.insert(QString("OpponentQuarterbackSacksDifferential"), ::OpenAPI::toJsonValue(m_opponent_quarterback_sacks_differential));
    }
    if (m_opponent_red_zone_attempts_isSet) {
        obj.insert(QString("OpponentRedZoneAttempts"), ::OpenAPI::toJsonValue(m_opponent_red_zone_attempts));
    }
    if (m_opponent_red_zone_conversions_isSet) {
        obj.insert(QString("OpponentRedZoneConversions"), ::OpenAPI::toJsonValue(m_opponent_red_zone_conversions));
    }
    if (m_opponent_red_zone_percentage_isSet) {
        obj.insert(QString("OpponentRedZonePercentage"), ::OpenAPI::toJsonValue(m_opponent_red_zone_percentage));
    }
    if (m_opponent_return_yards_isSet) {
        obj.insert(QString("OpponentReturnYards"), ::OpenAPI::toJsonValue(m_opponent_return_yards));
    }
    if (m_opponent_rushing_attempts_isSet) {
        obj.insert(QString("OpponentRushingAttempts"), ::OpenAPI::toJsonValue(m_opponent_rushing_attempts));
    }
    if (m_opponent_rushing_touchdowns_isSet) {
        obj.insert(QString("OpponentRushingTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_rushing_touchdowns));
    }
    if (m_opponent_rushing_yards_isSet) {
        obj.insert(QString("OpponentRushingYards"), ::OpenAPI::toJsonValue(m_opponent_rushing_yards));
    }
    if (m_opponent_rushing_yards_per_attempt_isSet) {
        obj.insert(QString("OpponentRushingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_opponent_rushing_yards_per_attempt));
    }
    if (m_opponent_sack_yards_isSet) {
        obj.insert(QString("OpponentSackYards"), ::OpenAPI::toJsonValue(m_opponent_sack_yards));
    }
    if (m_opponent_sacks_isSet) {
        obj.insert(QString("OpponentSacks"), ::OpenAPI::toJsonValue(m_opponent_sacks));
    }
    if (m_opponent_safeties_isSet) {
        obj.insert(QString("OpponentSafeties"), ::OpenAPI::toJsonValue(m_opponent_safeties));
    }
    if (m_opponent_score_isSet) {
        obj.insert(QString("OpponentScore"), ::OpenAPI::toJsonValue(m_opponent_score));
    }
    if (m_opponent_score_overtime_isSet) {
        obj.insert(QString("OpponentScoreOvertime"), ::OpenAPI::toJsonValue(m_opponent_score_overtime));
    }
    if (m_opponent_score_quarter1_isSet) {
        obj.insert(QString("OpponentScoreQuarter1"), ::OpenAPI::toJsonValue(m_opponent_score_quarter1));
    }
    if (m_opponent_score_quarter2_isSet) {
        obj.insert(QString("OpponentScoreQuarter2"), ::OpenAPI::toJsonValue(m_opponent_score_quarter2));
    }
    if (m_opponent_score_quarter3_isSet) {
        obj.insert(QString("OpponentScoreQuarter3"), ::OpenAPI::toJsonValue(m_opponent_score_quarter3));
    }
    if (m_opponent_score_quarter4_isSet) {
        obj.insert(QString("OpponentScoreQuarter4"), ::OpenAPI::toJsonValue(m_opponent_score_quarter4));
    }
    if (m_opponent_solo_tackles_isSet) {
        obj.insert(QString("OpponentSoloTackles"), ::OpenAPI::toJsonValue(m_opponent_solo_tackles));
    }
    if (m_opponent_tackles_for_loss_isSet) {
        obj.insert(QString("OpponentTacklesForLoss"), ::OpenAPI::toJsonValue(m_opponent_tackles_for_loss));
    }
    if (m_opponent_tackles_for_loss_differential_isSet) {
        obj.insert(QString("OpponentTacklesForLossDifferential"), ::OpenAPI::toJsonValue(m_opponent_tackles_for_loss_differential));
    }
    if (m_opponent_tackles_for_loss_percentage_isSet) {
        obj.insert(QString("OpponentTacklesForLossPercentage"), ::OpenAPI::toJsonValue(m_opponent_tackles_for_loss_percentage));
    }
    if (m_opponent_takeaways_isSet) {
        obj.insert(QString("OpponentTakeaways"), ::OpenAPI::toJsonValue(m_opponent_takeaways));
    }
    if (m_opponent_third_down_attempts_isSet) {
        obj.insert(QString("OpponentThirdDownAttempts"), ::OpenAPI::toJsonValue(m_opponent_third_down_attempts));
    }
    if (m_opponent_third_down_conversions_isSet) {
        obj.insert(QString("OpponentThirdDownConversions"), ::OpenAPI::toJsonValue(m_opponent_third_down_conversions));
    }
    if (m_opponent_third_down_percentage_isSet) {
        obj.insert(QString("OpponentThirdDownPercentage"), ::OpenAPI::toJsonValue(m_opponent_third_down_percentage));
    }
    if (m_opponent_time_of_possession_isSet) {
        obj.insert(QString("OpponentTimeOfPossession"), ::OpenAPI::toJsonValue(m_opponent_time_of_possession));
    }
    if (m_opponent_time_of_possession_minutes_isSet) {
        obj.insert(QString("OpponentTimeOfPossessionMinutes"), ::OpenAPI::toJsonValue(m_opponent_time_of_possession_minutes));
    }
    if (m_opponent_time_of_possession_seconds_isSet) {
        obj.insert(QString("OpponentTimeOfPossessionSeconds"), ::OpenAPI::toJsonValue(m_opponent_time_of_possession_seconds));
    }
    if (m_opponent_times_sacked_isSet) {
        obj.insert(QString("OpponentTimesSacked"), ::OpenAPI::toJsonValue(m_opponent_times_sacked));
    }
    if (m_opponent_times_sacked_percentage_isSet) {
        obj.insert(QString("OpponentTimesSackedPercentage"), ::OpenAPI::toJsonValue(m_opponent_times_sacked_percentage));
    }
    if (m_opponent_times_sacked_yards_isSet) {
        obj.insert(QString("OpponentTimesSackedYards"), ::OpenAPI::toJsonValue(m_opponent_times_sacked_yards));
    }
    if (m_opponent_touchdowns_isSet) {
        obj.insert(QString("OpponentTouchdowns"), ::OpenAPI::toJsonValue(m_opponent_touchdowns));
    }
    if (m_opponent_turnover_differential_isSet) {
        obj.insert(QString("OpponentTurnoverDifferential"), ::OpenAPI::toJsonValue(m_opponent_turnover_differential));
    }
    if (m_opponent_two_point_conversion_returns_isSet) {
        obj.insert(QString("OpponentTwoPointConversionReturns"), ::OpenAPI::toJsonValue(m_opponent_two_point_conversion_returns));
    }
    if (m_over_under_isSet) {
        obj.insert(QString("OverUnder"), ::OpenAPI::toJsonValue(m_over_under));
    }
    if (m_passer_rating_isSet) {
        obj.insert(QString("PasserRating"), ::OpenAPI::toJsonValue(m_passer_rating));
    }
    if (m_passes_defended_isSet) {
        obj.insert(QString("PassesDefended"), ::OpenAPI::toJsonValue(m_passes_defended));
    }
    if (m_passing_attempts_isSet) {
        obj.insert(QString("PassingAttempts"), ::OpenAPI::toJsonValue(m_passing_attempts));
    }
    if (m_passing_completions_isSet) {
        obj.insert(QString("PassingCompletions"), ::OpenAPI::toJsonValue(m_passing_completions));
    }
    if (m_passing_dropbacks_isSet) {
        obj.insert(QString("PassingDropbacks"), ::OpenAPI::toJsonValue(m_passing_dropbacks));
    }
    if (m_passing_interception_percentage_isSet) {
        obj.insert(QString("PassingInterceptionPercentage"), ::OpenAPI::toJsonValue(m_passing_interception_percentage));
    }
    if (m_passing_interceptions_isSet) {
        obj.insert(QString("PassingInterceptions"), ::OpenAPI::toJsonValue(m_passing_interceptions));
    }
    if (m_passing_touchdowns_isSet) {
        obj.insert(QString("PassingTouchdowns"), ::OpenAPI::toJsonValue(m_passing_touchdowns));
    }
    if (m_passing_yards_isSet) {
        obj.insert(QString("PassingYards"), ::OpenAPI::toJsonValue(m_passing_yards));
    }
    if (m_passing_yards_per_attempt_isSet) {
        obj.insert(QString("PassingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_passing_yards_per_attempt));
    }
    if (m_passing_yards_per_completion_isSet) {
        obj.insert(QString("PassingYardsPerCompletion"), ::OpenAPI::toJsonValue(m_passing_yards_per_completion));
    }
    if (m_penalties_isSet) {
        obj.insert(QString("Penalties"), ::OpenAPI::toJsonValue(m_penalties));
    }
    if (m_penalty_yard_differential_isSet) {
        obj.insert(QString("PenaltyYardDifferential"), ::OpenAPI::toJsonValue(m_penalty_yard_differential));
    }
    if (m_penalty_yards_isSet) {
        obj.insert(QString("PenaltyYards"), ::OpenAPI::toJsonValue(m_penalty_yards));
    }
    if (m_playing_surface_isSet) {
        obj.insert(QString("PlayingSurface"), ::OpenAPI::toJsonValue(m_playing_surface));
    }
    if (m_point_differential_isSet) {
        obj.insert(QString("PointDifferential"), ::OpenAPI::toJsonValue(m_point_differential));
    }
    if (m_point_spread_isSet) {
        obj.insert(QString("PointSpread"), ::OpenAPI::toJsonValue(m_point_spread));
    }
    if (m_punt_average_isSet) {
        obj.insert(QString("PuntAverage"), ::OpenAPI::toJsonValue(m_punt_average));
    }
    if (m_punt_net_average_isSet) {
        obj.insert(QString("PuntNetAverage"), ::OpenAPI::toJsonValue(m_punt_net_average));
    }
    if (m_punt_net_yards_isSet) {
        obj.insert(QString("PuntNetYards"), ::OpenAPI::toJsonValue(m_punt_net_yards));
    }
    if (m_punt_return_average_isSet) {
        obj.insert(QString("PuntReturnAverage"), ::OpenAPI::toJsonValue(m_punt_return_average));
    }
    if (m_punt_return_long_isSet) {
        obj.insert(QString("PuntReturnLong"), ::OpenAPI::toJsonValue(m_punt_return_long));
    }
    if (m_punt_return_touchdowns_isSet) {
        obj.insert(QString("PuntReturnTouchdowns"), ::OpenAPI::toJsonValue(m_punt_return_touchdowns));
    }
    if (m_punt_return_yard_differential_isSet) {
        obj.insert(QString("PuntReturnYardDifferential"), ::OpenAPI::toJsonValue(m_punt_return_yard_differential));
    }
    if (m_punt_return_yards_isSet) {
        obj.insert(QString("PuntReturnYards"), ::OpenAPI::toJsonValue(m_punt_return_yards));
    }
    if (m_punt_returns_isSet) {
        obj.insert(QString("PuntReturns"), ::OpenAPI::toJsonValue(m_punt_returns));
    }
    if (m_punt_yards_isSet) {
        obj.insert(QString("PuntYards"), ::OpenAPI::toJsonValue(m_punt_yards));
    }
    if (m_punts_isSet) {
        obj.insert(QString("Punts"), ::OpenAPI::toJsonValue(m_punts));
    }
    if (m_punts_had_blocked_isSet) {
        obj.insert(QString("PuntsHadBlocked"), ::OpenAPI::toJsonValue(m_punts_had_blocked));
    }
    if (m_quarterback_hits_isSet) {
        obj.insert(QString("QuarterbackHits"), ::OpenAPI::toJsonValue(m_quarterback_hits));
    }
    if (m_quarterback_hits_differential_isSet) {
        obj.insert(QString("QuarterbackHitsDifferential"), ::OpenAPI::toJsonValue(m_quarterback_hits_differential));
    }
    if (m_quarterback_hits_percentage_isSet) {
        obj.insert(QString("QuarterbackHitsPercentage"), ::OpenAPI::toJsonValue(m_quarterback_hits_percentage));
    }
    if (m_quarterback_sacks_differential_isSet) {
        obj.insert(QString("QuarterbackSacksDifferential"), ::OpenAPI::toJsonValue(m_quarterback_sacks_differential));
    }
    if (m_red_zone_attempts_isSet) {
        obj.insert(QString("RedZoneAttempts"), ::OpenAPI::toJsonValue(m_red_zone_attempts));
    }
    if (m_red_zone_conversions_isSet) {
        obj.insert(QString("RedZoneConversions"), ::OpenAPI::toJsonValue(m_red_zone_conversions));
    }
    if (m_red_zone_percentage_isSet) {
        obj.insert(QString("RedZonePercentage"), ::OpenAPI::toJsonValue(m_red_zone_percentage));
    }
    if (m_return_yards_isSet) {
        obj.insert(QString("ReturnYards"), ::OpenAPI::toJsonValue(m_return_yards));
    }
    if (m_rushing_attempts_isSet) {
        obj.insert(QString("RushingAttempts"), ::OpenAPI::toJsonValue(m_rushing_attempts));
    }
    if (m_rushing_touchdowns_isSet) {
        obj.insert(QString("RushingTouchdowns"), ::OpenAPI::toJsonValue(m_rushing_touchdowns));
    }
    if (m_rushing_yards_isSet) {
        obj.insert(QString("RushingYards"), ::OpenAPI::toJsonValue(m_rushing_yards));
    }
    if (m_rushing_yards_per_attempt_isSet) {
        obj.insert(QString("RushingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_rushing_yards_per_attempt));
    }
    if (m_sack_yards_isSet) {
        obj.insert(QString("SackYards"), ::OpenAPI::toJsonValue(m_sack_yards));
    }
    if (m_sacks_isSet) {
        obj.insert(QString("Sacks"), ::OpenAPI::toJsonValue(m_sacks));
    }
    if (m_safeties_isSet) {
        obj.insert(QString("Safeties"), ::OpenAPI::toJsonValue(m_safeties));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_score_id_isSet) {
        obj.insert(QString("ScoreID"), ::OpenAPI::toJsonValue(m_score_id));
    }
    if (m_score_overtime_isSet) {
        obj.insert(QString("ScoreOvertime"), ::OpenAPI::toJsonValue(m_score_overtime));
    }
    if (m_score_quarter1_isSet) {
        obj.insert(QString("ScoreQuarter1"), ::OpenAPI::toJsonValue(m_score_quarter1));
    }
    if (m_score_quarter2_isSet) {
        obj.insert(QString("ScoreQuarter2"), ::OpenAPI::toJsonValue(m_score_quarter2));
    }
    if (m_score_quarter3_isSet) {
        obj.insert(QString("ScoreQuarter3"), ::OpenAPI::toJsonValue(m_score_quarter3));
    }
    if (m_score_quarter4_isSet) {
        obj.insert(QString("ScoreQuarter4"), ::OpenAPI::toJsonValue(m_score_quarter4));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_solo_tackles_isSet) {
        obj.insert(QString("SoloTackles"), ::OpenAPI::toJsonValue(m_solo_tackles));
    }
    if (m_stadium_isSet) {
        obj.insert(QString("Stadium"), ::OpenAPI::toJsonValue(m_stadium));
    }
    if (m_tackles_for_loss_isSet) {
        obj.insert(QString("TacklesForLoss"), ::OpenAPI::toJsonValue(m_tackles_for_loss));
    }
    if (m_tackles_for_loss_differential_isSet) {
        obj.insert(QString("TacklesForLossDifferential"), ::OpenAPI::toJsonValue(m_tackles_for_loss_differential));
    }
    if (m_tackles_for_loss_percentage_isSet) {
        obj.insert(QString("TacklesForLossPercentage"), ::OpenAPI::toJsonValue(m_tackles_for_loss_percentage));
    }
    if (m_takeaways_isSet) {
        obj.insert(QString("Takeaways"), ::OpenAPI::toJsonValue(m_takeaways));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_game_id_isSet) {
        obj.insert(QString("TeamGameID"), ::OpenAPI::toJsonValue(m_team_game_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_team_name_isSet) {
        obj.insert(QString("TeamName"), ::OpenAPI::toJsonValue(m_team_name));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("Temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_third_down_attempts_isSet) {
        obj.insert(QString("ThirdDownAttempts"), ::OpenAPI::toJsonValue(m_third_down_attempts));
    }
    if (m_third_down_conversions_isSet) {
        obj.insert(QString("ThirdDownConversions"), ::OpenAPI::toJsonValue(m_third_down_conversions));
    }
    if (m_third_down_percentage_isSet) {
        obj.insert(QString("ThirdDownPercentage"), ::OpenAPI::toJsonValue(m_third_down_percentage));
    }
    if (m_time_of_possession_isSet) {
        obj.insert(QString("TimeOfPossession"), ::OpenAPI::toJsonValue(m_time_of_possession));
    }
    if (m_time_of_possession_minutes_isSet) {
        obj.insert(QString("TimeOfPossessionMinutes"), ::OpenAPI::toJsonValue(m_time_of_possession_minutes));
    }
    if (m_time_of_possession_seconds_isSet) {
        obj.insert(QString("TimeOfPossessionSeconds"), ::OpenAPI::toJsonValue(m_time_of_possession_seconds));
    }
    if (m_times_sacked_isSet) {
        obj.insert(QString("TimesSacked"), ::OpenAPI::toJsonValue(m_times_sacked));
    }
    if (m_times_sacked_percentage_isSet) {
        obj.insert(QString("TimesSackedPercentage"), ::OpenAPI::toJsonValue(m_times_sacked_percentage));
    }
    if (m_times_sacked_yards_isSet) {
        obj.insert(QString("TimesSackedYards"), ::OpenAPI::toJsonValue(m_times_sacked_yards));
    }
    if (m_total_score_isSet) {
        obj.insert(QString("TotalScore"), ::OpenAPI::toJsonValue(m_total_score));
    }
    if (m_touchdowns_isSet) {
        obj.insert(QString("Touchdowns"), ::OpenAPI::toJsonValue(m_touchdowns));
    }
    if (m_turnover_differential_isSet) {
        obj.insert(QString("TurnoverDifferential"), ::OpenAPI::toJsonValue(m_turnover_differential));
    }
    if (m_two_point_conversion_returns_isSet) {
        obj.insert(QString("TwoPointConversionReturns"), ::OpenAPI::toJsonValue(m_two_point_conversion_returns));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_wind_speed_isSet) {
        obj.insert(QString("WindSpeed"), ::OpenAPI::toJsonValue(m_wind_speed));
    }
    return obj;
}

qint32 OAITeamGame::getAssistedTackles() const {
    return m_assisted_tackles;
}
void OAITeamGame::setAssistedTackles(const qint32 &assisted_tackles) {
    m_assisted_tackles = assisted_tackles;
    m_assisted_tackles_isSet = true;
}

bool OAITeamGame::is_assisted_tackles_Set() const{
    return m_assisted_tackles_isSet;
}

bool OAITeamGame::is_assisted_tackles_Valid() const{
    return m_assisted_tackles_isValid;
}

qint32 OAITeamGame::getBlockedKickReturnTouchdowns() const {
    return m_blocked_kick_return_touchdowns;
}
void OAITeamGame::setBlockedKickReturnTouchdowns(const qint32 &blocked_kick_return_touchdowns) {
    m_blocked_kick_return_touchdowns = blocked_kick_return_touchdowns;
    m_blocked_kick_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_blocked_kick_return_touchdowns_Set() const{
    return m_blocked_kick_return_touchdowns_isSet;
}

bool OAITeamGame::is_blocked_kick_return_touchdowns_Valid() const{
    return m_blocked_kick_return_touchdowns_isValid;
}

qint32 OAITeamGame::getBlockedKickReturnYards() const {
    return m_blocked_kick_return_yards;
}
void OAITeamGame::setBlockedKickReturnYards(const qint32 &blocked_kick_return_yards) {
    m_blocked_kick_return_yards = blocked_kick_return_yards;
    m_blocked_kick_return_yards_isSet = true;
}

bool OAITeamGame::is_blocked_kick_return_yards_Set() const{
    return m_blocked_kick_return_yards_isSet;
}

bool OAITeamGame::is_blocked_kick_return_yards_Valid() const{
    return m_blocked_kick_return_yards_isValid;
}

qint32 OAITeamGame::getBlockedKicks() const {
    return m_blocked_kicks;
}
void OAITeamGame::setBlockedKicks(const qint32 &blocked_kicks) {
    m_blocked_kicks = blocked_kicks;
    m_blocked_kicks_isSet = true;
}

bool OAITeamGame::is_blocked_kicks_Set() const{
    return m_blocked_kicks_isSet;
}

bool OAITeamGame::is_blocked_kicks_Valid() const{
    return m_blocked_kicks_isValid;
}

double OAITeamGame::getCompletionPercentage() const {
    return m_completion_percentage;
}
void OAITeamGame::setCompletionPercentage(const double &completion_percentage) {
    m_completion_percentage = completion_percentage;
    m_completion_percentage_isSet = true;
}

bool OAITeamGame::is_completion_percentage_Set() const{
    return m_completion_percentage_isSet;
}

bool OAITeamGame::is_completion_percentage_Valid() const{
    return m_completion_percentage_isValid;
}

QString OAITeamGame::getDate() const {
    return m_date;
}
void OAITeamGame::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITeamGame::is_date_Set() const{
    return m_date_isSet;
}

bool OAITeamGame::is_date_Valid() const{
    return m_date_isValid;
}

QString OAITeamGame::getDateTime() const {
    return m_date_time;
}
void OAITeamGame::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAITeamGame::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAITeamGame::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAITeamGame::getDay() const {
    return m_day;
}
void OAITeamGame::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAITeamGame::is_day_Set() const{
    return m_day_isSet;
}

bool OAITeamGame::is_day_Valid() const{
    return m_day_isValid;
}

QString OAITeamGame::getDayOfWeek() const {
    return m_day_of_week;
}
void OAITeamGame::setDayOfWeek(const QString &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAITeamGame::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAITeamGame::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint32 OAITeamGame::getExtraPointKickingAttempts() const {
    return m_extra_point_kicking_attempts;
}
void OAITeamGame::setExtraPointKickingAttempts(const qint32 &extra_point_kicking_attempts) {
    m_extra_point_kicking_attempts = extra_point_kicking_attempts;
    m_extra_point_kicking_attempts_isSet = true;
}

bool OAITeamGame::is_extra_point_kicking_attempts_Set() const{
    return m_extra_point_kicking_attempts_isSet;
}

bool OAITeamGame::is_extra_point_kicking_attempts_Valid() const{
    return m_extra_point_kicking_attempts_isValid;
}

qint32 OAITeamGame::getExtraPointKickingConversions() const {
    return m_extra_point_kicking_conversions;
}
void OAITeamGame::setExtraPointKickingConversions(const qint32 &extra_point_kicking_conversions) {
    m_extra_point_kicking_conversions = extra_point_kicking_conversions;
    m_extra_point_kicking_conversions_isSet = true;
}

bool OAITeamGame::is_extra_point_kicking_conversions_Set() const{
    return m_extra_point_kicking_conversions_isSet;
}

bool OAITeamGame::is_extra_point_kicking_conversions_Valid() const{
    return m_extra_point_kicking_conversions_isValid;
}

qint32 OAITeamGame::getExtraPointPassingAttempts() const {
    return m_extra_point_passing_attempts;
}
void OAITeamGame::setExtraPointPassingAttempts(const qint32 &extra_point_passing_attempts) {
    m_extra_point_passing_attempts = extra_point_passing_attempts;
    m_extra_point_passing_attempts_isSet = true;
}

bool OAITeamGame::is_extra_point_passing_attempts_Set() const{
    return m_extra_point_passing_attempts_isSet;
}

bool OAITeamGame::is_extra_point_passing_attempts_Valid() const{
    return m_extra_point_passing_attempts_isValid;
}

qint32 OAITeamGame::getExtraPointPassingConversions() const {
    return m_extra_point_passing_conversions;
}
void OAITeamGame::setExtraPointPassingConversions(const qint32 &extra_point_passing_conversions) {
    m_extra_point_passing_conversions = extra_point_passing_conversions;
    m_extra_point_passing_conversions_isSet = true;
}

bool OAITeamGame::is_extra_point_passing_conversions_Set() const{
    return m_extra_point_passing_conversions_isSet;
}

bool OAITeamGame::is_extra_point_passing_conversions_Valid() const{
    return m_extra_point_passing_conversions_isValid;
}

double OAITeamGame::getExtraPointPercentage() const {
    return m_extra_point_percentage;
}
void OAITeamGame::setExtraPointPercentage(const double &extra_point_percentage) {
    m_extra_point_percentage = extra_point_percentage;
    m_extra_point_percentage_isSet = true;
}

bool OAITeamGame::is_extra_point_percentage_Set() const{
    return m_extra_point_percentage_isSet;
}

bool OAITeamGame::is_extra_point_percentage_Valid() const{
    return m_extra_point_percentage_isValid;
}

qint32 OAITeamGame::getExtraPointRushingAttempts() const {
    return m_extra_point_rushing_attempts;
}
void OAITeamGame::setExtraPointRushingAttempts(const qint32 &extra_point_rushing_attempts) {
    m_extra_point_rushing_attempts = extra_point_rushing_attempts;
    m_extra_point_rushing_attempts_isSet = true;
}

bool OAITeamGame::is_extra_point_rushing_attempts_Set() const{
    return m_extra_point_rushing_attempts_isSet;
}

bool OAITeamGame::is_extra_point_rushing_attempts_Valid() const{
    return m_extra_point_rushing_attempts_isValid;
}

qint32 OAITeamGame::getExtraPointRushingConversions() const {
    return m_extra_point_rushing_conversions;
}
void OAITeamGame::setExtraPointRushingConversions(const qint32 &extra_point_rushing_conversions) {
    m_extra_point_rushing_conversions = extra_point_rushing_conversions;
    m_extra_point_rushing_conversions_isSet = true;
}

bool OAITeamGame::is_extra_point_rushing_conversions_Set() const{
    return m_extra_point_rushing_conversions_isSet;
}

bool OAITeamGame::is_extra_point_rushing_conversions_Valid() const{
    return m_extra_point_rushing_conversions_isValid;
}

qint32 OAITeamGame::getExtraPointsHadBlocked() const {
    return m_extra_points_had_blocked;
}
void OAITeamGame::setExtraPointsHadBlocked(const qint32 &extra_points_had_blocked) {
    m_extra_points_had_blocked = extra_points_had_blocked;
    m_extra_points_had_blocked_isSet = true;
}

bool OAITeamGame::is_extra_points_had_blocked_Set() const{
    return m_extra_points_had_blocked_isSet;
}

bool OAITeamGame::is_extra_points_had_blocked_Valid() const{
    return m_extra_points_had_blocked_isValid;
}

qint32 OAITeamGame::getFieldGoalAttempts() const {
    return m_field_goal_attempts;
}
void OAITeamGame::setFieldGoalAttempts(const qint32 &field_goal_attempts) {
    m_field_goal_attempts = field_goal_attempts;
    m_field_goal_attempts_isSet = true;
}

bool OAITeamGame::is_field_goal_attempts_Set() const{
    return m_field_goal_attempts_isSet;
}

bool OAITeamGame::is_field_goal_attempts_Valid() const{
    return m_field_goal_attempts_isValid;
}

double OAITeamGame::getFieldGoalPercentage() const {
    return m_field_goal_percentage;
}
void OAITeamGame::setFieldGoalPercentage(const double &field_goal_percentage) {
    m_field_goal_percentage = field_goal_percentage;
    m_field_goal_percentage_isSet = true;
}

bool OAITeamGame::is_field_goal_percentage_Set() const{
    return m_field_goal_percentage_isSet;
}

bool OAITeamGame::is_field_goal_percentage_Valid() const{
    return m_field_goal_percentage_isValid;
}

qint32 OAITeamGame::getFieldGoalReturnTouchdowns() const {
    return m_field_goal_return_touchdowns;
}
void OAITeamGame::setFieldGoalReturnTouchdowns(const qint32 &field_goal_return_touchdowns) {
    m_field_goal_return_touchdowns = field_goal_return_touchdowns;
    m_field_goal_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_field_goal_return_touchdowns_Set() const{
    return m_field_goal_return_touchdowns_isSet;
}

bool OAITeamGame::is_field_goal_return_touchdowns_Valid() const{
    return m_field_goal_return_touchdowns_isValid;
}

qint32 OAITeamGame::getFieldGoalReturnYards() const {
    return m_field_goal_return_yards;
}
void OAITeamGame::setFieldGoalReturnYards(const qint32 &field_goal_return_yards) {
    m_field_goal_return_yards = field_goal_return_yards;
    m_field_goal_return_yards_isSet = true;
}

bool OAITeamGame::is_field_goal_return_yards_Set() const{
    return m_field_goal_return_yards_isSet;
}

bool OAITeamGame::is_field_goal_return_yards_Valid() const{
    return m_field_goal_return_yards_isValid;
}

qint32 OAITeamGame::getFieldGoalsHadBlocked() const {
    return m_field_goals_had_blocked;
}
void OAITeamGame::setFieldGoalsHadBlocked(const qint32 &field_goals_had_blocked) {
    m_field_goals_had_blocked = field_goals_had_blocked;
    m_field_goals_had_blocked_isSet = true;
}

bool OAITeamGame::is_field_goals_had_blocked_Set() const{
    return m_field_goals_had_blocked_isSet;
}

bool OAITeamGame::is_field_goals_had_blocked_Valid() const{
    return m_field_goals_had_blocked_isValid;
}

qint32 OAITeamGame::getFieldGoalsMade() const {
    return m_field_goals_made;
}
void OAITeamGame::setFieldGoalsMade(const qint32 &field_goals_made) {
    m_field_goals_made = field_goals_made;
    m_field_goals_made_isSet = true;
}

bool OAITeamGame::is_field_goals_made_Set() const{
    return m_field_goals_made_isSet;
}

bool OAITeamGame::is_field_goals_made_Valid() const{
    return m_field_goals_made_isValid;
}

qint32 OAITeamGame::getFirstDowns() const {
    return m_first_downs;
}
void OAITeamGame::setFirstDowns(const qint32 &first_downs) {
    m_first_downs = first_downs;
    m_first_downs_isSet = true;
}

bool OAITeamGame::is_first_downs_Set() const{
    return m_first_downs_isSet;
}

bool OAITeamGame::is_first_downs_Valid() const{
    return m_first_downs_isValid;
}

qint32 OAITeamGame::getFirstDownsByPassing() const {
    return m_first_downs_by_passing;
}
void OAITeamGame::setFirstDownsByPassing(const qint32 &first_downs_by_passing) {
    m_first_downs_by_passing = first_downs_by_passing;
    m_first_downs_by_passing_isSet = true;
}

bool OAITeamGame::is_first_downs_by_passing_Set() const{
    return m_first_downs_by_passing_isSet;
}

bool OAITeamGame::is_first_downs_by_passing_Valid() const{
    return m_first_downs_by_passing_isValid;
}

qint32 OAITeamGame::getFirstDownsByPenalty() const {
    return m_first_downs_by_penalty;
}
void OAITeamGame::setFirstDownsByPenalty(const qint32 &first_downs_by_penalty) {
    m_first_downs_by_penalty = first_downs_by_penalty;
    m_first_downs_by_penalty_isSet = true;
}

bool OAITeamGame::is_first_downs_by_penalty_Set() const{
    return m_first_downs_by_penalty_isSet;
}

bool OAITeamGame::is_first_downs_by_penalty_Valid() const{
    return m_first_downs_by_penalty_isValid;
}

qint32 OAITeamGame::getFirstDownsByRushing() const {
    return m_first_downs_by_rushing;
}
void OAITeamGame::setFirstDownsByRushing(const qint32 &first_downs_by_rushing) {
    m_first_downs_by_rushing = first_downs_by_rushing;
    m_first_downs_by_rushing_isSet = true;
}

bool OAITeamGame::is_first_downs_by_rushing_Set() const{
    return m_first_downs_by_rushing_isSet;
}

bool OAITeamGame::is_first_downs_by_rushing_Valid() const{
    return m_first_downs_by_rushing_isValid;
}

qint32 OAITeamGame::getFourthDownAttempts() const {
    return m_fourth_down_attempts;
}
void OAITeamGame::setFourthDownAttempts(const qint32 &fourth_down_attempts) {
    m_fourth_down_attempts = fourth_down_attempts;
    m_fourth_down_attempts_isSet = true;
}

bool OAITeamGame::is_fourth_down_attempts_Set() const{
    return m_fourth_down_attempts_isSet;
}

bool OAITeamGame::is_fourth_down_attempts_Valid() const{
    return m_fourth_down_attempts_isValid;
}

qint32 OAITeamGame::getFourthDownConversions() const {
    return m_fourth_down_conversions;
}
void OAITeamGame::setFourthDownConversions(const qint32 &fourth_down_conversions) {
    m_fourth_down_conversions = fourth_down_conversions;
    m_fourth_down_conversions_isSet = true;
}

bool OAITeamGame::is_fourth_down_conversions_Set() const{
    return m_fourth_down_conversions_isSet;
}

bool OAITeamGame::is_fourth_down_conversions_Valid() const{
    return m_fourth_down_conversions_isValid;
}

double OAITeamGame::getFourthDownPercentage() const {
    return m_fourth_down_percentage;
}
void OAITeamGame::setFourthDownPercentage(const double &fourth_down_percentage) {
    m_fourth_down_percentage = fourth_down_percentage;
    m_fourth_down_percentage_isSet = true;
}

bool OAITeamGame::is_fourth_down_percentage_Set() const{
    return m_fourth_down_percentage_isSet;
}

bool OAITeamGame::is_fourth_down_percentage_Valid() const{
    return m_fourth_down_percentage_isValid;
}

qint32 OAITeamGame::getFumbleReturnTouchdowns() const {
    return m_fumble_return_touchdowns;
}
void OAITeamGame::setFumbleReturnTouchdowns(const qint32 &fumble_return_touchdowns) {
    m_fumble_return_touchdowns = fumble_return_touchdowns;
    m_fumble_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_fumble_return_touchdowns_Set() const{
    return m_fumble_return_touchdowns_isSet;
}

bool OAITeamGame::is_fumble_return_touchdowns_Valid() const{
    return m_fumble_return_touchdowns_isValid;
}

qint32 OAITeamGame::getFumbleReturnYards() const {
    return m_fumble_return_yards;
}
void OAITeamGame::setFumbleReturnYards(const qint32 &fumble_return_yards) {
    m_fumble_return_yards = fumble_return_yards;
    m_fumble_return_yards_isSet = true;
}

bool OAITeamGame::is_fumble_return_yards_Set() const{
    return m_fumble_return_yards_isSet;
}

bool OAITeamGame::is_fumble_return_yards_Valid() const{
    return m_fumble_return_yards_isValid;
}

qint32 OAITeamGame::getFumbles() const {
    return m_fumbles;
}
void OAITeamGame::setFumbles(const qint32 &fumbles) {
    m_fumbles = fumbles;
    m_fumbles_isSet = true;
}

bool OAITeamGame::is_fumbles_Set() const{
    return m_fumbles_isSet;
}

bool OAITeamGame::is_fumbles_Valid() const{
    return m_fumbles_isValid;
}

qint32 OAITeamGame::getFumblesForced() const {
    return m_fumbles_forced;
}
void OAITeamGame::setFumblesForced(const qint32 &fumbles_forced) {
    m_fumbles_forced = fumbles_forced;
    m_fumbles_forced_isSet = true;
}

bool OAITeamGame::is_fumbles_forced_Set() const{
    return m_fumbles_forced_isSet;
}

bool OAITeamGame::is_fumbles_forced_Valid() const{
    return m_fumbles_forced_isValid;
}

qint32 OAITeamGame::getFumblesLost() const {
    return m_fumbles_lost;
}
void OAITeamGame::setFumblesLost(const qint32 &fumbles_lost) {
    m_fumbles_lost = fumbles_lost;
    m_fumbles_lost_isSet = true;
}

bool OAITeamGame::is_fumbles_lost_Set() const{
    return m_fumbles_lost_isSet;
}

bool OAITeamGame::is_fumbles_lost_Valid() const{
    return m_fumbles_lost_isValid;
}

qint32 OAITeamGame::getFumblesRecovered() const {
    return m_fumbles_recovered;
}
void OAITeamGame::setFumblesRecovered(const qint32 &fumbles_recovered) {
    m_fumbles_recovered = fumbles_recovered;
    m_fumbles_recovered_isSet = true;
}

bool OAITeamGame::is_fumbles_recovered_Set() const{
    return m_fumbles_recovered_isSet;
}

bool OAITeamGame::is_fumbles_recovered_Valid() const{
    return m_fumbles_recovered_isValid;
}

QString OAITeamGame::getGameKey() const {
    return m_game_key;
}
void OAITeamGame::setGameKey(const QString &game_key) {
    m_game_key = game_key;
    m_game_key_isSet = true;
}

bool OAITeamGame::is_game_key_Set() const{
    return m_game_key_isSet;
}

bool OAITeamGame::is_game_key_Valid() const{
    return m_game_key_isValid;
}

qint32 OAITeamGame::getGiveaways() const {
    return m_giveaways;
}
void OAITeamGame::setGiveaways(const qint32 &giveaways) {
    m_giveaways = giveaways;
    m_giveaways_isSet = true;
}

bool OAITeamGame::is_giveaways_Set() const{
    return m_giveaways_isSet;
}

bool OAITeamGame::is_giveaways_Valid() const{
    return m_giveaways_isValid;
}

qint32 OAITeamGame::getGlobalGameId() const {
    return m_global_game_id;
}
void OAITeamGame::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAITeamGame::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAITeamGame::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAITeamGame::getGlobalOpponentId() const {
    return m_global_opponent_id;
}
void OAITeamGame::setGlobalOpponentId(const qint32 &global_opponent_id) {
    m_global_opponent_id = global_opponent_id;
    m_global_opponent_id_isSet = true;
}

bool OAITeamGame::is_global_opponent_id_Set() const{
    return m_global_opponent_id_isSet;
}

bool OAITeamGame::is_global_opponent_id_Valid() const{
    return m_global_opponent_id_isValid;
}

qint32 OAITeamGame::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAITeamGame::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAITeamGame::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAITeamGame::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

qint32 OAITeamGame::getGoalToGoAttempts() const {
    return m_goal_to_go_attempts;
}
void OAITeamGame::setGoalToGoAttempts(const qint32 &goal_to_go_attempts) {
    m_goal_to_go_attempts = goal_to_go_attempts;
    m_goal_to_go_attempts_isSet = true;
}

bool OAITeamGame::is_goal_to_go_attempts_Set() const{
    return m_goal_to_go_attempts_isSet;
}

bool OAITeamGame::is_goal_to_go_attempts_Valid() const{
    return m_goal_to_go_attempts_isValid;
}

qint32 OAITeamGame::getGoalToGoConversions() const {
    return m_goal_to_go_conversions;
}
void OAITeamGame::setGoalToGoConversions(const qint32 &goal_to_go_conversions) {
    m_goal_to_go_conversions = goal_to_go_conversions;
    m_goal_to_go_conversions_isSet = true;
}

bool OAITeamGame::is_goal_to_go_conversions_Set() const{
    return m_goal_to_go_conversions_isSet;
}

bool OAITeamGame::is_goal_to_go_conversions_Valid() const{
    return m_goal_to_go_conversions_isValid;
}

double OAITeamGame::getGoalToGoPercentage() const {
    return m_goal_to_go_percentage;
}
void OAITeamGame::setGoalToGoPercentage(const double &goal_to_go_percentage) {
    m_goal_to_go_percentage = goal_to_go_percentage;
    m_goal_to_go_percentage_isSet = true;
}

bool OAITeamGame::is_goal_to_go_percentage_Set() const{
    return m_goal_to_go_percentage_isSet;
}

bool OAITeamGame::is_goal_to_go_percentage_Valid() const{
    return m_goal_to_go_percentage_isValid;
}

QString OAITeamGame::getHomeOrAway() const {
    return m_home_or_away;
}
void OAITeamGame::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAITeamGame::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAITeamGame::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

qint32 OAITeamGame::getHumidity() const {
    return m_humidity;
}
void OAITeamGame::setHumidity(const qint32 &humidity) {
    m_humidity = humidity;
    m_humidity_isSet = true;
}

bool OAITeamGame::is_humidity_Set() const{
    return m_humidity_isSet;
}

bool OAITeamGame::is_humidity_Valid() const{
    return m_humidity_isValid;
}

qint32 OAITeamGame::getInterceptionReturnTouchdowns() const {
    return m_interception_return_touchdowns;
}
void OAITeamGame::setInterceptionReturnTouchdowns(const qint32 &interception_return_touchdowns) {
    m_interception_return_touchdowns = interception_return_touchdowns;
    m_interception_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_interception_return_touchdowns_Set() const{
    return m_interception_return_touchdowns_isSet;
}

bool OAITeamGame::is_interception_return_touchdowns_Valid() const{
    return m_interception_return_touchdowns_isValid;
}

qint32 OAITeamGame::getInterceptionReturnYards() const {
    return m_interception_return_yards;
}
void OAITeamGame::setInterceptionReturnYards(const qint32 &interception_return_yards) {
    m_interception_return_yards = interception_return_yards;
    m_interception_return_yards_isSet = true;
}

bool OAITeamGame::is_interception_return_yards_Set() const{
    return m_interception_return_yards_isSet;
}

bool OAITeamGame::is_interception_return_yards_Valid() const{
    return m_interception_return_yards_isValid;
}

qint32 OAITeamGame::getInterceptionReturns() const {
    return m_interception_returns;
}
void OAITeamGame::setInterceptionReturns(const qint32 &interception_returns) {
    m_interception_returns = interception_returns;
    m_interception_returns_isSet = true;
}

bool OAITeamGame::is_interception_returns_Set() const{
    return m_interception_returns_isSet;
}

bool OAITeamGame::is_interception_returns_Valid() const{
    return m_interception_returns_isValid;
}

bool OAITeamGame::isIsGameOver() const {
    return m_is_game_over;
}
void OAITeamGame::setIsGameOver(const bool &is_game_over) {
    m_is_game_over = is_game_over;
    m_is_game_over_isSet = true;
}

bool OAITeamGame::is_is_game_over_Set() const{
    return m_is_game_over_isSet;
}

bool OAITeamGame::is_is_game_over_Valid() const{
    return m_is_game_over_isValid;
}

double OAITeamGame::getKickReturnAverage() const {
    return m_kick_return_average;
}
void OAITeamGame::setKickReturnAverage(const double &kick_return_average) {
    m_kick_return_average = kick_return_average;
    m_kick_return_average_isSet = true;
}

bool OAITeamGame::is_kick_return_average_Set() const{
    return m_kick_return_average_isSet;
}

bool OAITeamGame::is_kick_return_average_Valid() const{
    return m_kick_return_average_isValid;
}

qint32 OAITeamGame::getKickReturnLong() const {
    return m_kick_return_long;
}
void OAITeamGame::setKickReturnLong(const qint32 &kick_return_long) {
    m_kick_return_long = kick_return_long;
    m_kick_return_long_isSet = true;
}

bool OAITeamGame::is_kick_return_long_Set() const{
    return m_kick_return_long_isSet;
}

bool OAITeamGame::is_kick_return_long_Valid() const{
    return m_kick_return_long_isValid;
}

qint32 OAITeamGame::getKickReturnTouchdowns() const {
    return m_kick_return_touchdowns;
}
void OAITeamGame::setKickReturnTouchdowns(const qint32 &kick_return_touchdowns) {
    m_kick_return_touchdowns = kick_return_touchdowns;
    m_kick_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_kick_return_touchdowns_Set() const{
    return m_kick_return_touchdowns_isSet;
}

bool OAITeamGame::is_kick_return_touchdowns_Valid() const{
    return m_kick_return_touchdowns_isValid;
}

qint32 OAITeamGame::getKickReturnYardDifferential() const {
    return m_kick_return_yard_differential;
}
void OAITeamGame::setKickReturnYardDifferential(const qint32 &kick_return_yard_differential) {
    m_kick_return_yard_differential = kick_return_yard_differential;
    m_kick_return_yard_differential_isSet = true;
}

bool OAITeamGame::is_kick_return_yard_differential_Set() const{
    return m_kick_return_yard_differential_isSet;
}

bool OAITeamGame::is_kick_return_yard_differential_Valid() const{
    return m_kick_return_yard_differential_isValid;
}

qint32 OAITeamGame::getKickReturnYards() const {
    return m_kick_return_yards;
}
void OAITeamGame::setKickReturnYards(const qint32 &kick_return_yards) {
    m_kick_return_yards = kick_return_yards;
    m_kick_return_yards_isSet = true;
}

bool OAITeamGame::is_kick_return_yards_Set() const{
    return m_kick_return_yards_isSet;
}

bool OAITeamGame::is_kick_return_yards_Valid() const{
    return m_kick_return_yards_isValid;
}

qint32 OAITeamGame::getKickReturns() const {
    return m_kick_returns;
}
void OAITeamGame::setKickReturns(const qint32 &kick_returns) {
    m_kick_returns = kick_returns;
    m_kick_returns_isSet = true;
}

bool OAITeamGame::is_kick_returns_Set() const{
    return m_kick_returns_isSet;
}

bool OAITeamGame::is_kick_returns_Valid() const{
    return m_kick_returns_isValid;
}

qint32 OAITeamGame::getKickoffTouchbacks() const {
    return m_kickoff_touchbacks;
}
void OAITeamGame::setKickoffTouchbacks(const qint32 &kickoff_touchbacks) {
    m_kickoff_touchbacks = kickoff_touchbacks;
    m_kickoff_touchbacks_isSet = true;
}

bool OAITeamGame::is_kickoff_touchbacks_Set() const{
    return m_kickoff_touchbacks_isSet;
}

bool OAITeamGame::is_kickoff_touchbacks_Valid() const{
    return m_kickoff_touchbacks_isValid;
}

qint32 OAITeamGame::getKickoffs() const {
    return m_kickoffs;
}
void OAITeamGame::setKickoffs(const qint32 &kickoffs) {
    m_kickoffs = kickoffs;
    m_kickoffs_isSet = true;
}

bool OAITeamGame::is_kickoffs_Set() const{
    return m_kickoffs_isSet;
}

bool OAITeamGame::is_kickoffs_Valid() const{
    return m_kickoffs_isValid;
}

qint32 OAITeamGame::getKickoffsInEndZone() const {
    return m_kickoffs_in_end_zone;
}
void OAITeamGame::setKickoffsInEndZone(const qint32 &kickoffs_in_end_zone) {
    m_kickoffs_in_end_zone = kickoffs_in_end_zone;
    m_kickoffs_in_end_zone_isSet = true;
}

bool OAITeamGame::is_kickoffs_in_end_zone_Set() const{
    return m_kickoffs_in_end_zone_isSet;
}

bool OAITeamGame::is_kickoffs_in_end_zone_Valid() const{
    return m_kickoffs_in_end_zone_isValid;
}

qint32 OAITeamGame::getOffensivePlays() const {
    return m_offensive_plays;
}
void OAITeamGame::setOffensivePlays(const qint32 &offensive_plays) {
    m_offensive_plays = offensive_plays;
    m_offensive_plays_isSet = true;
}

bool OAITeamGame::is_offensive_plays_Set() const{
    return m_offensive_plays_isSet;
}

bool OAITeamGame::is_offensive_plays_Valid() const{
    return m_offensive_plays_isValid;
}

qint32 OAITeamGame::getOffensiveYards() const {
    return m_offensive_yards;
}
void OAITeamGame::setOffensiveYards(const qint32 &offensive_yards) {
    m_offensive_yards = offensive_yards;
    m_offensive_yards_isSet = true;
}

bool OAITeamGame::is_offensive_yards_Set() const{
    return m_offensive_yards_isSet;
}

bool OAITeamGame::is_offensive_yards_Valid() const{
    return m_offensive_yards_isValid;
}

double OAITeamGame::getOffensiveYardsPerPlay() const {
    return m_offensive_yards_per_play;
}
void OAITeamGame::setOffensiveYardsPerPlay(const double &offensive_yards_per_play) {
    m_offensive_yards_per_play = offensive_yards_per_play;
    m_offensive_yards_per_play_isSet = true;
}

bool OAITeamGame::is_offensive_yards_per_play_Set() const{
    return m_offensive_yards_per_play_isSet;
}

bool OAITeamGame::is_offensive_yards_per_play_Valid() const{
    return m_offensive_yards_per_play_isValid;
}

QString OAITeamGame::getOpponent() const {
    return m_opponent;
}
void OAITeamGame::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAITeamGame::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAITeamGame::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAITeamGame::getOpponentAssistedTackles() const {
    return m_opponent_assisted_tackles;
}
void OAITeamGame::setOpponentAssistedTackles(const qint32 &opponent_assisted_tackles) {
    m_opponent_assisted_tackles = opponent_assisted_tackles;
    m_opponent_assisted_tackles_isSet = true;
}

bool OAITeamGame::is_opponent_assisted_tackles_Set() const{
    return m_opponent_assisted_tackles_isSet;
}

bool OAITeamGame::is_opponent_assisted_tackles_Valid() const{
    return m_opponent_assisted_tackles_isValid;
}

qint32 OAITeamGame::getOpponentBlockedKickReturnTouchdowns() const {
    return m_opponent_blocked_kick_return_touchdowns;
}
void OAITeamGame::setOpponentBlockedKickReturnTouchdowns(const qint32 &opponent_blocked_kick_return_touchdowns) {
    m_opponent_blocked_kick_return_touchdowns = opponent_blocked_kick_return_touchdowns;
    m_opponent_blocked_kick_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_blocked_kick_return_touchdowns_Set() const{
    return m_opponent_blocked_kick_return_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_blocked_kick_return_touchdowns_Valid() const{
    return m_opponent_blocked_kick_return_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentBlockedKickReturnYards() const {
    return m_opponent_blocked_kick_return_yards;
}
void OAITeamGame::setOpponentBlockedKickReturnYards(const qint32 &opponent_blocked_kick_return_yards) {
    m_opponent_blocked_kick_return_yards = opponent_blocked_kick_return_yards;
    m_opponent_blocked_kick_return_yards_isSet = true;
}

bool OAITeamGame::is_opponent_blocked_kick_return_yards_Set() const{
    return m_opponent_blocked_kick_return_yards_isSet;
}

bool OAITeamGame::is_opponent_blocked_kick_return_yards_Valid() const{
    return m_opponent_blocked_kick_return_yards_isValid;
}

qint32 OAITeamGame::getOpponentBlockedKicks() const {
    return m_opponent_blocked_kicks;
}
void OAITeamGame::setOpponentBlockedKicks(const qint32 &opponent_blocked_kicks) {
    m_opponent_blocked_kicks = opponent_blocked_kicks;
    m_opponent_blocked_kicks_isSet = true;
}

bool OAITeamGame::is_opponent_blocked_kicks_Set() const{
    return m_opponent_blocked_kicks_isSet;
}

bool OAITeamGame::is_opponent_blocked_kicks_Valid() const{
    return m_opponent_blocked_kicks_isValid;
}

double OAITeamGame::getOpponentCompletionPercentage() const {
    return m_opponent_completion_percentage;
}
void OAITeamGame::setOpponentCompletionPercentage(const double &opponent_completion_percentage) {
    m_opponent_completion_percentage = opponent_completion_percentage;
    m_opponent_completion_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_completion_percentage_Set() const{
    return m_opponent_completion_percentage_isSet;
}

bool OAITeamGame::is_opponent_completion_percentage_Valid() const{
    return m_opponent_completion_percentage_isValid;
}

qint32 OAITeamGame::getOpponentExtraPointKickingAttempts() const {
    return m_opponent_extra_point_kicking_attempts;
}
void OAITeamGame::setOpponentExtraPointKickingAttempts(const qint32 &opponent_extra_point_kicking_attempts) {
    m_opponent_extra_point_kicking_attempts = opponent_extra_point_kicking_attempts;
    m_opponent_extra_point_kicking_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_extra_point_kicking_attempts_Set() const{
    return m_opponent_extra_point_kicking_attempts_isSet;
}

bool OAITeamGame::is_opponent_extra_point_kicking_attempts_Valid() const{
    return m_opponent_extra_point_kicking_attempts_isValid;
}

qint32 OAITeamGame::getOpponentExtraPointKickingConversions() const {
    return m_opponent_extra_point_kicking_conversions;
}
void OAITeamGame::setOpponentExtraPointKickingConversions(const qint32 &opponent_extra_point_kicking_conversions) {
    m_opponent_extra_point_kicking_conversions = opponent_extra_point_kicking_conversions;
    m_opponent_extra_point_kicking_conversions_isSet = true;
}

bool OAITeamGame::is_opponent_extra_point_kicking_conversions_Set() const{
    return m_opponent_extra_point_kicking_conversions_isSet;
}

bool OAITeamGame::is_opponent_extra_point_kicking_conversions_Valid() const{
    return m_opponent_extra_point_kicking_conversions_isValid;
}

qint32 OAITeamGame::getOpponentExtraPointPassingAttempts() const {
    return m_opponent_extra_point_passing_attempts;
}
void OAITeamGame::setOpponentExtraPointPassingAttempts(const qint32 &opponent_extra_point_passing_attempts) {
    m_opponent_extra_point_passing_attempts = opponent_extra_point_passing_attempts;
    m_opponent_extra_point_passing_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_extra_point_passing_attempts_Set() const{
    return m_opponent_extra_point_passing_attempts_isSet;
}

bool OAITeamGame::is_opponent_extra_point_passing_attempts_Valid() const{
    return m_opponent_extra_point_passing_attempts_isValid;
}

qint32 OAITeamGame::getOpponentExtraPointPassingConversions() const {
    return m_opponent_extra_point_passing_conversions;
}
void OAITeamGame::setOpponentExtraPointPassingConversions(const qint32 &opponent_extra_point_passing_conversions) {
    m_opponent_extra_point_passing_conversions = opponent_extra_point_passing_conversions;
    m_opponent_extra_point_passing_conversions_isSet = true;
}

bool OAITeamGame::is_opponent_extra_point_passing_conversions_Set() const{
    return m_opponent_extra_point_passing_conversions_isSet;
}

bool OAITeamGame::is_opponent_extra_point_passing_conversions_Valid() const{
    return m_opponent_extra_point_passing_conversions_isValid;
}

double OAITeamGame::getOpponentExtraPointPercentage() const {
    return m_opponent_extra_point_percentage;
}
void OAITeamGame::setOpponentExtraPointPercentage(const double &opponent_extra_point_percentage) {
    m_opponent_extra_point_percentage = opponent_extra_point_percentage;
    m_opponent_extra_point_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_extra_point_percentage_Set() const{
    return m_opponent_extra_point_percentage_isSet;
}

bool OAITeamGame::is_opponent_extra_point_percentage_Valid() const{
    return m_opponent_extra_point_percentage_isValid;
}

qint32 OAITeamGame::getOpponentExtraPointRushingAttempts() const {
    return m_opponent_extra_point_rushing_attempts;
}
void OAITeamGame::setOpponentExtraPointRushingAttempts(const qint32 &opponent_extra_point_rushing_attempts) {
    m_opponent_extra_point_rushing_attempts = opponent_extra_point_rushing_attempts;
    m_opponent_extra_point_rushing_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_extra_point_rushing_attempts_Set() const{
    return m_opponent_extra_point_rushing_attempts_isSet;
}

bool OAITeamGame::is_opponent_extra_point_rushing_attempts_Valid() const{
    return m_opponent_extra_point_rushing_attempts_isValid;
}

qint32 OAITeamGame::getOpponentExtraPointRushingConversions() const {
    return m_opponent_extra_point_rushing_conversions;
}
void OAITeamGame::setOpponentExtraPointRushingConversions(const qint32 &opponent_extra_point_rushing_conversions) {
    m_opponent_extra_point_rushing_conversions = opponent_extra_point_rushing_conversions;
    m_opponent_extra_point_rushing_conversions_isSet = true;
}

bool OAITeamGame::is_opponent_extra_point_rushing_conversions_Set() const{
    return m_opponent_extra_point_rushing_conversions_isSet;
}

bool OAITeamGame::is_opponent_extra_point_rushing_conversions_Valid() const{
    return m_opponent_extra_point_rushing_conversions_isValid;
}

qint32 OAITeamGame::getOpponentExtraPointsHadBlocked() const {
    return m_opponent_extra_points_had_blocked;
}
void OAITeamGame::setOpponentExtraPointsHadBlocked(const qint32 &opponent_extra_points_had_blocked) {
    m_opponent_extra_points_had_blocked = opponent_extra_points_had_blocked;
    m_opponent_extra_points_had_blocked_isSet = true;
}

bool OAITeamGame::is_opponent_extra_points_had_blocked_Set() const{
    return m_opponent_extra_points_had_blocked_isSet;
}

bool OAITeamGame::is_opponent_extra_points_had_blocked_Valid() const{
    return m_opponent_extra_points_had_blocked_isValid;
}

qint32 OAITeamGame::getOpponentFieldGoalAttempts() const {
    return m_opponent_field_goal_attempts;
}
void OAITeamGame::setOpponentFieldGoalAttempts(const qint32 &opponent_field_goal_attempts) {
    m_opponent_field_goal_attempts = opponent_field_goal_attempts;
    m_opponent_field_goal_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_field_goal_attempts_Set() const{
    return m_opponent_field_goal_attempts_isSet;
}

bool OAITeamGame::is_opponent_field_goal_attempts_Valid() const{
    return m_opponent_field_goal_attempts_isValid;
}

double OAITeamGame::getOpponentFieldGoalPercentage() const {
    return m_opponent_field_goal_percentage;
}
void OAITeamGame::setOpponentFieldGoalPercentage(const double &opponent_field_goal_percentage) {
    m_opponent_field_goal_percentage = opponent_field_goal_percentage;
    m_opponent_field_goal_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_field_goal_percentage_Set() const{
    return m_opponent_field_goal_percentage_isSet;
}

bool OAITeamGame::is_opponent_field_goal_percentage_Valid() const{
    return m_opponent_field_goal_percentage_isValid;
}

qint32 OAITeamGame::getOpponentFieldGoalReturnTouchdowns() const {
    return m_opponent_field_goal_return_touchdowns;
}
void OAITeamGame::setOpponentFieldGoalReturnTouchdowns(const qint32 &opponent_field_goal_return_touchdowns) {
    m_opponent_field_goal_return_touchdowns = opponent_field_goal_return_touchdowns;
    m_opponent_field_goal_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_field_goal_return_touchdowns_Set() const{
    return m_opponent_field_goal_return_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_field_goal_return_touchdowns_Valid() const{
    return m_opponent_field_goal_return_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentFieldGoalReturnYards() const {
    return m_opponent_field_goal_return_yards;
}
void OAITeamGame::setOpponentFieldGoalReturnYards(const qint32 &opponent_field_goal_return_yards) {
    m_opponent_field_goal_return_yards = opponent_field_goal_return_yards;
    m_opponent_field_goal_return_yards_isSet = true;
}

bool OAITeamGame::is_opponent_field_goal_return_yards_Set() const{
    return m_opponent_field_goal_return_yards_isSet;
}

bool OAITeamGame::is_opponent_field_goal_return_yards_Valid() const{
    return m_opponent_field_goal_return_yards_isValid;
}

qint32 OAITeamGame::getOpponentFieldGoalsHadBlocked() const {
    return m_opponent_field_goals_had_blocked;
}
void OAITeamGame::setOpponentFieldGoalsHadBlocked(const qint32 &opponent_field_goals_had_blocked) {
    m_opponent_field_goals_had_blocked = opponent_field_goals_had_blocked;
    m_opponent_field_goals_had_blocked_isSet = true;
}

bool OAITeamGame::is_opponent_field_goals_had_blocked_Set() const{
    return m_opponent_field_goals_had_blocked_isSet;
}

bool OAITeamGame::is_opponent_field_goals_had_blocked_Valid() const{
    return m_opponent_field_goals_had_blocked_isValid;
}

qint32 OAITeamGame::getOpponentFieldGoalsMade() const {
    return m_opponent_field_goals_made;
}
void OAITeamGame::setOpponentFieldGoalsMade(const qint32 &opponent_field_goals_made) {
    m_opponent_field_goals_made = opponent_field_goals_made;
    m_opponent_field_goals_made_isSet = true;
}

bool OAITeamGame::is_opponent_field_goals_made_Set() const{
    return m_opponent_field_goals_made_isSet;
}

bool OAITeamGame::is_opponent_field_goals_made_Valid() const{
    return m_opponent_field_goals_made_isValid;
}

qint32 OAITeamGame::getOpponentFirstDowns() const {
    return m_opponent_first_downs;
}
void OAITeamGame::setOpponentFirstDowns(const qint32 &opponent_first_downs) {
    m_opponent_first_downs = opponent_first_downs;
    m_opponent_first_downs_isSet = true;
}

bool OAITeamGame::is_opponent_first_downs_Set() const{
    return m_opponent_first_downs_isSet;
}

bool OAITeamGame::is_opponent_first_downs_Valid() const{
    return m_opponent_first_downs_isValid;
}

qint32 OAITeamGame::getOpponentFirstDownsByPassing() const {
    return m_opponent_first_downs_by_passing;
}
void OAITeamGame::setOpponentFirstDownsByPassing(const qint32 &opponent_first_downs_by_passing) {
    m_opponent_first_downs_by_passing = opponent_first_downs_by_passing;
    m_opponent_first_downs_by_passing_isSet = true;
}

bool OAITeamGame::is_opponent_first_downs_by_passing_Set() const{
    return m_opponent_first_downs_by_passing_isSet;
}

bool OAITeamGame::is_opponent_first_downs_by_passing_Valid() const{
    return m_opponent_first_downs_by_passing_isValid;
}

qint32 OAITeamGame::getOpponentFirstDownsByPenalty() const {
    return m_opponent_first_downs_by_penalty;
}
void OAITeamGame::setOpponentFirstDownsByPenalty(const qint32 &opponent_first_downs_by_penalty) {
    m_opponent_first_downs_by_penalty = opponent_first_downs_by_penalty;
    m_opponent_first_downs_by_penalty_isSet = true;
}

bool OAITeamGame::is_opponent_first_downs_by_penalty_Set() const{
    return m_opponent_first_downs_by_penalty_isSet;
}

bool OAITeamGame::is_opponent_first_downs_by_penalty_Valid() const{
    return m_opponent_first_downs_by_penalty_isValid;
}

qint32 OAITeamGame::getOpponentFirstDownsByRushing() const {
    return m_opponent_first_downs_by_rushing;
}
void OAITeamGame::setOpponentFirstDownsByRushing(const qint32 &opponent_first_downs_by_rushing) {
    m_opponent_first_downs_by_rushing = opponent_first_downs_by_rushing;
    m_opponent_first_downs_by_rushing_isSet = true;
}

bool OAITeamGame::is_opponent_first_downs_by_rushing_Set() const{
    return m_opponent_first_downs_by_rushing_isSet;
}

bool OAITeamGame::is_opponent_first_downs_by_rushing_Valid() const{
    return m_opponent_first_downs_by_rushing_isValid;
}

qint32 OAITeamGame::getOpponentFourthDownAttempts() const {
    return m_opponent_fourth_down_attempts;
}
void OAITeamGame::setOpponentFourthDownAttempts(const qint32 &opponent_fourth_down_attempts) {
    m_opponent_fourth_down_attempts = opponent_fourth_down_attempts;
    m_opponent_fourth_down_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_fourth_down_attempts_Set() const{
    return m_opponent_fourth_down_attempts_isSet;
}

bool OAITeamGame::is_opponent_fourth_down_attempts_Valid() const{
    return m_opponent_fourth_down_attempts_isValid;
}

qint32 OAITeamGame::getOpponentFourthDownConversions() const {
    return m_opponent_fourth_down_conversions;
}
void OAITeamGame::setOpponentFourthDownConversions(const qint32 &opponent_fourth_down_conversions) {
    m_opponent_fourth_down_conversions = opponent_fourth_down_conversions;
    m_opponent_fourth_down_conversions_isSet = true;
}

bool OAITeamGame::is_opponent_fourth_down_conversions_Set() const{
    return m_opponent_fourth_down_conversions_isSet;
}

bool OAITeamGame::is_opponent_fourth_down_conversions_Valid() const{
    return m_opponent_fourth_down_conversions_isValid;
}

double OAITeamGame::getOpponentFourthDownPercentage() const {
    return m_opponent_fourth_down_percentage;
}
void OAITeamGame::setOpponentFourthDownPercentage(const double &opponent_fourth_down_percentage) {
    m_opponent_fourth_down_percentage = opponent_fourth_down_percentage;
    m_opponent_fourth_down_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_fourth_down_percentage_Set() const{
    return m_opponent_fourth_down_percentage_isSet;
}

bool OAITeamGame::is_opponent_fourth_down_percentage_Valid() const{
    return m_opponent_fourth_down_percentage_isValid;
}

qint32 OAITeamGame::getOpponentFumbleReturnTouchdowns() const {
    return m_opponent_fumble_return_touchdowns;
}
void OAITeamGame::setOpponentFumbleReturnTouchdowns(const qint32 &opponent_fumble_return_touchdowns) {
    m_opponent_fumble_return_touchdowns = opponent_fumble_return_touchdowns;
    m_opponent_fumble_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_fumble_return_touchdowns_Set() const{
    return m_opponent_fumble_return_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_fumble_return_touchdowns_Valid() const{
    return m_opponent_fumble_return_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentFumbleReturnYards() const {
    return m_opponent_fumble_return_yards;
}
void OAITeamGame::setOpponentFumbleReturnYards(const qint32 &opponent_fumble_return_yards) {
    m_opponent_fumble_return_yards = opponent_fumble_return_yards;
    m_opponent_fumble_return_yards_isSet = true;
}

bool OAITeamGame::is_opponent_fumble_return_yards_Set() const{
    return m_opponent_fumble_return_yards_isSet;
}

bool OAITeamGame::is_opponent_fumble_return_yards_Valid() const{
    return m_opponent_fumble_return_yards_isValid;
}

qint32 OAITeamGame::getOpponentFumbles() const {
    return m_opponent_fumbles;
}
void OAITeamGame::setOpponentFumbles(const qint32 &opponent_fumbles) {
    m_opponent_fumbles = opponent_fumbles;
    m_opponent_fumbles_isSet = true;
}

bool OAITeamGame::is_opponent_fumbles_Set() const{
    return m_opponent_fumbles_isSet;
}

bool OAITeamGame::is_opponent_fumbles_Valid() const{
    return m_opponent_fumbles_isValid;
}

qint32 OAITeamGame::getOpponentFumblesForced() const {
    return m_opponent_fumbles_forced;
}
void OAITeamGame::setOpponentFumblesForced(const qint32 &opponent_fumbles_forced) {
    m_opponent_fumbles_forced = opponent_fumbles_forced;
    m_opponent_fumbles_forced_isSet = true;
}

bool OAITeamGame::is_opponent_fumbles_forced_Set() const{
    return m_opponent_fumbles_forced_isSet;
}

bool OAITeamGame::is_opponent_fumbles_forced_Valid() const{
    return m_opponent_fumbles_forced_isValid;
}

qint32 OAITeamGame::getOpponentFumblesLost() const {
    return m_opponent_fumbles_lost;
}
void OAITeamGame::setOpponentFumblesLost(const qint32 &opponent_fumbles_lost) {
    m_opponent_fumbles_lost = opponent_fumbles_lost;
    m_opponent_fumbles_lost_isSet = true;
}

bool OAITeamGame::is_opponent_fumbles_lost_Set() const{
    return m_opponent_fumbles_lost_isSet;
}

bool OAITeamGame::is_opponent_fumbles_lost_Valid() const{
    return m_opponent_fumbles_lost_isValid;
}

qint32 OAITeamGame::getOpponentFumblesRecovered() const {
    return m_opponent_fumbles_recovered;
}
void OAITeamGame::setOpponentFumblesRecovered(const qint32 &opponent_fumbles_recovered) {
    m_opponent_fumbles_recovered = opponent_fumbles_recovered;
    m_opponent_fumbles_recovered_isSet = true;
}

bool OAITeamGame::is_opponent_fumbles_recovered_Set() const{
    return m_opponent_fumbles_recovered_isSet;
}

bool OAITeamGame::is_opponent_fumbles_recovered_Valid() const{
    return m_opponent_fumbles_recovered_isValid;
}

qint32 OAITeamGame::getOpponentGiveaways() const {
    return m_opponent_giveaways;
}
void OAITeamGame::setOpponentGiveaways(const qint32 &opponent_giveaways) {
    m_opponent_giveaways = opponent_giveaways;
    m_opponent_giveaways_isSet = true;
}

bool OAITeamGame::is_opponent_giveaways_Set() const{
    return m_opponent_giveaways_isSet;
}

bool OAITeamGame::is_opponent_giveaways_Valid() const{
    return m_opponent_giveaways_isValid;
}

qint32 OAITeamGame::getOpponentGoalToGoAttempts() const {
    return m_opponent_goal_to_go_attempts;
}
void OAITeamGame::setOpponentGoalToGoAttempts(const qint32 &opponent_goal_to_go_attempts) {
    m_opponent_goal_to_go_attempts = opponent_goal_to_go_attempts;
    m_opponent_goal_to_go_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_goal_to_go_attempts_Set() const{
    return m_opponent_goal_to_go_attempts_isSet;
}

bool OAITeamGame::is_opponent_goal_to_go_attempts_Valid() const{
    return m_opponent_goal_to_go_attempts_isValid;
}

qint32 OAITeamGame::getOpponentGoalToGoConversions() const {
    return m_opponent_goal_to_go_conversions;
}
void OAITeamGame::setOpponentGoalToGoConversions(const qint32 &opponent_goal_to_go_conversions) {
    m_opponent_goal_to_go_conversions = opponent_goal_to_go_conversions;
    m_opponent_goal_to_go_conversions_isSet = true;
}

bool OAITeamGame::is_opponent_goal_to_go_conversions_Set() const{
    return m_opponent_goal_to_go_conversions_isSet;
}

bool OAITeamGame::is_opponent_goal_to_go_conversions_Valid() const{
    return m_opponent_goal_to_go_conversions_isValid;
}

double OAITeamGame::getOpponentGoalToGoPercentage() const {
    return m_opponent_goal_to_go_percentage;
}
void OAITeamGame::setOpponentGoalToGoPercentage(const double &opponent_goal_to_go_percentage) {
    m_opponent_goal_to_go_percentage = opponent_goal_to_go_percentage;
    m_opponent_goal_to_go_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_goal_to_go_percentage_Set() const{
    return m_opponent_goal_to_go_percentage_isSet;
}

bool OAITeamGame::is_opponent_goal_to_go_percentage_Valid() const{
    return m_opponent_goal_to_go_percentage_isValid;
}

qint32 OAITeamGame::getOpponentId() const {
    return m_opponent_id;
}
void OAITeamGame::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAITeamGame::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAITeamGame::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

qint32 OAITeamGame::getOpponentInterceptionReturnTouchdowns() const {
    return m_opponent_interception_return_touchdowns;
}
void OAITeamGame::setOpponentInterceptionReturnTouchdowns(const qint32 &opponent_interception_return_touchdowns) {
    m_opponent_interception_return_touchdowns = opponent_interception_return_touchdowns;
    m_opponent_interception_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_interception_return_touchdowns_Set() const{
    return m_opponent_interception_return_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_interception_return_touchdowns_Valid() const{
    return m_opponent_interception_return_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentInterceptionReturnYards() const {
    return m_opponent_interception_return_yards;
}
void OAITeamGame::setOpponentInterceptionReturnYards(const qint32 &opponent_interception_return_yards) {
    m_opponent_interception_return_yards = opponent_interception_return_yards;
    m_opponent_interception_return_yards_isSet = true;
}

bool OAITeamGame::is_opponent_interception_return_yards_Set() const{
    return m_opponent_interception_return_yards_isSet;
}

bool OAITeamGame::is_opponent_interception_return_yards_Valid() const{
    return m_opponent_interception_return_yards_isValid;
}

qint32 OAITeamGame::getOpponentInterceptionReturns() const {
    return m_opponent_interception_returns;
}
void OAITeamGame::setOpponentInterceptionReturns(const qint32 &opponent_interception_returns) {
    m_opponent_interception_returns = opponent_interception_returns;
    m_opponent_interception_returns_isSet = true;
}

bool OAITeamGame::is_opponent_interception_returns_Set() const{
    return m_opponent_interception_returns_isSet;
}

bool OAITeamGame::is_opponent_interception_returns_Valid() const{
    return m_opponent_interception_returns_isValid;
}

double OAITeamGame::getOpponentKickReturnAverage() const {
    return m_opponent_kick_return_average;
}
void OAITeamGame::setOpponentKickReturnAverage(const double &opponent_kick_return_average) {
    m_opponent_kick_return_average = opponent_kick_return_average;
    m_opponent_kick_return_average_isSet = true;
}

bool OAITeamGame::is_opponent_kick_return_average_Set() const{
    return m_opponent_kick_return_average_isSet;
}

bool OAITeamGame::is_opponent_kick_return_average_Valid() const{
    return m_opponent_kick_return_average_isValid;
}

qint32 OAITeamGame::getOpponentKickReturnLong() const {
    return m_opponent_kick_return_long;
}
void OAITeamGame::setOpponentKickReturnLong(const qint32 &opponent_kick_return_long) {
    m_opponent_kick_return_long = opponent_kick_return_long;
    m_opponent_kick_return_long_isSet = true;
}

bool OAITeamGame::is_opponent_kick_return_long_Set() const{
    return m_opponent_kick_return_long_isSet;
}

bool OAITeamGame::is_opponent_kick_return_long_Valid() const{
    return m_opponent_kick_return_long_isValid;
}

qint32 OAITeamGame::getOpponentKickReturnTouchdowns() const {
    return m_opponent_kick_return_touchdowns;
}
void OAITeamGame::setOpponentKickReturnTouchdowns(const qint32 &opponent_kick_return_touchdowns) {
    m_opponent_kick_return_touchdowns = opponent_kick_return_touchdowns;
    m_opponent_kick_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_kick_return_touchdowns_Set() const{
    return m_opponent_kick_return_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_kick_return_touchdowns_Valid() const{
    return m_opponent_kick_return_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentKickReturnYards() const {
    return m_opponent_kick_return_yards;
}
void OAITeamGame::setOpponentKickReturnYards(const qint32 &opponent_kick_return_yards) {
    m_opponent_kick_return_yards = opponent_kick_return_yards;
    m_opponent_kick_return_yards_isSet = true;
}

bool OAITeamGame::is_opponent_kick_return_yards_Set() const{
    return m_opponent_kick_return_yards_isSet;
}

bool OAITeamGame::is_opponent_kick_return_yards_Valid() const{
    return m_opponent_kick_return_yards_isValid;
}

qint32 OAITeamGame::getOpponentKickReturns() const {
    return m_opponent_kick_returns;
}
void OAITeamGame::setOpponentKickReturns(const qint32 &opponent_kick_returns) {
    m_opponent_kick_returns = opponent_kick_returns;
    m_opponent_kick_returns_isSet = true;
}

bool OAITeamGame::is_opponent_kick_returns_Set() const{
    return m_opponent_kick_returns_isSet;
}

bool OAITeamGame::is_opponent_kick_returns_Valid() const{
    return m_opponent_kick_returns_isValid;
}

qint32 OAITeamGame::getOpponentKickoffTouchbacks() const {
    return m_opponent_kickoff_touchbacks;
}
void OAITeamGame::setOpponentKickoffTouchbacks(const qint32 &opponent_kickoff_touchbacks) {
    m_opponent_kickoff_touchbacks = opponent_kickoff_touchbacks;
    m_opponent_kickoff_touchbacks_isSet = true;
}

bool OAITeamGame::is_opponent_kickoff_touchbacks_Set() const{
    return m_opponent_kickoff_touchbacks_isSet;
}

bool OAITeamGame::is_opponent_kickoff_touchbacks_Valid() const{
    return m_opponent_kickoff_touchbacks_isValid;
}

qint32 OAITeamGame::getOpponentKickoffs() const {
    return m_opponent_kickoffs;
}
void OAITeamGame::setOpponentKickoffs(const qint32 &opponent_kickoffs) {
    m_opponent_kickoffs = opponent_kickoffs;
    m_opponent_kickoffs_isSet = true;
}

bool OAITeamGame::is_opponent_kickoffs_Set() const{
    return m_opponent_kickoffs_isSet;
}

bool OAITeamGame::is_opponent_kickoffs_Valid() const{
    return m_opponent_kickoffs_isValid;
}

qint32 OAITeamGame::getOpponentKickoffsInEndZone() const {
    return m_opponent_kickoffs_in_end_zone;
}
void OAITeamGame::setOpponentKickoffsInEndZone(const qint32 &opponent_kickoffs_in_end_zone) {
    m_opponent_kickoffs_in_end_zone = opponent_kickoffs_in_end_zone;
    m_opponent_kickoffs_in_end_zone_isSet = true;
}

bool OAITeamGame::is_opponent_kickoffs_in_end_zone_Set() const{
    return m_opponent_kickoffs_in_end_zone_isSet;
}

bool OAITeamGame::is_opponent_kickoffs_in_end_zone_Valid() const{
    return m_opponent_kickoffs_in_end_zone_isValid;
}

qint32 OAITeamGame::getOpponentOffensivePlays() const {
    return m_opponent_offensive_plays;
}
void OAITeamGame::setOpponentOffensivePlays(const qint32 &opponent_offensive_plays) {
    m_opponent_offensive_plays = opponent_offensive_plays;
    m_opponent_offensive_plays_isSet = true;
}

bool OAITeamGame::is_opponent_offensive_plays_Set() const{
    return m_opponent_offensive_plays_isSet;
}

bool OAITeamGame::is_opponent_offensive_plays_Valid() const{
    return m_opponent_offensive_plays_isValid;
}

qint32 OAITeamGame::getOpponentOffensiveYards() const {
    return m_opponent_offensive_yards;
}
void OAITeamGame::setOpponentOffensiveYards(const qint32 &opponent_offensive_yards) {
    m_opponent_offensive_yards = opponent_offensive_yards;
    m_opponent_offensive_yards_isSet = true;
}

bool OAITeamGame::is_opponent_offensive_yards_Set() const{
    return m_opponent_offensive_yards_isSet;
}

bool OAITeamGame::is_opponent_offensive_yards_Valid() const{
    return m_opponent_offensive_yards_isValid;
}

double OAITeamGame::getOpponentOffensiveYardsPerPlay() const {
    return m_opponent_offensive_yards_per_play;
}
void OAITeamGame::setOpponentOffensiveYardsPerPlay(const double &opponent_offensive_yards_per_play) {
    m_opponent_offensive_yards_per_play = opponent_offensive_yards_per_play;
    m_opponent_offensive_yards_per_play_isSet = true;
}

bool OAITeamGame::is_opponent_offensive_yards_per_play_Set() const{
    return m_opponent_offensive_yards_per_play_isSet;
}

bool OAITeamGame::is_opponent_offensive_yards_per_play_Valid() const{
    return m_opponent_offensive_yards_per_play_isValid;
}

double OAITeamGame::getOpponentPasserRating() const {
    return m_opponent_passer_rating;
}
void OAITeamGame::setOpponentPasserRating(const double &opponent_passer_rating) {
    m_opponent_passer_rating = opponent_passer_rating;
    m_opponent_passer_rating_isSet = true;
}

bool OAITeamGame::is_opponent_passer_rating_Set() const{
    return m_opponent_passer_rating_isSet;
}

bool OAITeamGame::is_opponent_passer_rating_Valid() const{
    return m_opponent_passer_rating_isValid;
}

qint32 OAITeamGame::getOpponentPassesDefended() const {
    return m_opponent_passes_defended;
}
void OAITeamGame::setOpponentPassesDefended(const qint32 &opponent_passes_defended) {
    m_opponent_passes_defended = opponent_passes_defended;
    m_opponent_passes_defended_isSet = true;
}

bool OAITeamGame::is_opponent_passes_defended_Set() const{
    return m_opponent_passes_defended_isSet;
}

bool OAITeamGame::is_opponent_passes_defended_Valid() const{
    return m_opponent_passes_defended_isValid;
}

qint32 OAITeamGame::getOpponentPassingAttempts() const {
    return m_opponent_passing_attempts;
}
void OAITeamGame::setOpponentPassingAttempts(const qint32 &opponent_passing_attempts) {
    m_opponent_passing_attempts = opponent_passing_attempts;
    m_opponent_passing_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_passing_attempts_Set() const{
    return m_opponent_passing_attempts_isSet;
}

bool OAITeamGame::is_opponent_passing_attempts_Valid() const{
    return m_opponent_passing_attempts_isValid;
}

qint32 OAITeamGame::getOpponentPassingCompletions() const {
    return m_opponent_passing_completions;
}
void OAITeamGame::setOpponentPassingCompletions(const qint32 &opponent_passing_completions) {
    m_opponent_passing_completions = opponent_passing_completions;
    m_opponent_passing_completions_isSet = true;
}

bool OAITeamGame::is_opponent_passing_completions_Set() const{
    return m_opponent_passing_completions_isSet;
}

bool OAITeamGame::is_opponent_passing_completions_Valid() const{
    return m_opponent_passing_completions_isValid;
}

qint32 OAITeamGame::getOpponentPassingDropbacks() const {
    return m_opponent_passing_dropbacks;
}
void OAITeamGame::setOpponentPassingDropbacks(const qint32 &opponent_passing_dropbacks) {
    m_opponent_passing_dropbacks = opponent_passing_dropbacks;
    m_opponent_passing_dropbacks_isSet = true;
}

bool OAITeamGame::is_opponent_passing_dropbacks_Set() const{
    return m_opponent_passing_dropbacks_isSet;
}

bool OAITeamGame::is_opponent_passing_dropbacks_Valid() const{
    return m_opponent_passing_dropbacks_isValid;
}

double OAITeamGame::getOpponentPassingInterceptionPercentage() const {
    return m_opponent_passing_interception_percentage;
}
void OAITeamGame::setOpponentPassingInterceptionPercentage(const double &opponent_passing_interception_percentage) {
    m_opponent_passing_interception_percentage = opponent_passing_interception_percentage;
    m_opponent_passing_interception_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_passing_interception_percentage_Set() const{
    return m_opponent_passing_interception_percentage_isSet;
}

bool OAITeamGame::is_opponent_passing_interception_percentage_Valid() const{
    return m_opponent_passing_interception_percentage_isValid;
}

qint32 OAITeamGame::getOpponentPassingInterceptions() const {
    return m_opponent_passing_interceptions;
}
void OAITeamGame::setOpponentPassingInterceptions(const qint32 &opponent_passing_interceptions) {
    m_opponent_passing_interceptions = opponent_passing_interceptions;
    m_opponent_passing_interceptions_isSet = true;
}

bool OAITeamGame::is_opponent_passing_interceptions_Set() const{
    return m_opponent_passing_interceptions_isSet;
}

bool OAITeamGame::is_opponent_passing_interceptions_Valid() const{
    return m_opponent_passing_interceptions_isValid;
}

qint32 OAITeamGame::getOpponentPassingTouchdowns() const {
    return m_opponent_passing_touchdowns;
}
void OAITeamGame::setOpponentPassingTouchdowns(const qint32 &opponent_passing_touchdowns) {
    m_opponent_passing_touchdowns = opponent_passing_touchdowns;
    m_opponent_passing_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_passing_touchdowns_Set() const{
    return m_opponent_passing_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_passing_touchdowns_Valid() const{
    return m_opponent_passing_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentPassingYards() const {
    return m_opponent_passing_yards;
}
void OAITeamGame::setOpponentPassingYards(const qint32 &opponent_passing_yards) {
    m_opponent_passing_yards = opponent_passing_yards;
    m_opponent_passing_yards_isSet = true;
}

bool OAITeamGame::is_opponent_passing_yards_Set() const{
    return m_opponent_passing_yards_isSet;
}

bool OAITeamGame::is_opponent_passing_yards_Valid() const{
    return m_opponent_passing_yards_isValid;
}

double OAITeamGame::getOpponentPassingYardsPerAttempt() const {
    return m_opponent_passing_yards_per_attempt;
}
void OAITeamGame::setOpponentPassingYardsPerAttempt(const double &opponent_passing_yards_per_attempt) {
    m_opponent_passing_yards_per_attempt = opponent_passing_yards_per_attempt;
    m_opponent_passing_yards_per_attempt_isSet = true;
}

bool OAITeamGame::is_opponent_passing_yards_per_attempt_Set() const{
    return m_opponent_passing_yards_per_attempt_isSet;
}

bool OAITeamGame::is_opponent_passing_yards_per_attempt_Valid() const{
    return m_opponent_passing_yards_per_attempt_isValid;
}

double OAITeamGame::getOpponentPassingYardsPerCompletion() const {
    return m_opponent_passing_yards_per_completion;
}
void OAITeamGame::setOpponentPassingYardsPerCompletion(const double &opponent_passing_yards_per_completion) {
    m_opponent_passing_yards_per_completion = opponent_passing_yards_per_completion;
    m_opponent_passing_yards_per_completion_isSet = true;
}

bool OAITeamGame::is_opponent_passing_yards_per_completion_Set() const{
    return m_opponent_passing_yards_per_completion_isSet;
}

bool OAITeamGame::is_opponent_passing_yards_per_completion_Valid() const{
    return m_opponent_passing_yards_per_completion_isValid;
}

qint32 OAITeamGame::getOpponentPenalties() const {
    return m_opponent_penalties;
}
void OAITeamGame::setOpponentPenalties(const qint32 &opponent_penalties) {
    m_opponent_penalties = opponent_penalties;
    m_opponent_penalties_isSet = true;
}

bool OAITeamGame::is_opponent_penalties_Set() const{
    return m_opponent_penalties_isSet;
}

bool OAITeamGame::is_opponent_penalties_Valid() const{
    return m_opponent_penalties_isValid;
}

qint32 OAITeamGame::getOpponentPenaltyYards() const {
    return m_opponent_penalty_yards;
}
void OAITeamGame::setOpponentPenaltyYards(const qint32 &opponent_penalty_yards) {
    m_opponent_penalty_yards = opponent_penalty_yards;
    m_opponent_penalty_yards_isSet = true;
}

bool OAITeamGame::is_opponent_penalty_yards_Set() const{
    return m_opponent_penalty_yards_isSet;
}

bool OAITeamGame::is_opponent_penalty_yards_Valid() const{
    return m_opponent_penalty_yards_isValid;
}

double OAITeamGame::getOpponentPuntAverage() const {
    return m_opponent_punt_average;
}
void OAITeamGame::setOpponentPuntAverage(const double &opponent_punt_average) {
    m_opponent_punt_average = opponent_punt_average;
    m_opponent_punt_average_isSet = true;
}

bool OAITeamGame::is_opponent_punt_average_Set() const{
    return m_opponent_punt_average_isSet;
}

bool OAITeamGame::is_opponent_punt_average_Valid() const{
    return m_opponent_punt_average_isValid;
}

double OAITeamGame::getOpponentPuntNetAverage() const {
    return m_opponent_punt_net_average;
}
void OAITeamGame::setOpponentPuntNetAverage(const double &opponent_punt_net_average) {
    m_opponent_punt_net_average = opponent_punt_net_average;
    m_opponent_punt_net_average_isSet = true;
}

bool OAITeamGame::is_opponent_punt_net_average_Set() const{
    return m_opponent_punt_net_average_isSet;
}

bool OAITeamGame::is_opponent_punt_net_average_Valid() const{
    return m_opponent_punt_net_average_isValid;
}

qint32 OAITeamGame::getOpponentPuntNetYards() const {
    return m_opponent_punt_net_yards;
}
void OAITeamGame::setOpponentPuntNetYards(const qint32 &opponent_punt_net_yards) {
    m_opponent_punt_net_yards = opponent_punt_net_yards;
    m_opponent_punt_net_yards_isSet = true;
}

bool OAITeamGame::is_opponent_punt_net_yards_Set() const{
    return m_opponent_punt_net_yards_isSet;
}

bool OAITeamGame::is_opponent_punt_net_yards_Valid() const{
    return m_opponent_punt_net_yards_isValid;
}

double OAITeamGame::getOpponentPuntReturnAverage() const {
    return m_opponent_punt_return_average;
}
void OAITeamGame::setOpponentPuntReturnAverage(const double &opponent_punt_return_average) {
    m_opponent_punt_return_average = opponent_punt_return_average;
    m_opponent_punt_return_average_isSet = true;
}

bool OAITeamGame::is_opponent_punt_return_average_Set() const{
    return m_opponent_punt_return_average_isSet;
}

bool OAITeamGame::is_opponent_punt_return_average_Valid() const{
    return m_opponent_punt_return_average_isValid;
}

qint32 OAITeamGame::getOpponentPuntReturnLong() const {
    return m_opponent_punt_return_long;
}
void OAITeamGame::setOpponentPuntReturnLong(const qint32 &opponent_punt_return_long) {
    m_opponent_punt_return_long = opponent_punt_return_long;
    m_opponent_punt_return_long_isSet = true;
}

bool OAITeamGame::is_opponent_punt_return_long_Set() const{
    return m_opponent_punt_return_long_isSet;
}

bool OAITeamGame::is_opponent_punt_return_long_Valid() const{
    return m_opponent_punt_return_long_isValid;
}

qint32 OAITeamGame::getOpponentPuntReturnTouchdowns() const {
    return m_opponent_punt_return_touchdowns;
}
void OAITeamGame::setOpponentPuntReturnTouchdowns(const qint32 &opponent_punt_return_touchdowns) {
    m_opponent_punt_return_touchdowns = opponent_punt_return_touchdowns;
    m_opponent_punt_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_punt_return_touchdowns_Set() const{
    return m_opponent_punt_return_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_punt_return_touchdowns_Valid() const{
    return m_opponent_punt_return_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentPuntReturnYards() const {
    return m_opponent_punt_return_yards;
}
void OAITeamGame::setOpponentPuntReturnYards(const qint32 &opponent_punt_return_yards) {
    m_opponent_punt_return_yards = opponent_punt_return_yards;
    m_opponent_punt_return_yards_isSet = true;
}

bool OAITeamGame::is_opponent_punt_return_yards_Set() const{
    return m_opponent_punt_return_yards_isSet;
}

bool OAITeamGame::is_opponent_punt_return_yards_Valid() const{
    return m_opponent_punt_return_yards_isValid;
}

qint32 OAITeamGame::getOpponentPuntReturns() const {
    return m_opponent_punt_returns;
}
void OAITeamGame::setOpponentPuntReturns(const qint32 &opponent_punt_returns) {
    m_opponent_punt_returns = opponent_punt_returns;
    m_opponent_punt_returns_isSet = true;
}

bool OAITeamGame::is_opponent_punt_returns_Set() const{
    return m_opponent_punt_returns_isSet;
}

bool OAITeamGame::is_opponent_punt_returns_Valid() const{
    return m_opponent_punt_returns_isValid;
}

qint32 OAITeamGame::getOpponentPuntYards() const {
    return m_opponent_punt_yards;
}
void OAITeamGame::setOpponentPuntYards(const qint32 &opponent_punt_yards) {
    m_opponent_punt_yards = opponent_punt_yards;
    m_opponent_punt_yards_isSet = true;
}

bool OAITeamGame::is_opponent_punt_yards_Set() const{
    return m_opponent_punt_yards_isSet;
}

bool OAITeamGame::is_opponent_punt_yards_Valid() const{
    return m_opponent_punt_yards_isValid;
}

qint32 OAITeamGame::getOpponentPunts() const {
    return m_opponent_punts;
}
void OAITeamGame::setOpponentPunts(const qint32 &opponent_punts) {
    m_opponent_punts = opponent_punts;
    m_opponent_punts_isSet = true;
}

bool OAITeamGame::is_opponent_punts_Set() const{
    return m_opponent_punts_isSet;
}

bool OAITeamGame::is_opponent_punts_Valid() const{
    return m_opponent_punts_isValid;
}

qint32 OAITeamGame::getOpponentPuntsHadBlocked() const {
    return m_opponent_punts_had_blocked;
}
void OAITeamGame::setOpponentPuntsHadBlocked(const qint32 &opponent_punts_had_blocked) {
    m_opponent_punts_had_blocked = opponent_punts_had_blocked;
    m_opponent_punts_had_blocked_isSet = true;
}

bool OAITeamGame::is_opponent_punts_had_blocked_Set() const{
    return m_opponent_punts_had_blocked_isSet;
}

bool OAITeamGame::is_opponent_punts_had_blocked_Valid() const{
    return m_opponent_punts_had_blocked_isValid;
}

qint32 OAITeamGame::getOpponentQuarterbackHits() const {
    return m_opponent_quarterback_hits;
}
void OAITeamGame::setOpponentQuarterbackHits(const qint32 &opponent_quarterback_hits) {
    m_opponent_quarterback_hits = opponent_quarterback_hits;
    m_opponent_quarterback_hits_isSet = true;
}

bool OAITeamGame::is_opponent_quarterback_hits_Set() const{
    return m_opponent_quarterback_hits_isSet;
}

bool OAITeamGame::is_opponent_quarterback_hits_Valid() const{
    return m_opponent_quarterback_hits_isValid;
}

qint32 OAITeamGame::getOpponentQuarterbackHitsDifferential() const {
    return m_opponent_quarterback_hits_differential;
}
void OAITeamGame::setOpponentQuarterbackHitsDifferential(const qint32 &opponent_quarterback_hits_differential) {
    m_opponent_quarterback_hits_differential = opponent_quarterback_hits_differential;
    m_opponent_quarterback_hits_differential_isSet = true;
}

bool OAITeamGame::is_opponent_quarterback_hits_differential_Set() const{
    return m_opponent_quarterback_hits_differential_isSet;
}

bool OAITeamGame::is_opponent_quarterback_hits_differential_Valid() const{
    return m_opponent_quarterback_hits_differential_isValid;
}

double OAITeamGame::getOpponentQuarterbackHitsPercentage() const {
    return m_opponent_quarterback_hits_percentage;
}
void OAITeamGame::setOpponentQuarterbackHitsPercentage(const double &opponent_quarterback_hits_percentage) {
    m_opponent_quarterback_hits_percentage = opponent_quarterback_hits_percentage;
    m_opponent_quarterback_hits_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_quarterback_hits_percentage_Set() const{
    return m_opponent_quarterback_hits_percentage_isSet;
}

bool OAITeamGame::is_opponent_quarterback_hits_percentage_Valid() const{
    return m_opponent_quarterback_hits_percentage_isValid;
}

qint32 OAITeamGame::getOpponentQuarterbackSacksDifferential() const {
    return m_opponent_quarterback_sacks_differential;
}
void OAITeamGame::setOpponentQuarterbackSacksDifferential(const qint32 &opponent_quarterback_sacks_differential) {
    m_opponent_quarterback_sacks_differential = opponent_quarterback_sacks_differential;
    m_opponent_quarterback_sacks_differential_isSet = true;
}

bool OAITeamGame::is_opponent_quarterback_sacks_differential_Set() const{
    return m_opponent_quarterback_sacks_differential_isSet;
}

bool OAITeamGame::is_opponent_quarterback_sacks_differential_Valid() const{
    return m_opponent_quarterback_sacks_differential_isValid;
}

qint32 OAITeamGame::getOpponentRedZoneAttempts() const {
    return m_opponent_red_zone_attempts;
}
void OAITeamGame::setOpponentRedZoneAttempts(const qint32 &opponent_red_zone_attempts) {
    m_opponent_red_zone_attempts = opponent_red_zone_attempts;
    m_opponent_red_zone_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_red_zone_attempts_Set() const{
    return m_opponent_red_zone_attempts_isSet;
}

bool OAITeamGame::is_opponent_red_zone_attempts_Valid() const{
    return m_opponent_red_zone_attempts_isValid;
}

qint32 OAITeamGame::getOpponentRedZoneConversions() const {
    return m_opponent_red_zone_conversions;
}
void OAITeamGame::setOpponentRedZoneConversions(const qint32 &opponent_red_zone_conversions) {
    m_opponent_red_zone_conversions = opponent_red_zone_conversions;
    m_opponent_red_zone_conversions_isSet = true;
}

bool OAITeamGame::is_opponent_red_zone_conversions_Set() const{
    return m_opponent_red_zone_conversions_isSet;
}

bool OAITeamGame::is_opponent_red_zone_conversions_Valid() const{
    return m_opponent_red_zone_conversions_isValid;
}

double OAITeamGame::getOpponentRedZonePercentage() const {
    return m_opponent_red_zone_percentage;
}
void OAITeamGame::setOpponentRedZonePercentage(const double &opponent_red_zone_percentage) {
    m_opponent_red_zone_percentage = opponent_red_zone_percentage;
    m_opponent_red_zone_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_red_zone_percentage_Set() const{
    return m_opponent_red_zone_percentage_isSet;
}

bool OAITeamGame::is_opponent_red_zone_percentage_Valid() const{
    return m_opponent_red_zone_percentage_isValid;
}

qint32 OAITeamGame::getOpponentReturnYards() const {
    return m_opponent_return_yards;
}
void OAITeamGame::setOpponentReturnYards(const qint32 &opponent_return_yards) {
    m_opponent_return_yards = opponent_return_yards;
    m_opponent_return_yards_isSet = true;
}

bool OAITeamGame::is_opponent_return_yards_Set() const{
    return m_opponent_return_yards_isSet;
}

bool OAITeamGame::is_opponent_return_yards_Valid() const{
    return m_opponent_return_yards_isValid;
}

qint32 OAITeamGame::getOpponentRushingAttempts() const {
    return m_opponent_rushing_attempts;
}
void OAITeamGame::setOpponentRushingAttempts(const qint32 &opponent_rushing_attempts) {
    m_opponent_rushing_attempts = opponent_rushing_attempts;
    m_opponent_rushing_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_rushing_attempts_Set() const{
    return m_opponent_rushing_attempts_isSet;
}

bool OAITeamGame::is_opponent_rushing_attempts_Valid() const{
    return m_opponent_rushing_attempts_isValid;
}

qint32 OAITeamGame::getOpponentRushingTouchdowns() const {
    return m_opponent_rushing_touchdowns;
}
void OAITeamGame::setOpponentRushingTouchdowns(const qint32 &opponent_rushing_touchdowns) {
    m_opponent_rushing_touchdowns = opponent_rushing_touchdowns;
    m_opponent_rushing_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_rushing_touchdowns_Set() const{
    return m_opponent_rushing_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_rushing_touchdowns_Valid() const{
    return m_opponent_rushing_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentRushingYards() const {
    return m_opponent_rushing_yards;
}
void OAITeamGame::setOpponentRushingYards(const qint32 &opponent_rushing_yards) {
    m_opponent_rushing_yards = opponent_rushing_yards;
    m_opponent_rushing_yards_isSet = true;
}

bool OAITeamGame::is_opponent_rushing_yards_Set() const{
    return m_opponent_rushing_yards_isSet;
}

bool OAITeamGame::is_opponent_rushing_yards_Valid() const{
    return m_opponent_rushing_yards_isValid;
}

double OAITeamGame::getOpponentRushingYardsPerAttempt() const {
    return m_opponent_rushing_yards_per_attempt;
}
void OAITeamGame::setOpponentRushingYardsPerAttempt(const double &opponent_rushing_yards_per_attempt) {
    m_opponent_rushing_yards_per_attempt = opponent_rushing_yards_per_attempt;
    m_opponent_rushing_yards_per_attempt_isSet = true;
}

bool OAITeamGame::is_opponent_rushing_yards_per_attempt_Set() const{
    return m_opponent_rushing_yards_per_attempt_isSet;
}

bool OAITeamGame::is_opponent_rushing_yards_per_attempt_Valid() const{
    return m_opponent_rushing_yards_per_attempt_isValid;
}

qint32 OAITeamGame::getOpponentSackYards() const {
    return m_opponent_sack_yards;
}
void OAITeamGame::setOpponentSackYards(const qint32 &opponent_sack_yards) {
    m_opponent_sack_yards = opponent_sack_yards;
    m_opponent_sack_yards_isSet = true;
}

bool OAITeamGame::is_opponent_sack_yards_Set() const{
    return m_opponent_sack_yards_isSet;
}

bool OAITeamGame::is_opponent_sack_yards_Valid() const{
    return m_opponent_sack_yards_isValid;
}

qint32 OAITeamGame::getOpponentSacks() const {
    return m_opponent_sacks;
}
void OAITeamGame::setOpponentSacks(const qint32 &opponent_sacks) {
    m_opponent_sacks = opponent_sacks;
    m_opponent_sacks_isSet = true;
}

bool OAITeamGame::is_opponent_sacks_Set() const{
    return m_opponent_sacks_isSet;
}

bool OAITeamGame::is_opponent_sacks_Valid() const{
    return m_opponent_sacks_isValid;
}

qint32 OAITeamGame::getOpponentSafeties() const {
    return m_opponent_safeties;
}
void OAITeamGame::setOpponentSafeties(const qint32 &opponent_safeties) {
    m_opponent_safeties = opponent_safeties;
    m_opponent_safeties_isSet = true;
}

bool OAITeamGame::is_opponent_safeties_Set() const{
    return m_opponent_safeties_isSet;
}

bool OAITeamGame::is_opponent_safeties_Valid() const{
    return m_opponent_safeties_isValid;
}

qint32 OAITeamGame::getOpponentScore() const {
    return m_opponent_score;
}
void OAITeamGame::setOpponentScore(const qint32 &opponent_score) {
    m_opponent_score = opponent_score;
    m_opponent_score_isSet = true;
}

bool OAITeamGame::is_opponent_score_Set() const{
    return m_opponent_score_isSet;
}

bool OAITeamGame::is_opponent_score_Valid() const{
    return m_opponent_score_isValid;
}

qint32 OAITeamGame::getOpponentScoreOvertime() const {
    return m_opponent_score_overtime;
}
void OAITeamGame::setOpponentScoreOvertime(const qint32 &opponent_score_overtime) {
    m_opponent_score_overtime = opponent_score_overtime;
    m_opponent_score_overtime_isSet = true;
}

bool OAITeamGame::is_opponent_score_overtime_Set() const{
    return m_opponent_score_overtime_isSet;
}

bool OAITeamGame::is_opponent_score_overtime_Valid() const{
    return m_opponent_score_overtime_isValid;
}

qint32 OAITeamGame::getOpponentScoreQuarter1() const {
    return m_opponent_score_quarter1;
}
void OAITeamGame::setOpponentScoreQuarter1(const qint32 &opponent_score_quarter1) {
    m_opponent_score_quarter1 = opponent_score_quarter1;
    m_opponent_score_quarter1_isSet = true;
}

bool OAITeamGame::is_opponent_score_quarter1_Set() const{
    return m_opponent_score_quarter1_isSet;
}

bool OAITeamGame::is_opponent_score_quarter1_Valid() const{
    return m_opponent_score_quarter1_isValid;
}

qint32 OAITeamGame::getOpponentScoreQuarter2() const {
    return m_opponent_score_quarter2;
}
void OAITeamGame::setOpponentScoreQuarter2(const qint32 &opponent_score_quarter2) {
    m_opponent_score_quarter2 = opponent_score_quarter2;
    m_opponent_score_quarter2_isSet = true;
}

bool OAITeamGame::is_opponent_score_quarter2_Set() const{
    return m_opponent_score_quarter2_isSet;
}

bool OAITeamGame::is_opponent_score_quarter2_Valid() const{
    return m_opponent_score_quarter2_isValid;
}

qint32 OAITeamGame::getOpponentScoreQuarter3() const {
    return m_opponent_score_quarter3;
}
void OAITeamGame::setOpponentScoreQuarter3(const qint32 &opponent_score_quarter3) {
    m_opponent_score_quarter3 = opponent_score_quarter3;
    m_opponent_score_quarter3_isSet = true;
}

bool OAITeamGame::is_opponent_score_quarter3_Set() const{
    return m_opponent_score_quarter3_isSet;
}

bool OAITeamGame::is_opponent_score_quarter3_Valid() const{
    return m_opponent_score_quarter3_isValid;
}

qint32 OAITeamGame::getOpponentScoreQuarter4() const {
    return m_opponent_score_quarter4;
}
void OAITeamGame::setOpponentScoreQuarter4(const qint32 &opponent_score_quarter4) {
    m_opponent_score_quarter4 = opponent_score_quarter4;
    m_opponent_score_quarter4_isSet = true;
}

bool OAITeamGame::is_opponent_score_quarter4_Set() const{
    return m_opponent_score_quarter4_isSet;
}

bool OAITeamGame::is_opponent_score_quarter4_Valid() const{
    return m_opponent_score_quarter4_isValid;
}

qint32 OAITeamGame::getOpponentSoloTackles() const {
    return m_opponent_solo_tackles;
}
void OAITeamGame::setOpponentSoloTackles(const qint32 &opponent_solo_tackles) {
    m_opponent_solo_tackles = opponent_solo_tackles;
    m_opponent_solo_tackles_isSet = true;
}

bool OAITeamGame::is_opponent_solo_tackles_Set() const{
    return m_opponent_solo_tackles_isSet;
}

bool OAITeamGame::is_opponent_solo_tackles_Valid() const{
    return m_opponent_solo_tackles_isValid;
}

qint32 OAITeamGame::getOpponentTacklesForLoss() const {
    return m_opponent_tackles_for_loss;
}
void OAITeamGame::setOpponentTacklesForLoss(const qint32 &opponent_tackles_for_loss) {
    m_opponent_tackles_for_loss = opponent_tackles_for_loss;
    m_opponent_tackles_for_loss_isSet = true;
}

bool OAITeamGame::is_opponent_tackles_for_loss_Set() const{
    return m_opponent_tackles_for_loss_isSet;
}

bool OAITeamGame::is_opponent_tackles_for_loss_Valid() const{
    return m_opponent_tackles_for_loss_isValid;
}

qint32 OAITeamGame::getOpponentTacklesForLossDifferential() const {
    return m_opponent_tackles_for_loss_differential;
}
void OAITeamGame::setOpponentTacklesForLossDifferential(const qint32 &opponent_tackles_for_loss_differential) {
    m_opponent_tackles_for_loss_differential = opponent_tackles_for_loss_differential;
    m_opponent_tackles_for_loss_differential_isSet = true;
}

bool OAITeamGame::is_opponent_tackles_for_loss_differential_Set() const{
    return m_opponent_tackles_for_loss_differential_isSet;
}

bool OAITeamGame::is_opponent_tackles_for_loss_differential_Valid() const{
    return m_opponent_tackles_for_loss_differential_isValid;
}

double OAITeamGame::getOpponentTacklesForLossPercentage() const {
    return m_opponent_tackles_for_loss_percentage;
}
void OAITeamGame::setOpponentTacklesForLossPercentage(const double &opponent_tackles_for_loss_percentage) {
    m_opponent_tackles_for_loss_percentage = opponent_tackles_for_loss_percentage;
    m_opponent_tackles_for_loss_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_tackles_for_loss_percentage_Set() const{
    return m_opponent_tackles_for_loss_percentage_isSet;
}

bool OAITeamGame::is_opponent_tackles_for_loss_percentage_Valid() const{
    return m_opponent_tackles_for_loss_percentage_isValid;
}

qint32 OAITeamGame::getOpponentTakeaways() const {
    return m_opponent_takeaways;
}
void OAITeamGame::setOpponentTakeaways(const qint32 &opponent_takeaways) {
    m_opponent_takeaways = opponent_takeaways;
    m_opponent_takeaways_isSet = true;
}

bool OAITeamGame::is_opponent_takeaways_Set() const{
    return m_opponent_takeaways_isSet;
}

bool OAITeamGame::is_opponent_takeaways_Valid() const{
    return m_opponent_takeaways_isValid;
}

qint32 OAITeamGame::getOpponentThirdDownAttempts() const {
    return m_opponent_third_down_attempts;
}
void OAITeamGame::setOpponentThirdDownAttempts(const qint32 &opponent_third_down_attempts) {
    m_opponent_third_down_attempts = opponent_third_down_attempts;
    m_opponent_third_down_attempts_isSet = true;
}

bool OAITeamGame::is_opponent_third_down_attempts_Set() const{
    return m_opponent_third_down_attempts_isSet;
}

bool OAITeamGame::is_opponent_third_down_attempts_Valid() const{
    return m_opponent_third_down_attempts_isValid;
}

qint32 OAITeamGame::getOpponentThirdDownConversions() const {
    return m_opponent_third_down_conversions;
}
void OAITeamGame::setOpponentThirdDownConversions(const qint32 &opponent_third_down_conversions) {
    m_opponent_third_down_conversions = opponent_third_down_conversions;
    m_opponent_third_down_conversions_isSet = true;
}

bool OAITeamGame::is_opponent_third_down_conversions_Set() const{
    return m_opponent_third_down_conversions_isSet;
}

bool OAITeamGame::is_opponent_third_down_conversions_Valid() const{
    return m_opponent_third_down_conversions_isValid;
}

double OAITeamGame::getOpponentThirdDownPercentage() const {
    return m_opponent_third_down_percentage;
}
void OAITeamGame::setOpponentThirdDownPercentage(const double &opponent_third_down_percentage) {
    m_opponent_third_down_percentage = opponent_third_down_percentage;
    m_opponent_third_down_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_third_down_percentage_Set() const{
    return m_opponent_third_down_percentage_isSet;
}

bool OAITeamGame::is_opponent_third_down_percentage_Valid() const{
    return m_opponent_third_down_percentage_isValid;
}

QString OAITeamGame::getOpponentTimeOfPossession() const {
    return m_opponent_time_of_possession;
}
void OAITeamGame::setOpponentTimeOfPossession(const QString &opponent_time_of_possession) {
    m_opponent_time_of_possession = opponent_time_of_possession;
    m_opponent_time_of_possession_isSet = true;
}

bool OAITeamGame::is_opponent_time_of_possession_Set() const{
    return m_opponent_time_of_possession_isSet;
}

bool OAITeamGame::is_opponent_time_of_possession_Valid() const{
    return m_opponent_time_of_possession_isValid;
}

qint32 OAITeamGame::getOpponentTimeOfPossessionMinutes() const {
    return m_opponent_time_of_possession_minutes;
}
void OAITeamGame::setOpponentTimeOfPossessionMinutes(const qint32 &opponent_time_of_possession_minutes) {
    m_opponent_time_of_possession_minutes = opponent_time_of_possession_minutes;
    m_opponent_time_of_possession_minutes_isSet = true;
}

bool OAITeamGame::is_opponent_time_of_possession_minutes_Set() const{
    return m_opponent_time_of_possession_minutes_isSet;
}

bool OAITeamGame::is_opponent_time_of_possession_minutes_Valid() const{
    return m_opponent_time_of_possession_minutes_isValid;
}

qint32 OAITeamGame::getOpponentTimeOfPossessionSeconds() const {
    return m_opponent_time_of_possession_seconds;
}
void OAITeamGame::setOpponentTimeOfPossessionSeconds(const qint32 &opponent_time_of_possession_seconds) {
    m_opponent_time_of_possession_seconds = opponent_time_of_possession_seconds;
    m_opponent_time_of_possession_seconds_isSet = true;
}

bool OAITeamGame::is_opponent_time_of_possession_seconds_Set() const{
    return m_opponent_time_of_possession_seconds_isSet;
}

bool OAITeamGame::is_opponent_time_of_possession_seconds_Valid() const{
    return m_opponent_time_of_possession_seconds_isValid;
}

qint32 OAITeamGame::getOpponentTimesSacked() const {
    return m_opponent_times_sacked;
}
void OAITeamGame::setOpponentTimesSacked(const qint32 &opponent_times_sacked) {
    m_opponent_times_sacked = opponent_times_sacked;
    m_opponent_times_sacked_isSet = true;
}

bool OAITeamGame::is_opponent_times_sacked_Set() const{
    return m_opponent_times_sacked_isSet;
}

bool OAITeamGame::is_opponent_times_sacked_Valid() const{
    return m_opponent_times_sacked_isValid;
}

double OAITeamGame::getOpponentTimesSackedPercentage() const {
    return m_opponent_times_sacked_percentage;
}
void OAITeamGame::setOpponentTimesSackedPercentage(const double &opponent_times_sacked_percentage) {
    m_opponent_times_sacked_percentage = opponent_times_sacked_percentage;
    m_opponent_times_sacked_percentage_isSet = true;
}

bool OAITeamGame::is_opponent_times_sacked_percentage_Set() const{
    return m_opponent_times_sacked_percentage_isSet;
}

bool OAITeamGame::is_opponent_times_sacked_percentage_Valid() const{
    return m_opponent_times_sacked_percentage_isValid;
}

qint32 OAITeamGame::getOpponentTimesSackedYards() const {
    return m_opponent_times_sacked_yards;
}
void OAITeamGame::setOpponentTimesSackedYards(const qint32 &opponent_times_sacked_yards) {
    m_opponent_times_sacked_yards = opponent_times_sacked_yards;
    m_opponent_times_sacked_yards_isSet = true;
}

bool OAITeamGame::is_opponent_times_sacked_yards_Set() const{
    return m_opponent_times_sacked_yards_isSet;
}

bool OAITeamGame::is_opponent_times_sacked_yards_Valid() const{
    return m_opponent_times_sacked_yards_isValid;
}

qint32 OAITeamGame::getOpponentTouchdowns() const {
    return m_opponent_touchdowns;
}
void OAITeamGame::setOpponentTouchdowns(const qint32 &opponent_touchdowns) {
    m_opponent_touchdowns = opponent_touchdowns;
    m_opponent_touchdowns_isSet = true;
}

bool OAITeamGame::is_opponent_touchdowns_Set() const{
    return m_opponent_touchdowns_isSet;
}

bool OAITeamGame::is_opponent_touchdowns_Valid() const{
    return m_opponent_touchdowns_isValid;
}

qint32 OAITeamGame::getOpponentTurnoverDifferential() const {
    return m_opponent_turnover_differential;
}
void OAITeamGame::setOpponentTurnoverDifferential(const qint32 &opponent_turnover_differential) {
    m_opponent_turnover_differential = opponent_turnover_differential;
    m_opponent_turnover_differential_isSet = true;
}

bool OAITeamGame::is_opponent_turnover_differential_Set() const{
    return m_opponent_turnover_differential_isSet;
}

bool OAITeamGame::is_opponent_turnover_differential_Valid() const{
    return m_opponent_turnover_differential_isValid;
}

qint32 OAITeamGame::getOpponentTwoPointConversionReturns() const {
    return m_opponent_two_point_conversion_returns;
}
void OAITeamGame::setOpponentTwoPointConversionReturns(const qint32 &opponent_two_point_conversion_returns) {
    m_opponent_two_point_conversion_returns = opponent_two_point_conversion_returns;
    m_opponent_two_point_conversion_returns_isSet = true;
}

bool OAITeamGame::is_opponent_two_point_conversion_returns_Set() const{
    return m_opponent_two_point_conversion_returns_isSet;
}

bool OAITeamGame::is_opponent_two_point_conversion_returns_Valid() const{
    return m_opponent_two_point_conversion_returns_isValid;
}

double OAITeamGame::getOverUnder() const {
    return m_over_under;
}
void OAITeamGame::setOverUnder(const double &over_under) {
    m_over_under = over_under;
    m_over_under_isSet = true;
}

bool OAITeamGame::is_over_under_Set() const{
    return m_over_under_isSet;
}

bool OAITeamGame::is_over_under_Valid() const{
    return m_over_under_isValid;
}

double OAITeamGame::getPasserRating() const {
    return m_passer_rating;
}
void OAITeamGame::setPasserRating(const double &passer_rating) {
    m_passer_rating = passer_rating;
    m_passer_rating_isSet = true;
}

bool OAITeamGame::is_passer_rating_Set() const{
    return m_passer_rating_isSet;
}

bool OAITeamGame::is_passer_rating_Valid() const{
    return m_passer_rating_isValid;
}

qint32 OAITeamGame::getPassesDefended() const {
    return m_passes_defended;
}
void OAITeamGame::setPassesDefended(const qint32 &passes_defended) {
    m_passes_defended = passes_defended;
    m_passes_defended_isSet = true;
}

bool OAITeamGame::is_passes_defended_Set() const{
    return m_passes_defended_isSet;
}

bool OAITeamGame::is_passes_defended_Valid() const{
    return m_passes_defended_isValid;
}

qint32 OAITeamGame::getPassingAttempts() const {
    return m_passing_attempts;
}
void OAITeamGame::setPassingAttempts(const qint32 &passing_attempts) {
    m_passing_attempts = passing_attempts;
    m_passing_attempts_isSet = true;
}

bool OAITeamGame::is_passing_attempts_Set() const{
    return m_passing_attempts_isSet;
}

bool OAITeamGame::is_passing_attempts_Valid() const{
    return m_passing_attempts_isValid;
}

qint32 OAITeamGame::getPassingCompletions() const {
    return m_passing_completions;
}
void OAITeamGame::setPassingCompletions(const qint32 &passing_completions) {
    m_passing_completions = passing_completions;
    m_passing_completions_isSet = true;
}

bool OAITeamGame::is_passing_completions_Set() const{
    return m_passing_completions_isSet;
}

bool OAITeamGame::is_passing_completions_Valid() const{
    return m_passing_completions_isValid;
}

qint32 OAITeamGame::getPassingDropbacks() const {
    return m_passing_dropbacks;
}
void OAITeamGame::setPassingDropbacks(const qint32 &passing_dropbacks) {
    m_passing_dropbacks = passing_dropbacks;
    m_passing_dropbacks_isSet = true;
}

bool OAITeamGame::is_passing_dropbacks_Set() const{
    return m_passing_dropbacks_isSet;
}

bool OAITeamGame::is_passing_dropbacks_Valid() const{
    return m_passing_dropbacks_isValid;
}

double OAITeamGame::getPassingInterceptionPercentage() const {
    return m_passing_interception_percentage;
}
void OAITeamGame::setPassingInterceptionPercentage(const double &passing_interception_percentage) {
    m_passing_interception_percentage = passing_interception_percentage;
    m_passing_interception_percentage_isSet = true;
}

bool OAITeamGame::is_passing_interception_percentage_Set() const{
    return m_passing_interception_percentage_isSet;
}

bool OAITeamGame::is_passing_interception_percentage_Valid() const{
    return m_passing_interception_percentage_isValid;
}

qint32 OAITeamGame::getPassingInterceptions() const {
    return m_passing_interceptions;
}
void OAITeamGame::setPassingInterceptions(const qint32 &passing_interceptions) {
    m_passing_interceptions = passing_interceptions;
    m_passing_interceptions_isSet = true;
}

bool OAITeamGame::is_passing_interceptions_Set() const{
    return m_passing_interceptions_isSet;
}

bool OAITeamGame::is_passing_interceptions_Valid() const{
    return m_passing_interceptions_isValid;
}

qint32 OAITeamGame::getPassingTouchdowns() const {
    return m_passing_touchdowns;
}
void OAITeamGame::setPassingTouchdowns(const qint32 &passing_touchdowns) {
    m_passing_touchdowns = passing_touchdowns;
    m_passing_touchdowns_isSet = true;
}

bool OAITeamGame::is_passing_touchdowns_Set() const{
    return m_passing_touchdowns_isSet;
}

bool OAITeamGame::is_passing_touchdowns_Valid() const{
    return m_passing_touchdowns_isValid;
}

qint32 OAITeamGame::getPassingYards() const {
    return m_passing_yards;
}
void OAITeamGame::setPassingYards(const qint32 &passing_yards) {
    m_passing_yards = passing_yards;
    m_passing_yards_isSet = true;
}

bool OAITeamGame::is_passing_yards_Set() const{
    return m_passing_yards_isSet;
}

bool OAITeamGame::is_passing_yards_Valid() const{
    return m_passing_yards_isValid;
}

double OAITeamGame::getPassingYardsPerAttempt() const {
    return m_passing_yards_per_attempt;
}
void OAITeamGame::setPassingYardsPerAttempt(const double &passing_yards_per_attempt) {
    m_passing_yards_per_attempt = passing_yards_per_attempt;
    m_passing_yards_per_attempt_isSet = true;
}

bool OAITeamGame::is_passing_yards_per_attempt_Set() const{
    return m_passing_yards_per_attempt_isSet;
}

bool OAITeamGame::is_passing_yards_per_attempt_Valid() const{
    return m_passing_yards_per_attempt_isValid;
}

double OAITeamGame::getPassingYardsPerCompletion() const {
    return m_passing_yards_per_completion;
}
void OAITeamGame::setPassingYardsPerCompletion(const double &passing_yards_per_completion) {
    m_passing_yards_per_completion = passing_yards_per_completion;
    m_passing_yards_per_completion_isSet = true;
}

bool OAITeamGame::is_passing_yards_per_completion_Set() const{
    return m_passing_yards_per_completion_isSet;
}

bool OAITeamGame::is_passing_yards_per_completion_Valid() const{
    return m_passing_yards_per_completion_isValid;
}

qint32 OAITeamGame::getPenalties() const {
    return m_penalties;
}
void OAITeamGame::setPenalties(const qint32 &penalties) {
    m_penalties = penalties;
    m_penalties_isSet = true;
}

bool OAITeamGame::is_penalties_Set() const{
    return m_penalties_isSet;
}

bool OAITeamGame::is_penalties_Valid() const{
    return m_penalties_isValid;
}

qint32 OAITeamGame::getPenaltyYardDifferential() const {
    return m_penalty_yard_differential;
}
void OAITeamGame::setPenaltyYardDifferential(const qint32 &penalty_yard_differential) {
    m_penalty_yard_differential = penalty_yard_differential;
    m_penalty_yard_differential_isSet = true;
}

bool OAITeamGame::is_penalty_yard_differential_Set() const{
    return m_penalty_yard_differential_isSet;
}

bool OAITeamGame::is_penalty_yard_differential_Valid() const{
    return m_penalty_yard_differential_isValid;
}

qint32 OAITeamGame::getPenaltyYards() const {
    return m_penalty_yards;
}
void OAITeamGame::setPenaltyYards(const qint32 &penalty_yards) {
    m_penalty_yards = penalty_yards;
    m_penalty_yards_isSet = true;
}

bool OAITeamGame::is_penalty_yards_Set() const{
    return m_penalty_yards_isSet;
}

bool OAITeamGame::is_penalty_yards_Valid() const{
    return m_penalty_yards_isValid;
}

QString OAITeamGame::getPlayingSurface() const {
    return m_playing_surface;
}
void OAITeamGame::setPlayingSurface(const QString &playing_surface) {
    m_playing_surface = playing_surface;
    m_playing_surface_isSet = true;
}

bool OAITeamGame::is_playing_surface_Set() const{
    return m_playing_surface_isSet;
}

bool OAITeamGame::is_playing_surface_Valid() const{
    return m_playing_surface_isValid;
}

qint32 OAITeamGame::getPointDifferential() const {
    return m_point_differential;
}
void OAITeamGame::setPointDifferential(const qint32 &point_differential) {
    m_point_differential = point_differential;
    m_point_differential_isSet = true;
}

bool OAITeamGame::is_point_differential_Set() const{
    return m_point_differential_isSet;
}

bool OAITeamGame::is_point_differential_Valid() const{
    return m_point_differential_isValid;
}

double OAITeamGame::getPointSpread() const {
    return m_point_spread;
}
void OAITeamGame::setPointSpread(const double &point_spread) {
    m_point_spread = point_spread;
    m_point_spread_isSet = true;
}

bool OAITeamGame::is_point_spread_Set() const{
    return m_point_spread_isSet;
}

bool OAITeamGame::is_point_spread_Valid() const{
    return m_point_spread_isValid;
}

double OAITeamGame::getPuntAverage() const {
    return m_punt_average;
}
void OAITeamGame::setPuntAverage(const double &punt_average) {
    m_punt_average = punt_average;
    m_punt_average_isSet = true;
}

bool OAITeamGame::is_punt_average_Set() const{
    return m_punt_average_isSet;
}

bool OAITeamGame::is_punt_average_Valid() const{
    return m_punt_average_isValid;
}

double OAITeamGame::getPuntNetAverage() const {
    return m_punt_net_average;
}
void OAITeamGame::setPuntNetAverage(const double &punt_net_average) {
    m_punt_net_average = punt_net_average;
    m_punt_net_average_isSet = true;
}

bool OAITeamGame::is_punt_net_average_Set() const{
    return m_punt_net_average_isSet;
}

bool OAITeamGame::is_punt_net_average_Valid() const{
    return m_punt_net_average_isValid;
}

qint32 OAITeamGame::getPuntNetYards() const {
    return m_punt_net_yards;
}
void OAITeamGame::setPuntNetYards(const qint32 &punt_net_yards) {
    m_punt_net_yards = punt_net_yards;
    m_punt_net_yards_isSet = true;
}

bool OAITeamGame::is_punt_net_yards_Set() const{
    return m_punt_net_yards_isSet;
}

bool OAITeamGame::is_punt_net_yards_Valid() const{
    return m_punt_net_yards_isValid;
}

double OAITeamGame::getPuntReturnAverage() const {
    return m_punt_return_average;
}
void OAITeamGame::setPuntReturnAverage(const double &punt_return_average) {
    m_punt_return_average = punt_return_average;
    m_punt_return_average_isSet = true;
}

bool OAITeamGame::is_punt_return_average_Set() const{
    return m_punt_return_average_isSet;
}

bool OAITeamGame::is_punt_return_average_Valid() const{
    return m_punt_return_average_isValid;
}

qint32 OAITeamGame::getPuntReturnLong() const {
    return m_punt_return_long;
}
void OAITeamGame::setPuntReturnLong(const qint32 &punt_return_long) {
    m_punt_return_long = punt_return_long;
    m_punt_return_long_isSet = true;
}

bool OAITeamGame::is_punt_return_long_Set() const{
    return m_punt_return_long_isSet;
}

bool OAITeamGame::is_punt_return_long_Valid() const{
    return m_punt_return_long_isValid;
}

qint32 OAITeamGame::getPuntReturnTouchdowns() const {
    return m_punt_return_touchdowns;
}
void OAITeamGame::setPuntReturnTouchdowns(const qint32 &punt_return_touchdowns) {
    m_punt_return_touchdowns = punt_return_touchdowns;
    m_punt_return_touchdowns_isSet = true;
}

bool OAITeamGame::is_punt_return_touchdowns_Set() const{
    return m_punt_return_touchdowns_isSet;
}

bool OAITeamGame::is_punt_return_touchdowns_Valid() const{
    return m_punt_return_touchdowns_isValid;
}

qint32 OAITeamGame::getPuntReturnYardDifferential() const {
    return m_punt_return_yard_differential;
}
void OAITeamGame::setPuntReturnYardDifferential(const qint32 &punt_return_yard_differential) {
    m_punt_return_yard_differential = punt_return_yard_differential;
    m_punt_return_yard_differential_isSet = true;
}

bool OAITeamGame::is_punt_return_yard_differential_Set() const{
    return m_punt_return_yard_differential_isSet;
}

bool OAITeamGame::is_punt_return_yard_differential_Valid() const{
    return m_punt_return_yard_differential_isValid;
}

qint32 OAITeamGame::getPuntReturnYards() const {
    return m_punt_return_yards;
}
void OAITeamGame::setPuntReturnYards(const qint32 &punt_return_yards) {
    m_punt_return_yards = punt_return_yards;
    m_punt_return_yards_isSet = true;
}

bool OAITeamGame::is_punt_return_yards_Set() const{
    return m_punt_return_yards_isSet;
}

bool OAITeamGame::is_punt_return_yards_Valid() const{
    return m_punt_return_yards_isValid;
}

qint32 OAITeamGame::getPuntReturns() const {
    return m_punt_returns;
}
void OAITeamGame::setPuntReturns(const qint32 &punt_returns) {
    m_punt_returns = punt_returns;
    m_punt_returns_isSet = true;
}

bool OAITeamGame::is_punt_returns_Set() const{
    return m_punt_returns_isSet;
}

bool OAITeamGame::is_punt_returns_Valid() const{
    return m_punt_returns_isValid;
}

qint32 OAITeamGame::getPuntYards() const {
    return m_punt_yards;
}
void OAITeamGame::setPuntYards(const qint32 &punt_yards) {
    m_punt_yards = punt_yards;
    m_punt_yards_isSet = true;
}

bool OAITeamGame::is_punt_yards_Set() const{
    return m_punt_yards_isSet;
}

bool OAITeamGame::is_punt_yards_Valid() const{
    return m_punt_yards_isValid;
}

qint32 OAITeamGame::getPunts() const {
    return m_punts;
}
void OAITeamGame::setPunts(const qint32 &punts) {
    m_punts = punts;
    m_punts_isSet = true;
}

bool OAITeamGame::is_punts_Set() const{
    return m_punts_isSet;
}

bool OAITeamGame::is_punts_Valid() const{
    return m_punts_isValid;
}

qint32 OAITeamGame::getPuntsHadBlocked() const {
    return m_punts_had_blocked;
}
void OAITeamGame::setPuntsHadBlocked(const qint32 &punts_had_blocked) {
    m_punts_had_blocked = punts_had_blocked;
    m_punts_had_blocked_isSet = true;
}

bool OAITeamGame::is_punts_had_blocked_Set() const{
    return m_punts_had_blocked_isSet;
}

bool OAITeamGame::is_punts_had_blocked_Valid() const{
    return m_punts_had_blocked_isValid;
}

qint32 OAITeamGame::getQuarterbackHits() const {
    return m_quarterback_hits;
}
void OAITeamGame::setQuarterbackHits(const qint32 &quarterback_hits) {
    m_quarterback_hits = quarterback_hits;
    m_quarterback_hits_isSet = true;
}

bool OAITeamGame::is_quarterback_hits_Set() const{
    return m_quarterback_hits_isSet;
}

bool OAITeamGame::is_quarterback_hits_Valid() const{
    return m_quarterback_hits_isValid;
}

qint32 OAITeamGame::getQuarterbackHitsDifferential() const {
    return m_quarterback_hits_differential;
}
void OAITeamGame::setQuarterbackHitsDifferential(const qint32 &quarterback_hits_differential) {
    m_quarterback_hits_differential = quarterback_hits_differential;
    m_quarterback_hits_differential_isSet = true;
}

bool OAITeamGame::is_quarterback_hits_differential_Set() const{
    return m_quarterback_hits_differential_isSet;
}

bool OAITeamGame::is_quarterback_hits_differential_Valid() const{
    return m_quarterback_hits_differential_isValid;
}

double OAITeamGame::getQuarterbackHitsPercentage() const {
    return m_quarterback_hits_percentage;
}
void OAITeamGame::setQuarterbackHitsPercentage(const double &quarterback_hits_percentage) {
    m_quarterback_hits_percentage = quarterback_hits_percentage;
    m_quarterback_hits_percentage_isSet = true;
}

bool OAITeamGame::is_quarterback_hits_percentage_Set() const{
    return m_quarterback_hits_percentage_isSet;
}

bool OAITeamGame::is_quarterback_hits_percentage_Valid() const{
    return m_quarterback_hits_percentage_isValid;
}

qint32 OAITeamGame::getQuarterbackSacksDifferential() const {
    return m_quarterback_sacks_differential;
}
void OAITeamGame::setQuarterbackSacksDifferential(const qint32 &quarterback_sacks_differential) {
    m_quarterback_sacks_differential = quarterback_sacks_differential;
    m_quarterback_sacks_differential_isSet = true;
}

bool OAITeamGame::is_quarterback_sacks_differential_Set() const{
    return m_quarterback_sacks_differential_isSet;
}

bool OAITeamGame::is_quarterback_sacks_differential_Valid() const{
    return m_quarterback_sacks_differential_isValid;
}

qint32 OAITeamGame::getRedZoneAttempts() const {
    return m_red_zone_attempts;
}
void OAITeamGame::setRedZoneAttempts(const qint32 &red_zone_attempts) {
    m_red_zone_attempts = red_zone_attempts;
    m_red_zone_attempts_isSet = true;
}

bool OAITeamGame::is_red_zone_attempts_Set() const{
    return m_red_zone_attempts_isSet;
}

bool OAITeamGame::is_red_zone_attempts_Valid() const{
    return m_red_zone_attempts_isValid;
}

qint32 OAITeamGame::getRedZoneConversions() const {
    return m_red_zone_conversions;
}
void OAITeamGame::setRedZoneConversions(const qint32 &red_zone_conversions) {
    m_red_zone_conversions = red_zone_conversions;
    m_red_zone_conversions_isSet = true;
}

bool OAITeamGame::is_red_zone_conversions_Set() const{
    return m_red_zone_conversions_isSet;
}

bool OAITeamGame::is_red_zone_conversions_Valid() const{
    return m_red_zone_conversions_isValid;
}

double OAITeamGame::getRedZonePercentage() const {
    return m_red_zone_percentage;
}
void OAITeamGame::setRedZonePercentage(const double &red_zone_percentage) {
    m_red_zone_percentage = red_zone_percentage;
    m_red_zone_percentage_isSet = true;
}

bool OAITeamGame::is_red_zone_percentage_Set() const{
    return m_red_zone_percentage_isSet;
}

bool OAITeamGame::is_red_zone_percentage_Valid() const{
    return m_red_zone_percentage_isValid;
}

qint32 OAITeamGame::getReturnYards() const {
    return m_return_yards;
}
void OAITeamGame::setReturnYards(const qint32 &return_yards) {
    m_return_yards = return_yards;
    m_return_yards_isSet = true;
}

bool OAITeamGame::is_return_yards_Set() const{
    return m_return_yards_isSet;
}

bool OAITeamGame::is_return_yards_Valid() const{
    return m_return_yards_isValid;
}

qint32 OAITeamGame::getRushingAttempts() const {
    return m_rushing_attempts;
}
void OAITeamGame::setRushingAttempts(const qint32 &rushing_attempts) {
    m_rushing_attempts = rushing_attempts;
    m_rushing_attempts_isSet = true;
}

bool OAITeamGame::is_rushing_attempts_Set() const{
    return m_rushing_attempts_isSet;
}

bool OAITeamGame::is_rushing_attempts_Valid() const{
    return m_rushing_attempts_isValid;
}

qint32 OAITeamGame::getRushingTouchdowns() const {
    return m_rushing_touchdowns;
}
void OAITeamGame::setRushingTouchdowns(const qint32 &rushing_touchdowns) {
    m_rushing_touchdowns = rushing_touchdowns;
    m_rushing_touchdowns_isSet = true;
}

bool OAITeamGame::is_rushing_touchdowns_Set() const{
    return m_rushing_touchdowns_isSet;
}

bool OAITeamGame::is_rushing_touchdowns_Valid() const{
    return m_rushing_touchdowns_isValid;
}

qint32 OAITeamGame::getRushingYards() const {
    return m_rushing_yards;
}
void OAITeamGame::setRushingYards(const qint32 &rushing_yards) {
    m_rushing_yards = rushing_yards;
    m_rushing_yards_isSet = true;
}

bool OAITeamGame::is_rushing_yards_Set() const{
    return m_rushing_yards_isSet;
}

bool OAITeamGame::is_rushing_yards_Valid() const{
    return m_rushing_yards_isValid;
}

double OAITeamGame::getRushingYardsPerAttempt() const {
    return m_rushing_yards_per_attempt;
}
void OAITeamGame::setRushingYardsPerAttempt(const double &rushing_yards_per_attempt) {
    m_rushing_yards_per_attempt = rushing_yards_per_attempt;
    m_rushing_yards_per_attempt_isSet = true;
}

bool OAITeamGame::is_rushing_yards_per_attempt_Set() const{
    return m_rushing_yards_per_attempt_isSet;
}

bool OAITeamGame::is_rushing_yards_per_attempt_Valid() const{
    return m_rushing_yards_per_attempt_isValid;
}

qint32 OAITeamGame::getSackYards() const {
    return m_sack_yards;
}
void OAITeamGame::setSackYards(const qint32 &sack_yards) {
    m_sack_yards = sack_yards;
    m_sack_yards_isSet = true;
}

bool OAITeamGame::is_sack_yards_Set() const{
    return m_sack_yards_isSet;
}

bool OAITeamGame::is_sack_yards_Valid() const{
    return m_sack_yards_isValid;
}

qint32 OAITeamGame::getSacks() const {
    return m_sacks;
}
void OAITeamGame::setSacks(const qint32 &sacks) {
    m_sacks = sacks;
    m_sacks_isSet = true;
}

bool OAITeamGame::is_sacks_Set() const{
    return m_sacks_isSet;
}

bool OAITeamGame::is_sacks_Valid() const{
    return m_sacks_isValid;
}

qint32 OAITeamGame::getSafeties() const {
    return m_safeties;
}
void OAITeamGame::setSafeties(const qint32 &safeties) {
    m_safeties = safeties;
    m_safeties_isSet = true;
}

bool OAITeamGame::is_safeties_Set() const{
    return m_safeties_isSet;
}

bool OAITeamGame::is_safeties_Valid() const{
    return m_safeties_isValid;
}

qint32 OAITeamGame::getScore() const {
    return m_score;
}
void OAITeamGame::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAITeamGame::is_score_Set() const{
    return m_score_isSet;
}

bool OAITeamGame::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAITeamGame::getScoreId() const {
    return m_score_id;
}
void OAITeamGame::setScoreId(const qint32 &score_id) {
    m_score_id = score_id;
    m_score_id_isSet = true;
}

bool OAITeamGame::is_score_id_Set() const{
    return m_score_id_isSet;
}

bool OAITeamGame::is_score_id_Valid() const{
    return m_score_id_isValid;
}

qint32 OAITeamGame::getScoreOvertime() const {
    return m_score_overtime;
}
void OAITeamGame::setScoreOvertime(const qint32 &score_overtime) {
    m_score_overtime = score_overtime;
    m_score_overtime_isSet = true;
}

bool OAITeamGame::is_score_overtime_Set() const{
    return m_score_overtime_isSet;
}

bool OAITeamGame::is_score_overtime_Valid() const{
    return m_score_overtime_isValid;
}

qint32 OAITeamGame::getScoreQuarter1() const {
    return m_score_quarter1;
}
void OAITeamGame::setScoreQuarter1(const qint32 &score_quarter1) {
    m_score_quarter1 = score_quarter1;
    m_score_quarter1_isSet = true;
}

bool OAITeamGame::is_score_quarter1_Set() const{
    return m_score_quarter1_isSet;
}

bool OAITeamGame::is_score_quarter1_Valid() const{
    return m_score_quarter1_isValid;
}

qint32 OAITeamGame::getScoreQuarter2() const {
    return m_score_quarter2;
}
void OAITeamGame::setScoreQuarter2(const qint32 &score_quarter2) {
    m_score_quarter2 = score_quarter2;
    m_score_quarter2_isSet = true;
}

bool OAITeamGame::is_score_quarter2_Set() const{
    return m_score_quarter2_isSet;
}

bool OAITeamGame::is_score_quarter2_Valid() const{
    return m_score_quarter2_isValid;
}

qint32 OAITeamGame::getScoreQuarter3() const {
    return m_score_quarter3;
}
void OAITeamGame::setScoreQuarter3(const qint32 &score_quarter3) {
    m_score_quarter3 = score_quarter3;
    m_score_quarter3_isSet = true;
}

bool OAITeamGame::is_score_quarter3_Set() const{
    return m_score_quarter3_isSet;
}

bool OAITeamGame::is_score_quarter3_Valid() const{
    return m_score_quarter3_isValid;
}

qint32 OAITeamGame::getScoreQuarter4() const {
    return m_score_quarter4;
}
void OAITeamGame::setScoreQuarter4(const qint32 &score_quarter4) {
    m_score_quarter4 = score_quarter4;
    m_score_quarter4_isSet = true;
}

bool OAITeamGame::is_score_quarter4_Set() const{
    return m_score_quarter4_isSet;
}

bool OAITeamGame::is_score_quarter4_Valid() const{
    return m_score_quarter4_isValid;
}

qint32 OAITeamGame::getSeason() const {
    return m_season;
}
void OAITeamGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAITeamGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAITeamGame::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAITeamGame::getSeasonType() const {
    return m_season_type;
}
void OAITeamGame::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAITeamGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAITeamGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

qint32 OAITeamGame::getSoloTackles() const {
    return m_solo_tackles;
}
void OAITeamGame::setSoloTackles(const qint32 &solo_tackles) {
    m_solo_tackles = solo_tackles;
    m_solo_tackles_isSet = true;
}

bool OAITeamGame::is_solo_tackles_Set() const{
    return m_solo_tackles_isSet;
}

bool OAITeamGame::is_solo_tackles_Valid() const{
    return m_solo_tackles_isValid;
}

QString OAITeamGame::getStadium() const {
    return m_stadium;
}
void OAITeamGame::setStadium(const QString &stadium) {
    m_stadium = stadium;
    m_stadium_isSet = true;
}

bool OAITeamGame::is_stadium_Set() const{
    return m_stadium_isSet;
}

bool OAITeamGame::is_stadium_Valid() const{
    return m_stadium_isValid;
}

qint32 OAITeamGame::getTacklesForLoss() const {
    return m_tackles_for_loss;
}
void OAITeamGame::setTacklesForLoss(const qint32 &tackles_for_loss) {
    m_tackles_for_loss = tackles_for_loss;
    m_tackles_for_loss_isSet = true;
}

bool OAITeamGame::is_tackles_for_loss_Set() const{
    return m_tackles_for_loss_isSet;
}

bool OAITeamGame::is_tackles_for_loss_Valid() const{
    return m_tackles_for_loss_isValid;
}

qint32 OAITeamGame::getTacklesForLossDifferential() const {
    return m_tackles_for_loss_differential;
}
void OAITeamGame::setTacklesForLossDifferential(const qint32 &tackles_for_loss_differential) {
    m_tackles_for_loss_differential = tackles_for_loss_differential;
    m_tackles_for_loss_differential_isSet = true;
}

bool OAITeamGame::is_tackles_for_loss_differential_Set() const{
    return m_tackles_for_loss_differential_isSet;
}

bool OAITeamGame::is_tackles_for_loss_differential_Valid() const{
    return m_tackles_for_loss_differential_isValid;
}

double OAITeamGame::getTacklesForLossPercentage() const {
    return m_tackles_for_loss_percentage;
}
void OAITeamGame::setTacklesForLossPercentage(const double &tackles_for_loss_percentage) {
    m_tackles_for_loss_percentage = tackles_for_loss_percentage;
    m_tackles_for_loss_percentage_isSet = true;
}

bool OAITeamGame::is_tackles_for_loss_percentage_Set() const{
    return m_tackles_for_loss_percentage_isSet;
}

bool OAITeamGame::is_tackles_for_loss_percentage_Valid() const{
    return m_tackles_for_loss_percentage_isValid;
}

qint32 OAITeamGame::getTakeaways() const {
    return m_takeaways;
}
void OAITeamGame::setTakeaways(const qint32 &takeaways) {
    m_takeaways = takeaways;
    m_takeaways_isSet = true;
}

bool OAITeamGame::is_takeaways_Set() const{
    return m_takeaways_isSet;
}

bool OAITeamGame::is_takeaways_Valid() const{
    return m_takeaways_isValid;
}

QString OAITeamGame::getTeam() const {
    return m_team;
}
void OAITeamGame::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamGame::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamGame::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAITeamGame::getTeamGameId() const {
    return m_team_game_id;
}
void OAITeamGame::setTeamGameId(const qint32 &team_game_id) {
    m_team_game_id = team_game_id;
    m_team_game_id_isSet = true;
}

bool OAITeamGame::is_team_game_id_Set() const{
    return m_team_game_id_isSet;
}

bool OAITeamGame::is_team_game_id_Valid() const{
    return m_team_game_id_isValid;
}

qint32 OAITeamGame::getTeamId() const {
    return m_team_id;
}
void OAITeamGame::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamGame::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamGame::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAITeamGame::getTeamName() const {
    return m_team_name;
}
void OAITeamGame::setTeamName(const QString &team_name) {
    m_team_name = team_name;
    m_team_name_isSet = true;
}

bool OAITeamGame::is_team_name_Set() const{
    return m_team_name_isSet;
}

bool OAITeamGame::is_team_name_Valid() const{
    return m_team_name_isValid;
}

qint32 OAITeamGame::getTemperature() const {
    return m_temperature;
}
void OAITeamGame::setTemperature(const qint32 &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAITeamGame::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAITeamGame::is_temperature_Valid() const{
    return m_temperature_isValid;
}

qint32 OAITeamGame::getThirdDownAttempts() const {
    return m_third_down_attempts;
}
void OAITeamGame::setThirdDownAttempts(const qint32 &third_down_attempts) {
    m_third_down_attempts = third_down_attempts;
    m_third_down_attempts_isSet = true;
}

bool OAITeamGame::is_third_down_attempts_Set() const{
    return m_third_down_attempts_isSet;
}

bool OAITeamGame::is_third_down_attempts_Valid() const{
    return m_third_down_attempts_isValid;
}

qint32 OAITeamGame::getThirdDownConversions() const {
    return m_third_down_conversions;
}
void OAITeamGame::setThirdDownConversions(const qint32 &third_down_conversions) {
    m_third_down_conversions = third_down_conversions;
    m_third_down_conversions_isSet = true;
}

bool OAITeamGame::is_third_down_conversions_Set() const{
    return m_third_down_conversions_isSet;
}

bool OAITeamGame::is_third_down_conversions_Valid() const{
    return m_third_down_conversions_isValid;
}

double OAITeamGame::getThirdDownPercentage() const {
    return m_third_down_percentage;
}
void OAITeamGame::setThirdDownPercentage(const double &third_down_percentage) {
    m_third_down_percentage = third_down_percentage;
    m_third_down_percentage_isSet = true;
}

bool OAITeamGame::is_third_down_percentage_Set() const{
    return m_third_down_percentage_isSet;
}

bool OAITeamGame::is_third_down_percentage_Valid() const{
    return m_third_down_percentage_isValid;
}

QString OAITeamGame::getTimeOfPossession() const {
    return m_time_of_possession;
}
void OAITeamGame::setTimeOfPossession(const QString &time_of_possession) {
    m_time_of_possession = time_of_possession;
    m_time_of_possession_isSet = true;
}

bool OAITeamGame::is_time_of_possession_Set() const{
    return m_time_of_possession_isSet;
}

bool OAITeamGame::is_time_of_possession_Valid() const{
    return m_time_of_possession_isValid;
}

qint32 OAITeamGame::getTimeOfPossessionMinutes() const {
    return m_time_of_possession_minutes;
}
void OAITeamGame::setTimeOfPossessionMinutes(const qint32 &time_of_possession_minutes) {
    m_time_of_possession_minutes = time_of_possession_minutes;
    m_time_of_possession_minutes_isSet = true;
}

bool OAITeamGame::is_time_of_possession_minutes_Set() const{
    return m_time_of_possession_minutes_isSet;
}

bool OAITeamGame::is_time_of_possession_minutes_Valid() const{
    return m_time_of_possession_minutes_isValid;
}

qint32 OAITeamGame::getTimeOfPossessionSeconds() const {
    return m_time_of_possession_seconds;
}
void OAITeamGame::setTimeOfPossessionSeconds(const qint32 &time_of_possession_seconds) {
    m_time_of_possession_seconds = time_of_possession_seconds;
    m_time_of_possession_seconds_isSet = true;
}

bool OAITeamGame::is_time_of_possession_seconds_Set() const{
    return m_time_of_possession_seconds_isSet;
}

bool OAITeamGame::is_time_of_possession_seconds_Valid() const{
    return m_time_of_possession_seconds_isValid;
}

qint32 OAITeamGame::getTimesSacked() const {
    return m_times_sacked;
}
void OAITeamGame::setTimesSacked(const qint32 &times_sacked) {
    m_times_sacked = times_sacked;
    m_times_sacked_isSet = true;
}

bool OAITeamGame::is_times_sacked_Set() const{
    return m_times_sacked_isSet;
}

bool OAITeamGame::is_times_sacked_Valid() const{
    return m_times_sacked_isValid;
}

double OAITeamGame::getTimesSackedPercentage() const {
    return m_times_sacked_percentage;
}
void OAITeamGame::setTimesSackedPercentage(const double &times_sacked_percentage) {
    m_times_sacked_percentage = times_sacked_percentage;
    m_times_sacked_percentage_isSet = true;
}

bool OAITeamGame::is_times_sacked_percentage_Set() const{
    return m_times_sacked_percentage_isSet;
}

bool OAITeamGame::is_times_sacked_percentage_Valid() const{
    return m_times_sacked_percentage_isValid;
}

qint32 OAITeamGame::getTimesSackedYards() const {
    return m_times_sacked_yards;
}
void OAITeamGame::setTimesSackedYards(const qint32 &times_sacked_yards) {
    m_times_sacked_yards = times_sacked_yards;
    m_times_sacked_yards_isSet = true;
}

bool OAITeamGame::is_times_sacked_yards_Set() const{
    return m_times_sacked_yards_isSet;
}

bool OAITeamGame::is_times_sacked_yards_Valid() const{
    return m_times_sacked_yards_isValid;
}

qint32 OAITeamGame::getTotalScore() const {
    return m_total_score;
}
void OAITeamGame::setTotalScore(const qint32 &total_score) {
    m_total_score = total_score;
    m_total_score_isSet = true;
}

bool OAITeamGame::is_total_score_Set() const{
    return m_total_score_isSet;
}

bool OAITeamGame::is_total_score_Valid() const{
    return m_total_score_isValid;
}

qint32 OAITeamGame::getTouchdowns() const {
    return m_touchdowns;
}
void OAITeamGame::setTouchdowns(const qint32 &touchdowns) {
    m_touchdowns = touchdowns;
    m_touchdowns_isSet = true;
}

bool OAITeamGame::is_touchdowns_Set() const{
    return m_touchdowns_isSet;
}

bool OAITeamGame::is_touchdowns_Valid() const{
    return m_touchdowns_isValid;
}

qint32 OAITeamGame::getTurnoverDifferential() const {
    return m_turnover_differential;
}
void OAITeamGame::setTurnoverDifferential(const qint32 &turnover_differential) {
    m_turnover_differential = turnover_differential;
    m_turnover_differential_isSet = true;
}

bool OAITeamGame::is_turnover_differential_Set() const{
    return m_turnover_differential_isSet;
}

bool OAITeamGame::is_turnover_differential_Valid() const{
    return m_turnover_differential_isValid;
}

qint32 OAITeamGame::getTwoPointConversionReturns() const {
    return m_two_point_conversion_returns;
}
void OAITeamGame::setTwoPointConversionReturns(const qint32 &two_point_conversion_returns) {
    m_two_point_conversion_returns = two_point_conversion_returns;
    m_two_point_conversion_returns_isSet = true;
}

bool OAITeamGame::is_two_point_conversion_returns_Set() const{
    return m_two_point_conversion_returns_isSet;
}

bool OAITeamGame::is_two_point_conversion_returns_Valid() const{
    return m_two_point_conversion_returns_isValid;
}

qint32 OAITeamGame::getWeek() const {
    return m_week;
}
void OAITeamGame::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAITeamGame::is_week_Set() const{
    return m_week_isSet;
}

bool OAITeamGame::is_week_Valid() const{
    return m_week_isValid;
}

qint32 OAITeamGame::getWindSpeed() const {
    return m_wind_speed;
}
void OAITeamGame::setWindSpeed(const qint32 &wind_speed) {
    m_wind_speed = wind_speed;
    m_wind_speed_isSet = true;
}

bool OAITeamGame::is_wind_speed_Set() const{
    return m_wind_speed_isSet;
}

bool OAITeamGame::is_wind_speed_Valid() const{
    return m_wind_speed_isValid;
}

bool OAITeamGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_point_kicking_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_point_kicking_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_point_passing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_point_passing_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_point_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_point_rushing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_point_rushing_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_downs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_downs_by_passing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_downs_by_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_downs_by_rushing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_down_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_giveaways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_to_go_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_to_go_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_to_go_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_game_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yard_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kickoff_touchbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kickoffs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kickoffs_in_end_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_yards_per_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_blocked_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_blocked_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_blocked_kicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_completion_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_point_kicking_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_point_kicking_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_point_passing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_point_passing_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_point_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_point_rushing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_point_rushing_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_extra_points_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_field_goal_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_field_goal_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_field_goal_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_field_goal_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_field_goals_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_field_goals_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_first_downs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_first_downs_by_passing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_first_downs_by_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_first_downs_by_rushing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fourth_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fourth_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fourth_down_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fumble_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fumble_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fumbles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fumbles_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_giveaways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_goal_to_go_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_goal_to_go_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_goal_to_go_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_interception_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_interception_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_interception_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kick_return_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kick_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kickoff_touchbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kickoffs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_kickoffs_in_end_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_offensive_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_offensive_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_offensive_yards_per_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passer_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passes_defended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_dropbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_interception_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_passing_yards_per_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_penalty_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_net_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_net_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_return_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punt_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_punts_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_quarterback_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_quarterback_hits_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_quarterback_hits_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_quarterback_sacks_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_red_zone_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_red_zone_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_red_zone_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rushing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rushing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rushing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rushing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_safeties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_quarter1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_quarter2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_quarter3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_quarter4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_tackles_for_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_tackles_for_loss_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_tackles_for_loss_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_takeaways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_third_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_third_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_third_down_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_time_of_possession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_time_of_possession_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_time_of_possession_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_times_sacked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_times_sacked_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_times_sacked_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_turnover_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_two_point_conversion_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passer_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_defended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_dropbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_interception_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_per_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_yard_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playing_surface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_net_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_net_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yard_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_hits_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_hits_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_sacks_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_zone_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_zone_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_zone_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_quarter1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_quarter2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_quarter3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_quarter4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_takeaways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_possession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_possession_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_possession_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_sacked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_sacked_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_sacked_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turnover_differential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
