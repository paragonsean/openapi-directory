/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFantasyDefenseGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFantasyDefenseGame::OAIFantasyDefenseGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFantasyDefenseGame::OAIFantasyDefenseGame() {
    this->initializeModel();
}

OAIFantasyDefenseGame::~OAIFantasyDefenseGame() {}

void OAIFantasyDefenseGame::initializeModel() {

    m_assisted_tackles_isSet = false;
    m_assisted_tackles_isValid = false;

    m_blocked_kick_return_touchdowns_isSet = false;
    m_blocked_kick_return_touchdowns_isValid = false;

    m_blocked_kick_return_yards_isSet = false;
    m_blocked_kick_return_yards_isValid = false;

    m_blocked_kicks_isSet = false;
    m_blocked_kicks_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_defensive_touchdowns_isSet = false;
    m_defensive_touchdowns_isValid = false;

    m_draft_kings_fantasy_points_allowed_isSet = false;
    m_draft_kings_fantasy_points_allowed_isValid = false;

    m_draft_kings_kicker_fantasy_points_allowed_isSet = false;
    m_draft_kings_kicker_fantasy_points_allowed_isValid = false;

    m_draft_kings_position_isSet = false;
    m_draft_kings_position_isValid = false;

    m_draft_kings_quarterback_fantasy_points_allowed_isSet = false;
    m_draft_kings_quarterback_fantasy_points_allowed_isValid = false;

    m_draft_kings_runningback_fantasy_points_allowed_isSet = false;
    m_draft_kings_runningback_fantasy_points_allowed_isValid = false;

    m_draft_kings_salary_isSet = false;
    m_draft_kings_salary_isValid = false;

    m_draft_kings_tight_end_fantasy_points_allowed_isSet = false;
    m_draft_kings_tight_end_fantasy_points_allowed_isValid = false;

    m_draft_kings_wide_receiver_fantasy_points_allowed_isSet = false;
    m_draft_kings_wide_receiver_fantasy_points_allowed_isValid = false;

    m_fan_duel_fantasy_points_allowed_isSet = false;
    m_fan_duel_fantasy_points_allowed_isValid = false;

    m_fan_duel_kicker_fantasy_points_allowed_isSet = false;
    m_fan_duel_kicker_fantasy_points_allowed_isValid = false;

    m_fan_duel_position_isSet = false;
    m_fan_duel_position_isValid = false;

    m_fan_duel_quarterback_fantasy_points_allowed_isSet = false;
    m_fan_duel_quarterback_fantasy_points_allowed_isValid = false;

    m_fan_duel_runningback_fantasy_points_allowed_isSet = false;
    m_fan_duel_runningback_fantasy_points_allowed_isValid = false;

    m_fan_duel_salary_isSet = false;
    m_fan_duel_salary_isValid = false;

    m_fan_duel_tight_end_fantasy_points_allowed_isSet = false;
    m_fan_duel_tight_end_fantasy_points_allowed_isValid = false;

    m_fan_duel_wide_receiver_fantasy_points_allowed_isSet = false;
    m_fan_duel_wide_receiver_fantasy_points_allowed_isValid = false;

    m_fantasy_data_salary_isSet = false;
    m_fantasy_data_salary_isValid = false;

    m_fantasy_defense_id_isSet = false;
    m_fantasy_defense_id_isValid = false;

    m_fantasy_draft_fantasy_points_allowed_isSet = false;
    m_fantasy_draft_fantasy_points_allowed_isValid = false;

    m_fantasy_draft_kicker_fantasy_points_allowed_isSet = false;
    m_fantasy_draft_kicker_fantasy_points_allowed_isValid = false;

    m_fantasy_draft_position_isSet = false;
    m_fantasy_draft_position_isValid = false;

    m_fantasy_draft_quarterback_fantasy_points_allowed_isSet = false;
    m_fantasy_draft_quarterback_fantasy_points_allowed_isValid = false;

    m_fantasy_draft_runningback_fantasy_points_allowed_isSet = false;
    m_fantasy_draft_runningback_fantasy_points_allowed_isValid = false;

    m_fantasy_draft_salary_isSet = false;
    m_fantasy_draft_salary_isValid = false;

    m_fantasy_draft_tight_end_fantasy_points_allowed_isSet = false;
    m_fantasy_draft_tight_end_fantasy_points_allowed_isValid = false;

    m_fantasy_draft_wide_receiver_fantasy_points_allowed_isSet = false;
    m_fantasy_draft_wide_receiver_fantasy_points_allowed_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_allowed_isSet = false;
    m_fantasy_points_allowed_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_fantasy_draft_isSet = false;
    m_fantasy_points_fantasy_draft_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_field_goal_return_touchdowns_isSet = false;
    m_field_goal_return_touchdowns_isValid = false;

    m_field_goal_return_yards_isSet = false;
    m_field_goal_return_yards_isValid = false;

    m_fourth_down_attempts_isSet = false;
    m_fourth_down_attempts_isValid = false;

    m_fourth_down_conversions_isSet = false;
    m_fourth_down_conversions_isValid = false;

    m_fumble_return_touchdowns_isSet = false;
    m_fumble_return_touchdowns_isValid = false;

    m_fumble_return_yards_isSet = false;
    m_fumble_return_yards_isValid = false;

    m_fumbles_forced_isSet = false;
    m_fumbles_forced_isValid = false;

    m_fumbles_recovered_isSet = false;
    m_fumbles_recovered_isValid = false;

    m_game_key_isSet = false;
    m_game_key_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_opponent_id_isSet = false;
    m_global_opponent_id_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_humidity_isSet = false;
    m_humidity_isValid = false;

    m_interception_return_touchdowns_isSet = false;
    m_interception_return_touchdowns_isValid = false;

    m_interception_return_yards_isSet = false;
    m_interception_return_yards_isValid = false;

    m_interceptions_isSet = false;
    m_interceptions_isValid = false;

    m_is_game_over_isSet = false;
    m_is_game_over_isValid = false;

    m_kick_return_long_isSet = false;
    m_kick_return_long_isValid = false;

    m_kick_return_touchdowns_isSet = false;
    m_kick_return_touchdowns_isValid = false;

    m_kick_return_yards_isSet = false;
    m_kick_return_yards_isValid = false;

    m_kick_returns_isSet = false;
    m_kick_returns_isValid = false;

    m_kicker_fantasy_points_allowed_isSet = false;
    m_kicker_fantasy_points_allowed_isValid = false;

    m_offensive_yards_allowed_isSet = false;
    m_offensive_yards_allowed_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_opponent_position_rank_isSet = false;
    m_opponent_position_rank_isValid = false;

    m_opponent_rank_isSet = false;
    m_opponent_rank_isValid = false;

    m_passes_defended_isSet = false;
    m_passes_defended_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_points_allowed_isSet = false;
    m_points_allowed_isValid = false;

    m_points_allowed_by_defense_special_teams_isSet = false;
    m_points_allowed_by_defense_special_teams_isValid = false;

    m_punt_return_long_isSet = false;
    m_punt_return_long_isValid = false;

    m_punt_return_touchdowns_isSet = false;
    m_punt_return_touchdowns_isValid = false;

    m_punt_return_yards_isSet = false;
    m_punt_return_yards_isValid = false;

    m_punt_returns_isSet = false;
    m_punt_returns_isValid = false;

    m_quarterback_fantasy_points_allowed_isSet = false;
    m_quarterback_fantasy_points_allowed_isValid = false;

    m_quarterback_hits_isSet = false;
    m_quarterback_hits_isValid = false;

    m_runningback_fantasy_points_allowed_isSet = false;
    m_runningback_fantasy_points_allowed_isValid = false;

    m_sack_yards_isSet = false;
    m_sack_yards_isValid = false;

    m_sacks_isSet = false;
    m_sacks_isValid = false;

    m_safeties_isSet = false;
    m_safeties_isValid = false;

    m_score_id_isSet = false;
    m_score_id_isValid = false;

    m_scoring_details_isSet = false;
    m_scoring_details_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_solo_tackles_isSet = false;
    m_solo_tackles_isValid = false;

    m_special_teams_touchdowns_isSet = false;
    m_special_teams_touchdowns_isValid = false;

    m_stadium_isSet = false;
    m_stadium_isValid = false;

    m_tackles_for_loss_isSet = false;
    m_tackles_for_loss_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_third_down_attempts_isSet = false;
    m_third_down_attempts_isValid = false;

    m_third_down_conversions_isSet = false;
    m_third_down_conversions_isValid = false;

    m_tight_end_fantasy_points_allowed_isSet = false;
    m_tight_end_fantasy_points_allowed_isValid = false;

    m_touchdowns_scored_isSet = false;
    m_touchdowns_scored_isValid = false;

    m_two_point_conversion_returns_isSet = false;
    m_two_point_conversion_returns_isValid = false;

    m_victiv_salary_isSet = false;
    m_victiv_salary_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_wide_receiver_fantasy_points_allowed_isSet = false;
    m_wide_receiver_fantasy_points_allowed_isValid = false;

    m_wind_speed_isSet = false;
    m_wind_speed_isValid = false;

    m_yahoo_fantasy_points_allowed_isSet = false;
    m_yahoo_fantasy_points_allowed_isValid = false;

    m_yahoo_kicker_fantasy_points_allowed_isSet = false;
    m_yahoo_kicker_fantasy_points_allowed_isValid = false;

    m_yahoo_position_isSet = false;
    m_yahoo_position_isValid = false;

    m_yahoo_quarterback_fantasy_points_allowed_isSet = false;
    m_yahoo_quarterback_fantasy_points_allowed_isValid = false;

    m_yahoo_runningback_fantasy_points_allowed_isSet = false;
    m_yahoo_runningback_fantasy_points_allowed_isValid = false;

    m_yahoo_salary_isSet = false;
    m_yahoo_salary_isValid = false;

    m_yahoo_tight_end_fantasy_points_allowed_isSet = false;
    m_yahoo_tight_end_fantasy_points_allowed_isValid = false;

    m_yahoo_wide_receiver_fantasy_points_allowed_isSet = false;
    m_yahoo_wide_receiver_fantasy_points_allowed_isValid = false;
}

void OAIFantasyDefenseGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFantasyDefenseGame::fromJsonObject(QJsonObject json) {

    m_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_assisted_tackles, json[QString("AssistedTackles")]);
    m_assisted_tackles_isSet = !json[QString("AssistedTackles")].isNull() && m_assisted_tackles_isValid;

    m_blocked_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_touchdowns, json[QString("BlockedKickReturnTouchdowns")]);
    m_blocked_kick_return_touchdowns_isSet = !json[QString("BlockedKickReturnTouchdowns")].isNull() && m_blocked_kick_return_touchdowns_isValid;

    m_blocked_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_yards, json[QString("BlockedKickReturnYards")]);
    m_blocked_kick_return_yards_isSet = !json[QString("BlockedKickReturnYards")].isNull() && m_blocked_kick_return_yards_isValid;

    m_blocked_kicks_isValid = ::OpenAPI::fromJsonValue(m_blocked_kicks, json[QString("BlockedKicks")]);
    m_blocked_kicks_isSet = !json[QString("BlockedKicks")].isNull() && m_blocked_kicks_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_defensive_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_defensive_touchdowns, json[QString("DefensiveTouchdowns")]);
    m_defensive_touchdowns_isSet = !json[QString("DefensiveTouchdowns")].isNull() && m_defensive_touchdowns_isValid;

    m_draft_kings_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_fantasy_points_allowed, json[QString("DraftKingsFantasyPointsAllowed")]);
    m_draft_kings_fantasy_points_allowed_isSet = !json[QString("DraftKingsFantasyPointsAllowed")].isNull() && m_draft_kings_fantasy_points_allowed_isValid;

    m_draft_kings_kicker_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_kicker_fantasy_points_allowed, json[QString("DraftKingsKickerFantasyPointsAllowed")]);
    m_draft_kings_kicker_fantasy_points_allowed_isSet = !json[QString("DraftKingsKickerFantasyPointsAllowed")].isNull() && m_draft_kings_kicker_fantasy_points_allowed_isValid;

    m_draft_kings_position_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_position, json[QString("DraftKingsPosition")]);
    m_draft_kings_position_isSet = !json[QString("DraftKingsPosition")].isNull() && m_draft_kings_position_isValid;

    m_draft_kings_quarterback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_quarterback_fantasy_points_allowed, json[QString("DraftKingsQuarterbackFantasyPointsAllowed")]);
    m_draft_kings_quarterback_fantasy_points_allowed_isSet = !json[QString("DraftKingsQuarterbackFantasyPointsAllowed")].isNull() && m_draft_kings_quarterback_fantasy_points_allowed_isValid;

    m_draft_kings_runningback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_runningback_fantasy_points_allowed, json[QString("DraftKingsRunningbackFantasyPointsAllowed")]);
    m_draft_kings_runningback_fantasy_points_allowed_isSet = !json[QString("DraftKingsRunningbackFantasyPointsAllowed")].isNull() && m_draft_kings_runningback_fantasy_points_allowed_isValid;

    m_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_salary, json[QString("DraftKingsSalary")]);
    m_draft_kings_salary_isSet = !json[QString("DraftKingsSalary")].isNull() && m_draft_kings_salary_isValid;

    m_draft_kings_tight_end_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_tight_end_fantasy_points_allowed, json[QString("DraftKingsTightEndFantasyPointsAllowed")]);
    m_draft_kings_tight_end_fantasy_points_allowed_isSet = !json[QString("DraftKingsTightEndFantasyPointsAllowed")].isNull() && m_draft_kings_tight_end_fantasy_points_allowed_isValid;

    m_draft_kings_wide_receiver_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_wide_receiver_fantasy_points_allowed, json[QString("DraftKingsWideReceiverFantasyPointsAllowed")]);
    m_draft_kings_wide_receiver_fantasy_points_allowed_isSet = !json[QString("DraftKingsWideReceiverFantasyPointsAllowed")].isNull() && m_draft_kings_wide_receiver_fantasy_points_allowed_isValid;

    m_fan_duel_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_fantasy_points_allowed, json[QString("FanDuelFantasyPointsAllowed")]);
    m_fan_duel_fantasy_points_allowed_isSet = !json[QString("FanDuelFantasyPointsAllowed")].isNull() && m_fan_duel_fantasy_points_allowed_isValid;

    m_fan_duel_kicker_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_kicker_fantasy_points_allowed, json[QString("FanDuelKickerFantasyPointsAllowed")]);
    m_fan_duel_kicker_fantasy_points_allowed_isSet = !json[QString("FanDuelKickerFantasyPointsAllowed")].isNull() && m_fan_duel_kicker_fantasy_points_allowed_isValid;

    m_fan_duel_position_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_position, json[QString("FanDuelPosition")]);
    m_fan_duel_position_isSet = !json[QString("FanDuelPosition")].isNull() && m_fan_duel_position_isValid;

    m_fan_duel_quarterback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_quarterback_fantasy_points_allowed, json[QString("FanDuelQuarterbackFantasyPointsAllowed")]);
    m_fan_duel_quarterback_fantasy_points_allowed_isSet = !json[QString("FanDuelQuarterbackFantasyPointsAllowed")].isNull() && m_fan_duel_quarterback_fantasy_points_allowed_isValid;

    m_fan_duel_runningback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_runningback_fantasy_points_allowed, json[QString("FanDuelRunningbackFantasyPointsAllowed")]);
    m_fan_duel_runningback_fantasy_points_allowed_isSet = !json[QString("FanDuelRunningbackFantasyPointsAllowed")].isNull() && m_fan_duel_runningback_fantasy_points_allowed_isValid;

    m_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_salary, json[QString("FanDuelSalary")]);
    m_fan_duel_salary_isSet = !json[QString("FanDuelSalary")].isNull() && m_fan_duel_salary_isValid;

    m_fan_duel_tight_end_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_tight_end_fantasy_points_allowed, json[QString("FanDuelTightEndFantasyPointsAllowed")]);
    m_fan_duel_tight_end_fantasy_points_allowed_isSet = !json[QString("FanDuelTightEndFantasyPointsAllowed")].isNull() && m_fan_duel_tight_end_fantasy_points_allowed_isValid;

    m_fan_duel_wide_receiver_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_wide_receiver_fantasy_points_allowed, json[QString("FanDuelWideReceiverFantasyPointsAllowed")]);
    m_fan_duel_wide_receiver_fantasy_points_allowed_isSet = !json[QString("FanDuelWideReceiverFantasyPointsAllowed")].isNull() && m_fan_duel_wide_receiver_fantasy_points_allowed_isValid;

    m_fantasy_data_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_data_salary, json[QString("FantasyDataSalary")]);
    m_fantasy_data_salary_isSet = !json[QString("FantasyDataSalary")].isNull() && m_fantasy_data_salary_isValid;

    m_fantasy_defense_id_isValid = ::OpenAPI::fromJsonValue(m_fantasy_defense_id, json[QString("FantasyDefenseID")]);
    m_fantasy_defense_id_isSet = !json[QString("FantasyDefenseID")].isNull() && m_fantasy_defense_id_isValid;

    m_fantasy_draft_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_fantasy_points_allowed, json[QString("FantasyDraftFantasyPointsAllowed")]);
    m_fantasy_draft_fantasy_points_allowed_isSet = !json[QString("FantasyDraftFantasyPointsAllowed")].isNull() && m_fantasy_draft_fantasy_points_allowed_isValid;

    m_fantasy_draft_kicker_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_kicker_fantasy_points_allowed, json[QString("FantasyDraftKickerFantasyPointsAllowed")]);
    m_fantasy_draft_kicker_fantasy_points_allowed_isSet = !json[QString("FantasyDraftKickerFantasyPointsAllowed")].isNull() && m_fantasy_draft_kicker_fantasy_points_allowed_isValid;

    m_fantasy_draft_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_position, json[QString("FantasyDraftPosition")]);
    m_fantasy_draft_position_isSet = !json[QString("FantasyDraftPosition")].isNull() && m_fantasy_draft_position_isValid;

    m_fantasy_draft_quarterback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_quarterback_fantasy_points_allowed, json[QString("FantasyDraftQuarterbackFantasyPointsAllowed")]);
    m_fantasy_draft_quarterback_fantasy_points_allowed_isSet = !json[QString("FantasyDraftQuarterbackFantasyPointsAllowed")].isNull() && m_fantasy_draft_quarterback_fantasy_points_allowed_isValid;

    m_fantasy_draft_runningback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_runningback_fantasy_points_allowed, json[QString("FantasyDraftRunningbackFantasyPointsAllowed")]);
    m_fantasy_draft_runningback_fantasy_points_allowed_isSet = !json[QString("FantasyDraftRunningbackFantasyPointsAllowed")].isNull() && m_fantasy_draft_runningback_fantasy_points_allowed_isValid;

    m_fantasy_draft_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_salary, json[QString("FantasyDraftSalary")]);
    m_fantasy_draft_salary_isSet = !json[QString("FantasyDraftSalary")].isNull() && m_fantasy_draft_salary_isValid;

    m_fantasy_draft_tight_end_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_tight_end_fantasy_points_allowed, json[QString("FantasyDraftTightEndFantasyPointsAllowed")]);
    m_fantasy_draft_tight_end_fantasy_points_allowed_isSet = !json[QString("FantasyDraftTightEndFantasyPointsAllowed")].isNull() && m_fantasy_draft_tight_end_fantasy_points_allowed_isValid;

    m_fantasy_draft_wide_receiver_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_wide_receiver_fantasy_points_allowed, json[QString("FantasyDraftWideReceiverFantasyPointsAllowed")]);
    m_fantasy_draft_wide_receiver_fantasy_points_allowed_isSet = !json[QString("FantasyDraftWideReceiverFantasyPointsAllowed")].isNull() && m_fantasy_draft_wide_receiver_fantasy_points_allowed_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_allowed, json[QString("FantasyPointsAllowed")]);
    m_fantasy_points_allowed_isSet = !json[QString("FantasyPointsAllowed")].isNull() && m_fantasy_points_allowed_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_fantasy_draft_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fantasy_draft, json[QString("FantasyPointsFantasyDraft")]);
    m_fantasy_points_fantasy_draft_isSet = !json[QString("FantasyPointsFantasyDraft")].isNull() && m_fantasy_points_fantasy_draft_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_field_goal_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_touchdowns, json[QString("FieldGoalReturnTouchdowns")]);
    m_field_goal_return_touchdowns_isSet = !json[QString("FieldGoalReturnTouchdowns")].isNull() && m_field_goal_return_touchdowns_isValid;

    m_field_goal_return_yards_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_yards, json[QString("FieldGoalReturnYards")]);
    m_field_goal_return_yards_isSet = !json[QString("FieldGoalReturnYards")].isNull() && m_field_goal_return_yards_isValid;

    m_fourth_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_fourth_down_attempts, json[QString("FourthDownAttempts")]);
    m_fourth_down_attempts_isSet = !json[QString("FourthDownAttempts")].isNull() && m_fourth_down_attempts_isValid;

    m_fourth_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_fourth_down_conversions, json[QString("FourthDownConversions")]);
    m_fourth_down_conversions_isSet = !json[QString("FourthDownConversions")].isNull() && m_fourth_down_conversions_isValid;

    m_fumble_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_touchdowns, json[QString("FumbleReturnTouchdowns")]);
    m_fumble_return_touchdowns_isSet = !json[QString("FumbleReturnTouchdowns")].isNull() && m_fumble_return_touchdowns_isValid;

    m_fumble_return_yards_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_yards, json[QString("FumbleReturnYards")]);
    m_fumble_return_yards_isSet = !json[QString("FumbleReturnYards")].isNull() && m_fumble_return_yards_isValid;

    m_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_fumbles_forced, json[QString("FumblesForced")]);
    m_fumbles_forced_isSet = !json[QString("FumblesForced")].isNull() && m_fumbles_forced_isValid;

    m_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_fumbles_recovered, json[QString("FumblesRecovered")]);
    m_fumbles_recovered_isSet = !json[QString("FumblesRecovered")].isNull() && m_fumbles_recovered_isValid;

    m_game_key_isValid = ::OpenAPI::fromJsonValue(m_game_key, json[QString("GameKey")]);
    m_game_key_isSet = !json[QString("GameKey")].isNull() && m_game_key_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_global_opponent_id, json[QString("GlobalOpponentID")]);
    m_global_opponent_id_isSet = !json[QString("GlobalOpponentID")].isNull() && m_global_opponent_id_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_humidity_isValid = ::OpenAPI::fromJsonValue(m_humidity, json[QString("Humidity")]);
    m_humidity_isSet = !json[QString("Humidity")].isNull() && m_humidity_isValid;

    m_interception_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_interception_return_touchdowns, json[QString("InterceptionReturnTouchdowns")]);
    m_interception_return_touchdowns_isSet = !json[QString("InterceptionReturnTouchdowns")].isNull() && m_interception_return_touchdowns_isValid;

    m_interception_return_yards_isValid = ::OpenAPI::fromJsonValue(m_interception_return_yards, json[QString("InterceptionReturnYards")]);
    m_interception_return_yards_isSet = !json[QString("InterceptionReturnYards")].isNull() && m_interception_return_yards_isValid;

    m_interceptions_isValid = ::OpenAPI::fromJsonValue(m_interceptions, json[QString("Interceptions")]);
    m_interceptions_isSet = !json[QString("Interceptions")].isNull() && m_interceptions_isValid;

    m_is_game_over_isValid = ::OpenAPI::fromJsonValue(m_is_game_over, json[QString("IsGameOver")]);
    m_is_game_over_isSet = !json[QString("IsGameOver")].isNull() && m_is_game_over_isValid;

    m_kick_return_long_isValid = ::OpenAPI::fromJsonValue(m_kick_return_long, json[QString("KickReturnLong")]);
    m_kick_return_long_isSet = !json[QString("KickReturnLong")].isNull() && m_kick_return_long_isValid;

    m_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_kick_return_touchdowns, json[QString("KickReturnTouchdowns")]);
    m_kick_return_touchdowns_isSet = !json[QString("KickReturnTouchdowns")].isNull() && m_kick_return_touchdowns_isValid;

    m_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards, json[QString("KickReturnYards")]);
    m_kick_return_yards_isSet = !json[QString("KickReturnYards")].isNull() && m_kick_return_yards_isValid;

    m_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_kick_returns, json[QString("KickReturns")]);
    m_kick_returns_isSet = !json[QString("KickReturns")].isNull() && m_kick_returns_isValid;

    m_kicker_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_kicker_fantasy_points_allowed, json[QString("KickerFantasyPointsAllowed")]);
    m_kicker_fantasy_points_allowed_isSet = !json[QString("KickerFantasyPointsAllowed")].isNull() && m_kicker_fantasy_points_allowed_isValid;

    m_offensive_yards_allowed_isValid = ::OpenAPI::fromJsonValue(m_offensive_yards_allowed, json[QString("OffensiveYardsAllowed")]);
    m_offensive_yards_allowed_isSet = !json[QString("OffensiveYardsAllowed")].isNull() && m_offensive_yards_allowed_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentID")]);
    m_opponent_id_isSet = !json[QString("OpponentID")].isNull() && m_opponent_id_isValid;

    m_opponent_position_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_position_rank, json[QString("OpponentPositionRank")]);
    m_opponent_position_rank_isSet = !json[QString("OpponentPositionRank")].isNull() && m_opponent_position_rank_isValid;

    m_opponent_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_rank, json[QString("OpponentRank")]);
    m_opponent_rank_isSet = !json[QString("OpponentRank")].isNull() && m_opponent_rank_isValid;

    m_passes_defended_isValid = ::OpenAPI::fromJsonValue(m_passes_defended, json[QString("PassesDefended")]);
    m_passes_defended_isSet = !json[QString("PassesDefended")].isNull() && m_passes_defended_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_points_allowed, json[QString("PointsAllowed")]);
    m_points_allowed_isSet = !json[QString("PointsAllowed")].isNull() && m_points_allowed_isValid;

    m_points_allowed_by_defense_special_teams_isValid = ::OpenAPI::fromJsonValue(m_points_allowed_by_defense_special_teams, json[QString("PointsAllowedByDefenseSpecialTeams")]);
    m_points_allowed_by_defense_special_teams_isSet = !json[QString("PointsAllowedByDefenseSpecialTeams")].isNull() && m_points_allowed_by_defense_special_teams_isValid;

    m_punt_return_long_isValid = ::OpenAPI::fromJsonValue(m_punt_return_long, json[QString("PuntReturnLong")]);
    m_punt_return_long_isSet = !json[QString("PuntReturnLong")].isNull() && m_punt_return_long_isValid;

    m_punt_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_punt_return_touchdowns, json[QString("PuntReturnTouchdowns")]);
    m_punt_return_touchdowns_isSet = !json[QString("PuntReturnTouchdowns")].isNull() && m_punt_return_touchdowns_isValid;

    m_punt_return_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards, json[QString("PuntReturnYards")]);
    m_punt_return_yards_isSet = !json[QString("PuntReturnYards")].isNull() && m_punt_return_yards_isValid;

    m_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_punt_returns, json[QString("PuntReturns")]);
    m_punt_returns_isSet = !json[QString("PuntReturns")].isNull() && m_punt_returns_isValid;

    m_quarterback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_quarterback_fantasy_points_allowed, json[QString("QuarterbackFantasyPointsAllowed")]);
    m_quarterback_fantasy_points_allowed_isSet = !json[QString("QuarterbackFantasyPointsAllowed")].isNull() && m_quarterback_fantasy_points_allowed_isValid;

    m_quarterback_hits_isValid = ::OpenAPI::fromJsonValue(m_quarterback_hits, json[QString("QuarterbackHits")]);
    m_quarterback_hits_isSet = !json[QString("QuarterbackHits")].isNull() && m_quarterback_hits_isValid;

    m_runningback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_runningback_fantasy_points_allowed, json[QString("RunningbackFantasyPointsAllowed")]);
    m_runningback_fantasy_points_allowed_isSet = !json[QString("RunningbackFantasyPointsAllowed")].isNull() && m_runningback_fantasy_points_allowed_isValid;

    m_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_sack_yards, json[QString("SackYards")]);
    m_sack_yards_isSet = !json[QString("SackYards")].isNull() && m_sack_yards_isValid;

    m_sacks_isValid = ::OpenAPI::fromJsonValue(m_sacks, json[QString("Sacks")]);
    m_sacks_isSet = !json[QString("Sacks")].isNull() && m_sacks_isValid;

    m_safeties_isValid = ::OpenAPI::fromJsonValue(m_safeties, json[QString("Safeties")]);
    m_safeties_isSet = !json[QString("Safeties")].isNull() && m_safeties_isValid;

    m_score_id_isValid = ::OpenAPI::fromJsonValue(m_score_id, json[QString("ScoreID")]);
    m_score_id_isSet = !json[QString("ScoreID")].isNull() && m_score_id_isValid;

    m_scoring_details_isValid = ::OpenAPI::fromJsonValue(m_scoring_details, json[QString("ScoringDetails")]);
    m_scoring_details_isSet = !json[QString("ScoringDetails")].isNull() && m_scoring_details_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_solo_tackles, json[QString("SoloTackles")]);
    m_solo_tackles_isSet = !json[QString("SoloTackles")].isNull() && m_solo_tackles_isValid;

    m_special_teams_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_special_teams_touchdowns, json[QString("SpecialTeamsTouchdowns")]);
    m_special_teams_touchdowns_isSet = !json[QString("SpecialTeamsTouchdowns")].isNull() && m_special_teams_touchdowns_isValid;

    m_stadium_isValid = ::OpenAPI::fromJsonValue(m_stadium, json[QString("Stadium")]);
    m_stadium_isSet = !json[QString("Stadium")].isNull() && m_stadium_isValid;

    m_tackles_for_loss_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss, json[QString("TacklesForLoss")]);
    m_tackles_for_loss_isSet = !json[QString("TacklesForLoss")].isNull() && m_tackles_for_loss_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("Temperature")]);
    m_temperature_isSet = !json[QString("Temperature")].isNull() && m_temperature_isValid;

    m_third_down_attempts_isValid = ::OpenAPI::fromJsonValue(m_third_down_attempts, json[QString("ThirdDownAttempts")]);
    m_third_down_attempts_isSet = !json[QString("ThirdDownAttempts")].isNull() && m_third_down_attempts_isValid;

    m_third_down_conversions_isValid = ::OpenAPI::fromJsonValue(m_third_down_conversions, json[QString("ThirdDownConversions")]);
    m_third_down_conversions_isSet = !json[QString("ThirdDownConversions")].isNull() && m_third_down_conversions_isValid;

    m_tight_end_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_tight_end_fantasy_points_allowed, json[QString("TightEndFantasyPointsAllowed")]);
    m_tight_end_fantasy_points_allowed_isSet = !json[QString("TightEndFantasyPointsAllowed")].isNull() && m_tight_end_fantasy_points_allowed_isValid;

    m_touchdowns_scored_isValid = ::OpenAPI::fromJsonValue(m_touchdowns_scored, json[QString("TouchdownsScored")]);
    m_touchdowns_scored_isSet = !json[QString("TouchdownsScored")].isNull() && m_touchdowns_scored_isValid;

    m_two_point_conversion_returns_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_returns, json[QString("TwoPointConversionReturns")]);
    m_two_point_conversion_returns_isSet = !json[QString("TwoPointConversionReturns")].isNull() && m_two_point_conversion_returns_isValid;

    m_victiv_salary_isValid = ::OpenAPI::fromJsonValue(m_victiv_salary, json[QString("VictivSalary")]);
    m_victiv_salary_isSet = !json[QString("VictivSalary")].isNull() && m_victiv_salary_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;

    m_wide_receiver_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_wide_receiver_fantasy_points_allowed, json[QString("WideReceiverFantasyPointsAllowed")]);
    m_wide_receiver_fantasy_points_allowed_isSet = !json[QString("WideReceiverFantasyPointsAllowed")].isNull() && m_wide_receiver_fantasy_points_allowed_isValid;

    m_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_wind_speed, json[QString("WindSpeed")]);
    m_wind_speed_isSet = !json[QString("WindSpeed")].isNull() && m_wind_speed_isValid;

    m_yahoo_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_yahoo_fantasy_points_allowed, json[QString("YahooFantasyPointsAllowed")]);
    m_yahoo_fantasy_points_allowed_isSet = !json[QString("YahooFantasyPointsAllowed")].isNull() && m_yahoo_fantasy_points_allowed_isValid;

    m_yahoo_kicker_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_yahoo_kicker_fantasy_points_allowed, json[QString("YahooKickerFantasyPointsAllowed")]);
    m_yahoo_kicker_fantasy_points_allowed_isSet = !json[QString("YahooKickerFantasyPointsAllowed")].isNull() && m_yahoo_kicker_fantasy_points_allowed_isValid;

    m_yahoo_position_isValid = ::OpenAPI::fromJsonValue(m_yahoo_position, json[QString("YahooPosition")]);
    m_yahoo_position_isSet = !json[QString("YahooPosition")].isNull() && m_yahoo_position_isValid;

    m_yahoo_quarterback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_yahoo_quarterback_fantasy_points_allowed, json[QString("YahooQuarterbackFantasyPointsAllowed")]);
    m_yahoo_quarterback_fantasy_points_allowed_isSet = !json[QString("YahooQuarterbackFantasyPointsAllowed")].isNull() && m_yahoo_quarterback_fantasy_points_allowed_isValid;

    m_yahoo_runningback_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_yahoo_runningback_fantasy_points_allowed, json[QString("YahooRunningbackFantasyPointsAllowed")]);
    m_yahoo_runningback_fantasy_points_allowed_isSet = !json[QString("YahooRunningbackFantasyPointsAllowed")].isNull() && m_yahoo_runningback_fantasy_points_allowed_isValid;

    m_yahoo_salary_isValid = ::OpenAPI::fromJsonValue(m_yahoo_salary, json[QString("YahooSalary")]);
    m_yahoo_salary_isSet = !json[QString("YahooSalary")].isNull() && m_yahoo_salary_isValid;

    m_yahoo_tight_end_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_yahoo_tight_end_fantasy_points_allowed, json[QString("YahooTightEndFantasyPointsAllowed")]);
    m_yahoo_tight_end_fantasy_points_allowed_isSet = !json[QString("YahooTightEndFantasyPointsAllowed")].isNull() && m_yahoo_tight_end_fantasy_points_allowed_isValid;

    m_yahoo_wide_receiver_fantasy_points_allowed_isValid = ::OpenAPI::fromJsonValue(m_yahoo_wide_receiver_fantasy_points_allowed, json[QString("YahooWideReceiverFantasyPointsAllowed")]);
    m_yahoo_wide_receiver_fantasy_points_allowed_isSet = !json[QString("YahooWideReceiverFantasyPointsAllowed")].isNull() && m_yahoo_wide_receiver_fantasy_points_allowed_isValid;
}

QString OAIFantasyDefenseGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFantasyDefenseGame::asJsonObject() const {
    QJsonObject obj;
    if (m_assisted_tackles_isSet) {
        obj.insert(QString("AssistedTackles"), ::OpenAPI::toJsonValue(m_assisted_tackles));
    }
    if (m_blocked_kick_return_touchdowns_isSet) {
        obj.insert(QString("BlockedKickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_blocked_kick_return_touchdowns));
    }
    if (m_blocked_kick_return_yards_isSet) {
        obj.insert(QString("BlockedKickReturnYards"), ::OpenAPI::toJsonValue(m_blocked_kick_return_yards));
    }
    if (m_blocked_kicks_isSet) {
        obj.insert(QString("BlockedKicks"), ::OpenAPI::toJsonValue(m_blocked_kicks));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_defensive_touchdowns_isSet) {
        obj.insert(QString("DefensiveTouchdowns"), ::OpenAPI::toJsonValue(m_defensive_touchdowns));
    }
    if (m_draft_kings_fantasy_points_allowed_isSet) {
        obj.insert(QString("DraftKingsFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_draft_kings_fantasy_points_allowed));
    }
    if (m_draft_kings_kicker_fantasy_points_allowed_isSet) {
        obj.insert(QString("DraftKingsKickerFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_draft_kings_kicker_fantasy_points_allowed));
    }
    if (m_draft_kings_position_isSet) {
        obj.insert(QString("DraftKingsPosition"), ::OpenAPI::toJsonValue(m_draft_kings_position));
    }
    if (m_draft_kings_quarterback_fantasy_points_allowed_isSet) {
        obj.insert(QString("DraftKingsQuarterbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_draft_kings_quarterback_fantasy_points_allowed));
    }
    if (m_draft_kings_runningback_fantasy_points_allowed_isSet) {
        obj.insert(QString("DraftKingsRunningbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_draft_kings_runningback_fantasy_points_allowed));
    }
    if (m_draft_kings_salary_isSet) {
        obj.insert(QString("DraftKingsSalary"), ::OpenAPI::toJsonValue(m_draft_kings_salary));
    }
    if (m_draft_kings_tight_end_fantasy_points_allowed_isSet) {
        obj.insert(QString("DraftKingsTightEndFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_draft_kings_tight_end_fantasy_points_allowed));
    }
    if (m_draft_kings_wide_receiver_fantasy_points_allowed_isSet) {
        obj.insert(QString("DraftKingsWideReceiverFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_draft_kings_wide_receiver_fantasy_points_allowed));
    }
    if (m_fan_duel_fantasy_points_allowed_isSet) {
        obj.insert(QString("FanDuelFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fan_duel_fantasy_points_allowed));
    }
    if (m_fan_duel_kicker_fantasy_points_allowed_isSet) {
        obj.insert(QString("FanDuelKickerFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fan_duel_kicker_fantasy_points_allowed));
    }
    if (m_fan_duel_position_isSet) {
        obj.insert(QString("FanDuelPosition"), ::OpenAPI::toJsonValue(m_fan_duel_position));
    }
    if (m_fan_duel_quarterback_fantasy_points_allowed_isSet) {
        obj.insert(QString("FanDuelQuarterbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fan_duel_quarterback_fantasy_points_allowed));
    }
    if (m_fan_duel_runningback_fantasy_points_allowed_isSet) {
        obj.insert(QString("FanDuelRunningbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fan_duel_runningback_fantasy_points_allowed));
    }
    if (m_fan_duel_salary_isSet) {
        obj.insert(QString("FanDuelSalary"), ::OpenAPI::toJsonValue(m_fan_duel_salary));
    }
    if (m_fan_duel_tight_end_fantasy_points_allowed_isSet) {
        obj.insert(QString("FanDuelTightEndFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fan_duel_tight_end_fantasy_points_allowed));
    }
    if (m_fan_duel_wide_receiver_fantasy_points_allowed_isSet) {
        obj.insert(QString("FanDuelWideReceiverFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fan_duel_wide_receiver_fantasy_points_allowed));
    }
    if (m_fantasy_data_salary_isSet) {
        obj.insert(QString("FantasyDataSalary"), ::OpenAPI::toJsonValue(m_fantasy_data_salary));
    }
    if (m_fantasy_defense_id_isSet) {
        obj.insert(QString("FantasyDefenseID"), ::OpenAPI::toJsonValue(m_fantasy_defense_id));
    }
    if (m_fantasy_draft_fantasy_points_allowed_isSet) {
        obj.insert(QString("FantasyDraftFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fantasy_draft_fantasy_points_allowed));
    }
    if (m_fantasy_draft_kicker_fantasy_points_allowed_isSet) {
        obj.insert(QString("FantasyDraftKickerFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fantasy_draft_kicker_fantasy_points_allowed));
    }
    if (m_fantasy_draft_position_isSet) {
        obj.insert(QString("FantasyDraftPosition"), ::OpenAPI::toJsonValue(m_fantasy_draft_position));
    }
    if (m_fantasy_draft_quarterback_fantasy_points_allowed_isSet) {
        obj.insert(QString("FantasyDraftQuarterbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fantasy_draft_quarterback_fantasy_points_allowed));
    }
    if (m_fantasy_draft_runningback_fantasy_points_allowed_isSet) {
        obj.insert(QString("FantasyDraftRunningbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fantasy_draft_runningback_fantasy_points_allowed));
    }
    if (m_fantasy_draft_salary_isSet) {
        obj.insert(QString("FantasyDraftSalary"), ::OpenAPI::toJsonValue(m_fantasy_draft_salary));
    }
    if (m_fantasy_draft_tight_end_fantasy_points_allowed_isSet) {
        obj.insert(QString("FantasyDraftTightEndFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fantasy_draft_tight_end_fantasy_points_allowed));
    }
    if (m_fantasy_draft_wide_receiver_fantasy_points_allowed_isSet) {
        obj.insert(QString("FantasyDraftWideReceiverFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fantasy_draft_wide_receiver_fantasy_points_allowed));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_allowed_isSet) {
        obj.insert(QString("FantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_fantasy_points_allowed));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_fantasy_draft_isSet) {
        obj.insert(QString("FantasyPointsFantasyDraft"), ::OpenAPI::toJsonValue(m_fantasy_points_fantasy_draft));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_field_goal_return_touchdowns_isSet) {
        obj.insert(QString("FieldGoalReturnTouchdowns"), ::OpenAPI::toJsonValue(m_field_goal_return_touchdowns));
    }
    if (m_field_goal_return_yards_isSet) {
        obj.insert(QString("FieldGoalReturnYards"), ::OpenAPI::toJsonValue(m_field_goal_return_yards));
    }
    if (m_fourth_down_attempts_isSet) {
        obj.insert(QString("FourthDownAttempts"), ::OpenAPI::toJsonValue(m_fourth_down_attempts));
    }
    if (m_fourth_down_conversions_isSet) {
        obj.insert(QString("FourthDownConversions"), ::OpenAPI::toJsonValue(m_fourth_down_conversions));
    }
    if (m_fumble_return_touchdowns_isSet) {
        obj.insert(QString("FumbleReturnTouchdowns"), ::OpenAPI::toJsonValue(m_fumble_return_touchdowns));
    }
    if (m_fumble_return_yards_isSet) {
        obj.insert(QString("FumbleReturnYards"), ::OpenAPI::toJsonValue(m_fumble_return_yards));
    }
    if (m_fumbles_forced_isSet) {
        obj.insert(QString("FumblesForced"), ::OpenAPI::toJsonValue(m_fumbles_forced));
    }
    if (m_fumbles_recovered_isSet) {
        obj.insert(QString("FumblesRecovered"), ::OpenAPI::toJsonValue(m_fumbles_recovered));
    }
    if (m_game_key_isSet) {
        obj.insert(QString("GameKey"), ::OpenAPI::toJsonValue(m_game_key));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_opponent_id_isSet) {
        obj.insert(QString("GlobalOpponentID"), ::OpenAPI::toJsonValue(m_global_opponent_id));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_humidity_isSet) {
        obj.insert(QString("Humidity"), ::OpenAPI::toJsonValue(m_humidity));
    }
    if (m_interception_return_touchdowns_isSet) {
        obj.insert(QString("InterceptionReturnTouchdowns"), ::OpenAPI::toJsonValue(m_interception_return_touchdowns));
    }
    if (m_interception_return_yards_isSet) {
        obj.insert(QString("InterceptionReturnYards"), ::OpenAPI::toJsonValue(m_interception_return_yards));
    }
    if (m_interceptions_isSet) {
        obj.insert(QString("Interceptions"), ::OpenAPI::toJsonValue(m_interceptions));
    }
    if (m_is_game_over_isSet) {
        obj.insert(QString("IsGameOver"), ::OpenAPI::toJsonValue(m_is_game_over));
    }
    if (m_kick_return_long_isSet) {
        obj.insert(QString("KickReturnLong"), ::OpenAPI::toJsonValue(m_kick_return_long));
    }
    if (m_kick_return_touchdowns_isSet) {
        obj.insert(QString("KickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_kick_return_touchdowns));
    }
    if (m_kick_return_yards_isSet) {
        obj.insert(QString("KickReturnYards"), ::OpenAPI::toJsonValue(m_kick_return_yards));
    }
    if (m_kick_returns_isSet) {
        obj.insert(QString("KickReturns"), ::OpenAPI::toJsonValue(m_kick_returns));
    }
    if (m_kicker_fantasy_points_allowed_isSet) {
        obj.insert(QString("KickerFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_kicker_fantasy_points_allowed));
    }
    if (m_offensive_yards_allowed_isSet) {
        obj.insert(QString("OffensiveYardsAllowed"), ::OpenAPI::toJsonValue(m_offensive_yards_allowed));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentID"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_opponent_position_rank_isSet) {
        obj.insert(QString("OpponentPositionRank"), ::OpenAPI::toJsonValue(m_opponent_position_rank));
    }
    if (m_opponent_rank_isSet) {
        obj.insert(QString("OpponentRank"), ::OpenAPI::toJsonValue(m_opponent_rank));
    }
    if (m_passes_defended_isSet) {
        obj.insert(QString("PassesDefended"), ::OpenAPI::toJsonValue(m_passes_defended));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_points_allowed_isSet) {
        obj.insert(QString("PointsAllowed"), ::OpenAPI::toJsonValue(m_points_allowed));
    }
    if (m_points_allowed_by_defense_special_teams_isSet) {
        obj.insert(QString("PointsAllowedByDefenseSpecialTeams"), ::OpenAPI::toJsonValue(m_points_allowed_by_defense_special_teams));
    }
    if (m_punt_return_long_isSet) {
        obj.insert(QString("PuntReturnLong"), ::OpenAPI::toJsonValue(m_punt_return_long));
    }
    if (m_punt_return_touchdowns_isSet) {
        obj.insert(QString("PuntReturnTouchdowns"), ::OpenAPI::toJsonValue(m_punt_return_touchdowns));
    }
    if (m_punt_return_yards_isSet) {
        obj.insert(QString("PuntReturnYards"), ::OpenAPI::toJsonValue(m_punt_return_yards));
    }
    if (m_punt_returns_isSet) {
        obj.insert(QString("PuntReturns"), ::OpenAPI::toJsonValue(m_punt_returns));
    }
    if (m_quarterback_fantasy_points_allowed_isSet) {
        obj.insert(QString("QuarterbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_quarterback_fantasy_points_allowed));
    }
    if (m_quarterback_hits_isSet) {
        obj.insert(QString("QuarterbackHits"), ::OpenAPI::toJsonValue(m_quarterback_hits));
    }
    if (m_runningback_fantasy_points_allowed_isSet) {
        obj.insert(QString("RunningbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_runningback_fantasy_points_allowed));
    }
    if (m_sack_yards_isSet) {
        obj.insert(QString("SackYards"), ::OpenAPI::toJsonValue(m_sack_yards));
    }
    if (m_sacks_isSet) {
        obj.insert(QString("Sacks"), ::OpenAPI::toJsonValue(m_sacks));
    }
    if (m_safeties_isSet) {
        obj.insert(QString("Safeties"), ::OpenAPI::toJsonValue(m_safeties));
    }
    if (m_score_id_isSet) {
        obj.insert(QString("ScoreID"), ::OpenAPI::toJsonValue(m_score_id));
    }
    if (m_scoring_details.size() > 0) {
        obj.insert(QString("ScoringDetails"), ::OpenAPI::toJsonValue(m_scoring_details));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_solo_tackles_isSet) {
        obj.insert(QString("SoloTackles"), ::OpenAPI::toJsonValue(m_solo_tackles));
    }
    if (m_special_teams_touchdowns_isSet) {
        obj.insert(QString("SpecialTeamsTouchdowns"), ::OpenAPI::toJsonValue(m_special_teams_touchdowns));
    }
    if (m_stadium_isSet) {
        obj.insert(QString("Stadium"), ::OpenAPI::toJsonValue(m_stadium));
    }
    if (m_tackles_for_loss_isSet) {
        obj.insert(QString("TacklesForLoss"), ::OpenAPI::toJsonValue(m_tackles_for_loss));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("Temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_third_down_attempts_isSet) {
        obj.insert(QString("ThirdDownAttempts"), ::OpenAPI::toJsonValue(m_third_down_attempts));
    }
    if (m_third_down_conversions_isSet) {
        obj.insert(QString("ThirdDownConversions"), ::OpenAPI::toJsonValue(m_third_down_conversions));
    }
    if (m_tight_end_fantasy_points_allowed_isSet) {
        obj.insert(QString("TightEndFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_tight_end_fantasy_points_allowed));
    }
    if (m_touchdowns_scored_isSet) {
        obj.insert(QString("TouchdownsScored"), ::OpenAPI::toJsonValue(m_touchdowns_scored));
    }
    if (m_two_point_conversion_returns_isSet) {
        obj.insert(QString("TwoPointConversionReturns"), ::OpenAPI::toJsonValue(m_two_point_conversion_returns));
    }
    if (m_victiv_salary_isSet) {
        obj.insert(QString("VictivSalary"), ::OpenAPI::toJsonValue(m_victiv_salary));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_wide_receiver_fantasy_points_allowed_isSet) {
        obj.insert(QString("WideReceiverFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_wide_receiver_fantasy_points_allowed));
    }
    if (m_wind_speed_isSet) {
        obj.insert(QString("WindSpeed"), ::OpenAPI::toJsonValue(m_wind_speed));
    }
    if (m_yahoo_fantasy_points_allowed_isSet) {
        obj.insert(QString("YahooFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_yahoo_fantasy_points_allowed));
    }
    if (m_yahoo_kicker_fantasy_points_allowed_isSet) {
        obj.insert(QString("YahooKickerFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_yahoo_kicker_fantasy_points_allowed));
    }
    if (m_yahoo_position_isSet) {
        obj.insert(QString("YahooPosition"), ::OpenAPI::toJsonValue(m_yahoo_position));
    }
    if (m_yahoo_quarterback_fantasy_points_allowed_isSet) {
        obj.insert(QString("YahooQuarterbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_yahoo_quarterback_fantasy_points_allowed));
    }
    if (m_yahoo_runningback_fantasy_points_allowed_isSet) {
        obj.insert(QString("YahooRunningbackFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_yahoo_runningback_fantasy_points_allowed));
    }
    if (m_yahoo_salary_isSet) {
        obj.insert(QString("YahooSalary"), ::OpenAPI::toJsonValue(m_yahoo_salary));
    }
    if (m_yahoo_tight_end_fantasy_points_allowed_isSet) {
        obj.insert(QString("YahooTightEndFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_yahoo_tight_end_fantasy_points_allowed));
    }
    if (m_yahoo_wide_receiver_fantasy_points_allowed_isSet) {
        obj.insert(QString("YahooWideReceiverFantasyPointsAllowed"), ::OpenAPI::toJsonValue(m_yahoo_wide_receiver_fantasy_points_allowed));
    }
    return obj;
}

double OAIFantasyDefenseGame::getAssistedTackles() const {
    return m_assisted_tackles;
}
void OAIFantasyDefenseGame::setAssistedTackles(const double &assisted_tackles) {
    m_assisted_tackles = assisted_tackles;
    m_assisted_tackles_isSet = true;
}

bool OAIFantasyDefenseGame::is_assisted_tackles_Set() const{
    return m_assisted_tackles_isSet;
}

bool OAIFantasyDefenseGame::is_assisted_tackles_Valid() const{
    return m_assisted_tackles_isValid;
}

double OAIFantasyDefenseGame::getBlockedKickReturnTouchdowns() const {
    return m_blocked_kick_return_touchdowns;
}
void OAIFantasyDefenseGame::setBlockedKickReturnTouchdowns(const double &blocked_kick_return_touchdowns) {
    m_blocked_kick_return_touchdowns = blocked_kick_return_touchdowns;
    m_blocked_kick_return_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_blocked_kick_return_touchdowns_Set() const{
    return m_blocked_kick_return_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_blocked_kick_return_touchdowns_Valid() const{
    return m_blocked_kick_return_touchdowns_isValid;
}

double OAIFantasyDefenseGame::getBlockedKickReturnYards() const {
    return m_blocked_kick_return_yards;
}
void OAIFantasyDefenseGame::setBlockedKickReturnYards(const double &blocked_kick_return_yards) {
    m_blocked_kick_return_yards = blocked_kick_return_yards;
    m_blocked_kick_return_yards_isSet = true;
}

bool OAIFantasyDefenseGame::is_blocked_kick_return_yards_Set() const{
    return m_blocked_kick_return_yards_isSet;
}

bool OAIFantasyDefenseGame::is_blocked_kick_return_yards_Valid() const{
    return m_blocked_kick_return_yards_isValid;
}

double OAIFantasyDefenseGame::getBlockedKicks() const {
    return m_blocked_kicks;
}
void OAIFantasyDefenseGame::setBlockedKicks(const double &blocked_kicks) {
    m_blocked_kicks = blocked_kicks;
    m_blocked_kicks_isSet = true;
}

bool OAIFantasyDefenseGame::is_blocked_kicks_Set() const{
    return m_blocked_kicks_isSet;
}

bool OAIFantasyDefenseGame::is_blocked_kicks_Valid() const{
    return m_blocked_kicks_isValid;
}

QString OAIFantasyDefenseGame::getDate() const {
    return m_date;
}
void OAIFantasyDefenseGame::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFantasyDefenseGame::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFantasyDefenseGame::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIFantasyDefenseGame::getDateTime() const {
    return m_date_time;
}
void OAIFantasyDefenseGame::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIFantasyDefenseGame::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIFantasyDefenseGame::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIFantasyDefenseGame::getDay() const {
    return m_day;
}
void OAIFantasyDefenseGame::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIFantasyDefenseGame::is_day_Set() const{
    return m_day_isSet;
}

bool OAIFantasyDefenseGame::is_day_Valid() const{
    return m_day_isValid;
}

double OAIFantasyDefenseGame::getDefensiveTouchdowns() const {
    return m_defensive_touchdowns;
}
void OAIFantasyDefenseGame::setDefensiveTouchdowns(const double &defensive_touchdowns) {
    m_defensive_touchdowns = defensive_touchdowns;
    m_defensive_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_defensive_touchdowns_Set() const{
    return m_defensive_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_defensive_touchdowns_Valid() const{
    return m_defensive_touchdowns_isValid;
}

double OAIFantasyDefenseGame::getDraftKingsFantasyPointsAllowed() const {
    return m_draft_kings_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setDraftKingsFantasyPointsAllowed(const double &draft_kings_fantasy_points_allowed) {
    m_draft_kings_fantasy_points_allowed = draft_kings_fantasy_points_allowed;
    m_draft_kings_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_fantasy_points_allowed_Set() const{
    return m_draft_kings_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_fantasy_points_allowed_Valid() const{
    return m_draft_kings_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getDraftKingsKickerFantasyPointsAllowed() const {
    return m_draft_kings_kicker_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setDraftKingsKickerFantasyPointsAllowed(const double &draft_kings_kicker_fantasy_points_allowed) {
    m_draft_kings_kicker_fantasy_points_allowed = draft_kings_kicker_fantasy_points_allowed;
    m_draft_kings_kicker_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_kicker_fantasy_points_allowed_Set() const{
    return m_draft_kings_kicker_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_kicker_fantasy_points_allowed_Valid() const{
    return m_draft_kings_kicker_fantasy_points_allowed_isValid;
}

QString OAIFantasyDefenseGame::getDraftKingsPosition() const {
    return m_draft_kings_position;
}
void OAIFantasyDefenseGame::setDraftKingsPosition(const QString &draft_kings_position) {
    m_draft_kings_position = draft_kings_position;
    m_draft_kings_position_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_position_Set() const{
    return m_draft_kings_position_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_position_Valid() const{
    return m_draft_kings_position_isValid;
}

double OAIFantasyDefenseGame::getDraftKingsQuarterbackFantasyPointsAllowed() const {
    return m_draft_kings_quarterback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setDraftKingsQuarterbackFantasyPointsAllowed(const double &draft_kings_quarterback_fantasy_points_allowed) {
    m_draft_kings_quarterback_fantasy_points_allowed = draft_kings_quarterback_fantasy_points_allowed;
    m_draft_kings_quarterback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_quarterback_fantasy_points_allowed_Set() const{
    return m_draft_kings_quarterback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_quarterback_fantasy_points_allowed_Valid() const{
    return m_draft_kings_quarterback_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getDraftKingsRunningbackFantasyPointsAllowed() const {
    return m_draft_kings_runningback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setDraftKingsRunningbackFantasyPointsAllowed(const double &draft_kings_runningback_fantasy_points_allowed) {
    m_draft_kings_runningback_fantasy_points_allowed = draft_kings_runningback_fantasy_points_allowed;
    m_draft_kings_runningback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_runningback_fantasy_points_allowed_Set() const{
    return m_draft_kings_runningback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_runningback_fantasy_points_allowed_Valid() const{
    return m_draft_kings_runningback_fantasy_points_allowed_isValid;
}

qint32 OAIFantasyDefenseGame::getDraftKingsSalary() const {
    return m_draft_kings_salary;
}
void OAIFantasyDefenseGame::setDraftKingsSalary(const qint32 &draft_kings_salary) {
    m_draft_kings_salary = draft_kings_salary;
    m_draft_kings_salary_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_salary_Set() const{
    return m_draft_kings_salary_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_salary_Valid() const{
    return m_draft_kings_salary_isValid;
}

double OAIFantasyDefenseGame::getDraftKingsTightEndFantasyPointsAllowed() const {
    return m_draft_kings_tight_end_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setDraftKingsTightEndFantasyPointsAllowed(const double &draft_kings_tight_end_fantasy_points_allowed) {
    m_draft_kings_tight_end_fantasy_points_allowed = draft_kings_tight_end_fantasy_points_allowed;
    m_draft_kings_tight_end_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_tight_end_fantasy_points_allowed_Set() const{
    return m_draft_kings_tight_end_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_tight_end_fantasy_points_allowed_Valid() const{
    return m_draft_kings_tight_end_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getDraftKingsWideReceiverFantasyPointsAllowed() const {
    return m_draft_kings_wide_receiver_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setDraftKingsWideReceiverFantasyPointsAllowed(const double &draft_kings_wide_receiver_fantasy_points_allowed) {
    m_draft_kings_wide_receiver_fantasy_points_allowed = draft_kings_wide_receiver_fantasy_points_allowed;
    m_draft_kings_wide_receiver_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_draft_kings_wide_receiver_fantasy_points_allowed_Set() const{
    return m_draft_kings_wide_receiver_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_draft_kings_wide_receiver_fantasy_points_allowed_Valid() const{
    return m_draft_kings_wide_receiver_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFanDuelFantasyPointsAllowed() const {
    return m_fan_duel_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFanDuelFantasyPointsAllowed(const double &fan_duel_fantasy_points_allowed) {
    m_fan_duel_fantasy_points_allowed = fan_duel_fantasy_points_allowed;
    m_fan_duel_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_fantasy_points_allowed_Set() const{
    return m_fan_duel_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_fantasy_points_allowed_Valid() const{
    return m_fan_duel_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFanDuelKickerFantasyPointsAllowed() const {
    return m_fan_duel_kicker_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFanDuelKickerFantasyPointsAllowed(const double &fan_duel_kicker_fantasy_points_allowed) {
    m_fan_duel_kicker_fantasy_points_allowed = fan_duel_kicker_fantasy_points_allowed;
    m_fan_duel_kicker_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_kicker_fantasy_points_allowed_Set() const{
    return m_fan_duel_kicker_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_kicker_fantasy_points_allowed_Valid() const{
    return m_fan_duel_kicker_fantasy_points_allowed_isValid;
}

QString OAIFantasyDefenseGame::getFanDuelPosition() const {
    return m_fan_duel_position;
}
void OAIFantasyDefenseGame::setFanDuelPosition(const QString &fan_duel_position) {
    m_fan_duel_position = fan_duel_position;
    m_fan_duel_position_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_position_Set() const{
    return m_fan_duel_position_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_position_Valid() const{
    return m_fan_duel_position_isValid;
}

double OAIFantasyDefenseGame::getFanDuelQuarterbackFantasyPointsAllowed() const {
    return m_fan_duel_quarterback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFanDuelQuarterbackFantasyPointsAllowed(const double &fan_duel_quarterback_fantasy_points_allowed) {
    m_fan_duel_quarterback_fantasy_points_allowed = fan_duel_quarterback_fantasy_points_allowed;
    m_fan_duel_quarterback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_quarterback_fantasy_points_allowed_Set() const{
    return m_fan_duel_quarterback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_quarterback_fantasy_points_allowed_Valid() const{
    return m_fan_duel_quarterback_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFanDuelRunningbackFantasyPointsAllowed() const {
    return m_fan_duel_runningback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFanDuelRunningbackFantasyPointsAllowed(const double &fan_duel_runningback_fantasy_points_allowed) {
    m_fan_duel_runningback_fantasy_points_allowed = fan_duel_runningback_fantasy_points_allowed;
    m_fan_duel_runningback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_runningback_fantasy_points_allowed_Set() const{
    return m_fan_duel_runningback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_runningback_fantasy_points_allowed_Valid() const{
    return m_fan_duel_runningback_fantasy_points_allowed_isValid;
}

qint32 OAIFantasyDefenseGame::getFanDuelSalary() const {
    return m_fan_duel_salary;
}
void OAIFantasyDefenseGame::setFanDuelSalary(const qint32 &fan_duel_salary) {
    m_fan_duel_salary = fan_duel_salary;
    m_fan_duel_salary_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_salary_Set() const{
    return m_fan_duel_salary_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_salary_Valid() const{
    return m_fan_duel_salary_isValid;
}

double OAIFantasyDefenseGame::getFanDuelTightEndFantasyPointsAllowed() const {
    return m_fan_duel_tight_end_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFanDuelTightEndFantasyPointsAllowed(const double &fan_duel_tight_end_fantasy_points_allowed) {
    m_fan_duel_tight_end_fantasy_points_allowed = fan_duel_tight_end_fantasy_points_allowed;
    m_fan_duel_tight_end_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_tight_end_fantasy_points_allowed_Set() const{
    return m_fan_duel_tight_end_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_tight_end_fantasy_points_allowed_Valid() const{
    return m_fan_duel_tight_end_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFanDuelWideReceiverFantasyPointsAllowed() const {
    return m_fan_duel_wide_receiver_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFanDuelWideReceiverFantasyPointsAllowed(const double &fan_duel_wide_receiver_fantasy_points_allowed) {
    m_fan_duel_wide_receiver_fantasy_points_allowed = fan_duel_wide_receiver_fantasy_points_allowed;
    m_fan_duel_wide_receiver_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fan_duel_wide_receiver_fantasy_points_allowed_Set() const{
    return m_fan_duel_wide_receiver_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fan_duel_wide_receiver_fantasy_points_allowed_Valid() const{
    return m_fan_duel_wide_receiver_fantasy_points_allowed_isValid;
}

qint32 OAIFantasyDefenseGame::getFantasyDataSalary() const {
    return m_fantasy_data_salary;
}
void OAIFantasyDefenseGame::setFantasyDataSalary(const qint32 &fantasy_data_salary) {
    m_fantasy_data_salary = fantasy_data_salary;
    m_fantasy_data_salary_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_data_salary_Set() const{
    return m_fantasy_data_salary_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_data_salary_Valid() const{
    return m_fantasy_data_salary_isValid;
}

qint32 OAIFantasyDefenseGame::getFantasyDefenseId() const {
    return m_fantasy_defense_id;
}
void OAIFantasyDefenseGame::setFantasyDefenseId(const qint32 &fantasy_defense_id) {
    m_fantasy_defense_id = fantasy_defense_id;
    m_fantasy_defense_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_defense_id_Set() const{
    return m_fantasy_defense_id_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_defense_id_Valid() const{
    return m_fantasy_defense_id_isValid;
}

double OAIFantasyDefenseGame::getFantasyDraftFantasyPointsAllowed() const {
    return m_fantasy_draft_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFantasyDraftFantasyPointsAllowed(const double &fantasy_draft_fantasy_points_allowed) {
    m_fantasy_draft_fantasy_points_allowed = fantasy_draft_fantasy_points_allowed;
    m_fantasy_draft_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_fantasy_points_allowed_Set() const{
    return m_fantasy_draft_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_fantasy_points_allowed_Valid() const{
    return m_fantasy_draft_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFantasyDraftKickerFantasyPointsAllowed() const {
    return m_fantasy_draft_kicker_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFantasyDraftKickerFantasyPointsAllowed(const double &fantasy_draft_kicker_fantasy_points_allowed) {
    m_fantasy_draft_kicker_fantasy_points_allowed = fantasy_draft_kicker_fantasy_points_allowed;
    m_fantasy_draft_kicker_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_kicker_fantasy_points_allowed_Set() const{
    return m_fantasy_draft_kicker_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_kicker_fantasy_points_allowed_Valid() const{
    return m_fantasy_draft_kicker_fantasy_points_allowed_isValid;
}

QString OAIFantasyDefenseGame::getFantasyDraftPosition() const {
    return m_fantasy_draft_position;
}
void OAIFantasyDefenseGame::setFantasyDraftPosition(const QString &fantasy_draft_position) {
    m_fantasy_draft_position = fantasy_draft_position;
    m_fantasy_draft_position_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_position_Set() const{
    return m_fantasy_draft_position_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_position_Valid() const{
    return m_fantasy_draft_position_isValid;
}

double OAIFantasyDefenseGame::getFantasyDraftQuarterbackFantasyPointsAllowed() const {
    return m_fantasy_draft_quarterback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFantasyDraftQuarterbackFantasyPointsAllowed(const double &fantasy_draft_quarterback_fantasy_points_allowed) {
    m_fantasy_draft_quarterback_fantasy_points_allowed = fantasy_draft_quarterback_fantasy_points_allowed;
    m_fantasy_draft_quarterback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_quarterback_fantasy_points_allowed_Set() const{
    return m_fantasy_draft_quarterback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_quarterback_fantasy_points_allowed_Valid() const{
    return m_fantasy_draft_quarterback_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFantasyDraftRunningbackFantasyPointsAllowed() const {
    return m_fantasy_draft_runningback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFantasyDraftRunningbackFantasyPointsAllowed(const double &fantasy_draft_runningback_fantasy_points_allowed) {
    m_fantasy_draft_runningback_fantasy_points_allowed = fantasy_draft_runningback_fantasy_points_allowed;
    m_fantasy_draft_runningback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_runningback_fantasy_points_allowed_Set() const{
    return m_fantasy_draft_runningback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_runningback_fantasy_points_allowed_Valid() const{
    return m_fantasy_draft_runningback_fantasy_points_allowed_isValid;
}

qint32 OAIFantasyDefenseGame::getFantasyDraftSalary() const {
    return m_fantasy_draft_salary;
}
void OAIFantasyDefenseGame::setFantasyDraftSalary(const qint32 &fantasy_draft_salary) {
    m_fantasy_draft_salary = fantasy_draft_salary;
    m_fantasy_draft_salary_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_salary_Set() const{
    return m_fantasy_draft_salary_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_salary_Valid() const{
    return m_fantasy_draft_salary_isValid;
}

double OAIFantasyDefenseGame::getFantasyDraftTightEndFantasyPointsAllowed() const {
    return m_fantasy_draft_tight_end_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFantasyDraftTightEndFantasyPointsAllowed(const double &fantasy_draft_tight_end_fantasy_points_allowed) {
    m_fantasy_draft_tight_end_fantasy_points_allowed = fantasy_draft_tight_end_fantasy_points_allowed;
    m_fantasy_draft_tight_end_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_tight_end_fantasy_points_allowed_Set() const{
    return m_fantasy_draft_tight_end_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_tight_end_fantasy_points_allowed_Valid() const{
    return m_fantasy_draft_tight_end_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFantasyDraftWideReceiverFantasyPointsAllowed() const {
    return m_fantasy_draft_wide_receiver_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFantasyDraftWideReceiverFantasyPointsAllowed(const double &fantasy_draft_wide_receiver_fantasy_points_allowed) {
    m_fantasy_draft_wide_receiver_fantasy_points_allowed = fantasy_draft_wide_receiver_fantasy_points_allowed;
    m_fantasy_draft_wide_receiver_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_wide_receiver_fantasy_points_allowed_Set() const{
    return m_fantasy_draft_wide_receiver_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_draft_wide_receiver_fantasy_points_allowed_Valid() const{
    return m_fantasy_draft_wide_receiver_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIFantasyDefenseGame::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAIFantasyDefenseGame::getFantasyPointsAllowed() const {
    return m_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setFantasyPointsAllowed(const double &fantasy_points_allowed) {
    m_fantasy_points_allowed = fantasy_points_allowed;
    m_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_points_allowed_Set() const{
    return m_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_points_allowed_Valid() const{
    return m_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAIFantasyDefenseGame::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAIFantasyDefenseGame::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAIFantasyDefenseGame::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAIFantasyDefenseGame::getFantasyPointsFantasyDraft() const {
    return m_fantasy_points_fantasy_draft;
}
void OAIFantasyDefenseGame::setFantasyPointsFantasyDraft(const double &fantasy_points_fantasy_draft) {
    m_fantasy_points_fantasy_draft = fantasy_points_fantasy_draft;
    m_fantasy_points_fantasy_draft_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_points_fantasy_draft_Set() const{
    return m_fantasy_points_fantasy_draft_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_points_fantasy_draft_Valid() const{
    return m_fantasy_points_fantasy_draft_isValid;
}

double OAIFantasyDefenseGame::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAIFantasyDefenseGame::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAIFantasyDefenseGame::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAIFantasyDefenseGame::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

double OAIFantasyDefenseGame::getFieldGoalReturnTouchdowns() const {
    return m_field_goal_return_touchdowns;
}
void OAIFantasyDefenseGame::setFieldGoalReturnTouchdowns(const double &field_goal_return_touchdowns) {
    m_field_goal_return_touchdowns = field_goal_return_touchdowns;
    m_field_goal_return_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_field_goal_return_touchdowns_Set() const{
    return m_field_goal_return_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_field_goal_return_touchdowns_Valid() const{
    return m_field_goal_return_touchdowns_isValid;
}

double OAIFantasyDefenseGame::getFieldGoalReturnYards() const {
    return m_field_goal_return_yards;
}
void OAIFantasyDefenseGame::setFieldGoalReturnYards(const double &field_goal_return_yards) {
    m_field_goal_return_yards = field_goal_return_yards;
    m_field_goal_return_yards_isSet = true;
}

bool OAIFantasyDefenseGame::is_field_goal_return_yards_Set() const{
    return m_field_goal_return_yards_isSet;
}

bool OAIFantasyDefenseGame::is_field_goal_return_yards_Valid() const{
    return m_field_goal_return_yards_isValid;
}

double OAIFantasyDefenseGame::getFourthDownAttempts() const {
    return m_fourth_down_attempts;
}
void OAIFantasyDefenseGame::setFourthDownAttempts(const double &fourth_down_attempts) {
    m_fourth_down_attempts = fourth_down_attempts;
    m_fourth_down_attempts_isSet = true;
}

bool OAIFantasyDefenseGame::is_fourth_down_attempts_Set() const{
    return m_fourth_down_attempts_isSet;
}

bool OAIFantasyDefenseGame::is_fourth_down_attempts_Valid() const{
    return m_fourth_down_attempts_isValid;
}

double OAIFantasyDefenseGame::getFourthDownConversions() const {
    return m_fourth_down_conversions;
}
void OAIFantasyDefenseGame::setFourthDownConversions(const double &fourth_down_conversions) {
    m_fourth_down_conversions = fourth_down_conversions;
    m_fourth_down_conversions_isSet = true;
}

bool OAIFantasyDefenseGame::is_fourth_down_conversions_Set() const{
    return m_fourth_down_conversions_isSet;
}

bool OAIFantasyDefenseGame::is_fourth_down_conversions_Valid() const{
    return m_fourth_down_conversions_isValid;
}

double OAIFantasyDefenseGame::getFumbleReturnTouchdowns() const {
    return m_fumble_return_touchdowns;
}
void OAIFantasyDefenseGame::setFumbleReturnTouchdowns(const double &fumble_return_touchdowns) {
    m_fumble_return_touchdowns = fumble_return_touchdowns;
    m_fumble_return_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_fumble_return_touchdowns_Set() const{
    return m_fumble_return_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_fumble_return_touchdowns_Valid() const{
    return m_fumble_return_touchdowns_isValid;
}

double OAIFantasyDefenseGame::getFumbleReturnYards() const {
    return m_fumble_return_yards;
}
void OAIFantasyDefenseGame::setFumbleReturnYards(const double &fumble_return_yards) {
    m_fumble_return_yards = fumble_return_yards;
    m_fumble_return_yards_isSet = true;
}

bool OAIFantasyDefenseGame::is_fumble_return_yards_Set() const{
    return m_fumble_return_yards_isSet;
}

bool OAIFantasyDefenseGame::is_fumble_return_yards_Valid() const{
    return m_fumble_return_yards_isValid;
}

double OAIFantasyDefenseGame::getFumblesForced() const {
    return m_fumbles_forced;
}
void OAIFantasyDefenseGame::setFumblesForced(const double &fumbles_forced) {
    m_fumbles_forced = fumbles_forced;
    m_fumbles_forced_isSet = true;
}

bool OAIFantasyDefenseGame::is_fumbles_forced_Set() const{
    return m_fumbles_forced_isSet;
}

bool OAIFantasyDefenseGame::is_fumbles_forced_Valid() const{
    return m_fumbles_forced_isValid;
}

double OAIFantasyDefenseGame::getFumblesRecovered() const {
    return m_fumbles_recovered;
}
void OAIFantasyDefenseGame::setFumblesRecovered(const double &fumbles_recovered) {
    m_fumbles_recovered = fumbles_recovered;
    m_fumbles_recovered_isSet = true;
}

bool OAIFantasyDefenseGame::is_fumbles_recovered_Set() const{
    return m_fumbles_recovered_isSet;
}

bool OAIFantasyDefenseGame::is_fumbles_recovered_Valid() const{
    return m_fumbles_recovered_isValid;
}

QString OAIFantasyDefenseGame::getGameKey() const {
    return m_game_key;
}
void OAIFantasyDefenseGame::setGameKey(const QString &game_key) {
    m_game_key = game_key;
    m_game_key_isSet = true;
}

bool OAIFantasyDefenseGame::is_game_key_Set() const{
    return m_game_key_isSet;
}

bool OAIFantasyDefenseGame::is_game_key_Valid() const{
    return m_game_key_isValid;
}

qint32 OAIFantasyDefenseGame::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIFantasyDefenseGame::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIFantasyDefenseGame::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIFantasyDefenseGame::getGlobalOpponentId() const {
    return m_global_opponent_id;
}
void OAIFantasyDefenseGame::setGlobalOpponentId(const qint32 &global_opponent_id) {
    m_global_opponent_id = global_opponent_id;
    m_global_opponent_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_global_opponent_id_Set() const{
    return m_global_opponent_id_isSet;
}

bool OAIFantasyDefenseGame::is_global_opponent_id_Valid() const{
    return m_global_opponent_id_isValid;
}

qint32 OAIFantasyDefenseGame::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIFantasyDefenseGame::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIFantasyDefenseGame::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

QString OAIFantasyDefenseGame::getHomeOrAway() const {
    return m_home_or_away;
}
void OAIFantasyDefenseGame::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAIFantasyDefenseGame::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAIFantasyDefenseGame::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

qint32 OAIFantasyDefenseGame::getHumidity() const {
    return m_humidity;
}
void OAIFantasyDefenseGame::setHumidity(const qint32 &humidity) {
    m_humidity = humidity;
    m_humidity_isSet = true;
}

bool OAIFantasyDefenseGame::is_humidity_Set() const{
    return m_humidity_isSet;
}

bool OAIFantasyDefenseGame::is_humidity_Valid() const{
    return m_humidity_isValid;
}

double OAIFantasyDefenseGame::getInterceptionReturnTouchdowns() const {
    return m_interception_return_touchdowns;
}
void OAIFantasyDefenseGame::setInterceptionReturnTouchdowns(const double &interception_return_touchdowns) {
    m_interception_return_touchdowns = interception_return_touchdowns;
    m_interception_return_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_interception_return_touchdowns_Set() const{
    return m_interception_return_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_interception_return_touchdowns_Valid() const{
    return m_interception_return_touchdowns_isValid;
}

double OAIFantasyDefenseGame::getInterceptionReturnYards() const {
    return m_interception_return_yards;
}
void OAIFantasyDefenseGame::setInterceptionReturnYards(const double &interception_return_yards) {
    m_interception_return_yards = interception_return_yards;
    m_interception_return_yards_isSet = true;
}

bool OAIFantasyDefenseGame::is_interception_return_yards_Set() const{
    return m_interception_return_yards_isSet;
}

bool OAIFantasyDefenseGame::is_interception_return_yards_Valid() const{
    return m_interception_return_yards_isValid;
}

double OAIFantasyDefenseGame::getInterceptions() const {
    return m_interceptions;
}
void OAIFantasyDefenseGame::setInterceptions(const double &interceptions) {
    m_interceptions = interceptions;
    m_interceptions_isSet = true;
}

bool OAIFantasyDefenseGame::is_interceptions_Set() const{
    return m_interceptions_isSet;
}

bool OAIFantasyDefenseGame::is_interceptions_Valid() const{
    return m_interceptions_isValid;
}

bool OAIFantasyDefenseGame::isIsGameOver() const {
    return m_is_game_over;
}
void OAIFantasyDefenseGame::setIsGameOver(const bool &is_game_over) {
    m_is_game_over = is_game_over;
    m_is_game_over_isSet = true;
}

bool OAIFantasyDefenseGame::is_is_game_over_Set() const{
    return m_is_game_over_isSet;
}

bool OAIFantasyDefenseGame::is_is_game_over_Valid() const{
    return m_is_game_over_isValid;
}

double OAIFantasyDefenseGame::getKickReturnLong() const {
    return m_kick_return_long;
}
void OAIFantasyDefenseGame::setKickReturnLong(const double &kick_return_long) {
    m_kick_return_long = kick_return_long;
    m_kick_return_long_isSet = true;
}

bool OAIFantasyDefenseGame::is_kick_return_long_Set() const{
    return m_kick_return_long_isSet;
}

bool OAIFantasyDefenseGame::is_kick_return_long_Valid() const{
    return m_kick_return_long_isValid;
}

double OAIFantasyDefenseGame::getKickReturnTouchdowns() const {
    return m_kick_return_touchdowns;
}
void OAIFantasyDefenseGame::setKickReturnTouchdowns(const double &kick_return_touchdowns) {
    m_kick_return_touchdowns = kick_return_touchdowns;
    m_kick_return_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_kick_return_touchdowns_Set() const{
    return m_kick_return_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_kick_return_touchdowns_Valid() const{
    return m_kick_return_touchdowns_isValid;
}

double OAIFantasyDefenseGame::getKickReturnYards() const {
    return m_kick_return_yards;
}
void OAIFantasyDefenseGame::setKickReturnYards(const double &kick_return_yards) {
    m_kick_return_yards = kick_return_yards;
    m_kick_return_yards_isSet = true;
}

bool OAIFantasyDefenseGame::is_kick_return_yards_Set() const{
    return m_kick_return_yards_isSet;
}

bool OAIFantasyDefenseGame::is_kick_return_yards_Valid() const{
    return m_kick_return_yards_isValid;
}

double OAIFantasyDefenseGame::getKickReturns() const {
    return m_kick_returns;
}
void OAIFantasyDefenseGame::setKickReturns(const double &kick_returns) {
    m_kick_returns = kick_returns;
    m_kick_returns_isSet = true;
}

bool OAIFantasyDefenseGame::is_kick_returns_Set() const{
    return m_kick_returns_isSet;
}

bool OAIFantasyDefenseGame::is_kick_returns_Valid() const{
    return m_kick_returns_isValid;
}

double OAIFantasyDefenseGame::getKickerFantasyPointsAllowed() const {
    return m_kicker_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setKickerFantasyPointsAllowed(const double &kicker_fantasy_points_allowed) {
    m_kicker_fantasy_points_allowed = kicker_fantasy_points_allowed;
    m_kicker_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_kicker_fantasy_points_allowed_Set() const{
    return m_kicker_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_kicker_fantasy_points_allowed_Valid() const{
    return m_kicker_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getOffensiveYardsAllowed() const {
    return m_offensive_yards_allowed;
}
void OAIFantasyDefenseGame::setOffensiveYardsAllowed(const double &offensive_yards_allowed) {
    m_offensive_yards_allowed = offensive_yards_allowed;
    m_offensive_yards_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_offensive_yards_allowed_Set() const{
    return m_offensive_yards_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_offensive_yards_allowed_Valid() const{
    return m_offensive_yards_allowed_isValid;
}

QString OAIFantasyDefenseGame::getOpponent() const {
    return m_opponent;
}
void OAIFantasyDefenseGame::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIFantasyDefenseGame::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIFantasyDefenseGame::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIFantasyDefenseGame::getOpponentId() const {
    return m_opponent_id;
}
void OAIFantasyDefenseGame::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAIFantasyDefenseGame::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

qint32 OAIFantasyDefenseGame::getOpponentPositionRank() const {
    return m_opponent_position_rank;
}
void OAIFantasyDefenseGame::setOpponentPositionRank(const qint32 &opponent_position_rank) {
    m_opponent_position_rank = opponent_position_rank;
    m_opponent_position_rank_isSet = true;
}

bool OAIFantasyDefenseGame::is_opponent_position_rank_Set() const{
    return m_opponent_position_rank_isSet;
}

bool OAIFantasyDefenseGame::is_opponent_position_rank_Valid() const{
    return m_opponent_position_rank_isValid;
}

qint32 OAIFantasyDefenseGame::getOpponentRank() const {
    return m_opponent_rank;
}
void OAIFantasyDefenseGame::setOpponentRank(const qint32 &opponent_rank) {
    m_opponent_rank = opponent_rank;
    m_opponent_rank_isSet = true;
}

bool OAIFantasyDefenseGame::is_opponent_rank_Set() const{
    return m_opponent_rank_isSet;
}

bool OAIFantasyDefenseGame::is_opponent_rank_Valid() const{
    return m_opponent_rank_isValid;
}

double OAIFantasyDefenseGame::getPassesDefended() const {
    return m_passes_defended;
}
void OAIFantasyDefenseGame::setPassesDefended(const double &passes_defended) {
    m_passes_defended = passes_defended;
    m_passes_defended_isSet = true;
}

bool OAIFantasyDefenseGame::is_passes_defended_Set() const{
    return m_passes_defended_isSet;
}

bool OAIFantasyDefenseGame::is_passes_defended_Valid() const{
    return m_passes_defended_isValid;
}

qint32 OAIFantasyDefenseGame::getPlayerId() const {
    return m_player_id;
}
void OAIFantasyDefenseGame::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIFantasyDefenseGame::is_player_id_Valid() const{
    return m_player_id_isValid;
}

double OAIFantasyDefenseGame::getPointsAllowed() const {
    return m_points_allowed;
}
void OAIFantasyDefenseGame::setPointsAllowed(const double &points_allowed) {
    m_points_allowed = points_allowed;
    m_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_points_allowed_Set() const{
    return m_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_points_allowed_Valid() const{
    return m_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getPointsAllowedByDefenseSpecialTeams() const {
    return m_points_allowed_by_defense_special_teams;
}
void OAIFantasyDefenseGame::setPointsAllowedByDefenseSpecialTeams(const double &points_allowed_by_defense_special_teams) {
    m_points_allowed_by_defense_special_teams = points_allowed_by_defense_special_teams;
    m_points_allowed_by_defense_special_teams_isSet = true;
}

bool OAIFantasyDefenseGame::is_points_allowed_by_defense_special_teams_Set() const{
    return m_points_allowed_by_defense_special_teams_isSet;
}

bool OAIFantasyDefenseGame::is_points_allowed_by_defense_special_teams_Valid() const{
    return m_points_allowed_by_defense_special_teams_isValid;
}

double OAIFantasyDefenseGame::getPuntReturnLong() const {
    return m_punt_return_long;
}
void OAIFantasyDefenseGame::setPuntReturnLong(const double &punt_return_long) {
    m_punt_return_long = punt_return_long;
    m_punt_return_long_isSet = true;
}

bool OAIFantasyDefenseGame::is_punt_return_long_Set() const{
    return m_punt_return_long_isSet;
}

bool OAIFantasyDefenseGame::is_punt_return_long_Valid() const{
    return m_punt_return_long_isValid;
}

double OAIFantasyDefenseGame::getPuntReturnTouchdowns() const {
    return m_punt_return_touchdowns;
}
void OAIFantasyDefenseGame::setPuntReturnTouchdowns(const double &punt_return_touchdowns) {
    m_punt_return_touchdowns = punt_return_touchdowns;
    m_punt_return_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_punt_return_touchdowns_Set() const{
    return m_punt_return_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_punt_return_touchdowns_Valid() const{
    return m_punt_return_touchdowns_isValid;
}

double OAIFantasyDefenseGame::getPuntReturnYards() const {
    return m_punt_return_yards;
}
void OAIFantasyDefenseGame::setPuntReturnYards(const double &punt_return_yards) {
    m_punt_return_yards = punt_return_yards;
    m_punt_return_yards_isSet = true;
}

bool OAIFantasyDefenseGame::is_punt_return_yards_Set() const{
    return m_punt_return_yards_isSet;
}

bool OAIFantasyDefenseGame::is_punt_return_yards_Valid() const{
    return m_punt_return_yards_isValid;
}

double OAIFantasyDefenseGame::getPuntReturns() const {
    return m_punt_returns;
}
void OAIFantasyDefenseGame::setPuntReturns(const double &punt_returns) {
    m_punt_returns = punt_returns;
    m_punt_returns_isSet = true;
}

bool OAIFantasyDefenseGame::is_punt_returns_Set() const{
    return m_punt_returns_isSet;
}

bool OAIFantasyDefenseGame::is_punt_returns_Valid() const{
    return m_punt_returns_isValid;
}

double OAIFantasyDefenseGame::getQuarterbackFantasyPointsAllowed() const {
    return m_quarterback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setQuarterbackFantasyPointsAllowed(const double &quarterback_fantasy_points_allowed) {
    m_quarterback_fantasy_points_allowed = quarterback_fantasy_points_allowed;
    m_quarterback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_quarterback_fantasy_points_allowed_Set() const{
    return m_quarterback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_quarterback_fantasy_points_allowed_Valid() const{
    return m_quarterback_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getQuarterbackHits() const {
    return m_quarterback_hits;
}
void OAIFantasyDefenseGame::setQuarterbackHits(const double &quarterback_hits) {
    m_quarterback_hits = quarterback_hits;
    m_quarterback_hits_isSet = true;
}

bool OAIFantasyDefenseGame::is_quarterback_hits_Set() const{
    return m_quarterback_hits_isSet;
}

bool OAIFantasyDefenseGame::is_quarterback_hits_Valid() const{
    return m_quarterback_hits_isValid;
}

double OAIFantasyDefenseGame::getRunningbackFantasyPointsAllowed() const {
    return m_runningback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setRunningbackFantasyPointsAllowed(const double &runningback_fantasy_points_allowed) {
    m_runningback_fantasy_points_allowed = runningback_fantasy_points_allowed;
    m_runningback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_runningback_fantasy_points_allowed_Set() const{
    return m_runningback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_runningback_fantasy_points_allowed_Valid() const{
    return m_runningback_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getSackYards() const {
    return m_sack_yards;
}
void OAIFantasyDefenseGame::setSackYards(const double &sack_yards) {
    m_sack_yards = sack_yards;
    m_sack_yards_isSet = true;
}

bool OAIFantasyDefenseGame::is_sack_yards_Set() const{
    return m_sack_yards_isSet;
}

bool OAIFantasyDefenseGame::is_sack_yards_Valid() const{
    return m_sack_yards_isValid;
}

double OAIFantasyDefenseGame::getSacks() const {
    return m_sacks;
}
void OAIFantasyDefenseGame::setSacks(const double &sacks) {
    m_sacks = sacks;
    m_sacks_isSet = true;
}

bool OAIFantasyDefenseGame::is_sacks_Set() const{
    return m_sacks_isSet;
}

bool OAIFantasyDefenseGame::is_sacks_Valid() const{
    return m_sacks_isValid;
}

double OAIFantasyDefenseGame::getSafeties() const {
    return m_safeties;
}
void OAIFantasyDefenseGame::setSafeties(const double &safeties) {
    m_safeties = safeties;
    m_safeties_isSet = true;
}

bool OAIFantasyDefenseGame::is_safeties_Set() const{
    return m_safeties_isSet;
}

bool OAIFantasyDefenseGame::is_safeties_Valid() const{
    return m_safeties_isValid;
}

qint32 OAIFantasyDefenseGame::getScoreId() const {
    return m_score_id;
}
void OAIFantasyDefenseGame::setScoreId(const qint32 &score_id) {
    m_score_id = score_id;
    m_score_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_score_id_Set() const{
    return m_score_id_isSet;
}

bool OAIFantasyDefenseGame::is_score_id_Valid() const{
    return m_score_id_isValid;
}

QList<OAIScoringDetail> OAIFantasyDefenseGame::getScoringDetails() const {
    return m_scoring_details;
}
void OAIFantasyDefenseGame::setScoringDetails(const QList<OAIScoringDetail> &scoring_details) {
    m_scoring_details = scoring_details;
    m_scoring_details_isSet = true;
}

bool OAIFantasyDefenseGame::is_scoring_details_Set() const{
    return m_scoring_details_isSet;
}

bool OAIFantasyDefenseGame::is_scoring_details_Valid() const{
    return m_scoring_details_isValid;
}

qint32 OAIFantasyDefenseGame::getSeason() const {
    return m_season;
}
void OAIFantasyDefenseGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIFantasyDefenseGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAIFantasyDefenseGame::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIFantasyDefenseGame::getSeasonType() const {
    return m_season_type;
}
void OAIFantasyDefenseGame::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIFantasyDefenseGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIFantasyDefenseGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

double OAIFantasyDefenseGame::getSoloTackles() const {
    return m_solo_tackles;
}
void OAIFantasyDefenseGame::setSoloTackles(const double &solo_tackles) {
    m_solo_tackles = solo_tackles;
    m_solo_tackles_isSet = true;
}

bool OAIFantasyDefenseGame::is_solo_tackles_Set() const{
    return m_solo_tackles_isSet;
}

bool OAIFantasyDefenseGame::is_solo_tackles_Valid() const{
    return m_solo_tackles_isValid;
}

double OAIFantasyDefenseGame::getSpecialTeamsTouchdowns() const {
    return m_special_teams_touchdowns;
}
void OAIFantasyDefenseGame::setSpecialTeamsTouchdowns(const double &special_teams_touchdowns) {
    m_special_teams_touchdowns = special_teams_touchdowns;
    m_special_teams_touchdowns_isSet = true;
}

bool OAIFantasyDefenseGame::is_special_teams_touchdowns_Set() const{
    return m_special_teams_touchdowns_isSet;
}

bool OAIFantasyDefenseGame::is_special_teams_touchdowns_Valid() const{
    return m_special_teams_touchdowns_isValid;
}

QString OAIFantasyDefenseGame::getStadium() const {
    return m_stadium;
}
void OAIFantasyDefenseGame::setStadium(const QString &stadium) {
    m_stadium = stadium;
    m_stadium_isSet = true;
}

bool OAIFantasyDefenseGame::is_stadium_Set() const{
    return m_stadium_isSet;
}

bool OAIFantasyDefenseGame::is_stadium_Valid() const{
    return m_stadium_isValid;
}

double OAIFantasyDefenseGame::getTacklesForLoss() const {
    return m_tackles_for_loss;
}
void OAIFantasyDefenseGame::setTacklesForLoss(const double &tackles_for_loss) {
    m_tackles_for_loss = tackles_for_loss;
    m_tackles_for_loss_isSet = true;
}

bool OAIFantasyDefenseGame::is_tackles_for_loss_Set() const{
    return m_tackles_for_loss_isSet;
}

bool OAIFantasyDefenseGame::is_tackles_for_loss_Valid() const{
    return m_tackles_for_loss_isValid;
}

QString OAIFantasyDefenseGame::getTeam() const {
    return m_team;
}
void OAIFantasyDefenseGame::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIFantasyDefenseGame::is_team_Set() const{
    return m_team_isSet;
}

bool OAIFantasyDefenseGame::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIFantasyDefenseGame::getTeamId() const {
    return m_team_id;
}
void OAIFantasyDefenseGame::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIFantasyDefenseGame::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIFantasyDefenseGame::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIFantasyDefenseGame::getTemperature() const {
    return m_temperature;
}
void OAIFantasyDefenseGame::setTemperature(const qint32 &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIFantasyDefenseGame::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIFantasyDefenseGame::is_temperature_Valid() const{
    return m_temperature_isValid;
}

double OAIFantasyDefenseGame::getThirdDownAttempts() const {
    return m_third_down_attempts;
}
void OAIFantasyDefenseGame::setThirdDownAttempts(const double &third_down_attempts) {
    m_third_down_attempts = third_down_attempts;
    m_third_down_attempts_isSet = true;
}

bool OAIFantasyDefenseGame::is_third_down_attempts_Set() const{
    return m_third_down_attempts_isSet;
}

bool OAIFantasyDefenseGame::is_third_down_attempts_Valid() const{
    return m_third_down_attempts_isValid;
}

double OAIFantasyDefenseGame::getThirdDownConversions() const {
    return m_third_down_conversions;
}
void OAIFantasyDefenseGame::setThirdDownConversions(const double &third_down_conversions) {
    m_third_down_conversions = third_down_conversions;
    m_third_down_conversions_isSet = true;
}

bool OAIFantasyDefenseGame::is_third_down_conversions_Set() const{
    return m_third_down_conversions_isSet;
}

bool OAIFantasyDefenseGame::is_third_down_conversions_Valid() const{
    return m_third_down_conversions_isValid;
}

double OAIFantasyDefenseGame::getTightEndFantasyPointsAllowed() const {
    return m_tight_end_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setTightEndFantasyPointsAllowed(const double &tight_end_fantasy_points_allowed) {
    m_tight_end_fantasy_points_allowed = tight_end_fantasy_points_allowed;
    m_tight_end_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_tight_end_fantasy_points_allowed_Set() const{
    return m_tight_end_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_tight_end_fantasy_points_allowed_Valid() const{
    return m_tight_end_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getTouchdownsScored() const {
    return m_touchdowns_scored;
}
void OAIFantasyDefenseGame::setTouchdownsScored(const double &touchdowns_scored) {
    m_touchdowns_scored = touchdowns_scored;
    m_touchdowns_scored_isSet = true;
}

bool OAIFantasyDefenseGame::is_touchdowns_scored_Set() const{
    return m_touchdowns_scored_isSet;
}

bool OAIFantasyDefenseGame::is_touchdowns_scored_Valid() const{
    return m_touchdowns_scored_isValid;
}

double OAIFantasyDefenseGame::getTwoPointConversionReturns() const {
    return m_two_point_conversion_returns;
}
void OAIFantasyDefenseGame::setTwoPointConversionReturns(const double &two_point_conversion_returns) {
    m_two_point_conversion_returns = two_point_conversion_returns;
    m_two_point_conversion_returns_isSet = true;
}

bool OAIFantasyDefenseGame::is_two_point_conversion_returns_Set() const{
    return m_two_point_conversion_returns_isSet;
}

bool OAIFantasyDefenseGame::is_two_point_conversion_returns_Valid() const{
    return m_two_point_conversion_returns_isValid;
}

qint32 OAIFantasyDefenseGame::getVictivSalary() const {
    return m_victiv_salary;
}
void OAIFantasyDefenseGame::setVictivSalary(const qint32 &victiv_salary) {
    m_victiv_salary = victiv_salary;
    m_victiv_salary_isSet = true;
}

bool OAIFantasyDefenseGame::is_victiv_salary_Set() const{
    return m_victiv_salary_isSet;
}

bool OAIFantasyDefenseGame::is_victiv_salary_Valid() const{
    return m_victiv_salary_isValid;
}

qint32 OAIFantasyDefenseGame::getWeek() const {
    return m_week;
}
void OAIFantasyDefenseGame::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIFantasyDefenseGame::is_week_Set() const{
    return m_week_isSet;
}

bool OAIFantasyDefenseGame::is_week_Valid() const{
    return m_week_isValid;
}

double OAIFantasyDefenseGame::getWideReceiverFantasyPointsAllowed() const {
    return m_wide_receiver_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setWideReceiverFantasyPointsAllowed(const double &wide_receiver_fantasy_points_allowed) {
    m_wide_receiver_fantasy_points_allowed = wide_receiver_fantasy_points_allowed;
    m_wide_receiver_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_wide_receiver_fantasy_points_allowed_Set() const{
    return m_wide_receiver_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_wide_receiver_fantasy_points_allowed_Valid() const{
    return m_wide_receiver_fantasy_points_allowed_isValid;
}

qint32 OAIFantasyDefenseGame::getWindSpeed() const {
    return m_wind_speed;
}
void OAIFantasyDefenseGame::setWindSpeed(const qint32 &wind_speed) {
    m_wind_speed = wind_speed;
    m_wind_speed_isSet = true;
}

bool OAIFantasyDefenseGame::is_wind_speed_Set() const{
    return m_wind_speed_isSet;
}

bool OAIFantasyDefenseGame::is_wind_speed_Valid() const{
    return m_wind_speed_isValid;
}

double OAIFantasyDefenseGame::getYahooFantasyPointsAllowed() const {
    return m_yahoo_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setYahooFantasyPointsAllowed(const double &yahoo_fantasy_points_allowed) {
    m_yahoo_fantasy_points_allowed = yahoo_fantasy_points_allowed;
    m_yahoo_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_fantasy_points_allowed_Set() const{
    return m_yahoo_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_fantasy_points_allowed_Valid() const{
    return m_yahoo_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getYahooKickerFantasyPointsAllowed() const {
    return m_yahoo_kicker_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setYahooKickerFantasyPointsAllowed(const double &yahoo_kicker_fantasy_points_allowed) {
    m_yahoo_kicker_fantasy_points_allowed = yahoo_kicker_fantasy_points_allowed;
    m_yahoo_kicker_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_kicker_fantasy_points_allowed_Set() const{
    return m_yahoo_kicker_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_kicker_fantasy_points_allowed_Valid() const{
    return m_yahoo_kicker_fantasy_points_allowed_isValid;
}

QString OAIFantasyDefenseGame::getYahooPosition() const {
    return m_yahoo_position;
}
void OAIFantasyDefenseGame::setYahooPosition(const QString &yahoo_position) {
    m_yahoo_position = yahoo_position;
    m_yahoo_position_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_position_Set() const{
    return m_yahoo_position_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_position_Valid() const{
    return m_yahoo_position_isValid;
}

double OAIFantasyDefenseGame::getYahooQuarterbackFantasyPointsAllowed() const {
    return m_yahoo_quarterback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setYahooQuarterbackFantasyPointsAllowed(const double &yahoo_quarterback_fantasy_points_allowed) {
    m_yahoo_quarterback_fantasy_points_allowed = yahoo_quarterback_fantasy_points_allowed;
    m_yahoo_quarterback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_quarterback_fantasy_points_allowed_Set() const{
    return m_yahoo_quarterback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_quarterback_fantasy_points_allowed_Valid() const{
    return m_yahoo_quarterback_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getYahooRunningbackFantasyPointsAllowed() const {
    return m_yahoo_runningback_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setYahooRunningbackFantasyPointsAllowed(const double &yahoo_runningback_fantasy_points_allowed) {
    m_yahoo_runningback_fantasy_points_allowed = yahoo_runningback_fantasy_points_allowed;
    m_yahoo_runningback_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_runningback_fantasy_points_allowed_Set() const{
    return m_yahoo_runningback_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_runningback_fantasy_points_allowed_Valid() const{
    return m_yahoo_runningback_fantasy_points_allowed_isValid;
}

qint32 OAIFantasyDefenseGame::getYahooSalary() const {
    return m_yahoo_salary;
}
void OAIFantasyDefenseGame::setYahooSalary(const qint32 &yahoo_salary) {
    m_yahoo_salary = yahoo_salary;
    m_yahoo_salary_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_salary_Set() const{
    return m_yahoo_salary_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_salary_Valid() const{
    return m_yahoo_salary_isValid;
}

double OAIFantasyDefenseGame::getYahooTightEndFantasyPointsAllowed() const {
    return m_yahoo_tight_end_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setYahooTightEndFantasyPointsAllowed(const double &yahoo_tight_end_fantasy_points_allowed) {
    m_yahoo_tight_end_fantasy_points_allowed = yahoo_tight_end_fantasy_points_allowed;
    m_yahoo_tight_end_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_tight_end_fantasy_points_allowed_Set() const{
    return m_yahoo_tight_end_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_tight_end_fantasy_points_allowed_Valid() const{
    return m_yahoo_tight_end_fantasy_points_allowed_isValid;
}

double OAIFantasyDefenseGame::getYahooWideReceiverFantasyPointsAllowed() const {
    return m_yahoo_wide_receiver_fantasy_points_allowed;
}
void OAIFantasyDefenseGame::setYahooWideReceiverFantasyPointsAllowed(const double &yahoo_wide_receiver_fantasy_points_allowed) {
    m_yahoo_wide_receiver_fantasy_points_allowed = yahoo_wide_receiver_fantasy_points_allowed;
    m_yahoo_wide_receiver_fantasy_points_allowed_isSet = true;
}

bool OAIFantasyDefenseGame::is_yahoo_wide_receiver_fantasy_points_allowed_Set() const{
    return m_yahoo_wide_receiver_fantasy_points_allowed_isSet;
}

bool OAIFantasyDefenseGame::is_yahoo_wide_receiver_fantasy_points_allowed_Valid() const{
    return m_yahoo_wide_receiver_fantasy_points_allowed_isValid;
}

bool OAIFantasyDefenseGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_kicker_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_quarterback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_runningback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_tight_end_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_wide_receiver_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_kicker_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_quarterback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_runningback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_tight_end_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_wide_receiver_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_data_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_defense_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_kicker_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_quarterback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_runningback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_tight_end_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_wide_receiver_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fantasy_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_game_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kicker_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_yards_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_position_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_defended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_allowed_by_defense_special_teams_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runningback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tight_end_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touchdowns_scored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_victiv_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wide_receiver_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_kicker_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_quarterback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_runningback_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_tight_end_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_wide_receiver_fantasy_points_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFantasyDefenseGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
