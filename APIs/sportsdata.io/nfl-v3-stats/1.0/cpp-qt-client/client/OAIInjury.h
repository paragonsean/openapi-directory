/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInjury.h
 *
 * 
 */

#ifndef OAIInjury_H
#define OAIInjury_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInjury : public OAIObject {
public:
    OAIInjury();
    OAIInjury(QString json);
    ~OAIInjury() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBodyPart() const;
    void setBodyPart(const QString &body_part);
    bool is_body_part_Set() const;
    bool is_body_part_Valid() const;

    bool isDeclaredInactive() const;
    void setDeclaredInactive(const bool &declared_inactive);
    bool is_declared_inactive_Set() const;
    bool is_declared_inactive_Valid() const;

    qint32 getInjuryId() const;
    void setInjuryId(const qint32 &injury_id);
    bool is_injury_id_Set() const;
    bool is_injury_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getOpponent() const;
    void setOpponent(const QString &opponent);
    bool is_opponent_Set() const;
    bool is_opponent_Valid() const;

    qint32 getOpponentId() const;
    void setOpponentId(const qint32 &opponent_id);
    bool is_opponent_id_Set() const;
    bool is_opponent_id_Valid() const;

    qint32 getPlayerId() const;
    void setPlayerId(const qint32 &player_id);
    bool is_player_id_Set() const;
    bool is_player_id_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getPractice() const;
    void setPractice(const QString &practice);
    bool is_practice_Set() const;
    bool is_practice_Valid() const;

    QString getPracticeDescription() const;
    void setPracticeDescription(const QString &practice_description);
    bool is_practice_description_Set() const;
    bool is_practice_description_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    qint32 getSeasonType() const;
    void setSeasonType(const qint32 &season_type);
    bool is_season_type_Set() const;
    bool is_season_type_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    qint32 getWeek() const;
    void setWeek(const qint32 &week);
    bool is_week_Set() const;
    bool is_week_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_body_part;
    bool m_body_part_isSet;
    bool m_body_part_isValid;

    bool m_declared_inactive;
    bool m_declared_inactive_isSet;
    bool m_declared_inactive_isValid;

    qint32 m_injury_id;
    bool m_injury_id_isSet;
    bool m_injury_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_opponent;
    bool m_opponent_isSet;
    bool m_opponent_isValid;

    qint32 m_opponent_id;
    bool m_opponent_id_isSet;
    bool m_opponent_id_isValid;

    qint32 m_player_id;
    bool m_player_id_isSet;
    bool m_player_id_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_practice;
    bool m_practice_isSet;
    bool m_practice_isValid;

    QString m_practice_description;
    bool m_practice_description_isSet;
    bool m_practice_description_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    qint32 m_season_type;
    bool m_season_type_isSet;
    bool m_season_type_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    qint32 m_week;
    bool m_week_isSet;
    bool m_week_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInjury)

#endif // OAIInjury_H
