/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerKicking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerKicking::OAIPlayerKicking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerKicking::OAIPlayerKicking() {
    this->initializeModel();
}

OAIPlayerKicking::~OAIPlayerKicking() {}

void OAIPlayerKicking::initializeModel() {

    m_extra_points_attempted_isSet = false;
    m_extra_points_attempted_isValid = false;

    m_extra_points_made_isSet = false;
    m_extra_points_made_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_position_isSet = false;
    m_fantasy_position_isValid = false;

    m_field_goal_percentage_isSet = false;
    m_field_goal_percentage_isValid = false;

    m_field_goals_attempted_isSet = false;
    m_field_goals_attempted_isValid = false;

    m_field_goals_longest_made_isSet = false;
    m_field_goals_longest_made_isValid = false;

    m_field_goals_made_isSet = false;
    m_field_goals_made_isValid = false;

    m_field_goals_made0to19_isSet = false;
    m_field_goals_made0to19_isValid = false;

    m_field_goals_made20to29_isSet = false;
    m_field_goals_made20to29_isValid = false;

    m_field_goals_made30to39_isSet = false;
    m_field_goals_made30to39_isValid = false;

    m_field_goals_made40to49_isSet = false;
    m_field_goals_made40to49_isValid = false;

    m_field_goals_made50_plus_isSet = false;
    m_field_goals_made50_plus_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_player_game_id_isSet = false;
    m_player_game_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPlayerKicking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerKicking::fromJsonObject(QJsonObject json) {

    m_extra_points_attempted_isValid = ::OpenAPI::fromJsonValue(m_extra_points_attempted, json[QString("ExtraPointsAttempted")]);
    m_extra_points_attempted_isSet = !json[QString("ExtraPointsAttempted")].isNull() && m_extra_points_attempted_isValid;

    m_extra_points_made_isValid = ::OpenAPI::fromJsonValue(m_extra_points_made, json[QString("ExtraPointsMade")]);
    m_extra_points_made_isSet = !json[QString("ExtraPointsMade")].isNull() && m_extra_points_made_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position, json[QString("FantasyPosition")]);
    m_fantasy_position_isSet = !json[QString("FantasyPosition")].isNull() && m_fantasy_position_isValid;

    m_field_goal_percentage_isValid = ::OpenAPI::fromJsonValue(m_field_goal_percentage, json[QString("FieldGoalPercentage")]);
    m_field_goal_percentage_isSet = !json[QString("FieldGoalPercentage")].isNull() && m_field_goal_percentage_isValid;

    m_field_goals_attempted_isValid = ::OpenAPI::fromJsonValue(m_field_goals_attempted, json[QString("FieldGoalsAttempted")]);
    m_field_goals_attempted_isSet = !json[QString("FieldGoalsAttempted")].isNull() && m_field_goals_attempted_isValid;

    m_field_goals_longest_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_longest_made, json[QString("FieldGoalsLongestMade")]);
    m_field_goals_longest_made_isSet = !json[QString("FieldGoalsLongestMade")].isNull() && m_field_goals_longest_made_isValid;

    m_field_goals_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made, json[QString("FieldGoalsMade")]);
    m_field_goals_made_isSet = !json[QString("FieldGoalsMade")].isNull() && m_field_goals_made_isValid;

    m_field_goals_made0to19_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made0to19, json[QString("FieldGoalsMade0to19")]);
    m_field_goals_made0to19_isSet = !json[QString("FieldGoalsMade0to19")].isNull() && m_field_goals_made0to19_isValid;

    m_field_goals_made20to29_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made20to29, json[QString("FieldGoalsMade20to29")]);
    m_field_goals_made20to29_isSet = !json[QString("FieldGoalsMade20to29")].isNull() && m_field_goals_made20to29_isValid;

    m_field_goals_made30to39_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made30to39, json[QString("FieldGoalsMade30to39")]);
    m_field_goals_made30to39_isSet = !json[QString("FieldGoalsMade30to39")].isNull() && m_field_goals_made30to39_isValid;

    m_field_goals_made40to49_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made40to49, json[QString("FieldGoalsMade40to49")]);
    m_field_goals_made40to49_isSet = !json[QString("FieldGoalsMade40to49")].isNull() && m_field_goals_made40to49_isValid;

    m_field_goals_made50_plus_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made50_plus, json[QString("FieldGoalsMade50Plus")]);
    m_field_goals_made50_plus_isSet = !json[QString("FieldGoalsMade50Plus")].isNull() && m_field_goals_made50_plus_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_player_game_id_isValid = ::OpenAPI::fromJsonValue(m_player_game_id, json[QString("PlayerGameID")]);
    m_player_game_id_isSet = !json[QString("PlayerGameID")].isNull() && m_player_game_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIPlayerKicking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerKicking::asJsonObject() const {
    QJsonObject obj;
    if (m_extra_points_attempted_isSet) {
        obj.insert(QString("ExtraPointsAttempted"), ::OpenAPI::toJsonValue(m_extra_points_attempted));
    }
    if (m_extra_points_made_isSet) {
        obj.insert(QString("ExtraPointsMade"), ::OpenAPI::toJsonValue(m_extra_points_made));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_position_isSet) {
        obj.insert(QString("FantasyPosition"), ::OpenAPI::toJsonValue(m_fantasy_position));
    }
    if (m_field_goal_percentage_isSet) {
        obj.insert(QString("FieldGoalPercentage"), ::OpenAPI::toJsonValue(m_field_goal_percentage));
    }
    if (m_field_goals_attempted_isSet) {
        obj.insert(QString("FieldGoalsAttempted"), ::OpenAPI::toJsonValue(m_field_goals_attempted));
    }
    if (m_field_goals_longest_made_isSet) {
        obj.insert(QString("FieldGoalsLongestMade"), ::OpenAPI::toJsonValue(m_field_goals_longest_made));
    }
    if (m_field_goals_made_isSet) {
        obj.insert(QString("FieldGoalsMade"), ::OpenAPI::toJsonValue(m_field_goals_made));
    }
    if (m_field_goals_made0to19_isSet) {
        obj.insert(QString("FieldGoalsMade0to19"), ::OpenAPI::toJsonValue(m_field_goals_made0to19));
    }
    if (m_field_goals_made20to29_isSet) {
        obj.insert(QString("FieldGoalsMade20to29"), ::OpenAPI::toJsonValue(m_field_goals_made20to29));
    }
    if (m_field_goals_made30to39_isSet) {
        obj.insert(QString("FieldGoalsMade30to39"), ::OpenAPI::toJsonValue(m_field_goals_made30to39));
    }
    if (m_field_goals_made40to49_isSet) {
        obj.insert(QString("FieldGoalsMade40to49"), ::OpenAPI::toJsonValue(m_field_goals_made40to49));
    }
    if (m_field_goals_made50_plus_isSet) {
        obj.insert(QString("FieldGoalsMade50Plus"), ::OpenAPI::toJsonValue(m_field_goals_made50_plus));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_player_game_id_isSet) {
        obj.insert(QString("PlayerGameID"), ::OpenAPI::toJsonValue(m_player_game_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIPlayerKicking::getExtraPointsAttempted() const {
    return m_extra_points_attempted;
}
void OAIPlayerKicking::setExtraPointsAttempted(const qint32 &extra_points_attempted) {
    m_extra_points_attempted = extra_points_attempted;
    m_extra_points_attempted_isSet = true;
}

bool OAIPlayerKicking::is_extra_points_attempted_Set() const{
    return m_extra_points_attempted_isSet;
}

bool OAIPlayerKicking::is_extra_points_attempted_Valid() const{
    return m_extra_points_attempted_isValid;
}

qint32 OAIPlayerKicking::getExtraPointsMade() const {
    return m_extra_points_made;
}
void OAIPlayerKicking::setExtraPointsMade(const qint32 &extra_points_made) {
    m_extra_points_made = extra_points_made;
    m_extra_points_made_isSet = true;
}

bool OAIPlayerKicking::is_extra_points_made_Set() const{
    return m_extra_points_made_isSet;
}

bool OAIPlayerKicking::is_extra_points_made_Valid() const{
    return m_extra_points_made_isValid;
}

double OAIPlayerKicking::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerKicking::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerKicking::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerKicking::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

QString OAIPlayerKicking::getFantasyPosition() const {
    return m_fantasy_position;
}
void OAIPlayerKicking::setFantasyPosition(const QString &fantasy_position) {
    m_fantasy_position = fantasy_position;
    m_fantasy_position_isSet = true;
}

bool OAIPlayerKicking::is_fantasy_position_Set() const{
    return m_fantasy_position_isSet;
}

bool OAIPlayerKicking::is_fantasy_position_Valid() const{
    return m_fantasy_position_isValid;
}

double OAIPlayerKicking::getFieldGoalPercentage() const {
    return m_field_goal_percentage;
}
void OAIPlayerKicking::setFieldGoalPercentage(const double &field_goal_percentage) {
    m_field_goal_percentage = field_goal_percentage;
    m_field_goal_percentage_isSet = true;
}

bool OAIPlayerKicking::is_field_goal_percentage_Set() const{
    return m_field_goal_percentage_isSet;
}

bool OAIPlayerKicking::is_field_goal_percentage_Valid() const{
    return m_field_goal_percentage_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsAttempted() const {
    return m_field_goals_attempted;
}
void OAIPlayerKicking::setFieldGoalsAttempted(const qint32 &field_goals_attempted) {
    m_field_goals_attempted = field_goals_attempted;
    m_field_goals_attempted_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_attempted_Set() const{
    return m_field_goals_attempted_isSet;
}

bool OAIPlayerKicking::is_field_goals_attempted_Valid() const{
    return m_field_goals_attempted_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsLongestMade() const {
    return m_field_goals_longest_made;
}
void OAIPlayerKicking::setFieldGoalsLongestMade(const qint32 &field_goals_longest_made) {
    m_field_goals_longest_made = field_goals_longest_made;
    m_field_goals_longest_made_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_longest_made_Set() const{
    return m_field_goals_longest_made_isSet;
}

bool OAIPlayerKicking::is_field_goals_longest_made_Valid() const{
    return m_field_goals_longest_made_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsMade() const {
    return m_field_goals_made;
}
void OAIPlayerKicking::setFieldGoalsMade(const qint32 &field_goals_made) {
    m_field_goals_made = field_goals_made;
    m_field_goals_made_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_made_Set() const{
    return m_field_goals_made_isSet;
}

bool OAIPlayerKicking::is_field_goals_made_Valid() const{
    return m_field_goals_made_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsMade0to19() const {
    return m_field_goals_made0to19;
}
void OAIPlayerKicking::setFieldGoalsMade0to19(const qint32 &field_goals_made0to19) {
    m_field_goals_made0to19 = field_goals_made0to19;
    m_field_goals_made0to19_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_made0to19_Set() const{
    return m_field_goals_made0to19_isSet;
}

bool OAIPlayerKicking::is_field_goals_made0to19_Valid() const{
    return m_field_goals_made0to19_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsMade20to29() const {
    return m_field_goals_made20to29;
}
void OAIPlayerKicking::setFieldGoalsMade20to29(const qint32 &field_goals_made20to29) {
    m_field_goals_made20to29 = field_goals_made20to29;
    m_field_goals_made20to29_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_made20to29_Set() const{
    return m_field_goals_made20to29_isSet;
}

bool OAIPlayerKicking::is_field_goals_made20to29_Valid() const{
    return m_field_goals_made20to29_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsMade30to39() const {
    return m_field_goals_made30to39;
}
void OAIPlayerKicking::setFieldGoalsMade30to39(const qint32 &field_goals_made30to39) {
    m_field_goals_made30to39 = field_goals_made30to39;
    m_field_goals_made30to39_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_made30to39_Set() const{
    return m_field_goals_made30to39_isSet;
}

bool OAIPlayerKicking::is_field_goals_made30to39_Valid() const{
    return m_field_goals_made30to39_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsMade40to49() const {
    return m_field_goals_made40to49;
}
void OAIPlayerKicking::setFieldGoalsMade40to49(const qint32 &field_goals_made40to49) {
    m_field_goals_made40to49 = field_goals_made40to49;
    m_field_goals_made40to49_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_made40to49_Set() const{
    return m_field_goals_made40to49_isSet;
}

bool OAIPlayerKicking::is_field_goals_made40to49_Valid() const{
    return m_field_goals_made40to49_isValid;
}

qint32 OAIPlayerKicking::getFieldGoalsMade50Plus() const {
    return m_field_goals_made50_plus;
}
void OAIPlayerKicking::setFieldGoalsMade50Plus(const qint32 &field_goals_made50_plus) {
    m_field_goals_made50_plus = field_goals_made50_plus;
    m_field_goals_made50_plus_isSet = true;
}

bool OAIPlayerKicking::is_field_goals_made50_plus_Set() const{
    return m_field_goals_made50_plus_isSet;
}

bool OAIPlayerKicking::is_field_goals_made50_plus_Valid() const{
    return m_field_goals_made50_plus_isValid;
}

QString OAIPlayerKicking::getName() const {
    return m_name;
}
void OAIPlayerKicking::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerKicking::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerKicking::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerKicking::getNumber() const {
    return m_number;
}
void OAIPlayerKicking::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerKicking::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerKicking::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlayerKicking::getPlayerGameId() const {
    return m_player_game_id;
}
void OAIPlayerKicking::setPlayerGameId(const qint32 &player_game_id) {
    m_player_game_id = player_game_id;
    m_player_game_id_isSet = true;
}

bool OAIPlayerKicking::is_player_game_id_Set() const{
    return m_player_game_id_isSet;
}

bool OAIPlayerKicking::is_player_game_id_Valid() const{
    return m_player_game_id_isValid;
}

qint32 OAIPlayerKicking::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerKicking::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerKicking::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerKicking::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerKicking::getPosition() const {
    return m_position;
}
void OAIPlayerKicking::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerKicking::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerKicking::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerKicking::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerKicking::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerKicking::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerKicking::is_position_category_Valid() const{
    return m_position_category_isValid;
}

QString OAIPlayerKicking::getShortName() const {
    return m_short_name;
}
void OAIPlayerKicking::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayerKicking::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayerKicking::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIPlayerKicking::getTeam() const {
    return m_team;
}
void OAIPlayerKicking::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerKicking::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerKicking::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIPlayerKicking::getUpdated() const {
    return m_updated;
}
void OAIPlayerKicking::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayerKicking::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayerKicking::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPlayerKicking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extra_points_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_longest_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made0to19_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made20to29_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made30to39_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made40to49_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made50_plus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerKicking::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
