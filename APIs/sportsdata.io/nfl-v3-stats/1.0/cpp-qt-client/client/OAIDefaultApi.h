/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBoxScore.h"
#include "OAIBoxScoreV3.h"
#include "OAIBye.h"
#include "OAIDailyFantasyPlayer.h"
#include "OAIDailyFantasyScoring.h"
#include "OAIDfsSlate.h"
#include "OAIFantasyDefenseGame.h"
#include "OAIFantasyDefenseSeason.h"
#include "OAIFantasyPlayer.h"
#include "OAIGame.h"
#include "OAIInjury.h"
#include "OAINews.h"
#include "OAIPlayer.h"
#include "OAIPlayerDetail.h"
#include "OAIPlayerGame.h"
#include "OAIPlayerGameRedZone.h"
#include "OAIPlayerInfo.h"
#include "OAIPlayerOwnership.h"
#include "OAIPlayerSeason.h"
#include "OAIPlayerSeasonRedZone.h"
#include "OAIPlayerSeasonThirdDown.h"
#include "OAISchedule.h"
#include "OAIScore.h"
#include "OAIStadium.h"
#include "OAIStanding.h"
#include "OAITeam.h"
#include "OAITeamGame.h"
#include "OAITeamSeason.h"
#include "OAITimeframe.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    */
    virtual void areGamesInProgress(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  scoreid QString [required]
    */
    virtual void boxScoreByScoreidV(const QString &format, const QString &scoreid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  hometeam QString [required]
    */
    virtual void boxScoreV(const QString &format, const QString &season, const QString &week, const QString &hometeam);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  playerstoinclude QString [required]
    * @param[in]  minutes QString [required]
    */
    virtual void boxScoresDeltaV(const QString &format, const QString &season, const QString &week, const QString &playerstoinclude, const QString &minutes);

    /**
    * @param[in]  format QString [required]
    * @param[in]  numberofplays QString [required]
    */
    virtual void boxScoresVSimulation(const QString &format, const QString &numberofplays);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void byeWeeks(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void dailyFantasyPlayers(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void dailyFantasyScoring(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void dfsSlatesByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void dfsSlatesByWeek(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void fantasyDefenseGameStats(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  team QString [required]
    */
    virtual void fantasyDefenseGameStatsByTeam(const QString &format, const QString &season, const QString &week, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void fantasyDefenseSeasonStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  team QString [required]
    */
    virtual void fantasyDefenseSeasonStatsByTeam(const QString &format, const QString &season, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void fantasyPlayerOwnershipPercentagesSeasonLong(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    */
    virtual void fantasyPlayersWithAdp(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void gameStatsByWeekDeprecatedUseTeamGameStatsInstead(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    */
    virtual void idpFantasyPlayersWithAdp(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void injuries(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  team QString [required]
    */
    virtual void injuriesByTeam(const QString &format, const QString &season, const QString &week, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  position QString [required]
    * @param[in]  column QString [required]
    */
    virtual void leagueLeadersBySeason(const QString &format, const QString &season, const QString &position, const QString &column);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  position QString [required]
    * @param[in]  column QString [required]
    */
    virtual void leagueLeadersByWeek(const QString &format, const QString &season, const QString &week, const QString &position, const QString &column);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  hometeam QString [required]
    */
    virtual void legacyBoxScore(const QString &format, const QString &season, const QString &week, const QString &hometeam);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void legacyBoxScores(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    */
    virtual void legacyBoxScoresActive(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  minutes QString [required]
    */
    virtual void legacyBoxScoresDelta(const QString &format, const QString &season, const QString &week, const QString &minutes);

    /**
    * @param[in]  format QString [required]
    * @param[in]  minutes QString [required]
    */
    virtual void legacyBoxScoresDeltaCurrentWeek(const QString &format, const QString &minutes);

    /**
    * @param[in]  format QString [required]
    */
    virtual void legacyBoxScoresFinal(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void legacyBoxScoresLive(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void news(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void newsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void newsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void newsByTeam(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByAvailable(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByFreeAgents(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerDetailsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerDetailsByRookieDraftYear(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playerDetailsByTeam(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  playerid QString [required]
    * @param[in]  numberofgames QString [required]
    */
    virtual void playerGameLogsBySeason(const QString &format, const QString &season, const QString &playerid, const QString &numberofgames);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void playerGameRedZoneStats(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void playerGameRedZoneStatsInsideFive(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void playerGameRedZoneStatsInsideTen(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerGameStatsByPlayer(const QString &format, const QString &season, const QString &week, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playerGameStatsByTeam(const QString &format, const QString &season, const QString &week, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void playerGameStatsByWeek(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  minutes QString [required]
    */
    virtual void playerGameStatsByWeekDelta(const QString &format, const QString &season, const QString &week, const QString &minutes);

    /**
    * @param[in]  format QString [required]
    * @param[in]  minutes QString [required]
    */
    virtual void playerGameStatsDelta(const QString &format, const QString &minutes);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerSeasonRedZoneStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerSeasonRedZoneStatsInsideFive(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerSeasonRedZoneStatsInsideTen(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerSeasonStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerSeasonStatsByPlayer(const QString &format, const QString &season, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playerSeasonStatsByTeam(const QString &format, const QString &season, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerSeasonThirdDownStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void proBowlers(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void schedule(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void scoresByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void scoresBySeason(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void scoresByWeek(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  numberofplays QString [required]
    */
    virtual void scoresByWeekSimulation(const QString &format, const QString &numberofplays);

    /**
    * @param[in]  format QString [required]
    */
    virtual void seasonCurrent(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void seasonLastCompleted(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void seasonUpcoming(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void stadiums(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void standings(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  teamid QString [required]
    * @param[in]  numberofgames QString [required]
    */
    virtual void teamGameLogsBySeason(const QString &format, const QString &season, const QString &teamid, const QString &numberofgames);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void teamGameStats(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void teamSeasonStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsActive(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsAll(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void teamsBySeason(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  type QString [required]
    */
    virtual void timeframes(const QString &format, const QString &type);

    /**
    * @param[in]  format QString [required]
    */
    virtual void weekCurrent(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void weekLastCompleted(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void weekUpcoming(const QString &format);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void areGamesInProgressCallback(OAIHttpRequestWorker *worker);
    void boxScoreByScoreidVCallback(OAIHttpRequestWorker *worker);
    void boxScoreVCallback(OAIHttpRequestWorker *worker);
    void boxScoresDeltaVCallback(OAIHttpRequestWorker *worker);
    void boxScoresVSimulationCallback(OAIHttpRequestWorker *worker);
    void byeWeeksCallback(OAIHttpRequestWorker *worker);
    void dailyFantasyPlayersCallback(OAIHttpRequestWorker *worker);
    void dailyFantasyScoringCallback(OAIHttpRequestWorker *worker);
    void dfsSlatesByDateCallback(OAIHttpRequestWorker *worker);
    void dfsSlatesByWeekCallback(OAIHttpRequestWorker *worker);
    void fantasyDefenseGameStatsCallback(OAIHttpRequestWorker *worker);
    void fantasyDefenseGameStatsByTeamCallback(OAIHttpRequestWorker *worker);
    void fantasyDefenseSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void fantasyDefenseSeasonStatsByTeamCallback(OAIHttpRequestWorker *worker);
    void fantasyPlayerOwnershipPercentagesSeasonLongCallback(OAIHttpRequestWorker *worker);
    void fantasyPlayersWithAdpCallback(OAIHttpRequestWorker *worker);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback(OAIHttpRequestWorker *worker);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback(OAIHttpRequestWorker *worker);
    void idpFantasyPlayersWithAdpCallback(OAIHttpRequestWorker *worker);
    void injuriesCallback(OAIHttpRequestWorker *worker);
    void injuriesByTeamCallback(OAIHttpRequestWorker *worker);
    void leagueLeadersBySeasonCallback(OAIHttpRequestWorker *worker);
    void leagueLeadersByWeekCallback(OAIHttpRequestWorker *worker);
    void legacyBoxScoreCallback(OAIHttpRequestWorker *worker);
    void legacyBoxScoresCallback(OAIHttpRequestWorker *worker);
    void legacyBoxScoresActiveCallback(OAIHttpRequestWorker *worker);
    void legacyBoxScoresDeltaCallback(OAIHttpRequestWorker *worker);
    void legacyBoxScoresDeltaCurrentWeekCallback(OAIHttpRequestWorker *worker);
    void legacyBoxScoresFinalCallback(OAIHttpRequestWorker *worker);
    void legacyBoxScoresLiveCallback(OAIHttpRequestWorker *worker);
    void newsCallback(OAIHttpRequestWorker *worker);
    void newsByDateCallback(OAIHttpRequestWorker *worker);
    void newsByPlayerCallback(OAIHttpRequestWorker *worker);
    void newsByTeamCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByAvailableCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByFreeAgentsCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByRookieDraftYearCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByTeamCallback(OAIHttpRequestWorker *worker);
    void playerGameLogsBySeasonCallback(OAIHttpRequestWorker *worker);
    void playerGameRedZoneStatsCallback(OAIHttpRequestWorker *worker);
    void playerGameRedZoneStatsInsideFiveCallback(OAIHttpRequestWorker *worker);
    void playerGameRedZoneStatsInsideTenCallback(OAIHttpRequestWorker *worker);
    void playerGameStatsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerGameStatsByTeamCallback(OAIHttpRequestWorker *worker);
    void playerGameStatsByWeekCallback(OAIHttpRequestWorker *worker);
    void playerGameStatsByWeekDeltaCallback(OAIHttpRequestWorker *worker);
    void playerGameStatsDeltaCallback(OAIHttpRequestWorker *worker);
    void playerSeasonRedZoneStatsCallback(OAIHttpRequestWorker *worker);
    void playerSeasonRedZoneStatsInsideFiveCallback(OAIHttpRequestWorker *worker);
    void playerSeasonRedZoneStatsInsideTenCallback(OAIHttpRequestWorker *worker);
    void playerSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void playerSeasonStatsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerSeasonStatsByTeamCallback(OAIHttpRequestWorker *worker);
    void playerSeasonThirdDownStatsCallback(OAIHttpRequestWorker *worker);
    void proBowlersCallback(OAIHttpRequestWorker *worker);
    void scheduleCallback(OAIHttpRequestWorker *worker);
    void scoresByDateCallback(OAIHttpRequestWorker *worker);
    void scoresBySeasonCallback(OAIHttpRequestWorker *worker);
    void scoresByWeekCallback(OAIHttpRequestWorker *worker);
    void scoresByWeekSimulationCallback(OAIHttpRequestWorker *worker);
    void seasonCurrentCallback(OAIHttpRequestWorker *worker);
    void seasonLastCompletedCallback(OAIHttpRequestWorker *worker);
    void seasonUpcomingCallback(OAIHttpRequestWorker *worker);
    void stadiumsCallback(OAIHttpRequestWorker *worker);
    void standingsCallback(OAIHttpRequestWorker *worker);
    void teamGameLogsBySeasonCallback(OAIHttpRequestWorker *worker);
    void teamGameStatsCallback(OAIHttpRequestWorker *worker);
    void teamSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void teamsActiveCallback(OAIHttpRequestWorker *worker);
    void teamsAllCallback(OAIHttpRequestWorker *worker);
    void teamsBySeasonCallback(OAIHttpRequestWorker *worker);
    void timeframesCallback(OAIHttpRequestWorker *worker);
    void weekCurrentCallback(OAIHttpRequestWorker *worker);
    void weekLastCompletedCallback(OAIHttpRequestWorker *worker);
    void weekUpcomingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void areGamesInProgressSignal(bool summary);
    void boxScoreByScoreidVSignal(OAIBoxScoreV3 summary);
    void boxScoreVSignal(OAIBoxScoreV3 summary);
    void boxScoresDeltaVSignal(QList<OAIBoxScoreV3> summary);
    void boxScoresVSimulationSignal(QList<OAIBoxScoreV3> summary);
    void byeWeeksSignal(QList<OAIBye> summary);
    void dailyFantasyPlayersSignal(QList<OAIDailyFantasyPlayer> summary);
    void dailyFantasyScoringSignal(QList<OAIDailyFantasyScoring> summary);
    void dfsSlatesByDateSignal(QList<OAIDfsSlate> summary);
    void dfsSlatesByWeekSignal(QList<OAIDfsSlate> summary);
    void fantasyDefenseGameStatsSignal(QList<OAIFantasyDefenseGame> summary);
    void fantasyDefenseGameStatsByTeamSignal(OAIFantasyDefenseGame summary);
    void fantasyDefenseSeasonStatsSignal(QList<OAIFantasyDefenseSeason> summary);
    void fantasyDefenseSeasonStatsByTeamSignal(OAIFantasyDefenseSeason summary);
    void fantasyPlayerOwnershipPercentagesSeasonLongSignal(QList<OAIPlayerOwnership> summary);
    void fantasyPlayersWithAdpSignal(QList<OAIFantasyPlayer> summary);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignal(QList<OAIGame> summary);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignal(QList<OAIGame> summary);
    void idpFantasyPlayersWithAdpSignal(QList<OAIFantasyPlayer> summary);
    void injuriesSignal(QList<OAIInjury> summary);
    void injuriesByTeamSignal(QList<OAIInjury> summary);
    void leagueLeadersBySeasonSignal(QList<OAIPlayerSeason> summary);
    void leagueLeadersByWeekSignal(QList<OAIPlayerGame> summary);
    void legacyBoxScoreSignal(OAIBoxScore summary);
    void legacyBoxScoresSignal(QList<OAIBoxScore> summary);
    void legacyBoxScoresActiveSignal(QList<OAIBoxScore> summary);
    void legacyBoxScoresDeltaSignal(QList<OAIBoxScore> summary);
    void legacyBoxScoresDeltaCurrentWeekSignal(QList<OAIBoxScore> summary);
    void legacyBoxScoresFinalSignal(QList<OAIBoxScore> summary);
    void legacyBoxScoresLiveSignal(QList<OAIBoxScore> summary);
    void newsSignal(QList<OAINews> summary);
    void newsByDateSignal(QList<OAINews> summary);
    void newsByPlayerSignal(QList<OAINews> summary);
    void newsByTeamSignal(QList<OAINews> summary);
    void playerDetailsByAvailableSignal(QList<OAIPlayer> summary);
    void playerDetailsByFreeAgentsSignal(QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignal(OAIPlayerDetail summary);
    void playerDetailsByRookieDraftYearSignal(QList<OAIPlayer> summary);
    void playerDetailsByTeamSignal(QList<OAIPlayerDetail> summary);
    void playerGameLogsBySeasonSignal(QList<OAIPlayerGame> summary);
    void playerGameRedZoneStatsSignal(QList<OAIPlayerGameRedZone> summary);
    void playerGameRedZoneStatsInsideFiveSignal(QList<OAIPlayerGameRedZone> summary);
    void playerGameRedZoneStatsInsideTenSignal(QList<OAIPlayerGameRedZone> summary);
    void playerGameStatsByPlayerSignal(OAIPlayerGame summary);
    void playerGameStatsByTeamSignal(QList<OAIPlayerGame> summary);
    void playerGameStatsByWeekSignal(QList<OAIPlayerGame> summary);
    void playerGameStatsByWeekDeltaSignal(QList<OAIPlayerGame> summary);
    void playerGameStatsDeltaSignal(QList<OAIPlayerGame> summary);
    void playerSeasonRedZoneStatsSignal(QList<OAIPlayerSeasonRedZone> summary);
    void playerSeasonRedZoneStatsInsideFiveSignal(QList<OAIPlayerSeasonRedZone> summary);
    void playerSeasonRedZoneStatsInsideTenSignal(QList<OAIPlayerSeasonRedZone> summary);
    void playerSeasonStatsSignal(QList<OAIPlayerSeason> summary);
    void playerSeasonStatsByPlayerSignal(QList<OAIPlayerSeason> summary);
    void playerSeasonStatsByTeamSignal(QList<OAIPlayerSeason> summary);
    void playerSeasonThirdDownStatsSignal(QList<OAIPlayerSeasonThirdDown> summary);
    void proBowlersSignal(QList<OAIPlayerInfo> summary);
    void scheduleSignal(QList<OAISchedule> summary);
    void scoresByDateSignal(QList<OAIScore> summary);
    void scoresBySeasonSignal(QList<OAIScore> summary);
    void scoresByWeekSignal(QList<OAIScore> summary);
    void scoresByWeekSimulationSignal(QList<OAIScore> summary);
    void seasonCurrentSignal(qint32 summary);
    void seasonLastCompletedSignal(qint32 summary);
    void seasonUpcomingSignal(qint32 summary);
    void stadiumsSignal(QList<OAIStadium> summary);
    void standingsSignal(QList<OAIStanding> summary);
    void teamGameLogsBySeasonSignal(QList<OAITeamGame> summary);
    void teamGameStatsSignal(QList<OAITeamGame> summary);
    void teamSeasonStatsSignal(QList<OAITeamSeason> summary);
    void teamsActiveSignal(QList<OAITeam> summary);
    void teamsAllSignal(QList<OAITeam> summary);
    void teamsBySeasonSignal(QList<OAITeam> summary);
    void timeframesSignal(QList<OAITimeframe> summary);
    void weekCurrentSignal(qint32 summary);
    void weekLastCompletedSignal(qint32 summary);
    void weekUpcomingSignal(qint32 summary);


    void areGamesInProgressSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void boxScoreByScoreidVSignalFull(OAIHttpRequestWorker *worker, OAIBoxScoreV3 summary);
    void boxScoreVSignalFull(OAIHttpRequestWorker *worker, OAIBoxScoreV3 summary);
    void boxScoresDeltaVSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScoreV3> summary);
    void boxScoresVSimulationSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScoreV3> summary);
    void byeWeeksSignalFull(OAIHttpRequestWorker *worker, QList<OAIBye> summary);
    void dailyFantasyPlayersSignalFull(OAIHttpRequestWorker *worker, QList<OAIDailyFantasyPlayer> summary);
    void dailyFantasyScoringSignalFull(OAIHttpRequestWorker *worker, QList<OAIDailyFantasyScoring> summary);
    void dfsSlatesByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIDfsSlate> summary);
    void dfsSlatesByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIDfsSlate> summary);
    void fantasyDefenseGameStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFantasyDefenseGame> summary);
    void fantasyDefenseGameStatsByTeamSignalFull(OAIHttpRequestWorker *worker, OAIFantasyDefenseGame summary);
    void fantasyDefenseSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFantasyDefenseSeason> summary);
    void fantasyDefenseSeasonStatsByTeamSignalFull(OAIHttpRequestWorker *worker, OAIFantasyDefenseSeason summary);
    void fantasyPlayerOwnershipPercentagesSeasonLongSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerOwnership> summary);
    void fantasyPlayersWithAdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIFantasyPlayer> summary);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void idpFantasyPlayersWithAdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIFantasyPlayer> summary);
    void injuriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInjury> summary);
    void injuriesByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIInjury> summary);
    void leagueLeadersBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeason> summary);
    void leagueLeadersByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void legacyBoxScoreSignalFull(OAIHttpRequestWorker *worker, OAIBoxScore summary);
    void legacyBoxScoresSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void legacyBoxScoresActiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void legacyBoxScoresDeltaSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void legacyBoxScoresDeltaCurrentWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void legacyBoxScoresFinalSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void legacyBoxScoresLiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void newsSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByPlayerSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void playerDetailsByAvailableSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByFreeAgentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayerDetail summary);
    void playerDetailsByRookieDraftYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerDetail> summary);
    void playerGameLogsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void playerGameRedZoneStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameRedZone> summary);
    void playerGameRedZoneStatsInsideFiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameRedZone> summary);
    void playerGameRedZoneStatsInsideTenSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameRedZone> summary);
    void playerGameStatsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayerGame summary);
    void playerGameStatsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void playerGameStatsByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void playerGameStatsByWeekDeltaSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void playerGameStatsDeltaSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void playerSeasonRedZoneStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeasonRedZone> summary);
    void playerSeasonRedZoneStatsInsideFiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeasonRedZone> summary);
    void playerSeasonRedZoneStatsInsideTenSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeasonRedZone> summary);
    void playerSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeason> summary);
    void playerSeasonStatsByPlayerSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeason> summary);
    void playerSeasonStatsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeason> summary);
    void playerSeasonThirdDownStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeasonThirdDown> summary);
    void proBowlersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerInfo> summary);
    void scheduleSignalFull(OAIHttpRequestWorker *worker, QList<OAISchedule> summary);
    void scoresByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void scoresBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void scoresByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void scoresByWeekSimulationSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void seasonCurrentSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void seasonLastCompletedSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void seasonUpcomingSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void stadiumsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStadium> summary);
    void standingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStanding> summary);
    void teamGameLogsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamGameStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamSeason> summary);
    void teamsActiveSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teamsAllSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teamsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void timeframesSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeframe> summary);
    void weekCurrentSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void weekLastCompletedSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void weekUpcomingSignalFull(OAIHttpRequestWorker *worker, qint32 summary);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalError() instead")
    void areGamesInProgressSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoreByScoreidVSignalError() instead")
    void boxScoreByScoreidVSignalE(OAIBoxScoreV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoreByScoreidVSignalError(OAIBoxScoreV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoreVSignalError() instead")
    void boxScoreVSignalE(OAIBoxScoreV3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoreVSignalError(OAIBoxScoreV3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresDeltaVSignalError() instead")
    void boxScoresDeltaVSignalE(QList<OAIBoxScoreV3> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresDeltaVSignalError(QList<OAIBoxScoreV3> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresVSimulationSignalError() instead")
    void boxScoresVSimulationSignalE(QList<OAIBoxScoreV3> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresVSimulationSignalError(QList<OAIBoxScoreV3> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use byeWeeksSignalError() instead")
    void byeWeeksSignalE(QList<OAIBye> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void byeWeeksSignalError(QList<OAIBye> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dailyFantasyPlayersSignalError() instead")
    void dailyFantasyPlayersSignalE(QList<OAIDailyFantasyPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dailyFantasyPlayersSignalError(QList<OAIDailyFantasyPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dailyFantasyScoringSignalError() instead")
    void dailyFantasyScoringSignalE(QList<OAIDailyFantasyScoring> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dailyFantasyScoringSignalError(QList<OAIDailyFantasyScoring> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByDateSignalError() instead")
    void dfsSlatesByDateSignalE(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByDateSignalError(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByWeekSignalError() instead")
    void dfsSlatesByWeekSignalE(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByWeekSignalError(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseGameStatsSignalError() instead")
    void fantasyDefenseGameStatsSignalE(QList<OAIFantasyDefenseGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseGameStatsSignalError(QList<OAIFantasyDefenseGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseGameStatsByTeamSignalError() instead")
    void fantasyDefenseGameStatsByTeamSignalE(OAIFantasyDefenseGame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseGameStatsByTeamSignalError(OAIFantasyDefenseGame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseSeasonStatsSignalError() instead")
    void fantasyDefenseSeasonStatsSignalE(QList<OAIFantasyDefenseSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseSeasonStatsSignalError(QList<OAIFantasyDefenseSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseSeasonStatsByTeamSignalError() instead")
    void fantasyDefenseSeasonStatsByTeamSignalE(OAIFantasyDefenseSeason summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseSeasonStatsByTeamSignalError(OAIFantasyDefenseSeason summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyPlayerOwnershipPercentagesSeasonLongSignalError() instead")
    void fantasyPlayerOwnershipPercentagesSeasonLongSignalE(QList<OAIPlayerOwnership> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyPlayerOwnershipPercentagesSeasonLongSignalError(QList<OAIPlayerOwnership> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyPlayersWithAdpSignalError() instead")
    void fantasyPlayersWithAdpSignalE(QList<OAIFantasyPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyPlayersWithAdpSignalError(QList<OAIFantasyPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalError() instead")
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalError() instead")
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpFantasyPlayersWithAdpSignalError() instead")
    void idpFantasyPlayersWithAdpSignalE(QList<OAIFantasyPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idpFantasyPlayersWithAdpSignalError(QList<OAIFantasyPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesSignalError() instead")
    void injuriesSignalE(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesSignalError(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesByTeamSignalError() instead")
    void injuriesByTeamSignalE(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesByTeamSignalError(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueLeadersBySeasonSignalError() instead")
    void leagueLeadersBySeasonSignalE(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leagueLeadersBySeasonSignalError(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueLeadersByWeekSignalError() instead")
    void leagueLeadersByWeekSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leagueLeadersByWeekSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoreSignalError() instead")
    void legacyBoxScoreSignalE(OAIBoxScore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoreSignalError(OAIBoxScore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresSignalError() instead")
    void legacyBoxScoresSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresActiveSignalError() instead")
    void legacyBoxScoresActiveSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresActiveSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresDeltaSignalError() instead")
    void legacyBoxScoresDeltaSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresDeltaSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresDeltaCurrentWeekSignalError() instead")
    void legacyBoxScoresDeltaCurrentWeekSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresDeltaCurrentWeekSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresFinalSignalError() instead")
    void legacyBoxScoresFinalSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresFinalSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresLiveSignalError() instead")
    void legacyBoxScoresLiveSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresLiveSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalError() instead")
    void newsSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalError() instead")
    void newsByDateSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalError() instead")
    void newsByPlayerSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByTeamSignalError() instead")
    void newsByTeamSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByTeamSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByAvailableSignalError() instead")
    void playerDetailsByAvailableSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByAvailableSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByFreeAgentsSignalError() instead")
    void playerDetailsByFreeAgentsSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByFreeAgentsSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalError() instead")
    void playerDetailsByPlayerSignalE(OAIPlayerDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalError(OAIPlayerDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByRookieDraftYearSignalError() instead")
    void playerDetailsByRookieDraftYearSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByRookieDraftYearSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalError() instead")
    void playerDetailsByTeamSignalE(QList<OAIPlayerDetail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalError(QList<OAIPlayerDetail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameLogsBySeasonSignalError() instead")
    void playerGameLogsBySeasonSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameLogsBySeasonSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameRedZoneStatsSignalError() instead")
    void playerGameRedZoneStatsSignalE(QList<OAIPlayerGameRedZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameRedZoneStatsSignalError(QList<OAIPlayerGameRedZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameRedZoneStatsInsideFiveSignalError() instead")
    void playerGameRedZoneStatsInsideFiveSignalE(QList<OAIPlayerGameRedZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameRedZoneStatsInsideFiveSignalError(QList<OAIPlayerGameRedZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameRedZoneStatsInsideTenSignalError() instead")
    void playerGameRedZoneStatsInsideTenSignalE(QList<OAIPlayerGameRedZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameRedZoneStatsInsideTenSignalError(QList<OAIPlayerGameRedZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByPlayerSignalError() instead")
    void playerGameStatsByPlayerSignalE(OAIPlayerGame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByPlayerSignalError(OAIPlayerGame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByTeamSignalError() instead")
    void playerGameStatsByTeamSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByTeamSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByWeekSignalError() instead")
    void playerGameStatsByWeekSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByWeekSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByWeekDeltaSignalError() instead")
    void playerGameStatsByWeekDeltaSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByWeekDeltaSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsDeltaSignalError() instead")
    void playerGameStatsDeltaSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsDeltaSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonRedZoneStatsSignalError() instead")
    void playerSeasonRedZoneStatsSignalE(QList<OAIPlayerSeasonRedZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonRedZoneStatsSignalError(QList<OAIPlayerSeasonRedZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonRedZoneStatsInsideFiveSignalError() instead")
    void playerSeasonRedZoneStatsInsideFiveSignalE(QList<OAIPlayerSeasonRedZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonRedZoneStatsInsideFiveSignalError(QList<OAIPlayerSeasonRedZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonRedZoneStatsInsideTenSignalError() instead")
    void playerSeasonRedZoneStatsInsideTenSignalE(QList<OAIPlayerSeasonRedZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonRedZoneStatsInsideTenSignalError(QList<OAIPlayerSeasonRedZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsSignalError() instead")
    void playerSeasonStatsSignalE(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsSignalError(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByPlayerSignalError() instead")
    void playerSeasonStatsByPlayerSignalE(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByPlayerSignalError(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByTeamSignalError() instead")
    void playerSeasonStatsByTeamSignalE(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByTeamSignalError(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonThirdDownStatsSignalError() instead")
    void playerSeasonThirdDownStatsSignalE(QList<OAIPlayerSeasonThirdDown> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonThirdDownStatsSignalError(QList<OAIPlayerSeasonThirdDown> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proBowlersSignalError() instead")
    void proBowlersSignalE(QList<OAIPlayerInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void proBowlersSignalError(QList<OAIPlayerInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleSignalError() instead")
    void scheduleSignalE(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleSignalError(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByDateSignalError() instead")
    void scoresByDateSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByDateSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresBySeasonSignalError() instead")
    void scoresBySeasonSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresBySeasonSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSignalError() instead")
    void scoresByWeekSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSimulationSignalError() instead")
    void scoresByWeekSimulationSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSimulationSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonCurrentSignalError() instead")
    void seasonCurrentSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonCurrentSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonLastCompletedSignalError() instead")
    void seasonLastCompletedSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonLastCompletedSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonUpcomingSignalError() instead")
    void seasonUpcomingSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonUpcomingSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalError() instead")
    void stadiumsSignalE(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalError(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use standingsSignalError() instead")
    void standingsSignalE(QList<OAIStanding> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void standingsSignalError(QList<OAIStanding> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalError() instead")
    void teamGameLogsBySeasonSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsSignalError() instead")
    void teamGameStatsSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalError() instead")
    void teamSeasonStatsSignalE(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalError(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsActiveSignalError() instead")
    void teamsActiveSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsActiveSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAllSignalError() instead")
    void teamsAllSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAllSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBySeasonSignalError() instead")
    void teamsBySeasonSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBySeasonSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeframesSignalError() instead")
    void timeframesSignalE(QList<OAITimeframe> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeframesSignalError(QList<OAITimeframe> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekCurrentSignalError() instead")
    void weekCurrentSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weekCurrentSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekLastCompletedSignalError() instead")
    void weekLastCompletedSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weekLastCompletedSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekUpcomingSignalError() instead")
    void weekUpcomingSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weekUpcomingSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalErrorFull() instead")
    void areGamesInProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoreByScoreidVSignalErrorFull() instead")
    void boxScoreByScoreidVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoreByScoreidVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoreVSignalErrorFull() instead")
    void boxScoreVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoreVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresDeltaVSignalErrorFull() instead")
    void boxScoresDeltaVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresDeltaVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresVSimulationSignalErrorFull() instead")
    void boxScoresVSimulationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresVSimulationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use byeWeeksSignalErrorFull() instead")
    void byeWeeksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void byeWeeksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dailyFantasyPlayersSignalErrorFull() instead")
    void dailyFantasyPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dailyFantasyPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dailyFantasyScoringSignalErrorFull() instead")
    void dailyFantasyScoringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dailyFantasyScoringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByDateSignalErrorFull() instead")
    void dfsSlatesByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByWeekSignalErrorFull() instead")
    void dfsSlatesByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseGameStatsSignalErrorFull() instead")
    void fantasyDefenseGameStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseGameStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseGameStatsByTeamSignalErrorFull() instead")
    void fantasyDefenseGameStatsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseGameStatsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseSeasonStatsSignalErrorFull() instead")
    void fantasyDefenseSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyDefenseSeasonStatsByTeamSignalErrorFull() instead")
    void fantasyDefenseSeasonStatsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyDefenseSeasonStatsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyPlayerOwnershipPercentagesSeasonLongSignalErrorFull() instead")
    void fantasyPlayerOwnershipPercentagesSeasonLongSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyPlayerOwnershipPercentagesSeasonLongSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fantasyPlayersWithAdpSignalErrorFull() instead")
    void fantasyPlayersWithAdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fantasyPlayersWithAdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalErrorFull() instead")
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalErrorFull() instead")
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpFantasyPlayersWithAdpSignalErrorFull() instead")
    void idpFantasyPlayersWithAdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idpFantasyPlayersWithAdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesSignalErrorFull() instead")
    void injuriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesByTeamSignalErrorFull() instead")
    void injuriesByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueLeadersBySeasonSignalErrorFull() instead")
    void leagueLeadersBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leagueLeadersBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueLeadersByWeekSignalErrorFull() instead")
    void leagueLeadersByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leagueLeadersByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoreSignalErrorFull() instead")
    void legacyBoxScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresSignalErrorFull() instead")
    void legacyBoxScoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresActiveSignalErrorFull() instead")
    void legacyBoxScoresActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresDeltaSignalErrorFull() instead")
    void legacyBoxScoresDeltaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresDeltaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresDeltaCurrentWeekSignalErrorFull() instead")
    void legacyBoxScoresDeltaCurrentWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresDeltaCurrentWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresFinalSignalErrorFull() instead")
    void legacyBoxScoresFinalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresFinalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyBoxScoresLiveSignalErrorFull() instead")
    void legacyBoxScoresLiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyBoxScoresLiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalErrorFull() instead")
    void newsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalErrorFull() instead")
    void newsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalErrorFull() instead")
    void newsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByTeamSignalErrorFull() instead")
    void newsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByAvailableSignalErrorFull() instead")
    void playerDetailsByAvailableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByAvailableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByFreeAgentsSignalErrorFull() instead")
    void playerDetailsByFreeAgentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByFreeAgentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalErrorFull() instead")
    void playerDetailsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByRookieDraftYearSignalErrorFull() instead")
    void playerDetailsByRookieDraftYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByRookieDraftYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalErrorFull() instead")
    void playerDetailsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameLogsBySeasonSignalErrorFull() instead")
    void playerGameLogsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameLogsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameRedZoneStatsSignalErrorFull() instead")
    void playerGameRedZoneStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameRedZoneStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameRedZoneStatsInsideFiveSignalErrorFull() instead")
    void playerGameRedZoneStatsInsideFiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameRedZoneStatsInsideFiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameRedZoneStatsInsideTenSignalErrorFull() instead")
    void playerGameRedZoneStatsInsideTenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameRedZoneStatsInsideTenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByPlayerSignalErrorFull() instead")
    void playerGameStatsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByTeamSignalErrorFull() instead")
    void playerGameStatsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByWeekSignalErrorFull() instead")
    void playerGameStatsByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByWeekDeltaSignalErrorFull() instead")
    void playerGameStatsByWeekDeltaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByWeekDeltaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsDeltaSignalErrorFull() instead")
    void playerGameStatsDeltaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsDeltaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonRedZoneStatsSignalErrorFull() instead")
    void playerSeasonRedZoneStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonRedZoneStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonRedZoneStatsInsideFiveSignalErrorFull() instead")
    void playerSeasonRedZoneStatsInsideFiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonRedZoneStatsInsideFiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonRedZoneStatsInsideTenSignalErrorFull() instead")
    void playerSeasonRedZoneStatsInsideTenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonRedZoneStatsInsideTenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsSignalErrorFull() instead")
    void playerSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByPlayerSignalErrorFull() instead")
    void playerSeasonStatsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByTeamSignalErrorFull() instead")
    void playerSeasonStatsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonThirdDownStatsSignalErrorFull() instead")
    void playerSeasonThirdDownStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonThirdDownStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use proBowlersSignalErrorFull() instead")
    void proBowlersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void proBowlersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleSignalErrorFull() instead")
    void scheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByDateSignalErrorFull() instead")
    void scoresByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresBySeasonSignalErrorFull() instead")
    void scoresBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSignalErrorFull() instead")
    void scoresByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSimulationSignalErrorFull() instead")
    void scoresByWeekSimulationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSimulationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonCurrentSignalErrorFull() instead")
    void seasonCurrentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonCurrentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonLastCompletedSignalErrorFull() instead")
    void seasonLastCompletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonLastCompletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonUpcomingSignalErrorFull() instead")
    void seasonUpcomingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonUpcomingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalErrorFull() instead")
    void stadiumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use standingsSignalErrorFull() instead")
    void standingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void standingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalErrorFull() instead")
    void teamGameLogsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsSignalErrorFull() instead")
    void teamGameStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalErrorFull() instead")
    void teamSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsActiveSignalErrorFull() instead")
    void teamsActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAllSignalErrorFull() instead")
    void teamsAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBySeasonSignalErrorFull() instead")
    void teamsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeframesSignalErrorFull() instead")
    void timeframesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeframesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekCurrentSignalErrorFull() instead")
    void weekCurrentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weekCurrentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekLastCompletedSignalErrorFull() instead")
    void weekLastCompletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weekLastCompletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekUpcomingSignalErrorFull() instead")
    void weekUpcomingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weekUpcomingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
