/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlayerDefense.h
 *
 * 
 */

#ifndef OAIPlayerDefense_H
#define OAIPlayerDefense_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlayerDefense : public OAIObject {
public:
    OAIPlayerDefense();
    OAIPlayerDefense(QString json);
    ~OAIPlayerDefense() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAssistedTackles() const;
    void setAssistedTackles(const qint32 &assisted_tackles);
    bool is_assisted_tackles_Set() const;
    bool is_assisted_tackles_Valid() const;

    double getFantasyPoints() const;
    void setFantasyPoints(const double &fantasy_points);
    bool is_fantasy_points_Set() const;
    bool is_fantasy_points_Valid() const;

    QString getFantasyPosition() const;
    void setFantasyPosition(const QString &fantasy_position);
    bool is_fantasy_position_Set() const;
    bool is_fantasy_position_Valid() const;

    qint32 getFumbleReturnTouchdowns() const;
    void setFumbleReturnTouchdowns(const qint32 &fumble_return_touchdowns);
    bool is_fumble_return_touchdowns_Set() const;
    bool is_fumble_return_touchdowns_Valid() const;

    qint32 getFumblesForced() const;
    void setFumblesForced(const qint32 &fumbles_forced);
    bool is_fumbles_forced_Set() const;
    bool is_fumbles_forced_Valid() const;

    qint32 getFumblesRecovered() const;
    void setFumblesRecovered(const qint32 &fumbles_recovered);
    bool is_fumbles_recovered_Set() const;
    bool is_fumbles_recovered_Valid() const;

    qint32 getInterceptionReturnTouchdowns() const;
    void setInterceptionReturnTouchdowns(const qint32 &interception_return_touchdowns);
    bool is_interception_return_touchdowns_Set() const;
    bool is_interception_return_touchdowns_Valid() const;

    qint32 getInterceptionReturnYards() const;
    void setInterceptionReturnYards(const qint32 &interception_return_yards);
    bool is_interception_return_yards_Set() const;
    bool is_interception_return_yards_Valid() const;

    qint32 getInterceptions() const;
    void setInterceptions(const qint32 &interceptions);
    bool is_interceptions_Set() const;
    bool is_interceptions_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    qint32 getPassesDefended() const;
    void setPassesDefended(const qint32 &passes_defended);
    bool is_passes_defended_Set() const;
    bool is_passes_defended_Valid() const;

    qint32 getPlayerGameId() const;
    void setPlayerGameId(const qint32 &player_game_id);
    bool is_player_game_id_Set() const;
    bool is_player_game_id_Valid() const;

    qint32 getPlayerId() const;
    void setPlayerId(const qint32 &player_id);
    bool is_player_id_Set() const;
    bool is_player_id_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getPositionCategory() const;
    void setPositionCategory(const QString &position_category);
    bool is_position_category_Set() const;
    bool is_position_category_Valid() const;

    qint32 getQuarterbackHits() const;
    void setQuarterbackHits(const qint32 &quarterback_hits);
    bool is_quarterback_hits_Set() const;
    bool is_quarterback_hits_Valid() const;

    qint32 getSackYards() const;
    void setSackYards(const qint32 &sack_yards);
    bool is_sack_yards_Set() const;
    bool is_sack_yards_Valid() const;

    double getSacks() const;
    void setSacks(const double &sacks);
    bool is_sacks_Set() const;
    bool is_sacks_Valid() const;

    qint32 getSafeties() const;
    void setSafeties(const qint32 &safeties);
    bool is_safeties_Set() const;
    bool is_safeties_Valid() const;

    QString getShortName() const;
    void setShortName(const QString &short_name);
    bool is_short_name_Set() const;
    bool is_short_name_Valid() const;

    qint32 getSoloTackles() const;
    void setSoloTackles(const qint32 &solo_tackles);
    bool is_solo_tackles_Set() const;
    bool is_solo_tackles_Valid() const;

    qint32 getTackles() const;
    void setTackles(const qint32 &tackles);
    bool is_tackles_Set() const;
    bool is_tackles_Valid() const;

    qint32 getTacklesForLoss() const;
    void setTacklesForLoss(const qint32 &tackles_for_loss);
    bool is_tackles_for_loss_Set() const;
    bool is_tackles_for_loss_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_assisted_tackles;
    bool m_assisted_tackles_isSet;
    bool m_assisted_tackles_isValid;

    double m_fantasy_points;
    bool m_fantasy_points_isSet;
    bool m_fantasy_points_isValid;

    QString m_fantasy_position;
    bool m_fantasy_position_isSet;
    bool m_fantasy_position_isValid;

    qint32 m_fumble_return_touchdowns;
    bool m_fumble_return_touchdowns_isSet;
    bool m_fumble_return_touchdowns_isValid;

    qint32 m_fumbles_forced;
    bool m_fumbles_forced_isSet;
    bool m_fumbles_forced_isValid;

    qint32 m_fumbles_recovered;
    bool m_fumbles_recovered_isSet;
    bool m_fumbles_recovered_isValid;

    qint32 m_interception_return_touchdowns;
    bool m_interception_return_touchdowns_isSet;
    bool m_interception_return_touchdowns_isValid;

    qint32 m_interception_return_yards;
    bool m_interception_return_yards_isSet;
    bool m_interception_return_yards_isValid;

    qint32 m_interceptions;
    bool m_interceptions_isSet;
    bool m_interceptions_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    qint32 m_passes_defended;
    bool m_passes_defended_isSet;
    bool m_passes_defended_isValid;

    qint32 m_player_game_id;
    bool m_player_game_id_isSet;
    bool m_player_game_id_isValid;

    qint32 m_player_id;
    bool m_player_id_isSet;
    bool m_player_id_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_position_category;
    bool m_position_category_isSet;
    bool m_position_category_isValid;

    qint32 m_quarterback_hits;
    bool m_quarterback_hits_isSet;
    bool m_quarterback_hits_isValid;

    qint32 m_sack_yards;
    bool m_sack_yards_isSet;
    bool m_sack_yards_isValid;

    double m_sacks;
    bool m_sacks_isSet;
    bool m_sacks_isValid;

    qint32 m_safeties;
    bool m_safeties_isSet;
    bool m_safeties_isValid;

    QString m_short_name;
    bool m_short_name_isSet;
    bool m_short_name_isValid;

    qint32 m_solo_tackles;
    bool m_solo_tackles_isSet;
    bool m_solo_tackles_isValid;

    qint32 m_tackles;
    bool m_tackles_isSet;
    bool m_tackles_isValid;

    qint32 m_tackles_for_loss;
    bool m_tackles_for_loss_isSet;
    bool m_tackles_for_loss_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlayerDefense)

#endif // OAIPlayerDefense_H
