/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerOwnership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerOwnership::OAIPlayerOwnership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerOwnership::OAIPlayerOwnership() {
    this->initializeModel();
}

OAIPlayerOwnership::~OAIPlayerOwnership() {}

void OAIPlayerOwnership::initializeModel() {

    m_delta_ownership_percentage_isSet = false;
    m_delta_ownership_percentage_isValid = false;

    m_delta_start_percentage_isSet = false;
    m_delta_start_percentage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ownership_percentage_isSet = false;
    m_ownership_percentage_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_start_percentage_isSet = false;
    m_start_percentage_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIPlayerOwnership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerOwnership::fromJsonObject(QJsonObject json) {

    m_delta_ownership_percentage_isValid = ::OpenAPI::fromJsonValue(m_delta_ownership_percentage, json[QString("DeltaOwnershipPercentage")]);
    m_delta_ownership_percentage_isSet = !json[QString("DeltaOwnershipPercentage")].isNull() && m_delta_ownership_percentage_isValid;

    m_delta_start_percentage_isValid = ::OpenAPI::fromJsonValue(m_delta_start_percentage, json[QString("DeltaStartPercentage")]);
    m_delta_start_percentage_isSet = !json[QString("DeltaStartPercentage")].isNull() && m_delta_start_percentage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_ownership_percentage_isValid = ::OpenAPI::fromJsonValue(m_ownership_percentage, json[QString("OwnershipPercentage")]);
    m_ownership_percentage_isSet = !json[QString("OwnershipPercentage")].isNull() && m_ownership_percentage_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_start_percentage_isValid = ::OpenAPI::fromJsonValue(m_start_percentage, json[QString("StartPercentage")]);
    m_start_percentage_isSet = !json[QString("StartPercentage")].isNull() && m_start_percentage_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;
}

QString OAIPlayerOwnership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerOwnership::asJsonObject() const {
    QJsonObject obj;
    if (m_delta_ownership_percentage_isSet) {
        obj.insert(QString("DeltaOwnershipPercentage"), ::OpenAPI::toJsonValue(m_delta_ownership_percentage));
    }
    if (m_delta_start_percentage_isSet) {
        obj.insert(QString("DeltaStartPercentage"), ::OpenAPI::toJsonValue(m_delta_start_percentage));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ownership_percentage_isSet) {
        obj.insert(QString("OwnershipPercentage"), ::OpenAPI::toJsonValue(m_ownership_percentage));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_start_percentage_isSet) {
        obj.insert(QString("StartPercentage"), ::OpenAPI::toJsonValue(m_start_percentage));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

double OAIPlayerOwnership::getDeltaOwnershipPercentage() const {
    return m_delta_ownership_percentage;
}
void OAIPlayerOwnership::setDeltaOwnershipPercentage(const double &delta_ownership_percentage) {
    m_delta_ownership_percentage = delta_ownership_percentage;
    m_delta_ownership_percentage_isSet = true;
}

bool OAIPlayerOwnership::is_delta_ownership_percentage_Set() const{
    return m_delta_ownership_percentage_isSet;
}

bool OAIPlayerOwnership::is_delta_ownership_percentage_Valid() const{
    return m_delta_ownership_percentage_isValid;
}

double OAIPlayerOwnership::getDeltaStartPercentage() const {
    return m_delta_start_percentage;
}
void OAIPlayerOwnership::setDeltaStartPercentage(const double &delta_start_percentage) {
    m_delta_start_percentage = delta_start_percentage;
    m_delta_start_percentage_isSet = true;
}

bool OAIPlayerOwnership::is_delta_start_percentage_Set() const{
    return m_delta_start_percentage_isSet;
}

bool OAIPlayerOwnership::is_delta_start_percentage_Valid() const{
    return m_delta_start_percentage_isValid;
}

QString OAIPlayerOwnership::getName() const {
    return m_name;
}
void OAIPlayerOwnership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerOwnership::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerOwnership::is_name_Valid() const{
    return m_name_isValid;
}

double OAIPlayerOwnership::getOwnershipPercentage() const {
    return m_ownership_percentage;
}
void OAIPlayerOwnership::setOwnershipPercentage(const double &ownership_percentage) {
    m_ownership_percentage = ownership_percentage;
    m_ownership_percentage_isSet = true;
}

bool OAIPlayerOwnership::is_ownership_percentage_Set() const{
    return m_ownership_percentage_isSet;
}

bool OAIPlayerOwnership::is_ownership_percentage_Valid() const{
    return m_ownership_percentage_isValid;
}

qint32 OAIPlayerOwnership::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerOwnership::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerOwnership::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerOwnership::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerOwnership::getPosition() const {
    return m_position;
}
void OAIPlayerOwnership::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerOwnership::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerOwnership::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIPlayerOwnership::getSeason() const {
    return m_season;
}
void OAIPlayerOwnership::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayerOwnership::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayerOwnership::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIPlayerOwnership::getSeasonType() const {
    return m_season_type;
}
void OAIPlayerOwnership::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIPlayerOwnership::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIPlayerOwnership::is_season_type_Valid() const{
    return m_season_type_isValid;
}

double OAIPlayerOwnership::getStartPercentage() const {
    return m_start_percentage;
}
void OAIPlayerOwnership::setStartPercentage(const double &start_percentage) {
    m_start_percentage = start_percentage;
    m_start_percentage_isSet = true;
}

bool OAIPlayerOwnership::is_start_percentage_Set() const{
    return m_start_percentage_isSet;
}

bool OAIPlayerOwnership::is_start_percentage_Valid() const{
    return m_start_percentage_isValid;
}

QString OAIPlayerOwnership::getTeam() const {
    return m_team;
}
void OAIPlayerOwnership::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerOwnership::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerOwnership::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayerOwnership::getTeamId() const {
    return m_team_id;
}
void OAIPlayerOwnership::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayerOwnership::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayerOwnership::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIPlayerOwnership::getWeek() const {
    return m_week;
}
void OAIPlayerOwnership::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIPlayerOwnership::is_week_Set() const{
    return m_week_isSet;
}

bool OAIPlayerOwnership::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIPlayerOwnership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delta_ownership_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delta_start_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerOwnership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
