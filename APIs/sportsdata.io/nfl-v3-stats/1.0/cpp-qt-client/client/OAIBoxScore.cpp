/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore::OAIBoxScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore::OAIBoxScore() {
    this->initializeModel();
}

OAIBoxScore::~OAIBoxScore() {}

void OAIBoxScore::initializeModel() {

    m_away_defense_isSet = false;
    m_away_defense_isValid = false;

    m_away_fantasy_defense_isSet = false;
    m_away_fantasy_defense_isValid = false;

    m_away_kick_punt_returns_isSet = false;
    m_away_kick_punt_returns_isValid = false;

    m_away_kicking_isSet = false;
    m_away_kicking_isValid = false;

    m_away_passing_isSet = false;
    m_away_passing_isValid = false;

    m_away_punting_isSet = false;
    m_away_punting_isValid = false;

    m_away_receiving_isSet = false;
    m_away_receiving_isValid = false;

    m_away_rushing_isSet = false;
    m_away_rushing_isValid = false;

    m_game_isSet = false;
    m_game_isValid = false;

    m_home_defense_isSet = false;
    m_home_defense_isValid = false;

    m_home_fantasy_defense_isSet = false;
    m_home_fantasy_defense_isValid = false;

    m_home_kick_punt_returns_isSet = false;
    m_home_kick_punt_returns_isValid = false;

    m_home_kicking_isSet = false;
    m_home_kicking_isValid = false;

    m_home_passing_isSet = false;
    m_home_passing_isValid = false;

    m_home_punting_isSet = false;
    m_home_punting_isValid = false;

    m_home_receiving_isSet = false;
    m_home_receiving_isValid = false;

    m_home_rushing_isSet = false;
    m_home_rushing_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_scoring_details_isSet = false;
    m_scoring_details_isValid = false;

    m_scoring_plays_isSet = false;
    m_scoring_plays_isValid = false;
}

void OAIBoxScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore::fromJsonObject(QJsonObject json) {

    m_away_defense_isValid = ::OpenAPI::fromJsonValue(m_away_defense, json[QString("AwayDefense")]);
    m_away_defense_isSet = !json[QString("AwayDefense")].isNull() && m_away_defense_isValid;

    m_away_fantasy_defense_isValid = ::OpenAPI::fromJsonValue(m_away_fantasy_defense, json[QString("AwayFantasyDefense")]);
    m_away_fantasy_defense_isSet = !json[QString("AwayFantasyDefense")].isNull() && m_away_fantasy_defense_isValid;

    m_away_kick_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_away_kick_punt_returns, json[QString("AwayKickPuntReturns")]);
    m_away_kick_punt_returns_isSet = !json[QString("AwayKickPuntReturns")].isNull() && m_away_kick_punt_returns_isValid;

    m_away_kicking_isValid = ::OpenAPI::fromJsonValue(m_away_kicking, json[QString("AwayKicking")]);
    m_away_kicking_isSet = !json[QString("AwayKicking")].isNull() && m_away_kicking_isValid;

    m_away_passing_isValid = ::OpenAPI::fromJsonValue(m_away_passing, json[QString("AwayPassing")]);
    m_away_passing_isSet = !json[QString("AwayPassing")].isNull() && m_away_passing_isValid;

    m_away_punting_isValid = ::OpenAPI::fromJsonValue(m_away_punting, json[QString("AwayPunting")]);
    m_away_punting_isSet = !json[QString("AwayPunting")].isNull() && m_away_punting_isValid;

    m_away_receiving_isValid = ::OpenAPI::fromJsonValue(m_away_receiving, json[QString("AwayReceiving")]);
    m_away_receiving_isSet = !json[QString("AwayReceiving")].isNull() && m_away_receiving_isValid;

    m_away_rushing_isValid = ::OpenAPI::fromJsonValue(m_away_rushing, json[QString("AwayRushing")]);
    m_away_rushing_isSet = !json[QString("AwayRushing")].isNull() && m_away_rushing_isValid;

    m_game_isValid = ::OpenAPI::fromJsonValue(m_game, json[QString("Game")]);
    m_game_isSet = !json[QString("Game")].isNull() && m_game_isValid;

    m_home_defense_isValid = ::OpenAPI::fromJsonValue(m_home_defense, json[QString("HomeDefense")]);
    m_home_defense_isSet = !json[QString("HomeDefense")].isNull() && m_home_defense_isValid;

    m_home_fantasy_defense_isValid = ::OpenAPI::fromJsonValue(m_home_fantasy_defense, json[QString("HomeFantasyDefense")]);
    m_home_fantasy_defense_isSet = !json[QString("HomeFantasyDefense")].isNull() && m_home_fantasy_defense_isValid;

    m_home_kick_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_home_kick_punt_returns, json[QString("HomeKickPuntReturns")]);
    m_home_kick_punt_returns_isSet = !json[QString("HomeKickPuntReturns")].isNull() && m_home_kick_punt_returns_isValid;

    m_home_kicking_isValid = ::OpenAPI::fromJsonValue(m_home_kicking, json[QString("HomeKicking")]);
    m_home_kicking_isSet = !json[QString("HomeKicking")].isNull() && m_home_kicking_isValid;

    m_home_passing_isValid = ::OpenAPI::fromJsonValue(m_home_passing, json[QString("HomePassing")]);
    m_home_passing_isSet = !json[QString("HomePassing")].isNull() && m_home_passing_isValid;

    m_home_punting_isValid = ::OpenAPI::fromJsonValue(m_home_punting, json[QString("HomePunting")]);
    m_home_punting_isSet = !json[QString("HomePunting")].isNull() && m_home_punting_isValid;

    m_home_receiving_isValid = ::OpenAPI::fromJsonValue(m_home_receiving, json[QString("HomeReceiving")]);
    m_home_receiving_isSet = !json[QString("HomeReceiving")].isNull() && m_home_receiving_isValid;

    m_home_rushing_isValid = ::OpenAPI::fromJsonValue(m_home_rushing, json[QString("HomeRushing")]);
    m_home_rushing_isSet = !json[QString("HomeRushing")].isNull() && m_home_rushing_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_scoring_details_isValid = ::OpenAPI::fromJsonValue(m_scoring_details, json[QString("ScoringDetails")]);
    m_scoring_details_isSet = !json[QString("ScoringDetails")].isNull() && m_scoring_details_isValid;

    m_scoring_plays_isValid = ::OpenAPI::fromJsonValue(m_scoring_plays, json[QString("ScoringPlays")]);
    m_scoring_plays_isSet = !json[QString("ScoringPlays")].isNull() && m_scoring_plays_isValid;
}

QString OAIBoxScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore::asJsonObject() const {
    QJsonObject obj;
    if (m_away_defense.size() > 0) {
        obj.insert(QString("AwayDefense"), ::OpenAPI::toJsonValue(m_away_defense));
    }
    if (m_away_fantasy_defense.isSet()) {
        obj.insert(QString("AwayFantasyDefense"), ::OpenAPI::toJsonValue(m_away_fantasy_defense));
    }
    if (m_away_kick_punt_returns.size() > 0) {
        obj.insert(QString("AwayKickPuntReturns"), ::OpenAPI::toJsonValue(m_away_kick_punt_returns));
    }
    if (m_away_kicking.size() > 0) {
        obj.insert(QString("AwayKicking"), ::OpenAPI::toJsonValue(m_away_kicking));
    }
    if (m_away_passing.size() > 0) {
        obj.insert(QString("AwayPassing"), ::OpenAPI::toJsonValue(m_away_passing));
    }
    if (m_away_punting.size() > 0) {
        obj.insert(QString("AwayPunting"), ::OpenAPI::toJsonValue(m_away_punting));
    }
    if (m_away_receiving.size() > 0) {
        obj.insert(QString("AwayReceiving"), ::OpenAPI::toJsonValue(m_away_receiving));
    }
    if (m_away_rushing.size() > 0) {
        obj.insert(QString("AwayRushing"), ::OpenAPI::toJsonValue(m_away_rushing));
    }
    if (m_game.isSet()) {
        obj.insert(QString("Game"), ::OpenAPI::toJsonValue(m_game));
    }
    if (m_home_defense.size() > 0) {
        obj.insert(QString("HomeDefense"), ::OpenAPI::toJsonValue(m_home_defense));
    }
    if (m_home_fantasy_defense.isSet()) {
        obj.insert(QString("HomeFantasyDefense"), ::OpenAPI::toJsonValue(m_home_fantasy_defense));
    }
    if (m_home_kick_punt_returns.size() > 0) {
        obj.insert(QString("HomeKickPuntReturns"), ::OpenAPI::toJsonValue(m_home_kick_punt_returns));
    }
    if (m_home_kicking.size() > 0) {
        obj.insert(QString("HomeKicking"), ::OpenAPI::toJsonValue(m_home_kicking));
    }
    if (m_home_passing.size() > 0) {
        obj.insert(QString("HomePassing"), ::OpenAPI::toJsonValue(m_home_passing));
    }
    if (m_home_punting.size() > 0) {
        obj.insert(QString("HomePunting"), ::OpenAPI::toJsonValue(m_home_punting));
    }
    if (m_home_receiving.size() > 0) {
        obj.insert(QString("HomeReceiving"), ::OpenAPI::toJsonValue(m_home_receiving));
    }
    if (m_home_rushing.size() > 0) {
        obj.insert(QString("HomeRushing"), ::OpenAPI::toJsonValue(m_home_rushing));
    }
    if (m_score.isSet()) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_scoring_details.size() > 0) {
        obj.insert(QString("ScoringDetails"), ::OpenAPI::toJsonValue(m_scoring_details));
    }
    if (m_scoring_plays.size() > 0) {
        obj.insert(QString("ScoringPlays"), ::OpenAPI::toJsonValue(m_scoring_plays));
    }
    return obj;
}

QList<OAIPlayerDefense> OAIBoxScore::getAwayDefense() const {
    return m_away_defense;
}
void OAIBoxScore::setAwayDefense(const QList<OAIPlayerDefense> &away_defense) {
    m_away_defense = away_defense;
    m_away_defense_isSet = true;
}

bool OAIBoxScore::is_away_defense_Set() const{
    return m_away_defense_isSet;
}

bool OAIBoxScore::is_away_defense_Valid() const{
    return m_away_defense_isValid;
}

OAIFantasyDefenseGame OAIBoxScore::getAwayFantasyDefense() const {
    return m_away_fantasy_defense;
}
void OAIBoxScore::setAwayFantasyDefense(const OAIFantasyDefenseGame &away_fantasy_defense) {
    m_away_fantasy_defense = away_fantasy_defense;
    m_away_fantasy_defense_isSet = true;
}

bool OAIBoxScore::is_away_fantasy_defense_Set() const{
    return m_away_fantasy_defense_isSet;
}

bool OAIBoxScore::is_away_fantasy_defense_Valid() const{
    return m_away_fantasy_defense_isValid;
}

QList<OAIPlayerKickPuntReturns> OAIBoxScore::getAwayKickPuntReturns() const {
    return m_away_kick_punt_returns;
}
void OAIBoxScore::setAwayKickPuntReturns(const QList<OAIPlayerKickPuntReturns> &away_kick_punt_returns) {
    m_away_kick_punt_returns = away_kick_punt_returns;
    m_away_kick_punt_returns_isSet = true;
}

bool OAIBoxScore::is_away_kick_punt_returns_Set() const{
    return m_away_kick_punt_returns_isSet;
}

bool OAIBoxScore::is_away_kick_punt_returns_Valid() const{
    return m_away_kick_punt_returns_isValid;
}

QList<OAIPlayerKicking> OAIBoxScore::getAwayKicking() const {
    return m_away_kicking;
}
void OAIBoxScore::setAwayKicking(const QList<OAIPlayerKicking> &away_kicking) {
    m_away_kicking = away_kicking;
    m_away_kicking_isSet = true;
}

bool OAIBoxScore::is_away_kicking_Set() const{
    return m_away_kicking_isSet;
}

bool OAIBoxScore::is_away_kicking_Valid() const{
    return m_away_kicking_isValid;
}

QList<OAIPlayerPassing> OAIBoxScore::getAwayPassing() const {
    return m_away_passing;
}
void OAIBoxScore::setAwayPassing(const QList<OAIPlayerPassing> &away_passing) {
    m_away_passing = away_passing;
    m_away_passing_isSet = true;
}

bool OAIBoxScore::is_away_passing_Set() const{
    return m_away_passing_isSet;
}

bool OAIBoxScore::is_away_passing_Valid() const{
    return m_away_passing_isValid;
}

QList<OAIPlayerPunting> OAIBoxScore::getAwayPunting() const {
    return m_away_punting;
}
void OAIBoxScore::setAwayPunting(const QList<OAIPlayerPunting> &away_punting) {
    m_away_punting = away_punting;
    m_away_punting_isSet = true;
}

bool OAIBoxScore::is_away_punting_Set() const{
    return m_away_punting_isSet;
}

bool OAIBoxScore::is_away_punting_Valid() const{
    return m_away_punting_isValid;
}

QList<OAIPlayerReceiving> OAIBoxScore::getAwayReceiving() const {
    return m_away_receiving;
}
void OAIBoxScore::setAwayReceiving(const QList<OAIPlayerReceiving> &away_receiving) {
    m_away_receiving = away_receiving;
    m_away_receiving_isSet = true;
}

bool OAIBoxScore::is_away_receiving_Set() const{
    return m_away_receiving_isSet;
}

bool OAIBoxScore::is_away_receiving_Valid() const{
    return m_away_receiving_isValid;
}

QList<OAIPlayerRushing> OAIBoxScore::getAwayRushing() const {
    return m_away_rushing;
}
void OAIBoxScore::setAwayRushing(const QList<OAIPlayerRushing> &away_rushing) {
    m_away_rushing = away_rushing;
    m_away_rushing_isSet = true;
}

bool OAIBoxScore::is_away_rushing_Set() const{
    return m_away_rushing_isSet;
}

bool OAIBoxScore::is_away_rushing_Valid() const{
    return m_away_rushing_isValid;
}

OAIGame OAIBoxScore::getGame() const {
    return m_game;
}
void OAIBoxScore::setGame(const OAIGame &game) {
    m_game = game;
    m_game_isSet = true;
}

bool OAIBoxScore::is_game_Set() const{
    return m_game_isSet;
}

bool OAIBoxScore::is_game_Valid() const{
    return m_game_isValid;
}

QList<OAIPlayerDefense> OAIBoxScore::getHomeDefense() const {
    return m_home_defense;
}
void OAIBoxScore::setHomeDefense(const QList<OAIPlayerDefense> &home_defense) {
    m_home_defense = home_defense;
    m_home_defense_isSet = true;
}

bool OAIBoxScore::is_home_defense_Set() const{
    return m_home_defense_isSet;
}

bool OAIBoxScore::is_home_defense_Valid() const{
    return m_home_defense_isValid;
}

OAIFantasyDefenseGame OAIBoxScore::getHomeFantasyDefense() const {
    return m_home_fantasy_defense;
}
void OAIBoxScore::setHomeFantasyDefense(const OAIFantasyDefenseGame &home_fantasy_defense) {
    m_home_fantasy_defense = home_fantasy_defense;
    m_home_fantasy_defense_isSet = true;
}

bool OAIBoxScore::is_home_fantasy_defense_Set() const{
    return m_home_fantasy_defense_isSet;
}

bool OAIBoxScore::is_home_fantasy_defense_Valid() const{
    return m_home_fantasy_defense_isValid;
}

QList<OAIPlayerKickPuntReturns> OAIBoxScore::getHomeKickPuntReturns() const {
    return m_home_kick_punt_returns;
}
void OAIBoxScore::setHomeKickPuntReturns(const QList<OAIPlayerKickPuntReturns> &home_kick_punt_returns) {
    m_home_kick_punt_returns = home_kick_punt_returns;
    m_home_kick_punt_returns_isSet = true;
}

bool OAIBoxScore::is_home_kick_punt_returns_Set() const{
    return m_home_kick_punt_returns_isSet;
}

bool OAIBoxScore::is_home_kick_punt_returns_Valid() const{
    return m_home_kick_punt_returns_isValid;
}

QList<OAIPlayerKicking> OAIBoxScore::getHomeKicking() const {
    return m_home_kicking;
}
void OAIBoxScore::setHomeKicking(const QList<OAIPlayerKicking> &home_kicking) {
    m_home_kicking = home_kicking;
    m_home_kicking_isSet = true;
}

bool OAIBoxScore::is_home_kicking_Set() const{
    return m_home_kicking_isSet;
}

bool OAIBoxScore::is_home_kicking_Valid() const{
    return m_home_kicking_isValid;
}

QList<OAIPlayerPassing> OAIBoxScore::getHomePassing() const {
    return m_home_passing;
}
void OAIBoxScore::setHomePassing(const QList<OAIPlayerPassing> &home_passing) {
    m_home_passing = home_passing;
    m_home_passing_isSet = true;
}

bool OAIBoxScore::is_home_passing_Set() const{
    return m_home_passing_isSet;
}

bool OAIBoxScore::is_home_passing_Valid() const{
    return m_home_passing_isValid;
}

QList<OAIPlayerPunting> OAIBoxScore::getHomePunting() const {
    return m_home_punting;
}
void OAIBoxScore::setHomePunting(const QList<OAIPlayerPunting> &home_punting) {
    m_home_punting = home_punting;
    m_home_punting_isSet = true;
}

bool OAIBoxScore::is_home_punting_Set() const{
    return m_home_punting_isSet;
}

bool OAIBoxScore::is_home_punting_Valid() const{
    return m_home_punting_isValid;
}

QList<OAIPlayerReceiving> OAIBoxScore::getHomeReceiving() const {
    return m_home_receiving;
}
void OAIBoxScore::setHomeReceiving(const QList<OAIPlayerReceiving> &home_receiving) {
    m_home_receiving = home_receiving;
    m_home_receiving_isSet = true;
}

bool OAIBoxScore::is_home_receiving_Set() const{
    return m_home_receiving_isSet;
}

bool OAIBoxScore::is_home_receiving_Valid() const{
    return m_home_receiving_isValid;
}

QList<OAIPlayerRushing> OAIBoxScore::getHomeRushing() const {
    return m_home_rushing;
}
void OAIBoxScore::setHomeRushing(const QList<OAIPlayerRushing> &home_rushing) {
    m_home_rushing = home_rushing;
    m_home_rushing_isSet = true;
}

bool OAIBoxScore::is_home_rushing_Set() const{
    return m_home_rushing_isSet;
}

bool OAIBoxScore::is_home_rushing_Valid() const{
    return m_home_rushing_isValid;
}

OAIScore OAIBoxScore::getScore() const {
    return m_score;
}
void OAIBoxScore::setScore(const OAIScore &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIBoxScore::is_score_Set() const{
    return m_score_isSet;
}

bool OAIBoxScore::is_score_Valid() const{
    return m_score_isValid;
}

QList<OAIScoringDetail> OAIBoxScore::getScoringDetails() const {
    return m_scoring_details;
}
void OAIBoxScore::setScoringDetails(const QList<OAIScoringDetail> &scoring_details) {
    m_scoring_details = scoring_details;
    m_scoring_details_isSet = true;
}

bool OAIBoxScore::is_scoring_details_Set() const{
    return m_scoring_details_isSet;
}

bool OAIBoxScore::is_scoring_details_Valid() const{
    return m_scoring_details_isValid;
}

QList<OAIScoringPlay> OAIBoxScore::getScoringPlays() const {
    return m_scoring_plays;
}
void OAIBoxScore::setScoringPlays(const QList<OAIScoringPlay> &scoring_plays) {
    m_scoring_plays = scoring_plays;
    m_scoring_plays_isSet = true;
}

bool OAIBoxScore::is_scoring_plays_Set() const{
    return m_scoring_plays_isSet;
}

bool OAIBoxScore::is_scoring_plays_Valid() const{
    return m_scoring_plays_isValid;
}

bool OAIBoxScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_defense.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_fantasy_defense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_kick_punt_returns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_kicking.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_passing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_punting.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_receiving.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_rushing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_game.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_defense.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_fantasy_defense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_kick_punt_returns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_kicking.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_passing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_punting.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_receiving.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_rushing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_plays.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
