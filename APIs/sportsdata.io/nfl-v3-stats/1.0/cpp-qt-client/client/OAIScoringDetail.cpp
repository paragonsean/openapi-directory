/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoringDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoringDetail::OAIScoringDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoringDetail::OAIScoringDetail() {
    this->initializeModel();
}

OAIScoringDetail::~OAIScoringDetail() {}

void OAIScoringDetail::initializeModel() {

    m_game_key_isSet = false;
    m_game_key_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_player_game_id_isSet = false;
    m_player_game_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_score_id_isSet = false;
    m_score_id_isValid = false;

    m_scoring_detail_id_isSet = false;
    m_scoring_detail_id_isValid = false;

    m_scoring_play_id_isSet = false;
    m_scoring_play_id_isValid = false;

    m_scoring_type_isSet = false;
    m_scoring_type_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIScoringDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoringDetail::fromJsonObject(QJsonObject json) {

    m_game_key_isValid = ::OpenAPI::fromJsonValue(m_game_key, json[QString("GameKey")]);
    m_game_key_isSet = !json[QString("GameKey")].isNull() && m_game_key_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("Length")]);
    m_length_isSet = !json[QString("Length")].isNull() && m_length_isValid;

    m_player_game_id_isValid = ::OpenAPI::fromJsonValue(m_player_game_id, json[QString("PlayerGameID")]);
    m_player_game_id_isSet = !json[QString("PlayerGameID")].isNull() && m_player_game_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_score_id_isValid = ::OpenAPI::fromJsonValue(m_score_id, json[QString("ScoreID")]);
    m_score_id_isSet = !json[QString("ScoreID")].isNull() && m_score_id_isValid;

    m_scoring_detail_id_isValid = ::OpenAPI::fromJsonValue(m_scoring_detail_id, json[QString("ScoringDetailID")]);
    m_scoring_detail_id_isSet = !json[QString("ScoringDetailID")].isNull() && m_scoring_detail_id_isValid;

    m_scoring_play_id_isValid = ::OpenAPI::fromJsonValue(m_scoring_play_id, json[QString("ScoringPlayID")]);
    m_scoring_play_id_isSet = !json[QString("ScoringPlayID")].isNull() && m_scoring_play_id_isValid;

    m_scoring_type_isValid = ::OpenAPI::fromJsonValue(m_scoring_type, json[QString("ScoringType")]);
    m_scoring_type_isSet = !json[QString("ScoringType")].isNull() && m_scoring_type_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;
}

QString OAIScoringDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoringDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_game_key_isSet) {
        obj.insert(QString("GameKey"), ::OpenAPI::toJsonValue(m_game_key));
    }
    if (m_length_isSet) {
        obj.insert(QString("Length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_player_game_id_isSet) {
        obj.insert(QString("PlayerGameID"), ::OpenAPI::toJsonValue(m_player_game_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_score_id_isSet) {
        obj.insert(QString("ScoreID"), ::OpenAPI::toJsonValue(m_score_id));
    }
    if (m_scoring_detail_id_isSet) {
        obj.insert(QString("ScoringDetailID"), ::OpenAPI::toJsonValue(m_scoring_detail_id));
    }
    if (m_scoring_play_id_isSet) {
        obj.insert(QString("ScoringPlayID"), ::OpenAPI::toJsonValue(m_scoring_play_id));
    }
    if (m_scoring_type_isSet) {
        obj.insert(QString("ScoringType"), ::OpenAPI::toJsonValue(m_scoring_type));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAIScoringDetail::getGameKey() const {
    return m_game_key;
}
void OAIScoringDetail::setGameKey(const QString &game_key) {
    m_game_key = game_key;
    m_game_key_isSet = true;
}

bool OAIScoringDetail::is_game_key_Set() const{
    return m_game_key_isSet;
}

bool OAIScoringDetail::is_game_key_Valid() const{
    return m_game_key_isValid;
}

qint32 OAIScoringDetail::getLength() const {
    return m_length;
}
void OAIScoringDetail::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIScoringDetail::is_length_Set() const{
    return m_length_isSet;
}

bool OAIScoringDetail::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIScoringDetail::getPlayerGameId() const {
    return m_player_game_id;
}
void OAIScoringDetail::setPlayerGameId(const qint32 &player_game_id) {
    m_player_game_id = player_game_id;
    m_player_game_id_isSet = true;
}

bool OAIScoringDetail::is_player_game_id_Set() const{
    return m_player_game_id_isSet;
}

bool OAIScoringDetail::is_player_game_id_Valid() const{
    return m_player_game_id_isValid;
}

qint32 OAIScoringDetail::getPlayerId() const {
    return m_player_id;
}
void OAIScoringDetail::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIScoringDetail::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIScoringDetail::is_player_id_Valid() const{
    return m_player_id_isValid;
}

qint32 OAIScoringDetail::getScoreId() const {
    return m_score_id;
}
void OAIScoringDetail::setScoreId(const qint32 &score_id) {
    m_score_id = score_id;
    m_score_id_isSet = true;
}

bool OAIScoringDetail::is_score_id_Set() const{
    return m_score_id_isSet;
}

bool OAIScoringDetail::is_score_id_Valid() const{
    return m_score_id_isValid;
}

qint32 OAIScoringDetail::getScoringDetailId() const {
    return m_scoring_detail_id;
}
void OAIScoringDetail::setScoringDetailId(const qint32 &scoring_detail_id) {
    m_scoring_detail_id = scoring_detail_id;
    m_scoring_detail_id_isSet = true;
}

bool OAIScoringDetail::is_scoring_detail_id_Set() const{
    return m_scoring_detail_id_isSet;
}

bool OAIScoringDetail::is_scoring_detail_id_Valid() const{
    return m_scoring_detail_id_isValid;
}

qint32 OAIScoringDetail::getScoringPlayId() const {
    return m_scoring_play_id;
}
void OAIScoringDetail::setScoringPlayId(const qint32 &scoring_play_id) {
    m_scoring_play_id = scoring_play_id;
    m_scoring_play_id_isSet = true;
}

bool OAIScoringDetail::is_scoring_play_id_Set() const{
    return m_scoring_play_id_isSet;
}

bool OAIScoringDetail::is_scoring_play_id_Valid() const{
    return m_scoring_play_id_isValid;
}

QString OAIScoringDetail::getScoringType() const {
    return m_scoring_type;
}
void OAIScoringDetail::setScoringType(const QString &scoring_type) {
    m_scoring_type = scoring_type;
    m_scoring_type_isSet = true;
}

bool OAIScoringDetail::is_scoring_type_Set() const{
    return m_scoring_type_isSet;
}

bool OAIScoringDetail::is_scoring_type_Valid() const{
    return m_scoring_type_isValid;
}

qint32 OAIScoringDetail::getSeason() const {
    return m_season;
}
void OAIScoringDetail::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIScoringDetail::is_season_Set() const{
    return m_season_isSet;
}

bool OAIScoringDetail::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIScoringDetail::getSeasonType() const {
    return m_season_type;
}
void OAIScoringDetail::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIScoringDetail::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIScoringDetail::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIScoringDetail::getTeam() const {
    return m_team;
}
void OAIScoringDetail::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIScoringDetail::is_team_Set() const{
    return m_team_isSet;
}

bool OAIScoringDetail::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIScoringDetail::getWeek() const {
    return m_week;
}
void OAIScoringDetail::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIScoringDetail::is_week_Set() const{
    return m_week_isSet;
}

bool OAIScoringDetail::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIScoringDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_detail_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoringDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
