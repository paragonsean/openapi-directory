/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDefaultApi::~OAIDefaultApi() {
}

void OAIDefaultApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://azure-api.sportsdata.io/v3/nfl/stats"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://azure-api.sportsdata.io/v3/nfl/stats"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("areGamesInProgress", defaultConf);
    _serverIndices.insert("areGamesInProgress", 0);
    _serverConfigs.insert("boxScoreByScoreidV", defaultConf);
    _serverIndices.insert("boxScoreByScoreidV", 0);
    _serverConfigs.insert("boxScoreV", defaultConf);
    _serverIndices.insert("boxScoreV", 0);
    _serverConfigs.insert("boxScoresDeltaV", defaultConf);
    _serverIndices.insert("boxScoresDeltaV", 0);
    _serverConfigs.insert("boxScoresVSimulation", defaultConf);
    _serverIndices.insert("boxScoresVSimulation", 0);
    _serverConfigs.insert("byeWeeks", defaultConf);
    _serverIndices.insert("byeWeeks", 0);
    _serverConfigs.insert("dailyFantasyPlayers", defaultConf);
    _serverIndices.insert("dailyFantasyPlayers", 0);
    _serverConfigs.insert("dailyFantasyScoring", defaultConf);
    _serverIndices.insert("dailyFantasyScoring", 0);
    _serverConfigs.insert("dfsSlatesByDate", defaultConf);
    _serverIndices.insert("dfsSlatesByDate", 0);
    _serverConfigs.insert("dfsSlatesByWeek", defaultConf);
    _serverIndices.insert("dfsSlatesByWeek", 0);
    _serverConfigs.insert("fantasyDefenseGameStats", defaultConf);
    _serverIndices.insert("fantasyDefenseGameStats", 0);
    _serverConfigs.insert("fantasyDefenseGameStatsByTeam", defaultConf);
    _serverIndices.insert("fantasyDefenseGameStatsByTeam", 0);
    _serverConfigs.insert("fantasyDefenseSeasonStats", defaultConf);
    _serverIndices.insert("fantasyDefenseSeasonStats", 0);
    _serverConfigs.insert("fantasyDefenseSeasonStatsByTeam", defaultConf);
    _serverIndices.insert("fantasyDefenseSeasonStatsByTeam", 0);
    _serverConfigs.insert("fantasyPlayerOwnershipPercentagesSeasonLong", defaultConf);
    _serverIndices.insert("fantasyPlayerOwnershipPercentagesSeasonLong", 0);
    _serverConfigs.insert("fantasyPlayersWithAdp", defaultConf);
    _serverIndices.insert("fantasyPlayersWithAdp", 0);
    _serverConfigs.insert("gameStatsBySeasonDeprecatedUseTeamGameStatsInstead", defaultConf);
    _serverIndices.insert("gameStatsBySeasonDeprecatedUseTeamGameStatsInstead", 0);
    _serverConfigs.insert("gameStatsByWeekDeprecatedUseTeamGameStatsInstead", defaultConf);
    _serverIndices.insert("gameStatsByWeekDeprecatedUseTeamGameStatsInstead", 0);
    _serverConfigs.insert("idpFantasyPlayersWithAdp", defaultConf);
    _serverIndices.insert("idpFantasyPlayersWithAdp", 0);
    _serverConfigs.insert("injuries", defaultConf);
    _serverIndices.insert("injuries", 0);
    _serverConfigs.insert("injuriesByTeam", defaultConf);
    _serverIndices.insert("injuriesByTeam", 0);
    _serverConfigs.insert("leagueLeadersBySeason", defaultConf);
    _serverIndices.insert("leagueLeadersBySeason", 0);
    _serverConfigs.insert("leagueLeadersByWeek", defaultConf);
    _serverIndices.insert("leagueLeadersByWeek", 0);
    _serverConfigs.insert("legacyBoxScore", defaultConf);
    _serverIndices.insert("legacyBoxScore", 0);
    _serverConfigs.insert("legacyBoxScores", defaultConf);
    _serverIndices.insert("legacyBoxScores", 0);
    _serverConfigs.insert("legacyBoxScoresActive", defaultConf);
    _serverIndices.insert("legacyBoxScoresActive", 0);
    _serverConfigs.insert("legacyBoxScoresDelta", defaultConf);
    _serverIndices.insert("legacyBoxScoresDelta", 0);
    _serverConfigs.insert("legacyBoxScoresDeltaCurrentWeek", defaultConf);
    _serverIndices.insert("legacyBoxScoresDeltaCurrentWeek", 0);
    _serverConfigs.insert("legacyBoxScoresFinal", defaultConf);
    _serverIndices.insert("legacyBoxScoresFinal", 0);
    _serverConfigs.insert("legacyBoxScoresLive", defaultConf);
    _serverIndices.insert("legacyBoxScoresLive", 0);
    _serverConfigs.insert("news", defaultConf);
    _serverIndices.insert("news", 0);
    _serverConfigs.insert("newsByDate", defaultConf);
    _serverIndices.insert("newsByDate", 0);
    _serverConfigs.insert("newsByPlayer", defaultConf);
    _serverIndices.insert("newsByPlayer", 0);
    _serverConfigs.insert("newsByTeam", defaultConf);
    _serverIndices.insert("newsByTeam", 0);
    _serverConfigs.insert("playerDetailsByAvailable", defaultConf);
    _serverIndices.insert("playerDetailsByAvailable", 0);
    _serverConfigs.insert("playerDetailsByFreeAgents", defaultConf);
    _serverIndices.insert("playerDetailsByFreeAgents", 0);
    _serverConfigs.insert("playerDetailsByPlayer", defaultConf);
    _serverIndices.insert("playerDetailsByPlayer", 0);
    _serverConfigs.insert("playerDetailsByRookieDraftYear", defaultConf);
    _serverIndices.insert("playerDetailsByRookieDraftYear", 0);
    _serverConfigs.insert("playerDetailsByTeam", defaultConf);
    _serverIndices.insert("playerDetailsByTeam", 0);
    _serverConfigs.insert("playerGameLogsBySeason", defaultConf);
    _serverIndices.insert("playerGameLogsBySeason", 0);
    _serverConfigs.insert("playerGameRedZoneStats", defaultConf);
    _serverIndices.insert("playerGameRedZoneStats", 0);
    _serverConfigs.insert("playerGameRedZoneStatsInsideFive", defaultConf);
    _serverIndices.insert("playerGameRedZoneStatsInsideFive", 0);
    _serverConfigs.insert("playerGameRedZoneStatsInsideTen", defaultConf);
    _serverIndices.insert("playerGameRedZoneStatsInsideTen", 0);
    _serverConfigs.insert("playerGameStatsByPlayer", defaultConf);
    _serverIndices.insert("playerGameStatsByPlayer", 0);
    _serverConfigs.insert("playerGameStatsByTeam", defaultConf);
    _serverIndices.insert("playerGameStatsByTeam", 0);
    _serverConfigs.insert("playerGameStatsByWeek", defaultConf);
    _serverIndices.insert("playerGameStatsByWeek", 0);
    _serverConfigs.insert("playerGameStatsByWeekDelta", defaultConf);
    _serverIndices.insert("playerGameStatsByWeekDelta", 0);
    _serverConfigs.insert("playerGameStatsDelta", defaultConf);
    _serverIndices.insert("playerGameStatsDelta", 0);
    _serverConfigs.insert("playerSeasonRedZoneStats", defaultConf);
    _serverIndices.insert("playerSeasonRedZoneStats", 0);
    _serverConfigs.insert("playerSeasonRedZoneStatsInsideFive", defaultConf);
    _serverIndices.insert("playerSeasonRedZoneStatsInsideFive", 0);
    _serverConfigs.insert("playerSeasonRedZoneStatsInsideTen", defaultConf);
    _serverIndices.insert("playerSeasonRedZoneStatsInsideTen", 0);
    _serverConfigs.insert("playerSeasonStats", defaultConf);
    _serverIndices.insert("playerSeasonStats", 0);
    _serverConfigs.insert("playerSeasonStatsByPlayer", defaultConf);
    _serverIndices.insert("playerSeasonStatsByPlayer", 0);
    _serverConfigs.insert("playerSeasonStatsByTeam", defaultConf);
    _serverIndices.insert("playerSeasonStatsByTeam", 0);
    _serverConfigs.insert("playerSeasonThirdDownStats", defaultConf);
    _serverIndices.insert("playerSeasonThirdDownStats", 0);
    _serverConfigs.insert("proBowlers", defaultConf);
    _serverIndices.insert("proBowlers", 0);
    _serverConfigs.insert("schedule", defaultConf);
    _serverIndices.insert("schedule", 0);
    _serverConfigs.insert("scoresByDate", defaultConf);
    _serverIndices.insert("scoresByDate", 0);
    _serverConfigs.insert("scoresBySeason", defaultConf);
    _serverIndices.insert("scoresBySeason", 0);
    _serverConfigs.insert("scoresByWeek", defaultConf);
    _serverIndices.insert("scoresByWeek", 0);
    _serverConfigs.insert("scoresByWeekSimulation", defaultConf);
    _serverIndices.insert("scoresByWeekSimulation", 0);
    _serverConfigs.insert("seasonCurrent", defaultConf);
    _serverIndices.insert("seasonCurrent", 0);
    _serverConfigs.insert("seasonLastCompleted", defaultConf);
    _serverIndices.insert("seasonLastCompleted", 0);
    _serverConfigs.insert("seasonUpcoming", defaultConf);
    _serverIndices.insert("seasonUpcoming", 0);
    _serverConfigs.insert("stadiums", defaultConf);
    _serverIndices.insert("stadiums", 0);
    _serverConfigs.insert("standings", defaultConf);
    _serverIndices.insert("standings", 0);
    _serverConfigs.insert("teamGameLogsBySeason", defaultConf);
    _serverIndices.insert("teamGameLogsBySeason", 0);
    _serverConfigs.insert("teamGameStats", defaultConf);
    _serverIndices.insert("teamGameStats", 0);
    _serverConfigs.insert("teamSeasonStats", defaultConf);
    _serverIndices.insert("teamSeasonStats", 0);
    _serverConfigs.insert("teamsActive", defaultConf);
    _serverIndices.insert("teamsActive", 0);
    _serverConfigs.insert("teamsAll", defaultConf);
    _serverIndices.insert("teamsAll", 0);
    _serverConfigs.insert("teamsBySeason", defaultConf);
    _serverIndices.insert("teamsBySeason", 0);
    _serverConfigs.insert("timeframes", defaultConf);
    _serverIndices.insert("timeframes", 0);
    _serverConfigs.insert("weekCurrent", defaultConf);
    _serverIndices.insert("weekCurrent", 0);
    _serverConfigs.insert("weekLastCompleted", defaultConf);
    _serverIndices.insert("weekLastCompleted", 0);
    _serverConfigs.insert("weekUpcoming", defaultConf);
    _serverIndices.insert("weekUpcoming", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDefaultApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDefaultApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDefaultApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDefaultApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDefaultApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDefaultApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDefaultApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDefaultApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDefaultApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDefaultApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDefaultApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDefaultApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDefaultApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDefaultApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDefaultApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDefaultApi::areGamesInProgress(const QString &format) {
    QString fullPath = QString(_serverConfigs["areGamesInProgress"][_serverIndices.value("areGamesInProgress")].URL()+"/{format}/AreAnyGamesInProgress");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::areGamesInProgressCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::areGamesInProgressCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    bool output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT areGamesInProgressSignal(output);
        Q_EMIT areGamesInProgressSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT areGamesInProgressSignalE(output, error_type, error_str);
        Q_EMIT areGamesInProgressSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT areGamesInProgressSignalError(output, error_type, error_str);
        Q_EMIT areGamesInProgressSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::boxScoreByScoreidV(const QString &format, const QString &scoreid) {
    QString fullPath = QString(_serverConfigs["boxScoreByScoreidV"][_serverIndices.value("boxScoreByScoreidV")].URL()+"/{format}/BoxScoreByScoreIDV3/{scoreid}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString scoreidPathParam("{");
        scoreidPathParam.append("scoreid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scoreid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scoreid"+pathSuffix : pathPrefix;
        fullPath.replace(scoreidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scoreid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::boxScoreByScoreidVCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::boxScoreByScoreidVCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBoxScoreV3 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT boxScoreByScoreidVSignal(output);
        Q_EMIT boxScoreByScoreidVSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT boxScoreByScoreidVSignalE(output, error_type, error_str);
        Q_EMIT boxScoreByScoreidVSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT boxScoreByScoreidVSignalError(output, error_type, error_str);
        Q_EMIT boxScoreByScoreidVSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::boxScoreV(const QString &format, const QString &season, const QString &week, const QString &hometeam) {
    QString fullPath = QString(_serverConfigs["boxScoreV"][_serverIndices.value("boxScoreV")].URL()+"/{format}/BoxScoreV3/{season}/{week}/{hometeam}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString hometeamPathParam("{");
        hometeamPathParam.append("hometeam").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hometeam", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hometeam"+pathSuffix : pathPrefix;
        fullPath.replace(hometeamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hometeam)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::boxScoreVCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::boxScoreVCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBoxScoreV3 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT boxScoreVSignal(output);
        Q_EMIT boxScoreVSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT boxScoreVSignalE(output, error_type, error_str);
        Q_EMIT boxScoreVSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT boxScoreVSignalError(output, error_type, error_str);
        Q_EMIT boxScoreVSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::boxScoresDeltaV(const QString &format, const QString &season, const QString &week, const QString &playerstoinclude, const QString &minutes) {
    QString fullPath = QString(_serverConfigs["boxScoresDeltaV"][_serverIndices.value("boxScoresDeltaV")].URL()+"/{format}/BoxScoresDeltaV3/{season}/{week}/{playerstoinclude}/{minutes}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString playerstoincludePathParam("{");
        playerstoincludePathParam.append("playerstoinclude").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playerstoinclude", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playerstoinclude"+pathSuffix : pathPrefix;
        fullPath.replace(playerstoincludePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playerstoinclude)));
    }
    
    {
        QString minutesPathParam("{");
        minutesPathParam.append("minutes").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minutes", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minutes"+pathSuffix : pathPrefix;
        fullPath.replace(minutesPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minutes)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::boxScoresDeltaVCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::boxScoresDeltaVCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScoreV3> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScoreV3 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT boxScoresDeltaVSignal(output);
        Q_EMIT boxScoresDeltaVSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT boxScoresDeltaVSignalE(output, error_type, error_str);
        Q_EMIT boxScoresDeltaVSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT boxScoresDeltaVSignalError(output, error_type, error_str);
        Q_EMIT boxScoresDeltaVSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::boxScoresVSimulation(const QString &format, const QString &numberofplays) {
    QString fullPath = QString(_serverConfigs["boxScoresVSimulation"][_serverIndices.value("boxScoresVSimulation")].URL()+"/{format}/SimulatedBoxScoresV3/{numberofplays}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString numberofplaysPathParam("{");
        numberofplaysPathParam.append("numberofplays").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "numberofplays", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"numberofplays"+pathSuffix : pathPrefix;
        fullPath.replace(numberofplaysPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(numberofplays)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::boxScoresVSimulationCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::boxScoresVSimulationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScoreV3> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScoreV3 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT boxScoresVSimulationSignal(output);
        Q_EMIT boxScoresVSimulationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT boxScoresVSimulationSignalE(output, error_type, error_str);
        Q_EMIT boxScoresVSimulationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT boxScoresVSimulationSignalError(output, error_type, error_str);
        Q_EMIT boxScoresVSimulationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::byeWeeks(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["byeWeeks"][_serverIndices.value("byeWeeks")].URL()+"/{format}/Byes/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::byeWeeksCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::byeWeeksCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBye> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBye val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT byeWeeksSignal(output);
        Q_EMIT byeWeeksSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT byeWeeksSignalE(output, error_type, error_str);
        Q_EMIT byeWeeksSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT byeWeeksSignalError(output, error_type, error_str);
        Q_EMIT byeWeeksSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::dailyFantasyPlayers(const QString &format, const QString &date) {
    QString fullPath = QString(_serverConfigs["dailyFantasyPlayers"][_serverIndices.value("dailyFantasyPlayers")].URL()+"/{format}/DailyFantasyPlayers/{date}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString datePathParam("{");
        datePathParam.append("date").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "date", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"date"+pathSuffix : pathPrefix;
        fullPath.replace(datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::dailyFantasyPlayersCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::dailyFantasyPlayersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDailyFantasyPlayer> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDailyFantasyPlayer val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dailyFantasyPlayersSignal(output);
        Q_EMIT dailyFantasyPlayersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dailyFantasyPlayersSignalE(output, error_type, error_str);
        Q_EMIT dailyFantasyPlayersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dailyFantasyPlayersSignalError(output, error_type, error_str);
        Q_EMIT dailyFantasyPlayersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::dailyFantasyScoring(const QString &format, const QString &date) {
    QString fullPath = QString(_serverConfigs["dailyFantasyScoring"][_serverIndices.value("dailyFantasyScoring")].URL()+"/{format}/DailyFantasyPoints/{date}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString datePathParam("{");
        datePathParam.append("date").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "date", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"date"+pathSuffix : pathPrefix;
        fullPath.replace(datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::dailyFantasyScoringCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::dailyFantasyScoringCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDailyFantasyScoring> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDailyFantasyScoring val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dailyFantasyScoringSignal(output);
        Q_EMIT dailyFantasyScoringSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dailyFantasyScoringSignalE(output, error_type, error_str);
        Q_EMIT dailyFantasyScoringSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dailyFantasyScoringSignalError(output, error_type, error_str);
        Q_EMIT dailyFantasyScoringSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::dfsSlatesByDate(const QString &format, const QString &date) {
    QString fullPath = QString(_serverConfigs["dfsSlatesByDate"][_serverIndices.value("dfsSlatesByDate")].URL()+"/{format}/DfsSlatesByDate/{date}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString datePathParam("{");
        datePathParam.append("date").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "date", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"date"+pathSuffix : pathPrefix;
        fullPath.replace(datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::dfsSlatesByDateCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::dfsSlatesByDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDfsSlate> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDfsSlate val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dfsSlatesByDateSignal(output);
        Q_EMIT dfsSlatesByDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dfsSlatesByDateSignalE(output, error_type, error_str);
        Q_EMIT dfsSlatesByDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dfsSlatesByDateSignalError(output, error_type, error_str);
        Q_EMIT dfsSlatesByDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::dfsSlatesByWeek(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["dfsSlatesByWeek"][_serverIndices.value("dfsSlatesByWeek")].URL()+"/{format}/DfsSlatesByWeek/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::dfsSlatesByWeekCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::dfsSlatesByWeekCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDfsSlate> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDfsSlate val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dfsSlatesByWeekSignal(output);
        Q_EMIT dfsSlatesByWeekSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dfsSlatesByWeekSignalE(output, error_type, error_str);
        Q_EMIT dfsSlatesByWeekSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dfsSlatesByWeekSignalError(output, error_type, error_str);
        Q_EMIT dfsSlatesByWeekSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::fantasyDefenseGameStats(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["fantasyDefenseGameStats"][_serverIndices.value("fantasyDefenseGameStats")].URL()+"/{format}/FantasyDefenseByGame/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::fantasyDefenseGameStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::fantasyDefenseGameStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIFantasyDefenseGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIFantasyDefenseGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fantasyDefenseGameStatsSignal(output);
        Q_EMIT fantasyDefenseGameStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fantasyDefenseGameStatsSignalE(output, error_type, error_str);
        Q_EMIT fantasyDefenseGameStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fantasyDefenseGameStatsSignalError(output, error_type, error_str);
        Q_EMIT fantasyDefenseGameStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::fantasyDefenseGameStatsByTeam(const QString &format, const QString &season, const QString &week, const QString &team) {
    QString fullPath = QString(_serverConfigs["fantasyDefenseGameStatsByTeam"][_serverIndices.value("fantasyDefenseGameStatsByTeam")].URL()+"/{format}/FantasyDefenseByGameByTeam/{season}/{week}/{team}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::fantasyDefenseGameStatsByTeamCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::fantasyDefenseGameStatsByTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFantasyDefenseGame output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fantasyDefenseGameStatsByTeamSignal(output);
        Q_EMIT fantasyDefenseGameStatsByTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fantasyDefenseGameStatsByTeamSignalE(output, error_type, error_str);
        Q_EMIT fantasyDefenseGameStatsByTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fantasyDefenseGameStatsByTeamSignalError(output, error_type, error_str);
        Q_EMIT fantasyDefenseGameStatsByTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::fantasyDefenseSeasonStats(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["fantasyDefenseSeasonStats"][_serverIndices.value("fantasyDefenseSeasonStats")].URL()+"/{format}/FantasyDefenseBySeason/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::fantasyDefenseSeasonStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::fantasyDefenseSeasonStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIFantasyDefenseSeason> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIFantasyDefenseSeason val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fantasyDefenseSeasonStatsSignal(output);
        Q_EMIT fantasyDefenseSeasonStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fantasyDefenseSeasonStatsSignalE(output, error_type, error_str);
        Q_EMIT fantasyDefenseSeasonStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fantasyDefenseSeasonStatsSignalError(output, error_type, error_str);
        Q_EMIT fantasyDefenseSeasonStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::fantasyDefenseSeasonStatsByTeam(const QString &format, const QString &season, const QString &team) {
    QString fullPath = QString(_serverConfigs["fantasyDefenseSeasonStatsByTeam"][_serverIndices.value("fantasyDefenseSeasonStatsByTeam")].URL()+"/{format}/FantasyDefenseBySeasonByTeam/{season}/{team}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::fantasyDefenseSeasonStatsByTeamCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::fantasyDefenseSeasonStatsByTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFantasyDefenseSeason output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fantasyDefenseSeasonStatsByTeamSignal(output);
        Q_EMIT fantasyDefenseSeasonStatsByTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fantasyDefenseSeasonStatsByTeamSignalE(output, error_type, error_str);
        Q_EMIT fantasyDefenseSeasonStatsByTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fantasyDefenseSeasonStatsByTeamSignalError(output, error_type, error_str);
        Q_EMIT fantasyDefenseSeasonStatsByTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::fantasyPlayerOwnershipPercentagesSeasonLong(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["fantasyPlayerOwnershipPercentagesSeasonLong"][_serverIndices.value("fantasyPlayerOwnershipPercentagesSeasonLong")].URL()+"/{format}/PlayerOwnership/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::fantasyPlayerOwnershipPercentagesSeasonLongCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::fantasyPlayerOwnershipPercentagesSeasonLongCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerOwnership> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerOwnership val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fantasyPlayerOwnershipPercentagesSeasonLongSignal(output);
        Q_EMIT fantasyPlayerOwnershipPercentagesSeasonLongSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fantasyPlayerOwnershipPercentagesSeasonLongSignalE(output, error_type, error_str);
        Q_EMIT fantasyPlayerOwnershipPercentagesSeasonLongSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fantasyPlayerOwnershipPercentagesSeasonLongSignalError(output, error_type, error_str);
        Q_EMIT fantasyPlayerOwnershipPercentagesSeasonLongSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::fantasyPlayersWithAdp(const QString &format) {
    QString fullPath = QString(_serverConfigs["fantasyPlayersWithAdp"][_serverIndices.value("fantasyPlayersWithAdp")].URL()+"/{format}/FantasyPlayers");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::fantasyPlayersWithAdpCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::fantasyPlayersWithAdpCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIFantasyPlayer> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIFantasyPlayer val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fantasyPlayersWithAdpSignal(output);
        Q_EMIT fantasyPlayersWithAdpSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fantasyPlayersWithAdpSignalE(output, error_type, error_str);
        Q_EMIT fantasyPlayersWithAdpSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fantasyPlayersWithAdpSignalError(output, error_type, error_str);
        Q_EMIT fantasyPlayersWithAdpSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["gameStatsBySeasonDeprecatedUseTeamGameStatsInstead"][_serverIndices.value("gameStatsBySeasonDeprecatedUseTeamGameStatsInstead")].URL()+"/{format}/GameStats/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignal(output);
        Q_EMIT gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalE(output, error_type, error_str);
        Q_EMIT gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalError(output, error_type, error_str);
        Q_EMIT gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::gameStatsByWeekDeprecatedUseTeamGameStatsInstead(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["gameStatsByWeekDeprecatedUseTeamGameStatsInstead"][_serverIndices.value("gameStatsByWeekDeprecatedUseTeamGameStatsInstead")].URL()+"/{format}/GameStatsByWeek/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignal(output);
        Q_EMIT gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalE(output, error_type, error_str);
        Q_EMIT gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalError(output, error_type, error_str);
        Q_EMIT gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::idpFantasyPlayersWithAdp(const QString &format) {
    QString fullPath = QString(_serverConfigs["idpFantasyPlayersWithAdp"][_serverIndices.value("idpFantasyPlayersWithAdp")].URL()+"/{format}/FantasyPlayersIDP");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::idpFantasyPlayersWithAdpCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::idpFantasyPlayersWithAdpCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIFantasyPlayer> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIFantasyPlayer val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT idpFantasyPlayersWithAdpSignal(output);
        Q_EMIT idpFantasyPlayersWithAdpSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT idpFantasyPlayersWithAdpSignalE(output, error_type, error_str);
        Q_EMIT idpFantasyPlayersWithAdpSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT idpFantasyPlayersWithAdpSignalError(output, error_type, error_str);
        Q_EMIT idpFantasyPlayersWithAdpSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::injuries(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["injuries"][_serverIndices.value("injuries")].URL()+"/{format}/Injuries/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::injuriesCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::injuriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIInjury> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIInjury val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT injuriesSignal(output);
        Q_EMIT injuriesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT injuriesSignalE(output, error_type, error_str);
        Q_EMIT injuriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT injuriesSignalError(output, error_type, error_str);
        Q_EMIT injuriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::injuriesByTeam(const QString &format, const QString &season, const QString &week, const QString &team) {
    QString fullPath = QString(_serverConfigs["injuriesByTeam"][_serverIndices.value("injuriesByTeam")].URL()+"/{format}/Injuries/{season}/{week}/{team}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::injuriesByTeamCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::injuriesByTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIInjury> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIInjury val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT injuriesByTeamSignal(output);
        Q_EMIT injuriesByTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT injuriesByTeamSignalE(output, error_type, error_str);
        Q_EMIT injuriesByTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT injuriesByTeamSignalError(output, error_type, error_str);
        Q_EMIT injuriesByTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::leagueLeadersBySeason(const QString &format, const QString &season, const QString &position, const QString &column) {
    QString fullPath = QString(_serverConfigs["leagueLeadersBySeason"][_serverIndices.value("leagueLeadersBySeason")].URL()+"/{format}/SeasonLeagueLeaders/{season}/{position}/{column}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString positionPathParam("{");
        positionPathParam.append("position").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "position", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"position"+pathSuffix : pathPrefix;
        fullPath.replace(positionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(position)));
    }
    
    {
        QString columnPathParam("{");
        columnPathParam.append("column").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "column", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"column"+pathSuffix : pathPrefix;
        fullPath.replace(columnPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(column)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::leagueLeadersBySeasonCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::leagueLeadersBySeasonCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeason> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeason val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT leagueLeadersBySeasonSignal(output);
        Q_EMIT leagueLeadersBySeasonSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT leagueLeadersBySeasonSignalE(output, error_type, error_str);
        Q_EMIT leagueLeadersBySeasonSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT leagueLeadersBySeasonSignalError(output, error_type, error_str);
        Q_EMIT leagueLeadersBySeasonSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::leagueLeadersByWeek(const QString &format, const QString &season, const QString &week, const QString &position, const QString &column) {
    QString fullPath = QString(_serverConfigs["leagueLeadersByWeek"][_serverIndices.value("leagueLeadersByWeek")].URL()+"/{format}/GameLeagueLeaders/{season}/{week}/{position}/{column}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString positionPathParam("{");
        positionPathParam.append("position").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "position", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"position"+pathSuffix : pathPrefix;
        fullPath.replace(positionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(position)));
    }
    
    {
        QString columnPathParam("{");
        columnPathParam.append("column").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "column", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"column"+pathSuffix : pathPrefix;
        fullPath.replace(columnPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(column)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::leagueLeadersByWeekCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::leagueLeadersByWeekCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT leagueLeadersByWeekSignal(output);
        Q_EMIT leagueLeadersByWeekSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT leagueLeadersByWeekSignalE(output, error_type, error_str);
        Q_EMIT leagueLeadersByWeekSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT leagueLeadersByWeekSignalError(output, error_type, error_str);
        Q_EMIT leagueLeadersByWeekSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::legacyBoxScore(const QString &format, const QString &season, const QString &week, const QString &hometeam) {
    QString fullPath = QString(_serverConfigs["legacyBoxScore"][_serverIndices.value("legacyBoxScore")].URL()+"/{format}/BoxScore/{season}/{week}/{hometeam}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString hometeamPathParam("{");
        hometeamPathParam.append("hometeam").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hometeam", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hometeam"+pathSuffix : pathPrefix;
        fullPath.replace(hometeamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hometeam)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::legacyBoxScoreCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::legacyBoxScoreCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBoxScore output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyBoxScoreSignal(output);
        Q_EMIT legacyBoxScoreSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyBoxScoreSignalE(output, error_type, error_str);
        Q_EMIT legacyBoxScoreSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyBoxScoreSignalError(output, error_type, error_str);
        Q_EMIT legacyBoxScoreSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::legacyBoxScores(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["legacyBoxScores"][_serverIndices.value("legacyBoxScores")].URL()+"/{format}/BoxScores/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::legacyBoxScoresCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::legacyBoxScoresCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyBoxScoresSignal(output);
        Q_EMIT legacyBoxScoresSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyBoxScoresSignalE(output, error_type, error_str);
        Q_EMIT legacyBoxScoresSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyBoxScoresSignalError(output, error_type, error_str);
        Q_EMIT legacyBoxScoresSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::legacyBoxScoresActive(const QString &format) {
    QString fullPath = QString(_serverConfigs["legacyBoxScoresActive"][_serverIndices.value("legacyBoxScoresActive")].URL()+"/{format}/ActiveBoxScores");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::legacyBoxScoresActiveCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::legacyBoxScoresActiveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyBoxScoresActiveSignal(output);
        Q_EMIT legacyBoxScoresActiveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyBoxScoresActiveSignalE(output, error_type, error_str);
        Q_EMIT legacyBoxScoresActiveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyBoxScoresActiveSignalError(output, error_type, error_str);
        Q_EMIT legacyBoxScoresActiveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::legacyBoxScoresDelta(const QString &format, const QString &season, const QString &week, const QString &minutes) {
    QString fullPath = QString(_serverConfigs["legacyBoxScoresDelta"][_serverIndices.value("legacyBoxScoresDelta")].URL()+"/{format}/BoxScoresDelta/{season}/{week}/{minutes}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString minutesPathParam("{");
        minutesPathParam.append("minutes").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minutes", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minutes"+pathSuffix : pathPrefix;
        fullPath.replace(minutesPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minutes)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::legacyBoxScoresDeltaCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::legacyBoxScoresDeltaCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyBoxScoresDeltaSignal(output);
        Q_EMIT legacyBoxScoresDeltaSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyBoxScoresDeltaSignalE(output, error_type, error_str);
        Q_EMIT legacyBoxScoresDeltaSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyBoxScoresDeltaSignalError(output, error_type, error_str);
        Q_EMIT legacyBoxScoresDeltaSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::legacyBoxScoresDeltaCurrentWeek(const QString &format, const QString &minutes) {
    QString fullPath = QString(_serverConfigs["legacyBoxScoresDeltaCurrentWeek"][_serverIndices.value("legacyBoxScoresDeltaCurrentWeek")].URL()+"/{format}/RecentlyUpdatedBoxScores/{minutes}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString minutesPathParam("{");
        minutesPathParam.append("minutes").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minutes", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minutes"+pathSuffix : pathPrefix;
        fullPath.replace(minutesPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minutes)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::legacyBoxScoresDeltaCurrentWeekCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::legacyBoxScoresDeltaCurrentWeekCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyBoxScoresDeltaCurrentWeekSignal(output);
        Q_EMIT legacyBoxScoresDeltaCurrentWeekSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyBoxScoresDeltaCurrentWeekSignalE(output, error_type, error_str);
        Q_EMIT legacyBoxScoresDeltaCurrentWeekSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyBoxScoresDeltaCurrentWeekSignalError(output, error_type, error_str);
        Q_EMIT legacyBoxScoresDeltaCurrentWeekSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::legacyBoxScoresFinal(const QString &format) {
    QString fullPath = QString(_serverConfigs["legacyBoxScoresFinal"][_serverIndices.value("legacyBoxScoresFinal")].URL()+"/{format}/FinalBoxScores");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::legacyBoxScoresFinalCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::legacyBoxScoresFinalCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyBoxScoresFinalSignal(output);
        Q_EMIT legacyBoxScoresFinalSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyBoxScoresFinalSignalE(output, error_type, error_str);
        Q_EMIT legacyBoxScoresFinalSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyBoxScoresFinalSignalError(output, error_type, error_str);
        Q_EMIT legacyBoxScoresFinalSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::legacyBoxScoresLive(const QString &format) {
    QString fullPath = QString(_serverConfigs["legacyBoxScoresLive"][_serverIndices.value("legacyBoxScoresLive")].URL()+"/{format}/LiveBoxScores");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::legacyBoxScoresLiveCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::legacyBoxScoresLiveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIBoxScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIBoxScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyBoxScoresLiveSignal(output);
        Q_EMIT legacyBoxScoresLiveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyBoxScoresLiveSignalE(output, error_type, error_str);
        Q_EMIT legacyBoxScoresLiveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyBoxScoresLiveSignalError(output, error_type, error_str);
        Q_EMIT legacyBoxScoresLiveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::news(const QString &format) {
    QString fullPath = QString(_serverConfigs["news"][_serverIndices.value("news")].URL()+"/{format}/News");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::newsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::newsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAINews> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAINews val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT newsSignal(output);
        Q_EMIT newsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT newsSignalE(output, error_type, error_str);
        Q_EMIT newsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT newsSignalError(output, error_type, error_str);
        Q_EMIT newsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::newsByDate(const QString &format, const QString &date) {
    QString fullPath = QString(_serverConfigs["newsByDate"][_serverIndices.value("newsByDate")].URL()+"/{format}/NewsByDate/{date}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString datePathParam("{");
        datePathParam.append("date").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "date", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"date"+pathSuffix : pathPrefix;
        fullPath.replace(datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::newsByDateCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::newsByDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAINews> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAINews val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT newsByDateSignal(output);
        Q_EMIT newsByDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT newsByDateSignalE(output, error_type, error_str);
        Q_EMIT newsByDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT newsByDateSignalError(output, error_type, error_str);
        Q_EMIT newsByDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::newsByPlayer(const QString &format, const QString &playerid) {
    QString fullPath = QString(_serverConfigs["newsByPlayer"][_serverIndices.value("newsByPlayer")].URL()+"/{format}/NewsByPlayerID/{playerid}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString playeridPathParam("{");
        playeridPathParam.append("playerid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playerid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playerid"+pathSuffix : pathPrefix;
        fullPath.replace(playeridPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playerid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::newsByPlayerCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::newsByPlayerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAINews> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAINews val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT newsByPlayerSignal(output);
        Q_EMIT newsByPlayerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT newsByPlayerSignalE(output, error_type, error_str);
        Q_EMIT newsByPlayerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT newsByPlayerSignalError(output, error_type, error_str);
        Q_EMIT newsByPlayerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::newsByTeam(const QString &format, const QString &team) {
    QString fullPath = QString(_serverConfigs["newsByTeam"][_serverIndices.value("newsByTeam")].URL()+"/{format}/NewsByTeam/{team}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::newsByTeamCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::newsByTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAINews> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAINews val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT newsByTeamSignal(output);
        Q_EMIT newsByTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT newsByTeamSignalE(output, error_type, error_str);
        Q_EMIT newsByTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT newsByTeamSignalError(output, error_type, error_str);
        Q_EMIT newsByTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerDetailsByAvailable(const QString &format) {
    QString fullPath = QString(_serverConfigs["playerDetailsByAvailable"][_serverIndices.value("playerDetailsByAvailable")].URL()+"/{format}/Players");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerDetailsByAvailableCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerDetailsByAvailableCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayer> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayer val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerDetailsByAvailableSignal(output);
        Q_EMIT playerDetailsByAvailableSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerDetailsByAvailableSignalE(output, error_type, error_str);
        Q_EMIT playerDetailsByAvailableSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerDetailsByAvailableSignalError(output, error_type, error_str);
        Q_EMIT playerDetailsByAvailableSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerDetailsByFreeAgents(const QString &format) {
    QString fullPath = QString(_serverConfigs["playerDetailsByFreeAgents"][_serverIndices.value("playerDetailsByFreeAgents")].URL()+"/{format}/FreeAgents");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerDetailsByFreeAgentsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerDetailsByFreeAgentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayer> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayer val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerDetailsByFreeAgentsSignal(output);
        Q_EMIT playerDetailsByFreeAgentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerDetailsByFreeAgentsSignalE(output, error_type, error_str);
        Q_EMIT playerDetailsByFreeAgentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerDetailsByFreeAgentsSignalError(output, error_type, error_str);
        Q_EMIT playerDetailsByFreeAgentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerDetailsByPlayer(const QString &format, const QString &playerid) {
    QString fullPath = QString(_serverConfigs["playerDetailsByPlayer"][_serverIndices.value("playerDetailsByPlayer")].URL()+"/{format}/Player/{playerid}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString playeridPathParam("{");
        playeridPathParam.append("playerid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playerid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playerid"+pathSuffix : pathPrefix;
        fullPath.replace(playeridPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playerid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerDetailsByPlayerCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerDetailsByPlayerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPlayerDetail output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerDetailsByPlayerSignal(output);
        Q_EMIT playerDetailsByPlayerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerDetailsByPlayerSignalE(output, error_type, error_str);
        Q_EMIT playerDetailsByPlayerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerDetailsByPlayerSignalError(output, error_type, error_str);
        Q_EMIT playerDetailsByPlayerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerDetailsByRookieDraftYear(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["playerDetailsByRookieDraftYear"][_serverIndices.value("playerDetailsByRookieDraftYear")].URL()+"/{format}/Rookies/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerDetailsByRookieDraftYearCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerDetailsByRookieDraftYearCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayer> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayer val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerDetailsByRookieDraftYearSignal(output);
        Q_EMIT playerDetailsByRookieDraftYearSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerDetailsByRookieDraftYearSignalE(output, error_type, error_str);
        Q_EMIT playerDetailsByRookieDraftYearSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerDetailsByRookieDraftYearSignalError(output, error_type, error_str);
        Q_EMIT playerDetailsByRookieDraftYearSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerDetailsByTeam(const QString &format, const QString &team) {
    QString fullPath = QString(_serverConfigs["playerDetailsByTeam"][_serverIndices.value("playerDetailsByTeam")].URL()+"/{format}/Players/{team}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerDetailsByTeamCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerDetailsByTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerDetail> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerDetail val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerDetailsByTeamSignal(output);
        Q_EMIT playerDetailsByTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerDetailsByTeamSignalE(output, error_type, error_str);
        Q_EMIT playerDetailsByTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerDetailsByTeamSignalError(output, error_type, error_str);
        Q_EMIT playerDetailsByTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameLogsBySeason(const QString &format, const QString &season, const QString &playerid, const QString &numberofgames) {
    QString fullPath = QString(_serverConfigs["playerGameLogsBySeason"][_serverIndices.value("playerGameLogsBySeason")].URL()+"/{format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString playeridPathParam("{");
        playeridPathParam.append("playerid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playerid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playerid"+pathSuffix : pathPrefix;
        fullPath.replace(playeridPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playerid)));
    }
    
    {
        QString numberofgamesPathParam("{");
        numberofgamesPathParam.append("numberofgames").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "numberofgames", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"numberofgames"+pathSuffix : pathPrefix;
        fullPath.replace(numberofgamesPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(numberofgames)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameLogsBySeasonCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameLogsBySeasonCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameLogsBySeasonSignal(output);
        Q_EMIT playerGameLogsBySeasonSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameLogsBySeasonSignalE(output, error_type, error_str);
        Q_EMIT playerGameLogsBySeasonSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameLogsBySeasonSignalError(output, error_type, error_str);
        Q_EMIT playerGameLogsBySeasonSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameRedZoneStats(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["playerGameRedZoneStats"][_serverIndices.value("playerGameRedZoneStats")].URL()+"/{format}/PlayerGameRedZoneStats/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameRedZoneStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameRedZoneStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGameRedZone> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGameRedZone val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameRedZoneStatsSignal(output);
        Q_EMIT playerGameRedZoneStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameRedZoneStatsSignalE(output, error_type, error_str);
        Q_EMIT playerGameRedZoneStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameRedZoneStatsSignalError(output, error_type, error_str);
        Q_EMIT playerGameRedZoneStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameRedZoneStatsInsideFive(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["playerGameRedZoneStatsInsideFive"][_serverIndices.value("playerGameRedZoneStatsInsideFive")].URL()+"/{format}/PlayerGameRedZoneInsideFiveStats/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameRedZoneStatsInsideFiveCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameRedZoneStatsInsideFiveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGameRedZone> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGameRedZone val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameRedZoneStatsInsideFiveSignal(output);
        Q_EMIT playerGameRedZoneStatsInsideFiveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameRedZoneStatsInsideFiveSignalE(output, error_type, error_str);
        Q_EMIT playerGameRedZoneStatsInsideFiveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameRedZoneStatsInsideFiveSignalError(output, error_type, error_str);
        Q_EMIT playerGameRedZoneStatsInsideFiveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameRedZoneStatsInsideTen(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["playerGameRedZoneStatsInsideTen"][_serverIndices.value("playerGameRedZoneStatsInsideTen")].URL()+"/{format}/PlayerGameRedZoneInsideTenStats/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameRedZoneStatsInsideTenCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameRedZoneStatsInsideTenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGameRedZone> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGameRedZone val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameRedZoneStatsInsideTenSignal(output);
        Q_EMIT playerGameRedZoneStatsInsideTenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameRedZoneStatsInsideTenSignalE(output, error_type, error_str);
        Q_EMIT playerGameRedZoneStatsInsideTenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameRedZoneStatsInsideTenSignalError(output, error_type, error_str);
        Q_EMIT playerGameRedZoneStatsInsideTenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameStatsByPlayer(const QString &format, const QString &season, const QString &week, const QString &playerid) {
    QString fullPath = QString(_serverConfigs["playerGameStatsByPlayer"][_serverIndices.value("playerGameStatsByPlayer")].URL()+"/{format}/PlayerGameStatsByPlayerID/{season}/{week}/{playerid}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString playeridPathParam("{");
        playeridPathParam.append("playerid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playerid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playerid"+pathSuffix : pathPrefix;
        fullPath.replace(playeridPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playerid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameStatsByPlayerCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameStatsByPlayerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPlayerGame output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameStatsByPlayerSignal(output);
        Q_EMIT playerGameStatsByPlayerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameStatsByPlayerSignalE(output, error_type, error_str);
        Q_EMIT playerGameStatsByPlayerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameStatsByPlayerSignalError(output, error_type, error_str);
        Q_EMIT playerGameStatsByPlayerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameStatsByTeam(const QString &format, const QString &season, const QString &week, const QString &team) {
    QString fullPath = QString(_serverConfigs["playerGameStatsByTeam"][_serverIndices.value("playerGameStatsByTeam")].URL()+"/{format}/PlayerGameStatsByTeam/{season}/{week}/{team}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameStatsByTeamCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameStatsByTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameStatsByTeamSignal(output);
        Q_EMIT playerGameStatsByTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameStatsByTeamSignalE(output, error_type, error_str);
        Q_EMIT playerGameStatsByTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameStatsByTeamSignalError(output, error_type, error_str);
        Q_EMIT playerGameStatsByTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameStatsByWeek(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["playerGameStatsByWeek"][_serverIndices.value("playerGameStatsByWeek")].URL()+"/{format}/PlayerGameStatsByWeek/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameStatsByWeekCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameStatsByWeekCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameStatsByWeekSignal(output);
        Q_EMIT playerGameStatsByWeekSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameStatsByWeekSignalE(output, error_type, error_str);
        Q_EMIT playerGameStatsByWeekSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameStatsByWeekSignalError(output, error_type, error_str);
        Q_EMIT playerGameStatsByWeekSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameStatsByWeekDelta(const QString &format, const QString &season, const QString &week, const QString &minutes) {
    QString fullPath = QString(_serverConfigs["playerGameStatsByWeekDelta"][_serverIndices.value("playerGameStatsByWeekDelta")].URL()+"/{format}/PlayerGameStatsByWeekDelta/{season}/{week}/{minutes}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    
    {
        QString minutesPathParam("{");
        minutesPathParam.append("minutes").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minutes", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minutes"+pathSuffix : pathPrefix;
        fullPath.replace(minutesPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minutes)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameStatsByWeekDeltaCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameStatsByWeekDeltaCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameStatsByWeekDeltaSignal(output);
        Q_EMIT playerGameStatsByWeekDeltaSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameStatsByWeekDeltaSignalE(output, error_type, error_str);
        Q_EMIT playerGameStatsByWeekDeltaSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameStatsByWeekDeltaSignalError(output, error_type, error_str);
        Q_EMIT playerGameStatsByWeekDeltaSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerGameStatsDelta(const QString &format, const QString &minutes) {
    QString fullPath = QString(_serverConfigs["playerGameStatsDelta"][_serverIndices.value("playerGameStatsDelta")].URL()+"/{format}/PlayerGameStatsDelta/{minutes}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString minutesPathParam("{");
        minutesPathParam.append("minutes").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minutes", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minutes"+pathSuffix : pathPrefix;
        fullPath.replace(minutesPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minutes)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerGameStatsDeltaCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerGameStatsDeltaCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerGameStatsDeltaSignal(output);
        Q_EMIT playerGameStatsDeltaSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerGameStatsDeltaSignalE(output, error_type, error_str);
        Q_EMIT playerGameStatsDeltaSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerGameStatsDeltaSignalError(output, error_type, error_str);
        Q_EMIT playerGameStatsDeltaSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerSeasonRedZoneStats(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["playerSeasonRedZoneStats"][_serverIndices.value("playerSeasonRedZoneStats")].URL()+"/{format}/PlayerSeasonRedZoneStats/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerSeasonRedZoneStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerSeasonRedZoneStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeasonRedZone> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeasonRedZone val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerSeasonRedZoneStatsSignal(output);
        Q_EMIT playerSeasonRedZoneStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerSeasonRedZoneStatsSignalE(output, error_type, error_str);
        Q_EMIT playerSeasonRedZoneStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerSeasonRedZoneStatsSignalError(output, error_type, error_str);
        Q_EMIT playerSeasonRedZoneStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerSeasonRedZoneStatsInsideFive(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["playerSeasonRedZoneStatsInsideFive"][_serverIndices.value("playerSeasonRedZoneStatsInsideFive")].URL()+"/{format}/PlayerSeasonRedZoneInsideFiveStats/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerSeasonRedZoneStatsInsideFiveCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerSeasonRedZoneStatsInsideFiveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeasonRedZone> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeasonRedZone val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerSeasonRedZoneStatsInsideFiveSignal(output);
        Q_EMIT playerSeasonRedZoneStatsInsideFiveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerSeasonRedZoneStatsInsideFiveSignalE(output, error_type, error_str);
        Q_EMIT playerSeasonRedZoneStatsInsideFiveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerSeasonRedZoneStatsInsideFiveSignalError(output, error_type, error_str);
        Q_EMIT playerSeasonRedZoneStatsInsideFiveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerSeasonRedZoneStatsInsideTen(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["playerSeasonRedZoneStatsInsideTen"][_serverIndices.value("playerSeasonRedZoneStatsInsideTen")].URL()+"/{format}/PlayerSeasonRedZoneInsideTenStats/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerSeasonRedZoneStatsInsideTenCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerSeasonRedZoneStatsInsideTenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeasonRedZone> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeasonRedZone val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerSeasonRedZoneStatsInsideTenSignal(output);
        Q_EMIT playerSeasonRedZoneStatsInsideTenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerSeasonRedZoneStatsInsideTenSignalE(output, error_type, error_str);
        Q_EMIT playerSeasonRedZoneStatsInsideTenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerSeasonRedZoneStatsInsideTenSignalError(output, error_type, error_str);
        Q_EMIT playerSeasonRedZoneStatsInsideTenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerSeasonStats(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["playerSeasonStats"][_serverIndices.value("playerSeasonStats")].URL()+"/{format}/PlayerSeasonStats/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerSeasonStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerSeasonStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeason> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeason val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerSeasonStatsSignal(output);
        Q_EMIT playerSeasonStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerSeasonStatsSignalE(output, error_type, error_str);
        Q_EMIT playerSeasonStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerSeasonStatsSignalError(output, error_type, error_str);
        Q_EMIT playerSeasonStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerSeasonStatsByPlayer(const QString &format, const QString &season, const QString &playerid) {
    QString fullPath = QString(_serverConfigs["playerSeasonStatsByPlayer"][_serverIndices.value("playerSeasonStatsByPlayer")].URL()+"/{format}/PlayerSeasonStatsByPlayerID/{season}/{playerid}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString playeridPathParam("{");
        playeridPathParam.append("playerid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "playerid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"playerid"+pathSuffix : pathPrefix;
        fullPath.replace(playeridPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playerid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerSeasonStatsByPlayerCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerSeasonStatsByPlayerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeason> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeason val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerSeasonStatsByPlayerSignal(output);
        Q_EMIT playerSeasonStatsByPlayerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerSeasonStatsByPlayerSignalE(output, error_type, error_str);
        Q_EMIT playerSeasonStatsByPlayerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerSeasonStatsByPlayerSignalError(output, error_type, error_str);
        Q_EMIT playerSeasonStatsByPlayerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerSeasonStatsByTeam(const QString &format, const QString &season, const QString &team) {
    QString fullPath = QString(_serverConfigs["playerSeasonStatsByTeam"][_serverIndices.value("playerSeasonStatsByTeam")].URL()+"/{format}/PlayerSeasonStatsByTeam/{season}/{team}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString teamPathParam("{");
        teamPathParam.append("team").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team"+pathSuffix : pathPrefix;
        fullPath.replace(teamPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerSeasonStatsByTeamCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerSeasonStatsByTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeason> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeason val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerSeasonStatsByTeamSignal(output);
        Q_EMIT playerSeasonStatsByTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerSeasonStatsByTeamSignalE(output, error_type, error_str);
        Q_EMIT playerSeasonStatsByTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerSeasonStatsByTeamSignalError(output, error_type, error_str);
        Q_EMIT playerSeasonStatsByTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::playerSeasonThirdDownStats(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["playerSeasonThirdDownStats"][_serverIndices.value("playerSeasonThirdDownStats")].URL()+"/{format}/PlayerSeasonThirdDownStats/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::playerSeasonThirdDownStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::playerSeasonThirdDownStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerSeasonThirdDown> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerSeasonThirdDown val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT playerSeasonThirdDownStatsSignal(output);
        Q_EMIT playerSeasonThirdDownStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT playerSeasonThirdDownStatsSignalE(output, error_type, error_str);
        Q_EMIT playerSeasonThirdDownStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT playerSeasonThirdDownStatsSignalError(output, error_type, error_str);
        Q_EMIT playerSeasonThirdDownStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::proBowlers(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["proBowlers"][_serverIndices.value("proBowlers")].URL()+"/{format}/ProBowlers/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::proBowlersCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::proBowlersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPlayerInfo> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPlayerInfo val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT proBowlersSignal(output);
        Q_EMIT proBowlersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT proBowlersSignalE(output, error_type, error_str);
        Q_EMIT proBowlersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT proBowlersSignalError(output, error_type, error_str);
        Q_EMIT proBowlersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::schedule(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["schedule"][_serverIndices.value("schedule")].URL()+"/{format}/Schedules/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scheduleCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scheduleCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISchedule> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISchedule val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scheduleSignal(output);
        Q_EMIT scheduleSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scheduleSignalE(output, error_type, error_str);
        Q_EMIT scheduleSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scheduleSignalError(output, error_type, error_str);
        Q_EMIT scheduleSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scoresByDate(const QString &format, const QString &date) {
    QString fullPath = QString(_serverConfigs["scoresByDate"][_serverIndices.value("scoresByDate")].URL()+"/{format}/ScoresByDate/{date}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString datePathParam("{");
        datePathParam.append("date").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "date", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"date"+pathSuffix : pathPrefix;
        fullPath.replace(datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scoresByDateCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scoresByDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scoresByDateSignal(output);
        Q_EMIT scoresByDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scoresByDateSignalE(output, error_type, error_str);
        Q_EMIT scoresByDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scoresByDateSignalError(output, error_type, error_str);
        Q_EMIT scoresByDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scoresBySeason(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["scoresBySeason"][_serverIndices.value("scoresBySeason")].URL()+"/{format}/Scores/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scoresBySeasonCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scoresBySeasonCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scoresBySeasonSignal(output);
        Q_EMIT scoresBySeasonSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scoresBySeasonSignalE(output, error_type, error_str);
        Q_EMIT scoresBySeasonSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scoresBySeasonSignalError(output, error_type, error_str);
        Q_EMIT scoresBySeasonSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scoresByWeek(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["scoresByWeek"][_serverIndices.value("scoresByWeek")].URL()+"/{format}/ScoresByWeek/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scoresByWeekCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scoresByWeekCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scoresByWeekSignal(output);
        Q_EMIT scoresByWeekSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scoresByWeekSignalE(output, error_type, error_str);
        Q_EMIT scoresByWeekSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scoresByWeekSignalError(output, error_type, error_str);
        Q_EMIT scoresByWeekSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scoresByWeekSimulation(const QString &format, const QString &numberofplays) {
    QString fullPath = QString(_serverConfigs["scoresByWeekSimulation"][_serverIndices.value("scoresByWeekSimulation")].URL()+"/{format}/SimulatedScores/{numberofplays}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString numberofplaysPathParam("{");
        numberofplaysPathParam.append("numberofplays").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "numberofplays", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"numberofplays"+pathSuffix : pathPrefix;
        fullPath.replace(numberofplaysPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(numberofplays)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scoresByWeekSimulationCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scoresByWeekSimulationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIScore> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIScore val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scoresByWeekSimulationSignal(output);
        Q_EMIT scoresByWeekSimulationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scoresByWeekSimulationSignalE(output, error_type, error_str);
        Q_EMIT scoresByWeekSimulationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scoresByWeekSimulationSignalError(output, error_type, error_str);
        Q_EMIT scoresByWeekSimulationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::seasonCurrent(const QString &format) {
    QString fullPath = QString(_serverConfigs["seasonCurrent"][_serverIndices.value("seasonCurrent")].URL()+"/{format}/CurrentSeason");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::seasonCurrentCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::seasonCurrentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT seasonCurrentSignal(output);
        Q_EMIT seasonCurrentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT seasonCurrentSignalE(output, error_type, error_str);
        Q_EMIT seasonCurrentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT seasonCurrentSignalError(output, error_type, error_str);
        Q_EMIT seasonCurrentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::seasonLastCompleted(const QString &format) {
    QString fullPath = QString(_serverConfigs["seasonLastCompleted"][_serverIndices.value("seasonLastCompleted")].URL()+"/{format}/LastCompletedSeason");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::seasonLastCompletedCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::seasonLastCompletedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT seasonLastCompletedSignal(output);
        Q_EMIT seasonLastCompletedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT seasonLastCompletedSignalE(output, error_type, error_str);
        Q_EMIT seasonLastCompletedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT seasonLastCompletedSignalError(output, error_type, error_str);
        Q_EMIT seasonLastCompletedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::seasonUpcoming(const QString &format) {
    QString fullPath = QString(_serverConfigs["seasonUpcoming"][_serverIndices.value("seasonUpcoming")].URL()+"/{format}/UpcomingSeason");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::seasonUpcomingCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::seasonUpcomingCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT seasonUpcomingSignal(output);
        Q_EMIT seasonUpcomingSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT seasonUpcomingSignalE(output, error_type, error_str);
        Q_EMIT seasonUpcomingSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT seasonUpcomingSignalError(output, error_type, error_str);
        Q_EMIT seasonUpcomingSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::stadiums(const QString &format) {
    QString fullPath = QString(_serverConfigs["stadiums"][_serverIndices.value("stadiums")].URL()+"/{format}/Stadiums");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::stadiumsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::stadiumsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIStadium> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIStadium val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT stadiumsSignal(output);
        Q_EMIT stadiumsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT stadiumsSignalE(output, error_type, error_str);
        Q_EMIT stadiumsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT stadiumsSignalError(output, error_type, error_str);
        Q_EMIT stadiumsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::standings(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["standings"][_serverIndices.value("standings")].URL()+"/{format}/Standings/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::standingsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::standingsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIStanding> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIStanding val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT standingsSignal(output);
        Q_EMIT standingsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT standingsSignalE(output, error_type, error_str);
        Q_EMIT standingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT standingsSignalError(output, error_type, error_str);
        Q_EMIT standingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::teamGameLogsBySeason(const QString &format, const QString &season, const QString &teamid, const QString &numberofgames) {
    QString fullPath = QString(_serverConfigs["teamGameLogsBySeason"][_serverIndices.value("teamGameLogsBySeason")].URL()+"/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString teamidPathParam("{");
        teamidPathParam.append("teamid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamid"+pathSuffix : pathPrefix;
        fullPath.replace(teamidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(teamid)));
    }
    
    {
        QString numberofgamesPathParam("{");
        numberofgamesPathParam.append("numberofgames").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "numberofgames", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"numberofgames"+pathSuffix : pathPrefix;
        fullPath.replace(numberofgamesPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(numberofgames)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::teamGameLogsBySeasonCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::teamGameLogsBySeasonCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITeamGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITeamGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT teamGameLogsBySeasonSignal(output);
        Q_EMIT teamGameLogsBySeasonSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT teamGameLogsBySeasonSignalE(output, error_type, error_str);
        Q_EMIT teamGameLogsBySeasonSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT teamGameLogsBySeasonSignalError(output, error_type, error_str);
        Q_EMIT teamGameLogsBySeasonSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::teamGameStats(const QString &format, const QString &season, const QString &week) {
    QString fullPath = QString(_serverConfigs["teamGameStats"][_serverIndices.value("teamGameStats")].URL()+"/{format}/TeamGameStats/{season}/{week}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    
    {
        QString weekPathParam("{");
        weekPathParam.append("week").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "week", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"week"+pathSuffix : pathPrefix;
        fullPath.replace(weekPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(week)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::teamGameStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::teamGameStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITeamGame> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITeamGame val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT teamGameStatsSignal(output);
        Q_EMIT teamGameStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT teamGameStatsSignalE(output, error_type, error_str);
        Q_EMIT teamGameStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT teamGameStatsSignalError(output, error_type, error_str);
        Q_EMIT teamGameStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::teamSeasonStats(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["teamSeasonStats"][_serverIndices.value("teamSeasonStats")].URL()+"/{format}/TeamSeasonStats/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::teamSeasonStatsCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::teamSeasonStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITeamSeason> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITeamSeason val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT teamSeasonStatsSignal(output);
        Q_EMIT teamSeasonStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT teamSeasonStatsSignalE(output, error_type, error_str);
        Q_EMIT teamSeasonStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT teamSeasonStatsSignalError(output, error_type, error_str);
        Q_EMIT teamSeasonStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::teamsActive(const QString &format) {
    QString fullPath = QString(_serverConfigs["teamsActive"][_serverIndices.value("teamsActive")].URL()+"/{format}/Teams");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::teamsActiveCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::teamsActiveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITeam> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITeam val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT teamsActiveSignal(output);
        Q_EMIT teamsActiveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT teamsActiveSignalE(output, error_type, error_str);
        Q_EMIT teamsActiveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT teamsActiveSignalError(output, error_type, error_str);
        Q_EMIT teamsActiveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::teamsAll(const QString &format) {
    QString fullPath = QString(_serverConfigs["teamsAll"][_serverIndices.value("teamsAll")].URL()+"/{format}/AllTeams");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::teamsAllCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::teamsAllCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITeam> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITeam val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT teamsAllSignal(output);
        Q_EMIT teamsAllSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT teamsAllSignalE(output, error_type, error_str);
        Q_EMIT teamsAllSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT teamsAllSignalError(output, error_type, error_str);
        Q_EMIT teamsAllSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::teamsBySeason(const QString &format, const QString &season) {
    QString fullPath = QString(_serverConfigs["teamsBySeason"][_serverIndices.value("teamsBySeason")].URL()+"/{format}/Teams/{season}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::teamsBySeasonCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::teamsBySeasonCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITeam> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITeam val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT teamsBySeasonSignal(output);
        Q_EMIT teamsBySeasonSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT teamsBySeasonSignalE(output, error_type, error_str);
        Q_EMIT teamsBySeasonSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT teamsBySeasonSignalError(output, error_type, error_str);
        Q_EMIT teamsBySeasonSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::timeframes(const QString &format, const QString &type) {
    QString fullPath = QString(_serverConfigs["timeframes"][_serverIndices.value("timeframes")].URL()+"/{format}/Timeframes/{type}");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::timeframesCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::timeframesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITimeframe> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITimeframe val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT timeframesSignal(output);
        Q_EMIT timeframesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT timeframesSignalE(output, error_type, error_str);
        Q_EMIT timeframesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT timeframesSignalError(output, error_type, error_str);
        Q_EMIT timeframesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::weekCurrent(const QString &format) {
    QString fullPath = QString(_serverConfigs["weekCurrent"][_serverIndices.value("weekCurrent")].URL()+"/{format}/CurrentWeek");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::weekCurrentCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::weekCurrentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT weekCurrentSignal(output);
        Q_EMIT weekCurrentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT weekCurrentSignalE(output, error_type, error_str);
        Q_EMIT weekCurrentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT weekCurrentSignalError(output, error_type, error_str);
        Q_EMIT weekCurrentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::weekLastCompleted(const QString &format) {
    QString fullPath = QString(_serverConfigs["weekLastCompleted"][_serverIndices.value("weekLastCompleted")].URL()+"/{format}/LastCompletedWeek");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::weekLastCompletedCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::weekLastCompletedCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT weekLastCompletedSignal(output);
        Q_EMIT weekLastCompletedSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT weekLastCompletedSignalE(output, error_type, error_str);
        Q_EMIT weekLastCompletedSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT weekLastCompletedSignalError(output, error_type, error_str);
        Q_EMIT weekLastCompletedSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::weekUpcoming(const QString &format) {
    QString fullPath = QString(_serverConfigs["weekUpcoming"][_serverIndices.value("weekUpcoming")].URL()+"/{format}/UpcomingWeek");
    
    if (_apiKeys.contains("apiKeyQuery")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("apiKeyQuery=").append(_apiKeys.find("apiKeyQuery").value());
    }
    
    if (_apiKeys.contains("apiKeyHeader")) {
        addHeaders("apiKeyHeader",_apiKeys.find("apiKeyHeader").value());
    }
    
    
    {
        QString formatPathParam("{");
        formatPathParam.append("format").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "format", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"format"+pathSuffix : pathPrefix;
        fullPath.replace(formatPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::weekUpcomingCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::weekUpcomingCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    qint32 output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT weekUpcomingSignal(output);
        Q_EMIT weekUpcomingSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT weekUpcomingSignalE(output, error_type, error_str);
        Q_EMIT weekUpcomingSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT weekUpcomingSignalError(output, error_type, error_str);
        Q_EMIT weekUpcomingSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
