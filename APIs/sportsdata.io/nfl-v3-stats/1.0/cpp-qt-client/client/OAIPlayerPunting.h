/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlayerPunting.h
 *
 * 
 */

#ifndef OAIPlayerPunting_H
#define OAIPlayerPunting_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlayerPunting : public OAIObject {
public:
    OAIPlayerPunting();
    OAIPlayerPunting(QString json);
    ~OAIPlayerPunting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getFantasyPoints() const;
    void setFantasyPoints(const double &fantasy_points);
    bool is_fantasy_points_Set() const;
    bool is_fantasy_points_Valid() const;

    QString getFantasyPosition() const;
    void setFantasyPosition(const QString &fantasy_position);
    bool is_fantasy_position_Set() const;
    bool is_fantasy_position_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    qint32 getPlayerGameId() const;
    void setPlayerGameId(const qint32 &player_game_id);
    bool is_player_game_id_Set() const;
    bool is_player_game_id_Valid() const;

    qint32 getPlayerId() const;
    void setPlayerId(const qint32 &player_id);
    bool is_player_id_Set() const;
    bool is_player_id_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getPositionCategory() const;
    void setPositionCategory(const QString &position_category);
    bool is_position_category_Set() const;
    bool is_position_category_Valid() const;

    double getPuntAverage() const;
    void setPuntAverage(const double &punt_average);
    bool is_punt_average_Set() const;
    bool is_punt_average_Valid() const;

    qint32 getPuntInside20() const;
    void setPuntInside20(const qint32 &punt_inside20);
    bool is_punt_inside20_Set() const;
    bool is_punt_inside20_Valid() const;

    qint32 getPuntTouchbacks() const;
    void setPuntTouchbacks(const qint32 &punt_touchbacks);
    bool is_punt_touchbacks_Set() const;
    bool is_punt_touchbacks_Valid() const;

    qint32 getPuntYards() const;
    void setPuntYards(const qint32 &punt_yards);
    bool is_punt_yards_Set() const;
    bool is_punt_yards_Valid() const;

    qint32 getPunts() const;
    void setPunts(const qint32 &punts);
    bool is_punts_Set() const;
    bool is_punts_Valid() const;

    QString getShortName() const;
    void setShortName(const QString &short_name);
    bool is_short_name_Set() const;
    bool is_short_name_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_fantasy_points;
    bool m_fantasy_points_isSet;
    bool m_fantasy_points_isValid;

    QString m_fantasy_position;
    bool m_fantasy_position_isSet;
    bool m_fantasy_position_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    qint32 m_player_game_id;
    bool m_player_game_id_isSet;
    bool m_player_game_id_isValid;

    qint32 m_player_id;
    bool m_player_id_isSet;
    bool m_player_id_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_position_category;
    bool m_position_category_isSet;
    bool m_position_category_isValid;

    double m_punt_average;
    bool m_punt_average_isSet;
    bool m_punt_average_isValid;

    qint32 m_punt_inside20;
    bool m_punt_inside20_isSet;
    bool m_punt_inside20_isValid;

    qint32 m_punt_touchbacks;
    bool m_punt_touchbacks_isSet;
    bool m_punt_touchbacks_isValid;

    qint32 m_punt_yards;
    bool m_punt_yards_isSet;
    bool m_punt_yards_isValid;

    qint32 m_punts;
    bool m_punts_isSet;
    bool m_punts_isValid;

    QString m_short_name;
    bool m_short_name_isSet;
    bool m_short_name_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlayerPunting)

#endif // OAIPlayerPunting_H
