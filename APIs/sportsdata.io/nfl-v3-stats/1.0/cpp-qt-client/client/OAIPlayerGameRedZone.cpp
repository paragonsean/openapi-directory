/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerGameRedZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerGameRedZone::OAIPlayerGameRedZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerGameRedZone::OAIPlayerGameRedZone() {
    this->initializeModel();
}

OAIPlayerGameRedZone::~OAIPlayerGameRedZone() {}

void OAIPlayerGameRedZone::initializeModel() {

    m_activated_isSet = false;
    m_activated_isValid = false;

    m_assisted_tackles_isSet = false;
    m_assisted_tackles_isValid = false;

    m_blocked_kick_return_touchdowns_isSet = false;
    m_blocked_kick_return_touchdowns_isValid = false;

    m_blocked_kick_return_yards_isSet = false;
    m_blocked_kick_return_yards_isValid = false;

    m_blocked_kicks_isSet = false;
    m_blocked_kicks_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_declared_inactive_isSet = false;
    m_declared_inactive_isValid = false;

    m_defensive_snaps_played_isSet = false;
    m_defensive_snaps_played_isValid = false;

    m_defensive_team_snaps_isSet = false;
    m_defensive_team_snaps_isValid = false;

    m_defensive_touchdowns_isSet = false;
    m_defensive_touchdowns_isValid = false;

    m_draft_kings_position_isSet = false;
    m_draft_kings_position_isValid = false;

    m_draft_kings_salary_isSet = false;
    m_draft_kings_salary_isValid = false;

    m_extra_points_attempted_isSet = false;
    m_extra_points_attempted_isValid = false;

    m_extra_points_had_blocked_isSet = false;
    m_extra_points_had_blocked_isValid = false;

    m_extra_points_made_isSet = false;
    m_extra_points_made_isValid = false;

    m_fan_duel_position_isSet = false;
    m_fan_duel_position_isValid = false;

    m_fan_duel_salary_isSet = false;
    m_fan_duel_salary_isValid = false;

    m_fantasy_data_salary_isSet = false;
    m_fantasy_data_salary_isValid = false;

    m_fantasy_draft_position_isSet = false;
    m_fantasy_draft_position_isValid = false;

    m_fantasy_draft_salary_isSet = false;
    m_fantasy_draft_salary_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_fantasy_draft_isSet = false;
    m_fantasy_points_fantasy_draft_isValid = false;

    m_fantasy_points_ppr_isSet = false;
    m_fantasy_points_ppr_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_fantasy_position_isSet = false;
    m_fantasy_position_isValid = false;

    m_field_goal_percentage_isSet = false;
    m_field_goal_percentage_isValid = false;

    m_field_goal_return_touchdowns_isSet = false;
    m_field_goal_return_touchdowns_isValid = false;

    m_field_goal_return_yards_isSet = false;
    m_field_goal_return_yards_isValid = false;

    m_field_goals_attempted_isSet = false;
    m_field_goals_attempted_isValid = false;

    m_field_goals_had_blocked_isSet = false;
    m_field_goals_had_blocked_isValid = false;

    m_field_goals_longest_made_isSet = false;
    m_field_goals_longest_made_isValid = false;

    m_field_goals_made_isSet = false;
    m_field_goals_made_isValid = false;

    m_field_goals_made0to19_isSet = false;
    m_field_goals_made0to19_isValid = false;

    m_field_goals_made20to29_isSet = false;
    m_field_goals_made20to29_isValid = false;

    m_field_goals_made30to39_isSet = false;
    m_field_goals_made30to39_isValid = false;

    m_field_goals_made40to49_isSet = false;
    m_field_goals_made40to49_isValid = false;

    m_field_goals_made50_plus_isSet = false;
    m_field_goals_made50_plus_isValid = false;

    m_fumble_return_touchdowns_isSet = false;
    m_fumble_return_touchdowns_isValid = false;

    m_fumble_return_yards_isSet = false;
    m_fumble_return_yards_isValid = false;

    m_fumbles_isSet = false;
    m_fumbles_isValid = false;

    m_fumbles_forced_isSet = false;
    m_fumbles_forced_isValid = false;

    m_fumbles_lost_isSet = false;
    m_fumbles_lost_isValid = false;

    m_fumbles_out_of_bounds_isSet = false;
    m_fumbles_out_of_bounds_isValid = false;

    m_fumbles_own_recoveries_isSet = false;
    m_fumbles_own_recoveries_isValid = false;

    m_fumbles_recovered_isSet = false;
    m_fumbles_recovered_isValid = false;

    m_game_date_isSet = false;
    m_game_date_isValid = false;

    m_game_key_isSet = false;
    m_game_key_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_opponent_id_isSet = false;
    m_global_opponent_id_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_humidity_isSet = false;
    m_humidity_isValid = false;

    m_injury_body_part_isSet = false;
    m_injury_body_part_isValid = false;

    m_injury_notes_isSet = false;
    m_injury_notes_isValid = false;

    m_injury_practice_isSet = false;
    m_injury_practice_isValid = false;

    m_injury_practice_description_isSet = false;
    m_injury_practice_description_isValid = false;

    m_injury_start_date_isSet = false;
    m_injury_start_date_isValid = false;

    m_injury_status_isSet = false;
    m_injury_status_isValid = false;

    m_interception_return_touchdowns_isSet = false;
    m_interception_return_touchdowns_isValid = false;

    m_interception_return_yards_isSet = false;
    m_interception_return_yards_isValid = false;

    m_interceptions_isSet = false;
    m_interceptions_isValid = false;

    m_is_game_over_isSet = false;
    m_is_game_over_isValid = false;

    m_kick_return_fair_catches_isSet = false;
    m_kick_return_fair_catches_isValid = false;

    m_kick_return_long_isSet = false;
    m_kick_return_long_isValid = false;

    m_kick_return_touchdowns_isSet = false;
    m_kick_return_touchdowns_isValid = false;

    m_kick_return_yards_isSet = false;
    m_kick_return_yards_isValid = false;

    m_kick_return_yards_per_attempt_isSet = false;
    m_kick_return_yards_per_attempt_isValid = false;

    m_kick_returns_isSet = false;
    m_kick_returns_isValid = false;

    m_misc_assisted_tackles_isSet = false;
    m_misc_assisted_tackles_isValid = false;

    m_misc_fumbles_forced_isSet = false;
    m_misc_fumbles_forced_isValid = false;

    m_misc_fumbles_recovered_isSet = false;
    m_misc_fumbles_recovered_isValid = false;

    m_misc_solo_tackles_isSet = false;
    m_misc_solo_tackles_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_offensive_fumble_recovery_touchdowns_isSet = false;
    m_offensive_fumble_recovery_touchdowns_isValid = false;

    m_offensive_snaps_played_isSet = false;
    m_offensive_snaps_played_isValid = false;

    m_offensive_team_snaps_isSet = false;
    m_offensive_team_snaps_isValid = false;

    m_offensive_touchdowns_isSet = false;
    m_offensive_touchdowns_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_opponent_position_rank_isSet = false;
    m_opponent_position_rank_isValid = false;

    m_opponent_rank_isSet = false;
    m_opponent_rank_isValid = false;

    m_passes_defended_isSet = false;
    m_passes_defended_isValid = false;

    m_passing_attempts_isSet = false;
    m_passing_attempts_isValid = false;

    m_passing_completion_percentage_isSet = false;
    m_passing_completion_percentage_isValid = false;

    m_passing_completions_isSet = false;
    m_passing_completions_isValid = false;

    m_passing_interceptions_isSet = false;
    m_passing_interceptions_isValid = false;

    m_passing_long_isSet = false;
    m_passing_long_isValid = false;

    m_passing_rating_isSet = false;
    m_passing_rating_isValid = false;

    m_passing_sack_yards_isSet = false;
    m_passing_sack_yards_isValid = false;

    m_passing_sacks_isSet = false;
    m_passing_sacks_isValid = false;

    m_passing_touchdowns_isSet = false;
    m_passing_touchdowns_isValid = false;

    m_passing_yards_isSet = false;
    m_passing_yards_isValid = false;

    m_passing_yards_per_attempt_isSet = false;
    m_passing_yards_per_attempt_isValid = false;

    m_passing_yards_per_completion_isSet = false;
    m_passing_yards_per_completion_isValid = false;

    m_played_isSet = false;
    m_played_isValid = false;

    m_player_game_id_isSet = false;
    m_player_game_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_playing_surface_isSet = false;
    m_playing_surface_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_punt_average_isSet = false;
    m_punt_average_isValid = false;

    m_punt_inside20_isSet = false;
    m_punt_inside20_isValid = false;

    m_punt_long_isSet = false;
    m_punt_long_isValid = false;

    m_punt_net_average_isSet = false;
    m_punt_net_average_isValid = false;

    m_punt_net_yards_isSet = false;
    m_punt_net_yards_isValid = false;

    m_punt_return_fair_catches_isSet = false;
    m_punt_return_fair_catches_isValid = false;

    m_punt_return_long_isSet = false;
    m_punt_return_long_isValid = false;

    m_punt_return_touchdowns_isSet = false;
    m_punt_return_touchdowns_isValid = false;

    m_punt_return_yards_isSet = false;
    m_punt_return_yards_isValid = false;

    m_punt_return_yards_per_attempt_isSet = false;
    m_punt_return_yards_per_attempt_isValid = false;

    m_punt_returns_isSet = false;
    m_punt_returns_isValid = false;

    m_punt_touchbacks_isSet = false;
    m_punt_touchbacks_isValid = false;

    m_punt_yards_isSet = false;
    m_punt_yards_isValid = false;

    m_punts_isSet = false;
    m_punts_isValid = false;

    m_punts_had_blocked_isSet = false;
    m_punts_had_blocked_isValid = false;

    m_quarterback_hits_isSet = false;
    m_quarterback_hits_isValid = false;

    m_receiving_long_isSet = false;
    m_receiving_long_isValid = false;

    m_receiving_targets_isSet = false;
    m_receiving_targets_isValid = false;

    m_receiving_touchdowns_isSet = false;
    m_receiving_touchdowns_isValid = false;

    m_receiving_yards_isSet = false;
    m_receiving_yards_isValid = false;

    m_receiving_yards_per_reception_isSet = false;
    m_receiving_yards_per_reception_isValid = false;

    m_receiving_yards_per_target_isSet = false;
    m_receiving_yards_per_target_isValid = false;

    m_reception_percentage_isSet = false;
    m_reception_percentage_isValid = false;

    m_receptions_isSet = false;
    m_receptions_isValid = false;

    m_rushing_attempts_isSet = false;
    m_rushing_attempts_isValid = false;

    m_rushing_long_isSet = false;
    m_rushing_long_isValid = false;

    m_rushing_touchdowns_isSet = false;
    m_rushing_touchdowns_isValid = false;

    m_rushing_yards_isSet = false;
    m_rushing_yards_isValid = false;

    m_rushing_yards_per_attempt_isSet = false;
    m_rushing_yards_per_attempt_isValid = false;

    m_sack_yards_isSet = false;
    m_sack_yards_isValid = false;

    m_sacks_isSet = false;
    m_sacks_isValid = false;

    m_safeties_isSet = false;
    m_safeties_isValid = false;

    m_safeties_allowed_isSet = false;
    m_safeties_allowed_isValid = false;

    m_score_id_isSet = false;
    m_score_id_isValid = false;

    m_scoring_details_isSet = false;
    m_scoring_details_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_snap_counts_confirmed_isSet = false;
    m_snap_counts_confirmed_isValid = false;

    m_solo_tackles_isSet = false;
    m_solo_tackles_isValid = false;

    m_special_teams_assisted_tackles_isSet = false;
    m_special_teams_assisted_tackles_isValid = false;

    m_special_teams_fumbles_forced_isSet = false;
    m_special_teams_fumbles_forced_isValid = false;

    m_special_teams_fumbles_recovered_isSet = false;
    m_special_teams_fumbles_recovered_isValid = false;

    m_special_teams_snaps_played_isSet = false;
    m_special_teams_snaps_played_isValid = false;

    m_special_teams_solo_tackles_isSet = false;
    m_special_teams_solo_tackles_isValid = false;

    m_special_teams_team_snaps_isSet = false;
    m_special_teams_team_snaps_isValid = false;

    m_special_teams_touchdowns_isSet = false;
    m_special_teams_touchdowns_isValid = false;

    m_stadium_isSet = false;
    m_stadium_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_tackles_isSet = false;
    m_tackles_isValid = false;

    m_tackles_for_loss_isSet = false;
    m_tackles_for_loss_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_touchdowns_isSet = false;
    m_touchdowns_isValid = false;

    m_two_point_conversion_passes_isSet = false;
    m_two_point_conversion_passes_isValid = false;

    m_two_point_conversion_receptions_isSet = false;
    m_two_point_conversion_receptions_isValid = false;

    m_two_point_conversion_returns_isSet = false;
    m_two_point_conversion_returns_isValid = false;

    m_two_point_conversion_runs_isSet = false;
    m_two_point_conversion_runs_isValid = false;

    m_victiv_salary_isSet = false;
    m_victiv_salary_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_wind_speed_isSet = false;
    m_wind_speed_isValid = false;

    m_yahoo_position_isSet = false;
    m_yahoo_position_isValid = false;

    m_yahoo_salary_isSet = false;
    m_yahoo_salary_isValid = false;
}

void OAIPlayerGameRedZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerGameRedZone::fromJsonObject(QJsonObject json) {

    m_activated_isValid = ::OpenAPI::fromJsonValue(m_activated, json[QString("Activated")]);
    m_activated_isSet = !json[QString("Activated")].isNull() && m_activated_isValid;

    m_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_assisted_tackles, json[QString("AssistedTackles")]);
    m_assisted_tackles_isSet = !json[QString("AssistedTackles")].isNull() && m_assisted_tackles_isValid;

    m_blocked_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_touchdowns, json[QString("BlockedKickReturnTouchdowns")]);
    m_blocked_kick_return_touchdowns_isSet = !json[QString("BlockedKickReturnTouchdowns")].isNull() && m_blocked_kick_return_touchdowns_isValid;

    m_blocked_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_blocked_kick_return_yards, json[QString("BlockedKickReturnYards")]);
    m_blocked_kick_return_yards_isSet = !json[QString("BlockedKickReturnYards")].isNull() && m_blocked_kick_return_yards_isValid;

    m_blocked_kicks_isValid = ::OpenAPI::fromJsonValue(m_blocked_kicks, json[QString("BlockedKicks")]);
    m_blocked_kicks_isSet = !json[QString("BlockedKicks")].isNull() && m_blocked_kicks_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_declared_inactive_isValid = ::OpenAPI::fromJsonValue(m_declared_inactive, json[QString("DeclaredInactive")]);
    m_declared_inactive_isSet = !json[QString("DeclaredInactive")].isNull() && m_declared_inactive_isValid;

    m_defensive_snaps_played_isValid = ::OpenAPI::fromJsonValue(m_defensive_snaps_played, json[QString("DefensiveSnapsPlayed")]);
    m_defensive_snaps_played_isSet = !json[QString("DefensiveSnapsPlayed")].isNull() && m_defensive_snaps_played_isValid;

    m_defensive_team_snaps_isValid = ::OpenAPI::fromJsonValue(m_defensive_team_snaps, json[QString("DefensiveTeamSnaps")]);
    m_defensive_team_snaps_isSet = !json[QString("DefensiveTeamSnaps")].isNull() && m_defensive_team_snaps_isValid;

    m_defensive_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_defensive_touchdowns, json[QString("DefensiveTouchdowns")]);
    m_defensive_touchdowns_isSet = !json[QString("DefensiveTouchdowns")].isNull() && m_defensive_touchdowns_isValid;

    m_draft_kings_position_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_position, json[QString("DraftKingsPosition")]);
    m_draft_kings_position_isSet = !json[QString("DraftKingsPosition")].isNull() && m_draft_kings_position_isValid;

    m_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_salary, json[QString("DraftKingsSalary")]);
    m_draft_kings_salary_isSet = !json[QString("DraftKingsSalary")].isNull() && m_draft_kings_salary_isValid;

    m_extra_points_attempted_isValid = ::OpenAPI::fromJsonValue(m_extra_points_attempted, json[QString("ExtraPointsAttempted")]);
    m_extra_points_attempted_isSet = !json[QString("ExtraPointsAttempted")].isNull() && m_extra_points_attempted_isValid;

    m_extra_points_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_extra_points_had_blocked, json[QString("ExtraPointsHadBlocked")]);
    m_extra_points_had_blocked_isSet = !json[QString("ExtraPointsHadBlocked")].isNull() && m_extra_points_had_blocked_isValid;

    m_extra_points_made_isValid = ::OpenAPI::fromJsonValue(m_extra_points_made, json[QString("ExtraPointsMade")]);
    m_extra_points_made_isSet = !json[QString("ExtraPointsMade")].isNull() && m_extra_points_made_isValid;

    m_fan_duel_position_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_position, json[QString("FanDuelPosition")]);
    m_fan_duel_position_isSet = !json[QString("FanDuelPosition")].isNull() && m_fan_duel_position_isValid;

    m_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_salary, json[QString("FanDuelSalary")]);
    m_fan_duel_salary_isSet = !json[QString("FanDuelSalary")].isNull() && m_fan_duel_salary_isValid;

    m_fantasy_data_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_data_salary, json[QString("FantasyDataSalary")]);
    m_fantasy_data_salary_isSet = !json[QString("FantasyDataSalary")].isNull() && m_fantasy_data_salary_isValid;

    m_fantasy_draft_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_position, json[QString("FantasyDraftPosition")]);
    m_fantasy_draft_position_isSet = !json[QString("FantasyDraftPosition")].isNull() && m_fantasy_draft_position_isValid;

    m_fantasy_draft_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_salary, json[QString("FantasyDraftSalary")]);
    m_fantasy_draft_salary_isSet = !json[QString("FantasyDraftSalary")].isNull() && m_fantasy_draft_salary_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_fantasy_draft_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fantasy_draft, json[QString("FantasyPointsFantasyDraft")]);
    m_fantasy_points_fantasy_draft_isSet = !json[QString("FantasyPointsFantasyDraft")].isNull() && m_fantasy_points_fantasy_draft_isValid;

    m_fantasy_points_ppr_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_ppr, json[QString("FantasyPointsPPR")]);
    m_fantasy_points_ppr_isSet = !json[QString("FantasyPointsPPR")].isNull() && m_fantasy_points_ppr_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_fantasy_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position, json[QString("FantasyPosition")]);
    m_fantasy_position_isSet = !json[QString("FantasyPosition")].isNull() && m_fantasy_position_isValid;

    m_field_goal_percentage_isValid = ::OpenAPI::fromJsonValue(m_field_goal_percentage, json[QString("FieldGoalPercentage")]);
    m_field_goal_percentage_isSet = !json[QString("FieldGoalPercentage")].isNull() && m_field_goal_percentage_isValid;

    m_field_goal_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_touchdowns, json[QString("FieldGoalReturnTouchdowns")]);
    m_field_goal_return_touchdowns_isSet = !json[QString("FieldGoalReturnTouchdowns")].isNull() && m_field_goal_return_touchdowns_isValid;

    m_field_goal_return_yards_isValid = ::OpenAPI::fromJsonValue(m_field_goal_return_yards, json[QString("FieldGoalReturnYards")]);
    m_field_goal_return_yards_isSet = !json[QString("FieldGoalReturnYards")].isNull() && m_field_goal_return_yards_isValid;

    m_field_goals_attempted_isValid = ::OpenAPI::fromJsonValue(m_field_goals_attempted, json[QString("FieldGoalsAttempted")]);
    m_field_goals_attempted_isSet = !json[QString("FieldGoalsAttempted")].isNull() && m_field_goals_attempted_isValid;

    m_field_goals_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_field_goals_had_blocked, json[QString("FieldGoalsHadBlocked")]);
    m_field_goals_had_blocked_isSet = !json[QString("FieldGoalsHadBlocked")].isNull() && m_field_goals_had_blocked_isValid;

    m_field_goals_longest_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_longest_made, json[QString("FieldGoalsLongestMade")]);
    m_field_goals_longest_made_isSet = !json[QString("FieldGoalsLongestMade")].isNull() && m_field_goals_longest_made_isValid;

    m_field_goals_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made, json[QString("FieldGoalsMade")]);
    m_field_goals_made_isSet = !json[QString("FieldGoalsMade")].isNull() && m_field_goals_made_isValid;

    m_field_goals_made0to19_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made0to19, json[QString("FieldGoalsMade0to19")]);
    m_field_goals_made0to19_isSet = !json[QString("FieldGoalsMade0to19")].isNull() && m_field_goals_made0to19_isValid;

    m_field_goals_made20to29_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made20to29, json[QString("FieldGoalsMade20to29")]);
    m_field_goals_made20to29_isSet = !json[QString("FieldGoalsMade20to29")].isNull() && m_field_goals_made20to29_isValid;

    m_field_goals_made30to39_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made30to39, json[QString("FieldGoalsMade30to39")]);
    m_field_goals_made30to39_isSet = !json[QString("FieldGoalsMade30to39")].isNull() && m_field_goals_made30to39_isValid;

    m_field_goals_made40to49_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made40to49, json[QString("FieldGoalsMade40to49")]);
    m_field_goals_made40to49_isSet = !json[QString("FieldGoalsMade40to49")].isNull() && m_field_goals_made40to49_isValid;

    m_field_goals_made50_plus_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made50_plus, json[QString("FieldGoalsMade50Plus")]);
    m_field_goals_made50_plus_isSet = !json[QString("FieldGoalsMade50Plus")].isNull() && m_field_goals_made50_plus_isValid;

    m_fumble_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_touchdowns, json[QString("FumbleReturnTouchdowns")]);
    m_fumble_return_touchdowns_isSet = !json[QString("FumbleReturnTouchdowns")].isNull() && m_fumble_return_touchdowns_isValid;

    m_fumble_return_yards_isValid = ::OpenAPI::fromJsonValue(m_fumble_return_yards, json[QString("FumbleReturnYards")]);
    m_fumble_return_yards_isSet = !json[QString("FumbleReturnYards")].isNull() && m_fumble_return_yards_isValid;

    m_fumbles_isValid = ::OpenAPI::fromJsonValue(m_fumbles, json[QString("Fumbles")]);
    m_fumbles_isSet = !json[QString("Fumbles")].isNull() && m_fumbles_isValid;

    m_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_fumbles_forced, json[QString("FumblesForced")]);
    m_fumbles_forced_isSet = !json[QString("FumblesForced")].isNull() && m_fumbles_forced_isValid;

    m_fumbles_lost_isValid = ::OpenAPI::fromJsonValue(m_fumbles_lost, json[QString("FumblesLost")]);
    m_fumbles_lost_isSet = !json[QString("FumblesLost")].isNull() && m_fumbles_lost_isValid;

    m_fumbles_out_of_bounds_isValid = ::OpenAPI::fromJsonValue(m_fumbles_out_of_bounds, json[QString("FumblesOutOfBounds")]);
    m_fumbles_out_of_bounds_isSet = !json[QString("FumblesOutOfBounds")].isNull() && m_fumbles_out_of_bounds_isValid;

    m_fumbles_own_recoveries_isValid = ::OpenAPI::fromJsonValue(m_fumbles_own_recoveries, json[QString("FumblesOwnRecoveries")]);
    m_fumbles_own_recoveries_isSet = !json[QString("FumblesOwnRecoveries")].isNull() && m_fumbles_own_recoveries_isValid;

    m_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_fumbles_recovered, json[QString("FumblesRecovered")]);
    m_fumbles_recovered_isSet = !json[QString("FumblesRecovered")].isNull() && m_fumbles_recovered_isValid;

    m_game_date_isValid = ::OpenAPI::fromJsonValue(m_game_date, json[QString("GameDate")]);
    m_game_date_isSet = !json[QString("GameDate")].isNull() && m_game_date_isValid;

    m_game_key_isValid = ::OpenAPI::fromJsonValue(m_game_key, json[QString("GameKey")]);
    m_game_key_isSet = !json[QString("GameKey")].isNull() && m_game_key_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_global_opponent_id, json[QString("GlobalOpponentID")]);
    m_global_opponent_id_isSet = !json[QString("GlobalOpponentID")].isNull() && m_global_opponent_id_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_humidity_isValid = ::OpenAPI::fromJsonValue(m_humidity, json[QString("Humidity")]);
    m_humidity_isSet = !json[QString("Humidity")].isNull() && m_humidity_isValid;

    m_injury_body_part_isValid = ::OpenAPI::fromJsonValue(m_injury_body_part, json[QString("InjuryBodyPart")]);
    m_injury_body_part_isSet = !json[QString("InjuryBodyPart")].isNull() && m_injury_body_part_isValid;

    m_injury_notes_isValid = ::OpenAPI::fromJsonValue(m_injury_notes, json[QString("InjuryNotes")]);
    m_injury_notes_isSet = !json[QString("InjuryNotes")].isNull() && m_injury_notes_isValid;

    m_injury_practice_isValid = ::OpenAPI::fromJsonValue(m_injury_practice, json[QString("InjuryPractice")]);
    m_injury_practice_isSet = !json[QString("InjuryPractice")].isNull() && m_injury_practice_isValid;

    m_injury_practice_description_isValid = ::OpenAPI::fromJsonValue(m_injury_practice_description, json[QString("InjuryPracticeDescription")]);
    m_injury_practice_description_isSet = !json[QString("InjuryPracticeDescription")].isNull() && m_injury_practice_description_isValid;

    m_injury_start_date_isValid = ::OpenAPI::fromJsonValue(m_injury_start_date, json[QString("InjuryStartDate")]);
    m_injury_start_date_isSet = !json[QString("InjuryStartDate")].isNull() && m_injury_start_date_isValid;

    m_injury_status_isValid = ::OpenAPI::fromJsonValue(m_injury_status, json[QString("InjuryStatus")]);
    m_injury_status_isSet = !json[QString("InjuryStatus")].isNull() && m_injury_status_isValid;

    m_interception_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_interception_return_touchdowns, json[QString("InterceptionReturnTouchdowns")]);
    m_interception_return_touchdowns_isSet = !json[QString("InterceptionReturnTouchdowns")].isNull() && m_interception_return_touchdowns_isValid;

    m_interception_return_yards_isValid = ::OpenAPI::fromJsonValue(m_interception_return_yards, json[QString("InterceptionReturnYards")]);
    m_interception_return_yards_isSet = !json[QString("InterceptionReturnYards")].isNull() && m_interception_return_yards_isValid;

    m_interceptions_isValid = ::OpenAPI::fromJsonValue(m_interceptions, json[QString("Interceptions")]);
    m_interceptions_isSet = !json[QString("Interceptions")].isNull() && m_interceptions_isValid;

    m_is_game_over_isValid = ::OpenAPI::fromJsonValue(m_is_game_over, json[QString("IsGameOver")]);
    m_is_game_over_isSet = !json[QString("IsGameOver")].isNull() && m_is_game_over_isValid;

    m_kick_return_fair_catches_isValid = ::OpenAPI::fromJsonValue(m_kick_return_fair_catches, json[QString("KickReturnFairCatches")]);
    m_kick_return_fair_catches_isSet = !json[QString("KickReturnFairCatches")].isNull() && m_kick_return_fair_catches_isValid;

    m_kick_return_long_isValid = ::OpenAPI::fromJsonValue(m_kick_return_long, json[QString("KickReturnLong")]);
    m_kick_return_long_isSet = !json[QString("KickReturnLong")].isNull() && m_kick_return_long_isValid;

    m_kick_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_kick_return_touchdowns, json[QString("KickReturnTouchdowns")]);
    m_kick_return_touchdowns_isSet = !json[QString("KickReturnTouchdowns")].isNull() && m_kick_return_touchdowns_isValid;

    m_kick_return_yards_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards, json[QString("KickReturnYards")]);
    m_kick_return_yards_isSet = !json[QString("KickReturnYards")].isNull() && m_kick_return_yards_isValid;

    m_kick_return_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_kick_return_yards_per_attempt, json[QString("KickReturnYardsPerAttempt")]);
    m_kick_return_yards_per_attempt_isSet = !json[QString("KickReturnYardsPerAttempt")].isNull() && m_kick_return_yards_per_attempt_isValid;

    m_kick_returns_isValid = ::OpenAPI::fromJsonValue(m_kick_returns, json[QString("KickReturns")]);
    m_kick_returns_isSet = !json[QString("KickReturns")].isNull() && m_kick_returns_isValid;

    m_misc_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_misc_assisted_tackles, json[QString("MiscAssistedTackles")]);
    m_misc_assisted_tackles_isSet = !json[QString("MiscAssistedTackles")].isNull() && m_misc_assisted_tackles_isValid;

    m_misc_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_misc_fumbles_forced, json[QString("MiscFumblesForced")]);
    m_misc_fumbles_forced_isSet = !json[QString("MiscFumblesForced")].isNull() && m_misc_fumbles_forced_isValid;

    m_misc_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_misc_fumbles_recovered, json[QString("MiscFumblesRecovered")]);
    m_misc_fumbles_recovered_isSet = !json[QString("MiscFumblesRecovered")].isNull() && m_misc_fumbles_recovered_isValid;

    m_misc_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_misc_solo_tackles, json[QString("MiscSoloTackles")]);
    m_misc_solo_tackles_isSet = !json[QString("MiscSoloTackles")].isNull() && m_misc_solo_tackles_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_offensive_fumble_recovery_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_offensive_fumble_recovery_touchdowns, json[QString("OffensiveFumbleRecoveryTouchdowns")]);
    m_offensive_fumble_recovery_touchdowns_isSet = !json[QString("OffensiveFumbleRecoveryTouchdowns")].isNull() && m_offensive_fumble_recovery_touchdowns_isValid;

    m_offensive_snaps_played_isValid = ::OpenAPI::fromJsonValue(m_offensive_snaps_played, json[QString("OffensiveSnapsPlayed")]);
    m_offensive_snaps_played_isSet = !json[QString("OffensiveSnapsPlayed")].isNull() && m_offensive_snaps_played_isValid;

    m_offensive_team_snaps_isValid = ::OpenAPI::fromJsonValue(m_offensive_team_snaps, json[QString("OffensiveTeamSnaps")]);
    m_offensive_team_snaps_isSet = !json[QString("OffensiveTeamSnaps")].isNull() && m_offensive_team_snaps_isValid;

    m_offensive_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_offensive_touchdowns, json[QString("OffensiveTouchdowns")]);
    m_offensive_touchdowns_isSet = !json[QString("OffensiveTouchdowns")].isNull() && m_offensive_touchdowns_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentID")]);
    m_opponent_id_isSet = !json[QString("OpponentID")].isNull() && m_opponent_id_isValid;

    m_opponent_position_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_position_rank, json[QString("OpponentPositionRank")]);
    m_opponent_position_rank_isSet = !json[QString("OpponentPositionRank")].isNull() && m_opponent_position_rank_isValid;

    m_opponent_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_rank, json[QString("OpponentRank")]);
    m_opponent_rank_isSet = !json[QString("OpponentRank")].isNull() && m_opponent_rank_isValid;

    m_passes_defended_isValid = ::OpenAPI::fromJsonValue(m_passes_defended, json[QString("PassesDefended")]);
    m_passes_defended_isSet = !json[QString("PassesDefended")].isNull() && m_passes_defended_isValid;

    m_passing_attempts_isValid = ::OpenAPI::fromJsonValue(m_passing_attempts, json[QString("PassingAttempts")]);
    m_passing_attempts_isSet = !json[QString("PassingAttempts")].isNull() && m_passing_attempts_isValid;

    m_passing_completion_percentage_isValid = ::OpenAPI::fromJsonValue(m_passing_completion_percentage, json[QString("PassingCompletionPercentage")]);
    m_passing_completion_percentage_isSet = !json[QString("PassingCompletionPercentage")].isNull() && m_passing_completion_percentage_isValid;

    m_passing_completions_isValid = ::OpenAPI::fromJsonValue(m_passing_completions, json[QString("PassingCompletions")]);
    m_passing_completions_isSet = !json[QString("PassingCompletions")].isNull() && m_passing_completions_isValid;

    m_passing_interceptions_isValid = ::OpenAPI::fromJsonValue(m_passing_interceptions, json[QString("PassingInterceptions")]);
    m_passing_interceptions_isSet = !json[QString("PassingInterceptions")].isNull() && m_passing_interceptions_isValid;

    m_passing_long_isValid = ::OpenAPI::fromJsonValue(m_passing_long, json[QString("PassingLong")]);
    m_passing_long_isSet = !json[QString("PassingLong")].isNull() && m_passing_long_isValid;

    m_passing_rating_isValid = ::OpenAPI::fromJsonValue(m_passing_rating, json[QString("PassingRating")]);
    m_passing_rating_isSet = !json[QString("PassingRating")].isNull() && m_passing_rating_isValid;

    m_passing_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_passing_sack_yards, json[QString("PassingSackYards")]);
    m_passing_sack_yards_isSet = !json[QString("PassingSackYards")].isNull() && m_passing_sack_yards_isValid;

    m_passing_sacks_isValid = ::OpenAPI::fromJsonValue(m_passing_sacks, json[QString("PassingSacks")]);
    m_passing_sacks_isSet = !json[QString("PassingSacks")].isNull() && m_passing_sacks_isValid;

    m_passing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_passing_touchdowns, json[QString("PassingTouchdowns")]);
    m_passing_touchdowns_isSet = !json[QString("PassingTouchdowns")].isNull() && m_passing_touchdowns_isValid;

    m_passing_yards_isValid = ::OpenAPI::fromJsonValue(m_passing_yards, json[QString("PassingYards")]);
    m_passing_yards_isSet = !json[QString("PassingYards")].isNull() && m_passing_yards_isValid;

    m_passing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_passing_yards_per_attempt, json[QString("PassingYardsPerAttempt")]);
    m_passing_yards_per_attempt_isSet = !json[QString("PassingYardsPerAttempt")].isNull() && m_passing_yards_per_attempt_isValid;

    m_passing_yards_per_completion_isValid = ::OpenAPI::fromJsonValue(m_passing_yards_per_completion, json[QString("PassingYardsPerCompletion")]);
    m_passing_yards_per_completion_isSet = !json[QString("PassingYardsPerCompletion")].isNull() && m_passing_yards_per_completion_isValid;

    m_played_isValid = ::OpenAPI::fromJsonValue(m_played, json[QString("Played")]);
    m_played_isSet = !json[QString("Played")].isNull() && m_played_isValid;

    m_player_game_id_isValid = ::OpenAPI::fromJsonValue(m_player_game_id, json[QString("PlayerGameID")]);
    m_player_game_id_isSet = !json[QString("PlayerGameID")].isNull() && m_player_game_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_playing_surface_isValid = ::OpenAPI::fromJsonValue(m_playing_surface, json[QString("PlayingSurface")]);
    m_playing_surface_isSet = !json[QString("PlayingSurface")].isNull() && m_playing_surface_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_punt_average_isValid = ::OpenAPI::fromJsonValue(m_punt_average, json[QString("PuntAverage")]);
    m_punt_average_isSet = !json[QString("PuntAverage")].isNull() && m_punt_average_isValid;

    m_punt_inside20_isValid = ::OpenAPI::fromJsonValue(m_punt_inside20, json[QString("PuntInside20")]);
    m_punt_inside20_isSet = !json[QString("PuntInside20")].isNull() && m_punt_inside20_isValid;

    m_punt_long_isValid = ::OpenAPI::fromJsonValue(m_punt_long, json[QString("PuntLong")]);
    m_punt_long_isSet = !json[QString("PuntLong")].isNull() && m_punt_long_isValid;

    m_punt_net_average_isValid = ::OpenAPI::fromJsonValue(m_punt_net_average, json[QString("PuntNetAverage")]);
    m_punt_net_average_isSet = !json[QString("PuntNetAverage")].isNull() && m_punt_net_average_isValid;

    m_punt_net_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_net_yards, json[QString("PuntNetYards")]);
    m_punt_net_yards_isSet = !json[QString("PuntNetYards")].isNull() && m_punt_net_yards_isValid;

    m_punt_return_fair_catches_isValid = ::OpenAPI::fromJsonValue(m_punt_return_fair_catches, json[QString("PuntReturnFairCatches")]);
    m_punt_return_fair_catches_isSet = !json[QString("PuntReturnFairCatches")].isNull() && m_punt_return_fair_catches_isValid;

    m_punt_return_long_isValid = ::OpenAPI::fromJsonValue(m_punt_return_long, json[QString("PuntReturnLong")]);
    m_punt_return_long_isSet = !json[QString("PuntReturnLong")].isNull() && m_punt_return_long_isValid;

    m_punt_return_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_punt_return_touchdowns, json[QString("PuntReturnTouchdowns")]);
    m_punt_return_touchdowns_isSet = !json[QString("PuntReturnTouchdowns")].isNull() && m_punt_return_touchdowns_isValid;

    m_punt_return_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards, json[QString("PuntReturnYards")]);
    m_punt_return_yards_isSet = !json[QString("PuntReturnYards")].isNull() && m_punt_return_yards_isValid;

    m_punt_return_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_punt_return_yards_per_attempt, json[QString("PuntReturnYardsPerAttempt")]);
    m_punt_return_yards_per_attempt_isSet = !json[QString("PuntReturnYardsPerAttempt")].isNull() && m_punt_return_yards_per_attempt_isValid;

    m_punt_returns_isValid = ::OpenAPI::fromJsonValue(m_punt_returns, json[QString("PuntReturns")]);
    m_punt_returns_isSet = !json[QString("PuntReturns")].isNull() && m_punt_returns_isValid;

    m_punt_touchbacks_isValid = ::OpenAPI::fromJsonValue(m_punt_touchbacks, json[QString("PuntTouchbacks")]);
    m_punt_touchbacks_isSet = !json[QString("PuntTouchbacks")].isNull() && m_punt_touchbacks_isValid;

    m_punt_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_yards, json[QString("PuntYards")]);
    m_punt_yards_isSet = !json[QString("PuntYards")].isNull() && m_punt_yards_isValid;

    m_punts_isValid = ::OpenAPI::fromJsonValue(m_punts, json[QString("Punts")]);
    m_punts_isSet = !json[QString("Punts")].isNull() && m_punts_isValid;

    m_punts_had_blocked_isValid = ::OpenAPI::fromJsonValue(m_punts_had_blocked, json[QString("PuntsHadBlocked")]);
    m_punts_had_blocked_isSet = !json[QString("PuntsHadBlocked")].isNull() && m_punts_had_blocked_isValid;

    m_quarterback_hits_isValid = ::OpenAPI::fromJsonValue(m_quarterback_hits, json[QString("QuarterbackHits")]);
    m_quarterback_hits_isSet = !json[QString("QuarterbackHits")].isNull() && m_quarterback_hits_isValid;

    m_receiving_long_isValid = ::OpenAPI::fromJsonValue(m_receiving_long, json[QString("ReceivingLong")]);
    m_receiving_long_isSet = !json[QString("ReceivingLong")].isNull() && m_receiving_long_isValid;

    m_receiving_targets_isValid = ::OpenAPI::fromJsonValue(m_receiving_targets, json[QString("ReceivingTargets")]);
    m_receiving_targets_isSet = !json[QString("ReceivingTargets")].isNull() && m_receiving_targets_isValid;

    m_receiving_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_receiving_touchdowns, json[QString("ReceivingTouchdowns")]);
    m_receiving_touchdowns_isSet = !json[QString("ReceivingTouchdowns")].isNull() && m_receiving_touchdowns_isValid;

    m_receiving_yards_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards, json[QString("ReceivingYards")]);
    m_receiving_yards_isSet = !json[QString("ReceivingYards")].isNull() && m_receiving_yards_isValid;

    m_receiving_yards_per_reception_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards_per_reception, json[QString("ReceivingYardsPerReception")]);
    m_receiving_yards_per_reception_isSet = !json[QString("ReceivingYardsPerReception")].isNull() && m_receiving_yards_per_reception_isValid;

    m_receiving_yards_per_target_isValid = ::OpenAPI::fromJsonValue(m_receiving_yards_per_target, json[QString("ReceivingYardsPerTarget")]);
    m_receiving_yards_per_target_isSet = !json[QString("ReceivingYardsPerTarget")].isNull() && m_receiving_yards_per_target_isValid;

    m_reception_percentage_isValid = ::OpenAPI::fromJsonValue(m_reception_percentage, json[QString("ReceptionPercentage")]);
    m_reception_percentage_isSet = !json[QString("ReceptionPercentage")].isNull() && m_reception_percentage_isValid;

    m_receptions_isValid = ::OpenAPI::fromJsonValue(m_receptions, json[QString("Receptions")]);
    m_receptions_isSet = !json[QString("Receptions")].isNull() && m_receptions_isValid;

    m_rushing_attempts_isValid = ::OpenAPI::fromJsonValue(m_rushing_attempts, json[QString("RushingAttempts")]);
    m_rushing_attempts_isSet = !json[QString("RushingAttempts")].isNull() && m_rushing_attempts_isValid;

    m_rushing_long_isValid = ::OpenAPI::fromJsonValue(m_rushing_long, json[QString("RushingLong")]);
    m_rushing_long_isSet = !json[QString("RushingLong")].isNull() && m_rushing_long_isValid;

    m_rushing_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_rushing_touchdowns, json[QString("RushingTouchdowns")]);
    m_rushing_touchdowns_isSet = !json[QString("RushingTouchdowns")].isNull() && m_rushing_touchdowns_isValid;

    m_rushing_yards_isValid = ::OpenAPI::fromJsonValue(m_rushing_yards, json[QString("RushingYards")]);
    m_rushing_yards_isSet = !json[QString("RushingYards")].isNull() && m_rushing_yards_isValid;

    m_rushing_yards_per_attempt_isValid = ::OpenAPI::fromJsonValue(m_rushing_yards_per_attempt, json[QString("RushingYardsPerAttempt")]);
    m_rushing_yards_per_attempt_isSet = !json[QString("RushingYardsPerAttempt")].isNull() && m_rushing_yards_per_attempt_isValid;

    m_sack_yards_isValid = ::OpenAPI::fromJsonValue(m_sack_yards, json[QString("SackYards")]);
    m_sack_yards_isSet = !json[QString("SackYards")].isNull() && m_sack_yards_isValid;

    m_sacks_isValid = ::OpenAPI::fromJsonValue(m_sacks, json[QString("Sacks")]);
    m_sacks_isSet = !json[QString("Sacks")].isNull() && m_sacks_isValid;

    m_safeties_isValid = ::OpenAPI::fromJsonValue(m_safeties, json[QString("Safeties")]);
    m_safeties_isSet = !json[QString("Safeties")].isNull() && m_safeties_isValid;

    m_safeties_allowed_isValid = ::OpenAPI::fromJsonValue(m_safeties_allowed, json[QString("SafetiesAllowed")]);
    m_safeties_allowed_isSet = !json[QString("SafetiesAllowed")].isNull() && m_safeties_allowed_isValid;

    m_score_id_isValid = ::OpenAPI::fromJsonValue(m_score_id, json[QString("ScoreID")]);
    m_score_id_isSet = !json[QString("ScoreID")].isNull() && m_score_id_isValid;

    m_scoring_details_isValid = ::OpenAPI::fromJsonValue(m_scoring_details, json[QString("ScoringDetails")]);
    m_scoring_details_isSet = !json[QString("ScoringDetails")].isNull() && m_scoring_details_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_snap_counts_confirmed_isValid = ::OpenAPI::fromJsonValue(m_snap_counts_confirmed, json[QString("SnapCountsConfirmed")]);
    m_snap_counts_confirmed_isSet = !json[QString("SnapCountsConfirmed")].isNull() && m_snap_counts_confirmed_isValid;

    m_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_solo_tackles, json[QString("SoloTackles")]);
    m_solo_tackles_isSet = !json[QString("SoloTackles")].isNull() && m_solo_tackles_isValid;

    m_special_teams_assisted_tackles_isValid = ::OpenAPI::fromJsonValue(m_special_teams_assisted_tackles, json[QString("SpecialTeamsAssistedTackles")]);
    m_special_teams_assisted_tackles_isSet = !json[QString("SpecialTeamsAssistedTackles")].isNull() && m_special_teams_assisted_tackles_isValid;

    m_special_teams_fumbles_forced_isValid = ::OpenAPI::fromJsonValue(m_special_teams_fumbles_forced, json[QString("SpecialTeamsFumblesForced")]);
    m_special_teams_fumbles_forced_isSet = !json[QString("SpecialTeamsFumblesForced")].isNull() && m_special_teams_fumbles_forced_isValid;

    m_special_teams_fumbles_recovered_isValid = ::OpenAPI::fromJsonValue(m_special_teams_fumbles_recovered, json[QString("SpecialTeamsFumblesRecovered")]);
    m_special_teams_fumbles_recovered_isSet = !json[QString("SpecialTeamsFumblesRecovered")].isNull() && m_special_teams_fumbles_recovered_isValid;

    m_special_teams_snaps_played_isValid = ::OpenAPI::fromJsonValue(m_special_teams_snaps_played, json[QString("SpecialTeamsSnapsPlayed")]);
    m_special_teams_snaps_played_isSet = !json[QString("SpecialTeamsSnapsPlayed")].isNull() && m_special_teams_snaps_played_isValid;

    m_special_teams_solo_tackles_isValid = ::OpenAPI::fromJsonValue(m_special_teams_solo_tackles, json[QString("SpecialTeamsSoloTackles")]);
    m_special_teams_solo_tackles_isSet = !json[QString("SpecialTeamsSoloTackles")].isNull() && m_special_teams_solo_tackles_isValid;

    m_special_teams_team_snaps_isValid = ::OpenAPI::fromJsonValue(m_special_teams_team_snaps, json[QString("SpecialTeamsTeamSnaps")]);
    m_special_teams_team_snaps_isSet = !json[QString("SpecialTeamsTeamSnaps")].isNull() && m_special_teams_team_snaps_isValid;

    m_special_teams_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_special_teams_touchdowns, json[QString("SpecialTeamsTouchdowns")]);
    m_special_teams_touchdowns_isSet = !json[QString("SpecialTeamsTouchdowns")].isNull() && m_special_teams_touchdowns_isValid;

    m_stadium_isValid = ::OpenAPI::fromJsonValue(m_stadium, json[QString("Stadium")]);
    m_stadium_isSet = !json[QString("Stadium")].isNull() && m_stadium_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("Started")]);
    m_started_isSet = !json[QString("Started")].isNull() && m_started_isValid;

    m_tackles_isValid = ::OpenAPI::fromJsonValue(m_tackles, json[QString("Tackles")]);
    m_tackles_isSet = !json[QString("Tackles")].isNull() && m_tackles_isValid;

    m_tackles_for_loss_isValid = ::OpenAPI::fromJsonValue(m_tackles_for_loss, json[QString("TacklesForLoss")]);
    m_tackles_for_loss_isSet = !json[QString("TacklesForLoss")].isNull() && m_tackles_for_loss_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("Temperature")]);
    m_temperature_isSet = !json[QString("Temperature")].isNull() && m_temperature_isValid;

    m_touchdowns_isValid = ::OpenAPI::fromJsonValue(m_touchdowns, json[QString("Touchdowns")]);
    m_touchdowns_isSet = !json[QString("Touchdowns")].isNull() && m_touchdowns_isValid;

    m_two_point_conversion_passes_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_passes, json[QString("TwoPointConversionPasses")]);
    m_two_point_conversion_passes_isSet = !json[QString("TwoPointConversionPasses")].isNull() && m_two_point_conversion_passes_isValid;

    m_two_point_conversion_receptions_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_receptions, json[QString("TwoPointConversionReceptions")]);
    m_two_point_conversion_receptions_isSet = !json[QString("TwoPointConversionReceptions")].isNull() && m_two_point_conversion_receptions_isValid;

    m_two_point_conversion_returns_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_returns, json[QString("TwoPointConversionReturns")]);
    m_two_point_conversion_returns_isSet = !json[QString("TwoPointConversionReturns")].isNull() && m_two_point_conversion_returns_isValid;

    m_two_point_conversion_runs_isValid = ::OpenAPI::fromJsonValue(m_two_point_conversion_runs, json[QString("TwoPointConversionRuns")]);
    m_two_point_conversion_runs_isSet = !json[QString("TwoPointConversionRuns")].isNull() && m_two_point_conversion_runs_isValid;

    m_victiv_salary_isValid = ::OpenAPI::fromJsonValue(m_victiv_salary, json[QString("VictivSalary")]);
    m_victiv_salary_isSet = !json[QString("VictivSalary")].isNull() && m_victiv_salary_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;

    m_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_wind_speed, json[QString("WindSpeed")]);
    m_wind_speed_isSet = !json[QString("WindSpeed")].isNull() && m_wind_speed_isValid;

    m_yahoo_position_isValid = ::OpenAPI::fromJsonValue(m_yahoo_position, json[QString("YahooPosition")]);
    m_yahoo_position_isSet = !json[QString("YahooPosition")].isNull() && m_yahoo_position_isValid;

    m_yahoo_salary_isValid = ::OpenAPI::fromJsonValue(m_yahoo_salary, json[QString("YahooSalary")]);
    m_yahoo_salary_isSet = !json[QString("YahooSalary")].isNull() && m_yahoo_salary_isValid;
}

QString OAIPlayerGameRedZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerGameRedZone::asJsonObject() const {
    QJsonObject obj;
    if (m_activated_isSet) {
        obj.insert(QString("Activated"), ::OpenAPI::toJsonValue(m_activated));
    }
    if (m_assisted_tackles_isSet) {
        obj.insert(QString("AssistedTackles"), ::OpenAPI::toJsonValue(m_assisted_tackles));
    }
    if (m_blocked_kick_return_touchdowns_isSet) {
        obj.insert(QString("BlockedKickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_blocked_kick_return_touchdowns));
    }
    if (m_blocked_kick_return_yards_isSet) {
        obj.insert(QString("BlockedKickReturnYards"), ::OpenAPI::toJsonValue(m_blocked_kick_return_yards));
    }
    if (m_blocked_kicks_isSet) {
        obj.insert(QString("BlockedKicks"), ::OpenAPI::toJsonValue(m_blocked_kicks));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_declared_inactive_isSet) {
        obj.insert(QString("DeclaredInactive"), ::OpenAPI::toJsonValue(m_declared_inactive));
    }
    if (m_defensive_snaps_played_isSet) {
        obj.insert(QString("DefensiveSnapsPlayed"), ::OpenAPI::toJsonValue(m_defensive_snaps_played));
    }
    if (m_defensive_team_snaps_isSet) {
        obj.insert(QString("DefensiveTeamSnaps"), ::OpenAPI::toJsonValue(m_defensive_team_snaps));
    }
    if (m_defensive_touchdowns_isSet) {
        obj.insert(QString("DefensiveTouchdowns"), ::OpenAPI::toJsonValue(m_defensive_touchdowns));
    }
    if (m_draft_kings_position_isSet) {
        obj.insert(QString("DraftKingsPosition"), ::OpenAPI::toJsonValue(m_draft_kings_position));
    }
    if (m_draft_kings_salary_isSet) {
        obj.insert(QString("DraftKingsSalary"), ::OpenAPI::toJsonValue(m_draft_kings_salary));
    }
    if (m_extra_points_attempted_isSet) {
        obj.insert(QString("ExtraPointsAttempted"), ::OpenAPI::toJsonValue(m_extra_points_attempted));
    }
    if (m_extra_points_had_blocked_isSet) {
        obj.insert(QString("ExtraPointsHadBlocked"), ::OpenAPI::toJsonValue(m_extra_points_had_blocked));
    }
    if (m_extra_points_made_isSet) {
        obj.insert(QString("ExtraPointsMade"), ::OpenAPI::toJsonValue(m_extra_points_made));
    }
    if (m_fan_duel_position_isSet) {
        obj.insert(QString("FanDuelPosition"), ::OpenAPI::toJsonValue(m_fan_duel_position));
    }
    if (m_fan_duel_salary_isSet) {
        obj.insert(QString("FanDuelSalary"), ::OpenAPI::toJsonValue(m_fan_duel_salary));
    }
    if (m_fantasy_data_salary_isSet) {
        obj.insert(QString("FantasyDataSalary"), ::OpenAPI::toJsonValue(m_fantasy_data_salary));
    }
    if (m_fantasy_draft_position_isSet) {
        obj.insert(QString("FantasyDraftPosition"), ::OpenAPI::toJsonValue(m_fantasy_draft_position));
    }
    if (m_fantasy_draft_salary_isSet) {
        obj.insert(QString("FantasyDraftSalary"), ::OpenAPI::toJsonValue(m_fantasy_draft_salary));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_fantasy_draft_isSet) {
        obj.insert(QString("FantasyPointsFantasyDraft"), ::OpenAPI::toJsonValue(m_fantasy_points_fantasy_draft));
    }
    if (m_fantasy_points_ppr_isSet) {
        obj.insert(QString("FantasyPointsPPR"), ::OpenAPI::toJsonValue(m_fantasy_points_ppr));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_fantasy_position_isSet) {
        obj.insert(QString("FantasyPosition"), ::OpenAPI::toJsonValue(m_fantasy_position));
    }
    if (m_field_goal_percentage_isSet) {
        obj.insert(QString("FieldGoalPercentage"), ::OpenAPI::toJsonValue(m_field_goal_percentage));
    }
    if (m_field_goal_return_touchdowns_isSet) {
        obj.insert(QString("FieldGoalReturnTouchdowns"), ::OpenAPI::toJsonValue(m_field_goal_return_touchdowns));
    }
    if (m_field_goal_return_yards_isSet) {
        obj.insert(QString("FieldGoalReturnYards"), ::OpenAPI::toJsonValue(m_field_goal_return_yards));
    }
    if (m_field_goals_attempted_isSet) {
        obj.insert(QString("FieldGoalsAttempted"), ::OpenAPI::toJsonValue(m_field_goals_attempted));
    }
    if (m_field_goals_had_blocked_isSet) {
        obj.insert(QString("FieldGoalsHadBlocked"), ::OpenAPI::toJsonValue(m_field_goals_had_blocked));
    }
    if (m_field_goals_longest_made_isSet) {
        obj.insert(QString("FieldGoalsLongestMade"), ::OpenAPI::toJsonValue(m_field_goals_longest_made));
    }
    if (m_field_goals_made_isSet) {
        obj.insert(QString("FieldGoalsMade"), ::OpenAPI::toJsonValue(m_field_goals_made));
    }
    if (m_field_goals_made0to19_isSet) {
        obj.insert(QString("FieldGoalsMade0to19"), ::OpenAPI::toJsonValue(m_field_goals_made0to19));
    }
    if (m_field_goals_made20to29_isSet) {
        obj.insert(QString("FieldGoalsMade20to29"), ::OpenAPI::toJsonValue(m_field_goals_made20to29));
    }
    if (m_field_goals_made30to39_isSet) {
        obj.insert(QString("FieldGoalsMade30to39"), ::OpenAPI::toJsonValue(m_field_goals_made30to39));
    }
    if (m_field_goals_made40to49_isSet) {
        obj.insert(QString("FieldGoalsMade40to49"), ::OpenAPI::toJsonValue(m_field_goals_made40to49));
    }
    if (m_field_goals_made50_plus_isSet) {
        obj.insert(QString("FieldGoalsMade50Plus"), ::OpenAPI::toJsonValue(m_field_goals_made50_plus));
    }
    if (m_fumble_return_touchdowns_isSet) {
        obj.insert(QString("FumbleReturnTouchdowns"), ::OpenAPI::toJsonValue(m_fumble_return_touchdowns));
    }
    if (m_fumble_return_yards_isSet) {
        obj.insert(QString("FumbleReturnYards"), ::OpenAPI::toJsonValue(m_fumble_return_yards));
    }
    if (m_fumbles_isSet) {
        obj.insert(QString("Fumbles"), ::OpenAPI::toJsonValue(m_fumbles));
    }
    if (m_fumbles_forced_isSet) {
        obj.insert(QString("FumblesForced"), ::OpenAPI::toJsonValue(m_fumbles_forced));
    }
    if (m_fumbles_lost_isSet) {
        obj.insert(QString("FumblesLost"), ::OpenAPI::toJsonValue(m_fumbles_lost));
    }
    if (m_fumbles_out_of_bounds_isSet) {
        obj.insert(QString("FumblesOutOfBounds"), ::OpenAPI::toJsonValue(m_fumbles_out_of_bounds));
    }
    if (m_fumbles_own_recoveries_isSet) {
        obj.insert(QString("FumblesOwnRecoveries"), ::OpenAPI::toJsonValue(m_fumbles_own_recoveries));
    }
    if (m_fumbles_recovered_isSet) {
        obj.insert(QString("FumblesRecovered"), ::OpenAPI::toJsonValue(m_fumbles_recovered));
    }
    if (m_game_date_isSet) {
        obj.insert(QString("GameDate"), ::OpenAPI::toJsonValue(m_game_date));
    }
    if (m_game_key_isSet) {
        obj.insert(QString("GameKey"), ::OpenAPI::toJsonValue(m_game_key));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_opponent_id_isSet) {
        obj.insert(QString("GlobalOpponentID"), ::OpenAPI::toJsonValue(m_global_opponent_id));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_humidity_isSet) {
        obj.insert(QString("Humidity"), ::OpenAPI::toJsonValue(m_humidity));
    }
    if (m_injury_body_part_isSet) {
        obj.insert(QString("InjuryBodyPart"), ::OpenAPI::toJsonValue(m_injury_body_part));
    }
    if (m_injury_notes_isSet) {
        obj.insert(QString("InjuryNotes"), ::OpenAPI::toJsonValue(m_injury_notes));
    }
    if (m_injury_practice_isSet) {
        obj.insert(QString("InjuryPractice"), ::OpenAPI::toJsonValue(m_injury_practice));
    }
    if (m_injury_practice_description_isSet) {
        obj.insert(QString("InjuryPracticeDescription"), ::OpenAPI::toJsonValue(m_injury_practice_description));
    }
    if (m_injury_start_date_isSet) {
        obj.insert(QString("InjuryStartDate"), ::OpenAPI::toJsonValue(m_injury_start_date));
    }
    if (m_injury_status_isSet) {
        obj.insert(QString("InjuryStatus"), ::OpenAPI::toJsonValue(m_injury_status));
    }
    if (m_interception_return_touchdowns_isSet) {
        obj.insert(QString("InterceptionReturnTouchdowns"), ::OpenAPI::toJsonValue(m_interception_return_touchdowns));
    }
    if (m_interception_return_yards_isSet) {
        obj.insert(QString("InterceptionReturnYards"), ::OpenAPI::toJsonValue(m_interception_return_yards));
    }
    if (m_interceptions_isSet) {
        obj.insert(QString("Interceptions"), ::OpenAPI::toJsonValue(m_interceptions));
    }
    if (m_is_game_over_isSet) {
        obj.insert(QString("IsGameOver"), ::OpenAPI::toJsonValue(m_is_game_over));
    }
    if (m_kick_return_fair_catches_isSet) {
        obj.insert(QString("KickReturnFairCatches"), ::OpenAPI::toJsonValue(m_kick_return_fair_catches));
    }
    if (m_kick_return_long_isSet) {
        obj.insert(QString("KickReturnLong"), ::OpenAPI::toJsonValue(m_kick_return_long));
    }
    if (m_kick_return_touchdowns_isSet) {
        obj.insert(QString("KickReturnTouchdowns"), ::OpenAPI::toJsonValue(m_kick_return_touchdowns));
    }
    if (m_kick_return_yards_isSet) {
        obj.insert(QString("KickReturnYards"), ::OpenAPI::toJsonValue(m_kick_return_yards));
    }
    if (m_kick_return_yards_per_attempt_isSet) {
        obj.insert(QString("KickReturnYardsPerAttempt"), ::OpenAPI::toJsonValue(m_kick_return_yards_per_attempt));
    }
    if (m_kick_returns_isSet) {
        obj.insert(QString("KickReturns"), ::OpenAPI::toJsonValue(m_kick_returns));
    }
    if (m_misc_assisted_tackles_isSet) {
        obj.insert(QString("MiscAssistedTackles"), ::OpenAPI::toJsonValue(m_misc_assisted_tackles));
    }
    if (m_misc_fumbles_forced_isSet) {
        obj.insert(QString("MiscFumblesForced"), ::OpenAPI::toJsonValue(m_misc_fumbles_forced));
    }
    if (m_misc_fumbles_recovered_isSet) {
        obj.insert(QString("MiscFumblesRecovered"), ::OpenAPI::toJsonValue(m_misc_fumbles_recovered));
    }
    if (m_misc_solo_tackles_isSet) {
        obj.insert(QString("MiscSoloTackles"), ::OpenAPI::toJsonValue(m_misc_solo_tackles));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_offensive_fumble_recovery_touchdowns_isSet) {
        obj.insert(QString("OffensiveFumbleRecoveryTouchdowns"), ::OpenAPI::toJsonValue(m_offensive_fumble_recovery_touchdowns));
    }
    if (m_offensive_snaps_played_isSet) {
        obj.insert(QString("OffensiveSnapsPlayed"), ::OpenAPI::toJsonValue(m_offensive_snaps_played));
    }
    if (m_offensive_team_snaps_isSet) {
        obj.insert(QString("OffensiveTeamSnaps"), ::OpenAPI::toJsonValue(m_offensive_team_snaps));
    }
    if (m_offensive_touchdowns_isSet) {
        obj.insert(QString("OffensiveTouchdowns"), ::OpenAPI::toJsonValue(m_offensive_touchdowns));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentID"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_opponent_position_rank_isSet) {
        obj.insert(QString("OpponentPositionRank"), ::OpenAPI::toJsonValue(m_opponent_position_rank));
    }
    if (m_opponent_rank_isSet) {
        obj.insert(QString("OpponentRank"), ::OpenAPI::toJsonValue(m_opponent_rank));
    }
    if (m_passes_defended_isSet) {
        obj.insert(QString("PassesDefended"), ::OpenAPI::toJsonValue(m_passes_defended));
    }
    if (m_passing_attempts_isSet) {
        obj.insert(QString("PassingAttempts"), ::OpenAPI::toJsonValue(m_passing_attempts));
    }
    if (m_passing_completion_percentage_isSet) {
        obj.insert(QString("PassingCompletionPercentage"), ::OpenAPI::toJsonValue(m_passing_completion_percentage));
    }
    if (m_passing_completions_isSet) {
        obj.insert(QString("PassingCompletions"), ::OpenAPI::toJsonValue(m_passing_completions));
    }
    if (m_passing_interceptions_isSet) {
        obj.insert(QString("PassingInterceptions"), ::OpenAPI::toJsonValue(m_passing_interceptions));
    }
    if (m_passing_long_isSet) {
        obj.insert(QString("PassingLong"), ::OpenAPI::toJsonValue(m_passing_long));
    }
    if (m_passing_rating_isSet) {
        obj.insert(QString("PassingRating"), ::OpenAPI::toJsonValue(m_passing_rating));
    }
    if (m_passing_sack_yards_isSet) {
        obj.insert(QString("PassingSackYards"), ::OpenAPI::toJsonValue(m_passing_sack_yards));
    }
    if (m_passing_sacks_isSet) {
        obj.insert(QString("PassingSacks"), ::OpenAPI::toJsonValue(m_passing_sacks));
    }
    if (m_passing_touchdowns_isSet) {
        obj.insert(QString("PassingTouchdowns"), ::OpenAPI::toJsonValue(m_passing_touchdowns));
    }
    if (m_passing_yards_isSet) {
        obj.insert(QString("PassingYards"), ::OpenAPI::toJsonValue(m_passing_yards));
    }
    if (m_passing_yards_per_attempt_isSet) {
        obj.insert(QString("PassingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_passing_yards_per_attempt));
    }
    if (m_passing_yards_per_completion_isSet) {
        obj.insert(QString("PassingYardsPerCompletion"), ::OpenAPI::toJsonValue(m_passing_yards_per_completion));
    }
    if (m_played_isSet) {
        obj.insert(QString("Played"), ::OpenAPI::toJsonValue(m_played));
    }
    if (m_player_game_id_isSet) {
        obj.insert(QString("PlayerGameID"), ::OpenAPI::toJsonValue(m_player_game_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_playing_surface_isSet) {
        obj.insert(QString("PlayingSurface"), ::OpenAPI::toJsonValue(m_playing_surface));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_punt_average_isSet) {
        obj.insert(QString("PuntAverage"), ::OpenAPI::toJsonValue(m_punt_average));
    }
    if (m_punt_inside20_isSet) {
        obj.insert(QString("PuntInside20"), ::OpenAPI::toJsonValue(m_punt_inside20));
    }
    if (m_punt_long_isSet) {
        obj.insert(QString("PuntLong"), ::OpenAPI::toJsonValue(m_punt_long));
    }
    if (m_punt_net_average_isSet) {
        obj.insert(QString("PuntNetAverage"), ::OpenAPI::toJsonValue(m_punt_net_average));
    }
    if (m_punt_net_yards_isSet) {
        obj.insert(QString("PuntNetYards"), ::OpenAPI::toJsonValue(m_punt_net_yards));
    }
    if (m_punt_return_fair_catches_isSet) {
        obj.insert(QString("PuntReturnFairCatches"), ::OpenAPI::toJsonValue(m_punt_return_fair_catches));
    }
    if (m_punt_return_long_isSet) {
        obj.insert(QString("PuntReturnLong"), ::OpenAPI::toJsonValue(m_punt_return_long));
    }
    if (m_punt_return_touchdowns_isSet) {
        obj.insert(QString("PuntReturnTouchdowns"), ::OpenAPI::toJsonValue(m_punt_return_touchdowns));
    }
    if (m_punt_return_yards_isSet) {
        obj.insert(QString("PuntReturnYards"), ::OpenAPI::toJsonValue(m_punt_return_yards));
    }
    if (m_punt_return_yards_per_attempt_isSet) {
        obj.insert(QString("PuntReturnYardsPerAttempt"), ::OpenAPI::toJsonValue(m_punt_return_yards_per_attempt));
    }
    if (m_punt_returns_isSet) {
        obj.insert(QString("PuntReturns"), ::OpenAPI::toJsonValue(m_punt_returns));
    }
    if (m_punt_touchbacks_isSet) {
        obj.insert(QString("PuntTouchbacks"), ::OpenAPI::toJsonValue(m_punt_touchbacks));
    }
    if (m_punt_yards_isSet) {
        obj.insert(QString("PuntYards"), ::OpenAPI::toJsonValue(m_punt_yards));
    }
    if (m_punts_isSet) {
        obj.insert(QString("Punts"), ::OpenAPI::toJsonValue(m_punts));
    }
    if (m_punts_had_blocked_isSet) {
        obj.insert(QString("PuntsHadBlocked"), ::OpenAPI::toJsonValue(m_punts_had_blocked));
    }
    if (m_quarterback_hits_isSet) {
        obj.insert(QString("QuarterbackHits"), ::OpenAPI::toJsonValue(m_quarterback_hits));
    }
    if (m_receiving_long_isSet) {
        obj.insert(QString("ReceivingLong"), ::OpenAPI::toJsonValue(m_receiving_long));
    }
    if (m_receiving_targets_isSet) {
        obj.insert(QString("ReceivingTargets"), ::OpenAPI::toJsonValue(m_receiving_targets));
    }
    if (m_receiving_touchdowns_isSet) {
        obj.insert(QString("ReceivingTouchdowns"), ::OpenAPI::toJsonValue(m_receiving_touchdowns));
    }
    if (m_receiving_yards_isSet) {
        obj.insert(QString("ReceivingYards"), ::OpenAPI::toJsonValue(m_receiving_yards));
    }
    if (m_receiving_yards_per_reception_isSet) {
        obj.insert(QString("ReceivingYardsPerReception"), ::OpenAPI::toJsonValue(m_receiving_yards_per_reception));
    }
    if (m_receiving_yards_per_target_isSet) {
        obj.insert(QString("ReceivingYardsPerTarget"), ::OpenAPI::toJsonValue(m_receiving_yards_per_target));
    }
    if (m_reception_percentage_isSet) {
        obj.insert(QString("ReceptionPercentage"), ::OpenAPI::toJsonValue(m_reception_percentage));
    }
    if (m_receptions_isSet) {
        obj.insert(QString("Receptions"), ::OpenAPI::toJsonValue(m_receptions));
    }
    if (m_rushing_attempts_isSet) {
        obj.insert(QString("RushingAttempts"), ::OpenAPI::toJsonValue(m_rushing_attempts));
    }
    if (m_rushing_long_isSet) {
        obj.insert(QString("RushingLong"), ::OpenAPI::toJsonValue(m_rushing_long));
    }
    if (m_rushing_touchdowns_isSet) {
        obj.insert(QString("RushingTouchdowns"), ::OpenAPI::toJsonValue(m_rushing_touchdowns));
    }
    if (m_rushing_yards_isSet) {
        obj.insert(QString("RushingYards"), ::OpenAPI::toJsonValue(m_rushing_yards));
    }
    if (m_rushing_yards_per_attempt_isSet) {
        obj.insert(QString("RushingYardsPerAttempt"), ::OpenAPI::toJsonValue(m_rushing_yards_per_attempt));
    }
    if (m_sack_yards_isSet) {
        obj.insert(QString("SackYards"), ::OpenAPI::toJsonValue(m_sack_yards));
    }
    if (m_sacks_isSet) {
        obj.insert(QString("Sacks"), ::OpenAPI::toJsonValue(m_sacks));
    }
    if (m_safeties_isSet) {
        obj.insert(QString("Safeties"), ::OpenAPI::toJsonValue(m_safeties));
    }
    if (m_safeties_allowed_isSet) {
        obj.insert(QString("SafetiesAllowed"), ::OpenAPI::toJsonValue(m_safeties_allowed));
    }
    if (m_score_id_isSet) {
        obj.insert(QString("ScoreID"), ::OpenAPI::toJsonValue(m_score_id));
    }
    if (m_scoring_details.size() > 0) {
        obj.insert(QString("ScoringDetails"), ::OpenAPI::toJsonValue(m_scoring_details));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_snap_counts_confirmed_isSet) {
        obj.insert(QString("SnapCountsConfirmed"), ::OpenAPI::toJsonValue(m_snap_counts_confirmed));
    }
    if (m_solo_tackles_isSet) {
        obj.insert(QString("SoloTackles"), ::OpenAPI::toJsonValue(m_solo_tackles));
    }
    if (m_special_teams_assisted_tackles_isSet) {
        obj.insert(QString("SpecialTeamsAssistedTackles"), ::OpenAPI::toJsonValue(m_special_teams_assisted_tackles));
    }
    if (m_special_teams_fumbles_forced_isSet) {
        obj.insert(QString("SpecialTeamsFumblesForced"), ::OpenAPI::toJsonValue(m_special_teams_fumbles_forced));
    }
    if (m_special_teams_fumbles_recovered_isSet) {
        obj.insert(QString("SpecialTeamsFumblesRecovered"), ::OpenAPI::toJsonValue(m_special_teams_fumbles_recovered));
    }
    if (m_special_teams_snaps_played_isSet) {
        obj.insert(QString("SpecialTeamsSnapsPlayed"), ::OpenAPI::toJsonValue(m_special_teams_snaps_played));
    }
    if (m_special_teams_solo_tackles_isSet) {
        obj.insert(QString("SpecialTeamsSoloTackles"), ::OpenAPI::toJsonValue(m_special_teams_solo_tackles));
    }
    if (m_special_teams_team_snaps_isSet) {
        obj.insert(QString("SpecialTeamsTeamSnaps"), ::OpenAPI::toJsonValue(m_special_teams_team_snaps));
    }
    if (m_special_teams_touchdowns_isSet) {
        obj.insert(QString("SpecialTeamsTouchdowns"), ::OpenAPI::toJsonValue(m_special_teams_touchdowns));
    }
    if (m_stadium_isSet) {
        obj.insert(QString("Stadium"), ::OpenAPI::toJsonValue(m_stadium));
    }
    if (m_started_isSet) {
        obj.insert(QString("Started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_tackles_isSet) {
        obj.insert(QString("Tackles"), ::OpenAPI::toJsonValue(m_tackles));
    }
    if (m_tackles_for_loss_isSet) {
        obj.insert(QString("TacklesForLoss"), ::OpenAPI::toJsonValue(m_tackles_for_loss));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("Temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_touchdowns_isSet) {
        obj.insert(QString("Touchdowns"), ::OpenAPI::toJsonValue(m_touchdowns));
    }
    if (m_two_point_conversion_passes_isSet) {
        obj.insert(QString("TwoPointConversionPasses"), ::OpenAPI::toJsonValue(m_two_point_conversion_passes));
    }
    if (m_two_point_conversion_receptions_isSet) {
        obj.insert(QString("TwoPointConversionReceptions"), ::OpenAPI::toJsonValue(m_two_point_conversion_receptions));
    }
    if (m_two_point_conversion_returns_isSet) {
        obj.insert(QString("TwoPointConversionReturns"), ::OpenAPI::toJsonValue(m_two_point_conversion_returns));
    }
    if (m_two_point_conversion_runs_isSet) {
        obj.insert(QString("TwoPointConversionRuns"), ::OpenAPI::toJsonValue(m_two_point_conversion_runs));
    }
    if (m_victiv_salary_isSet) {
        obj.insert(QString("VictivSalary"), ::OpenAPI::toJsonValue(m_victiv_salary));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_wind_speed_isSet) {
        obj.insert(QString("WindSpeed"), ::OpenAPI::toJsonValue(m_wind_speed));
    }
    if (m_yahoo_position_isSet) {
        obj.insert(QString("YahooPosition"), ::OpenAPI::toJsonValue(m_yahoo_position));
    }
    if (m_yahoo_salary_isSet) {
        obj.insert(QString("YahooSalary"), ::OpenAPI::toJsonValue(m_yahoo_salary));
    }
    return obj;
}

qint32 OAIPlayerGameRedZone::getActivated() const {
    return m_activated;
}
void OAIPlayerGameRedZone::setActivated(const qint32 &activated) {
    m_activated = activated;
    m_activated_isSet = true;
}

bool OAIPlayerGameRedZone::is_activated_Set() const{
    return m_activated_isSet;
}

bool OAIPlayerGameRedZone::is_activated_Valid() const{
    return m_activated_isValid;
}

double OAIPlayerGameRedZone::getAssistedTackles() const {
    return m_assisted_tackles;
}
void OAIPlayerGameRedZone::setAssistedTackles(const double &assisted_tackles) {
    m_assisted_tackles = assisted_tackles;
    m_assisted_tackles_isSet = true;
}

bool OAIPlayerGameRedZone::is_assisted_tackles_Set() const{
    return m_assisted_tackles_isSet;
}

bool OAIPlayerGameRedZone::is_assisted_tackles_Valid() const{
    return m_assisted_tackles_isValid;
}

double OAIPlayerGameRedZone::getBlockedKickReturnTouchdowns() const {
    return m_blocked_kick_return_touchdowns;
}
void OAIPlayerGameRedZone::setBlockedKickReturnTouchdowns(const double &blocked_kick_return_touchdowns) {
    m_blocked_kick_return_touchdowns = blocked_kick_return_touchdowns;
    m_blocked_kick_return_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_blocked_kick_return_touchdowns_Set() const{
    return m_blocked_kick_return_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_blocked_kick_return_touchdowns_Valid() const{
    return m_blocked_kick_return_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getBlockedKickReturnYards() const {
    return m_blocked_kick_return_yards;
}
void OAIPlayerGameRedZone::setBlockedKickReturnYards(const double &blocked_kick_return_yards) {
    m_blocked_kick_return_yards = blocked_kick_return_yards;
    m_blocked_kick_return_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_blocked_kick_return_yards_Set() const{
    return m_blocked_kick_return_yards_isSet;
}

bool OAIPlayerGameRedZone::is_blocked_kick_return_yards_Valid() const{
    return m_blocked_kick_return_yards_isValid;
}

double OAIPlayerGameRedZone::getBlockedKicks() const {
    return m_blocked_kicks;
}
void OAIPlayerGameRedZone::setBlockedKicks(const double &blocked_kicks) {
    m_blocked_kicks = blocked_kicks;
    m_blocked_kicks_isSet = true;
}

bool OAIPlayerGameRedZone::is_blocked_kicks_Set() const{
    return m_blocked_kicks_isSet;
}

bool OAIPlayerGameRedZone::is_blocked_kicks_Valid() const{
    return m_blocked_kicks_isValid;
}

QString OAIPlayerGameRedZone::getDateTime() const {
    return m_date_time;
}
void OAIPlayerGameRedZone::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIPlayerGameRedZone::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIPlayerGameRedZone::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIPlayerGameRedZone::getDay() const {
    return m_day;
}
void OAIPlayerGameRedZone::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIPlayerGameRedZone::is_day_Set() const{
    return m_day_isSet;
}

bool OAIPlayerGameRedZone::is_day_Valid() const{
    return m_day_isValid;
}

bool OAIPlayerGameRedZone::isDeclaredInactive() const {
    return m_declared_inactive;
}
void OAIPlayerGameRedZone::setDeclaredInactive(const bool &declared_inactive) {
    m_declared_inactive = declared_inactive;
    m_declared_inactive_isSet = true;
}

bool OAIPlayerGameRedZone::is_declared_inactive_Set() const{
    return m_declared_inactive_isSet;
}

bool OAIPlayerGameRedZone::is_declared_inactive_Valid() const{
    return m_declared_inactive_isValid;
}

qint32 OAIPlayerGameRedZone::getDefensiveSnapsPlayed() const {
    return m_defensive_snaps_played;
}
void OAIPlayerGameRedZone::setDefensiveSnapsPlayed(const qint32 &defensive_snaps_played) {
    m_defensive_snaps_played = defensive_snaps_played;
    m_defensive_snaps_played_isSet = true;
}

bool OAIPlayerGameRedZone::is_defensive_snaps_played_Set() const{
    return m_defensive_snaps_played_isSet;
}

bool OAIPlayerGameRedZone::is_defensive_snaps_played_Valid() const{
    return m_defensive_snaps_played_isValid;
}

qint32 OAIPlayerGameRedZone::getDefensiveTeamSnaps() const {
    return m_defensive_team_snaps;
}
void OAIPlayerGameRedZone::setDefensiveTeamSnaps(const qint32 &defensive_team_snaps) {
    m_defensive_team_snaps = defensive_team_snaps;
    m_defensive_team_snaps_isSet = true;
}

bool OAIPlayerGameRedZone::is_defensive_team_snaps_Set() const{
    return m_defensive_team_snaps_isSet;
}

bool OAIPlayerGameRedZone::is_defensive_team_snaps_Valid() const{
    return m_defensive_team_snaps_isValid;
}

double OAIPlayerGameRedZone::getDefensiveTouchdowns() const {
    return m_defensive_touchdowns;
}
void OAIPlayerGameRedZone::setDefensiveTouchdowns(const double &defensive_touchdowns) {
    m_defensive_touchdowns = defensive_touchdowns;
    m_defensive_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_defensive_touchdowns_Set() const{
    return m_defensive_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_defensive_touchdowns_Valid() const{
    return m_defensive_touchdowns_isValid;
}

QString OAIPlayerGameRedZone::getDraftKingsPosition() const {
    return m_draft_kings_position;
}
void OAIPlayerGameRedZone::setDraftKingsPosition(const QString &draft_kings_position) {
    m_draft_kings_position = draft_kings_position;
    m_draft_kings_position_isSet = true;
}

bool OAIPlayerGameRedZone::is_draft_kings_position_Set() const{
    return m_draft_kings_position_isSet;
}

bool OAIPlayerGameRedZone::is_draft_kings_position_Valid() const{
    return m_draft_kings_position_isValid;
}

qint32 OAIPlayerGameRedZone::getDraftKingsSalary() const {
    return m_draft_kings_salary;
}
void OAIPlayerGameRedZone::setDraftKingsSalary(const qint32 &draft_kings_salary) {
    m_draft_kings_salary = draft_kings_salary;
    m_draft_kings_salary_isSet = true;
}

bool OAIPlayerGameRedZone::is_draft_kings_salary_Set() const{
    return m_draft_kings_salary_isSet;
}

bool OAIPlayerGameRedZone::is_draft_kings_salary_Valid() const{
    return m_draft_kings_salary_isValid;
}

double OAIPlayerGameRedZone::getExtraPointsAttempted() const {
    return m_extra_points_attempted;
}
void OAIPlayerGameRedZone::setExtraPointsAttempted(const double &extra_points_attempted) {
    m_extra_points_attempted = extra_points_attempted;
    m_extra_points_attempted_isSet = true;
}

bool OAIPlayerGameRedZone::is_extra_points_attempted_Set() const{
    return m_extra_points_attempted_isSet;
}

bool OAIPlayerGameRedZone::is_extra_points_attempted_Valid() const{
    return m_extra_points_attempted_isValid;
}

double OAIPlayerGameRedZone::getExtraPointsHadBlocked() const {
    return m_extra_points_had_blocked;
}
void OAIPlayerGameRedZone::setExtraPointsHadBlocked(const double &extra_points_had_blocked) {
    m_extra_points_had_blocked = extra_points_had_blocked;
    m_extra_points_had_blocked_isSet = true;
}

bool OAIPlayerGameRedZone::is_extra_points_had_blocked_Set() const{
    return m_extra_points_had_blocked_isSet;
}

bool OAIPlayerGameRedZone::is_extra_points_had_blocked_Valid() const{
    return m_extra_points_had_blocked_isValid;
}

double OAIPlayerGameRedZone::getExtraPointsMade() const {
    return m_extra_points_made;
}
void OAIPlayerGameRedZone::setExtraPointsMade(const double &extra_points_made) {
    m_extra_points_made = extra_points_made;
    m_extra_points_made_isSet = true;
}

bool OAIPlayerGameRedZone::is_extra_points_made_Set() const{
    return m_extra_points_made_isSet;
}

bool OAIPlayerGameRedZone::is_extra_points_made_Valid() const{
    return m_extra_points_made_isValid;
}

QString OAIPlayerGameRedZone::getFanDuelPosition() const {
    return m_fan_duel_position;
}
void OAIPlayerGameRedZone::setFanDuelPosition(const QString &fan_duel_position) {
    m_fan_duel_position = fan_duel_position;
    m_fan_duel_position_isSet = true;
}

bool OAIPlayerGameRedZone::is_fan_duel_position_Set() const{
    return m_fan_duel_position_isSet;
}

bool OAIPlayerGameRedZone::is_fan_duel_position_Valid() const{
    return m_fan_duel_position_isValid;
}

qint32 OAIPlayerGameRedZone::getFanDuelSalary() const {
    return m_fan_duel_salary;
}
void OAIPlayerGameRedZone::setFanDuelSalary(const qint32 &fan_duel_salary) {
    m_fan_duel_salary = fan_duel_salary;
    m_fan_duel_salary_isSet = true;
}

bool OAIPlayerGameRedZone::is_fan_duel_salary_Set() const{
    return m_fan_duel_salary_isSet;
}

bool OAIPlayerGameRedZone::is_fan_duel_salary_Valid() const{
    return m_fan_duel_salary_isValid;
}

qint32 OAIPlayerGameRedZone::getFantasyDataSalary() const {
    return m_fantasy_data_salary;
}
void OAIPlayerGameRedZone::setFantasyDataSalary(const qint32 &fantasy_data_salary) {
    m_fantasy_data_salary = fantasy_data_salary;
    m_fantasy_data_salary_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_data_salary_Set() const{
    return m_fantasy_data_salary_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_data_salary_Valid() const{
    return m_fantasy_data_salary_isValid;
}

QString OAIPlayerGameRedZone::getFantasyDraftPosition() const {
    return m_fantasy_draft_position;
}
void OAIPlayerGameRedZone::setFantasyDraftPosition(const QString &fantasy_draft_position) {
    m_fantasy_draft_position = fantasy_draft_position;
    m_fantasy_draft_position_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_draft_position_Set() const{
    return m_fantasy_draft_position_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_draft_position_Valid() const{
    return m_fantasy_draft_position_isValid;
}

qint32 OAIPlayerGameRedZone::getFantasyDraftSalary() const {
    return m_fantasy_draft_salary;
}
void OAIPlayerGameRedZone::setFantasyDraftSalary(const qint32 &fantasy_draft_salary) {
    m_fantasy_draft_salary = fantasy_draft_salary;
    m_fantasy_draft_salary_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_draft_salary_Set() const{
    return m_fantasy_draft_salary_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_draft_salary_Valid() const{
    return m_fantasy_draft_salary_isValid;
}

double OAIPlayerGameRedZone::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerGameRedZone::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAIPlayerGameRedZone::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAIPlayerGameRedZone::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAIPlayerGameRedZone::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAIPlayerGameRedZone::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAIPlayerGameRedZone::getFantasyPointsFantasyDraft() const {
    return m_fantasy_points_fantasy_draft;
}
void OAIPlayerGameRedZone::setFantasyPointsFantasyDraft(const double &fantasy_points_fantasy_draft) {
    m_fantasy_points_fantasy_draft = fantasy_points_fantasy_draft;
    m_fantasy_points_fantasy_draft_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_points_fantasy_draft_Set() const{
    return m_fantasy_points_fantasy_draft_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_points_fantasy_draft_Valid() const{
    return m_fantasy_points_fantasy_draft_isValid;
}

double OAIPlayerGameRedZone::getFantasyPointsPpr() const {
    return m_fantasy_points_ppr;
}
void OAIPlayerGameRedZone::setFantasyPointsPpr(const double &fantasy_points_ppr) {
    m_fantasy_points_ppr = fantasy_points_ppr;
    m_fantasy_points_ppr_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_points_ppr_Set() const{
    return m_fantasy_points_ppr_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_points_ppr_Valid() const{
    return m_fantasy_points_ppr_isValid;
}

double OAIPlayerGameRedZone::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAIPlayerGameRedZone::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

QString OAIPlayerGameRedZone::getFantasyPosition() const {
    return m_fantasy_position;
}
void OAIPlayerGameRedZone::setFantasyPosition(const QString &fantasy_position) {
    m_fantasy_position = fantasy_position;
    m_fantasy_position_isSet = true;
}

bool OAIPlayerGameRedZone::is_fantasy_position_Set() const{
    return m_fantasy_position_isSet;
}

bool OAIPlayerGameRedZone::is_fantasy_position_Valid() const{
    return m_fantasy_position_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalPercentage() const {
    return m_field_goal_percentage;
}
void OAIPlayerGameRedZone::setFieldGoalPercentage(const double &field_goal_percentage) {
    m_field_goal_percentage = field_goal_percentage;
    m_field_goal_percentage_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goal_percentage_Set() const{
    return m_field_goal_percentage_isSet;
}

bool OAIPlayerGameRedZone::is_field_goal_percentage_Valid() const{
    return m_field_goal_percentage_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalReturnTouchdowns() const {
    return m_field_goal_return_touchdowns;
}
void OAIPlayerGameRedZone::setFieldGoalReturnTouchdowns(const double &field_goal_return_touchdowns) {
    m_field_goal_return_touchdowns = field_goal_return_touchdowns;
    m_field_goal_return_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goal_return_touchdowns_Set() const{
    return m_field_goal_return_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_field_goal_return_touchdowns_Valid() const{
    return m_field_goal_return_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalReturnYards() const {
    return m_field_goal_return_yards;
}
void OAIPlayerGameRedZone::setFieldGoalReturnYards(const double &field_goal_return_yards) {
    m_field_goal_return_yards = field_goal_return_yards;
    m_field_goal_return_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goal_return_yards_Set() const{
    return m_field_goal_return_yards_isSet;
}

bool OAIPlayerGameRedZone::is_field_goal_return_yards_Valid() const{
    return m_field_goal_return_yards_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsAttempted() const {
    return m_field_goals_attempted;
}
void OAIPlayerGameRedZone::setFieldGoalsAttempted(const double &field_goals_attempted) {
    m_field_goals_attempted = field_goals_attempted;
    m_field_goals_attempted_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_attempted_Set() const{
    return m_field_goals_attempted_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_attempted_Valid() const{
    return m_field_goals_attempted_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsHadBlocked() const {
    return m_field_goals_had_blocked;
}
void OAIPlayerGameRedZone::setFieldGoalsHadBlocked(const double &field_goals_had_blocked) {
    m_field_goals_had_blocked = field_goals_had_blocked;
    m_field_goals_had_blocked_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_had_blocked_Set() const{
    return m_field_goals_had_blocked_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_had_blocked_Valid() const{
    return m_field_goals_had_blocked_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsLongestMade() const {
    return m_field_goals_longest_made;
}
void OAIPlayerGameRedZone::setFieldGoalsLongestMade(const double &field_goals_longest_made) {
    m_field_goals_longest_made = field_goals_longest_made;
    m_field_goals_longest_made_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_longest_made_Set() const{
    return m_field_goals_longest_made_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_longest_made_Valid() const{
    return m_field_goals_longest_made_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsMade() const {
    return m_field_goals_made;
}
void OAIPlayerGameRedZone::setFieldGoalsMade(const double &field_goals_made) {
    m_field_goals_made = field_goals_made;
    m_field_goals_made_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_made_Set() const{
    return m_field_goals_made_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_made_Valid() const{
    return m_field_goals_made_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsMade0to19() const {
    return m_field_goals_made0to19;
}
void OAIPlayerGameRedZone::setFieldGoalsMade0to19(const double &field_goals_made0to19) {
    m_field_goals_made0to19 = field_goals_made0to19;
    m_field_goals_made0to19_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_made0to19_Set() const{
    return m_field_goals_made0to19_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_made0to19_Valid() const{
    return m_field_goals_made0to19_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsMade20to29() const {
    return m_field_goals_made20to29;
}
void OAIPlayerGameRedZone::setFieldGoalsMade20to29(const double &field_goals_made20to29) {
    m_field_goals_made20to29 = field_goals_made20to29;
    m_field_goals_made20to29_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_made20to29_Set() const{
    return m_field_goals_made20to29_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_made20to29_Valid() const{
    return m_field_goals_made20to29_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsMade30to39() const {
    return m_field_goals_made30to39;
}
void OAIPlayerGameRedZone::setFieldGoalsMade30to39(const double &field_goals_made30to39) {
    m_field_goals_made30to39 = field_goals_made30to39;
    m_field_goals_made30to39_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_made30to39_Set() const{
    return m_field_goals_made30to39_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_made30to39_Valid() const{
    return m_field_goals_made30to39_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsMade40to49() const {
    return m_field_goals_made40to49;
}
void OAIPlayerGameRedZone::setFieldGoalsMade40to49(const double &field_goals_made40to49) {
    m_field_goals_made40to49 = field_goals_made40to49;
    m_field_goals_made40to49_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_made40to49_Set() const{
    return m_field_goals_made40to49_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_made40to49_Valid() const{
    return m_field_goals_made40to49_isValid;
}

double OAIPlayerGameRedZone::getFieldGoalsMade50Plus() const {
    return m_field_goals_made50_plus;
}
void OAIPlayerGameRedZone::setFieldGoalsMade50Plus(const double &field_goals_made50_plus) {
    m_field_goals_made50_plus = field_goals_made50_plus;
    m_field_goals_made50_plus_isSet = true;
}

bool OAIPlayerGameRedZone::is_field_goals_made50_plus_Set() const{
    return m_field_goals_made50_plus_isSet;
}

bool OAIPlayerGameRedZone::is_field_goals_made50_plus_Valid() const{
    return m_field_goals_made50_plus_isValid;
}

double OAIPlayerGameRedZone::getFumbleReturnTouchdowns() const {
    return m_fumble_return_touchdowns;
}
void OAIPlayerGameRedZone::setFumbleReturnTouchdowns(const double &fumble_return_touchdowns) {
    m_fumble_return_touchdowns = fumble_return_touchdowns;
    m_fumble_return_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumble_return_touchdowns_Set() const{
    return m_fumble_return_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_fumble_return_touchdowns_Valid() const{
    return m_fumble_return_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getFumbleReturnYards() const {
    return m_fumble_return_yards;
}
void OAIPlayerGameRedZone::setFumbleReturnYards(const double &fumble_return_yards) {
    m_fumble_return_yards = fumble_return_yards;
    m_fumble_return_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumble_return_yards_Set() const{
    return m_fumble_return_yards_isSet;
}

bool OAIPlayerGameRedZone::is_fumble_return_yards_Valid() const{
    return m_fumble_return_yards_isValid;
}

double OAIPlayerGameRedZone::getFumbles() const {
    return m_fumbles;
}
void OAIPlayerGameRedZone::setFumbles(const double &fumbles) {
    m_fumbles = fumbles;
    m_fumbles_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumbles_Set() const{
    return m_fumbles_isSet;
}

bool OAIPlayerGameRedZone::is_fumbles_Valid() const{
    return m_fumbles_isValid;
}

double OAIPlayerGameRedZone::getFumblesForced() const {
    return m_fumbles_forced;
}
void OAIPlayerGameRedZone::setFumblesForced(const double &fumbles_forced) {
    m_fumbles_forced = fumbles_forced;
    m_fumbles_forced_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumbles_forced_Set() const{
    return m_fumbles_forced_isSet;
}

bool OAIPlayerGameRedZone::is_fumbles_forced_Valid() const{
    return m_fumbles_forced_isValid;
}

double OAIPlayerGameRedZone::getFumblesLost() const {
    return m_fumbles_lost;
}
void OAIPlayerGameRedZone::setFumblesLost(const double &fumbles_lost) {
    m_fumbles_lost = fumbles_lost;
    m_fumbles_lost_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumbles_lost_Set() const{
    return m_fumbles_lost_isSet;
}

bool OAIPlayerGameRedZone::is_fumbles_lost_Valid() const{
    return m_fumbles_lost_isValid;
}

double OAIPlayerGameRedZone::getFumblesOutOfBounds() const {
    return m_fumbles_out_of_bounds;
}
void OAIPlayerGameRedZone::setFumblesOutOfBounds(const double &fumbles_out_of_bounds) {
    m_fumbles_out_of_bounds = fumbles_out_of_bounds;
    m_fumbles_out_of_bounds_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumbles_out_of_bounds_Set() const{
    return m_fumbles_out_of_bounds_isSet;
}

bool OAIPlayerGameRedZone::is_fumbles_out_of_bounds_Valid() const{
    return m_fumbles_out_of_bounds_isValid;
}

double OAIPlayerGameRedZone::getFumblesOwnRecoveries() const {
    return m_fumbles_own_recoveries;
}
void OAIPlayerGameRedZone::setFumblesOwnRecoveries(const double &fumbles_own_recoveries) {
    m_fumbles_own_recoveries = fumbles_own_recoveries;
    m_fumbles_own_recoveries_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumbles_own_recoveries_Set() const{
    return m_fumbles_own_recoveries_isSet;
}

bool OAIPlayerGameRedZone::is_fumbles_own_recoveries_Valid() const{
    return m_fumbles_own_recoveries_isValid;
}

double OAIPlayerGameRedZone::getFumblesRecovered() const {
    return m_fumbles_recovered;
}
void OAIPlayerGameRedZone::setFumblesRecovered(const double &fumbles_recovered) {
    m_fumbles_recovered = fumbles_recovered;
    m_fumbles_recovered_isSet = true;
}

bool OAIPlayerGameRedZone::is_fumbles_recovered_Set() const{
    return m_fumbles_recovered_isSet;
}

bool OAIPlayerGameRedZone::is_fumbles_recovered_Valid() const{
    return m_fumbles_recovered_isValid;
}

QString OAIPlayerGameRedZone::getGameDate() const {
    return m_game_date;
}
void OAIPlayerGameRedZone::setGameDate(const QString &game_date) {
    m_game_date = game_date;
    m_game_date_isSet = true;
}

bool OAIPlayerGameRedZone::is_game_date_Set() const{
    return m_game_date_isSet;
}

bool OAIPlayerGameRedZone::is_game_date_Valid() const{
    return m_game_date_isValid;
}

QString OAIPlayerGameRedZone::getGameKey() const {
    return m_game_key;
}
void OAIPlayerGameRedZone::setGameKey(const QString &game_key) {
    m_game_key = game_key;
    m_game_key_isSet = true;
}

bool OAIPlayerGameRedZone::is_game_key_Set() const{
    return m_game_key_isSet;
}

bool OAIPlayerGameRedZone::is_game_key_Valid() const{
    return m_game_key_isValid;
}

qint32 OAIPlayerGameRedZone::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIPlayerGameRedZone::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIPlayerGameRedZone::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIPlayerGameRedZone::getGlobalOpponentId() const {
    return m_global_opponent_id;
}
void OAIPlayerGameRedZone::setGlobalOpponentId(const qint32 &global_opponent_id) {
    m_global_opponent_id = global_opponent_id;
    m_global_opponent_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_global_opponent_id_Set() const{
    return m_global_opponent_id_isSet;
}

bool OAIPlayerGameRedZone::is_global_opponent_id_Valid() const{
    return m_global_opponent_id_isValid;
}

qint32 OAIPlayerGameRedZone::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIPlayerGameRedZone::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIPlayerGameRedZone::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

QString OAIPlayerGameRedZone::getHomeOrAway() const {
    return m_home_or_away;
}
void OAIPlayerGameRedZone::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAIPlayerGameRedZone::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAIPlayerGameRedZone::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

qint32 OAIPlayerGameRedZone::getHumidity() const {
    return m_humidity;
}
void OAIPlayerGameRedZone::setHumidity(const qint32 &humidity) {
    m_humidity = humidity;
    m_humidity_isSet = true;
}

bool OAIPlayerGameRedZone::is_humidity_Set() const{
    return m_humidity_isSet;
}

bool OAIPlayerGameRedZone::is_humidity_Valid() const{
    return m_humidity_isValid;
}

QString OAIPlayerGameRedZone::getInjuryBodyPart() const {
    return m_injury_body_part;
}
void OAIPlayerGameRedZone::setInjuryBodyPart(const QString &injury_body_part) {
    m_injury_body_part = injury_body_part;
    m_injury_body_part_isSet = true;
}

bool OAIPlayerGameRedZone::is_injury_body_part_Set() const{
    return m_injury_body_part_isSet;
}

bool OAIPlayerGameRedZone::is_injury_body_part_Valid() const{
    return m_injury_body_part_isValid;
}

QString OAIPlayerGameRedZone::getInjuryNotes() const {
    return m_injury_notes;
}
void OAIPlayerGameRedZone::setInjuryNotes(const QString &injury_notes) {
    m_injury_notes = injury_notes;
    m_injury_notes_isSet = true;
}

bool OAIPlayerGameRedZone::is_injury_notes_Set() const{
    return m_injury_notes_isSet;
}

bool OAIPlayerGameRedZone::is_injury_notes_Valid() const{
    return m_injury_notes_isValid;
}

QString OAIPlayerGameRedZone::getInjuryPractice() const {
    return m_injury_practice;
}
void OAIPlayerGameRedZone::setInjuryPractice(const QString &injury_practice) {
    m_injury_practice = injury_practice;
    m_injury_practice_isSet = true;
}

bool OAIPlayerGameRedZone::is_injury_practice_Set() const{
    return m_injury_practice_isSet;
}

bool OAIPlayerGameRedZone::is_injury_practice_Valid() const{
    return m_injury_practice_isValid;
}

QString OAIPlayerGameRedZone::getInjuryPracticeDescription() const {
    return m_injury_practice_description;
}
void OAIPlayerGameRedZone::setInjuryPracticeDescription(const QString &injury_practice_description) {
    m_injury_practice_description = injury_practice_description;
    m_injury_practice_description_isSet = true;
}

bool OAIPlayerGameRedZone::is_injury_practice_description_Set() const{
    return m_injury_practice_description_isSet;
}

bool OAIPlayerGameRedZone::is_injury_practice_description_Valid() const{
    return m_injury_practice_description_isValid;
}

QString OAIPlayerGameRedZone::getInjuryStartDate() const {
    return m_injury_start_date;
}
void OAIPlayerGameRedZone::setInjuryStartDate(const QString &injury_start_date) {
    m_injury_start_date = injury_start_date;
    m_injury_start_date_isSet = true;
}

bool OAIPlayerGameRedZone::is_injury_start_date_Set() const{
    return m_injury_start_date_isSet;
}

bool OAIPlayerGameRedZone::is_injury_start_date_Valid() const{
    return m_injury_start_date_isValid;
}

QString OAIPlayerGameRedZone::getInjuryStatus() const {
    return m_injury_status;
}
void OAIPlayerGameRedZone::setInjuryStatus(const QString &injury_status) {
    m_injury_status = injury_status;
    m_injury_status_isSet = true;
}

bool OAIPlayerGameRedZone::is_injury_status_Set() const{
    return m_injury_status_isSet;
}

bool OAIPlayerGameRedZone::is_injury_status_Valid() const{
    return m_injury_status_isValid;
}

double OAIPlayerGameRedZone::getInterceptionReturnTouchdowns() const {
    return m_interception_return_touchdowns;
}
void OAIPlayerGameRedZone::setInterceptionReturnTouchdowns(const double &interception_return_touchdowns) {
    m_interception_return_touchdowns = interception_return_touchdowns;
    m_interception_return_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_interception_return_touchdowns_Set() const{
    return m_interception_return_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_interception_return_touchdowns_Valid() const{
    return m_interception_return_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getInterceptionReturnYards() const {
    return m_interception_return_yards;
}
void OAIPlayerGameRedZone::setInterceptionReturnYards(const double &interception_return_yards) {
    m_interception_return_yards = interception_return_yards;
    m_interception_return_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_interception_return_yards_Set() const{
    return m_interception_return_yards_isSet;
}

bool OAIPlayerGameRedZone::is_interception_return_yards_Valid() const{
    return m_interception_return_yards_isValid;
}

double OAIPlayerGameRedZone::getInterceptions() const {
    return m_interceptions;
}
void OAIPlayerGameRedZone::setInterceptions(const double &interceptions) {
    m_interceptions = interceptions;
    m_interceptions_isSet = true;
}

bool OAIPlayerGameRedZone::is_interceptions_Set() const{
    return m_interceptions_isSet;
}

bool OAIPlayerGameRedZone::is_interceptions_Valid() const{
    return m_interceptions_isValid;
}

bool OAIPlayerGameRedZone::isIsGameOver() const {
    return m_is_game_over;
}
void OAIPlayerGameRedZone::setIsGameOver(const bool &is_game_over) {
    m_is_game_over = is_game_over;
    m_is_game_over_isSet = true;
}

bool OAIPlayerGameRedZone::is_is_game_over_Set() const{
    return m_is_game_over_isSet;
}

bool OAIPlayerGameRedZone::is_is_game_over_Valid() const{
    return m_is_game_over_isValid;
}

double OAIPlayerGameRedZone::getKickReturnFairCatches() const {
    return m_kick_return_fair_catches;
}
void OAIPlayerGameRedZone::setKickReturnFairCatches(const double &kick_return_fair_catches) {
    m_kick_return_fair_catches = kick_return_fair_catches;
    m_kick_return_fair_catches_isSet = true;
}

bool OAIPlayerGameRedZone::is_kick_return_fair_catches_Set() const{
    return m_kick_return_fair_catches_isSet;
}

bool OAIPlayerGameRedZone::is_kick_return_fair_catches_Valid() const{
    return m_kick_return_fair_catches_isValid;
}

double OAIPlayerGameRedZone::getKickReturnLong() const {
    return m_kick_return_long;
}
void OAIPlayerGameRedZone::setKickReturnLong(const double &kick_return_long) {
    m_kick_return_long = kick_return_long;
    m_kick_return_long_isSet = true;
}

bool OAIPlayerGameRedZone::is_kick_return_long_Set() const{
    return m_kick_return_long_isSet;
}

bool OAIPlayerGameRedZone::is_kick_return_long_Valid() const{
    return m_kick_return_long_isValid;
}

double OAIPlayerGameRedZone::getKickReturnTouchdowns() const {
    return m_kick_return_touchdowns;
}
void OAIPlayerGameRedZone::setKickReturnTouchdowns(const double &kick_return_touchdowns) {
    m_kick_return_touchdowns = kick_return_touchdowns;
    m_kick_return_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_kick_return_touchdowns_Set() const{
    return m_kick_return_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_kick_return_touchdowns_Valid() const{
    return m_kick_return_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getKickReturnYards() const {
    return m_kick_return_yards;
}
void OAIPlayerGameRedZone::setKickReturnYards(const double &kick_return_yards) {
    m_kick_return_yards = kick_return_yards;
    m_kick_return_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_kick_return_yards_Set() const{
    return m_kick_return_yards_isSet;
}

bool OAIPlayerGameRedZone::is_kick_return_yards_Valid() const{
    return m_kick_return_yards_isValid;
}

double OAIPlayerGameRedZone::getKickReturnYardsPerAttempt() const {
    return m_kick_return_yards_per_attempt;
}
void OAIPlayerGameRedZone::setKickReturnYardsPerAttempt(const double &kick_return_yards_per_attempt) {
    m_kick_return_yards_per_attempt = kick_return_yards_per_attempt;
    m_kick_return_yards_per_attempt_isSet = true;
}

bool OAIPlayerGameRedZone::is_kick_return_yards_per_attempt_Set() const{
    return m_kick_return_yards_per_attempt_isSet;
}

bool OAIPlayerGameRedZone::is_kick_return_yards_per_attempt_Valid() const{
    return m_kick_return_yards_per_attempt_isValid;
}

double OAIPlayerGameRedZone::getKickReturns() const {
    return m_kick_returns;
}
void OAIPlayerGameRedZone::setKickReturns(const double &kick_returns) {
    m_kick_returns = kick_returns;
    m_kick_returns_isSet = true;
}

bool OAIPlayerGameRedZone::is_kick_returns_Set() const{
    return m_kick_returns_isSet;
}

bool OAIPlayerGameRedZone::is_kick_returns_Valid() const{
    return m_kick_returns_isValid;
}

double OAIPlayerGameRedZone::getMiscAssistedTackles() const {
    return m_misc_assisted_tackles;
}
void OAIPlayerGameRedZone::setMiscAssistedTackles(const double &misc_assisted_tackles) {
    m_misc_assisted_tackles = misc_assisted_tackles;
    m_misc_assisted_tackles_isSet = true;
}

bool OAIPlayerGameRedZone::is_misc_assisted_tackles_Set() const{
    return m_misc_assisted_tackles_isSet;
}

bool OAIPlayerGameRedZone::is_misc_assisted_tackles_Valid() const{
    return m_misc_assisted_tackles_isValid;
}

double OAIPlayerGameRedZone::getMiscFumblesForced() const {
    return m_misc_fumbles_forced;
}
void OAIPlayerGameRedZone::setMiscFumblesForced(const double &misc_fumbles_forced) {
    m_misc_fumbles_forced = misc_fumbles_forced;
    m_misc_fumbles_forced_isSet = true;
}

bool OAIPlayerGameRedZone::is_misc_fumbles_forced_Set() const{
    return m_misc_fumbles_forced_isSet;
}

bool OAIPlayerGameRedZone::is_misc_fumbles_forced_Valid() const{
    return m_misc_fumbles_forced_isValid;
}

double OAIPlayerGameRedZone::getMiscFumblesRecovered() const {
    return m_misc_fumbles_recovered;
}
void OAIPlayerGameRedZone::setMiscFumblesRecovered(const double &misc_fumbles_recovered) {
    m_misc_fumbles_recovered = misc_fumbles_recovered;
    m_misc_fumbles_recovered_isSet = true;
}

bool OAIPlayerGameRedZone::is_misc_fumbles_recovered_Set() const{
    return m_misc_fumbles_recovered_isSet;
}

bool OAIPlayerGameRedZone::is_misc_fumbles_recovered_Valid() const{
    return m_misc_fumbles_recovered_isValid;
}

double OAIPlayerGameRedZone::getMiscSoloTackles() const {
    return m_misc_solo_tackles;
}
void OAIPlayerGameRedZone::setMiscSoloTackles(const double &misc_solo_tackles) {
    m_misc_solo_tackles = misc_solo_tackles;
    m_misc_solo_tackles_isSet = true;
}

bool OAIPlayerGameRedZone::is_misc_solo_tackles_Set() const{
    return m_misc_solo_tackles_isSet;
}

bool OAIPlayerGameRedZone::is_misc_solo_tackles_Valid() const{
    return m_misc_solo_tackles_isValid;
}

QString OAIPlayerGameRedZone::getName() const {
    return m_name;
}
void OAIPlayerGameRedZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerGameRedZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerGameRedZone::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerGameRedZone::getNumber() const {
    return m_number;
}
void OAIPlayerGameRedZone::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerGameRedZone::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerGameRedZone::is_number_Valid() const{
    return m_number_isValid;
}

double OAIPlayerGameRedZone::getOffensiveFumbleRecoveryTouchdowns() const {
    return m_offensive_fumble_recovery_touchdowns;
}
void OAIPlayerGameRedZone::setOffensiveFumbleRecoveryTouchdowns(const double &offensive_fumble_recovery_touchdowns) {
    m_offensive_fumble_recovery_touchdowns = offensive_fumble_recovery_touchdowns;
    m_offensive_fumble_recovery_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_offensive_fumble_recovery_touchdowns_Set() const{
    return m_offensive_fumble_recovery_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_offensive_fumble_recovery_touchdowns_Valid() const{
    return m_offensive_fumble_recovery_touchdowns_isValid;
}

qint32 OAIPlayerGameRedZone::getOffensiveSnapsPlayed() const {
    return m_offensive_snaps_played;
}
void OAIPlayerGameRedZone::setOffensiveSnapsPlayed(const qint32 &offensive_snaps_played) {
    m_offensive_snaps_played = offensive_snaps_played;
    m_offensive_snaps_played_isSet = true;
}

bool OAIPlayerGameRedZone::is_offensive_snaps_played_Set() const{
    return m_offensive_snaps_played_isSet;
}

bool OAIPlayerGameRedZone::is_offensive_snaps_played_Valid() const{
    return m_offensive_snaps_played_isValid;
}

qint32 OAIPlayerGameRedZone::getOffensiveTeamSnaps() const {
    return m_offensive_team_snaps;
}
void OAIPlayerGameRedZone::setOffensiveTeamSnaps(const qint32 &offensive_team_snaps) {
    m_offensive_team_snaps = offensive_team_snaps;
    m_offensive_team_snaps_isSet = true;
}

bool OAIPlayerGameRedZone::is_offensive_team_snaps_Set() const{
    return m_offensive_team_snaps_isSet;
}

bool OAIPlayerGameRedZone::is_offensive_team_snaps_Valid() const{
    return m_offensive_team_snaps_isValid;
}

double OAIPlayerGameRedZone::getOffensiveTouchdowns() const {
    return m_offensive_touchdowns;
}
void OAIPlayerGameRedZone::setOffensiveTouchdowns(const double &offensive_touchdowns) {
    m_offensive_touchdowns = offensive_touchdowns;
    m_offensive_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_offensive_touchdowns_Set() const{
    return m_offensive_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_offensive_touchdowns_Valid() const{
    return m_offensive_touchdowns_isValid;
}

QString OAIPlayerGameRedZone::getOpponent() const {
    return m_opponent;
}
void OAIPlayerGameRedZone::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIPlayerGameRedZone::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIPlayerGameRedZone::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIPlayerGameRedZone::getOpponentId() const {
    return m_opponent_id;
}
void OAIPlayerGameRedZone::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAIPlayerGameRedZone::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

qint32 OAIPlayerGameRedZone::getOpponentPositionRank() const {
    return m_opponent_position_rank;
}
void OAIPlayerGameRedZone::setOpponentPositionRank(const qint32 &opponent_position_rank) {
    m_opponent_position_rank = opponent_position_rank;
    m_opponent_position_rank_isSet = true;
}

bool OAIPlayerGameRedZone::is_opponent_position_rank_Set() const{
    return m_opponent_position_rank_isSet;
}

bool OAIPlayerGameRedZone::is_opponent_position_rank_Valid() const{
    return m_opponent_position_rank_isValid;
}

qint32 OAIPlayerGameRedZone::getOpponentRank() const {
    return m_opponent_rank;
}
void OAIPlayerGameRedZone::setOpponentRank(const qint32 &opponent_rank) {
    m_opponent_rank = opponent_rank;
    m_opponent_rank_isSet = true;
}

bool OAIPlayerGameRedZone::is_opponent_rank_Set() const{
    return m_opponent_rank_isSet;
}

bool OAIPlayerGameRedZone::is_opponent_rank_Valid() const{
    return m_opponent_rank_isValid;
}

double OAIPlayerGameRedZone::getPassesDefended() const {
    return m_passes_defended;
}
void OAIPlayerGameRedZone::setPassesDefended(const double &passes_defended) {
    m_passes_defended = passes_defended;
    m_passes_defended_isSet = true;
}

bool OAIPlayerGameRedZone::is_passes_defended_Set() const{
    return m_passes_defended_isSet;
}

bool OAIPlayerGameRedZone::is_passes_defended_Valid() const{
    return m_passes_defended_isValid;
}

double OAIPlayerGameRedZone::getPassingAttempts() const {
    return m_passing_attempts;
}
void OAIPlayerGameRedZone::setPassingAttempts(const double &passing_attempts) {
    m_passing_attempts = passing_attempts;
    m_passing_attempts_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_attempts_Set() const{
    return m_passing_attempts_isSet;
}

bool OAIPlayerGameRedZone::is_passing_attempts_Valid() const{
    return m_passing_attempts_isValid;
}

double OAIPlayerGameRedZone::getPassingCompletionPercentage() const {
    return m_passing_completion_percentage;
}
void OAIPlayerGameRedZone::setPassingCompletionPercentage(const double &passing_completion_percentage) {
    m_passing_completion_percentage = passing_completion_percentage;
    m_passing_completion_percentage_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_completion_percentage_Set() const{
    return m_passing_completion_percentage_isSet;
}

bool OAIPlayerGameRedZone::is_passing_completion_percentage_Valid() const{
    return m_passing_completion_percentage_isValid;
}

double OAIPlayerGameRedZone::getPassingCompletions() const {
    return m_passing_completions;
}
void OAIPlayerGameRedZone::setPassingCompletions(const double &passing_completions) {
    m_passing_completions = passing_completions;
    m_passing_completions_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_completions_Set() const{
    return m_passing_completions_isSet;
}

bool OAIPlayerGameRedZone::is_passing_completions_Valid() const{
    return m_passing_completions_isValid;
}

double OAIPlayerGameRedZone::getPassingInterceptions() const {
    return m_passing_interceptions;
}
void OAIPlayerGameRedZone::setPassingInterceptions(const double &passing_interceptions) {
    m_passing_interceptions = passing_interceptions;
    m_passing_interceptions_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_interceptions_Set() const{
    return m_passing_interceptions_isSet;
}

bool OAIPlayerGameRedZone::is_passing_interceptions_Valid() const{
    return m_passing_interceptions_isValid;
}

double OAIPlayerGameRedZone::getPassingLong() const {
    return m_passing_long;
}
void OAIPlayerGameRedZone::setPassingLong(const double &passing_long) {
    m_passing_long = passing_long;
    m_passing_long_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_long_Set() const{
    return m_passing_long_isSet;
}

bool OAIPlayerGameRedZone::is_passing_long_Valid() const{
    return m_passing_long_isValid;
}

double OAIPlayerGameRedZone::getPassingRating() const {
    return m_passing_rating;
}
void OAIPlayerGameRedZone::setPassingRating(const double &passing_rating) {
    m_passing_rating = passing_rating;
    m_passing_rating_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_rating_Set() const{
    return m_passing_rating_isSet;
}

bool OAIPlayerGameRedZone::is_passing_rating_Valid() const{
    return m_passing_rating_isValid;
}

double OAIPlayerGameRedZone::getPassingSackYards() const {
    return m_passing_sack_yards;
}
void OAIPlayerGameRedZone::setPassingSackYards(const double &passing_sack_yards) {
    m_passing_sack_yards = passing_sack_yards;
    m_passing_sack_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_sack_yards_Set() const{
    return m_passing_sack_yards_isSet;
}

bool OAIPlayerGameRedZone::is_passing_sack_yards_Valid() const{
    return m_passing_sack_yards_isValid;
}

double OAIPlayerGameRedZone::getPassingSacks() const {
    return m_passing_sacks;
}
void OAIPlayerGameRedZone::setPassingSacks(const double &passing_sacks) {
    m_passing_sacks = passing_sacks;
    m_passing_sacks_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_sacks_Set() const{
    return m_passing_sacks_isSet;
}

bool OAIPlayerGameRedZone::is_passing_sacks_Valid() const{
    return m_passing_sacks_isValid;
}

double OAIPlayerGameRedZone::getPassingTouchdowns() const {
    return m_passing_touchdowns;
}
void OAIPlayerGameRedZone::setPassingTouchdowns(const double &passing_touchdowns) {
    m_passing_touchdowns = passing_touchdowns;
    m_passing_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_touchdowns_Set() const{
    return m_passing_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_passing_touchdowns_Valid() const{
    return m_passing_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getPassingYards() const {
    return m_passing_yards;
}
void OAIPlayerGameRedZone::setPassingYards(const double &passing_yards) {
    m_passing_yards = passing_yards;
    m_passing_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_yards_Set() const{
    return m_passing_yards_isSet;
}

bool OAIPlayerGameRedZone::is_passing_yards_Valid() const{
    return m_passing_yards_isValid;
}

double OAIPlayerGameRedZone::getPassingYardsPerAttempt() const {
    return m_passing_yards_per_attempt;
}
void OAIPlayerGameRedZone::setPassingYardsPerAttempt(const double &passing_yards_per_attempt) {
    m_passing_yards_per_attempt = passing_yards_per_attempt;
    m_passing_yards_per_attempt_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_yards_per_attempt_Set() const{
    return m_passing_yards_per_attempt_isSet;
}

bool OAIPlayerGameRedZone::is_passing_yards_per_attempt_Valid() const{
    return m_passing_yards_per_attempt_isValid;
}

double OAIPlayerGameRedZone::getPassingYardsPerCompletion() const {
    return m_passing_yards_per_completion;
}
void OAIPlayerGameRedZone::setPassingYardsPerCompletion(const double &passing_yards_per_completion) {
    m_passing_yards_per_completion = passing_yards_per_completion;
    m_passing_yards_per_completion_isSet = true;
}

bool OAIPlayerGameRedZone::is_passing_yards_per_completion_Set() const{
    return m_passing_yards_per_completion_isSet;
}

bool OAIPlayerGameRedZone::is_passing_yards_per_completion_Valid() const{
    return m_passing_yards_per_completion_isValid;
}

qint32 OAIPlayerGameRedZone::getPlayed() const {
    return m_played;
}
void OAIPlayerGameRedZone::setPlayed(const qint32 &played) {
    m_played = played;
    m_played_isSet = true;
}

bool OAIPlayerGameRedZone::is_played_Set() const{
    return m_played_isSet;
}

bool OAIPlayerGameRedZone::is_played_Valid() const{
    return m_played_isValid;
}

qint32 OAIPlayerGameRedZone::getPlayerGameId() const {
    return m_player_game_id;
}
void OAIPlayerGameRedZone::setPlayerGameId(const qint32 &player_game_id) {
    m_player_game_id = player_game_id;
    m_player_game_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_player_game_id_Set() const{
    return m_player_game_id_isSet;
}

bool OAIPlayerGameRedZone::is_player_game_id_Valid() const{
    return m_player_game_id_isValid;
}

qint32 OAIPlayerGameRedZone::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerGameRedZone::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerGameRedZone::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerGameRedZone::getPlayingSurface() const {
    return m_playing_surface;
}
void OAIPlayerGameRedZone::setPlayingSurface(const QString &playing_surface) {
    m_playing_surface = playing_surface;
    m_playing_surface_isSet = true;
}

bool OAIPlayerGameRedZone::is_playing_surface_Set() const{
    return m_playing_surface_isSet;
}

bool OAIPlayerGameRedZone::is_playing_surface_Valid() const{
    return m_playing_surface_isValid;
}

QString OAIPlayerGameRedZone::getPosition() const {
    return m_position;
}
void OAIPlayerGameRedZone::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerGameRedZone::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerGameRedZone::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerGameRedZone::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerGameRedZone::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerGameRedZone::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerGameRedZone::is_position_category_Valid() const{
    return m_position_category_isValid;
}

double OAIPlayerGameRedZone::getPuntAverage() const {
    return m_punt_average;
}
void OAIPlayerGameRedZone::setPuntAverage(const double &punt_average) {
    m_punt_average = punt_average;
    m_punt_average_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_average_Set() const{
    return m_punt_average_isSet;
}

bool OAIPlayerGameRedZone::is_punt_average_Valid() const{
    return m_punt_average_isValid;
}

double OAIPlayerGameRedZone::getPuntInside20() const {
    return m_punt_inside20;
}
void OAIPlayerGameRedZone::setPuntInside20(const double &punt_inside20) {
    m_punt_inside20 = punt_inside20;
    m_punt_inside20_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_inside20_Set() const{
    return m_punt_inside20_isSet;
}

bool OAIPlayerGameRedZone::is_punt_inside20_Valid() const{
    return m_punt_inside20_isValid;
}

double OAIPlayerGameRedZone::getPuntLong() const {
    return m_punt_long;
}
void OAIPlayerGameRedZone::setPuntLong(const double &punt_long) {
    m_punt_long = punt_long;
    m_punt_long_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_long_Set() const{
    return m_punt_long_isSet;
}

bool OAIPlayerGameRedZone::is_punt_long_Valid() const{
    return m_punt_long_isValid;
}

double OAIPlayerGameRedZone::getPuntNetAverage() const {
    return m_punt_net_average;
}
void OAIPlayerGameRedZone::setPuntNetAverage(const double &punt_net_average) {
    m_punt_net_average = punt_net_average;
    m_punt_net_average_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_net_average_Set() const{
    return m_punt_net_average_isSet;
}

bool OAIPlayerGameRedZone::is_punt_net_average_Valid() const{
    return m_punt_net_average_isValid;
}

double OAIPlayerGameRedZone::getPuntNetYards() const {
    return m_punt_net_yards;
}
void OAIPlayerGameRedZone::setPuntNetYards(const double &punt_net_yards) {
    m_punt_net_yards = punt_net_yards;
    m_punt_net_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_net_yards_Set() const{
    return m_punt_net_yards_isSet;
}

bool OAIPlayerGameRedZone::is_punt_net_yards_Valid() const{
    return m_punt_net_yards_isValid;
}

double OAIPlayerGameRedZone::getPuntReturnFairCatches() const {
    return m_punt_return_fair_catches;
}
void OAIPlayerGameRedZone::setPuntReturnFairCatches(const double &punt_return_fair_catches) {
    m_punt_return_fair_catches = punt_return_fair_catches;
    m_punt_return_fair_catches_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_return_fair_catches_Set() const{
    return m_punt_return_fair_catches_isSet;
}

bool OAIPlayerGameRedZone::is_punt_return_fair_catches_Valid() const{
    return m_punt_return_fair_catches_isValid;
}

double OAIPlayerGameRedZone::getPuntReturnLong() const {
    return m_punt_return_long;
}
void OAIPlayerGameRedZone::setPuntReturnLong(const double &punt_return_long) {
    m_punt_return_long = punt_return_long;
    m_punt_return_long_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_return_long_Set() const{
    return m_punt_return_long_isSet;
}

bool OAIPlayerGameRedZone::is_punt_return_long_Valid() const{
    return m_punt_return_long_isValid;
}

double OAIPlayerGameRedZone::getPuntReturnTouchdowns() const {
    return m_punt_return_touchdowns;
}
void OAIPlayerGameRedZone::setPuntReturnTouchdowns(const double &punt_return_touchdowns) {
    m_punt_return_touchdowns = punt_return_touchdowns;
    m_punt_return_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_return_touchdowns_Set() const{
    return m_punt_return_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_punt_return_touchdowns_Valid() const{
    return m_punt_return_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getPuntReturnYards() const {
    return m_punt_return_yards;
}
void OAIPlayerGameRedZone::setPuntReturnYards(const double &punt_return_yards) {
    m_punt_return_yards = punt_return_yards;
    m_punt_return_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_return_yards_Set() const{
    return m_punt_return_yards_isSet;
}

bool OAIPlayerGameRedZone::is_punt_return_yards_Valid() const{
    return m_punt_return_yards_isValid;
}

double OAIPlayerGameRedZone::getPuntReturnYardsPerAttempt() const {
    return m_punt_return_yards_per_attempt;
}
void OAIPlayerGameRedZone::setPuntReturnYardsPerAttempt(const double &punt_return_yards_per_attempt) {
    m_punt_return_yards_per_attempt = punt_return_yards_per_attempt;
    m_punt_return_yards_per_attempt_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_return_yards_per_attempt_Set() const{
    return m_punt_return_yards_per_attempt_isSet;
}

bool OAIPlayerGameRedZone::is_punt_return_yards_per_attempt_Valid() const{
    return m_punt_return_yards_per_attempt_isValid;
}

double OAIPlayerGameRedZone::getPuntReturns() const {
    return m_punt_returns;
}
void OAIPlayerGameRedZone::setPuntReturns(const double &punt_returns) {
    m_punt_returns = punt_returns;
    m_punt_returns_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_returns_Set() const{
    return m_punt_returns_isSet;
}

bool OAIPlayerGameRedZone::is_punt_returns_Valid() const{
    return m_punt_returns_isValid;
}

double OAIPlayerGameRedZone::getPuntTouchbacks() const {
    return m_punt_touchbacks;
}
void OAIPlayerGameRedZone::setPuntTouchbacks(const double &punt_touchbacks) {
    m_punt_touchbacks = punt_touchbacks;
    m_punt_touchbacks_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_touchbacks_Set() const{
    return m_punt_touchbacks_isSet;
}

bool OAIPlayerGameRedZone::is_punt_touchbacks_Valid() const{
    return m_punt_touchbacks_isValid;
}

double OAIPlayerGameRedZone::getPuntYards() const {
    return m_punt_yards;
}
void OAIPlayerGameRedZone::setPuntYards(const double &punt_yards) {
    m_punt_yards = punt_yards;
    m_punt_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_punt_yards_Set() const{
    return m_punt_yards_isSet;
}

bool OAIPlayerGameRedZone::is_punt_yards_Valid() const{
    return m_punt_yards_isValid;
}

double OAIPlayerGameRedZone::getPunts() const {
    return m_punts;
}
void OAIPlayerGameRedZone::setPunts(const double &punts) {
    m_punts = punts;
    m_punts_isSet = true;
}

bool OAIPlayerGameRedZone::is_punts_Set() const{
    return m_punts_isSet;
}

bool OAIPlayerGameRedZone::is_punts_Valid() const{
    return m_punts_isValid;
}

double OAIPlayerGameRedZone::getPuntsHadBlocked() const {
    return m_punts_had_blocked;
}
void OAIPlayerGameRedZone::setPuntsHadBlocked(const double &punts_had_blocked) {
    m_punts_had_blocked = punts_had_blocked;
    m_punts_had_blocked_isSet = true;
}

bool OAIPlayerGameRedZone::is_punts_had_blocked_Set() const{
    return m_punts_had_blocked_isSet;
}

bool OAIPlayerGameRedZone::is_punts_had_blocked_Valid() const{
    return m_punts_had_blocked_isValid;
}

double OAIPlayerGameRedZone::getQuarterbackHits() const {
    return m_quarterback_hits;
}
void OAIPlayerGameRedZone::setQuarterbackHits(const double &quarterback_hits) {
    m_quarterback_hits = quarterback_hits;
    m_quarterback_hits_isSet = true;
}

bool OAIPlayerGameRedZone::is_quarterback_hits_Set() const{
    return m_quarterback_hits_isSet;
}

bool OAIPlayerGameRedZone::is_quarterback_hits_Valid() const{
    return m_quarterback_hits_isValid;
}

double OAIPlayerGameRedZone::getReceivingLong() const {
    return m_receiving_long;
}
void OAIPlayerGameRedZone::setReceivingLong(const double &receiving_long) {
    m_receiving_long = receiving_long;
    m_receiving_long_isSet = true;
}

bool OAIPlayerGameRedZone::is_receiving_long_Set() const{
    return m_receiving_long_isSet;
}

bool OAIPlayerGameRedZone::is_receiving_long_Valid() const{
    return m_receiving_long_isValid;
}

double OAIPlayerGameRedZone::getReceivingTargets() const {
    return m_receiving_targets;
}
void OAIPlayerGameRedZone::setReceivingTargets(const double &receiving_targets) {
    m_receiving_targets = receiving_targets;
    m_receiving_targets_isSet = true;
}

bool OAIPlayerGameRedZone::is_receiving_targets_Set() const{
    return m_receiving_targets_isSet;
}

bool OAIPlayerGameRedZone::is_receiving_targets_Valid() const{
    return m_receiving_targets_isValid;
}

double OAIPlayerGameRedZone::getReceivingTouchdowns() const {
    return m_receiving_touchdowns;
}
void OAIPlayerGameRedZone::setReceivingTouchdowns(const double &receiving_touchdowns) {
    m_receiving_touchdowns = receiving_touchdowns;
    m_receiving_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_receiving_touchdowns_Set() const{
    return m_receiving_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_receiving_touchdowns_Valid() const{
    return m_receiving_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getReceivingYards() const {
    return m_receiving_yards;
}
void OAIPlayerGameRedZone::setReceivingYards(const double &receiving_yards) {
    m_receiving_yards = receiving_yards;
    m_receiving_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_receiving_yards_Set() const{
    return m_receiving_yards_isSet;
}

bool OAIPlayerGameRedZone::is_receiving_yards_Valid() const{
    return m_receiving_yards_isValid;
}

double OAIPlayerGameRedZone::getReceivingYardsPerReception() const {
    return m_receiving_yards_per_reception;
}
void OAIPlayerGameRedZone::setReceivingYardsPerReception(const double &receiving_yards_per_reception) {
    m_receiving_yards_per_reception = receiving_yards_per_reception;
    m_receiving_yards_per_reception_isSet = true;
}

bool OAIPlayerGameRedZone::is_receiving_yards_per_reception_Set() const{
    return m_receiving_yards_per_reception_isSet;
}

bool OAIPlayerGameRedZone::is_receiving_yards_per_reception_Valid() const{
    return m_receiving_yards_per_reception_isValid;
}

double OAIPlayerGameRedZone::getReceivingYardsPerTarget() const {
    return m_receiving_yards_per_target;
}
void OAIPlayerGameRedZone::setReceivingYardsPerTarget(const double &receiving_yards_per_target) {
    m_receiving_yards_per_target = receiving_yards_per_target;
    m_receiving_yards_per_target_isSet = true;
}

bool OAIPlayerGameRedZone::is_receiving_yards_per_target_Set() const{
    return m_receiving_yards_per_target_isSet;
}

bool OAIPlayerGameRedZone::is_receiving_yards_per_target_Valid() const{
    return m_receiving_yards_per_target_isValid;
}

double OAIPlayerGameRedZone::getReceptionPercentage() const {
    return m_reception_percentage;
}
void OAIPlayerGameRedZone::setReceptionPercentage(const double &reception_percentage) {
    m_reception_percentage = reception_percentage;
    m_reception_percentage_isSet = true;
}

bool OAIPlayerGameRedZone::is_reception_percentage_Set() const{
    return m_reception_percentage_isSet;
}

bool OAIPlayerGameRedZone::is_reception_percentage_Valid() const{
    return m_reception_percentage_isValid;
}

double OAIPlayerGameRedZone::getReceptions() const {
    return m_receptions;
}
void OAIPlayerGameRedZone::setReceptions(const double &receptions) {
    m_receptions = receptions;
    m_receptions_isSet = true;
}

bool OAIPlayerGameRedZone::is_receptions_Set() const{
    return m_receptions_isSet;
}

bool OAIPlayerGameRedZone::is_receptions_Valid() const{
    return m_receptions_isValid;
}

double OAIPlayerGameRedZone::getRushingAttempts() const {
    return m_rushing_attempts;
}
void OAIPlayerGameRedZone::setRushingAttempts(const double &rushing_attempts) {
    m_rushing_attempts = rushing_attempts;
    m_rushing_attempts_isSet = true;
}

bool OAIPlayerGameRedZone::is_rushing_attempts_Set() const{
    return m_rushing_attempts_isSet;
}

bool OAIPlayerGameRedZone::is_rushing_attempts_Valid() const{
    return m_rushing_attempts_isValid;
}

double OAIPlayerGameRedZone::getRushingLong() const {
    return m_rushing_long;
}
void OAIPlayerGameRedZone::setRushingLong(const double &rushing_long) {
    m_rushing_long = rushing_long;
    m_rushing_long_isSet = true;
}

bool OAIPlayerGameRedZone::is_rushing_long_Set() const{
    return m_rushing_long_isSet;
}

bool OAIPlayerGameRedZone::is_rushing_long_Valid() const{
    return m_rushing_long_isValid;
}

double OAIPlayerGameRedZone::getRushingTouchdowns() const {
    return m_rushing_touchdowns;
}
void OAIPlayerGameRedZone::setRushingTouchdowns(const double &rushing_touchdowns) {
    m_rushing_touchdowns = rushing_touchdowns;
    m_rushing_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_rushing_touchdowns_Set() const{
    return m_rushing_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_rushing_touchdowns_Valid() const{
    return m_rushing_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getRushingYards() const {
    return m_rushing_yards;
}
void OAIPlayerGameRedZone::setRushingYards(const double &rushing_yards) {
    m_rushing_yards = rushing_yards;
    m_rushing_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_rushing_yards_Set() const{
    return m_rushing_yards_isSet;
}

bool OAIPlayerGameRedZone::is_rushing_yards_Valid() const{
    return m_rushing_yards_isValid;
}

double OAIPlayerGameRedZone::getRushingYardsPerAttempt() const {
    return m_rushing_yards_per_attempt;
}
void OAIPlayerGameRedZone::setRushingYardsPerAttempt(const double &rushing_yards_per_attempt) {
    m_rushing_yards_per_attempt = rushing_yards_per_attempt;
    m_rushing_yards_per_attempt_isSet = true;
}

bool OAIPlayerGameRedZone::is_rushing_yards_per_attempt_Set() const{
    return m_rushing_yards_per_attempt_isSet;
}

bool OAIPlayerGameRedZone::is_rushing_yards_per_attempt_Valid() const{
    return m_rushing_yards_per_attempt_isValid;
}

double OAIPlayerGameRedZone::getSackYards() const {
    return m_sack_yards;
}
void OAIPlayerGameRedZone::setSackYards(const double &sack_yards) {
    m_sack_yards = sack_yards;
    m_sack_yards_isSet = true;
}

bool OAIPlayerGameRedZone::is_sack_yards_Set() const{
    return m_sack_yards_isSet;
}

bool OAIPlayerGameRedZone::is_sack_yards_Valid() const{
    return m_sack_yards_isValid;
}

double OAIPlayerGameRedZone::getSacks() const {
    return m_sacks;
}
void OAIPlayerGameRedZone::setSacks(const double &sacks) {
    m_sacks = sacks;
    m_sacks_isSet = true;
}

bool OAIPlayerGameRedZone::is_sacks_Set() const{
    return m_sacks_isSet;
}

bool OAIPlayerGameRedZone::is_sacks_Valid() const{
    return m_sacks_isValid;
}

double OAIPlayerGameRedZone::getSafeties() const {
    return m_safeties;
}
void OAIPlayerGameRedZone::setSafeties(const double &safeties) {
    m_safeties = safeties;
    m_safeties_isSet = true;
}

bool OAIPlayerGameRedZone::is_safeties_Set() const{
    return m_safeties_isSet;
}

bool OAIPlayerGameRedZone::is_safeties_Valid() const{
    return m_safeties_isValid;
}

double OAIPlayerGameRedZone::getSafetiesAllowed() const {
    return m_safeties_allowed;
}
void OAIPlayerGameRedZone::setSafetiesAllowed(const double &safeties_allowed) {
    m_safeties_allowed = safeties_allowed;
    m_safeties_allowed_isSet = true;
}

bool OAIPlayerGameRedZone::is_safeties_allowed_Set() const{
    return m_safeties_allowed_isSet;
}

bool OAIPlayerGameRedZone::is_safeties_allowed_Valid() const{
    return m_safeties_allowed_isValid;
}

qint32 OAIPlayerGameRedZone::getScoreId() const {
    return m_score_id;
}
void OAIPlayerGameRedZone::setScoreId(const qint32 &score_id) {
    m_score_id = score_id;
    m_score_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_score_id_Set() const{
    return m_score_id_isSet;
}

bool OAIPlayerGameRedZone::is_score_id_Valid() const{
    return m_score_id_isValid;
}

QList<OAIScoringDetail> OAIPlayerGameRedZone::getScoringDetails() const {
    return m_scoring_details;
}
void OAIPlayerGameRedZone::setScoringDetails(const QList<OAIScoringDetail> &scoring_details) {
    m_scoring_details = scoring_details;
    m_scoring_details_isSet = true;
}

bool OAIPlayerGameRedZone::is_scoring_details_Set() const{
    return m_scoring_details_isSet;
}

bool OAIPlayerGameRedZone::is_scoring_details_Valid() const{
    return m_scoring_details_isValid;
}

qint32 OAIPlayerGameRedZone::getSeason() const {
    return m_season;
}
void OAIPlayerGameRedZone::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayerGameRedZone::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayerGameRedZone::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIPlayerGameRedZone::getSeasonType() const {
    return m_season_type;
}
void OAIPlayerGameRedZone::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIPlayerGameRedZone::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIPlayerGameRedZone::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIPlayerGameRedZone::getShortName() const {
    return m_short_name;
}
void OAIPlayerGameRedZone::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayerGameRedZone::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayerGameRedZone::is_short_name_Valid() const{
    return m_short_name_isValid;
}

bool OAIPlayerGameRedZone::isSnapCountsConfirmed() const {
    return m_snap_counts_confirmed;
}
void OAIPlayerGameRedZone::setSnapCountsConfirmed(const bool &snap_counts_confirmed) {
    m_snap_counts_confirmed = snap_counts_confirmed;
    m_snap_counts_confirmed_isSet = true;
}

bool OAIPlayerGameRedZone::is_snap_counts_confirmed_Set() const{
    return m_snap_counts_confirmed_isSet;
}

bool OAIPlayerGameRedZone::is_snap_counts_confirmed_Valid() const{
    return m_snap_counts_confirmed_isValid;
}

double OAIPlayerGameRedZone::getSoloTackles() const {
    return m_solo_tackles;
}
void OAIPlayerGameRedZone::setSoloTackles(const double &solo_tackles) {
    m_solo_tackles = solo_tackles;
    m_solo_tackles_isSet = true;
}

bool OAIPlayerGameRedZone::is_solo_tackles_Set() const{
    return m_solo_tackles_isSet;
}

bool OAIPlayerGameRedZone::is_solo_tackles_Valid() const{
    return m_solo_tackles_isValid;
}

double OAIPlayerGameRedZone::getSpecialTeamsAssistedTackles() const {
    return m_special_teams_assisted_tackles;
}
void OAIPlayerGameRedZone::setSpecialTeamsAssistedTackles(const double &special_teams_assisted_tackles) {
    m_special_teams_assisted_tackles = special_teams_assisted_tackles;
    m_special_teams_assisted_tackles_isSet = true;
}

bool OAIPlayerGameRedZone::is_special_teams_assisted_tackles_Set() const{
    return m_special_teams_assisted_tackles_isSet;
}

bool OAIPlayerGameRedZone::is_special_teams_assisted_tackles_Valid() const{
    return m_special_teams_assisted_tackles_isValid;
}

double OAIPlayerGameRedZone::getSpecialTeamsFumblesForced() const {
    return m_special_teams_fumbles_forced;
}
void OAIPlayerGameRedZone::setSpecialTeamsFumblesForced(const double &special_teams_fumbles_forced) {
    m_special_teams_fumbles_forced = special_teams_fumbles_forced;
    m_special_teams_fumbles_forced_isSet = true;
}

bool OAIPlayerGameRedZone::is_special_teams_fumbles_forced_Set() const{
    return m_special_teams_fumbles_forced_isSet;
}

bool OAIPlayerGameRedZone::is_special_teams_fumbles_forced_Valid() const{
    return m_special_teams_fumbles_forced_isValid;
}

double OAIPlayerGameRedZone::getSpecialTeamsFumblesRecovered() const {
    return m_special_teams_fumbles_recovered;
}
void OAIPlayerGameRedZone::setSpecialTeamsFumblesRecovered(const double &special_teams_fumbles_recovered) {
    m_special_teams_fumbles_recovered = special_teams_fumbles_recovered;
    m_special_teams_fumbles_recovered_isSet = true;
}

bool OAIPlayerGameRedZone::is_special_teams_fumbles_recovered_Set() const{
    return m_special_teams_fumbles_recovered_isSet;
}

bool OAIPlayerGameRedZone::is_special_teams_fumbles_recovered_Valid() const{
    return m_special_teams_fumbles_recovered_isValid;
}

qint32 OAIPlayerGameRedZone::getSpecialTeamsSnapsPlayed() const {
    return m_special_teams_snaps_played;
}
void OAIPlayerGameRedZone::setSpecialTeamsSnapsPlayed(const qint32 &special_teams_snaps_played) {
    m_special_teams_snaps_played = special_teams_snaps_played;
    m_special_teams_snaps_played_isSet = true;
}

bool OAIPlayerGameRedZone::is_special_teams_snaps_played_Set() const{
    return m_special_teams_snaps_played_isSet;
}

bool OAIPlayerGameRedZone::is_special_teams_snaps_played_Valid() const{
    return m_special_teams_snaps_played_isValid;
}

double OAIPlayerGameRedZone::getSpecialTeamsSoloTackles() const {
    return m_special_teams_solo_tackles;
}
void OAIPlayerGameRedZone::setSpecialTeamsSoloTackles(const double &special_teams_solo_tackles) {
    m_special_teams_solo_tackles = special_teams_solo_tackles;
    m_special_teams_solo_tackles_isSet = true;
}

bool OAIPlayerGameRedZone::is_special_teams_solo_tackles_Set() const{
    return m_special_teams_solo_tackles_isSet;
}

bool OAIPlayerGameRedZone::is_special_teams_solo_tackles_Valid() const{
    return m_special_teams_solo_tackles_isValid;
}

qint32 OAIPlayerGameRedZone::getSpecialTeamsTeamSnaps() const {
    return m_special_teams_team_snaps;
}
void OAIPlayerGameRedZone::setSpecialTeamsTeamSnaps(const qint32 &special_teams_team_snaps) {
    m_special_teams_team_snaps = special_teams_team_snaps;
    m_special_teams_team_snaps_isSet = true;
}

bool OAIPlayerGameRedZone::is_special_teams_team_snaps_Set() const{
    return m_special_teams_team_snaps_isSet;
}

bool OAIPlayerGameRedZone::is_special_teams_team_snaps_Valid() const{
    return m_special_teams_team_snaps_isValid;
}

double OAIPlayerGameRedZone::getSpecialTeamsTouchdowns() const {
    return m_special_teams_touchdowns;
}
void OAIPlayerGameRedZone::setSpecialTeamsTouchdowns(const double &special_teams_touchdowns) {
    m_special_teams_touchdowns = special_teams_touchdowns;
    m_special_teams_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_special_teams_touchdowns_Set() const{
    return m_special_teams_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_special_teams_touchdowns_Valid() const{
    return m_special_teams_touchdowns_isValid;
}

QString OAIPlayerGameRedZone::getStadium() const {
    return m_stadium;
}
void OAIPlayerGameRedZone::setStadium(const QString &stadium) {
    m_stadium = stadium;
    m_stadium_isSet = true;
}

bool OAIPlayerGameRedZone::is_stadium_Set() const{
    return m_stadium_isSet;
}

bool OAIPlayerGameRedZone::is_stadium_Valid() const{
    return m_stadium_isValid;
}

qint32 OAIPlayerGameRedZone::getStarted() const {
    return m_started;
}
void OAIPlayerGameRedZone::setStarted(const qint32 &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIPlayerGameRedZone::is_started_Set() const{
    return m_started_isSet;
}

bool OAIPlayerGameRedZone::is_started_Valid() const{
    return m_started_isValid;
}

double OAIPlayerGameRedZone::getTackles() const {
    return m_tackles;
}
void OAIPlayerGameRedZone::setTackles(const double &tackles) {
    m_tackles = tackles;
    m_tackles_isSet = true;
}

bool OAIPlayerGameRedZone::is_tackles_Set() const{
    return m_tackles_isSet;
}

bool OAIPlayerGameRedZone::is_tackles_Valid() const{
    return m_tackles_isValid;
}

double OAIPlayerGameRedZone::getTacklesForLoss() const {
    return m_tackles_for_loss;
}
void OAIPlayerGameRedZone::setTacklesForLoss(const double &tackles_for_loss) {
    m_tackles_for_loss = tackles_for_loss;
    m_tackles_for_loss_isSet = true;
}

bool OAIPlayerGameRedZone::is_tackles_for_loss_Set() const{
    return m_tackles_for_loss_isSet;
}

bool OAIPlayerGameRedZone::is_tackles_for_loss_Valid() const{
    return m_tackles_for_loss_isValid;
}

QString OAIPlayerGameRedZone::getTeam() const {
    return m_team;
}
void OAIPlayerGameRedZone::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerGameRedZone::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerGameRedZone::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayerGameRedZone::getTeamId() const {
    return m_team_id;
}
void OAIPlayerGameRedZone::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayerGameRedZone::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayerGameRedZone::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIPlayerGameRedZone::getTemperature() const {
    return m_temperature;
}
void OAIPlayerGameRedZone::setTemperature(const qint32 &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIPlayerGameRedZone::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIPlayerGameRedZone::is_temperature_Valid() const{
    return m_temperature_isValid;
}

double OAIPlayerGameRedZone::getTouchdowns() const {
    return m_touchdowns;
}
void OAIPlayerGameRedZone::setTouchdowns(const double &touchdowns) {
    m_touchdowns = touchdowns;
    m_touchdowns_isSet = true;
}

bool OAIPlayerGameRedZone::is_touchdowns_Set() const{
    return m_touchdowns_isSet;
}

bool OAIPlayerGameRedZone::is_touchdowns_Valid() const{
    return m_touchdowns_isValid;
}

double OAIPlayerGameRedZone::getTwoPointConversionPasses() const {
    return m_two_point_conversion_passes;
}
void OAIPlayerGameRedZone::setTwoPointConversionPasses(const double &two_point_conversion_passes) {
    m_two_point_conversion_passes = two_point_conversion_passes;
    m_two_point_conversion_passes_isSet = true;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_passes_Set() const{
    return m_two_point_conversion_passes_isSet;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_passes_Valid() const{
    return m_two_point_conversion_passes_isValid;
}

double OAIPlayerGameRedZone::getTwoPointConversionReceptions() const {
    return m_two_point_conversion_receptions;
}
void OAIPlayerGameRedZone::setTwoPointConversionReceptions(const double &two_point_conversion_receptions) {
    m_two_point_conversion_receptions = two_point_conversion_receptions;
    m_two_point_conversion_receptions_isSet = true;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_receptions_Set() const{
    return m_two_point_conversion_receptions_isSet;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_receptions_Valid() const{
    return m_two_point_conversion_receptions_isValid;
}

double OAIPlayerGameRedZone::getTwoPointConversionReturns() const {
    return m_two_point_conversion_returns;
}
void OAIPlayerGameRedZone::setTwoPointConversionReturns(const double &two_point_conversion_returns) {
    m_two_point_conversion_returns = two_point_conversion_returns;
    m_two_point_conversion_returns_isSet = true;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_returns_Set() const{
    return m_two_point_conversion_returns_isSet;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_returns_Valid() const{
    return m_two_point_conversion_returns_isValid;
}

double OAIPlayerGameRedZone::getTwoPointConversionRuns() const {
    return m_two_point_conversion_runs;
}
void OAIPlayerGameRedZone::setTwoPointConversionRuns(const double &two_point_conversion_runs) {
    m_two_point_conversion_runs = two_point_conversion_runs;
    m_two_point_conversion_runs_isSet = true;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_runs_Set() const{
    return m_two_point_conversion_runs_isSet;
}

bool OAIPlayerGameRedZone::is_two_point_conversion_runs_Valid() const{
    return m_two_point_conversion_runs_isValid;
}

qint32 OAIPlayerGameRedZone::getVictivSalary() const {
    return m_victiv_salary;
}
void OAIPlayerGameRedZone::setVictivSalary(const qint32 &victiv_salary) {
    m_victiv_salary = victiv_salary;
    m_victiv_salary_isSet = true;
}

bool OAIPlayerGameRedZone::is_victiv_salary_Set() const{
    return m_victiv_salary_isSet;
}

bool OAIPlayerGameRedZone::is_victiv_salary_Valid() const{
    return m_victiv_salary_isValid;
}

qint32 OAIPlayerGameRedZone::getWeek() const {
    return m_week;
}
void OAIPlayerGameRedZone::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIPlayerGameRedZone::is_week_Set() const{
    return m_week_isSet;
}

bool OAIPlayerGameRedZone::is_week_Valid() const{
    return m_week_isValid;
}

qint32 OAIPlayerGameRedZone::getWindSpeed() const {
    return m_wind_speed;
}
void OAIPlayerGameRedZone::setWindSpeed(const qint32 &wind_speed) {
    m_wind_speed = wind_speed;
    m_wind_speed_isSet = true;
}

bool OAIPlayerGameRedZone::is_wind_speed_Set() const{
    return m_wind_speed_isSet;
}

bool OAIPlayerGameRedZone::is_wind_speed_Valid() const{
    return m_wind_speed_isValid;
}

QString OAIPlayerGameRedZone::getYahooPosition() const {
    return m_yahoo_position;
}
void OAIPlayerGameRedZone::setYahooPosition(const QString &yahoo_position) {
    m_yahoo_position = yahoo_position;
    m_yahoo_position_isSet = true;
}

bool OAIPlayerGameRedZone::is_yahoo_position_Set() const{
    return m_yahoo_position_isSet;
}

bool OAIPlayerGameRedZone::is_yahoo_position_Valid() const{
    return m_yahoo_position_isValid;
}

qint32 OAIPlayerGameRedZone::getYahooSalary() const {
    return m_yahoo_salary;
}
void OAIPlayerGameRedZone::setYahooSalary(const qint32 &yahoo_salary) {
    m_yahoo_salary = yahoo_salary;
    m_yahoo_salary_isSet = true;
}

bool OAIPlayerGameRedZone::is_yahoo_salary_Set() const{
    return m_yahoo_salary_isSet;
}

bool OAIPlayerGameRedZone::is_yahoo_salary_Valid() const{
    return m_yahoo_salary_isValid;
}

bool OAIPlayerGameRedZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_kicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_snaps_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_team_snaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_points_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_data_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fantasy_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_ppr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goal_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_longest_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made0to19_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made20to29_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made30to39_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made40to49_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made50_plus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumble_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_out_of_bounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_own_recoveries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_practice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_practice_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_game_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_fair_catches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_return_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kick_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misc_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misc_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misc_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misc_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_fumble_recovery_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_snaps_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_team_snaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_position_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passes_defended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_completion_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_interceptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_yards_per_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playing_surface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_inside20_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_net_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_net_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_fair_catches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_return_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_touchbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_had_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarterback_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_targets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_per_reception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_yards_per_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reception_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_yards_per_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sack_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safeties_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snap_counts_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_assisted_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_fumbles_forced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_fumbles_recovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_snaps_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_solo_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_team_snaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tackles_for_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touchdowns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_passes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_receptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_returns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_point_conversion_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_victiv_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_salary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerGameRedZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
