/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerPunting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerPunting::OAIPlayerPunting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerPunting::OAIPlayerPunting() {
    this->initializeModel();
}

OAIPlayerPunting::~OAIPlayerPunting() {}

void OAIPlayerPunting::initializeModel() {

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_position_isSet = false;
    m_fantasy_position_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_player_game_id_isSet = false;
    m_player_game_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_punt_average_isSet = false;
    m_punt_average_isValid = false;

    m_punt_inside20_isSet = false;
    m_punt_inside20_isValid = false;

    m_punt_touchbacks_isSet = false;
    m_punt_touchbacks_isValid = false;

    m_punt_yards_isSet = false;
    m_punt_yards_isValid = false;

    m_punts_isSet = false;
    m_punts_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPlayerPunting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerPunting::fromJsonObject(QJsonObject json) {

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position, json[QString("FantasyPosition")]);
    m_fantasy_position_isSet = !json[QString("FantasyPosition")].isNull() && m_fantasy_position_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_player_game_id_isValid = ::OpenAPI::fromJsonValue(m_player_game_id, json[QString("PlayerGameID")]);
    m_player_game_id_isSet = !json[QString("PlayerGameID")].isNull() && m_player_game_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_punt_average_isValid = ::OpenAPI::fromJsonValue(m_punt_average, json[QString("PuntAverage")]);
    m_punt_average_isSet = !json[QString("PuntAverage")].isNull() && m_punt_average_isValid;

    m_punt_inside20_isValid = ::OpenAPI::fromJsonValue(m_punt_inside20, json[QString("PuntInside20")]);
    m_punt_inside20_isSet = !json[QString("PuntInside20")].isNull() && m_punt_inside20_isValid;

    m_punt_touchbacks_isValid = ::OpenAPI::fromJsonValue(m_punt_touchbacks, json[QString("PuntTouchbacks")]);
    m_punt_touchbacks_isSet = !json[QString("PuntTouchbacks")].isNull() && m_punt_touchbacks_isValid;

    m_punt_yards_isValid = ::OpenAPI::fromJsonValue(m_punt_yards, json[QString("PuntYards")]);
    m_punt_yards_isSet = !json[QString("PuntYards")].isNull() && m_punt_yards_isValid;

    m_punts_isValid = ::OpenAPI::fromJsonValue(m_punts, json[QString("Punts")]);
    m_punts_isSet = !json[QString("Punts")].isNull() && m_punts_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIPlayerPunting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerPunting::asJsonObject() const {
    QJsonObject obj;
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_position_isSet) {
        obj.insert(QString("FantasyPosition"), ::OpenAPI::toJsonValue(m_fantasy_position));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_player_game_id_isSet) {
        obj.insert(QString("PlayerGameID"), ::OpenAPI::toJsonValue(m_player_game_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_punt_average_isSet) {
        obj.insert(QString("PuntAverage"), ::OpenAPI::toJsonValue(m_punt_average));
    }
    if (m_punt_inside20_isSet) {
        obj.insert(QString("PuntInside20"), ::OpenAPI::toJsonValue(m_punt_inside20));
    }
    if (m_punt_touchbacks_isSet) {
        obj.insert(QString("PuntTouchbacks"), ::OpenAPI::toJsonValue(m_punt_touchbacks));
    }
    if (m_punt_yards_isSet) {
        obj.insert(QString("PuntYards"), ::OpenAPI::toJsonValue(m_punt_yards));
    }
    if (m_punts_isSet) {
        obj.insert(QString("Punts"), ::OpenAPI::toJsonValue(m_punts));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

double OAIPlayerPunting::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerPunting::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerPunting::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerPunting::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

QString OAIPlayerPunting::getFantasyPosition() const {
    return m_fantasy_position;
}
void OAIPlayerPunting::setFantasyPosition(const QString &fantasy_position) {
    m_fantasy_position = fantasy_position;
    m_fantasy_position_isSet = true;
}

bool OAIPlayerPunting::is_fantasy_position_Set() const{
    return m_fantasy_position_isSet;
}

bool OAIPlayerPunting::is_fantasy_position_Valid() const{
    return m_fantasy_position_isValid;
}

QString OAIPlayerPunting::getName() const {
    return m_name;
}
void OAIPlayerPunting::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerPunting::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerPunting::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerPunting::getNumber() const {
    return m_number;
}
void OAIPlayerPunting::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerPunting::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerPunting::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlayerPunting::getPlayerGameId() const {
    return m_player_game_id;
}
void OAIPlayerPunting::setPlayerGameId(const qint32 &player_game_id) {
    m_player_game_id = player_game_id;
    m_player_game_id_isSet = true;
}

bool OAIPlayerPunting::is_player_game_id_Set() const{
    return m_player_game_id_isSet;
}

bool OAIPlayerPunting::is_player_game_id_Valid() const{
    return m_player_game_id_isValid;
}

qint32 OAIPlayerPunting::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerPunting::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerPunting::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerPunting::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerPunting::getPosition() const {
    return m_position;
}
void OAIPlayerPunting::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerPunting::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerPunting::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerPunting::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerPunting::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerPunting::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerPunting::is_position_category_Valid() const{
    return m_position_category_isValid;
}

double OAIPlayerPunting::getPuntAverage() const {
    return m_punt_average;
}
void OAIPlayerPunting::setPuntAverage(const double &punt_average) {
    m_punt_average = punt_average;
    m_punt_average_isSet = true;
}

bool OAIPlayerPunting::is_punt_average_Set() const{
    return m_punt_average_isSet;
}

bool OAIPlayerPunting::is_punt_average_Valid() const{
    return m_punt_average_isValid;
}

qint32 OAIPlayerPunting::getPuntInside20() const {
    return m_punt_inside20;
}
void OAIPlayerPunting::setPuntInside20(const qint32 &punt_inside20) {
    m_punt_inside20 = punt_inside20;
    m_punt_inside20_isSet = true;
}

bool OAIPlayerPunting::is_punt_inside20_Set() const{
    return m_punt_inside20_isSet;
}

bool OAIPlayerPunting::is_punt_inside20_Valid() const{
    return m_punt_inside20_isValid;
}

qint32 OAIPlayerPunting::getPuntTouchbacks() const {
    return m_punt_touchbacks;
}
void OAIPlayerPunting::setPuntTouchbacks(const qint32 &punt_touchbacks) {
    m_punt_touchbacks = punt_touchbacks;
    m_punt_touchbacks_isSet = true;
}

bool OAIPlayerPunting::is_punt_touchbacks_Set() const{
    return m_punt_touchbacks_isSet;
}

bool OAIPlayerPunting::is_punt_touchbacks_Valid() const{
    return m_punt_touchbacks_isValid;
}

qint32 OAIPlayerPunting::getPuntYards() const {
    return m_punt_yards;
}
void OAIPlayerPunting::setPuntYards(const qint32 &punt_yards) {
    m_punt_yards = punt_yards;
    m_punt_yards_isSet = true;
}

bool OAIPlayerPunting::is_punt_yards_Set() const{
    return m_punt_yards_isSet;
}

bool OAIPlayerPunting::is_punt_yards_Valid() const{
    return m_punt_yards_isValid;
}

qint32 OAIPlayerPunting::getPunts() const {
    return m_punts;
}
void OAIPlayerPunting::setPunts(const qint32 &punts) {
    m_punts = punts;
    m_punts_isSet = true;
}

bool OAIPlayerPunting::is_punts_Set() const{
    return m_punts_isSet;
}

bool OAIPlayerPunting::is_punts_Valid() const{
    return m_punts_isValid;
}

QString OAIPlayerPunting::getShortName() const {
    return m_short_name;
}
void OAIPlayerPunting::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayerPunting::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayerPunting::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIPlayerPunting::getTeam() const {
    return m_team;
}
void OAIPlayerPunting::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerPunting::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerPunting::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIPlayerPunting::getUpdated() const {
    return m_updated;
}
void OAIPlayerPunting::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayerPunting::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayerPunting::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPlayerPunting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_inside20_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_touchbacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punt_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_punts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerPunting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
