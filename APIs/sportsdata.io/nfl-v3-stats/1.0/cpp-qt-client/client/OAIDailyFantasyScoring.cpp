/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyFantasyScoring.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyFantasyScoring::OAIDailyFantasyScoring(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyFantasyScoring::OAIDailyFantasyScoring() {
    this->initializeModel();
}

OAIDailyFantasyScoring::~OAIDailyFantasyScoring() {}

void OAIDailyFantasyScoring::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_fantasy_draft_isSet = false;
    m_fantasy_points_fantasy_draft_isValid = false;

    m_fantasy_points_ppr_isSet = false;
    m_fantasy_points_ppr_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_has_started_isSet = false;
    m_has_started_isValid = false;

    m_is_in_progress_isSet = false;
    m_is_in_progress_isValid = false;

    m_is_over_isSet = false;
    m_is_over_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIDailyFantasyScoring::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyFantasyScoring::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_fantasy_draft_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fantasy_draft, json[QString("FantasyPointsFantasyDraft")]);
    m_fantasy_points_fantasy_draft_isSet = !json[QString("FantasyPointsFantasyDraft")].isNull() && m_fantasy_points_fantasy_draft_isValid;

    m_fantasy_points_ppr_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_ppr, json[QString("FantasyPointsPPR")]);
    m_fantasy_points_ppr_isSet = !json[QString("FantasyPointsPPR")].isNull() && m_fantasy_points_ppr_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_has_started_isValid = ::OpenAPI::fromJsonValue(m_has_started, json[QString("HasStarted")]);
    m_has_started_isSet = !json[QString("HasStarted")].isNull() && m_has_started_isValid;

    m_is_in_progress_isValid = ::OpenAPI::fromJsonValue(m_is_in_progress, json[QString("IsInProgress")]);
    m_is_in_progress_isSet = !json[QString("IsInProgress")].isNull() && m_is_in_progress_isValid;

    m_is_over_isValid = ::OpenAPI::fromJsonValue(m_is_over, json[QString("IsOver")]);
    m_is_over_isSet = !json[QString("IsOver")].isNull() && m_is_over_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;
}

QString OAIDailyFantasyScoring::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyFantasyScoring::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_fantasy_draft_isSet) {
        obj.insert(QString("FantasyPointsFantasyDraft"), ::OpenAPI::toJsonValue(m_fantasy_points_fantasy_draft));
    }
    if (m_fantasy_points_ppr_isSet) {
        obj.insert(QString("FantasyPointsPPR"), ::OpenAPI::toJsonValue(m_fantasy_points_ppr));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_has_started_isSet) {
        obj.insert(QString("HasStarted"), ::OpenAPI::toJsonValue(m_has_started));
    }
    if (m_is_in_progress_isSet) {
        obj.insert(QString("IsInProgress"), ::OpenAPI::toJsonValue(m_is_in_progress));
    }
    if (m_is_over_isSet) {
        obj.insert(QString("IsOver"), ::OpenAPI::toJsonValue(m_is_over));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QString OAIDailyFantasyScoring::getDate() const {
    return m_date;
}
void OAIDailyFantasyScoring::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDailyFantasyScoring::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDailyFantasyScoring::is_date_Valid() const{
    return m_date_isValid;
}

double OAIDailyFantasyScoring::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIDailyFantasyScoring::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIDailyFantasyScoring::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIDailyFantasyScoring::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAIDailyFantasyScoring::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAIDailyFantasyScoring::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAIDailyFantasyScoring::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAIDailyFantasyScoring::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAIDailyFantasyScoring::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAIDailyFantasyScoring::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAIDailyFantasyScoring::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAIDailyFantasyScoring::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAIDailyFantasyScoring::getFantasyPointsFantasyDraft() const {
    return m_fantasy_points_fantasy_draft;
}
void OAIDailyFantasyScoring::setFantasyPointsFantasyDraft(const double &fantasy_points_fantasy_draft) {
    m_fantasy_points_fantasy_draft = fantasy_points_fantasy_draft;
    m_fantasy_points_fantasy_draft_isSet = true;
}

bool OAIDailyFantasyScoring::is_fantasy_points_fantasy_draft_Set() const{
    return m_fantasy_points_fantasy_draft_isSet;
}

bool OAIDailyFantasyScoring::is_fantasy_points_fantasy_draft_Valid() const{
    return m_fantasy_points_fantasy_draft_isValid;
}

double OAIDailyFantasyScoring::getFantasyPointsPpr() const {
    return m_fantasy_points_ppr;
}
void OAIDailyFantasyScoring::setFantasyPointsPpr(const double &fantasy_points_ppr) {
    m_fantasy_points_ppr = fantasy_points_ppr;
    m_fantasy_points_ppr_isSet = true;
}

bool OAIDailyFantasyScoring::is_fantasy_points_ppr_Set() const{
    return m_fantasy_points_ppr_isSet;
}

bool OAIDailyFantasyScoring::is_fantasy_points_ppr_Valid() const{
    return m_fantasy_points_ppr_isValid;
}

double OAIDailyFantasyScoring::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAIDailyFantasyScoring::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAIDailyFantasyScoring::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAIDailyFantasyScoring::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

bool OAIDailyFantasyScoring::isHasStarted() const {
    return m_has_started;
}
void OAIDailyFantasyScoring::setHasStarted(const bool &has_started) {
    m_has_started = has_started;
    m_has_started_isSet = true;
}

bool OAIDailyFantasyScoring::is_has_started_Set() const{
    return m_has_started_isSet;
}

bool OAIDailyFantasyScoring::is_has_started_Valid() const{
    return m_has_started_isValid;
}

bool OAIDailyFantasyScoring::isIsInProgress() const {
    return m_is_in_progress;
}
void OAIDailyFantasyScoring::setIsInProgress(const bool &is_in_progress) {
    m_is_in_progress = is_in_progress;
    m_is_in_progress_isSet = true;
}

bool OAIDailyFantasyScoring::is_is_in_progress_Set() const{
    return m_is_in_progress_isSet;
}

bool OAIDailyFantasyScoring::is_is_in_progress_Valid() const{
    return m_is_in_progress_isValid;
}

bool OAIDailyFantasyScoring::isIsOver() const {
    return m_is_over;
}
void OAIDailyFantasyScoring::setIsOver(const bool &is_over) {
    m_is_over = is_over;
    m_is_over_isSet = true;
}

bool OAIDailyFantasyScoring::is_is_over_Set() const{
    return m_is_over_isSet;
}

bool OAIDailyFantasyScoring::is_is_over_Valid() const{
    return m_is_over_isValid;
}

QString OAIDailyFantasyScoring::getName() const {
    return m_name;
}
void OAIDailyFantasyScoring::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDailyFantasyScoring::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDailyFantasyScoring::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDailyFantasyScoring::getPlayerId() const {
    return m_player_id;
}
void OAIDailyFantasyScoring::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIDailyFantasyScoring::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIDailyFantasyScoring::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIDailyFantasyScoring::getPosition() const {
    return m_position;
}
void OAIDailyFantasyScoring::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIDailyFantasyScoring::is_position_Set() const{
    return m_position_isSet;
}

bool OAIDailyFantasyScoring::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIDailyFantasyScoring::getTeam() const {
    return m_team;
}
void OAIDailyFantasyScoring::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIDailyFantasyScoring::is_team_Set() const{
    return m_team_isSet;
}

bool OAIDailyFantasyScoring::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIDailyFantasyScoring::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fantasy_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_ppr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyFantasyScoring::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
