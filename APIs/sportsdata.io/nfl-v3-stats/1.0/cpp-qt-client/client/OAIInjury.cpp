/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInjury.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInjury::OAIInjury(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInjury::OAIInjury() {
    this->initializeModel();
}

OAIInjury::~OAIInjury() {}

void OAIInjury::initializeModel() {

    m_body_part_isSet = false;
    m_body_part_isValid = false;

    m_declared_inactive_isSet = false;
    m_declared_inactive_isValid = false;

    m_injury_id_isSet = false;
    m_injury_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_practice_isSet = false;
    m_practice_isValid = false;

    m_practice_description_isSet = false;
    m_practice_description_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIInjury::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInjury::fromJsonObject(QJsonObject json) {

    m_body_part_isValid = ::OpenAPI::fromJsonValue(m_body_part, json[QString("BodyPart")]);
    m_body_part_isSet = !json[QString("BodyPart")].isNull() && m_body_part_isValid;

    m_declared_inactive_isValid = ::OpenAPI::fromJsonValue(m_declared_inactive, json[QString("DeclaredInactive")]);
    m_declared_inactive_isSet = !json[QString("DeclaredInactive")].isNull() && m_declared_inactive_isValid;

    m_injury_id_isValid = ::OpenAPI::fromJsonValue(m_injury_id, json[QString("InjuryID")]);
    m_injury_id_isSet = !json[QString("InjuryID")].isNull() && m_injury_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentID")]);
    m_opponent_id_isSet = !json[QString("OpponentID")].isNull() && m_opponent_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_practice_isValid = ::OpenAPI::fromJsonValue(m_practice, json[QString("Practice")]);
    m_practice_isSet = !json[QString("Practice")].isNull() && m_practice_isValid;

    m_practice_description_isValid = ::OpenAPI::fromJsonValue(m_practice_description, json[QString("PracticeDescription")]);
    m_practice_description_isSet = !json[QString("PracticeDescription")].isNull() && m_practice_description_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;
}

QString OAIInjury::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInjury::asJsonObject() const {
    QJsonObject obj;
    if (m_body_part_isSet) {
        obj.insert(QString("BodyPart"), ::OpenAPI::toJsonValue(m_body_part));
    }
    if (m_declared_inactive_isSet) {
        obj.insert(QString("DeclaredInactive"), ::OpenAPI::toJsonValue(m_declared_inactive));
    }
    if (m_injury_id_isSet) {
        obj.insert(QString("InjuryID"), ::OpenAPI::toJsonValue(m_injury_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentID"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_practice_isSet) {
        obj.insert(QString("Practice"), ::OpenAPI::toJsonValue(m_practice));
    }
    if (m_practice_description_isSet) {
        obj.insert(QString("PracticeDescription"), ::OpenAPI::toJsonValue(m_practice_description));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAIInjury::getBodyPart() const {
    return m_body_part;
}
void OAIInjury::setBodyPart(const QString &body_part) {
    m_body_part = body_part;
    m_body_part_isSet = true;
}

bool OAIInjury::is_body_part_Set() const{
    return m_body_part_isSet;
}

bool OAIInjury::is_body_part_Valid() const{
    return m_body_part_isValid;
}

bool OAIInjury::isDeclaredInactive() const {
    return m_declared_inactive;
}
void OAIInjury::setDeclaredInactive(const bool &declared_inactive) {
    m_declared_inactive = declared_inactive;
    m_declared_inactive_isSet = true;
}

bool OAIInjury::is_declared_inactive_Set() const{
    return m_declared_inactive_isSet;
}

bool OAIInjury::is_declared_inactive_Valid() const{
    return m_declared_inactive_isValid;
}

qint32 OAIInjury::getInjuryId() const {
    return m_injury_id;
}
void OAIInjury::setInjuryId(const qint32 &injury_id) {
    m_injury_id = injury_id;
    m_injury_id_isSet = true;
}

bool OAIInjury::is_injury_id_Set() const{
    return m_injury_id_isSet;
}

bool OAIInjury::is_injury_id_Valid() const{
    return m_injury_id_isValid;
}

QString OAIInjury::getName() const {
    return m_name;
}
void OAIInjury::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInjury::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInjury::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIInjury::getNumber() const {
    return m_number;
}
void OAIInjury::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIInjury::is_number_Set() const{
    return m_number_isSet;
}

bool OAIInjury::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIInjury::getOpponent() const {
    return m_opponent;
}
void OAIInjury::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIInjury::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIInjury::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIInjury::getOpponentId() const {
    return m_opponent_id;
}
void OAIInjury::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAIInjury::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAIInjury::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

qint32 OAIInjury::getPlayerId() const {
    return m_player_id;
}
void OAIInjury::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIInjury::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIInjury::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIInjury::getPosition() const {
    return m_position;
}
void OAIInjury::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIInjury::is_position_Set() const{
    return m_position_isSet;
}

bool OAIInjury::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIInjury::getPractice() const {
    return m_practice;
}
void OAIInjury::setPractice(const QString &practice) {
    m_practice = practice;
    m_practice_isSet = true;
}

bool OAIInjury::is_practice_Set() const{
    return m_practice_isSet;
}

bool OAIInjury::is_practice_Valid() const{
    return m_practice_isValid;
}

QString OAIInjury::getPracticeDescription() const {
    return m_practice_description;
}
void OAIInjury::setPracticeDescription(const QString &practice_description) {
    m_practice_description = practice_description;
    m_practice_description_isSet = true;
}

bool OAIInjury::is_practice_description_Set() const{
    return m_practice_description_isSet;
}

bool OAIInjury::is_practice_description_Valid() const{
    return m_practice_description_isValid;
}

qint32 OAIInjury::getSeason() const {
    return m_season;
}
void OAIInjury::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIInjury::is_season_Set() const{
    return m_season_isSet;
}

bool OAIInjury::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIInjury::getSeasonType() const {
    return m_season_type;
}
void OAIInjury::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIInjury::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIInjury::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIInjury::getStatus() const {
    return m_status;
}
void OAIInjury::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInjury::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInjury::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInjury::getTeam() const {
    return m_team;
}
void OAIInjury::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIInjury::is_team_Set() const{
    return m_team_isSet;
}

bool OAIInjury::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIInjury::getTeamId() const {
    return m_team_id;
}
void OAIInjury::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIInjury::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIInjury::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIInjury::getUpdated() const {
    return m_updated;
}
void OAIInjury::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIInjury::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIInjury::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIInjury::getWeek() const {
    return m_week;
}
void OAIInjury::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIInjury::is_week_Set() const{
    return m_week_isSet;
}

bool OAIInjury::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIInjury::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_practice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_practice_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInjury::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
