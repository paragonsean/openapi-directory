/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyFantasyPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyFantasyPlayer::OAIDailyFantasyPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyFantasyPlayer::OAIDailyFantasyPlayer() {
    this->initializeModel();
}

OAIDailyFantasyPlayer::~OAIDailyFantasyPlayer() {}

void OAIDailyFantasyPlayer::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_draft_kings_salary_isSet = false;
    m_draft_kings_salary_isValid = false;

    m_fan_duel_salary_isSet = false;
    m_fan_duel_salary_isValid = false;

    m_fantasy_data_salary_isSet = false;
    m_fantasy_data_salary_isValid = false;

    m_fantasy_draft_salary_isSet = false;
    m_fantasy_draft_salary_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_last_game_fantasy_points_isSet = false;
    m_last_game_fantasy_points_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_position_rank_isSet = false;
    m_opponent_position_rank_isValid = false;

    m_opponent_rank_isSet = false;
    m_opponent_rank_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_projected_fantasy_points_isSet = false;
    m_projected_fantasy_points_isValid = false;

    m_salary_isSet = false;
    m_salary_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_color_isSet = false;
    m_status_color_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_yahoo_salary_isSet = false;
    m_yahoo_salary_isValid = false;
}

void OAIDailyFantasyPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyFantasyPlayer::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_salary, json[QString("DraftKingsSalary")]);
    m_draft_kings_salary_isSet = !json[QString("DraftKingsSalary")].isNull() && m_draft_kings_salary_isValid;

    m_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_salary, json[QString("FanDuelSalary")]);
    m_fan_duel_salary_isSet = !json[QString("FanDuelSalary")].isNull() && m_fan_duel_salary_isValid;

    m_fantasy_data_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_data_salary, json[QString("FantasyDataSalary")]);
    m_fantasy_data_salary_isSet = !json[QString("FantasyDataSalary")].isNull() && m_fantasy_data_salary_isValid;

    m_fantasy_draft_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_salary, json[QString("FantasyDraftSalary")]);
    m_fantasy_draft_salary_isSet = !json[QString("FantasyDraftSalary")].isNull() && m_fantasy_draft_salary_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_last_game_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_last_game_fantasy_points, json[QString("LastGameFantasyPoints")]);
    m_last_game_fantasy_points_isSet = !json[QString("LastGameFantasyPoints")].isNull() && m_last_game_fantasy_points_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_position_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_position_rank, json[QString("OpponentPositionRank")]);
    m_opponent_position_rank_isSet = !json[QString("OpponentPositionRank")].isNull() && m_opponent_position_rank_isValid;

    m_opponent_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_rank, json[QString("OpponentRank")]);
    m_opponent_rank_isSet = !json[QString("OpponentRank")].isNull() && m_opponent_rank_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_projected_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_projected_fantasy_points, json[QString("ProjectedFantasyPoints")]);
    m_projected_fantasy_points_isSet = !json[QString("ProjectedFantasyPoints")].isNull() && m_projected_fantasy_points_isValid;

    m_salary_isValid = ::OpenAPI::fromJsonValue(m_salary, json[QString("Salary")]);
    m_salary_isSet = !json[QString("Salary")].isNull() && m_salary_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_status_color_isValid = ::OpenAPI::fromJsonValue(m_status_color, json[QString("StatusColor")]);
    m_status_color_isSet = !json[QString("StatusColor")].isNull() && m_status_color_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_yahoo_salary_isValid = ::OpenAPI::fromJsonValue(m_yahoo_salary, json[QString("YahooSalary")]);
    m_yahoo_salary_isSet = !json[QString("YahooSalary")].isNull() && m_yahoo_salary_isValid;
}

QString OAIDailyFantasyPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyFantasyPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_draft_kings_salary_isSet) {
        obj.insert(QString("DraftKingsSalary"), ::OpenAPI::toJsonValue(m_draft_kings_salary));
    }
    if (m_fan_duel_salary_isSet) {
        obj.insert(QString("FanDuelSalary"), ::OpenAPI::toJsonValue(m_fan_duel_salary));
    }
    if (m_fantasy_data_salary_isSet) {
        obj.insert(QString("FantasyDataSalary"), ::OpenAPI::toJsonValue(m_fantasy_data_salary));
    }
    if (m_fantasy_draft_salary_isSet) {
        obj.insert(QString("FantasyDraftSalary"), ::OpenAPI::toJsonValue(m_fantasy_draft_salary));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_last_game_fantasy_points_isSet) {
        obj.insert(QString("LastGameFantasyPoints"), ::OpenAPI::toJsonValue(m_last_game_fantasy_points));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_position_rank_isSet) {
        obj.insert(QString("OpponentPositionRank"), ::OpenAPI::toJsonValue(m_opponent_position_rank));
    }
    if (m_opponent_rank_isSet) {
        obj.insert(QString("OpponentRank"), ::OpenAPI::toJsonValue(m_opponent_rank));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_projected_fantasy_points_isSet) {
        obj.insert(QString("ProjectedFantasyPoints"), ::OpenAPI::toJsonValue(m_projected_fantasy_points));
    }
    if (m_salary_isSet) {
        obj.insert(QString("Salary"), ::OpenAPI::toJsonValue(m_salary));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_color_isSet) {
        obj.insert(QString("StatusColor"), ::OpenAPI::toJsonValue(m_status_color));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_yahoo_salary_isSet) {
        obj.insert(QString("YahooSalary"), ::OpenAPI::toJsonValue(m_yahoo_salary));
    }
    return obj;
}

QString OAIDailyFantasyPlayer::getDate() const {
    return m_date;
}
void OAIDailyFantasyPlayer::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDailyFantasyPlayer::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDailyFantasyPlayer::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIDailyFantasyPlayer::getDraftKingsSalary() const {
    return m_draft_kings_salary;
}
void OAIDailyFantasyPlayer::setDraftKingsSalary(const qint32 &draft_kings_salary) {
    m_draft_kings_salary = draft_kings_salary;
    m_draft_kings_salary_isSet = true;
}

bool OAIDailyFantasyPlayer::is_draft_kings_salary_Set() const{
    return m_draft_kings_salary_isSet;
}

bool OAIDailyFantasyPlayer::is_draft_kings_salary_Valid() const{
    return m_draft_kings_salary_isValid;
}

qint32 OAIDailyFantasyPlayer::getFanDuelSalary() const {
    return m_fan_duel_salary;
}
void OAIDailyFantasyPlayer::setFanDuelSalary(const qint32 &fan_duel_salary) {
    m_fan_duel_salary = fan_duel_salary;
    m_fan_duel_salary_isSet = true;
}

bool OAIDailyFantasyPlayer::is_fan_duel_salary_Set() const{
    return m_fan_duel_salary_isSet;
}

bool OAIDailyFantasyPlayer::is_fan_duel_salary_Valid() const{
    return m_fan_duel_salary_isValid;
}

qint32 OAIDailyFantasyPlayer::getFantasyDataSalary() const {
    return m_fantasy_data_salary;
}
void OAIDailyFantasyPlayer::setFantasyDataSalary(const qint32 &fantasy_data_salary) {
    m_fantasy_data_salary = fantasy_data_salary;
    m_fantasy_data_salary_isSet = true;
}

bool OAIDailyFantasyPlayer::is_fantasy_data_salary_Set() const{
    return m_fantasy_data_salary_isSet;
}

bool OAIDailyFantasyPlayer::is_fantasy_data_salary_Valid() const{
    return m_fantasy_data_salary_isValid;
}

qint32 OAIDailyFantasyPlayer::getFantasyDraftSalary() const {
    return m_fantasy_draft_salary;
}
void OAIDailyFantasyPlayer::setFantasyDraftSalary(const qint32 &fantasy_draft_salary) {
    m_fantasy_draft_salary = fantasy_draft_salary;
    m_fantasy_draft_salary_isSet = true;
}

bool OAIDailyFantasyPlayer::is_fantasy_draft_salary_Set() const{
    return m_fantasy_draft_salary_isSet;
}

bool OAIDailyFantasyPlayer::is_fantasy_draft_salary_Valid() const{
    return m_fantasy_draft_salary_isValid;
}

QString OAIDailyFantasyPlayer::getHomeOrAway() const {
    return m_home_or_away;
}
void OAIDailyFantasyPlayer::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAIDailyFantasyPlayer::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAIDailyFantasyPlayer::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

double OAIDailyFantasyPlayer::getLastGameFantasyPoints() const {
    return m_last_game_fantasy_points;
}
void OAIDailyFantasyPlayer::setLastGameFantasyPoints(const double &last_game_fantasy_points) {
    m_last_game_fantasy_points = last_game_fantasy_points;
    m_last_game_fantasy_points_isSet = true;
}

bool OAIDailyFantasyPlayer::is_last_game_fantasy_points_Set() const{
    return m_last_game_fantasy_points_isSet;
}

bool OAIDailyFantasyPlayer::is_last_game_fantasy_points_Valid() const{
    return m_last_game_fantasy_points_isValid;
}

QString OAIDailyFantasyPlayer::getName() const {
    return m_name;
}
void OAIDailyFantasyPlayer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDailyFantasyPlayer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDailyFantasyPlayer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDailyFantasyPlayer::getOpponent() const {
    return m_opponent;
}
void OAIDailyFantasyPlayer::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIDailyFantasyPlayer::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIDailyFantasyPlayer::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIDailyFantasyPlayer::getOpponentPositionRank() const {
    return m_opponent_position_rank;
}
void OAIDailyFantasyPlayer::setOpponentPositionRank(const qint32 &opponent_position_rank) {
    m_opponent_position_rank = opponent_position_rank;
    m_opponent_position_rank_isSet = true;
}

bool OAIDailyFantasyPlayer::is_opponent_position_rank_Set() const{
    return m_opponent_position_rank_isSet;
}

bool OAIDailyFantasyPlayer::is_opponent_position_rank_Valid() const{
    return m_opponent_position_rank_isValid;
}

qint32 OAIDailyFantasyPlayer::getOpponentRank() const {
    return m_opponent_rank;
}
void OAIDailyFantasyPlayer::setOpponentRank(const qint32 &opponent_rank) {
    m_opponent_rank = opponent_rank;
    m_opponent_rank_isSet = true;
}

bool OAIDailyFantasyPlayer::is_opponent_rank_Set() const{
    return m_opponent_rank_isSet;
}

bool OAIDailyFantasyPlayer::is_opponent_rank_Valid() const{
    return m_opponent_rank_isValid;
}

qint32 OAIDailyFantasyPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIDailyFantasyPlayer::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIDailyFantasyPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIDailyFantasyPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIDailyFantasyPlayer::getPosition() const {
    return m_position;
}
void OAIDailyFantasyPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIDailyFantasyPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIDailyFantasyPlayer::is_position_Valid() const{
    return m_position_isValid;
}

double OAIDailyFantasyPlayer::getProjectedFantasyPoints() const {
    return m_projected_fantasy_points;
}
void OAIDailyFantasyPlayer::setProjectedFantasyPoints(const double &projected_fantasy_points) {
    m_projected_fantasy_points = projected_fantasy_points;
    m_projected_fantasy_points_isSet = true;
}

bool OAIDailyFantasyPlayer::is_projected_fantasy_points_Set() const{
    return m_projected_fantasy_points_isSet;
}

bool OAIDailyFantasyPlayer::is_projected_fantasy_points_Valid() const{
    return m_projected_fantasy_points_isValid;
}

qint32 OAIDailyFantasyPlayer::getSalary() const {
    return m_salary;
}
void OAIDailyFantasyPlayer::setSalary(const qint32 &salary) {
    m_salary = salary;
    m_salary_isSet = true;
}

bool OAIDailyFantasyPlayer::is_salary_Set() const{
    return m_salary_isSet;
}

bool OAIDailyFantasyPlayer::is_salary_Valid() const{
    return m_salary_isValid;
}

QString OAIDailyFantasyPlayer::getShortName() const {
    return m_short_name;
}
void OAIDailyFantasyPlayer::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIDailyFantasyPlayer::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIDailyFantasyPlayer::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIDailyFantasyPlayer::getStatus() const {
    return m_status;
}
void OAIDailyFantasyPlayer::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDailyFantasyPlayer::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDailyFantasyPlayer::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDailyFantasyPlayer::getStatusCode() const {
    return m_status_code;
}
void OAIDailyFantasyPlayer::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIDailyFantasyPlayer::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIDailyFantasyPlayer::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIDailyFantasyPlayer::getStatusColor() const {
    return m_status_color;
}
void OAIDailyFantasyPlayer::setStatusColor(const QString &status_color) {
    m_status_color = status_color;
    m_status_color_isSet = true;
}

bool OAIDailyFantasyPlayer::is_status_color_Set() const{
    return m_status_color_isSet;
}

bool OAIDailyFantasyPlayer::is_status_color_Valid() const{
    return m_status_color_isValid;
}

QString OAIDailyFantasyPlayer::getTeam() const {
    return m_team;
}
void OAIDailyFantasyPlayer::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIDailyFantasyPlayer::is_team_Set() const{
    return m_team_isSet;
}

bool OAIDailyFantasyPlayer::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIDailyFantasyPlayer::getYahooSalary() const {
    return m_yahoo_salary;
}
void OAIDailyFantasyPlayer::setYahooSalary(const qint32 &yahoo_salary) {
    m_yahoo_salary = yahoo_salary;
    m_yahoo_salary_isSet = true;
}

bool OAIDailyFantasyPlayer::is_yahoo_salary_Set() const{
    return m_yahoo_salary_isSet;
}

bool OAIDailyFantasyPlayer::is_yahoo_salary_Valid() const{
    return m_yahoo_salary_isValid;
}

bool OAIDailyFantasyPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_data_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_game_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_position_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_salary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyFantasyPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
