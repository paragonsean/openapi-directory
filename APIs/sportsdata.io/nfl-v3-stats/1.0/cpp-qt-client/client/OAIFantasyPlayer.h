/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFantasyPlayer.h
 *
 * 
 */

#ifndef OAIFantasyPlayer_H
#define OAIFantasyPlayer_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFantasyPlayer : public OAIObject {
public:
    OAIFantasyPlayer();
    OAIFantasyPlayer(QString json);
    ~OAIFantasyPlayer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAuctionValue() const;
    void setAuctionValue(const qint32 &auction_value);
    bool is_auction_value_Set() const;
    bool is_auction_value_Valid() const;

    qint32 getAuctionValuePpr() const;
    void setAuctionValuePpr(const qint32 &auction_value_ppr);
    bool is_auction_value_ppr_Set() const;
    bool is_auction_value_ppr_Valid() const;

    double getAverageDraftPosition() const;
    void setAverageDraftPosition(const double &average_draft_position);
    bool is_average_draft_position_Set() const;
    bool is_average_draft_position_Valid() const;

    double getAverageDraftPosition2Qb() const;
    void setAverageDraftPosition2Qb(const double &average_draft_position2_qb);
    bool is_average_draft_position2_qb_Set() const;
    bool is_average_draft_position2_qb_Valid() const;

    double getAverageDraftPositionDynasty() const;
    void setAverageDraftPositionDynasty(const double &average_draft_position_dynasty);
    bool is_average_draft_position_dynasty_Set() const;
    bool is_average_draft_position_dynasty_Valid() const;

    qint32 getAverageDraftPositionIdp() const;
    void setAverageDraftPositionIdp(const qint32 &average_draft_position_idp);
    bool is_average_draft_position_idp_Set() const;
    bool is_average_draft_position_idp_Valid() const;

    double getAverageDraftPositionPpr() const;
    void setAverageDraftPositionPpr(const double &average_draft_position_ppr);
    bool is_average_draft_position_ppr_Set() const;
    bool is_average_draft_position_ppr_Valid() const;

    double getAverageDraftPositionRookie() const;
    void setAverageDraftPositionRookie(const double &average_draft_position_rookie);
    bool is_average_draft_position_rookie_Set() const;
    bool is_average_draft_position_rookie_Valid() const;

    qint32 getByeWeek() const;
    void setByeWeek(const qint32 &bye_week);
    bool is_bye_week_Set() const;
    bool is_bye_week_Valid() const;

    QString getFantasyPlayerKey() const;
    void setFantasyPlayerKey(const QString &fantasy_player_key);
    bool is_fantasy_player_key_Set() const;
    bool is_fantasy_player_key_Valid() const;

    double getLastSeasonFantasyPoints() const;
    void setLastSeasonFantasyPoints(const double &last_season_fantasy_points);
    bool is_last_season_fantasy_points_Set() const;
    bool is_last_season_fantasy_points_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPlayerId() const;
    void setPlayerId(const qint32 &player_id);
    bool is_player_id_Set() const;
    bool is_player_id_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    double getProjectedFantasyPoints() const;
    void setProjectedFantasyPoints(const double &projected_fantasy_points);
    bool is_projected_fantasy_points_Set() const;
    bool is_projected_fantasy_points_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_auction_value;
    bool m_auction_value_isSet;
    bool m_auction_value_isValid;

    qint32 m_auction_value_ppr;
    bool m_auction_value_ppr_isSet;
    bool m_auction_value_ppr_isValid;

    double m_average_draft_position;
    bool m_average_draft_position_isSet;
    bool m_average_draft_position_isValid;

    double m_average_draft_position2_qb;
    bool m_average_draft_position2_qb_isSet;
    bool m_average_draft_position2_qb_isValid;

    double m_average_draft_position_dynasty;
    bool m_average_draft_position_dynasty_isSet;
    bool m_average_draft_position_dynasty_isValid;

    qint32 m_average_draft_position_idp;
    bool m_average_draft_position_idp_isSet;
    bool m_average_draft_position_idp_isValid;

    double m_average_draft_position_ppr;
    bool m_average_draft_position_ppr_isSet;
    bool m_average_draft_position_ppr_isValid;

    double m_average_draft_position_rookie;
    bool m_average_draft_position_rookie_isSet;
    bool m_average_draft_position_rookie_isValid;

    qint32 m_bye_week;
    bool m_bye_week_isSet;
    bool m_bye_week_isValid;

    QString m_fantasy_player_key;
    bool m_fantasy_player_key_isSet;
    bool m_fantasy_player_key_isValid;

    double m_last_season_fantasy_points;
    bool m_last_season_fantasy_points_isSet;
    bool m_last_season_fantasy_points_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_player_id;
    bool m_player_id_isSet;
    bool m_player_id_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    double m_projected_fantasy_points;
    bool m_projected_fantasy_points_isSet;
    bool m_projected_fantasy_points_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFantasyPlayer)

#endif // OAIFantasyPlayer_H
