/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScore::OAIScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScore::OAIScore() {
    this->initializeModel();
}

OAIScore::~OAIScore() {}

void OAIScore::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_away_rotation_number_isSet = false;
    m_away_rotation_number_isValid = false;

    m_away_score_isSet = false;
    m_away_score_isValid = false;

    m_away_score_overtime_isSet = false;
    m_away_score_overtime_isValid = false;

    m_away_score_quarter1_isSet = false;
    m_away_score_quarter1_isValid = false;

    m_away_score_quarter2_isSet = false;
    m_away_score_quarter2_isValid = false;

    m_away_score_quarter3_isSet = false;
    m_away_score_quarter3_isValid = false;

    m_away_score_quarter4_isSet = false;
    m_away_score_quarter4_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_away_team_id_isSet = false;
    m_away_team_id_isValid = false;

    m_away_team_money_line_isSet = false;
    m_away_team_money_line_isValid = false;

    m_away_timeouts_isSet = false;
    m_away_timeouts_isValid = false;

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_date_time_utc_isSet = false;
    m_date_time_utc_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_down_isSet = false;
    m_down_isValid = false;

    m_down_and_distance_isSet = false;
    m_down_and_distance_isValid = false;

    m_forecast_description_isSet = false;
    m_forecast_description_isValid = false;

    m_forecast_temp_high_isSet = false;
    m_forecast_temp_high_isValid = false;

    m_forecast_temp_low_isSet = false;
    m_forecast_temp_low_isValid = false;

    m_forecast_wind_chill_isSet = false;
    m_forecast_wind_chill_isValid = false;

    m_forecast_wind_speed_isSet = false;
    m_forecast_wind_speed_isValid = false;

    m_game_end_date_time_isSet = false;
    m_game_end_date_time_isValid = false;

    m_game_key_isSet = false;
    m_game_key_isValid = false;

    m_geo_lat_isSet = false;
    m_geo_lat_isValid = false;

    m_geo_long_isSet = false;
    m_geo_long_isValid = false;

    m_global_away_team_id_isSet = false;
    m_global_away_team_id_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_home_team_id_isSet = false;
    m_global_home_team_id_isValid = false;

    m_has1st_quarter_started_isSet = false;
    m_has1st_quarter_started_isValid = false;

    m_has2nd_quarter_started_isSet = false;
    m_has2nd_quarter_started_isValid = false;

    m_has3rd_quarter_started_isSet = false;
    m_has3rd_quarter_started_isValid = false;

    m_has4th_quarter_started_isSet = false;
    m_has4th_quarter_started_isValid = false;

    m_has_started_isSet = false;
    m_has_started_isValid = false;

    m_home_rotation_number_isSet = false;
    m_home_rotation_number_isValid = false;

    m_home_score_isSet = false;
    m_home_score_isValid = false;

    m_home_score_overtime_isSet = false;
    m_home_score_overtime_isValid = false;

    m_home_score_quarter1_isSet = false;
    m_home_score_quarter1_isValid = false;

    m_home_score_quarter2_isSet = false;
    m_home_score_quarter2_isValid = false;

    m_home_score_quarter3_isSet = false;
    m_home_score_quarter3_isValid = false;

    m_home_score_quarter4_isSet = false;
    m_home_score_quarter4_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_home_team_id_isSet = false;
    m_home_team_id_isValid = false;

    m_home_team_money_line_isSet = false;
    m_home_team_money_line_isValid = false;

    m_home_timeouts_isSet = false;
    m_home_timeouts_isValid = false;

    m_is_in_progress_isSet = false;
    m_is_in_progress_isValid = false;

    m_is_over_isSet = false;
    m_is_over_isValid = false;

    m_is_overtime_isSet = false;
    m_is_overtime_isValid = false;

    m_last_play_isSet = false;
    m_last_play_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_neutral_venue_isSet = false;
    m_neutral_venue_isValid = false;

    m_over_payout_isSet = false;
    m_over_payout_isValid = false;

    m_over_under_isSet = false;
    m_over_under_isValid = false;

    m_point_spread_isSet = false;
    m_point_spread_isValid = false;

    m_point_spread_away_team_money_line_isSet = false;
    m_point_spread_away_team_money_line_isValid = false;

    m_point_spread_home_team_money_line_isSet = false;
    m_point_spread_home_team_money_line_isValid = false;

    m_possession_isSet = false;
    m_possession_isValid = false;

    m_quarter_isSet = false;
    m_quarter_isValid = false;

    m_quarter_description_isSet = false;
    m_quarter_description_isValid = false;

    m_red_zone_isSet = false;
    m_red_zone_isValid = false;

    m_referee_id_isSet = false;
    m_referee_id_isValid = false;

    m_score_id_isSet = false;
    m_score_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_stadium_details_isSet = false;
    m_stadium_details_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_remaining_isSet = false;
    m_time_remaining_isValid = false;

    m_under_payout_isSet = false;
    m_under_payout_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_yard_line_isSet = false;
    m_yard_line_isValid = false;

    m_yard_line_territory_isSet = false;
    m_yard_line_territory_isValid = false;
}

void OAIScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScore::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("Attendance")]);
    m_attendance_isSet = !json[QString("Attendance")].isNull() && m_attendance_isValid;

    m_away_rotation_number_isValid = ::OpenAPI::fromJsonValue(m_away_rotation_number, json[QString("AwayRotationNumber")]);
    m_away_rotation_number_isSet = !json[QString("AwayRotationNumber")].isNull() && m_away_rotation_number_isValid;

    m_away_score_isValid = ::OpenAPI::fromJsonValue(m_away_score, json[QString("AwayScore")]);
    m_away_score_isSet = !json[QString("AwayScore")].isNull() && m_away_score_isValid;

    m_away_score_overtime_isValid = ::OpenAPI::fromJsonValue(m_away_score_overtime, json[QString("AwayScoreOvertime")]);
    m_away_score_overtime_isSet = !json[QString("AwayScoreOvertime")].isNull() && m_away_score_overtime_isValid;

    m_away_score_quarter1_isValid = ::OpenAPI::fromJsonValue(m_away_score_quarter1, json[QString("AwayScoreQuarter1")]);
    m_away_score_quarter1_isSet = !json[QString("AwayScoreQuarter1")].isNull() && m_away_score_quarter1_isValid;

    m_away_score_quarter2_isValid = ::OpenAPI::fromJsonValue(m_away_score_quarter2, json[QString("AwayScoreQuarter2")]);
    m_away_score_quarter2_isSet = !json[QString("AwayScoreQuarter2")].isNull() && m_away_score_quarter2_isValid;

    m_away_score_quarter3_isValid = ::OpenAPI::fromJsonValue(m_away_score_quarter3, json[QString("AwayScoreQuarter3")]);
    m_away_score_quarter3_isSet = !json[QString("AwayScoreQuarter3")].isNull() && m_away_score_quarter3_isValid;

    m_away_score_quarter4_isValid = ::OpenAPI::fromJsonValue(m_away_score_quarter4, json[QString("AwayScoreQuarter4")]);
    m_away_score_quarter4_isSet = !json[QString("AwayScoreQuarter4")].isNull() && m_away_score_quarter4_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("AwayTeam")]);
    m_away_team_isSet = !json[QString("AwayTeam")].isNull() && m_away_team_isValid;

    m_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_away_team_id, json[QString("AwayTeamID")]);
    m_away_team_id_isSet = !json[QString("AwayTeamID")].isNull() && m_away_team_id_isValid;

    m_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_away_team_money_line, json[QString("AwayTeamMoneyLine")]);
    m_away_team_money_line_isSet = !json[QString("AwayTeamMoneyLine")].isNull() && m_away_team_money_line_isValid;

    m_away_timeouts_isValid = ::OpenAPI::fromJsonValue(m_away_timeouts, json[QString("AwayTimeouts")]);
    m_away_timeouts_isSet = !json[QString("AwayTimeouts")].isNull() && m_away_timeouts_isValid;

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("Canceled")]);
    m_canceled_isSet = !json[QString("Canceled")].isNull() && m_canceled_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("Closed")]);
    m_closed_isSet = !json[QString("Closed")].isNull() && m_closed_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_date_time_utc, json[QString("DateTimeUTC")]);
    m_date_time_utc_isSet = !json[QString("DateTimeUTC")].isNull() && m_date_time_utc_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_down_isValid = ::OpenAPI::fromJsonValue(m_down, json[QString("Down")]);
    m_down_isSet = !json[QString("Down")].isNull() && m_down_isValid;

    m_down_and_distance_isValid = ::OpenAPI::fromJsonValue(m_down_and_distance, json[QString("DownAndDistance")]);
    m_down_and_distance_isSet = !json[QString("DownAndDistance")].isNull() && m_down_and_distance_isValid;

    m_forecast_description_isValid = ::OpenAPI::fromJsonValue(m_forecast_description, json[QString("ForecastDescription")]);
    m_forecast_description_isSet = !json[QString("ForecastDescription")].isNull() && m_forecast_description_isValid;

    m_forecast_temp_high_isValid = ::OpenAPI::fromJsonValue(m_forecast_temp_high, json[QString("ForecastTempHigh")]);
    m_forecast_temp_high_isSet = !json[QString("ForecastTempHigh")].isNull() && m_forecast_temp_high_isValid;

    m_forecast_temp_low_isValid = ::OpenAPI::fromJsonValue(m_forecast_temp_low, json[QString("ForecastTempLow")]);
    m_forecast_temp_low_isSet = !json[QString("ForecastTempLow")].isNull() && m_forecast_temp_low_isValid;

    m_forecast_wind_chill_isValid = ::OpenAPI::fromJsonValue(m_forecast_wind_chill, json[QString("ForecastWindChill")]);
    m_forecast_wind_chill_isSet = !json[QString("ForecastWindChill")].isNull() && m_forecast_wind_chill_isValid;

    m_forecast_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_forecast_wind_speed, json[QString("ForecastWindSpeed")]);
    m_forecast_wind_speed_isSet = !json[QString("ForecastWindSpeed")].isNull() && m_forecast_wind_speed_isValid;

    m_game_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_game_end_date_time, json[QString("GameEndDateTime")]);
    m_game_end_date_time_isSet = !json[QString("GameEndDateTime")].isNull() && m_game_end_date_time_isValid;

    m_game_key_isValid = ::OpenAPI::fromJsonValue(m_game_key, json[QString("GameKey")]);
    m_game_key_isSet = !json[QString("GameKey")].isNull() && m_game_key_isValid;

    m_geo_lat_isValid = ::OpenAPI::fromJsonValue(m_geo_lat, json[QString("GeoLat")]);
    m_geo_lat_isSet = !json[QString("GeoLat")].isNull() && m_geo_lat_isValid;

    m_geo_long_isValid = ::OpenAPI::fromJsonValue(m_geo_long, json[QString("GeoLong")]);
    m_geo_long_isSet = !json[QString("GeoLong")].isNull() && m_geo_long_isValid;

    m_global_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_away_team_id, json[QString("GlobalAwayTeamID")]);
    m_global_away_team_id_isSet = !json[QString("GlobalAwayTeamID")].isNull() && m_global_away_team_id_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_home_team_id, json[QString("GlobalHomeTeamID")]);
    m_global_home_team_id_isSet = !json[QString("GlobalHomeTeamID")].isNull() && m_global_home_team_id_isValid;

    m_has1st_quarter_started_isValid = ::OpenAPI::fromJsonValue(m_has1st_quarter_started, json[QString("Has1stQuarterStarted")]);
    m_has1st_quarter_started_isSet = !json[QString("Has1stQuarterStarted")].isNull() && m_has1st_quarter_started_isValid;

    m_has2nd_quarter_started_isValid = ::OpenAPI::fromJsonValue(m_has2nd_quarter_started, json[QString("Has2ndQuarterStarted")]);
    m_has2nd_quarter_started_isSet = !json[QString("Has2ndQuarterStarted")].isNull() && m_has2nd_quarter_started_isValid;

    m_has3rd_quarter_started_isValid = ::OpenAPI::fromJsonValue(m_has3rd_quarter_started, json[QString("Has3rdQuarterStarted")]);
    m_has3rd_quarter_started_isSet = !json[QString("Has3rdQuarterStarted")].isNull() && m_has3rd_quarter_started_isValid;

    m_has4th_quarter_started_isValid = ::OpenAPI::fromJsonValue(m_has4th_quarter_started, json[QString("Has4thQuarterStarted")]);
    m_has4th_quarter_started_isSet = !json[QString("Has4thQuarterStarted")].isNull() && m_has4th_quarter_started_isValid;

    m_has_started_isValid = ::OpenAPI::fromJsonValue(m_has_started, json[QString("HasStarted")]);
    m_has_started_isSet = !json[QString("HasStarted")].isNull() && m_has_started_isValid;

    m_home_rotation_number_isValid = ::OpenAPI::fromJsonValue(m_home_rotation_number, json[QString("HomeRotationNumber")]);
    m_home_rotation_number_isSet = !json[QString("HomeRotationNumber")].isNull() && m_home_rotation_number_isValid;

    m_home_score_isValid = ::OpenAPI::fromJsonValue(m_home_score, json[QString("HomeScore")]);
    m_home_score_isSet = !json[QString("HomeScore")].isNull() && m_home_score_isValid;

    m_home_score_overtime_isValid = ::OpenAPI::fromJsonValue(m_home_score_overtime, json[QString("HomeScoreOvertime")]);
    m_home_score_overtime_isSet = !json[QString("HomeScoreOvertime")].isNull() && m_home_score_overtime_isValid;

    m_home_score_quarter1_isValid = ::OpenAPI::fromJsonValue(m_home_score_quarter1, json[QString("HomeScoreQuarter1")]);
    m_home_score_quarter1_isSet = !json[QString("HomeScoreQuarter1")].isNull() && m_home_score_quarter1_isValid;

    m_home_score_quarter2_isValid = ::OpenAPI::fromJsonValue(m_home_score_quarter2, json[QString("HomeScoreQuarter2")]);
    m_home_score_quarter2_isSet = !json[QString("HomeScoreQuarter2")].isNull() && m_home_score_quarter2_isValid;

    m_home_score_quarter3_isValid = ::OpenAPI::fromJsonValue(m_home_score_quarter3, json[QString("HomeScoreQuarter3")]);
    m_home_score_quarter3_isSet = !json[QString("HomeScoreQuarter3")].isNull() && m_home_score_quarter3_isValid;

    m_home_score_quarter4_isValid = ::OpenAPI::fromJsonValue(m_home_score_quarter4, json[QString("HomeScoreQuarter4")]);
    m_home_score_quarter4_isSet = !json[QString("HomeScoreQuarter4")].isNull() && m_home_score_quarter4_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("HomeTeam")]);
    m_home_team_isSet = !json[QString("HomeTeam")].isNull() && m_home_team_isValid;

    m_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_home_team_id, json[QString("HomeTeamID")]);
    m_home_team_id_isSet = !json[QString("HomeTeamID")].isNull() && m_home_team_id_isValid;

    m_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_home_team_money_line, json[QString("HomeTeamMoneyLine")]);
    m_home_team_money_line_isSet = !json[QString("HomeTeamMoneyLine")].isNull() && m_home_team_money_line_isValid;

    m_home_timeouts_isValid = ::OpenAPI::fromJsonValue(m_home_timeouts, json[QString("HomeTimeouts")]);
    m_home_timeouts_isSet = !json[QString("HomeTimeouts")].isNull() && m_home_timeouts_isValid;

    m_is_in_progress_isValid = ::OpenAPI::fromJsonValue(m_is_in_progress, json[QString("IsInProgress")]);
    m_is_in_progress_isSet = !json[QString("IsInProgress")].isNull() && m_is_in_progress_isValid;

    m_is_over_isValid = ::OpenAPI::fromJsonValue(m_is_over, json[QString("IsOver")]);
    m_is_over_isSet = !json[QString("IsOver")].isNull() && m_is_over_isValid;

    m_is_overtime_isValid = ::OpenAPI::fromJsonValue(m_is_overtime, json[QString("IsOvertime")]);
    m_is_overtime_isSet = !json[QString("IsOvertime")].isNull() && m_is_overtime_isValid;

    m_last_play_isValid = ::OpenAPI::fromJsonValue(m_last_play, json[QString("LastPlay")]);
    m_last_play_isSet = !json[QString("LastPlay")].isNull() && m_last_play_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_neutral_venue_isValid = ::OpenAPI::fromJsonValue(m_neutral_venue, json[QString("NeutralVenue")]);
    m_neutral_venue_isSet = !json[QString("NeutralVenue")].isNull() && m_neutral_venue_isValid;

    m_over_payout_isValid = ::OpenAPI::fromJsonValue(m_over_payout, json[QString("OverPayout")]);
    m_over_payout_isSet = !json[QString("OverPayout")].isNull() && m_over_payout_isValid;

    m_over_under_isValid = ::OpenAPI::fromJsonValue(m_over_under, json[QString("OverUnder")]);
    m_over_under_isSet = !json[QString("OverUnder")].isNull() && m_over_under_isValid;

    m_point_spread_isValid = ::OpenAPI::fromJsonValue(m_point_spread, json[QString("PointSpread")]);
    m_point_spread_isSet = !json[QString("PointSpread")].isNull() && m_point_spread_isValid;

    m_point_spread_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_point_spread_away_team_money_line, json[QString("PointSpreadAwayTeamMoneyLine")]);
    m_point_spread_away_team_money_line_isSet = !json[QString("PointSpreadAwayTeamMoneyLine")].isNull() && m_point_spread_away_team_money_line_isValid;

    m_point_spread_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_point_spread_home_team_money_line, json[QString("PointSpreadHomeTeamMoneyLine")]);
    m_point_spread_home_team_money_line_isSet = !json[QString("PointSpreadHomeTeamMoneyLine")].isNull() && m_point_spread_home_team_money_line_isValid;

    m_possession_isValid = ::OpenAPI::fromJsonValue(m_possession, json[QString("Possession")]);
    m_possession_isSet = !json[QString("Possession")].isNull() && m_possession_isValid;

    m_quarter_isValid = ::OpenAPI::fromJsonValue(m_quarter, json[QString("Quarter")]);
    m_quarter_isSet = !json[QString("Quarter")].isNull() && m_quarter_isValid;

    m_quarter_description_isValid = ::OpenAPI::fromJsonValue(m_quarter_description, json[QString("QuarterDescription")]);
    m_quarter_description_isSet = !json[QString("QuarterDescription")].isNull() && m_quarter_description_isValid;

    m_red_zone_isValid = ::OpenAPI::fromJsonValue(m_red_zone, json[QString("RedZone")]);
    m_red_zone_isSet = !json[QString("RedZone")].isNull() && m_red_zone_isValid;

    m_referee_id_isValid = ::OpenAPI::fromJsonValue(m_referee_id, json[QString("RefereeID")]);
    m_referee_id_isSet = !json[QString("RefereeID")].isNull() && m_referee_id_isValid;

    m_score_id_isValid = ::OpenAPI::fromJsonValue(m_score_id, json[QString("ScoreID")]);
    m_score_id_isSet = !json[QString("ScoreID")].isNull() && m_score_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_stadium_details_isValid = ::OpenAPI::fromJsonValue(m_stadium_details, json[QString("StadiumDetails")]);
    m_stadium_details_isSet = !json[QString("StadiumDetails")].isNull() && m_stadium_details_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_time_remaining_isValid = ::OpenAPI::fromJsonValue(m_time_remaining, json[QString("TimeRemaining")]);
    m_time_remaining_isSet = !json[QString("TimeRemaining")].isNull() && m_time_remaining_isValid;

    m_under_payout_isValid = ::OpenAPI::fromJsonValue(m_under_payout, json[QString("UnderPayout")]);
    m_under_payout_isSet = !json[QString("UnderPayout")].isNull() && m_under_payout_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;

    m_yard_line_isValid = ::OpenAPI::fromJsonValue(m_yard_line, json[QString("YardLine")]);
    m_yard_line_isSet = !json[QString("YardLine")].isNull() && m_yard_line_isValid;

    m_yard_line_territory_isValid = ::OpenAPI::fromJsonValue(m_yard_line_territory, json[QString("YardLineTerritory")]);
    m_yard_line_territory_isSet = !json[QString("YardLineTerritory")].isNull() && m_yard_line_territory_isValid;
}

QString OAIScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScore::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance_isSet) {
        obj.insert(QString("Attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_away_rotation_number_isSet) {
        obj.insert(QString("AwayRotationNumber"), ::OpenAPI::toJsonValue(m_away_rotation_number));
    }
    if (m_away_score_isSet) {
        obj.insert(QString("AwayScore"), ::OpenAPI::toJsonValue(m_away_score));
    }
    if (m_away_score_overtime_isSet) {
        obj.insert(QString("AwayScoreOvertime"), ::OpenAPI::toJsonValue(m_away_score_overtime));
    }
    if (m_away_score_quarter1_isSet) {
        obj.insert(QString("AwayScoreQuarter1"), ::OpenAPI::toJsonValue(m_away_score_quarter1));
    }
    if (m_away_score_quarter2_isSet) {
        obj.insert(QString("AwayScoreQuarter2"), ::OpenAPI::toJsonValue(m_away_score_quarter2));
    }
    if (m_away_score_quarter3_isSet) {
        obj.insert(QString("AwayScoreQuarter3"), ::OpenAPI::toJsonValue(m_away_score_quarter3));
    }
    if (m_away_score_quarter4_isSet) {
        obj.insert(QString("AwayScoreQuarter4"), ::OpenAPI::toJsonValue(m_away_score_quarter4));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("AwayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_away_team_id_isSet) {
        obj.insert(QString("AwayTeamID"), ::OpenAPI::toJsonValue(m_away_team_id));
    }
    if (m_away_team_money_line_isSet) {
        obj.insert(QString("AwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_away_team_money_line));
    }
    if (m_away_timeouts_isSet) {
        obj.insert(QString("AwayTimeouts"), ::OpenAPI::toJsonValue(m_away_timeouts));
    }
    if (m_canceled_isSet) {
        obj.insert(QString("Canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_channel_isSet) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_closed_isSet) {
        obj.insert(QString("Closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_date_time_utc_isSet) {
        obj.insert(QString("DateTimeUTC"), ::OpenAPI::toJsonValue(m_date_time_utc));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_down_isSet) {
        obj.insert(QString("Down"), ::OpenAPI::toJsonValue(m_down));
    }
    if (m_down_and_distance_isSet) {
        obj.insert(QString("DownAndDistance"), ::OpenAPI::toJsonValue(m_down_and_distance));
    }
    if (m_forecast_description_isSet) {
        obj.insert(QString("ForecastDescription"), ::OpenAPI::toJsonValue(m_forecast_description));
    }
    if (m_forecast_temp_high_isSet) {
        obj.insert(QString("ForecastTempHigh"), ::OpenAPI::toJsonValue(m_forecast_temp_high));
    }
    if (m_forecast_temp_low_isSet) {
        obj.insert(QString("ForecastTempLow"), ::OpenAPI::toJsonValue(m_forecast_temp_low));
    }
    if (m_forecast_wind_chill_isSet) {
        obj.insert(QString("ForecastWindChill"), ::OpenAPI::toJsonValue(m_forecast_wind_chill));
    }
    if (m_forecast_wind_speed_isSet) {
        obj.insert(QString("ForecastWindSpeed"), ::OpenAPI::toJsonValue(m_forecast_wind_speed));
    }
    if (m_game_end_date_time_isSet) {
        obj.insert(QString("GameEndDateTime"), ::OpenAPI::toJsonValue(m_game_end_date_time));
    }
    if (m_game_key_isSet) {
        obj.insert(QString("GameKey"), ::OpenAPI::toJsonValue(m_game_key));
    }
    if (m_geo_lat_isSet) {
        obj.insert(QString("GeoLat"), ::OpenAPI::toJsonValue(m_geo_lat));
    }
    if (m_geo_long_isSet) {
        obj.insert(QString("GeoLong"), ::OpenAPI::toJsonValue(m_geo_long));
    }
    if (m_global_away_team_id_isSet) {
        obj.insert(QString("GlobalAwayTeamID"), ::OpenAPI::toJsonValue(m_global_away_team_id));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_home_team_id_isSet) {
        obj.insert(QString("GlobalHomeTeamID"), ::OpenAPI::toJsonValue(m_global_home_team_id));
    }
    if (m_has1st_quarter_started_isSet) {
        obj.insert(QString("Has1stQuarterStarted"), ::OpenAPI::toJsonValue(m_has1st_quarter_started));
    }
    if (m_has2nd_quarter_started_isSet) {
        obj.insert(QString("Has2ndQuarterStarted"), ::OpenAPI::toJsonValue(m_has2nd_quarter_started));
    }
    if (m_has3rd_quarter_started_isSet) {
        obj.insert(QString("Has3rdQuarterStarted"), ::OpenAPI::toJsonValue(m_has3rd_quarter_started));
    }
    if (m_has4th_quarter_started_isSet) {
        obj.insert(QString("Has4thQuarterStarted"), ::OpenAPI::toJsonValue(m_has4th_quarter_started));
    }
    if (m_has_started_isSet) {
        obj.insert(QString("HasStarted"), ::OpenAPI::toJsonValue(m_has_started));
    }
    if (m_home_rotation_number_isSet) {
        obj.insert(QString("HomeRotationNumber"), ::OpenAPI::toJsonValue(m_home_rotation_number));
    }
    if (m_home_score_isSet) {
        obj.insert(QString("HomeScore"), ::OpenAPI::toJsonValue(m_home_score));
    }
    if (m_home_score_overtime_isSet) {
        obj.insert(QString("HomeScoreOvertime"), ::OpenAPI::toJsonValue(m_home_score_overtime));
    }
    if (m_home_score_quarter1_isSet) {
        obj.insert(QString("HomeScoreQuarter1"), ::OpenAPI::toJsonValue(m_home_score_quarter1));
    }
    if (m_home_score_quarter2_isSet) {
        obj.insert(QString("HomeScoreQuarter2"), ::OpenAPI::toJsonValue(m_home_score_quarter2));
    }
    if (m_home_score_quarter3_isSet) {
        obj.insert(QString("HomeScoreQuarter3"), ::OpenAPI::toJsonValue(m_home_score_quarter3));
    }
    if (m_home_score_quarter4_isSet) {
        obj.insert(QString("HomeScoreQuarter4"), ::OpenAPI::toJsonValue(m_home_score_quarter4));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("HomeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_home_team_id_isSet) {
        obj.insert(QString("HomeTeamID"), ::OpenAPI::toJsonValue(m_home_team_id));
    }
    if (m_home_team_money_line_isSet) {
        obj.insert(QString("HomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_home_team_money_line));
    }
    if (m_home_timeouts_isSet) {
        obj.insert(QString("HomeTimeouts"), ::OpenAPI::toJsonValue(m_home_timeouts));
    }
    if (m_is_in_progress_isSet) {
        obj.insert(QString("IsInProgress"), ::OpenAPI::toJsonValue(m_is_in_progress));
    }
    if (m_is_over_isSet) {
        obj.insert(QString("IsOver"), ::OpenAPI::toJsonValue(m_is_over));
    }
    if (m_is_overtime_isSet) {
        obj.insert(QString("IsOvertime"), ::OpenAPI::toJsonValue(m_is_overtime));
    }
    if (m_last_play_isSet) {
        obj.insert(QString("LastPlay"), ::OpenAPI::toJsonValue(m_last_play));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_neutral_venue_isSet) {
        obj.insert(QString("NeutralVenue"), ::OpenAPI::toJsonValue(m_neutral_venue));
    }
    if (m_over_payout_isSet) {
        obj.insert(QString("OverPayout"), ::OpenAPI::toJsonValue(m_over_payout));
    }
    if (m_over_under_isSet) {
        obj.insert(QString("OverUnder"), ::OpenAPI::toJsonValue(m_over_under));
    }
    if (m_point_spread_isSet) {
        obj.insert(QString("PointSpread"), ::OpenAPI::toJsonValue(m_point_spread));
    }
    if (m_point_spread_away_team_money_line_isSet) {
        obj.insert(QString("PointSpreadAwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_point_spread_away_team_money_line));
    }
    if (m_point_spread_home_team_money_line_isSet) {
        obj.insert(QString("PointSpreadHomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_point_spread_home_team_money_line));
    }
    if (m_possession_isSet) {
        obj.insert(QString("Possession"), ::OpenAPI::toJsonValue(m_possession));
    }
    if (m_quarter_isSet) {
        obj.insert(QString("Quarter"), ::OpenAPI::toJsonValue(m_quarter));
    }
    if (m_quarter_description_isSet) {
        obj.insert(QString("QuarterDescription"), ::OpenAPI::toJsonValue(m_quarter_description));
    }
    if (m_red_zone_isSet) {
        obj.insert(QString("RedZone"), ::OpenAPI::toJsonValue(m_red_zone));
    }
    if (m_referee_id_isSet) {
        obj.insert(QString("RefereeID"), ::OpenAPI::toJsonValue(m_referee_id));
    }
    if (m_score_id_isSet) {
        obj.insert(QString("ScoreID"), ::OpenAPI::toJsonValue(m_score_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_stadium_details.isSet()) {
        obj.insert(QString("StadiumDetails"), ::OpenAPI::toJsonValue(m_stadium_details));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_remaining_isSet) {
        obj.insert(QString("TimeRemaining"), ::OpenAPI::toJsonValue(m_time_remaining));
    }
    if (m_under_payout_isSet) {
        obj.insert(QString("UnderPayout"), ::OpenAPI::toJsonValue(m_under_payout));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_yard_line_isSet) {
        obj.insert(QString("YardLine"), ::OpenAPI::toJsonValue(m_yard_line));
    }
    if (m_yard_line_territory_isSet) {
        obj.insert(QString("YardLineTerritory"), ::OpenAPI::toJsonValue(m_yard_line_territory));
    }
    return obj;
}

qint32 OAIScore::getAttendance() const {
    return m_attendance;
}
void OAIScore::setAttendance(const qint32 &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAIScore::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAIScore::is_attendance_Valid() const{
    return m_attendance_isValid;
}

qint32 OAIScore::getAwayRotationNumber() const {
    return m_away_rotation_number;
}
void OAIScore::setAwayRotationNumber(const qint32 &away_rotation_number) {
    m_away_rotation_number = away_rotation_number;
    m_away_rotation_number_isSet = true;
}

bool OAIScore::is_away_rotation_number_Set() const{
    return m_away_rotation_number_isSet;
}

bool OAIScore::is_away_rotation_number_Valid() const{
    return m_away_rotation_number_isValid;
}

qint32 OAIScore::getAwayScore() const {
    return m_away_score;
}
void OAIScore::setAwayScore(const qint32 &away_score) {
    m_away_score = away_score;
    m_away_score_isSet = true;
}

bool OAIScore::is_away_score_Set() const{
    return m_away_score_isSet;
}

bool OAIScore::is_away_score_Valid() const{
    return m_away_score_isValid;
}

qint32 OAIScore::getAwayScoreOvertime() const {
    return m_away_score_overtime;
}
void OAIScore::setAwayScoreOvertime(const qint32 &away_score_overtime) {
    m_away_score_overtime = away_score_overtime;
    m_away_score_overtime_isSet = true;
}

bool OAIScore::is_away_score_overtime_Set() const{
    return m_away_score_overtime_isSet;
}

bool OAIScore::is_away_score_overtime_Valid() const{
    return m_away_score_overtime_isValid;
}

qint32 OAIScore::getAwayScoreQuarter1() const {
    return m_away_score_quarter1;
}
void OAIScore::setAwayScoreQuarter1(const qint32 &away_score_quarter1) {
    m_away_score_quarter1 = away_score_quarter1;
    m_away_score_quarter1_isSet = true;
}

bool OAIScore::is_away_score_quarter1_Set() const{
    return m_away_score_quarter1_isSet;
}

bool OAIScore::is_away_score_quarter1_Valid() const{
    return m_away_score_quarter1_isValid;
}

qint32 OAIScore::getAwayScoreQuarter2() const {
    return m_away_score_quarter2;
}
void OAIScore::setAwayScoreQuarter2(const qint32 &away_score_quarter2) {
    m_away_score_quarter2 = away_score_quarter2;
    m_away_score_quarter2_isSet = true;
}

bool OAIScore::is_away_score_quarter2_Set() const{
    return m_away_score_quarter2_isSet;
}

bool OAIScore::is_away_score_quarter2_Valid() const{
    return m_away_score_quarter2_isValid;
}

qint32 OAIScore::getAwayScoreQuarter3() const {
    return m_away_score_quarter3;
}
void OAIScore::setAwayScoreQuarter3(const qint32 &away_score_quarter3) {
    m_away_score_quarter3 = away_score_quarter3;
    m_away_score_quarter3_isSet = true;
}

bool OAIScore::is_away_score_quarter3_Set() const{
    return m_away_score_quarter3_isSet;
}

bool OAIScore::is_away_score_quarter3_Valid() const{
    return m_away_score_quarter3_isValid;
}

qint32 OAIScore::getAwayScoreQuarter4() const {
    return m_away_score_quarter4;
}
void OAIScore::setAwayScoreQuarter4(const qint32 &away_score_quarter4) {
    m_away_score_quarter4 = away_score_quarter4;
    m_away_score_quarter4_isSet = true;
}

bool OAIScore::is_away_score_quarter4_Set() const{
    return m_away_score_quarter4_isSet;
}

bool OAIScore::is_away_score_quarter4_Valid() const{
    return m_away_score_quarter4_isValid;
}

QString OAIScore::getAwayTeam() const {
    return m_away_team;
}
void OAIScore::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIScore::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIScore::is_away_team_Valid() const{
    return m_away_team_isValid;
}

qint32 OAIScore::getAwayTeamId() const {
    return m_away_team_id;
}
void OAIScore::setAwayTeamId(const qint32 &away_team_id) {
    m_away_team_id = away_team_id;
    m_away_team_id_isSet = true;
}

bool OAIScore::is_away_team_id_Set() const{
    return m_away_team_id_isSet;
}

bool OAIScore::is_away_team_id_Valid() const{
    return m_away_team_id_isValid;
}

qint32 OAIScore::getAwayTeamMoneyLine() const {
    return m_away_team_money_line;
}
void OAIScore::setAwayTeamMoneyLine(const qint32 &away_team_money_line) {
    m_away_team_money_line = away_team_money_line;
    m_away_team_money_line_isSet = true;
}

bool OAIScore::is_away_team_money_line_Set() const{
    return m_away_team_money_line_isSet;
}

bool OAIScore::is_away_team_money_line_Valid() const{
    return m_away_team_money_line_isValid;
}

qint32 OAIScore::getAwayTimeouts() const {
    return m_away_timeouts;
}
void OAIScore::setAwayTimeouts(const qint32 &away_timeouts) {
    m_away_timeouts = away_timeouts;
    m_away_timeouts_isSet = true;
}

bool OAIScore::is_away_timeouts_Set() const{
    return m_away_timeouts_isSet;
}

bool OAIScore::is_away_timeouts_Valid() const{
    return m_away_timeouts_isValid;
}

bool OAIScore::isCanceled() const {
    return m_canceled;
}
void OAIScore::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAIScore::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAIScore::is_canceled_Valid() const{
    return m_canceled_isValid;
}

QString OAIScore::getChannel() const {
    return m_channel;
}
void OAIScore::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIScore::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIScore::is_channel_Valid() const{
    return m_channel_isValid;
}

bool OAIScore::isClosed() const {
    return m_closed;
}
void OAIScore::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIScore::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIScore::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIScore::getDate() const {
    return m_date;
}
void OAIScore::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIScore::is_date_Set() const{
    return m_date_isSet;
}

bool OAIScore::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIScore::getDateTime() const {
    return m_date_time;
}
void OAIScore::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIScore::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIScore::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIScore::getDateTimeUtc() const {
    return m_date_time_utc;
}
void OAIScore::setDateTimeUtc(const QString &date_time_utc) {
    m_date_time_utc = date_time_utc;
    m_date_time_utc_isSet = true;
}

bool OAIScore::is_date_time_utc_Set() const{
    return m_date_time_utc_isSet;
}

bool OAIScore::is_date_time_utc_Valid() const{
    return m_date_time_utc_isValid;
}

QString OAIScore::getDay() const {
    return m_day;
}
void OAIScore::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIScore::is_day_Set() const{
    return m_day_isSet;
}

bool OAIScore::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIScore::getDistance() const {
    return m_distance;
}
void OAIScore::setDistance(const QString &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIScore::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIScore::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIScore::getDown() const {
    return m_down;
}
void OAIScore::setDown(const qint32 &down) {
    m_down = down;
    m_down_isSet = true;
}

bool OAIScore::is_down_Set() const{
    return m_down_isSet;
}

bool OAIScore::is_down_Valid() const{
    return m_down_isValid;
}

QString OAIScore::getDownAndDistance() const {
    return m_down_and_distance;
}
void OAIScore::setDownAndDistance(const QString &down_and_distance) {
    m_down_and_distance = down_and_distance;
    m_down_and_distance_isSet = true;
}

bool OAIScore::is_down_and_distance_Set() const{
    return m_down_and_distance_isSet;
}

bool OAIScore::is_down_and_distance_Valid() const{
    return m_down_and_distance_isValid;
}

QString OAIScore::getForecastDescription() const {
    return m_forecast_description;
}
void OAIScore::setForecastDescription(const QString &forecast_description) {
    m_forecast_description = forecast_description;
    m_forecast_description_isSet = true;
}

bool OAIScore::is_forecast_description_Set() const{
    return m_forecast_description_isSet;
}

bool OAIScore::is_forecast_description_Valid() const{
    return m_forecast_description_isValid;
}

qint32 OAIScore::getForecastTempHigh() const {
    return m_forecast_temp_high;
}
void OAIScore::setForecastTempHigh(const qint32 &forecast_temp_high) {
    m_forecast_temp_high = forecast_temp_high;
    m_forecast_temp_high_isSet = true;
}

bool OAIScore::is_forecast_temp_high_Set() const{
    return m_forecast_temp_high_isSet;
}

bool OAIScore::is_forecast_temp_high_Valid() const{
    return m_forecast_temp_high_isValid;
}

qint32 OAIScore::getForecastTempLow() const {
    return m_forecast_temp_low;
}
void OAIScore::setForecastTempLow(const qint32 &forecast_temp_low) {
    m_forecast_temp_low = forecast_temp_low;
    m_forecast_temp_low_isSet = true;
}

bool OAIScore::is_forecast_temp_low_Set() const{
    return m_forecast_temp_low_isSet;
}

bool OAIScore::is_forecast_temp_low_Valid() const{
    return m_forecast_temp_low_isValid;
}

qint32 OAIScore::getForecastWindChill() const {
    return m_forecast_wind_chill;
}
void OAIScore::setForecastWindChill(const qint32 &forecast_wind_chill) {
    m_forecast_wind_chill = forecast_wind_chill;
    m_forecast_wind_chill_isSet = true;
}

bool OAIScore::is_forecast_wind_chill_Set() const{
    return m_forecast_wind_chill_isSet;
}

bool OAIScore::is_forecast_wind_chill_Valid() const{
    return m_forecast_wind_chill_isValid;
}

qint32 OAIScore::getForecastWindSpeed() const {
    return m_forecast_wind_speed;
}
void OAIScore::setForecastWindSpeed(const qint32 &forecast_wind_speed) {
    m_forecast_wind_speed = forecast_wind_speed;
    m_forecast_wind_speed_isSet = true;
}

bool OAIScore::is_forecast_wind_speed_Set() const{
    return m_forecast_wind_speed_isSet;
}

bool OAIScore::is_forecast_wind_speed_Valid() const{
    return m_forecast_wind_speed_isValid;
}

QString OAIScore::getGameEndDateTime() const {
    return m_game_end_date_time;
}
void OAIScore::setGameEndDateTime(const QString &game_end_date_time) {
    m_game_end_date_time = game_end_date_time;
    m_game_end_date_time_isSet = true;
}

bool OAIScore::is_game_end_date_time_Set() const{
    return m_game_end_date_time_isSet;
}

bool OAIScore::is_game_end_date_time_Valid() const{
    return m_game_end_date_time_isValid;
}

QString OAIScore::getGameKey() const {
    return m_game_key;
}
void OAIScore::setGameKey(const QString &game_key) {
    m_game_key = game_key;
    m_game_key_isSet = true;
}

bool OAIScore::is_game_key_Set() const{
    return m_game_key_isSet;
}

bool OAIScore::is_game_key_Valid() const{
    return m_game_key_isValid;
}

double OAIScore::getGeoLat() const {
    return m_geo_lat;
}
void OAIScore::setGeoLat(const double &geo_lat) {
    m_geo_lat = geo_lat;
    m_geo_lat_isSet = true;
}

bool OAIScore::is_geo_lat_Set() const{
    return m_geo_lat_isSet;
}

bool OAIScore::is_geo_lat_Valid() const{
    return m_geo_lat_isValid;
}

double OAIScore::getGeoLong() const {
    return m_geo_long;
}
void OAIScore::setGeoLong(const double &geo_long) {
    m_geo_long = geo_long;
    m_geo_long_isSet = true;
}

bool OAIScore::is_geo_long_Set() const{
    return m_geo_long_isSet;
}

bool OAIScore::is_geo_long_Valid() const{
    return m_geo_long_isValid;
}

qint32 OAIScore::getGlobalAwayTeamId() const {
    return m_global_away_team_id;
}
void OAIScore::setGlobalAwayTeamId(const qint32 &global_away_team_id) {
    m_global_away_team_id = global_away_team_id;
    m_global_away_team_id_isSet = true;
}

bool OAIScore::is_global_away_team_id_Set() const{
    return m_global_away_team_id_isSet;
}

bool OAIScore::is_global_away_team_id_Valid() const{
    return m_global_away_team_id_isValid;
}

qint32 OAIScore::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIScore::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIScore::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIScore::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIScore::getGlobalHomeTeamId() const {
    return m_global_home_team_id;
}
void OAIScore::setGlobalHomeTeamId(const qint32 &global_home_team_id) {
    m_global_home_team_id = global_home_team_id;
    m_global_home_team_id_isSet = true;
}

bool OAIScore::is_global_home_team_id_Set() const{
    return m_global_home_team_id_isSet;
}

bool OAIScore::is_global_home_team_id_Valid() const{
    return m_global_home_team_id_isValid;
}

bool OAIScore::isHas1stQuarterStarted() const {
    return m_has1st_quarter_started;
}
void OAIScore::setHas1stQuarterStarted(const bool &has1st_quarter_started) {
    m_has1st_quarter_started = has1st_quarter_started;
    m_has1st_quarter_started_isSet = true;
}

bool OAIScore::is_has1st_quarter_started_Set() const{
    return m_has1st_quarter_started_isSet;
}

bool OAIScore::is_has1st_quarter_started_Valid() const{
    return m_has1st_quarter_started_isValid;
}

bool OAIScore::isHas2ndQuarterStarted() const {
    return m_has2nd_quarter_started;
}
void OAIScore::setHas2ndQuarterStarted(const bool &has2nd_quarter_started) {
    m_has2nd_quarter_started = has2nd_quarter_started;
    m_has2nd_quarter_started_isSet = true;
}

bool OAIScore::is_has2nd_quarter_started_Set() const{
    return m_has2nd_quarter_started_isSet;
}

bool OAIScore::is_has2nd_quarter_started_Valid() const{
    return m_has2nd_quarter_started_isValid;
}

bool OAIScore::isHas3rdQuarterStarted() const {
    return m_has3rd_quarter_started;
}
void OAIScore::setHas3rdQuarterStarted(const bool &has3rd_quarter_started) {
    m_has3rd_quarter_started = has3rd_quarter_started;
    m_has3rd_quarter_started_isSet = true;
}

bool OAIScore::is_has3rd_quarter_started_Set() const{
    return m_has3rd_quarter_started_isSet;
}

bool OAIScore::is_has3rd_quarter_started_Valid() const{
    return m_has3rd_quarter_started_isValid;
}

bool OAIScore::isHas4thQuarterStarted() const {
    return m_has4th_quarter_started;
}
void OAIScore::setHas4thQuarterStarted(const bool &has4th_quarter_started) {
    m_has4th_quarter_started = has4th_quarter_started;
    m_has4th_quarter_started_isSet = true;
}

bool OAIScore::is_has4th_quarter_started_Set() const{
    return m_has4th_quarter_started_isSet;
}

bool OAIScore::is_has4th_quarter_started_Valid() const{
    return m_has4th_quarter_started_isValid;
}

bool OAIScore::isHasStarted() const {
    return m_has_started;
}
void OAIScore::setHasStarted(const bool &has_started) {
    m_has_started = has_started;
    m_has_started_isSet = true;
}

bool OAIScore::is_has_started_Set() const{
    return m_has_started_isSet;
}

bool OAIScore::is_has_started_Valid() const{
    return m_has_started_isValid;
}

qint32 OAIScore::getHomeRotationNumber() const {
    return m_home_rotation_number;
}
void OAIScore::setHomeRotationNumber(const qint32 &home_rotation_number) {
    m_home_rotation_number = home_rotation_number;
    m_home_rotation_number_isSet = true;
}

bool OAIScore::is_home_rotation_number_Set() const{
    return m_home_rotation_number_isSet;
}

bool OAIScore::is_home_rotation_number_Valid() const{
    return m_home_rotation_number_isValid;
}

qint32 OAIScore::getHomeScore() const {
    return m_home_score;
}
void OAIScore::setHomeScore(const qint32 &home_score) {
    m_home_score = home_score;
    m_home_score_isSet = true;
}

bool OAIScore::is_home_score_Set() const{
    return m_home_score_isSet;
}

bool OAIScore::is_home_score_Valid() const{
    return m_home_score_isValid;
}

qint32 OAIScore::getHomeScoreOvertime() const {
    return m_home_score_overtime;
}
void OAIScore::setHomeScoreOvertime(const qint32 &home_score_overtime) {
    m_home_score_overtime = home_score_overtime;
    m_home_score_overtime_isSet = true;
}

bool OAIScore::is_home_score_overtime_Set() const{
    return m_home_score_overtime_isSet;
}

bool OAIScore::is_home_score_overtime_Valid() const{
    return m_home_score_overtime_isValid;
}

qint32 OAIScore::getHomeScoreQuarter1() const {
    return m_home_score_quarter1;
}
void OAIScore::setHomeScoreQuarter1(const qint32 &home_score_quarter1) {
    m_home_score_quarter1 = home_score_quarter1;
    m_home_score_quarter1_isSet = true;
}

bool OAIScore::is_home_score_quarter1_Set() const{
    return m_home_score_quarter1_isSet;
}

bool OAIScore::is_home_score_quarter1_Valid() const{
    return m_home_score_quarter1_isValid;
}

qint32 OAIScore::getHomeScoreQuarter2() const {
    return m_home_score_quarter2;
}
void OAIScore::setHomeScoreQuarter2(const qint32 &home_score_quarter2) {
    m_home_score_quarter2 = home_score_quarter2;
    m_home_score_quarter2_isSet = true;
}

bool OAIScore::is_home_score_quarter2_Set() const{
    return m_home_score_quarter2_isSet;
}

bool OAIScore::is_home_score_quarter2_Valid() const{
    return m_home_score_quarter2_isValid;
}

qint32 OAIScore::getHomeScoreQuarter3() const {
    return m_home_score_quarter3;
}
void OAIScore::setHomeScoreQuarter3(const qint32 &home_score_quarter3) {
    m_home_score_quarter3 = home_score_quarter3;
    m_home_score_quarter3_isSet = true;
}

bool OAIScore::is_home_score_quarter3_Set() const{
    return m_home_score_quarter3_isSet;
}

bool OAIScore::is_home_score_quarter3_Valid() const{
    return m_home_score_quarter3_isValid;
}

qint32 OAIScore::getHomeScoreQuarter4() const {
    return m_home_score_quarter4;
}
void OAIScore::setHomeScoreQuarter4(const qint32 &home_score_quarter4) {
    m_home_score_quarter4 = home_score_quarter4;
    m_home_score_quarter4_isSet = true;
}

bool OAIScore::is_home_score_quarter4_Set() const{
    return m_home_score_quarter4_isSet;
}

bool OAIScore::is_home_score_quarter4_Valid() const{
    return m_home_score_quarter4_isValid;
}

QString OAIScore::getHomeTeam() const {
    return m_home_team;
}
void OAIScore::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIScore::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIScore::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIScore::getHomeTeamId() const {
    return m_home_team_id;
}
void OAIScore::setHomeTeamId(const qint32 &home_team_id) {
    m_home_team_id = home_team_id;
    m_home_team_id_isSet = true;
}

bool OAIScore::is_home_team_id_Set() const{
    return m_home_team_id_isSet;
}

bool OAIScore::is_home_team_id_Valid() const{
    return m_home_team_id_isValid;
}

qint32 OAIScore::getHomeTeamMoneyLine() const {
    return m_home_team_money_line;
}
void OAIScore::setHomeTeamMoneyLine(const qint32 &home_team_money_line) {
    m_home_team_money_line = home_team_money_line;
    m_home_team_money_line_isSet = true;
}

bool OAIScore::is_home_team_money_line_Set() const{
    return m_home_team_money_line_isSet;
}

bool OAIScore::is_home_team_money_line_Valid() const{
    return m_home_team_money_line_isValid;
}

qint32 OAIScore::getHomeTimeouts() const {
    return m_home_timeouts;
}
void OAIScore::setHomeTimeouts(const qint32 &home_timeouts) {
    m_home_timeouts = home_timeouts;
    m_home_timeouts_isSet = true;
}

bool OAIScore::is_home_timeouts_Set() const{
    return m_home_timeouts_isSet;
}

bool OAIScore::is_home_timeouts_Valid() const{
    return m_home_timeouts_isValid;
}

bool OAIScore::isIsInProgress() const {
    return m_is_in_progress;
}
void OAIScore::setIsInProgress(const bool &is_in_progress) {
    m_is_in_progress = is_in_progress;
    m_is_in_progress_isSet = true;
}

bool OAIScore::is_is_in_progress_Set() const{
    return m_is_in_progress_isSet;
}

bool OAIScore::is_is_in_progress_Valid() const{
    return m_is_in_progress_isValid;
}

bool OAIScore::isIsOver() const {
    return m_is_over;
}
void OAIScore::setIsOver(const bool &is_over) {
    m_is_over = is_over;
    m_is_over_isSet = true;
}

bool OAIScore::is_is_over_Set() const{
    return m_is_over_isSet;
}

bool OAIScore::is_is_over_Valid() const{
    return m_is_over_isValid;
}

bool OAIScore::isIsOvertime() const {
    return m_is_overtime;
}
void OAIScore::setIsOvertime(const bool &is_overtime) {
    m_is_overtime = is_overtime;
    m_is_overtime_isSet = true;
}

bool OAIScore::is_is_overtime_Set() const{
    return m_is_overtime_isSet;
}

bool OAIScore::is_is_overtime_Valid() const{
    return m_is_overtime_isValid;
}

QString OAIScore::getLastPlay() const {
    return m_last_play;
}
void OAIScore::setLastPlay(const QString &last_play) {
    m_last_play = last_play;
    m_last_play_isSet = true;
}

bool OAIScore::is_last_play_Set() const{
    return m_last_play_isSet;
}

bool OAIScore::is_last_play_Valid() const{
    return m_last_play_isValid;
}

QString OAIScore::getLastUpdated() const {
    return m_last_updated;
}
void OAIScore::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIScore::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIScore::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

bool OAIScore::isNeutralVenue() const {
    return m_neutral_venue;
}
void OAIScore::setNeutralVenue(const bool &neutral_venue) {
    m_neutral_venue = neutral_venue;
    m_neutral_venue_isSet = true;
}

bool OAIScore::is_neutral_venue_Set() const{
    return m_neutral_venue_isSet;
}

bool OAIScore::is_neutral_venue_Valid() const{
    return m_neutral_venue_isValid;
}

qint32 OAIScore::getOverPayout() const {
    return m_over_payout;
}
void OAIScore::setOverPayout(const qint32 &over_payout) {
    m_over_payout = over_payout;
    m_over_payout_isSet = true;
}

bool OAIScore::is_over_payout_Set() const{
    return m_over_payout_isSet;
}

bool OAIScore::is_over_payout_Valid() const{
    return m_over_payout_isValid;
}

double OAIScore::getOverUnder() const {
    return m_over_under;
}
void OAIScore::setOverUnder(const double &over_under) {
    m_over_under = over_under;
    m_over_under_isSet = true;
}

bool OAIScore::is_over_under_Set() const{
    return m_over_under_isSet;
}

bool OAIScore::is_over_under_Valid() const{
    return m_over_under_isValid;
}

double OAIScore::getPointSpread() const {
    return m_point_spread;
}
void OAIScore::setPointSpread(const double &point_spread) {
    m_point_spread = point_spread;
    m_point_spread_isSet = true;
}

bool OAIScore::is_point_spread_Set() const{
    return m_point_spread_isSet;
}

bool OAIScore::is_point_spread_Valid() const{
    return m_point_spread_isValid;
}

qint32 OAIScore::getPointSpreadAwayTeamMoneyLine() const {
    return m_point_spread_away_team_money_line;
}
void OAIScore::setPointSpreadAwayTeamMoneyLine(const qint32 &point_spread_away_team_money_line) {
    m_point_spread_away_team_money_line = point_spread_away_team_money_line;
    m_point_spread_away_team_money_line_isSet = true;
}

bool OAIScore::is_point_spread_away_team_money_line_Set() const{
    return m_point_spread_away_team_money_line_isSet;
}

bool OAIScore::is_point_spread_away_team_money_line_Valid() const{
    return m_point_spread_away_team_money_line_isValid;
}

qint32 OAIScore::getPointSpreadHomeTeamMoneyLine() const {
    return m_point_spread_home_team_money_line;
}
void OAIScore::setPointSpreadHomeTeamMoneyLine(const qint32 &point_spread_home_team_money_line) {
    m_point_spread_home_team_money_line = point_spread_home_team_money_line;
    m_point_spread_home_team_money_line_isSet = true;
}

bool OAIScore::is_point_spread_home_team_money_line_Set() const{
    return m_point_spread_home_team_money_line_isSet;
}

bool OAIScore::is_point_spread_home_team_money_line_Valid() const{
    return m_point_spread_home_team_money_line_isValid;
}

QString OAIScore::getPossession() const {
    return m_possession;
}
void OAIScore::setPossession(const QString &possession) {
    m_possession = possession;
    m_possession_isSet = true;
}

bool OAIScore::is_possession_Set() const{
    return m_possession_isSet;
}

bool OAIScore::is_possession_Valid() const{
    return m_possession_isValid;
}

QString OAIScore::getQuarter() const {
    return m_quarter;
}
void OAIScore::setQuarter(const QString &quarter) {
    m_quarter = quarter;
    m_quarter_isSet = true;
}

bool OAIScore::is_quarter_Set() const{
    return m_quarter_isSet;
}

bool OAIScore::is_quarter_Valid() const{
    return m_quarter_isValid;
}

QString OAIScore::getQuarterDescription() const {
    return m_quarter_description;
}
void OAIScore::setQuarterDescription(const QString &quarter_description) {
    m_quarter_description = quarter_description;
    m_quarter_description_isSet = true;
}

bool OAIScore::is_quarter_description_Set() const{
    return m_quarter_description_isSet;
}

bool OAIScore::is_quarter_description_Valid() const{
    return m_quarter_description_isValid;
}

QString OAIScore::getRedZone() const {
    return m_red_zone;
}
void OAIScore::setRedZone(const QString &red_zone) {
    m_red_zone = red_zone;
    m_red_zone_isSet = true;
}

bool OAIScore::is_red_zone_Set() const{
    return m_red_zone_isSet;
}

bool OAIScore::is_red_zone_Valid() const{
    return m_red_zone_isValid;
}

qint32 OAIScore::getRefereeId() const {
    return m_referee_id;
}
void OAIScore::setRefereeId(const qint32 &referee_id) {
    m_referee_id = referee_id;
    m_referee_id_isSet = true;
}

bool OAIScore::is_referee_id_Set() const{
    return m_referee_id_isSet;
}

bool OAIScore::is_referee_id_Valid() const{
    return m_referee_id_isValid;
}

qint32 OAIScore::getScoreId() const {
    return m_score_id;
}
void OAIScore::setScoreId(const qint32 &score_id) {
    m_score_id = score_id;
    m_score_id_isSet = true;
}

bool OAIScore::is_score_id_Set() const{
    return m_score_id_isSet;
}

bool OAIScore::is_score_id_Valid() const{
    return m_score_id_isValid;
}

qint32 OAIScore::getSeason() const {
    return m_season;
}
void OAIScore::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIScore::is_season_Set() const{
    return m_season_isSet;
}

bool OAIScore::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIScore::getSeasonType() const {
    return m_season_type;
}
void OAIScore::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIScore::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIScore::is_season_type_Valid() const{
    return m_season_type_isValid;
}

OAIStadium OAIScore::getStadiumDetails() const {
    return m_stadium_details;
}
void OAIScore::setStadiumDetails(const OAIStadium &stadium_details) {
    m_stadium_details = stadium_details;
    m_stadium_details_isSet = true;
}

bool OAIScore::is_stadium_details_Set() const{
    return m_stadium_details_isSet;
}

bool OAIScore::is_stadium_details_Valid() const{
    return m_stadium_details_isValid;
}

qint32 OAIScore::getStadiumId() const {
    return m_stadium_id;
}
void OAIScore::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAIScore::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAIScore::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

QString OAIScore::getStatus() const {
    return m_status;
}
void OAIScore::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScore::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScore::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIScore::getTimeRemaining() const {
    return m_time_remaining;
}
void OAIScore::setTimeRemaining(const QString &time_remaining) {
    m_time_remaining = time_remaining;
    m_time_remaining_isSet = true;
}

bool OAIScore::is_time_remaining_Set() const{
    return m_time_remaining_isSet;
}

bool OAIScore::is_time_remaining_Valid() const{
    return m_time_remaining_isValid;
}

qint32 OAIScore::getUnderPayout() const {
    return m_under_payout;
}
void OAIScore::setUnderPayout(const qint32 &under_payout) {
    m_under_payout = under_payout;
    m_under_payout_isSet = true;
}

bool OAIScore::is_under_payout_Set() const{
    return m_under_payout_isSet;
}

bool OAIScore::is_under_payout_Valid() const{
    return m_under_payout_isValid;
}

qint32 OAIScore::getWeek() const {
    return m_week;
}
void OAIScore::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIScore::is_week_Set() const{
    return m_week_isSet;
}

bool OAIScore::is_week_Valid() const{
    return m_week_isValid;
}

qint32 OAIScore::getYardLine() const {
    return m_yard_line;
}
void OAIScore::setYardLine(const qint32 &yard_line) {
    m_yard_line = yard_line;
    m_yard_line_isSet = true;
}

bool OAIScore::is_yard_line_Set() const{
    return m_yard_line_isSet;
}

bool OAIScore::is_yard_line_Valid() const{
    return m_yard_line_isValid;
}

QString OAIScore::getYardLineTerritory() const {
    return m_yard_line_territory;
}
void OAIScore::setYardLineTerritory(const QString &yard_line_territory) {
    m_yard_line_territory = yard_line_territory;
    m_yard_line_territory_isSet = true;
}

bool OAIScore::is_yard_line_territory_Set() const{
    return m_yard_line_territory_isSet;
}

bool OAIScore::is_yard_line_territory_Valid() const{
    return m_yard_line_territory_isValid;
}

bool OAIScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_rotation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_quarter1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_quarter2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_quarter3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_quarter4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_timeouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_and_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_temp_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_temp_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_wind_chill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has1st_quarter_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has2nd_quarter_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has3rd_quarter_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has4th_quarter_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_rotation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_quarter1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_quarter2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_quarter3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_quarter4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_timeouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yard_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yard_line_territory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
