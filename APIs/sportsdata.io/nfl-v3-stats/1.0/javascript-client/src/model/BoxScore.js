/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FantasyDefenseGame from './FantasyDefenseGame';
import Game from './Game';
import PlayerDefense from './PlayerDefense';
import PlayerKickPuntReturns from './PlayerKickPuntReturns';
import PlayerKicking from './PlayerKicking';
import PlayerPassing from './PlayerPassing';
import PlayerPunting from './PlayerPunting';
import PlayerReceiving from './PlayerReceiving';
import PlayerRushing from './PlayerRushing';
import Score from './Score';
import ScoringDetail from './ScoringDetail';
import ScoringPlay from './ScoringPlay';

/**
 * The BoxScore model module.
 * @module model/BoxScore
 * @version 1.0
 */
class BoxScore {
    /**
     * Constructs a new <code>BoxScore</code>.
     * @alias module:model/BoxScore
     */
    constructor() { 
        
        BoxScore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BoxScore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BoxScore} obj Optional instance to populate.
     * @return {module:model/BoxScore} The populated <code>BoxScore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BoxScore();

            if (data.hasOwnProperty('AwayDefense')) {
                obj['AwayDefense'] = ApiClient.convertToType(data['AwayDefense'], [PlayerDefense]);
            }
            if (data.hasOwnProperty('AwayFantasyDefense')) {
                obj['AwayFantasyDefense'] = FantasyDefenseGame.constructFromObject(data['AwayFantasyDefense']);
            }
            if (data.hasOwnProperty('AwayKickPuntReturns')) {
                obj['AwayKickPuntReturns'] = ApiClient.convertToType(data['AwayKickPuntReturns'], [PlayerKickPuntReturns]);
            }
            if (data.hasOwnProperty('AwayKicking')) {
                obj['AwayKicking'] = ApiClient.convertToType(data['AwayKicking'], [PlayerKicking]);
            }
            if (data.hasOwnProperty('AwayPassing')) {
                obj['AwayPassing'] = ApiClient.convertToType(data['AwayPassing'], [PlayerPassing]);
            }
            if (data.hasOwnProperty('AwayPunting')) {
                obj['AwayPunting'] = ApiClient.convertToType(data['AwayPunting'], [PlayerPunting]);
            }
            if (data.hasOwnProperty('AwayReceiving')) {
                obj['AwayReceiving'] = ApiClient.convertToType(data['AwayReceiving'], [PlayerReceiving]);
            }
            if (data.hasOwnProperty('AwayRushing')) {
                obj['AwayRushing'] = ApiClient.convertToType(data['AwayRushing'], [PlayerRushing]);
            }
            if (data.hasOwnProperty('Game')) {
                obj['Game'] = Game.constructFromObject(data['Game']);
            }
            if (data.hasOwnProperty('HomeDefense')) {
                obj['HomeDefense'] = ApiClient.convertToType(data['HomeDefense'], [PlayerDefense]);
            }
            if (data.hasOwnProperty('HomeFantasyDefense')) {
                obj['HomeFantasyDefense'] = FantasyDefenseGame.constructFromObject(data['HomeFantasyDefense']);
            }
            if (data.hasOwnProperty('HomeKickPuntReturns')) {
                obj['HomeKickPuntReturns'] = ApiClient.convertToType(data['HomeKickPuntReturns'], [PlayerKickPuntReturns]);
            }
            if (data.hasOwnProperty('HomeKicking')) {
                obj['HomeKicking'] = ApiClient.convertToType(data['HomeKicking'], [PlayerKicking]);
            }
            if (data.hasOwnProperty('HomePassing')) {
                obj['HomePassing'] = ApiClient.convertToType(data['HomePassing'], [PlayerPassing]);
            }
            if (data.hasOwnProperty('HomePunting')) {
                obj['HomePunting'] = ApiClient.convertToType(data['HomePunting'], [PlayerPunting]);
            }
            if (data.hasOwnProperty('HomeReceiving')) {
                obj['HomeReceiving'] = ApiClient.convertToType(data['HomeReceiving'], [PlayerReceiving]);
            }
            if (data.hasOwnProperty('HomeRushing')) {
                obj['HomeRushing'] = ApiClient.convertToType(data['HomeRushing'], [PlayerRushing]);
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = Score.constructFromObject(data['Score']);
            }
            if (data.hasOwnProperty('ScoringDetails')) {
                obj['ScoringDetails'] = ApiClient.convertToType(data['ScoringDetails'], [ScoringDetail]);
            }
            if (data.hasOwnProperty('ScoringPlays')) {
                obj['ScoringPlays'] = ApiClient.convertToType(data['ScoringPlays'], [ScoringPlay]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BoxScore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BoxScore</code>.
     */
    static validateJSON(data) {
        if (data['AwayDefense']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AwayDefense'])) {
                throw new Error("Expected the field `AwayDefense` to be an array in the JSON data but got " + data['AwayDefense']);
            }
            // validate the optional field `AwayDefense` (array)
            for (const item of data['AwayDefense']) {
                PlayerDefense.validateJSON(item);
            };
        }
        // validate the optional field `AwayFantasyDefense`
        if (data['AwayFantasyDefense']) { // data not null
          FantasyDefenseGame.validateJSON(data['AwayFantasyDefense']);
        }
        if (data['AwayKickPuntReturns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AwayKickPuntReturns'])) {
                throw new Error("Expected the field `AwayKickPuntReturns` to be an array in the JSON data but got " + data['AwayKickPuntReturns']);
            }
            // validate the optional field `AwayKickPuntReturns` (array)
            for (const item of data['AwayKickPuntReturns']) {
                PlayerKickPuntReturns.validateJSON(item);
            };
        }
        if (data['AwayKicking']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AwayKicking'])) {
                throw new Error("Expected the field `AwayKicking` to be an array in the JSON data but got " + data['AwayKicking']);
            }
            // validate the optional field `AwayKicking` (array)
            for (const item of data['AwayKicking']) {
                PlayerKicking.validateJSON(item);
            };
        }
        if (data['AwayPassing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AwayPassing'])) {
                throw new Error("Expected the field `AwayPassing` to be an array in the JSON data but got " + data['AwayPassing']);
            }
            // validate the optional field `AwayPassing` (array)
            for (const item of data['AwayPassing']) {
                PlayerPassing.validateJSON(item);
            };
        }
        if (data['AwayPunting']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AwayPunting'])) {
                throw new Error("Expected the field `AwayPunting` to be an array in the JSON data but got " + data['AwayPunting']);
            }
            // validate the optional field `AwayPunting` (array)
            for (const item of data['AwayPunting']) {
                PlayerPunting.validateJSON(item);
            };
        }
        if (data['AwayReceiving']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AwayReceiving'])) {
                throw new Error("Expected the field `AwayReceiving` to be an array in the JSON data but got " + data['AwayReceiving']);
            }
            // validate the optional field `AwayReceiving` (array)
            for (const item of data['AwayReceiving']) {
                PlayerReceiving.validateJSON(item);
            };
        }
        if (data['AwayRushing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AwayRushing'])) {
                throw new Error("Expected the field `AwayRushing` to be an array in the JSON data but got " + data['AwayRushing']);
            }
            // validate the optional field `AwayRushing` (array)
            for (const item of data['AwayRushing']) {
                PlayerRushing.validateJSON(item);
            };
        }
        // validate the optional field `Game`
        if (data['Game']) { // data not null
          Game.validateJSON(data['Game']);
        }
        if (data['HomeDefense']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HomeDefense'])) {
                throw new Error("Expected the field `HomeDefense` to be an array in the JSON data but got " + data['HomeDefense']);
            }
            // validate the optional field `HomeDefense` (array)
            for (const item of data['HomeDefense']) {
                PlayerDefense.validateJSON(item);
            };
        }
        // validate the optional field `HomeFantasyDefense`
        if (data['HomeFantasyDefense']) { // data not null
          FantasyDefenseGame.validateJSON(data['HomeFantasyDefense']);
        }
        if (data['HomeKickPuntReturns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HomeKickPuntReturns'])) {
                throw new Error("Expected the field `HomeKickPuntReturns` to be an array in the JSON data but got " + data['HomeKickPuntReturns']);
            }
            // validate the optional field `HomeKickPuntReturns` (array)
            for (const item of data['HomeKickPuntReturns']) {
                PlayerKickPuntReturns.validateJSON(item);
            };
        }
        if (data['HomeKicking']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HomeKicking'])) {
                throw new Error("Expected the field `HomeKicking` to be an array in the JSON data but got " + data['HomeKicking']);
            }
            // validate the optional field `HomeKicking` (array)
            for (const item of data['HomeKicking']) {
                PlayerKicking.validateJSON(item);
            };
        }
        if (data['HomePassing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HomePassing'])) {
                throw new Error("Expected the field `HomePassing` to be an array in the JSON data but got " + data['HomePassing']);
            }
            // validate the optional field `HomePassing` (array)
            for (const item of data['HomePassing']) {
                PlayerPassing.validateJSON(item);
            };
        }
        if (data['HomePunting']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HomePunting'])) {
                throw new Error("Expected the field `HomePunting` to be an array in the JSON data but got " + data['HomePunting']);
            }
            // validate the optional field `HomePunting` (array)
            for (const item of data['HomePunting']) {
                PlayerPunting.validateJSON(item);
            };
        }
        if (data['HomeReceiving']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HomeReceiving'])) {
                throw new Error("Expected the field `HomeReceiving` to be an array in the JSON data but got " + data['HomeReceiving']);
            }
            // validate the optional field `HomeReceiving` (array)
            for (const item of data['HomeReceiving']) {
                PlayerReceiving.validateJSON(item);
            };
        }
        if (data['HomeRushing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['HomeRushing'])) {
                throw new Error("Expected the field `HomeRushing` to be an array in the JSON data but got " + data['HomeRushing']);
            }
            // validate the optional field `HomeRushing` (array)
            for (const item of data['HomeRushing']) {
                PlayerRushing.validateJSON(item);
            };
        }
        // validate the optional field `Score`
        if (data['Score']) { // data not null
          Score.validateJSON(data['Score']);
        }
        if (data['ScoringDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ScoringDetails'])) {
                throw new Error("Expected the field `ScoringDetails` to be an array in the JSON data but got " + data['ScoringDetails']);
            }
            // validate the optional field `ScoringDetails` (array)
            for (const item of data['ScoringDetails']) {
                ScoringDetail.validateJSON(item);
            };
        }
        if (data['ScoringPlays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ScoringPlays'])) {
                throw new Error("Expected the field `ScoringPlays` to be an array in the JSON data but got " + data['ScoringPlays']);
            }
            // validate the optional field `ScoringPlays` (array)
            for (const item of data['ScoringPlays']) {
                ScoringPlay.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/PlayerDefense>} AwayDefense
 */
BoxScore.prototype['AwayDefense'] = undefined;

/**
 * @member {module:model/FantasyDefenseGame} AwayFantasyDefense
 */
BoxScore.prototype['AwayFantasyDefense'] = undefined;

/**
 * @member {Array.<module:model/PlayerKickPuntReturns>} AwayKickPuntReturns
 */
BoxScore.prototype['AwayKickPuntReturns'] = undefined;

/**
 * @member {Array.<module:model/PlayerKicking>} AwayKicking
 */
BoxScore.prototype['AwayKicking'] = undefined;

/**
 * @member {Array.<module:model/PlayerPassing>} AwayPassing
 */
BoxScore.prototype['AwayPassing'] = undefined;

/**
 * @member {Array.<module:model/PlayerPunting>} AwayPunting
 */
BoxScore.prototype['AwayPunting'] = undefined;

/**
 * @member {Array.<module:model/PlayerReceiving>} AwayReceiving
 */
BoxScore.prototype['AwayReceiving'] = undefined;

/**
 * @member {Array.<module:model/PlayerRushing>} AwayRushing
 */
BoxScore.prototype['AwayRushing'] = undefined;

/**
 * @member {module:model/Game} Game
 */
BoxScore.prototype['Game'] = undefined;

/**
 * @member {Array.<module:model/PlayerDefense>} HomeDefense
 */
BoxScore.prototype['HomeDefense'] = undefined;

/**
 * @member {module:model/FantasyDefenseGame} HomeFantasyDefense
 */
BoxScore.prototype['HomeFantasyDefense'] = undefined;

/**
 * @member {Array.<module:model/PlayerKickPuntReturns>} HomeKickPuntReturns
 */
BoxScore.prototype['HomeKickPuntReturns'] = undefined;

/**
 * @member {Array.<module:model/PlayerKicking>} HomeKicking
 */
BoxScore.prototype['HomeKicking'] = undefined;

/**
 * @member {Array.<module:model/PlayerPassing>} HomePassing
 */
BoxScore.prototype['HomePassing'] = undefined;

/**
 * @member {Array.<module:model/PlayerPunting>} HomePunting
 */
BoxScore.prototype['HomePunting'] = undefined;

/**
 * @member {Array.<module:model/PlayerReceiving>} HomeReceiving
 */
BoxScore.prototype['HomeReceiving'] = undefined;

/**
 * @member {Array.<module:model/PlayerRushing>} HomeRushing
 */
BoxScore.prototype['HomeRushing'] = undefined;

/**
 * @member {module:model/Score} Score
 */
BoxScore.prototype['Score'] = undefined;

/**
 * @member {Array.<module:model/ScoringDetail>} ScoringDetails
 */
BoxScore.prototype['ScoringDetails'] = undefined;

/**
 * @member {Array.<module:model/ScoringPlay>} ScoringPlays
 */
BoxScore.prototype['ScoringPlays'] = undefined;






export default BoxScore;

