/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Injury model module.
 * @module model/Injury
 * @version 1.0
 */
class Injury {
    /**
     * Constructs a new <code>Injury</code>.
     * @alias module:model/Injury
     */
    constructor() { 
        
        Injury.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Injury</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Injury} obj Optional instance to populate.
     * @return {module:model/Injury} The populated <code>Injury</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Injury();

            if (data.hasOwnProperty('BodyPart')) {
                obj['BodyPart'] = ApiClient.convertToType(data['BodyPart'], 'String');
            }
            if (data.hasOwnProperty('DeclaredInactive')) {
                obj['DeclaredInactive'] = ApiClient.convertToType(data['DeclaredInactive'], 'Boolean');
            }
            if (data.hasOwnProperty('InjuryID')) {
                obj['InjuryID'] = ApiClient.convertToType(data['InjuryID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('Opponent')) {
                obj['Opponent'] = ApiClient.convertToType(data['Opponent'], 'String');
            }
            if (data.hasOwnProperty('OpponentID')) {
                obj['OpponentID'] = ApiClient.convertToType(data['OpponentID'], 'Number');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = ApiClient.convertToType(data['Position'], 'String');
            }
            if (data.hasOwnProperty('Practice')) {
                obj['Practice'] = ApiClient.convertToType(data['Practice'], 'String');
            }
            if (data.hasOwnProperty('PracticeDescription')) {
                obj['PracticeDescription'] = ApiClient.convertToType(data['PracticeDescription'], 'String');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('SeasonType')) {
                obj['SeasonType'] = ApiClient.convertToType(data['SeasonType'], 'Number');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Team')) {
                obj['Team'] = ApiClient.convertToType(data['Team'], 'String');
            }
            if (data.hasOwnProperty('TeamID')) {
                obj['TeamID'] = ApiClient.convertToType(data['TeamID'], 'Number');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
            if (data.hasOwnProperty('Week')) {
                obj['Week'] = ApiClient.convertToType(data['Week'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Injury</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Injury</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BodyPart'] && !(typeof data['BodyPart'] === 'string' || data['BodyPart'] instanceof String)) {
            throw new Error("Expected the field `BodyPart` to be a primitive type in the JSON string but got " + data['BodyPart']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Opponent'] && !(typeof data['Opponent'] === 'string' || data['Opponent'] instanceof String)) {
            throw new Error("Expected the field `Opponent` to be a primitive type in the JSON string but got " + data['Opponent']);
        }
        // ensure the json data is a string
        if (data['Position'] && !(typeof data['Position'] === 'string' || data['Position'] instanceof String)) {
            throw new Error("Expected the field `Position` to be a primitive type in the JSON string but got " + data['Position']);
        }
        // ensure the json data is a string
        if (data['Practice'] && !(typeof data['Practice'] === 'string' || data['Practice'] instanceof String)) {
            throw new Error("Expected the field `Practice` to be a primitive type in the JSON string but got " + data['Practice']);
        }
        // ensure the json data is a string
        if (data['PracticeDescription'] && !(typeof data['PracticeDescription'] === 'string' || data['PracticeDescription'] instanceof String)) {
            throw new Error("Expected the field `PracticeDescription` to be a primitive type in the JSON string but got " + data['PracticeDescription']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['Team'] && !(typeof data['Team'] === 'string' || data['Team'] instanceof String)) {
            throw new Error("Expected the field `Team` to be a primitive type in the JSON string but got " + data['Team']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }

        return true;
    }


}



/**
 * @member {String} BodyPart
 */
Injury.prototype['BodyPart'] = undefined;

/**
 * @member {Boolean} DeclaredInactive
 */
Injury.prototype['DeclaredInactive'] = undefined;

/**
 * @member {Number} InjuryID
 */
Injury.prototype['InjuryID'] = undefined;

/**
 * @member {String} Name
 */
Injury.prototype['Name'] = undefined;

/**
 * @member {Number} Number
 */
Injury.prototype['Number'] = undefined;

/**
 * @member {String} Opponent
 */
Injury.prototype['Opponent'] = undefined;

/**
 * @member {Number} OpponentID
 */
Injury.prototype['OpponentID'] = undefined;

/**
 * @member {Number} PlayerID
 */
Injury.prototype['PlayerID'] = undefined;

/**
 * @member {String} Position
 */
Injury.prototype['Position'] = undefined;

/**
 * @member {String} Practice
 */
Injury.prototype['Practice'] = undefined;

/**
 * @member {String} PracticeDescription
 */
Injury.prototype['PracticeDescription'] = undefined;

/**
 * @member {Number} Season
 */
Injury.prototype['Season'] = undefined;

/**
 * @member {Number} SeasonType
 */
Injury.prototype['SeasonType'] = undefined;

/**
 * @member {String} Status
 */
Injury.prototype['Status'] = undefined;

/**
 * @member {String} Team
 */
Injury.prototype['Team'] = undefined;

/**
 * @member {Number} TeamID
 */
Injury.prototype['TeamID'] = undefined;

/**
 * @member {String} Updated
 */
Injury.prototype['Updated'] = undefined;

/**
 * @member {Number} Week
 */
Injury.prototype['Week'] = undefined;






export default Injury;

