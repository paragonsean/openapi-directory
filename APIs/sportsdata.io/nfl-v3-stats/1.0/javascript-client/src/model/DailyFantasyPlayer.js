/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DailyFantasyPlayer model module.
 * @module model/DailyFantasyPlayer
 * @version 1.0
 */
class DailyFantasyPlayer {
    /**
     * Constructs a new <code>DailyFantasyPlayer</code>.
     * @alias module:model/DailyFantasyPlayer
     */
    constructor() { 
        
        DailyFantasyPlayer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DailyFantasyPlayer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DailyFantasyPlayer} obj Optional instance to populate.
     * @return {module:model/DailyFantasyPlayer} The populated <code>DailyFantasyPlayer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DailyFantasyPlayer();

            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('DraftKingsSalary')) {
                obj['DraftKingsSalary'] = ApiClient.convertToType(data['DraftKingsSalary'], 'Number');
            }
            if (data.hasOwnProperty('FanDuelSalary')) {
                obj['FanDuelSalary'] = ApiClient.convertToType(data['FanDuelSalary'], 'Number');
            }
            if (data.hasOwnProperty('FantasyDataSalary')) {
                obj['FantasyDataSalary'] = ApiClient.convertToType(data['FantasyDataSalary'], 'Number');
            }
            if (data.hasOwnProperty('FantasyDraftSalary')) {
                obj['FantasyDraftSalary'] = ApiClient.convertToType(data['FantasyDraftSalary'], 'Number');
            }
            if (data.hasOwnProperty('HomeOrAway')) {
                obj['HomeOrAway'] = ApiClient.convertToType(data['HomeOrAway'], 'String');
            }
            if (data.hasOwnProperty('LastGameFantasyPoints')) {
                obj['LastGameFantasyPoints'] = ApiClient.convertToType(data['LastGameFantasyPoints'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Opponent')) {
                obj['Opponent'] = ApiClient.convertToType(data['Opponent'], 'String');
            }
            if (data.hasOwnProperty('OpponentPositionRank')) {
                obj['OpponentPositionRank'] = ApiClient.convertToType(data['OpponentPositionRank'], 'Number');
            }
            if (data.hasOwnProperty('OpponentRank')) {
                obj['OpponentRank'] = ApiClient.convertToType(data['OpponentRank'], 'Number');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = ApiClient.convertToType(data['Position'], 'String');
            }
            if (data.hasOwnProperty('ProjectedFantasyPoints')) {
                obj['ProjectedFantasyPoints'] = ApiClient.convertToType(data['ProjectedFantasyPoints'], 'Number');
            }
            if (data.hasOwnProperty('Salary')) {
                obj['Salary'] = ApiClient.convertToType(data['Salary'], 'Number');
            }
            if (data.hasOwnProperty('ShortName')) {
                obj['ShortName'] = ApiClient.convertToType(data['ShortName'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('StatusCode')) {
                obj['StatusCode'] = ApiClient.convertToType(data['StatusCode'], 'String');
            }
            if (data.hasOwnProperty('StatusColor')) {
                obj['StatusColor'] = ApiClient.convertToType(data['StatusColor'], 'String');
            }
            if (data.hasOwnProperty('Team')) {
                obj['Team'] = ApiClient.convertToType(data['Team'], 'String');
            }
            if (data.hasOwnProperty('YahooSalary')) {
                obj['YahooSalary'] = ApiClient.convertToType(data['YahooSalary'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DailyFantasyPlayer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DailyFantasyPlayer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['HomeOrAway'] && !(typeof data['HomeOrAway'] === 'string' || data['HomeOrAway'] instanceof String)) {
            throw new Error("Expected the field `HomeOrAway` to be a primitive type in the JSON string but got " + data['HomeOrAway']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Opponent'] && !(typeof data['Opponent'] === 'string' || data['Opponent'] instanceof String)) {
            throw new Error("Expected the field `Opponent` to be a primitive type in the JSON string but got " + data['Opponent']);
        }
        // ensure the json data is a string
        if (data['Position'] && !(typeof data['Position'] === 'string' || data['Position'] instanceof String)) {
            throw new Error("Expected the field `Position` to be a primitive type in the JSON string but got " + data['Position']);
        }
        // ensure the json data is a string
        if (data['ShortName'] && !(typeof data['ShortName'] === 'string' || data['ShortName'] instanceof String)) {
            throw new Error("Expected the field `ShortName` to be a primitive type in the JSON string but got " + data['ShortName']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['StatusCode'] && !(typeof data['StatusCode'] === 'string' || data['StatusCode'] instanceof String)) {
            throw new Error("Expected the field `StatusCode` to be a primitive type in the JSON string but got " + data['StatusCode']);
        }
        // ensure the json data is a string
        if (data['StatusColor'] && !(typeof data['StatusColor'] === 'string' || data['StatusColor'] instanceof String)) {
            throw new Error("Expected the field `StatusColor` to be a primitive type in the JSON string but got " + data['StatusColor']);
        }
        // ensure the json data is a string
        if (data['Team'] && !(typeof data['Team'] === 'string' || data['Team'] instanceof String)) {
            throw new Error("Expected the field `Team` to be a primitive type in the JSON string but got " + data['Team']);
        }

        return true;
    }


}



/**
 * @member {String} Date
 */
DailyFantasyPlayer.prototype['Date'] = undefined;

/**
 * @member {Number} DraftKingsSalary
 */
DailyFantasyPlayer.prototype['DraftKingsSalary'] = undefined;

/**
 * @member {Number} FanDuelSalary
 */
DailyFantasyPlayer.prototype['FanDuelSalary'] = undefined;

/**
 * @member {Number} FantasyDataSalary
 */
DailyFantasyPlayer.prototype['FantasyDataSalary'] = undefined;

/**
 * @member {Number} FantasyDraftSalary
 */
DailyFantasyPlayer.prototype['FantasyDraftSalary'] = undefined;

/**
 * @member {String} HomeOrAway
 */
DailyFantasyPlayer.prototype['HomeOrAway'] = undefined;

/**
 * @member {Number} LastGameFantasyPoints
 */
DailyFantasyPlayer.prototype['LastGameFantasyPoints'] = undefined;

/**
 * @member {String} Name
 */
DailyFantasyPlayer.prototype['Name'] = undefined;

/**
 * @member {String} Opponent
 */
DailyFantasyPlayer.prototype['Opponent'] = undefined;

/**
 * @member {Number} OpponentPositionRank
 */
DailyFantasyPlayer.prototype['OpponentPositionRank'] = undefined;

/**
 * @member {Number} OpponentRank
 */
DailyFantasyPlayer.prototype['OpponentRank'] = undefined;

/**
 * @member {Number} PlayerID
 */
DailyFantasyPlayer.prototype['PlayerID'] = undefined;

/**
 * @member {String} Position
 */
DailyFantasyPlayer.prototype['Position'] = undefined;

/**
 * @member {Number} ProjectedFantasyPoints
 */
DailyFantasyPlayer.prototype['ProjectedFantasyPoints'] = undefined;

/**
 * @member {Number} Salary
 */
DailyFantasyPlayer.prototype['Salary'] = undefined;

/**
 * @member {String} ShortName
 */
DailyFantasyPlayer.prototype['ShortName'] = undefined;

/**
 * @member {String} Status
 */
DailyFantasyPlayer.prototype['Status'] = undefined;

/**
 * @member {String} StatusCode
 */
DailyFantasyPlayer.prototype['StatusCode'] = undefined;

/**
 * @member {String} StatusColor
 */
DailyFantasyPlayer.prototype['StatusColor'] = undefined;

/**
 * @member {String} Team
 */
DailyFantasyPlayer.prototype['Team'] = undefined;

/**
 * @member {Number} YahooSalary
 */
DailyFantasyPlayer.prototype['YahooSalary'] = undefined;






export default DailyFantasyPlayer;

