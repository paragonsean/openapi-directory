/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FantasyDefenseGame from './FantasyDefenseGame';
import PlayerGame from './PlayerGame';
import Quarter from './Quarter';
import Score from './Score';
import ScoringDetail from './ScoringDetail';
import ScoringPlay from './ScoringPlay';
import TeamGame from './TeamGame';

/**
 * The BoxScoreV3 model module.
 * @module model/BoxScoreV3
 * @version 1.0
 */
class BoxScoreV3 {
    /**
     * Constructs a new <code>BoxScoreV3</code>.
     * @alias module:model/BoxScoreV3
     */
    constructor() { 
        
        BoxScoreV3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BoxScoreV3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BoxScoreV3} obj Optional instance to populate.
     * @return {module:model/BoxScoreV3} The populated <code>BoxScoreV3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BoxScoreV3();

            if (data.hasOwnProperty('FantasyDefenseGames')) {
                obj['FantasyDefenseGames'] = ApiClient.convertToType(data['FantasyDefenseGames'], [FantasyDefenseGame]);
            }
            if (data.hasOwnProperty('PlayerGames')) {
                obj['PlayerGames'] = ApiClient.convertToType(data['PlayerGames'], [PlayerGame]);
            }
            if (data.hasOwnProperty('Quarters')) {
                obj['Quarters'] = ApiClient.convertToType(data['Quarters'], [Quarter]);
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = Score.constructFromObject(data['Score']);
            }
            if (data.hasOwnProperty('ScoringDetails')) {
                obj['ScoringDetails'] = ApiClient.convertToType(data['ScoringDetails'], [ScoringDetail]);
            }
            if (data.hasOwnProperty('ScoringPlays')) {
                obj['ScoringPlays'] = ApiClient.convertToType(data['ScoringPlays'], [ScoringPlay]);
            }
            if (data.hasOwnProperty('TeamGames')) {
                obj['TeamGames'] = ApiClient.convertToType(data['TeamGames'], [TeamGame]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BoxScoreV3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BoxScoreV3</code>.
     */
    static validateJSON(data) {
        if (data['FantasyDefenseGames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['FantasyDefenseGames'])) {
                throw new Error("Expected the field `FantasyDefenseGames` to be an array in the JSON data but got " + data['FantasyDefenseGames']);
            }
            // validate the optional field `FantasyDefenseGames` (array)
            for (const item of data['FantasyDefenseGames']) {
                FantasyDefenseGame.validateJSON(item);
            };
        }
        if (data['PlayerGames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PlayerGames'])) {
                throw new Error("Expected the field `PlayerGames` to be an array in the JSON data but got " + data['PlayerGames']);
            }
            // validate the optional field `PlayerGames` (array)
            for (const item of data['PlayerGames']) {
                PlayerGame.validateJSON(item);
            };
        }
        if (data['Quarters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Quarters'])) {
                throw new Error("Expected the field `Quarters` to be an array in the JSON data but got " + data['Quarters']);
            }
            // validate the optional field `Quarters` (array)
            for (const item of data['Quarters']) {
                Quarter.validateJSON(item);
            };
        }
        // validate the optional field `Score`
        if (data['Score']) { // data not null
          Score.validateJSON(data['Score']);
        }
        if (data['ScoringDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ScoringDetails'])) {
                throw new Error("Expected the field `ScoringDetails` to be an array in the JSON data but got " + data['ScoringDetails']);
            }
            // validate the optional field `ScoringDetails` (array)
            for (const item of data['ScoringDetails']) {
                ScoringDetail.validateJSON(item);
            };
        }
        if (data['ScoringPlays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ScoringPlays'])) {
                throw new Error("Expected the field `ScoringPlays` to be an array in the JSON data but got " + data['ScoringPlays']);
            }
            // validate the optional field `ScoringPlays` (array)
            for (const item of data['ScoringPlays']) {
                ScoringPlay.validateJSON(item);
            };
        }
        if (data['TeamGames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TeamGames'])) {
                throw new Error("Expected the field `TeamGames` to be an array in the JSON data but got " + data['TeamGames']);
            }
            // validate the optional field `TeamGames` (array)
            for (const item of data['TeamGames']) {
                TeamGame.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/FantasyDefenseGame>} FantasyDefenseGames
 */
BoxScoreV3.prototype['FantasyDefenseGames'] = undefined;

/**
 * @member {Array.<module:model/PlayerGame>} PlayerGames
 */
BoxScoreV3.prototype['PlayerGames'] = undefined;

/**
 * @member {Array.<module:model/Quarter>} Quarters
 */
BoxScoreV3.prototype['Quarters'] = undefined;

/**
 * @member {module:model/Score} Score
 */
BoxScoreV3.prototype['Score'] = undefined;

/**
 * @member {Array.<module:model/ScoringDetail>} ScoringDetails
 */
BoxScoreV3.prototype['ScoringDetails'] = undefined;

/**
 * @member {Array.<module:model/ScoringPlay>} ScoringPlays
 */
BoxScoreV3.prototype['ScoringPlays'] = undefined;

/**
 * @member {Array.<module:model/TeamGame>} TeamGames
 */
BoxScoreV3.prototype['TeamGames'] = undefined;






export default BoxScoreV3;

