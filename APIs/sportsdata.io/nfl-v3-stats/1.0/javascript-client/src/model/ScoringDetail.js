/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScoringDetail model module.
 * @module model/ScoringDetail
 * @version 1.0
 */
class ScoringDetail {
    /**
     * Constructs a new <code>ScoringDetail</code>.
     * @alias module:model/ScoringDetail
     */
    constructor() { 
        
        ScoringDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoringDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoringDetail} obj Optional instance to populate.
     * @return {module:model/ScoringDetail} The populated <code>ScoringDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoringDetail();

            if (data.hasOwnProperty('GameKey')) {
                obj['GameKey'] = ApiClient.convertToType(data['GameKey'], 'String');
            }
            if (data.hasOwnProperty('Length')) {
                obj['Length'] = ApiClient.convertToType(data['Length'], 'Number');
            }
            if (data.hasOwnProperty('PlayerGameID')) {
                obj['PlayerGameID'] = ApiClient.convertToType(data['PlayerGameID'], 'Number');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('ScoreID')) {
                obj['ScoreID'] = ApiClient.convertToType(data['ScoreID'], 'Number');
            }
            if (data.hasOwnProperty('ScoringDetailID')) {
                obj['ScoringDetailID'] = ApiClient.convertToType(data['ScoringDetailID'], 'Number');
            }
            if (data.hasOwnProperty('ScoringPlayID')) {
                obj['ScoringPlayID'] = ApiClient.convertToType(data['ScoringPlayID'], 'Number');
            }
            if (data.hasOwnProperty('ScoringType')) {
                obj['ScoringType'] = ApiClient.convertToType(data['ScoringType'], 'String');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('SeasonType')) {
                obj['SeasonType'] = ApiClient.convertToType(data['SeasonType'], 'Number');
            }
            if (data.hasOwnProperty('Team')) {
                obj['Team'] = ApiClient.convertToType(data['Team'], 'String');
            }
            if (data.hasOwnProperty('Week')) {
                obj['Week'] = ApiClient.convertToType(data['Week'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoringDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoringDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['GameKey'] && !(typeof data['GameKey'] === 'string' || data['GameKey'] instanceof String)) {
            throw new Error("Expected the field `GameKey` to be a primitive type in the JSON string but got " + data['GameKey']);
        }
        // ensure the json data is a string
        if (data['ScoringType'] && !(typeof data['ScoringType'] === 'string' || data['ScoringType'] instanceof String)) {
            throw new Error("Expected the field `ScoringType` to be a primitive type in the JSON string but got " + data['ScoringType']);
        }
        // ensure the json data is a string
        if (data['Team'] && !(typeof data['Team'] === 'string' || data['Team'] instanceof String)) {
            throw new Error("Expected the field `Team` to be a primitive type in the JSON string but got " + data['Team']);
        }

        return true;
    }


}



/**
 * @member {String} GameKey
 */
ScoringDetail.prototype['GameKey'] = undefined;

/**
 * @member {Number} Length
 */
ScoringDetail.prototype['Length'] = undefined;

/**
 * @member {Number} PlayerGameID
 */
ScoringDetail.prototype['PlayerGameID'] = undefined;

/**
 * @member {Number} PlayerID
 */
ScoringDetail.prototype['PlayerID'] = undefined;

/**
 * @member {Number} ScoreID
 */
ScoringDetail.prototype['ScoreID'] = undefined;

/**
 * @member {Number} ScoringDetailID
 */
ScoringDetail.prototype['ScoringDetailID'] = undefined;

/**
 * @member {Number} ScoringPlayID
 */
ScoringDetail.prototype['ScoringPlayID'] = undefined;

/**
 * @member {String} ScoringType
 */
ScoringDetail.prototype['ScoringType'] = undefined;

/**
 * @member {Number} Season
 */
ScoringDetail.prototype['Season'] = undefined;

/**
 * @member {Number} SeasonType
 */
ScoringDetail.prototype['SeasonType'] = undefined;

/**
 * @member {String} Team
 */
ScoringDetail.prototype['Team'] = undefined;

/**
 * @member {Number} Week
 */
ScoringDetail.prototype['Week'] = undefined;






export default ScoringDetail;

