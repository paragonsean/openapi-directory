/**
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BoxScore from '../model/BoxScore';
import BoxScoreV3 from '../model/BoxScoreV3';
import Bye from '../model/Bye';
import DailyFantasyPlayer from '../model/DailyFantasyPlayer';
import DailyFantasyScoring from '../model/DailyFantasyScoring';
import DfsSlate from '../model/DfsSlate';
import FantasyDefenseGame from '../model/FantasyDefenseGame';
import FantasyDefenseSeason from '../model/FantasyDefenseSeason';
import FantasyPlayer from '../model/FantasyPlayer';
import Game from '../model/Game';
import Injury from '../model/Injury';
import News from '../model/News';
import Player from '../model/Player';
import PlayerDetail from '../model/PlayerDetail';
import PlayerGame from '../model/PlayerGame';
import PlayerGameRedZone from '../model/PlayerGameRedZone';
import PlayerInfo from '../model/PlayerInfo';
import PlayerOwnership from '../model/PlayerOwnership';
import PlayerSeason from '../model/PlayerSeason';
import PlayerSeasonRedZone from '../model/PlayerSeasonRedZone';
import PlayerSeasonThirdDown from '../model/PlayerSeasonThirdDown';
import Schedule from '../model/Schedule';
import Score from '../model/Score';
import Stadium from '../model/Stadium';
import Standing from '../model/Standing';
import Team from '../model/Team';
import TeamGame from '../model/TeamGame';
import TeamSeason from '../model/TeamSeason';
import Timeframe from '../model/Timeframe';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the areGamesInProgress operation.
     * @callback module:api/DefaultApi~areGamesInProgressCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Are Games In Progress
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~areGamesInProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    areGamesInProgress(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling areGamesInProgress");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/{format}/AreAnyGamesInProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoreByScoreidV operation.
     * @callback module:api/DefaultApi~boxScoreByScoreidVCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoxScoreV3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Score by ScoreID V3
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} scoreid The ScoreID of the game. Possible values include: <code>16247</code>, <code>16245</code>, etc.
     * @param {module:api/DefaultApi~boxScoreByScoreidVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoxScoreV3}
     */
    boxScoreByScoreidV(format, scoreid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoreByScoreidV");
      }
      // verify the required parameter 'scoreid' is set
      if (scoreid === undefined || scoreid === null) {
        throw new Error("Missing the required parameter 'scoreid' when calling boxScoreByScoreidV");
      }

      let pathParams = {
        'format': format,
        'scoreid': scoreid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoxScoreV3;
      return this.apiClient.callApi(
        '/{format}/BoxScoreByScoreIDV3/{scoreid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoreV operation.
     * @callback module:api/DefaultApi~boxScoreVCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoxScoreV3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Score V3
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} hometeam Abbreviation of a team playing in this game. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~boxScoreVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoxScoreV3}
     */
    boxScoreV(format, season, week, hometeam, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoreV");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling boxScoreV");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling boxScoreV");
      }
      // verify the required parameter 'hometeam' is set
      if (hometeam === undefined || hometeam === null) {
        throw new Error("Missing the required parameter 'hometeam' when calling boxScoreV");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'hometeam': hometeam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoxScoreV3;
      return this.apiClient.callApi(
        '/{format}/BoxScoreV3/{season}/{week}/{hometeam}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresDeltaV operation.
     * @callback module:api/DefaultApi~boxScoresDeltaVCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScoreV3>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores Delta V3
     * This method returns all box scores for a given season and week, but only returns player stats that have changed in the last X minutes. You can also filter by type of player stats to include, such as traditional fantasy players, IDP players or all players.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:model/String} playerstoinclude The subcategory of players to include in the returned PlayerGame records. Possible values include:<br><br> <code>all</code> Returns all players<br> <code>fantasy</code> Returns traditional fantasy players (QB, RB, WR, TE, K, DST)<br> <code>idp</code> Returns traditional fantasy players and IDP players.
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are:<br><code>1</code>,  <code>2</code>, etc.         
     * @param {module:api/DefaultApi~boxScoresDeltaVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScoreV3>}
     */
    boxScoresDeltaV(format, season, week, playerstoinclude, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresDeltaV");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling boxScoresDeltaV");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling boxScoresDeltaV");
      }
      // verify the required parameter 'playerstoinclude' is set
      if (playerstoinclude === undefined || playerstoinclude === null) {
        throw new Error("Missing the required parameter 'playerstoinclude' when calling boxScoresDeltaV");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling boxScoresDeltaV");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'playerstoinclude': playerstoinclude,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScoreV3];
      return this.apiClient.callApi(
        '/{format}/BoxScoresDeltaV3/{season}/{week}/{playerstoinclude}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxScoresVSimulation operation.
     * @callback module:api/DefaultApi~boxScoresVSimulationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScoreV3>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Box Scores V3 Simulation
     * Gets simulated live box scores of NFL games, covering the Conference Championship games on January 21, 2018.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} numberofplays The number of plays to progress in this NFL live game simulation. Example entries are <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>150</code>, <code>200</code>, etc.
     * @param {module:api/DefaultApi~boxScoresVSimulationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScoreV3>}
     */
    boxScoresVSimulation(format, numberofplays, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling boxScoresVSimulation");
      }
      // verify the required parameter 'numberofplays' is set
      if (numberofplays === undefined || numberofplays === null) {
        throw new Error("Missing the required parameter 'numberofplays' when calling boxScoresVSimulation");
      }

      let pathParams = {
        'format': format,
        'numberofplays': numberofplays
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScoreV3];
      return this.apiClient.callApi(
        '/{format}/SimulatedBoxScoresV3/{numberofplays}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the byeWeeks operation.
     * @callback module:api/DefaultApi~byeWeeksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bye>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bye Weeks
     * Get bye weeks for the teams during a specified NFL season. 
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~byeWeeksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bye>}
     */
    byeWeeks(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling byeWeeks");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling byeWeeks");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Bye];
      return this.apiClient.callApi(
        '/{format}/Byes/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dailyFantasyPlayers operation.
     * @callback module:api/DefaultApi~dailyFantasyPlayersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DailyFantasyPlayer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Daily Fantasy Players
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date            The date of the contest for which you're pulling players           <code>2014-SEP-21</code>,           <code>2014-NOV-15</code>, etc         
     * @param {module:api/DefaultApi~dailyFantasyPlayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DailyFantasyPlayer>}
     */
    dailyFantasyPlayers(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dailyFantasyPlayers");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dailyFantasyPlayers");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DailyFantasyPlayer];
      return this.apiClient.callApi(
        '/{format}/DailyFantasyPlayers/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dailyFantasyScoring operation.
     * @callback module:api/DefaultApi~dailyFantasyScoringCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DailyFantasyScoring>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Daily Fantasy Scoring
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the contest for which you're pulling players           <code>2014-SEP-21</code>,           <code>2014-NOV-15</code>, etc
     * @param {module:api/DefaultApi~dailyFantasyScoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DailyFantasyScoring>}
     */
    dailyFantasyScoring(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dailyFantasyScoring");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dailyFantasyScoring");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DailyFantasyScoring];
      return this.apiClient.callApi(
        '/{format}/DailyFantasyPoints/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlatesByDate operation.
     * @callback module:api/DefaultApi~dfsSlatesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slates by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the slates. <br>Examples: <code>2017-SEP-25</code>, <code>2017-10-31</code>.
     * @param {module:api/DefaultApi~dfsSlatesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dfsSlatesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlatesByWeek operation.
     * @callback module:api/DefaultApi~dfsSlatesByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slates by Week
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~dfsSlatesByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByWeek(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling dfsSlatesByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling dfsSlatesByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fantasyDefenseGameStats operation.
     * @callback module:api/DefaultApi~fantasyDefenseGameStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FantasyDefenseGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fantasy Defense Game Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~fantasyDefenseGameStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FantasyDefenseGame>}
     */
    fantasyDefenseGameStats(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling fantasyDefenseGameStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling fantasyDefenseGameStats");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling fantasyDefenseGameStats");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FantasyDefenseGame];
      return this.apiClient.callApi(
        '/{format}/FantasyDefenseByGame/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fantasyDefenseGameStatsByTeam operation.
     * @callback module:api/DefaultApi~fantasyDefenseGameStatsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FantasyDefenseGame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fantasy Defense Game Stats by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~fantasyDefenseGameStatsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FantasyDefenseGame}
     */
    fantasyDefenseGameStatsByTeam(format, season, week, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling fantasyDefenseGameStatsByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling fantasyDefenseGameStatsByTeam");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling fantasyDefenseGameStatsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling fantasyDefenseGameStatsByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FantasyDefenseGame;
      return this.apiClient.callApi(
        '/{format}/FantasyDefenseByGameByTeam/{season}/{week}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fantasyDefenseSeasonStats operation.
     * @callback module:api/DefaultApi~fantasyDefenseSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FantasyDefenseSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fantasy Defense Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~fantasyDefenseSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FantasyDefenseSeason>}
     */
    fantasyDefenseSeasonStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling fantasyDefenseSeasonStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling fantasyDefenseSeasonStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FantasyDefenseSeason];
      return this.apiClient.callApi(
        '/{format}/FantasyDefenseBySeason/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fantasyDefenseSeasonStatsByTeam operation.
     * @callback module:api/DefaultApi~fantasyDefenseSeasonStatsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FantasyDefenseSeason} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fantasy Defense Season Stats by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~fantasyDefenseSeasonStatsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FantasyDefenseSeason}
     */
    fantasyDefenseSeasonStatsByTeam(format, season, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling fantasyDefenseSeasonStatsByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling fantasyDefenseSeasonStatsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling fantasyDefenseSeasonStatsByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FantasyDefenseSeason;
      return this.apiClient.callApi(
        '/{format}/FantasyDefenseBySeasonByTeam/{season}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fantasyPlayerOwnershipPercentagesSeasonLong operation.
     * @callback module:api/DefaultApi~fantasyPlayerOwnershipPercentagesSeasonLongCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerOwnership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fantasy Player Ownership Percentages (Season-Long)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~fantasyPlayerOwnershipPercentagesSeasonLongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerOwnership>}
     */
    fantasyPlayerOwnershipPercentagesSeasonLong(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling fantasyPlayerOwnershipPercentagesSeasonLong");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling fantasyPlayerOwnershipPercentagesSeasonLong");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling fantasyPlayerOwnershipPercentagesSeasonLong");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerOwnership];
      return this.apiClient.callApi(
        '/{format}/PlayerOwnership/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fantasyPlayersWithAdp operation.
     * @callback module:api/DefaultApi~fantasyPlayersWithAdpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FantasyPlayer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fantasy Players with ADP
     * This method returns a comprehensive list of draftable fantasy football players, including QB, RB, WR, TE, K and DEF.  Players are sorted by ADP (AverageDraftPosition).
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~fantasyPlayersWithAdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FantasyPlayer>}
     */
    fantasyPlayersWithAdp(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling fantasyPlayersWithAdp");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FantasyPlayer];
      return this.apiClient.callApi(
        '/{format}/FantasyPlayers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameStatsBySeasonDeprecatedUseTeamGameStatsInstead operation.
     * @callback module:api/DefaultApi~gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Game Stats by Season (Deprecated, use Team Game Stats instead)
     * Game stats for a specified season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gameStatsBySeasonDeprecatedUseTeamGameStatsInstead");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling gameStatsBySeasonDeprecatedUseTeamGameStatsInstead");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GameStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameStatsByWeekDeprecatedUseTeamGameStatsInstead operation.
     * @callback module:api/DefaultApi~gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Game Stats by Week (Deprecated, use Team Game Stats instead)
     * Game stats for a specified season and week.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gameStatsByWeekDeprecatedUseTeamGameStatsInstead(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gameStatsByWeekDeprecatedUseTeamGameStatsInstead");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling gameStatsByWeekDeprecatedUseTeamGameStatsInstead");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling gameStatsByWeekDeprecatedUseTeamGameStatsInstead");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GameStatsByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idpFantasyPlayersWithAdp operation.
     * @callback module:api/DefaultApi~idpFantasyPlayersWithAdpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FantasyPlayer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IDP Fantasy Players with ADP
     * This method returns the top 300+ IDP Fantasy Players for the current or upcoming season, ordered by AverageDraftPositionIDP.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~idpFantasyPlayersWithAdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FantasyPlayer>}
     */
    idpFantasyPlayersWithAdp(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling idpFantasyPlayersWithAdp");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FantasyPlayer];
      return this.apiClient.callApi(
        '/{format}/FantasyPlayersIDP', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuries operation.
     * @callback module:api/DefaultApi~injuriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Injury>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injuries
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~injuriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Injury>}
     */
    injuries(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling injuries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling injuries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Injury];
      return this.apiClient.callApi(
        '/{format}/Injuries/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuriesByTeam operation.
     * @callback module:api/DefaultApi~injuriesByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Injury>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injuries by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~injuriesByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Injury>}
     */
    injuriesByTeam(format, season, week, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuriesByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling injuriesByTeam");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling injuriesByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling injuriesByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Injury];
      return this.apiClient.callApi(
        '/{format}/Injuries/{season}/{week}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leagueLeadersBySeason operation.
     * @callback module:api/DefaultApi~leagueLeadersBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * League Leaders by Season
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:model/String} position Playerâ€™s position that you would like to filter by.
     * @param {module:model/String} column Response member you would like results sorted by.
     * @param {module:api/DefaultApi~leagueLeadersBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    leagueLeadersBySeason(format, season, position, column, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling leagueLeadersBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leagueLeadersBySeason");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling leagueLeadersBySeason");
      }
      // verify the required parameter 'column' is set
      if (column === undefined || column === null) {
        throw new Error("Missing the required parameter 'column' when calling leagueLeadersBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'position': position,
        'column': column
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/SeasonLeagueLeaders/{season}/{position}/{column}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leagueLeadersByWeek operation.
     * @callback module:api/DefaultApi~leagueLeadersByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * League Leaders by Week
     * @param {module:model/String} format            Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.         
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:model/String} position Playerâ€™s position that you would like to filter by.
     * @param {module:model/String} column Response member you would like results sorted by.
     * @param {module:api/DefaultApi~leagueLeadersByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    leagueLeadersByWeek(format, season, week, position, column, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling leagueLeadersByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leagueLeadersByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling leagueLeadersByWeek");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling leagueLeadersByWeek");
      }
      // verify the required parameter 'column' is set
      if (column === undefined || column === null) {
        throw new Error("Missing the required parameter 'column' when calling leagueLeadersByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'position': position,
        'column': column
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/GameLeagueLeaders/{season}/{week}/{position}/{column}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyBoxScore operation.
     * @callback module:api/DefaultApi~legacyBoxScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoxScore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legacy Box Score
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} hometeam Abbreviation of the home team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~legacyBoxScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoxScore}
     */
    legacyBoxScore(format, season, week, hometeam, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling legacyBoxScore");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling legacyBoxScore");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling legacyBoxScore");
      }
      // verify the required parameter 'hometeam' is set
      if (hometeam === undefined || hometeam === null) {
        throw new Error("Missing the required parameter 'hometeam' when calling legacyBoxScore");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'hometeam': hometeam
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoxScore;
      return this.apiClient.callApi(
        '/{format}/BoxScore/{season}/{week}/{hometeam}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyBoxScores operation.
     * @callback module:api/DefaultApi~legacyBoxScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legacy Box Scores
     * This method returns all box scores for a given season and week.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~legacyBoxScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    legacyBoxScores(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling legacyBoxScores");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling legacyBoxScores");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling legacyBoxScores");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScores/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyBoxScoresActive operation.
     * @callback module:api/DefaultApi~legacyBoxScoresActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legacy Box Scores Active
     * This method returns box scores for all games that are either in-progress or have been updated within the last 30 minutes.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~legacyBoxScoresActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    legacyBoxScoresActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling legacyBoxScoresActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/ActiveBoxScores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyBoxScoresDelta operation.
     * @callback module:api/DefaultApi~legacyBoxScoresDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legacy Box Scores Delta
     * This method returns all box scores for a given season and week, but only returns player stats that have changed in the last X minutes.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are:<br>           <code>1</code> or <code>2</code>.         
     * @param {module:api/DefaultApi~legacyBoxScoresDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    legacyBoxScoresDelta(format, season, week, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling legacyBoxScoresDelta");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling legacyBoxScoresDelta");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling legacyBoxScoresDelta");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling legacyBoxScoresDelta");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/BoxScoresDelta/{season}/{week}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyBoxScoresDeltaCurrentWeek operation.
     * @callback module:api/DefaultApi~legacyBoxScoresDeltaCurrentWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legacy Box Scores Delta (Current Week)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are:<br>           <code>1</code> or <code>2</code>.         
     * @param {module:api/DefaultApi~legacyBoxScoresDeltaCurrentWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    legacyBoxScoresDeltaCurrentWeek(format, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling legacyBoxScoresDeltaCurrentWeek");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling legacyBoxScoresDeltaCurrentWeek");
      }

      let pathParams = {
        'format': format,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/RecentlyUpdatedBoxScores/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyBoxScoresFinal operation.
     * @callback module:api/DefaultApi~legacyBoxScoresFinalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legacy Box Scores Final
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~legacyBoxScoresFinalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    legacyBoxScoresFinal(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling legacyBoxScoresFinal");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/FinalBoxScores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the legacyBoxScoresLive operation.
     * @callback module:api/DefaultApi~legacyBoxScoresLiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BoxScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legacy Box Scores Live
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~legacyBoxScoresLiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BoxScore>}
     */
    legacyBoxScoresLive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling legacyBoxScoresLive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BoxScore];
      return this.apiClient.callApi(
        '/{format}/LiveBoxScores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the news operation.
     * @callback module:api/DefaultApi~newsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~newsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    news(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling news");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/News', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByDate operation.
     * @callback module:api/DefaultApi~newsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Date
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the news. <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~newsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling newsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByPlayer operation.
     * @callback module:api/DefaultApi~newsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Player
     * @param {String} format            Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.         
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>14257</code>.
     * @param {module:api/DefaultApi~newsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling newsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByPlayerID/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByTeam operation.
     * @callback module:api/DefaultApi~newsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Team
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~newsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByTeam(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling newsByTeam");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByTeam/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByAvailable operation.
     * @callback module:api/DefaultApi~playerDetailsByAvailableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Available
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playerDetailsByAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByAvailable(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByAvailable");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByFreeAgents operation.
     * @callback module:api/DefaultApi~playerDetailsByFreeAgentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Free Agents
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playerDetailsByFreeAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByFreeAgents(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByFreeAgents");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/FreeAgents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByPlayer operation.
     * @callback module:api/DefaultApi~playerDetailsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>732</code>.
     * @param {module:api/DefaultApi~playerDetailsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerDetail}
     */
    playerDetailsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerDetailsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerDetail;
      return this.apiClient.callApi(
        '/{format}/Player/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByRookieDraftYear operation.
     * @callback module:api/DefaultApi~playerDetailsByRookieDraftYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Rookie Draft Year
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season.<br>Examples: <code>2018</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~playerDetailsByRookieDraftYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByRookieDraftYear(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByRookieDraftYear");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerDetailsByRookieDraftYear");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Rookies/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByTeam operation.
     * @callback module:api/DefaultApi~playerDetailsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~playerDetailsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerDetail>}
     */
    playerDetailsByTeam(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playerDetailsByTeam");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerDetail];
      return this.apiClient.callApi(
        '/{format}/Players/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameLogsBySeason operation.
     * @callback module:api/DefaultApi~playerGameLogsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Logs By Season
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Season to get games from. Example <code>2019POST</code>, <code>2020</code>
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>17920</code>.
     * @param {String} numberofgames How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code>
     * @param {module:api/DefaultApi~playerGameLogsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameLogsBySeason(format, season, playerid, numberofgames, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameLogsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameLogsBySeason");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerGameLogsBySeason");
      }
      // verify the required parameter 'numberofgames' is set
      if (numberofgames === undefined || numberofgames === null) {
        throw new Error("Missing the required parameter 'numberofgames' when calling playerGameLogsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'playerid': playerid,
        'numberofgames': numberofgames
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameRedZoneStats operation.
     * @callback module:api/DefaultApi~playerGameRedZoneStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameRedZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Red Zone Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~playerGameRedZoneStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameRedZone>}
     */
    playerGameRedZoneStats(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameRedZoneStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameRedZoneStats");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playerGameRedZoneStats");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameRedZone];
      return this.apiClient.callApi(
        '/{format}/PlayerGameRedZoneStats/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameRedZoneStatsInsideFive operation.
     * @callback module:api/DefaultApi~playerGameRedZoneStatsInsideFiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameRedZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Red Zone Stats Inside Five
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~playerGameRedZoneStatsInsideFiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameRedZone>}
     */
    playerGameRedZoneStatsInsideFive(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameRedZoneStatsInsideFive");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameRedZoneStatsInsideFive");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playerGameRedZoneStatsInsideFive");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameRedZone];
      return this.apiClient.callApi(
        '/{format}/PlayerGameRedZoneInsideFiveStats/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameRedZoneStatsInsideTen operation.
     * @callback module:api/DefaultApi~playerGameRedZoneStatsInsideTenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameRedZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Red Zone Stats Inside Ten
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~playerGameRedZoneStatsInsideTenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameRedZone>}
     */
    playerGameRedZoneStatsInsideTen(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameRedZoneStatsInsideTen");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameRedZoneStatsInsideTen");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playerGameRedZoneStatsInsideTen");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameRedZone];
      return this.apiClient.callApi(
        '/{format}/PlayerGameRedZoneInsideTenStats/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByPlayer operation.
     * @callback module:api/DefaultApi~playerGameStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerGame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>732</code>.
     * @param {module:api/DefaultApi~playerGameStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerGame}
     */
    playerGameStatsByPlayer(format, season, week, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByPlayer");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameStatsByPlayer");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playerGameStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerGameStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerGame;
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByPlayerID/{season}/{week}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByTeam operation.
     * @callback module:api/DefaultApi~playerGameStatsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~playerGameStatsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameStatsByTeam(format, season, week, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameStatsByTeam");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playerGameStatsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playerGameStatsByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByTeam/{season}/{week}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByWeek operation.
     * @callback module:api/DefaultApi~playerGameStatsByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Week
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~playerGameStatsByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameStatsByWeek(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameStatsByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playerGameStatsByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsByWeekDelta operation.
     * @callback module:api/DefaultApi~playerGameStatsByWeekDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats by Week Delta
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} minutes Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are:<br>           <code>1</code> or <code>2</code>.         
     * @param {module:api/DefaultApi~playerGameStatsByWeekDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameStatsByWeekDelta(format, season, week, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsByWeekDelta");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerGameStatsByWeekDelta");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling playerGameStatsByWeekDelta");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling playerGameStatsByWeekDelta");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsByWeekDelta/{season}/{week}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGameStatsDelta operation.
     * @callback module:api/DefaultApi~playerGameStatsDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Game Stats Delta
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} minutes            Only returns player statistics that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are:           <code>1</code> or <code>2</code>.         
     * @param {module:api/DefaultApi~playerGameStatsDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    playerGameStatsDelta(format, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerGameStatsDelta");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling playerGameStatsDelta");
      }

      let pathParams = {
        'format': format,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/{format}/PlayerGameStatsDelta/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonRedZoneStats operation.
     * @callback module:api/DefaultApi~playerSeasonRedZoneStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonRedZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Red Zone Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~playerSeasonRedZoneStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonRedZone>}
     */
    playerSeasonRedZoneStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonRedZoneStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonRedZoneStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonRedZone];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonRedZoneStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonRedZoneStatsInsideFive operation.
     * @callback module:api/DefaultApi~playerSeasonRedZoneStatsInsideFiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonRedZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Red Zone Stats Inside Five
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~playerSeasonRedZoneStatsInsideFiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonRedZone>}
     */
    playerSeasonRedZoneStatsInsideFive(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonRedZoneStatsInsideFive");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonRedZoneStatsInsideFive");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonRedZone];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonRedZoneInsideFiveStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonRedZoneStatsInsideTen operation.
     * @callback module:api/DefaultApi~playerSeasonRedZoneStatsInsideTenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonRedZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Red Zone Stats Inside Ten
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~playerSeasonRedZoneStatsInsideTenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonRedZone>}
     */
    playerSeasonRedZoneStatsInsideTen(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonRedZoneStatsInsideTen");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonRedZoneStatsInsideTen");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonRedZone];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonRedZoneInsideTenStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStats operation.
     * @callback module:api/DefaultApi~playerSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~playerSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsByPlayer operation.
     * @callback module:api/DefaultApi~playerSeasonStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>732</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStatsByPlayer(format, season, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsByPlayer");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerSeasonStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStatsByPlayerID/{season}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsByTeam operation.
     * @callback module:api/DefaultApi~playerSeasonStatsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStatsByTeam(format, season, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsByTeam");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStatsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playerSeasonStatsByTeam");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStatsByTeam/{season}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonThirdDownStats operation.
     * @callback module:api/DefaultApi~playerSeasonThirdDownStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonThirdDown>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Third Down Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~playerSeasonThirdDownStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonThirdDown>}
     */
    playerSeasonThirdDownStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonThirdDownStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonThirdDownStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonThirdDown];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonThirdDownStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the proBowlers operation.
     * @callback module:api/DefaultApi~proBowlersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pro Bowlers
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season <br>Examples: <code>2016</code>, <code>2017</code>
     * @param {module:api/DefaultApi~proBowlersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerInfo>}
     */
    proBowlers(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling proBowlers");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling proBowlers");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerInfo];
      return this.apiClient.callApi(
        '/{format}/ProBowlers/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedule operation.
     * @callback module:api/DefaultApi~scheduleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule
     * Game schedule for a specified season.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~scheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schedule>}
     */
    schedule(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedule");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling schedule");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schedule];
      return this.apiClient.callApi(
        '/{format}/Schedules/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresByDate operation.
     * @callback module:api/DefaultApi~scoresByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Date
     * Get game scores for a specified week of a season.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the games.<br>Examples: <code>2021-SEP-12</code>, <code>2021-NOV-28</code>.
     * @param {module:api/DefaultApi~scoresByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling scoresByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/ScoresByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresBySeason operation.
     * @callback module:api/DefaultApi~scoresBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Season 
     * Game scores for a specified season.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~scoresBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresBySeason(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling scoresBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/Scores/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresByWeek operation.
     * @callback module:api/DefaultApi~scoresByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Week
     * Get game scores for a specified week of a season.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~scoresByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresByWeek(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling scoresByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling scoresByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/ScoresByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresByWeekSimulation operation.
     * @callback module:api/DefaultApi~scoresByWeekSimulationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Week Simulation
     * Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} numberofplays The number of plays to progress in this NFL live game simulation. Example entries are <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>150</code>, <code>200</code>, etc.
     * @param {module:api/DefaultApi~scoresByWeekSimulationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresByWeekSimulation(format, numberofplays, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresByWeekSimulation");
      }
      // verify the required parameter 'numberofplays' is set
      if (numberofplays === undefined || numberofplays === null) {
        throw new Error("Missing the required parameter 'numberofplays' when calling scoresByWeekSimulation");
      }

      let pathParams = {
        'format': format,
        'numberofplays': numberofplays
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/SimulatedScores/{numberofplays}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonCurrent operation.
     * @callback module:api/DefaultApi~seasonCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Current
     * Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~seasonCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    seasonCurrent(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonCurrent");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/CurrentSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonLastCompleted operation.
     * @callback module:api/DefaultApi~seasonLastCompletedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Last Completed
     * Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~seasonLastCompletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    seasonLastCompleted(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonLastCompleted");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/LastCompletedSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonUpcoming operation.
     * @callback module:api/DefaultApi~seasonUpcomingCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Upcoming
     * Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~seasonUpcomingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    seasonUpcoming(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonUpcoming");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/UpcomingSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stadiums operation.
     * @callback module:api/DefaultApi~stadiumsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Stadium>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stadiums
     * This method returns all stadiums.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~stadiumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Stadium>}
     */
    stadiums(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling stadiums");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stadium];
      return this.apiClient.callApi(
        '/{format}/Stadiums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the standings operation.
     * @callback module:api/DefaultApi~standingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Standing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Standings
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~standingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Standing>}
     */
    standings(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling standings");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling standings");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Standing];
      return this.apiClient.callApi(
        '/{format}/Standings/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameLogsBySeason operation.
     * @callback module:api/DefaultApi~teamGameLogsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Logs By Season
     * Game by game log of total team statistics.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Season to get games from. Example <code>2019POST</code>, <code>2020</code>
     * @param {String} teamid Unique ID of team.  Example <code> 8 </code>
     * @param {String} numberofgames How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code>
     * @param {module:api/DefaultApi~teamGameLogsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameLogsBySeason(format, season, teamid, numberofgames, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'numberofgames' is set
      if (numberofgames === undefined || numberofgames === null) {
        throw new Error("Missing the required parameter 'numberofgames' when calling teamGameLogsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'teamid': teamid,
        'numberofgames': numberofgames
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameStats operation.
     * @callback module:api/DefaultApi~teamGameStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~teamGameStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameStats(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamGameStats");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling teamGameStats");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStats/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamSeasonStats operation.
     * @callback module:api/DefaultApi~teamSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~teamSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSeason>}
     */
    teamSeasonStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamSeasonStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamSeasonStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSeason];
      return this.apiClient.callApi(
        '/{format}/TeamSeasonStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsActive operation.
     * @callback module:api/DefaultApi~teamsActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (Active)
     * Gets all active teams.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/Teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAll operation.
     * @callback module:api/DefaultApi~teamsAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (All)
     * Gets all teams, including pro bowl teams.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsAll(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsAll");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/AllTeams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBySeason operation.
     * @callback module:api/DefaultApi~teamsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams by Season
     * List of teams playing in a specified season.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~teamsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsBySeason(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/Teams/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeframes operation.
     * @callback module:api/DefaultApi~timeframesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Timeframe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Timeframes
     * Get detailed information about past, present, and future timeframes.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} type The type of timeframes to return.  Valid entries are <code>current</code> or <code>upcoming</code> or <code>completed</code> or <code>recent</code> or <code>all</code>.
     * @param {module:api/DefaultApi~timeframesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Timeframe>}
     */
    timeframes(format, type, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling timeframes");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling timeframes");
      }

      let pathParams = {
        'format': format,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Timeframe];
      return this.apiClient.callApi(
        '/{format}/Timeframes/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the weekCurrent operation.
     * @callback module:api/DefaultApi~weekCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Week Current
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~weekCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    weekCurrent(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling weekCurrent");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/CurrentWeek', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the weekLastCompleted operation.
     * @callback module:api/DefaultApi~weekLastCompletedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Week Last Completed
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~weekLastCompletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    weekLastCompleted(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling weekLastCompleted");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/LastCompletedWeek', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the weekUpcoming operation.
     * @callback module:api/DefaultApi~weekUpcomingCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Week Upcoming
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * @param {String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~weekUpcomingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    weekUpcoming(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling weekUpcoming");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/UpcomingWeek', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
