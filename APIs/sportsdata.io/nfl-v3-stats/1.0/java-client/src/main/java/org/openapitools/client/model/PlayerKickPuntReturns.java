/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerKickPuntReturns
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerKickPuntReturns {
  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FANTASY_POSITION = "FantasyPosition";
  @SerializedName(SERIALIZED_NAME_FANTASY_POSITION)
  private String fantasyPosition;

  public static final String SERIALIZED_NAME_FUMBLES_LOST = "FumblesLost";
  @SerializedName(SERIALIZED_NAME_FUMBLES_LOST)
  private Integer fumblesLost;

  public static final String SERIALIZED_NAME_KICK_RETURN_LONG = "KickReturnLong";
  @SerializedName(SERIALIZED_NAME_KICK_RETURN_LONG)
  private Integer kickReturnLong;

  public static final String SERIALIZED_NAME_KICK_RETURN_TOUCHDOWNS = "KickReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_KICK_RETURN_TOUCHDOWNS)
  private Integer kickReturnTouchdowns;

  public static final String SERIALIZED_NAME_KICK_RETURN_YARDS = "KickReturnYards";
  @SerializedName(SERIALIZED_NAME_KICK_RETURN_YARDS)
  private Integer kickReturnYards;

  public static final String SERIALIZED_NAME_KICK_RETURN_YARDS_PER_ATTEMPT = "KickReturnYardsPerAttempt";
  @SerializedName(SERIALIZED_NAME_KICK_RETURN_YARDS_PER_ATTEMPT)
  private BigDecimal kickReturnYardsPerAttempt;

  public static final String SERIALIZED_NAME_KICK_RETURNS = "KickReturns";
  @SerializedName(SERIALIZED_NAME_KICK_RETURNS)
  private Integer kickReturns;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PLAYER_GAME_I_D = "PlayerGameID";
  @SerializedName(SERIALIZED_NAME_PLAYER_GAME_I_D)
  private Integer playerGameID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POSITION_CATEGORY = "PositionCategory";
  @SerializedName(SERIALIZED_NAME_POSITION_CATEGORY)
  private String positionCategory;

  public static final String SERIALIZED_NAME_PUNT_RETURN_LONG = "PuntReturnLong";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURN_LONG)
  private Integer puntReturnLong;

  public static final String SERIALIZED_NAME_PUNT_RETURN_TOUCHDOWNS = "PuntReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURN_TOUCHDOWNS)
  private Integer puntReturnTouchdowns;

  public static final String SERIALIZED_NAME_PUNT_RETURN_YARDS = "PuntReturnYards";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURN_YARDS)
  private Integer puntReturnYards;

  public static final String SERIALIZED_NAME_PUNT_RETURN_YARDS_PER_ATTEMPT = "PuntReturnYardsPerAttempt";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURN_YARDS_PER_ATTEMPT)
  private BigDecimal puntReturnYardsPerAttempt;

  public static final String SERIALIZED_NAME_PUNT_RETURNS = "PuntReturns";
  @SerializedName(SERIALIZED_NAME_PUNT_RETURNS)
  private Integer puntReturns;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public PlayerKickPuntReturns() {
  }

  public PlayerKickPuntReturns fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public PlayerKickPuntReturns fantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
    return this;
  }

  /**
   * Get fantasyPosition
   * @return fantasyPosition
   */
  @javax.annotation.Nullable
  public String getFantasyPosition() {
    return fantasyPosition;
  }

  public void setFantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
  }


  public PlayerKickPuntReturns fumblesLost(Integer fumblesLost) {
    this.fumblesLost = fumblesLost;
    return this;
  }

  /**
   * Get fumblesLost
   * @return fumblesLost
   */
  @javax.annotation.Nullable
  public Integer getFumblesLost() {
    return fumblesLost;
  }

  public void setFumblesLost(Integer fumblesLost) {
    this.fumblesLost = fumblesLost;
  }


  public PlayerKickPuntReturns kickReturnLong(Integer kickReturnLong) {
    this.kickReturnLong = kickReturnLong;
    return this;
  }

  /**
   * Get kickReturnLong
   * @return kickReturnLong
   */
  @javax.annotation.Nullable
  public Integer getKickReturnLong() {
    return kickReturnLong;
  }

  public void setKickReturnLong(Integer kickReturnLong) {
    this.kickReturnLong = kickReturnLong;
  }


  public PlayerKickPuntReturns kickReturnTouchdowns(Integer kickReturnTouchdowns) {
    this.kickReturnTouchdowns = kickReturnTouchdowns;
    return this;
  }

  /**
   * Get kickReturnTouchdowns
   * @return kickReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getKickReturnTouchdowns() {
    return kickReturnTouchdowns;
  }

  public void setKickReturnTouchdowns(Integer kickReturnTouchdowns) {
    this.kickReturnTouchdowns = kickReturnTouchdowns;
  }


  public PlayerKickPuntReturns kickReturnYards(Integer kickReturnYards) {
    this.kickReturnYards = kickReturnYards;
    return this;
  }

  /**
   * Get kickReturnYards
   * @return kickReturnYards
   */
  @javax.annotation.Nullable
  public Integer getKickReturnYards() {
    return kickReturnYards;
  }

  public void setKickReturnYards(Integer kickReturnYards) {
    this.kickReturnYards = kickReturnYards;
  }


  public PlayerKickPuntReturns kickReturnYardsPerAttempt(BigDecimal kickReturnYardsPerAttempt) {
    this.kickReturnYardsPerAttempt = kickReturnYardsPerAttempt;
    return this;
  }

  /**
   * Get kickReturnYardsPerAttempt
   * @return kickReturnYardsPerAttempt
   */
  @javax.annotation.Nullable
  public BigDecimal getKickReturnYardsPerAttempt() {
    return kickReturnYardsPerAttempt;
  }

  public void setKickReturnYardsPerAttempt(BigDecimal kickReturnYardsPerAttempt) {
    this.kickReturnYardsPerAttempt = kickReturnYardsPerAttempt;
  }


  public PlayerKickPuntReturns kickReturns(Integer kickReturns) {
    this.kickReturns = kickReturns;
    return this;
  }

  /**
   * Get kickReturns
   * @return kickReturns
   */
  @javax.annotation.Nullable
  public Integer getKickReturns() {
    return kickReturns;
  }

  public void setKickReturns(Integer kickReturns) {
    this.kickReturns = kickReturns;
  }


  public PlayerKickPuntReturns name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerKickPuntReturns number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PlayerKickPuntReturns playerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
    return this;
  }

  /**
   * Get playerGameID
   * @return playerGameID
   */
  @javax.annotation.Nullable
  public Integer getPlayerGameID() {
    return playerGameID;
  }

  public void setPlayerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
  }


  public PlayerKickPuntReturns playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayerKickPuntReturns position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public PlayerKickPuntReturns positionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
    return this;
  }

  /**
   * Get positionCategory
   * @return positionCategory
   */
  @javax.annotation.Nullable
  public String getPositionCategory() {
    return positionCategory;
  }

  public void setPositionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
  }


  public PlayerKickPuntReturns puntReturnLong(Integer puntReturnLong) {
    this.puntReturnLong = puntReturnLong;
    return this;
  }

  /**
   * Get puntReturnLong
   * @return puntReturnLong
   */
  @javax.annotation.Nullable
  public Integer getPuntReturnLong() {
    return puntReturnLong;
  }

  public void setPuntReturnLong(Integer puntReturnLong) {
    this.puntReturnLong = puntReturnLong;
  }


  public PlayerKickPuntReturns puntReturnTouchdowns(Integer puntReturnTouchdowns) {
    this.puntReturnTouchdowns = puntReturnTouchdowns;
    return this;
  }

  /**
   * Get puntReturnTouchdowns
   * @return puntReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getPuntReturnTouchdowns() {
    return puntReturnTouchdowns;
  }

  public void setPuntReturnTouchdowns(Integer puntReturnTouchdowns) {
    this.puntReturnTouchdowns = puntReturnTouchdowns;
  }


  public PlayerKickPuntReturns puntReturnYards(Integer puntReturnYards) {
    this.puntReturnYards = puntReturnYards;
    return this;
  }

  /**
   * Get puntReturnYards
   * @return puntReturnYards
   */
  @javax.annotation.Nullable
  public Integer getPuntReturnYards() {
    return puntReturnYards;
  }

  public void setPuntReturnYards(Integer puntReturnYards) {
    this.puntReturnYards = puntReturnYards;
  }


  public PlayerKickPuntReturns puntReturnYardsPerAttempt(BigDecimal puntReturnYardsPerAttempt) {
    this.puntReturnYardsPerAttempt = puntReturnYardsPerAttempt;
    return this;
  }

  /**
   * Get puntReturnYardsPerAttempt
   * @return puntReturnYardsPerAttempt
   */
  @javax.annotation.Nullable
  public BigDecimal getPuntReturnYardsPerAttempt() {
    return puntReturnYardsPerAttempt;
  }

  public void setPuntReturnYardsPerAttempt(BigDecimal puntReturnYardsPerAttempt) {
    this.puntReturnYardsPerAttempt = puntReturnYardsPerAttempt;
  }


  public PlayerKickPuntReturns puntReturns(Integer puntReturns) {
    this.puntReturns = puntReturns;
    return this;
  }

  /**
   * Get puntReturns
   * @return puntReturns
   */
  @javax.annotation.Nullable
  public Integer getPuntReturns() {
    return puntReturns;
  }

  public void setPuntReturns(Integer puntReturns) {
    this.puntReturns = puntReturns;
  }


  public PlayerKickPuntReturns shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public PlayerKickPuntReturns team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayerKickPuntReturns updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerKickPuntReturns playerKickPuntReturns = (PlayerKickPuntReturns) o;
    return Objects.equals(this.fantasyPoints, playerKickPuntReturns.fantasyPoints) &&
        Objects.equals(this.fantasyPosition, playerKickPuntReturns.fantasyPosition) &&
        Objects.equals(this.fumblesLost, playerKickPuntReturns.fumblesLost) &&
        Objects.equals(this.kickReturnLong, playerKickPuntReturns.kickReturnLong) &&
        Objects.equals(this.kickReturnTouchdowns, playerKickPuntReturns.kickReturnTouchdowns) &&
        Objects.equals(this.kickReturnYards, playerKickPuntReturns.kickReturnYards) &&
        Objects.equals(this.kickReturnYardsPerAttempt, playerKickPuntReturns.kickReturnYardsPerAttempt) &&
        Objects.equals(this.kickReturns, playerKickPuntReturns.kickReturns) &&
        Objects.equals(this.name, playerKickPuntReturns.name) &&
        Objects.equals(this.number, playerKickPuntReturns.number) &&
        Objects.equals(this.playerGameID, playerKickPuntReturns.playerGameID) &&
        Objects.equals(this.playerID, playerKickPuntReturns.playerID) &&
        Objects.equals(this.position, playerKickPuntReturns.position) &&
        Objects.equals(this.positionCategory, playerKickPuntReturns.positionCategory) &&
        Objects.equals(this.puntReturnLong, playerKickPuntReturns.puntReturnLong) &&
        Objects.equals(this.puntReturnTouchdowns, playerKickPuntReturns.puntReturnTouchdowns) &&
        Objects.equals(this.puntReturnYards, playerKickPuntReturns.puntReturnYards) &&
        Objects.equals(this.puntReturnYardsPerAttempt, playerKickPuntReturns.puntReturnYardsPerAttempt) &&
        Objects.equals(this.puntReturns, playerKickPuntReturns.puntReturns) &&
        Objects.equals(this.shortName, playerKickPuntReturns.shortName) &&
        Objects.equals(this.team, playerKickPuntReturns.team) &&
        Objects.equals(this.updated, playerKickPuntReturns.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fantasyPoints, fantasyPosition, fumblesLost, kickReturnLong, kickReturnTouchdowns, kickReturnYards, kickReturnYardsPerAttempt, kickReturns, name, number, playerGameID, playerID, position, positionCategory, puntReturnLong, puntReturnTouchdowns, puntReturnYards, puntReturnYardsPerAttempt, puntReturns, shortName, team, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerKickPuntReturns {\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    fantasyPosition: ").append(toIndentedString(fantasyPosition)).append("\n");
    sb.append("    fumblesLost: ").append(toIndentedString(fumblesLost)).append("\n");
    sb.append("    kickReturnLong: ").append(toIndentedString(kickReturnLong)).append("\n");
    sb.append("    kickReturnTouchdowns: ").append(toIndentedString(kickReturnTouchdowns)).append("\n");
    sb.append("    kickReturnYards: ").append(toIndentedString(kickReturnYards)).append("\n");
    sb.append("    kickReturnYardsPerAttempt: ").append(toIndentedString(kickReturnYardsPerAttempt)).append("\n");
    sb.append("    kickReturns: ").append(toIndentedString(kickReturns)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    playerGameID: ").append(toIndentedString(playerGameID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionCategory: ").append(toIndentedString(positionCategory)).append("\n");
    sb.append("    puntReturnLong: ").append(toIndentedString(puntReturnLong)).append("\n");
    sb.append("    puntReturnTouchdowns: ").append(toIndentedString(puntReturnTouchdowns)).append("\n");
    sb.append("    puntReturnYards: ").append(toIndentedString(puntReturnYards)).append("\n");
    sb.append("    puntReturnYardsPerAttempt: ").append(toIndentedString(puntReturnYardsPerAttempt)).append("\n");
    sb.append("    puntReturns: ").append(toIndentedString(puntReturns)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FantasyPoints");
    openapiFields.add("FantasyPosition");
    openapiFields.add("FumblesLost");
    openapiFields.add("KickReturnLong");
    openapiFields.add("KickReturnTouchdowns");
    openapiFields.add("KickReturnYards");
    openapiFields.add("KickReturnYardsPerAttempt");
    openapiFields.add("KickReturns");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("PlayerGameID");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("PositionCategory");
    openapiFields.add("PuntReturnLong");
    openapiFields.add("PuntReturnTouchdowns");
    openapiFields.add("PuntReturnYards");
    openapiFields.add("PuntReturnYardsPerAttempt");
    openapiFields.add("PuntReturns");
    openapiFields.add("ShortName");
    openapiFields.add("Team");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerKickPuntReturns
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerKickPuntReturns.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerKickPuntReturns is not found in the empty JSON string", PlayerKickPuntReturns.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerKickPuntReturns.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerKickPuntReturns` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FantasyPosition") != null && !jsonObj.get("FantasyPosition").isJsonNull()) && !jsonObj.get("FantasyPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyPosition").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("PositionCategory") != null && !jsonObj.get("PositionCategory").isJsonNull()) && !jsonObj.get("PositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionCategory").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerKickPuntReturns.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerKickPuntReturns' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerKickPuntReturns> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerKickPuntReturns.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerKickPuntReturns>() {
           @Override
           public void write(JsonWriter out, PlayerKickPuntReturns value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerKickPuntReturns read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerKickPuntReturns given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerKickPuntReturns
   * @throws IOException if the JSON string is invalid with respect to PlayerKickPuntReturns
   */
  public static PlayerKickPuntReturns fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerKickPuntReturns.class);
  }

  /**
   * Convert an instance of PlayerKickPuntReturns to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

