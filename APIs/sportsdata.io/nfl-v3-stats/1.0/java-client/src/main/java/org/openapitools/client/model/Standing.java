/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Standing {
  public static final String SERIALIZED_NAME_CONFERENCE = "Conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_CONFERENCE_LOSSES = "ConferenceLosses";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_LOSSES)
  private Integer conferenceLosses;

  public static final String SERIALIZED_NAME_CONFERENCE_RANK = "ConferenceRank";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_RANK)
  private Integer conferenceRank;

  public static final String SERIALIZED_NAME_CONFERENCE_TIES = "ConferenceTies";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_TIES)
  private Integer conferenceTies;

  public static final String SERIALIZED_NAME_CONFERENCE_WINS = "ConferenceWins";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_WINS)
  private Integer conferenceWins;

  public static final String SERIALIZED_NAME_DIVISION = "Division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private String division;

  public static final String SERIALIZED_NAME_DIVISION_LOSSES = "DivisionLosses";
  @SerializedName(SERIALIZED_NAME_DIVISION_LOSSES)
  private Integer divisionLosses;

  public static final String SERIALIZED_NAME_DIVISION_RANK = "DivisionRank";
  @SerializedName(SERIALIZED_NAME_DIVISION_RANK)
  private Integer divisionRank;

  public static final String SERIALIZED_NAME_DIVISION_TIES = "DivisionTies";
  @SerializedName(SERIALIZED_NAME_DIVISION_TIES)
  private Integer divisionTies;

  public static final String SERIALIZED_NAME_DIVISION_WINS = "DivisionWins";
  @SerializedName(SERIALIZED_NAME_DIVISION_WINS)
  private Integer divisionWins;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_LOSSES = "Losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private Integer losses;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NET_POINTS = "NetPoints";
  @SerializedName(SERIALIZED_NAME_NET_POINTS)
  private Integer netPoints;

  public static final String SERIALIZED_NAME_PERCENTAGE = "Percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private BigDecimal percentage;

  public static final String SERIALIZED_NAME_POINTS_AGAINST = "PointsAgainst";
  @SerializedName(SERIALIZED_NAME_POINTS_AGAINST)
  private Integer pointsAgainst;

  public static final String SERIALIZED_NAME_POINTS_FOR = "PointsFor";
  @SerializedName(SERIALIZED_NAME_POINTS_FOR)
  private Integer pointsFor;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_TIES = "Ties";
  @SerializedName(SERIALIZED_NAME_TIES)
  private Integer ties;

  public static final String SERIALIZED_NAME_TOUCHDOWNS = "Touchdowns";
  @SerializedName(SERIALIZED_NAME_TOUCHDOWNS)
  private Integer touchdowns;

  public static final String SERIALIZED_NAME_WINS = "Wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public Standing() {
  }

  public Standing conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public Standing conferenceLosses(Integer conferenceLosses) {
    this.conferenceLosses = conferenceLosses;
    return this;
  }

  /**
   * Get conferenceLosses
   * @return conferenceLosses
   */
  @javax.annotation.Nullable
  public Integer getConferenceLosses() {
    return conferenceLosses;
  }

  public void setConferenceLosses(Integer conferenceLosses) {
    this.conferenceLosses = conferenceLosses;
  }


  public Standing conferenceRank(Integer conferenceRank) {
    this.conferenceRank = conferenceRank;
    return this;
  }

  /**
   * Get conferenceRank
   * @return conferenceRank
   */
  @javax.annotation.Nullable
  public Integer getConferenceRank() {
    return conferenceRank;
  }

  public void setConferenceRank(Integer conferenceRank) {
    this.conferenceRank = conferenceRank;
  }


  public Standing conferenceTies(Integer conferenceTies) {
    this.conferenceTies = conferenceTies;
    return this;
  }

  /**
   * Get conferenceTies
   * @return conferenceTies
   */
  @javax.annotation.Nullable
  public Integer getConferenceTies() {
    return conferenceTies;
  }

  public void setConferenceTies(Integer conferenceTies) {
    this.conferenceTies = conferenceTies;
  }


  public Standing conferenceWins(Integer conferenceWins) {
    this.conferenceWins = conferenceWins;
    return this;
  }

  /**
   * Get conferenceWins
   * @return conferenceWins
   */
  @javax.annotation.Nullable
  public Integer getConferenceWins() {
    return conferenceWins;
  }

  public void setConferenceWins(Integer conferenceWins) {
    this.conferenceWins = conferenceWins;
  }


  public Standing division(String division) {
    this.division = division;
    return this;
  }

  /**
   * Get division
   * @return division
   */
  @javax.annotation.Nullable
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }


  public Standing divisionLosses(Integer divisionLosses) {
    this.divisionLosses = divisionLosses;
    return this;
  }

  /**
   * Get divisionLosses
   * @return divisionLosses
   */
  @javax.annotation.Nullable
  public Integer getDivisionLosses() {
    return divisionLosses;
  }

  public void setDivisionLosses(Integer divisionLosses) {
    this.divisionLosses = divisionLosses;
  }


  public Standing divisionRank(Integer divisionRank) {
    this.divisionRank = divisionRank;
    return this;
  }

  /**
   * Get divisionRank
   * @return divisionRank
   */
  @javax.annotation.Nullable
  public Integer getDivisionRank() {
    return divisionRank;
  }

  public void setDivisionRank(Integer divisionRank) {
    this.divisionRank = divisionRank;
  }


  public Standing divisionTies(Integer divisionTies) {
    this.divisionTies = divisionTies;
    return this;
  }

  /**
   * Get divisionTies
   * @return divisionTies
   */
  @javax.annotation.Nullable
  public Integer getDivisionTies() {
    return divisionTies;
  }

  public void setDivisionTies(Integer divisionTies) {
    this.divisionTies = divisionTies;
  }


  public Standing divisionWins(Integer divisionWins) {
    this.divisionWins = divisionWins;
    return this;
  }

  /**
   * Get divisionWins
   * @return divisionWins
   */
  @javax.annotation.Nullable
  public Integer getDivisionWins() {
    return divisionWins;
  }

  public void setDivisionWins(Integer divisionWins) {
    this.divisionWins = divisionWins;
  }


  public Standing globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public Standing losses(Integer losses) {
    this.losses = losses;
    return this;
  }

  /**
   * Get losses
   * @return losses
   */
  @javax.annotation.Nullable
  public Integer getLosses() {
    return losses;
  }

  public void setLosses(Integer losses) {
    this.losses = losses;
  }


  public Standing name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Standing netPoints(Integer netPoints) {
    this.netPoints = netPoints;
    return this;
  }

  /**
   * Get netPoints
   * @return netPoints
   */
  @javax.annotation.Nullable
  public Integer getNetPoints() {
    return netPoints;
  }

  public void setNetPoints(Integer netPoints) {
    this.netPoints = netPoints;
  }


  public Standing percentage(BigDecimal percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentage() {
    return percentage;
  }

  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }


  public Standing pointsAgainst(Integer pointsAgainst) {
    this.pointsAgainst = pointsAgainst;
    return this;
  }

  /**
   * Get pointsAgainst
   * @return pointsAgainst
   */
  @javax.annotation.Nullable
  public Integer getPointsAgainst() {
    return pointsAgainst;
  }

  public void setPointsAgainst(Integer pointsAgainst) {
    this.pointsAgainst = pointsAgainst;
  }


  public Standing pointsFor(Integer pointsFor) {
    this.pointsFor = pointsFor;
    return this;
  }

  /**
   * Get pointsFor
   * @return pointsFor
   */
  @javax.annotation.Nullable
  public Integer getPointsFor() {
    return pointsFor;
  }

  public void setPointsFor(Integer pointsFor) {
    this.pointsFor = pointsFor;
  }


  public Standing season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Standing seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Standing team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Standing teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Standing ties(Integer ties) {
    this.ties = ties;
    return this;
  }

  /**
   * Get ties
   * @return ties
   */
  @javax.annotation.Nullable
  public Integer getTies() {
    return ties;
  }

  public void setTies(Integer ties) {
    this.ties = ties;
  }


  public Standing touchdowns(Integer touchdowns) {
    this.touchdowns = touchdowns;
    return this;
  }

  /**
   * Get touchdowns
   * @return touchdowns
   */
  @javax.annotation.Nullable
  public Integer getTouchdowns() {
    return touchdowns;
  }

  public void setTouchdowns(Integer touchdowns) {
    this.touchdowns = touchdowns;
  }


  public Standing wins(Integer wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Standing standing = (Standing) o;
    return Objects.equals(this.conference, standing.conference) &&
        Objects.equals(this.conferenceLosses, standing.conferenceLosses) &&
        Objects.equals(this.conferenceRank, standing.conferenceRank) &&
        Objects.equals(this.conferenceTies, standing.conferenceTies) &&
        Objects.equals(this.conferenceWins, standing.conferenceWins) &&
        Objects.equals(this.division, standing.division) &&
        Objects.equals(this.divisionLosses, standing.divisionLosses) &&
        Objects.equals(this.divisionRank, standing.divisionRank) &&
        Objects.equals(this.divisionTies, standing.divisionTies) &&
        Objects.equals(this.divisionWins, standing.divisionWins) &&
        Objects.equals(this.globalTeamID, standing.globalTeamID) &&
        Objects.equals(this.losses, standing.losses) &&
        Objects.equals(this.name, standing.name) &&
        Objects.equals(this.netPoints, standing.netPoints) &&
        Objects.equals(this.percentage, standing.percentage) &&
        Objects.equals(this.pointsAgainst, standing.pointsAgainst) &&
        Objects.equals(this.pointsFor, standing.pointsFor) &&
        Objects.equals(this.season, standing.season) &&
        Objects.equals(this.seasonType, standing.seasonType) &&
        Objects.equals(this.team, standing.team) &&
        Objects.equals(this.teamID, standing.teamID) &&
        Objects.equals(this.ties, standing.ties) &&
        Objects.equals(this.touchdowns, standing.touchdowns) &&
        Objects.equals(this.wins, standing.wins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(conference, conferenceLosses, conferenceRank, conferenceTies, conferenceWins, division, divisionLosses, divisionRank, divisionTies, divisionWins, globalTeamID, losses, name, netPoints, percentage, pointsAgainst, pointsFor, season, seasonType, team, teamID, ties, touchdowns, wins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Standing {\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    conferenceLosses: ").append(toIndentedString(conferenceLosses)).append("\n");
    sb.append("    conferenceRank: ").append(toIndentedString(conferenceRank)).append("\n");
    sb.append("    conferenceTies: ").append(toIndentedString(conferenceTies)).append("\n");
    sb.append("    conferenceWins: ").append(toIndentedString(conferenceWins)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    divisionLosses: ").append(toIndentedString(divisionLosses)).append("\n");
    sb.append("    divisionRank: ").append(toIndentedString(divisionRank)).append("\n");
    sb.append("    divisionTies: ").append(toIndentedString(divisionTies)).append("\n");
    sb.append("    divisionWins: ").append(toIndentedString(divisionWins)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    netPoints: ").append(toIndentedString(netPoints)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    pointsAgainst: ").append(toIndentedString(pointsAgainst)).append("\n");
    sb.append("    pointsFor: ").append(toIndentedString(pointsFor)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    ties: ").append(toIndentedString(ties)).append("\n");
    sb.append("    touchdowns: ").append(toIndentedString(touchdowns)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Conference");
    openapiFields.add("ConferenceLosses");
    openapiFields.add("ConferenceRank");
    openapiFields.add("ConferenceTies");
    openapiFields.add("ConferenceWins");
    openapiFields.add("Division");
    openapiFields.add("DivisionLosses");
    openapiFields.add("DivisionRank");
    openapiFields.add("DivisionTies");
    openapiFields.add("DivisionWins");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("Losses");
    openapiFields.add("Name");
    openapiFields.add("NetPoints");
    openapiFields.add("Percentage");
    openapiFields.add("PointsAgainst");
    openapiFields.add("PointsFor");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("Ties");
    openapiFields.add("Touchdowns");
    openapiFields.add("Wins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Standing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Standing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Standing is not found in the empty JSON string", Standing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Standing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Standing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Conference") != null && !jsonObj.get("Conference").isJsonNull()) && !jsonObj.get("Conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Conference").toString()));
      }
      if ((jsonObj.get("Division") != null && !jsonObj.get("Division").isJsonNull()) && !jsonObj.get("Division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Division").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Standing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Standing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Standing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Standing.class));

       return (TypeAdapter<T>) new TypeAdapter<Standing>() {
           @Override
           public void write(JsonWriter out, Standing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Standing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Standing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Standing
   * @throws IOException if the JSON string is invalid with respect to Standing
   */
  public static Standing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Standing.class);
  }

  /**
   * Convert an instance of Standing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

