/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerDefense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerDefense {
  public static final String SERIALIZED_NAME_ASSISTED_TACKLES = "AssistedTackles";
  @SerializedName(SERIALIZED_NAME_ASSISTED_TACKLES)
  private Integer assistedTackles;

  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FANTASY_POSITION = "FantasyPosition";
  @SerializedName(SERIALIZED_NAME_FANTASY_POSITION)
  private String fantasyPosition;

  public static final String SERIALIZED_NAME_FUMBLE_RETURN_TOUCHDOWNS = "FumbleReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_FUMBLE_RETURN_TOUCHDOWNS)
  private Integer fumbleReturnTouchdowns;

  public static final String SERIALIZED_NAME_FUMBLES_FORCED = "FumblesForced";
  @SerializedName(SERIALIZED_NAME_FUMBLES_FORCED)
  private Integer fumblesForced;

  public static final String SERIALIZED_NAME_FUMBLES_RECOVERED = "FumblesRecovered";
  @SerializedName(SERIALIZED_NAME_FUMBLES_RECOVERED)
  private Integer fumblesRecovered;

  public static final String SERIALIZED_NAME_INTERCEPTION_RETURN_TOUCHDOWNS = "InterceptionReturnTouchdowns";
  @SerializedName(SERIALIZED_NAME_INTERCEPTION_RETURN_TOUCHDOWNS)
  private Integer interceptionReturnTouchdowns;

  public static final String SERIALIZED_NAME_INTERCEPTION_RETURN_YARDS = "InterceptionReturnYards";
  @SerializedName(SERIALIZED_NAME_INTERCEPTION_RETURN_YARDS)
  private Integer interceptionReturnYards;

  public static final String SERIALIZED_NAME_INTERCEPTIONS = "Interceptions";
  @SerializedName(SERIALIZED_NAME_INTERCEPTIONS)
  private Integer interceptions;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PASSES_DEFENDED = "PassesDefended";
  @SerializedName(SERIALIZED_NAME_PASSES_DEFENDED)
  private Integer passesDefended;

  public static final String SERIALIZED_NAME_PLAYER_GAME_I_D = "PlayerGameID";
  @SerializedName(SERIALIZED_NAME_PLAYER_GAME_I_D)
  private Integer playerGameID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POSITION_CATEGORY = "PositionCategory";
  @SerializedName(SERIALIZED_NAME_POSITION_CATEGORY)
  private String positionCategory;

  public static final String SERIALIZED_NAME_QUARTERBACK_HITS = "QuarterbackHits";
  @SerializedName(SERIALIZED_NAME_QUARTERBACK_HITS)
  private Integer quarterbackHits;

  public static final String SERIALIZED_NAME_SACK_YARDS = "SackYards";
  @SerializedName(SERIALIZED_NAME_SACK_YARDS)
  private Integer sackYards;

  public static final String SERIALIZED_NAME_SACKS = "Sacks";
  @SerializedName(SERIALIZED_NAME_SACKS)
  private BigDecimal sacks;

  public static final String SERIALIZED_NAME_SAFETIES = "Safeties";
  @SerializedName(SERIALIZED_NAME_SAFETIES)
  private Integer safeties;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_SOLO_TACKLES = "SoloTackles";
  @SerializedName(SERIALIZED_NAME_SOLO_TACKLES)
  private Integer soloTackles;

  public static final String SERIALIZED_NAME_TACKLES = "Tackles";
  @SerializedName(SERIALIZED_NAME_TACKLES)
  private Integer tackles;

  public static final String SERIALIZED_NAME_TACKLES_FOR_LOSS = "TacklesForLoss";
  @SerializedName(SERIALIZED_NAME_TACKLES_FOR_LOSS)
  private Integer tacklesForLoss;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public PlayerDefense() {
  }

  public PlayerDefense assistedTackles(Integer assistedTackles) {
    this.assistedTackles = assistedTackles;
    return this;
  }

  /**
   * Get assistedTackles
   * @return assistedTackles
   */
  @javax.annotation.Nullable
  public Integer getAssistedTackles() {
    return assistedTackles;
  }

  public void setAssistedTackles(Integer assistedTackles) {
    this.assistedTackles = assistedTackles;
  }


  public PlayerDefense fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public PlayerDefense fantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
    return this;
  }

  /**
   * Get fantasyPosition
   * @return fantasyPosition
   */
  @javax.annotation.Nullable
  public String getFantasyPosition() {
    return fantasyPosition;
  }

  public void setFantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
  }


  public PlayerDefense fumbleReturnTouchdowns(Integer fumbleReturnTouchdowns) {
    this.fumbleReturnTouchdowns = fumbleReturnTouchdowns;
    return this;
  }

  /**
   * Get fumbleReturnTouchdowns
   * @return fumbleReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getFumbleReturnTouchdowns() {
    return fumbleReturnTouchdowns;
  }

  public void setFumbleReturnTouchdowns(Integer fumbleReturnTouchdowns) {
    this.fumbleReturnTouchdowns = fumbleReturnTouchdowns;
  }


  public PlayerDefense fumblesForced(Integer fumblesForced) {
    this.fumblesForced = fumblesForced;
    return this;
  }

  /**
   * Get fumblesForced
   * @return fumblesForced
   */
  @javax.annotation.Nullable
  public Integer getFumblesForced() {
    return fumblesForced;
  }

  public void setFumblesForced(Integer fumblesForced) {
    this.fumblesForced = fumblesForced;
  }


  public PlayerDefense fumblesRecovered(Integer fumblesRecovered) {
    this.fumblesRecovered = fumblesRecovered;
    return this;
  }

  /**
   * Get fumblesRecovered
   * @return fumblesRecovered
   */
  @javax.annotation.Nullable
  public Integer getFumblesRecovered() {
    return fumblesRecovered;
  }

  public void setFumblesRecovered(Integer fumblesRecovered) {
    this.fumblesRecovered = fumblesRecovered;
  }


  public PlayerDefense interceptionReturnTouchdowns(Integer interceptionReturnTouchdowns) {
    this.interceptionReturnTouchdowns = interceptionReturnTouchdowns;
    return this;
  }

  /**
   * Get interceptionReturnTouchdowns
   * @return interceptionReturnTouchdowns
   */
  @javax.annotation.Nullable
  public Integer getInterceptionReturnTouchdowns() {
    return interceptionReturnTouchdowns;
  }

  public void setInterceptionReturnTouchdowns(Integer interceptionReturnTouchdowns) {
    this.interceptionReturnTouchdowns = interceptionReturnTouchdowns;
  }


  public PlayerDefense interceptionReturnYards(Integer interceptionReturnYards) {
    this.interceptionReturnYards = interceptionReturnYards;
    return this;
  }

  /**
   * Get interceptionReturnYards
   * @return interceptionReturnYards
   */
  @javax.annotation.Nullable
  public Integer getInterceptionReturnYards() {
    return interceptionReturnYards;
  }

  public void setInterceptionReturnYards(Integer interceptionReturnYards) {
    this.interceptionReturnYards = interceptionReturnYards;
  }


  public PlayerDefense interceptions(Integer interceptions) {
    this.interceptions = interceptions;
    return this;
  }

  /**
   * Get interceptions
   * @return interceptions
   */
  @javax.annotation.Nullable
  public Integer getInterceptions() {
    return interceptions;
  }

  public void setInterceptions(Integer interceptions) {
    this.interceptions = interceptions;
  }


  public PlayerDefense name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerDefense number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PlayerDefense passesDefended(Integer passesDefended) {
    this.passesDefended = passesDefended;
    return this;
  }

  /**
   * Get passesDefended
   * @return passesDefended
   */
  @javax.annotation.Nullable
  public Integer getPassesDefended() {
    return passesDefended;
  }

  public void setPassesDefended(Integer passesDefended) {
    this.passesDefended = passesDefended;
  }


  public PlayerDefense playerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
    return this;
  }

  /**
   * Get playerGameID
   * @return playerGameID
   */
  @javax.annotation.Nullable
  public Integer getPlayerGameID() {
    return playerGameID;
  }

  public void setPlayerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
  }


  public PlayerDefense playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayerDefense position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public PlayerDefense positionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
    return this;
  }

  /**
   * Get positionCategory
   * @return positionCategory
   */
  @javax.annotation.Nullable
  public String getPositionCategory() {
    return positionCategory;
  }

  public void setPositionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
  }


  public PlayerDefense quarterbackHits(Integer quarterbackHits) {
    this.quarterbackHits = quarterbackHits;
    return this;
  }

  /**
   * Get quarterbackHits
   * @return quarterbackHits
   */
  @javax.annotation.Nullable
  public Integer getQuarterbackHits() {
    return quarterbackHits;
  }

  public void setQuarterbackHits(Integer quarterbackHits) {
    this.quarterbackHits = quarterbackHits;
  }


  public PlayerDefense sackYards(Integer sackYards) {
    this.sackYards = sackYards;
    return this;
  }

  /**
   * Get sackYards
   * @return sackYards
   */
  @javax.annotation.Nullable
  public Integer getSackYards() {
    return sackYards;
  }

  public void setSackYards(Integer sackYards) {
    this.sackYards = sackYards;
  }


  public PlayerDefense sacks(BigDecimal sacks) {
    this.sacks = sacks;
    return this;
  }

  /**
   * Get sacks
   * @return sacks
   */
  @javax.annotation.Nullable
  public BigDecimal getSacks() {
    return sacks;
  }

  public void setSacks(BigDecimal sacks) {
    this.sacks = sacks;
  }


  public PlayerDefense safeties(Integer safeties) {
    this.safeties = safeties;
    return this;
  }

  /**
   * Get safeties
   * @return safeties
   */
  @javax.annotation.Nullable
  public Integer getSafeties() {
    return safeties;
  }

  public void setSafeties(Integer safeties) {
    this.safeties = safeties;
  }


  public PlayerDefense shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public PlayerDefense soloTackles(Integer soloTackles) {
    this.soloTackles = soloTackles;
    return this;
  }

  /**
   * Get soloTackles
   * @return soloTackles
   */
  @javax.annotation.Nullable
  public Integer getSoloTackles() {
    return soloTackles;
  }

  public void setSoloTackles(Integer soloTackles) {
    this.soloTackles = soloTackles;
  }


  public PlayerDefense tackles(Integer tackles) {
    this.tackles = tackles;
    return this;
  }

  /**
   * Get tackles
   * @return tackles
   */
  @javax.annotation.Nullable
  public Integer getTackles() {
    return tackles;
  }

  public void setTackles(Integer tackles) {
    this.tackles = tackles;
  }


  public PlayerDefense tacklesForLoss(Integer tacklesForLoss) {
    this.tacklesForLoss = tacklesForLoss;
    return this;
  }

  /**
   * Get tacklesForLoss
   * @return tacklesForLoss
   */
  @javax.annotation.Nullable
  public Integer getTacklesForLoss() {
    return tacklesForLoss;
  }

  public void setTacklesForLoss(Integer tacklesForLoss) {
    this.tacklesForLoss = tacklesForLoss;
  }


  public PlayerDefense team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayerDefense updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerDefense playerDefense = (PlayerDefense) o;
    return Objects.equals(this.assistedTackles, playerDefense.assistedTackles) &&
        Objects.equals(this.fantasyPoints, playerDefense.fantasyPoints) &&
        Objects.equals(this.fantasyPosition, playerDefense.fantasyPosition) &&
        Objects.equals(this.fumbleReturnTouchdowns, playerDefense.fumbleReturnTouchdowns) &&
        Objects.equals(this.fumblesForced, playerDefense.fumblesForced) &&
        Objects.equals(this.fumblesRecovered, playerDefense.fumblesRecovered) &&
        Objects.equals(this.interceptionReturnTouchdowns, playerDefense.interceptionReturnTouchdowns) &&
        Objects.equals(this.interceptionReturnYards, playerDefense.interceptionReturnYards) &&
        Objects.equals(this.interceptions, playerDefense.interceptions) &&
        Objects.equals(this.name, playerDefense.name) &&
        Objects.equals(this.number, playerDefense.number) &&
        Objects.equals(this.passesDefended, playerDefense.passesDefended) &&
        Objects.equals(this.playerGameID, playerDefense.playerGameID) &&
        Objects.equals(this.playerID, playerDefense.playerID) &&
        Objects.equals(this.position, playerDefense.position) &&
        Objects.equals(this.positionCategory, playerDefense.positionCategory) &&
        Objects.equals(this.quarterbackHits, playerDefense.quarterbackHits) &&
        Objects.equals(this.sackYards, playerDefense.sackYards) &&
        Objects.equals(this.sacks, playerDefense.sacks) &&
        Objects.equals(this.safeties, playerDefense.safeties) &&
        Objects.equals(this.shortName, playerDefense.shortName) &&
        Objects.equals(this.soloTackles, playerDefense.soloTackles) &&
        Objects.equals(this.tackles, playerDefense.tackles) &&
        Objects.equals(this.tacklesForLoss, playerDefense.tacklesForLoss) &&
        Objects.equals(this.team, playerDefense.team) &&
        Objects.equals(this.updated, playerDefense.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistedTackles, fantasyPoints, fantasyPosition, fumbleReturnTouchdowns, fumblesForced, fumblesRecovered, interceptionReturnTouchdowns, interceptionReturnYards, interceptions, name, number, passesDefended, playerGameID, playerID, position, positionCategory, quarterbackHits, sackYards, sacks, safeties, shortName, soloTackles, tackles, tacklesForLoss, team, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerDefense {\n");
    sb.append("    assistedTackles: ").append(toIndentedString(assistedTackles)).append("\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    fantasyPosition: ").append(toIndentedString(fantasyPosition)).append("\n");
    sb.append("    fumbleReturnTouchdowns: ").append(toIndentedString(fumbleReturnTouchdowns)).append("\n");
    sb.append("    fumblesForced: ").append(toIndentedString(fumblesForced)).append("\n");
    sb.append("    fumblesRecovered: ").append(toIndentedString(fumblesRecovered)).append("\n");
    sb.append("    interceptionReturnTouchdowns: ").append(toIndentedString(interceptionReturnTouchdowns)).append("\n");
    sb.append("    interceptionReturnYards: ").append(toIndentedString(interceptionReturnYards)).append("\n");
    sb.append("    interceptions: ").append(toIndentedString(interceptions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    passesDefended: ").append(toIndentedString(passesDefended)).append("\n");
    sb.append("    playerGameID: ").append(toIndentedString(playerGameID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionCategory: ").append(toIndentedString(positionCategory)).append("\n");
    sb.append("    quarterbackHits: ").append(toIndentedString(quarterbackHits)).append("\n");
    sb.append("    sackYards: ").append(toIndentedString(sackYards)).append("\n");
    sb.append("    sacks: ").append(toIndentedString(sacks)).append("\n");
    sb.append("    safeties: ").append(toIndentedString(safeties)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    soloTackles: ").append(toIndentedString(soloTackles)).append("\n");
    sb.append("    tackles: ").append(toIndentedString(tackles)).append("\n");
    sb.append("    tacklesForLoss: ").append(toIndentedString(tacklesForLoss)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssistedTackles");
    openapiFields.add("FantasyPoints");
    openapiFields.add("FantasyPosition");
    openapiFields.add("FumbleReturnTouchdowns");
    openapiFields.add("FumblesForced");
    openapiFields.add("FumblesRecovered");
    openapiFields.add("InterceptionReturnTouchdowns");
    openapiFields.add("InterceptionReturnYards");
    openapiFields.add("Interceptions");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("PassesDefended");
    openapiFields.add("PlayerGameID");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("PositionCategory");
    openapiFields.add("QuarterbackHits");
    openapiFields.add("SackYards");
    openapiFields.add("Sacks");
    openapiFields.add("Safeties");
    openapiFields.add("ShortName");
    openapiFields.add("SoloTackles");
    openapiFields.add("Tackles");
    openapiFields.add("TacklesForLoss");
    openapiFields.add("Team");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerDefense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerDefense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerDefense is not found in the empty JSON string", PlayerDefense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerDefense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerDefense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FantasyPosition") != null && !jsonObj.get("FantasyPosition").isJsonNull()) && !jsonObj.get("FantasyPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyPosition").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("PositionCategory") != null && !jsonObj.get("PositionCategory").isJsonNull()) && !jsonObj.get("PositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionCategory").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerDefense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerDefense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerDefense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerDefense.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerDefense>() {
           @Override
           public void write(JsonWriter out, PlayerDefense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerDefense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerDefense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerDefense
   * @throws IOException if the JSON string is invalid with respect to PlayerDefense
   */
  public static PlayerDefense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerDefense.class);
  }

  /**
   * Convert an instance of PlayerDefense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

