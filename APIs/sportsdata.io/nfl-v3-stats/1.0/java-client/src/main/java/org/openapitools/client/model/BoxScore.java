/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FantasyDefenseGame;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.PlayerDefense;
import org.openapitools.client.model.PlayerKickPuntReturns;
import org.openapitools.client.model.PlayerKicking;
import org.openapitools.client.model.PlayerPassing;
import org.openapitools.client.model.PlayerPunting;
import org.openapitools.client.model.PlayerReceiving;
import org.openapitools.client.model.PlayerRushing;
import org.openapitools.client.model.Score;
import org.openapitools.client.model.ScoringDetail;
import org.openapitools.client.model.ScoringPlay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoxScore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxScore {
  public static final String SERIALIZED_NAME_AWAY_DEFENSE = "AwayDefense";
  @SerializedName(SERIALIZED_NAME_AWAY_DEFENSE)
  private List<PlayerDefense> awayDefense = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_FANTASY_DEFENSE = "AwayFantasyDefense";
  @SerializedName(SERIALIZED_NAME_AWAY_FANTASY_DEFENSE)
  private FantasyDefenseGame awayFantasyDefense;

  public static final String SERIALIZED_NAME_AWAY_KICK_PUNT_RETURNS = "AwayKickPuntReturns";
  @SerializedName(SERIALIZED_NAME_AWAY_KICK_PUNT_RETURNS)
  private List<PlayerKickPuntReturns> awayKickPuntReturns = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_KICKING = "AwayKicking";
  @SerializedName(SERIALIZED_NAME_AWAY_KICKING)
  private List<PlayerKicking> awayKicking = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_PASSING = "AwayPassing";
  @SerializedName(SERIALIZED_NAME_AWAY_PASSING)
  private List<PlayerPassing> awayPassing = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_PUNTING = "AwayPunting";
  @SerializedName(SERIALIZED_NAME_AWAY_PUNTING)
  private List<PlayerPunting> awayPunting = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_RECEIVING = "AwayReceiving";
  @SerializedName(SERIALIZED_NAME_AWAY_RECEIVING)
  private List<PlayerReceiving> awayReceiving = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_RUSHING = "AwayRushing";
  @SerializedName(SERIALIZED_NAME_AWAY_RUSHING)
  private List<PlayerRushing> awayRushing = new ArrayList<>();

  public static final String SERIALIZED_NAME_GAME = "Game";
  @SerializedName(SERIALIZED_NAME_GAME)
  private Game game;

  public static final String SERIALIZED_NAME_HOME_DEFENSE = "HomeDefense";
  @SerializedName(SERIALIZED_NAME_HOME_DEFENSE)
  private List<PlayerDefense> homeDefense = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_FANTASY_DEFENSE = "HomeFantasyDefense";
  @SerializedName(SERIALIZED_NAME_HOME_FANTASY_DEFENSE)
  private FantasyDefenseGame homeFantasyDefense;

  public static final String SERIALIZED_NAME_HOME_KICK_PUNT_RETURNS = "HomeKickPuntReturns";
  @SerializedName(SERIALIZED_NAME_HOME_KICK_PUNT_RETURNS)
  private List<PlayerKickPuntReturns> homeKickPuntReturns = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_KICKING = "HomeKicking";
  @SerializedName(SERIALIZED_NAME_HOME_KICKING)
  private List<PlayerKicking> homeKicking = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_PASSING = "HomePassing";
  @SerializedName(SERIALIZED_NAME_HOME_PASSING)
  private List<PlayerPassing> homePassing = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_PUNTING = "HomePunting";
  @SerializedName(SERIALIZED_NAME_HOME_PUNTING)
  private List<PlayerPunting> homePunting = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_RECEIVING = "HomeReceiving";
  @SerializedName(SERIALIZED_NAME_HOME_RECEIVING)
  private List<PlayerReceiving> homeReceiving = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_RUSHING = "HomeRushing";
  @SerializedName(SERIALIZED_NAME_HOME_RUSHING)
  private List<PlayerRushing> homeRushing = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Score score;

  public static final String SERIALIZED_NAME_SCORING_DETAILS = "ScoringDetails";
  @SerializedName(SERIALIZED_NAME_SCORING_DETAILS)
  private List<ScoringDetail> scoringDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORING_PLAYS = "ScoringPlays";
  @SerializedName(SERIALIZED_NAME_SCORING_PLAYS)
  private List<ScoringPlay> scoringPlays = new ArrayList<>();

  public BoxScore() {
  }

  public BoxScore awayDefense(List<PlayerDefense> awayDefense) {
    this.awayDefense = awayDefense;
    return this;
  }

  public BoxScore addAwayDefenseItem(PlayerDefense awayDefenseItem) {
    if (this.awayDefense == null) {
      this.awayDefense = new ArrayList<>();
    }
    this.awayDefense.add(awayDefenseItem);
    return this;
  }

  /**
   * Get awayDefense
   * @return awayDefense
   */
  @javax.annotation.Nullable
  public List<PlayerDefense> getAwayDefense() {
    return awayDefense;
  }

  public void setAwayDefense(List<PlayerDefense> awayDefense) {
    this.awayDefense = awayDefense;
  }


  public BoxScore awayFantasyDefense(FantasyDefenseGame awayFantasyDefense) {
    this.awayFantasyDefense = awayFantasyDefense;
    return this;
  }

  /**
   * Get awayFantasyDefense
   * @return awayFantasyDefense
   */
  @javax.annotation.Nullable
  public FantasyDefenseGame getAwayFantasyDefense() {
    return awayFantasyDefense;
  }

  public void setAwayFantasyDefense(FantasyDefenseGame awayFantasyDefense) {
    this.awayFantasyDefense = awayFantasyDefense;
  }


  public BoxScore awayKickPuntReturns(List<PlayerKickPuntReturns> awayKickPuntReturns) {
    this.awayKickPuntReturns = awayKickPuntReturns;
    return this;
  }

  public BoxScore addAwayKickPuntReturnsItem(PlayerKickPuntReturns awayKickPuntReturnsItem) {
    if (this.awayKickPuntReturns == null) {
      this.awayKickPuntReturns = new ArrayList<>();
    }
    this.awayKickPuntReturns.add(awayKickPuntReturnsItem);
    return this;
  }

  /**
   * Get awayKickPuntReturns
   * @return awayKickPuntReturns
   */
  @javax.annotation.Nullable
  public List<PlayerKickPuntReturns> getAwayKickPuntReturns() {
    return awayKickPuntReturns;
  }

  public void setAwayKickPuntReturns(List<PlayerKickPuntReturns> awayKickPuntReturns) {
    this.awayKickPuntReturns = awayKickPuntReturns;
  }


  public BoxScore awayKicking(List<PlayerKicking> awayKicking) {
    this.awayKicking = awayKicking;
    return this;
  }

  public BoxScore addAwayKickingItem(PlayerKicking awayKickingItem) {
    if (this.awayKicking == null) {
      this.awayKicking = new ArrayList<>();
    }
    this.awayKicking.add(awayKickingItem);
    return this;
  }

  /**
   * Get awayKicking
   * @return awayKicking
   */
  @javax.annotation.Nullable
  public List<PlayerKicking> getAwayKicking() {
    return awayKicking;
  }

  public void setAwayKicking(List<PlayerKicking> awayKicking) {
    this.awayKicking = awayKicking;
  }


  public BoxScore awayPassing(List<PlayerPassing> awayPassing) {
    this.awayPassing = awayPassing;
    return this;
  }

  public BoxScore addAwayPassingItem(PlayerPassing awayPassingItem) {
    if (this.awayPassing == null) {
      this.awayPassing = new ArrayList<>();
    }
    this.awayPassing.add(awayPassingItem);
    return this;
  }

  /**
   * Get awayPassing
   * @return awayPassing
   */
  @javax.annotation.Nullable
  public List<PlayerPassing> getAwayPassing() {
    return awayPassing;
  }

  public void setAwayPassing(List<PlayerPassing> awayPassing) {
    this.awayPassing = awayPassing;
  }


  public BoxScore awayPunting(List<PlayerPunting> awayPunting) {
    this.awayPunting = awayPunting;
    return this;
  }

  public BoxScore addAwayPuntingItem(PlayerPunting awayPuntingItem) {
    if (this.awayPunting == null) {
      this.awayPunting = new ArrayList<>();
    }
    this.awayPunting.add(awayPuntingItem);
    return this;
  }

  /**
   * Get awayPunting
   * @return awayPunting
   */
  @javax.annotation.Nullable
  public List<PlayerPunting> getAwayPunting() {
    return awayPunting;
  }

  public void setAwayPunting(List<PlayerPunting> awayPunting) {
    this.awayPunting = awayPunting;
  }


  public BoxScore awayReceiving(List<PlayerReceiving> awayReceiving) {
    this.awayReceiving = awayReceiving;
    return this;
  }

  public BoxScore addAwayReceivingItem(PlayerReceiving awayReceivingItem) {
    if (this.awayReceiving == null) {
      this.awayReceiving = new ArrayList<>();
    }
    this.awayReceiving.add(awayReceivingItem);
    return this;
  }

  /**
   * Get awayReceiving
   * @return awayReceiving
   */
  @javax.annotation.Nullable
  public List<PlayerReceiving> getAwayReceiving() {
    return awayReceiving;
  }

  public void setAwayReceiving(List<PlayerReceiving> awayReceiving) {
    this.awayReceiving = awayReceiving;
  }


  public BoxScore awayRushing(List<PlayerRushing> awayRushing) {
    this.awayRushing = awayRushing;
    return this;
  }

  public BoxScore addAwayRushingItem(PlayerRushing awayRushingItem) {
    if (this.awayRushing == null) {
      this.awayRushing = new ArrayList<>();
    }
    this.awayRushing.add(awayRushingItem);
    return this;
  }

  /**
   * Get awayRushing
   * @return awayRushing
   */
  @javax.annotation.Nullable
  public List<PlayerRushing> getAwayRushing() {
    return awayRushing;
  }

  public void setAwayRushing(List<PlayerRushing> awayRushing) {
    this.awayRushing = awayRushing;
  }


  public BoxScore game(Game game) {
    this.game = game;
    return this;
  }

  /**
   * Get game
   * @return game
   */
  @javax.annotation.Nullable
  public Game getGame() {
    return game;
  }

  public void setGame(Game game) {
    this.game = game;
  }


  public BoxScore homeDefense(List<PlayerDefense> homeDefense) {
    this.homeDefense = homeDefense;
    return this;
  }

  public BoxScore addHomeDefenseItem(PlayerDefense homeDefenseItem) {
    if (this.homeDefense == null) {
      this.homeDefense = new ArrayList<>();
    }
    this.homeDefense.add(homeDefenseItem);
    return this;
  }

  /**
   * Get homeDefense
   * @return homeDefense
   */
  @javax.annotation.Nullable
  public List<PlayerDefense> getHomeDefense() {
    return homeDefense;
  }

  public void setHomeDefense(List<PlayerDefense> homeDefense) {
    this.homeDefense = homeDefense;
  }


  public BoxScore homeFantasyDefense(FantasyDefenseGame homeFantasyDefense) {
    this.homeFantasyDefense = homeFantasyDefense;
    return this;
  }

  /**
   * Get homeFantasyDefense
   * @return homeFantasyDefense
   */
  @javax.annotation.Nullable
  public FantasyDefenseGame getHomeFantasyDefense() {
    return homeFantasyDefense;
  }

  public void setHomeFantasyDefense(FantasyDefenseGame homeFantasyDefense) {
    this.homeFantasyDefense = homeFantasyDefense;
  }


  public BoxScore homeKickPuntReturns(List<PlayerKickPuntReturns> homeKickPuntReturns) {
    this.homeKickPuntReturns = homeKickPuntReturns;
    return this;
  }

  public BoxScore addHomeKickPuntReturnsItem(PlayerKickPuntReturns homeKickPuntReturnsItem) {
    if (this.homeKickPuntReturns == null) {
      this.homeKickPuntReturns = new ArrayList<>();
    }
    this.homeKickPuntReturns.add(homeKickPuntReturnsItem);
    return this;
  }

  /**
   * Get homeKickPuntReturns
   * @return homeKickPuntReturns
   */
  @javax.annotation.Nullable
  public List<PlayerKickPuntReturns> getHomeKickPuntReturns() {
    return homeKickPuntReturns;
  }

  public void setHomeKickPuntReturns(List<PlayerKickPuntReturns> homeKickPuntReturns) {
    this.homeKickPuntReturns = homeKickPuntReturns;
  }


  public BoxScore homeKicking(List<PlayerKicking> homeKicking) {
    this.homeKicking = homeKicking;
    return this;
  }

  public BoxScore addHomeKickingItem(PlayerKicking homeKickingItem) {
    if (this.homeKicking == null) {
      this.homeKicking = new ArrayList<>();
    }
    this.homeKicking.add(homeKickingItem);
    return this;
  }

  /**
   * Get homeKicking
   * @return homeKicking
   */
  @javax.annotation.Nullable
  public List<PlayerKicking> getHomeKicking() {
    return homeKicking;
  }

  public void setHomeKicking(List<PlayerKicking> homeKicking) {
    this.homeKicking = homeKicking;
  }


  public BoxScore homePassing(List<PlayerPassing> homePassing) {
    this.homePassing = homePassing;
    return this;
  }

  public BoxScore addHomePassingItem(PlayerPassing homePassingItem) {
    if (this.homePassing == null) {
      this.homePassing = new ArrayList<>();
    }
    this.homePassing.add(homePassingItem);
    return this;
  }

  /**
   * Get homePassing
   * @return homePassing
   */
  @javax.annotation.Nullable
  public List<PlayerPassing> getHomePassing() {
    return homePassing;
  }

  public void setHomePassing(List<PlayerPassing> homePassing) {
    this.homePassing = homePassing;
  }


  public BoxScore homePunting(List<PlayerPunting> homePunting) {
    this.homePunting = homePunting;
    return this;
  }

  public BoxScore addHomePuntingItem(PlayerPunting homePuntingItem) {
    if (this.homePunting == null) {
      this.homePunting = new ArrayList<>();
    }
    this.homePunting.add(homePuntingItem);
    return this;
  }

  /**
   * Get homePunting
   * @return homePunting
   */
  @javax.annotation.Nullable
  public List<PlayerPunting> getHomePunting() {
    return homePunting;
  }

  public void setHomePunting(List<PlayerPunting> homePunting) {
    this.homePunting = homePunting;
  }


  public BoxScore homeReceiving(List<PlayerReceiving> homeReceiving) {
    this.homeReceiving = homeReceiving;
    return this;
  }

  public BoxScore addHomeReceivingItem(PlayerReceiving homeReceivingItem) {
    if (this.homeReceiving == null) {
      this.homeReceiving = new ArrayList<>();
    }
    this.homeReceiving.add(homeReceivingItem);
    return this;
  }

  /**
   * Get homeReceiving
   * @return homeReceiving
   */
  @javax.annotation.Nullable
  public List<PlayerReceiving> getHomeReceiving() {
    return homeReceiving;
  }

  public void setHomeReceiving(List<PlayerReceiving> homeReceiving) {
    this.homeReceiving = homeReceiving;
  }


  public BoxScore homeRushing(List<PlayerRushing> homeRushing) {
    this.homeRushing = homeRushing;
    return this;
  }

  public BoxScore addHomeRushingItem(PlayerRushing homeRushingItem) {
    if (this.homeRushing == null) {
      this.homeRushing = new ArrayList<>();
    }
    this.homeRushing.add(homeRushingItem);
    return this;
  }

  /**
   * Get homeRushing
   * @return homeRushing
   */
  @javax.annotation.Nullable
  public List<PlayerRushing> getHomeRushing() {
    return homeRushing;
  }

  public void setHomeRushing(List<PlayerRushing> homeRushing) {
    this.homeRushing = homeRushing;
  }


  public BoxScore score(Score score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Score getScore() {
    return score;
  }

  public void setScore(Score score) {
    this.score = score;
  }


  public BoxScore scoringDetails(List<ScoringDetail> scoringDetails) {
    this.scoringDetails = scoringDetails;
    return this;
  }

  public BoxScore addScoringDetailsItem(ScoringDetail scoringDetailsItem) {
    if (this.scoringDetails == null) {
      this.scoringDetails = new ArrayList<>();
    }
    this.scoringDetails.add(scoringDetailsItem);
    return this;
  }

  /**
   * Get scoringDetails
   * @return scoringDetails
   */
  @javax.annotation.Nullable
  public List<ScoringDetail> getScoringDetails() {
    return scoringDetails;
  }

  public void setScoringDetails(List<ScoringDetail> scoringDetails) {
    this.scoringDetails = scoringDetails;
  }


  public BoxScore scoringPlays(List<ScoringPlay> scoringPlays) {
    this.scoringPlays = scoringPlays;
    return this;
  }

  public BoxScore addScoringPlaysItem(ScoringPlay scoringPlaysItem) {
    if (this.scoringPlays == null) {
      this.scoringPlays = new ArrayList<>();
    }
    this.scoringPlays.add(scoringPlaysItem);
    return this;
  }

  /**
   * Get scoringPlays
   * @return scoringPlays
   */
  @javax.annotation.Nullable
  public List<ScoringPlay> getScoringPlays() {
    return scoringPlays;
  }

  public void setScoringPlays(List<ScoringPlay> scoringPlays) {
    this.scoringPlays = scoringPlays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxScore boxScore = (BoxScore) o;
    return Objects.equals(this.awayDefense, boxScore.awayDefense) &&
        Objects.equals(this.awayFantasyDefense, boxScore.awayFantasyDefense) &&
        Objects.equals(this.awayKickPuntReturns, boxScore.awayKickPuntReturns) &&
        Objects.equals(this.awayKicking, boxScore.awayKicking) &&
        Objects.equals(this.awayPassing, boxScore.awayPassing) &&
        Objects.equals(this.awayPunting, boxScore.awayPunting) &&
        Objects.equals(this.awayReceiving, boxScore.awayReceiving) &&
        Objects.equals(this.awayRushing, boxScore.awayRushing) &&
        Objects.equals(this.game, boxScore.game) &&
        Objects.equals(this.homeDefense, boxScore.homeDefense) &&
        Objects.equals(this.homeFantasyDefense, boxScore.homeFantasyDefense) &&
        Objects.equals(this.homeKickPuntReturns, boxScore.homeKickPuntReturns) &&
        Objects.equals(this.homeKicking, boxScore.homeKicking) &&
        Objects.equals(this.homePassing, boxScore.homePassing) &&
        Objects.equals(this.homePunting, boxScore.homePunting) &&
        Objects.equals(this.homeReceiving, boxScore.homeReceiving) &&
        Objects.equals(this.homeRushing, boxScore.homeRushing) &&
        Objects.equals(this.score, boxScore.score) &&
        Objects.equals(this.scoringDetails, boxScore.scoringDetails) &&
        Objects.equals(this.scoringPlays, boxScore.scoringPlays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayDefense, awayFantasyDefense, awayKickPuntReturns, awayKicking, awayPassing, awayPunting, awayReceiving, awayRushing, game, homeDefense, homeFantasyDefense, homeKickPuntReturns, homeKicking, homePassing, homePunting, homeReceiving, homeRushing, score, scoringDetails, scoringPlays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxScore {\n");
    sb.append("    awayDefense: ").append(toIndentedString(awayDefense)).append("\n");
    sb.append("    awayFantasyDefense: ").append(toIndentedString(awayFantasyDefense)).append("\n");
    sb.append("    awayKickPuntReturns: ").append(toIndentedString(awayKickPuntReturns)).append("\n");
    sb.append("    awayKicking: ").append(toIndentedString(awayKicking)).append("\n");
    sb.append("    awayPassing: ").append(toIndentedString(awayPassing)).append("\n");
    sb.append("    awayPunting: ").append(toIndentedString(awayPunting)).append("\n");
    sb.append("    awayReceiving: ").append(toIndentedString(awayReceiving)).append("\n");
    sb.append("    awayRushing: ").append(toIndentedString(awayRushing)).append("\n");
    sb.append("    game: ").append(toIndentedString(game)).append("\n");
    sb.append("    homeDefense: ").append(toIndentedString(homeDefense)).append("\n");
    sb.append("    homeFantasyDefense: ").append(toIndentedString(homeFantasyDefense)).append("\n");
    sb.append("    homeKickPuntReturns: ").append(toIndentedString(homeKickPuntReturns)).append("\n");
    sb.append("    homeKicking: ").append(toIndentedString(homeKicking)).append("\n");
    sb.append("    homePassing: ").append(toIndentedString(homePassing)).append("\n");
    sb.append("    homePunting: ").append(toIndentedString(homePunting)).append("\n");
    sb.append("    homeReceiving: ").append(toIndentedString(homeReceiving)).append("\n");
    sb.append("    homeRushing: ").append(toIndentedString(homeRushing)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scoringDetails: ").append(toIndentedString(scoringDetails)).append("\n");
    sb.append("    scoringPlays: ").append(toIndentedString(scoringPlays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AwayDefense");
    openapiFields.add("AwayFantasyDefense");
    openapiFields.add("AwayKickPuntReturns");
    openapiFields.add("AwayKicking");
    openapiFields.add("AwayPassing");
    openapiFields.add("AwayPunting");
    openapiFields.add("AwayReceiving");
    openapiFields.add("AwayRushing");
    openapiFields.add("Game");
    openapiFields.add("HomeDefense");
    openapiFields.add("HomeFantasyDefense");
    openapiFields.add("HomeKickPuntReturns");
    openapiFields.add("HomeKicking");
    openapiFields.add("HomePassing");
    openapiFields.add("HomePunting");
    openapiFields.add("HomeReceiving");
    openapiFields.add("HomeRushing");
    openapiFields.add("Score");
    openapiFields.add("ScoringDetails");
    openapiFields.add("ScoringPlays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxScore is not found in the empty JSON string", BoxScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AwayDefense") != null && !jsonObj.get("AwayDefense").isJsonNull()) {
        JsonArray jsonArrayawayDefense = jsonObj.getAsJsonArray("AwayDefense");
        if (jsonArrayawayDefense != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayDefense").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayDefense` to be an array in the JSON string but got `%s`", jsonObj.get("AwayDefense").toString()));
          }

          // validate the optional field `AwayDefense` (array)
          for (int i = 0; i < jsonArrayawayDefense.size(); i++) {
            PlayerDefense.validateJsonElement(jsonArrayawayDefense.get(i));
          };
        }
      }
      // validate the optional field `AwayFantasyDefense`
      if (jsonObj.get("AwayFantasyDefense") != null && !jsonObj.get("AwayFantasyDefense").isJsonNull()) {
        FantasyDefenseGame.validateJsonElement(jsonObj.get("AwayFantasyDefense"));
      }
      if (jsonObj.get("AwayKickPuntReturns") != null && !jsonObj.get("AwayKickPuntReturns").isJsonNull()) {
        JsonArray jsonArrayawayKickPuntReturns = jsonObj.getAsJsonArray("AwayKickPuntReturns");
        if (jsonArrayawayKickPuntReturns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayKickPuntReturns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayKickPuntReturns` to be an array in the JSON string but got `%s`", jsonObj.get("AwayKickPuntReturns").toString()));
          }

          // validate the optional field `AwayKickPuntReturns` (array)
          for (int i = 0; i < jsonArrayawayKickPuntReturns.size(); i++) {
            PlayerKickPuntReturns.validateJsonElement(jsonArrayawayKickPuntReturns.get(i));
          };
        }
      }
      if (jsonObj.get("AwayKicking") != null && !jsonObj.get("AwayKicking").isJsonNull()) {
        JsonArray jsonArrayawayKicking = jsonObj.getAsJsonArray("AwayKicking");
        if (jsonArrayawayKicking != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayKicking").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayKicking` to be an array in the JSON string but got `%s`", jsonObj.get("AwayKicking").toString()));
          }

          // validate the optional field `AwayKicking` (array)
          for (int i = 0; i < jsonArrayawayKicking.size(); i++) {
            PlayerKicking.validateJsonElement(jsonArrayawayKicking.get(i));
          };
        }
      }
      if (jsonObj.get("AwayPassing") != null && !jsonObj.get("AwayPassing").isJsonNull()) {
        JsonArray jsonArrayawayPassing = jsonObj.getAsJsonArray("AwayPassing");
        if (jsonArrayawayPassing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayPassing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayPassing` to be an array in the JSON string but got `%s`", jsonObj.get("AwayPassing").toString()));
          }

          // validate the optional field `AwayPassing` (array)
          for (int i = 0; i < jsonArrayawayPassing.size(); i++) {
            PlayerPassing.validateJsonElement(jsonArrayawayPassing.get(i));
          };
        }
      }
      if (jsonObj.get("AwayPunting") != null && !jsonObj.get("AwayPunting").isJsonNull()) {
        JsonArray jsonArrayawayPunting = jsonObj.getAsJsonArray("AwayPunting");
        if (jsonArrayawayPunting != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayPunting").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayPunting` to be an array in the JSON string but got `%s`", jsonObj.get("AwayPunting").toString()));
          }

          // validate the optional field `AwayPunting` (array)
          for (int i = 0; i < jsonArrayawayPunting.size(); i++) {
            PlayerPunting.validateJsonElement(jsonArrayawayPunting.get(i));
          };
        }
      }
      if (jsonObj.get("AwayReceiving") != null && !jsonObj.get("AwayReceiving").isJsonNull()) {
        JsonArray jsonArrayawayReceiving = jsonObj.getAsJsonArray("AwayReceiving");
        if (jsonArrayawayReceiving != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayReceiving").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayReceiving` to be an array in the JSON string but got `%s`", jsonObj.get("AwayReceiving").toString()));
          }

          // validate the optional field `AwayReceiving` (array)
          for (int i = 0; i < jsonArrayawayReceiving.size(); i++) {
            PlayerReceiving.validateJsonElement(jsonArrayawayReceiving.get(i));
          };
        }
      }
      if (jsonObj.get("AwayRushing") != null && !jsonObj.get("AwayRushing").isJsonNull()) {
        JsonArray jsonArrayawayRushing = jsonObj.getAsJsonArray("AwayRushing");
        if (jsonArrayawayRushing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayRushing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayRushing` to be an array in the JSON string but got `%s`", jsonObj.get("AwayRushing").toString()));
          }

          // validate the optional field `AwayRushing` (array)
          for (int i = 0; i < jsonArrayawayRushing.size(); i++) {
            PlayerRushing.validateJsonElement(jsonArrayawayRushing.get(i));
          };
        }
      }
      // validate the optional field `Game`
      if (jsonObj.get("Game") != null && !jsonObj.get("Game").isJsonNull()) {
        Game.validateJsonElement(jsonObj.get("Game"));
      }
      if (jsonObj.get("HomeDefense") != null && !jsonObj.get("HomeDefense").isJsonNull()) {
        JsonArray jsonArrayhomeDefense = jsonObj.getAsJsonArray("HomeDefense");
        if (jsonArrayhomeDefense != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomeDefense").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomeDefense` to be an array in the JSON string but got `%s`", jsonObj.get("HomeDefense").toString()));
          }

          // validate the optional field `HomeDefense` (array)
          for (int i = 0; i < jsonArrayhomeDefense.size(); i++) {
            PlayerDefense.validateJsonElement(jsonArrayhomeDefense.get(i));
          };
        }
      }
      // validate the optional field `HomeFantasyDefense`
      if (jsonObj.get("HomeFantasyDefense") != null && !jsonObj.get("HomeFantasyDefense").isJsonNull()) {
        FantasyDefenseGame.validateJsonElement(jsonObj.get("HomeFantasyDefense"));
      }
      if (jsonObj.get("HomeKickPuntReturns") != null && !jsonObj.get("HomeKickPuntReturns").isJsonNull()) {
        JsonArray jsonArrayhomeKickPuntReturns = jsonObj.getAsJsonArray("HomeKickPuntReturns");
        if (jsonArrayhomeKickPuntReturns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomeKickPuntReturns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomeKickPuntReturns` to be an array in the JSON string but got `%s`", jsonObj.get("HomeKickPuntReturns").toString()));
          }

          // validate the optional field `HomeKickPuntReturns` (array)
          for (int i = 0; i < jsonArrayhomeKickPuntReturns.size(); i++) {
            PlayerKickPuntReturns.validateJsonElement(jsonArrayhomeKickPuntReturns.get(i));
          };
        }
      }
      if (jsonObj.get("HomeKicking") != null && !jsonObj.get("HomeKicking").isJsonNull()) {
        JsonArray jsonArrayhomeKicking = jsonObj.getAsJsonArray("HomeKicking");
        if (jsonArrayhomeKicking != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomeKicking").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomeKicking` to be an array in the JSON string but got `%s`", jsonObj.get("HomeKicking").toString()));
          }

          // validate the optional field `HomeKicking` (array)
          for (int i = 0; i < jsonArrayhomeKicking.size(); i++) {
            PlayerKicking.validateJsonElement(jsonArrayhomeKicking.get(i));
          };
        }
      }
      if (jsonObj.get("HomePassing") != null && !jsonObj.get("HomePassing").isJsonNull()) {
        JsonArray jsonArrayhomePassing = jsonObj.getAsJsonArray("HomePassing");
        if (jsonArrayhomePassing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomePassing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomePassing` to be an array in the JSON string but got `%s`", jsonObj.get("HomePassing").toString()));
          }

          // validate the optional field `HomePassing` (array)
          for (int i = 0; i < jsonArrayhomePassing.size(); i++) {
            PlayerPassing.validateJsonElement(jsonArrayhomePassing.get(i));
          };
        }
      }
      if (jsonObj.get("HomePunting") != null && !jsonObj.get("HomePunting").isJsonNull()) {
        JsonArray jsonArrayhomePunting = jsonObj.getAsJsonArray("HomePunting");
        if (jsonArrayhomePunting != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomePunting").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomePunting` to be an array in the JSON string but got `%s`", jsonObj.get("HomePunting").toString()));
          }

          // validate the optional field `HomePunting` (array)
          for (int i = 0; i < jsonArrayhomePunting.size(); i++) {
            PlayerPunting.validateJsonElement(jsonArrayhomePunting.get(i));
          };
        }
      }
      if (jsonObj.get("HomeReceiving") != null && !jsonObj.get("HomeReceiving").isJsonNull()) {
        JsonArray jsonArrayhomeReceiving = jsonObj.getAsJsonArray("HomeReceiving");
        if (jsonArrayhomeReceiving != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomeReceiving").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomeReceiving` to be an array in the JSON string but got `%s`", jsonObj.get("HomeReceiving").toString()));
          }

          // validate the optional field `HomeReceiving` (array)
          for (int i = 0; i < jsonArrayhomeReceiving.size(); i++) {
            PlayerReceiving.validateJsonElement(jsonArrayhomeReceiving.get(i));
          };
        }
      }
      if (jsonObj.get("HomeRushing") != null && !jsonObj.get("HomeRushing").isJsonNull()) {
        JsonArray jsonArrayhomeRushing = jsonObj.getAsJsonArray("HomeRushing");
        if (jsonArrayhomeRushing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomeRushing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomeRushing` to be an array in the JSON string but got `%s`", jsonObj.get("HomeRushing").toString()));
          }

          // validate the optional field `HomeRushing` (array)
          for (int i = 0; i < jsonArrayhomeRushing.size(); i++) {
            PlayerRushing.validateJsonElement(jsonArrayhomeRushing.get(i));
          };
        }
      }
      // validate the optional field `Score`
      if (jsonObj.get("Score") != null && !jsonObj.get("Score").isJsonNull()) {
        Score.validateJsonElement(jsonObj.get("Score"));
      }
      if (jsonObj.get("ScoringDetails") != null && !jsonObj.get("ScoringDetails").isJsonNull()) {
        JsonArray jsonArrayscoringDetails = jsonObj.getAsJsonArray("ScoringDetails");
        if (jsonArrayscoringDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ScoringDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ScoringDetails` to be an array in the JSON string but got `%s`", jsonObj.get("ScoringDetails").toString()));
          }

          // validate the optional field `ScoringDetails` (array)
          for (int i = 0; i < jsonArrayscoringDetails.size(); i++) {
            ScoringDetail.validateJsonElement(jsonArrayscoringDetails.get(i));
          };
        }
      }
      if (jsonObj.get("ScoringPlays") != null && !jsonObj.get("ScoringPlays").isJsonNull()) {
        JsonArray jsonArrayscoringPlays = jsonObj.getAsJsonArray("ScoringPlays");
        if (jsonArrayscoringPlays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ScoringPlays").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ScoringPlays` to be an array in the JSON string but got `%s`", jsonObj.get("ScoringPlays").toString()));
          }

          // validate the optional field `ScoringPlays` (array)
          for (int i = 0; i < jsonArrayscoringPlays.size(); i++) {
            ScoringPlay.validateJsonElement(jsonArrayscoringPlays.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxScore.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxScore>() {
           @Override
           public void write(JsonWriter out, BoxScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxScore
   * @throws IOException if the JSON string is invalid with respect to BoxScore
   */
  public static BoxScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxScore.class);
  }

  /**
   * Convert an instance of BoxScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

