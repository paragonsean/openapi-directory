/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Timeframe
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Timeframe {
  public static final String SERIALIZED_NAME_API_SEASON = "ApiSeason";
  @SerializedName(SERIALIZED_NAME_API_SEASON)
  private String apiSeason;

  public static final String SERIALIZED_NAME_API_WEEK = "ApiWeek";
  @SerializedName(SERIALIZED_NAME_API_WEEK)
  private String apiWeek;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_FIRST_GAME_END = "FirstGameEnd";
  @SerializedName(SERIALIZED_NAME_FIRST_GAME_END)
  private String firstGameEnd;

  public static final String SERIALIZED_NAME_FIRST_GAME_START = "FirstGameStart";
  @SerializedName(SERIALIZED_NAME_FIRST_GAME_START)
  private String firstGameStart;

  public static final String SERIALIZED_NAME_HAS_ENDED = "HasEnded";
  @SerializedName(SERIALIZED_NAME_HAS_ENDED)
  private Boolean hasEnded;

  public static final String SERIALIZED_NAME_HAS_FIRST_GAME_ENDED = "HasFirstGameEnded";
  @SerializedName(SERIALIZED_NAME_HAS_FIRST_GAME_ENDED)
  private Boolean hasFirstGameEnded;

  public static final String SERIALIZED_NAME_HAS_FIRST_GAME_STARTED = "HasFirstGameStarted";
  @SerializedName(SERIALIZED_NAME_HAS_FIRST_GAME_STARTED)
  private Boolean hasFirstGameStarted;

  public static final String SERIALIZED_NAME_HAS_GAMES = "HasGames";
  @SerializedName(SERIALIZED_NAME_HAS_GAMES)
  private Boolean hasGames;

  public static final String SERIALIZED_NAME_HAS_LAST_GAME_ENDED = "HasLastGameEnded";
  @SerializedName(SERIALIZED_NAME_HAS_LAST_GAME_ENDED)
  private Boolean hasLastGameEnded;

  public static final String SERIALIZED_NAME_HAS_STARTED = "HasStarted";
  @SerializedName(SERIALIZED_NAME_HAS_STARTED)
  private Boolean hasStarted;

  public static final String SERIALIZED_NAME_LAST_GAME_END = "LastGameEnd";
  @SerializedName(SERIALIZED_NAME_LAST_GAME_END)
  private String lastGameEnd;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_WEEK = "Week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public Timeframe() {
  }

  public Timeframe apiSeason(String apiSeason) {
    this.apiSeason = apiSeason;
    return this;
  }

  /**
   * Get apiSeason
   * @return apiSeason
   */
  @javax.annotation.Nullable
  public String getApiSeason() {
    return apiSeason;
  }

  public void setApiSeason(String apiSeason) {
    this.apiSeason = apiSeason;
  }


  public Timeframe apiWeek(String apiWeek) {
    this.apiWeek = apiWeek;
    return this;
  }

  /**
   * Get apiWeek
   * @return apiWeek
   */
  @javax.annotation.Nullable
  public String getApiWeek() {
    return apiWeek;
  }

  public void setApiWeek(String apiWeek) {
    this.apiWeek = apiWeek;
  }


  public Timeframe endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Timeframe firstGameEnd(String firstGameEnd) {
    this.firstGameEnd = firstGameEnd;
    return this;
  }

  /**
   * Get firstGameEnd
   * @return firstGameEnd
   */
  @javax.annotation.Nullable
  public String getFirstGameEnd() {
    return firstGameEnd;
  }

  public void setFirstGameEnd(String firstGameEnd) {
    this.firstGameEnd = firstGameEnd;
  }


  public Timeframe firstGameStart(String firstGameStart) {
    this.firstGameStart = firstGameStart;
    return this;
  }

  /**
   * Get firstGameStart
   * @return firstGameStart
   */
  @javax.annotation.Nullable
  public String getFirstGameStart() {
    return firstGameStart;
  }

  public void setFirstGameStart(String firstGameStart) {
    this.firstGameStart = firstGameStart;
  }


  public Timeframe hasEnded(Boolean hasEnded) {
    this.hasEnded = hasEnded;
    return this;
  }

  /**
   * Get hasEnded
   * @return hasEnded
   */
  @javax.annotation.Nullable
  public Boolean getHasEnded() {
    return hasEnded;
  }

  public void setHasEnded(Boolean hasEnded) {
    this.hasEnded = hasEnded;
  }


  public Timeframe hasFirstGameEnded(Boolean hasFirstGameEnded) {
    this.hasFirstGameEnded = hasFirstGameEnded;
    return this;
  }

  /**
   * Get hasFirstGameEnded
   * @return hasFirstGameEnded
   */
  @javax.annotation.Nullable
  public Boolean getHasFirstGameEnded() {
    return hasFirstGameEnded;
  }

  public void setHasFirstGameEnded(Boolean hasFirstGameEnded) {
    this.hasFirstGameEnded = hasFirstGameEnded;
  }


  public Timeframe hasFirstGameStarted(Boolean hasFirstGameStarted) {
    this.hasFirstGameStarted = hasFirstGameStarted;
    return this;
  }

  /**
   * Get hasFirstGameStarted
   * @return hasFirstGameStarted
   */
  @javax.annotation.Nullable
  public Boolean getHasFirstGameStarted() {
    return hasFirstGameStarted;
  }

  public void setHasFirstGameStarted(Boolean hasFirstGameStarted) {
    this.hasFirstGameStarted = hasFirstGameStarted;
  }


  public Timeframe hasGames(Boolean hasGames) {
    this.hasGames = hasGames;
    return this;
  }

  /**
   * Get hasGames
   * @return hasGames
   */
  @javax.annotation.Nullable
  public Boolean getHasGames() {
    return hasGames;
  }

  public void setHasGames(Boolean hasGames) {
    this.hasGames = hasGames;
  }


  public Timeframe hasLastGameEnded(Boolean hasLastGameEnded) {
    this.hasLastGameEnded = hasLastGameEnded;
    return this;
  }

  /**
   * Get hasLastGameEnded
   * @return hasLastGameEnded
   */
  @javax.annotation.Nullable
  public Boolean getHasLastGameEnded() {
    return hasLastGameEnded;
  }

  public void setHasLastGameEnded(Boolean hasLastGameEnded) {
    this.hasLastGameEnded = hasLastGameEnded;
  }


  public Timeframe hasStarted(Boolean hasStarted) {
    this.hasStarted = hasStarted;
    return this;
  }

  /**
   * Get hasStarted
   * @return hasStarted
   */
  @javax.annotation.Nullable
  public Boolean getHasStarted() {
    return hasStarted;
  }

  public void setHasStarted(Boolean hasStarted) {
    this.hasStarted = hasStarted;
  }


  public Timeframe lastGameEnd(String lastGameEnd) {
    this.lastGameEnd = lastGameEnd;
    return this;
  }

  /**
   * Get lastGameEnd
   * @return lastGameEnd
   */
  @javax.annotation.Nullable
  public String getLastGameEnd() {
    return lastGameEnd;
  }

  public void setLastGameEnd(String lastGameEnd) {
    this.lastGameEnd = lastGameEnd;
  }


  public Timeframe name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Timeframe season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Timeframe seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Timeframe shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public Timeframe startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Timeframe week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timeframe timeframe = (Timeframe) o;
    return Objects.equals(this.apiSeason, timeframe.apiSeason) &&
        Objects.equals(this.apiWeek, timeframe.apiWeek) &&
        Objects.equals(this.endDate, timeframe.endDate) &&
        Objects.equals(this.firstGameEnd, timeframe.firstGameEnd) &&
        Objects.equals(this.firstGameStart, timeframe.firstGameStart) &&
        Objects.equals(this.hasEnded, timeframe.hasEnded) &&
        Objects.equals(this.hasFirstGameEnded, timeframe.hasFirstGameEnded) &&
        Objects.equals(this.hasFirstGameStarted, timeframe.hasFirstGameStarted) &&
        Objects.equals(this.hasGames, timeframe.hasGames) &&
        Objects.equals(this.hasLastGameEnded, timeframe.hasLastGameEnded) &&
        Objects.equals(this.hasStarted, timeframe.hasStarted) &&
        Objects.equals(this.lastGameEnd, timeframe.lastGameEnd) &&
        Objects.equals(this.name, timeframe.name) &&
        Objects.equals(this.season, timeframe.season) &&
        Objects.equals(this.seasonType, timeframe.seasonType) &&
        Objects.equals(this.shortName, timeframe.shortName) &&
        Objects.equals(this.startDate, timeframe.startDate) &&
        Objects.equals(this.week, timeframe.week);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiSeason, apiWeek, endDate, firstGameEnd, firstGameStart, hasEnded, hasFirstGameEnded, hasFirstGameStarted, hasGames, hasLastGameEnded, hasStarted, lastGameEnd, name, season, seasonType, shortName, startDate, week);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timeframe {\n");
    sb.append("    apiSeason: ").append(toIndentedString(apiSeason)).append("\n");
    sb.append("    apiWeek: ").append(toIndentedString(apiWeek)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    firstGameEnd: ").append(toIndentedString(firstGameEnd)).append("\n");
    sb.append("    firstGameStart: ").append(toIndentedString(firstGameStart)).append("\n");
    sb.append("    hasEnded: ").append(toIndentedString(hasEnded)).append("\n");
    sb.append("    hasFirstGameEnded: ").append(toIndentedString(hasFirstGameEnded)).append("\n");
    sb.append("    hasFirstGameStarted: ").append(toIndentedString(hasFirstGameStarted)).append("\n");
    sb.append("    hasGames: ").append(toIndentedString(hasGames)).append("\n");
    sb.append("    hasLastGameEnded: ").append(toIndentedString(hasLastGameEnded)).append("\n");
    sb.append("    hasStarted: ").append(toIndentedString(hasStarted)).append("\n");
    sb.append("    lastGameEnd: ").append(toIndentedString(lastGameEnd)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiSeason");
    openapiFields.add("ApiWeek");
    openapiFields.add("EndDate");
    openapiFields.add("FirstGameEnd");
    openapiFields.add("FirstGameStart");
    openapiFields.add("HasEnded");
    openapiFields.add("HasFirstGameEnded");
    openapiFields.add("HasFirstGameStarted");
    openapiFields.add("HasGames");
    openapiFields.add("HasLastGameEnded");
    openapiFields.add("HasStarted");
    openapiFields.add("LastGameEnd");
    openapiFields.add("Name");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("ShortName");
    openapiFields.add("StartDate");
    openapiFields.add("Week");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Timeframe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Timeframe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Timeframe is not found in the empty JSON string", Timeframe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Timeframe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Timeframe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ApiSeason") != null && !jsonObj.get("ApiSeason").isJsonNull()) && !jsonObj.get("ApiSeason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApiSeason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApiSeason").toString()));
      }
      if ((jsonObj.get("ApiWeek") != null && !jsonObj.get("ApiWeek").isJsonNull()) && !jsonObj.get("ApiWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApiWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApiWeek").toString()));
      }
      if ((jsonObj.get("EndDate") != null && !jsonObj.get("EndDate").isJsonNull()) && !jsonObj.get("EndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndDate").toString()));
      }
      if ((jsonObj.get("FirstGameEnd") != null && !jsonObj.get("FirstGameEnd").isJsonNull()) && !jsonObj.get("FirstGameEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstGameEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstGameEnd").toString()));
      }
      if ((jsonObj.get("FirstGameStart") != null && !jsonObj.get("FirstGameStart").isJsonNull()) && !jsonObj.get("FirstGameStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstGameStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstGameStart").toString()));
      }
      if ((jsonObj.get("LastGameEnd") != null && !jsonObj.get("LastGameEnd").isJsonNull()) && !jsonObj.get("LastGameEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastGameEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastGameEnd").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("StartDate") != null && !jsonObj.get("StartDate").isJsonNull()) && !jsonObj.get("StartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Timeframe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Timeframe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Timeframe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Timeframe.class));

       return (TypeAdapter<T>) new TypeAdapter<Timeframe>() {
           @Override
           public void write(JsonWriter out, Timeframe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Timeframe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Timeframe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Timeframe
   * @throws IOException if the JSON string is invalid with respect to Timeframe
   */
  public static Timeframe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Timeframe.class);
  }

  /**
   * Convert an instance of Timeframe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

