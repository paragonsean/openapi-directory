/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScoringDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoringDetail {
  public static final String SERIALIZED_NAME_GAME_KEY = "GameKey";
  @SerializedName(SERIALIZED_NAME_GAME_KEY)
  private String gameKey;

  public static final String SERIALIZED_NAME_LENGTH = "Length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_PLAYER_GAME_I_D = "PlayerGameID";
  @SerializedName(SERIALIZED_NAME_PLAYER_GAME_I_D)
  private Integer playerGameID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_SCORE_I_D = "ScoreID";
  @SerializedName(SERIALIZED_NAME_SCORE_I_D)
  private Integer scoreID;

  public static final String SERIALIZED_NAME_SCORING_DETAIL_I_D = "ScoringDetailID";
  @SerializedName(SERIALIZED_NAME_SCORING_DETAIL_I_D)
  private Integer scoringDetailID;

  public static final String SERIALIZED_NAME_SCORING_PLAY_I_D = "ScoringPlayID";
  @SerializedName(SERIALIZED_NAME_SCORING_PLAY_I_D)
  private Integer scoringPlayID;

  public static final String SERIALIZED_NAME_SCORING_TYPE = "ScoringType";
  @SerializedName(SERIALIZED_NAME_SCORING_TYPE)
  private String scoringType;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_WEEK = "Week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public ScoringDetail() {
  }

  public ScoringDetail gameKey(String gameKey) {
    this.gameKey = gameKey;
    return this;
  }

  /**
   * Get gameKey
   * @return gameKey
   */
  @javax.annotation.Nullable
  public String getGameKey() {
    return gameKey;
  }

  public void setGameKey(String gameKey) {
    this.gameKey = gameKey;
  }


  public ScoringDetail length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public ScoringDetail playerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
    return this;
  }

  /**
   * Get playerGameID
   * @return playerGameID
   */
  @javax.annotation.Nullable
  public Integer getPlayerGameID() {
    return playerGameID;
  }

  public void setPlayerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
  }


  public ScoringDetail playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public ScoringDetail scoreID(Integer scoreID) {
    this.scoreID = scoreID;
    return this;
  }

  /**
   * Get scoreID
   * @return scoreID
   */
  @javax.annotation.Nullable
  public Integer getScoreID() {
    return scoreID;
  }

  public void setScoreID(Integer scoreID) {
    this.scoreID = scoreID;
  }


  public ScoringDetail scoringDetailID(Integer scoringDetailID) {
    this.scoringDetailID = scoringDetailID;
    return this;
  }

  /**
   * Get scoringDetailID
   * @return scoringDetailID
   */
  @javax.annotation.Nullable
  public Integer getScoringDetailID() {
    return scoringDetailID;
  }

  public void setScoringDetailID(Integer scoringDetailID) {
    this.scoringDetailID = scoringDetailID;
  }


  public ScoringDetail scoringPlayID(Integer scoringPlayID) {
    this.scoringPlayID = scoringPlayID;
    return this;
  }

  /**
   * Get scoringPlayID
   * @return scoringPlayID
   */
  @javax.annotation.Nullable
  public Integer getScoringPlayID() {
    return scoringPlayID;
  }

  public void setScoringPlayID(Integer scoringPlayID) {
    this.scoringPlayID = scoringPlayID;
  }


  public ScoringDetail scoringType(String scoringType) {
    this.scoringType = scoringType;
    return this;
  }

  /**
   * Get scoringType
   * @return scoringType
   */
  @javax.annotation.Nullable
  public String getScoringType() {
    return scoringType;
  }

  public void setScoringType(String scoringType) {
    this.scoringType = scoringType;
  }


  public ScoringDetail season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public ScoringDetail seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public ScoringDetail team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public ScoringDetail week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoringDetail scoringDetail = (ScoringDetail) o;
    return Objects.equals(this.gameKey, scoringDetail.gameKey) &&
        Objects.equals(this.length, scoringDetail.length) &&
        Objects.equals(this.playerGameID, scoringDetail.playerGameID) &&
        Objects.equals(this.playerID, scoringDetail.playerID) &&
        Objects.equals(this.scoreID, scoringDetail.scoreID) &&
        Objects.equals(this.scoringDetailID, scoringDetail.scoringDetailID) &&
        Objects.equals(this.scoringPlayID, scoringDetail.scoringPlayID) &&
        Objects.equals(this.scoringType, scoringDetail.scoringType) &&
        Objects.equals(this.season, scoringDetail.season) &&
        Objects.equals(this.seasonType, scoringDetail.seasonType) &&
        Objects.equals(this.team, scoringDetail.team) &&
        Objects.equals(this.week, scoringDetail.week);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameKey, length, playerGameID, playerID, scoreID, scoringDetailID, scoringPlayID, scoringType, season, seasonType, team, week);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoringDetail {\n");
    sb.append("    gameKey: ").append(toIndentedString(gameKey)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    playerGameID: ").append(toIndentedString(playerGameID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    scoreID: ").append(toIndentedString(scoreID)).append("\n");
    sb.append("    scoringDetailID: ").append(toIndentedString(scoringDetailID)).append("\n");
    sb.append("    scoringPlayID: ").append(toIndentedString(scoringPlayID)).append("\n");
    sb.append("    scoringType: ").append(toIndentedString(scoringType)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GameKey");
    openapiFields.add("Length");
    openapiFields.add("PlayerGameID");
    openapiFields.add("PlayerID");
    openapiFields.add("ScoreID");
    openapiFields.add("ScoringDetailID");
    openapiFields.add("ScoringPlayID");
    openapiFields.add("ScoringType");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Team");
    openapiFields.add("Week");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoringDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoringDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoringDetail is not found in the empty JSON string", ScoringDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoringDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoringDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("GameKey") != null && !jsonObj.get("GameKey").isJsonNull()) && !jsonObj.get("GameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GameKey").toString()));
      }
      if ((jsonObj.get("ScoringType") != null && !jsonObj.get("ScoringType").isJsonNull()) && !jsonObj.get("ScoringType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScoringType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScoringType").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoringDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoringDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoringDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoringDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoringDetail>() {
           @Override
           public void write(JsonWriter out, ScoringDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoringDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoringDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoringDetail
   * @throws IOException if the JSON string is invalid with respect to ScoringDetail
   */
  public static ScoringDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoringDetail.class);
  }

  /**
   * Convert an instance of ScoringDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

