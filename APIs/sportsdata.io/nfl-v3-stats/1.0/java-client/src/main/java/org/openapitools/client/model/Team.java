/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Stadium;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Team
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Team {
  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION = "AverageDraftPosition";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION)
  private BigDecimal averageDraftPosition;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION2_Q_B = "AverageDraftPosition2QB";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION2_Q_B)
  private BigDecimal averageDraftPosition2QB;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_DYNASTY = "AverageDraftPositionDynasty";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_DYNASTY)
  private BigDecimal averageDraftPositionDynasty;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_P_P_R = "AverageDraftPositionPPR";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_P_P_R)
  private BigDecimal averageDraftPositionPPR;

  public static final String SERIALIZED_NAME_BYE_WEEK = "ByeWeek";
  @SerializedName(SERIALIZED_NAME_BYE_WEEK)
  private Integer byeWeek;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONFERENCE = "Conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_DEFENSIVE_COORDINATOR = "DefensiveCoordinator";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_COORDINATOR)
  private String defensiveCoordinator;

  public static final String SERIALIZED_NAME_DEFENSIVE_SCHEME = "DefensiveScheme";
  @SerializedName(SERIALIZED_NAME_DEFENSIVE_SCHEME)
  private String defensiveScheme;

  public static final String SERIALIZED_NAME_DIVISION = "Division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private String division;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_NAME = "DraftKingsName";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_NAME)
  private String draftKingsName;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D = "DraftKingsPlayerID";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D)
  private Integer draftKingsPlayerID;

  public static final String SERIALIZED_NAME_FAN_DUEL_NAME = "FanDuelName";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_NAME)
  private String fanDuelName;

  public static final String SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D = "FanDuelPlayerID";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D)
  private Integer fanDuelPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_NAME = "FantasyDraftName";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_NAME)
  private String fantasyDraftName;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D = "FantasyDraftPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D)
  private Integer fantasyDraftPlayerID;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_HEAD_COACH = "HeadCoach";
  @SerializedName(SERIALIZED_NAME_HEAD_COACH)
  private String headCoach;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFENSIVE_COORDINATOR = "OffensiveCoordinator";
  @SerializedName(SERIALIZED_NAME_OFFENSIVE_COORDINATOR)
  private String offensiveCoordinator;

  public static final String SERIALIZED_NAME_OFFENSIVE_SCHEME = "OffensiveScheme";
  @SerializedName(SERIALIZED_NAME_OFFENSIVE_SCHEME)
  private String offensiveScheme;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR = "PrimaryColor";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR)
  private String primaryColor;

  public static final String SERIALIZED_NAME_QUATERNARY_COLOR = "QuaternaryColor";
  @SerializedName(SERIALIZED_NAME_QUATERNARY_COLOR)
  private String quaternaryColor;

  public static final String SERIALIZED_NAME_SECONDARY_COLOR = "SecondaryColor";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COLOR)
  private String secondaryColor;

  public static final String SERIALIZED_NAME_SPECIAL_TEAMS_COACH = "SpecialTeamsCoach";
  @SerializedName(SERIALIZED_NAME_SPECIAL_TEAMS_COACH)
  private String specialTeamsCoach;

  public static final String SERIALIZED_NAME_STADIUM_DETAILS = "StadiumDetails";
  @SerializedName(SERIALIZED_NAME_STADIUM_DETAILS)
  private Stadium stadiumDetails;

  public static final String SERIALIZED_NAME_STADIUM_I_D = "StadiumID";
  @SerializedName(SERIALIZED_NAME_STADIUM_I_D)
  private Integer stadiumID;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_TERTIARY_COLOR = "TertiaryColor";
  @SerializedName(SERIALIZED_NAME_TERTIARY_COLOR)
  private String tertiaryColor;

  public static final String SERIALIZED_NAME_UPCOMING_DRAFT_KINGS_SALARY = "UpcomingDraftKingsSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_DRAFT_KINGS_SALARY)
  private Integer upcomingDraftKingsSalary;

  public static final String SERIALIZED_NAME_UPCOMING_FAN_DUEL_SALARY = "UpcomingFanDuelSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_FAN_DUEL_SALARY)
  private Integer upcomingFanDuelSalary;

  public static final String SERIALIZED_NAME_UPCOMING_OPPONENT = "UpcomingOpponent";
  @SerializedName(SERIALIZED_NAME_UPCOMING_OPPONENT)
  private String upcomingOpponent;

  public static final String SERIALIZED_NAME_UPCOMING_OPPONENT_POSITION_RANK = "UpcomingOpponentPositionRank";
  @SerializedName(SERIALIZED_NAME_UPCOMING_OPPONENT_POSITION_RANK)
  private Integer upcomingOpponentPositionRank;

  public static final String SERIALIZED_NAME_UPCOMING_OPPONENT_RANK = "UpcomingOpponentRank";
  @SerializedName(SERIALIZED_NAME_UPCOMING_OPPONENT_RANK)
  private Integer upcomingOpponentRank;

  public static final String SERIALIZED_NAME_UPCOMING_SALARY = "UpcomingSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_SALARY)
  private Integer upcomingSalary;

  public static final String SERIALIZED_NAME_UPCOMING_YAHOO_SALARY = "UpcomingYahooSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_YAHOO_SALARY)
  private Integer upcomingYahooSalary;

  public static final String SERIALIZED_NAME_WIKIPEDIA_LOGO_URL = "WikipediaLogoUrl";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA_LOGO_URL)
  private String wikipediaLogoUrl;

  public static final String SERIALIZED_NAME_WIKIPEDIA_WORD_MARK_URL = "WikipediaWordMarkUrl";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA_WORD_MARK_URL)
  private String wikipediaWordMarkUrl;

  public static final String SERIALIZED_NAME_YAHOO_NAME = "YahooName";
  @SerializedName(SERIALIZED_NAME_YAHOO_NAME)
  private String yahooName;

  public static final String SERIALIZED_NAME_YAHOO_PLAYER_I_D = "YahooPlayerID";
  @SerializedName(SERIALIZED_NAME_YAHOO_PLAYER_I_D)
  private Integer yahooPlayerID;

  public Team() {
  }

  public Team averageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
    return this;
  }

  /**
   * Get averageDraftPosition
   * @return averageDraftPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPosition() {
    return averageDraftPosition;
  }

  public void setAverageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
  }


  public Team averageDraftPosition2QB(BigDecimal averageDraftPosition2QB) {
    this.averageDraftPosition2QB = averageDraftPosition2QB;
    return this;
  }

  /**
   * Get averageDraftPosition2QB
   * @return averageDraftPosition2QB
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPosition2QB() {
    return averageDraftPosition2QB;
  }

  public void setAverageDraftPosition2QB(BigDecimal averageDraftPosition2QB) {
    this.averageDraftPosition2QB = averageDraftPosition2QB;
  }


  public Team averageDraftPositionDynasty(BigDecimal averageDraftPositionDynasty) {
    this.averageDraftPositionDynasty = averageDraftPositionDynasty;
    return this;
  }

  /**
   * Get averageDraftPositionDynasty
   * @return averageDraftPositionDynasty
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPositionDynasty() {
    return averageDraftPositionDynasty;
  }

  public void setAverageDraftPositionDynasty(BigDecimal averageDraftPositionDynasty) {
    this.averageDraftPositionDynasty = averageDraftPositionDynasty;
  }


  public Team averageDraftPositionPPR(BigDecimal averageDraftPositionPPR) {
    this.averageDraftPositionPPR = averageDraftPositionPPR;
    return this;
  }

  /**
   * Get averageDraftPositionPPR
   * @return averageDraftPositionPPR
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPositionPPR() {
    return averageDraftPositionPPR;
  }

  public void setAverageDraftPositionPPR(BigDecimal averageDraftPositionPPR) {
    this.averageDraftPositionPPR = averageDraftPositionPPR;
  }


  public Team byeWeek(Integer byeWeek) {
    this.byeWeek = byeWeek;
    return this;
  }

  /**
   * Get byeWeek
   * @return byeWeek
   */
  @javax.annotation.Nullable
  public Integer getByeWeek() {
    return byeWeek;
  }

  public void setByeWeek(Integer byeWeek) {
    this.byeWeek = byeWeek;
  }


  public Team city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Team conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public Team defensiveCoordinator(String defensiveCoordinator) {
    this.defensiveCoordinator = defensiveCoordinator;
    return this;
  }

  /**
   * Get defensiveCoordinator
   * @return defensiveCoordinator
   */
  @javax.annotation.Nullable
  public String getDefensiveCoordinator() {
    return defensiveCoordinator;
  }

  public void setDefensiveCoordinator(String defensiveCoordinator) {
    this.defensiveCoordinator = defensiveCoordinator;
  }


  public Team defensiveScheme(String defensiveScheme) {
    this.defensiveScheme = defensiveScheme;
    return this;
  }

  /**
   * Get defensiveScheme
   * @return defensiveScheme
   */
  @javax.annotation.Nullable
  public String getDefensiveScheme() {
    return defensiveScheme;
  }

  public void setDefensiveScheme(String defensiveScheme) {
    this.defensiveScheme = defensiveScheme;
  }


  public Team division(String division) {
    this.division = division;
    return this;
  }

  /**
   * Get division
   * @return division
   */
  @javax.annotation.Nullable
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }


  public Team draftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
    return this;
  }

  /**
   * Get draftKingsName
   * @return draftKingsName
   */
  @javax.annotation.Nullable
  public String getDraftKingsName() {
    return draftKingsName;
  }

  public void setDraftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
  }


  public Team draftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
    return this;
  }

  /**
   * Get draftKingsPlayerID
   * @return draftKingsPlayerID
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsPlayerID() {
    return draftKingsPlayerID;
  }

  public void setDraftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
  }


  public Team fanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
    return this;
  }

  /**
   * Get fanDuelName
   * @return fanDuelName
   */
  @javax.annotation.Nullable
  public String getFanDuelName() {
    return fanDuelName;
  }

  public void setFanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
  }


  public Team fanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
    return this;
  }

  /**
   * Get fanDuelPlayerID
   * @return fanDuelPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFanDuelPlayerID() {
    return fanDuelPlayerID;
  }

  public void setFanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
  }


  public Team fantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
    return this;
  }

  /**
   * Get fantasyDraftName
   * @return fantasyDraftName
   */
  @javax.annotation.Nullable
  public String getFantasyDraftName() {
    return fantasyDraftName;
  }

  public void setFantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
  }


  public Team fantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
    return this;
  }

  /**
   * Get fantasyDraftPlayerID
   * @return fantasyDraftPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyDraftPlayerID() {
    return fantasyDraftPlayerID;
  }

  public void setFantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
  }


  public Team fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public Team globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public Team headCoach(String headCoach) {
    this.headCoach = headCoach;
    return this;
  }

  /**
   * Get headCoach
   * @return headCoach
   */
  @javax.annotation.Nullable
  public String getHeadCoach() {
    return headCoach;
  }

  public void setHeadCoach(String headCoach) {
    this.headCoach = headCoach;
  }


  public Team key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Team name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Team offensiveCoordinator(String offensiveCoordinator) {
    this.offensiveCoordinator = offensiveCoordinator;
    return this;
  }

  /**
   * Get offensiveCoordinator
   * @return offensiveCoordinator
   */
  @javax.annotation.Nullable
  public String getOffensiveCoordinator() {
    return offensiveCoordinator;
  }

  public void setOffensiveCoordinator(String offensiveCoordinator) {
    this.offensiveCoordinator = offensiveCoordinator;
  }


  public Team offensiveScheme(String offensiveScheme) {
    this.offensiveScheme = offensiveScheme;
    return this;
  }

  /**
   * Get offensiveScheme
   * @return offensiveScheme
   */
  @javax.annotation.Nullable
  public String getOffensiveScheme() {
    return offensiveScheme;
  }

  public void setOffensiveScheme(String offensiveScheme) {
    this.offensiveScheme = offensiveScheme;
  }


  public Team playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Team primaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
    return this;
  }

  /**
   * Get primaryColor
   * @return primaryColor
   */
  @javax.annotation.Nullable
  public String getPrimaryColor() {
    return primaryColor;
  }

  public void setPrimaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
  }


  public Team quaternaryColor(String quaternaryColor) {
    this.quaternaryColor = quaternaryColor;
    return this;
  }

  /**
   * Get quaternaryColor
   * @return quaternaryColor
   */
  @javax.annotation.Nullable
  public String getQuaternaryColor() {
    return quaternaryColor;
  }

  public void setQuaternaryColor(String quaternaryColor) {
    this.quaternaryColor = quaternaryColor;
  }


  public Team secondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
    return this;
  }

  /**
   * Get secondaryColor
   * @return secondaryColor
   */
  @javax.annotation.Nullable
  public String getSecondaryColor() {
    return secondaryColor;
  }

  public void setSecondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
  }


  public Team specialTeamsCoach(String specialTeamsCoach) {
    this.specialTeamsCoach = specialTeamsCoach;
    return this;
  }

  /**
   * Get specialTeamsCoach
   * @return specialTeamsCoach
   */
  @javax.annotation.Nullable
  public String getSpecialTeamsCoach() {
    return specialTeamsCoach;
  }

  public void setSpecialTeamsCoach(String specialTeamsCoach) {
    this.specialTeamsCoach = specialTeamsCoach;
  }


  public Team stadiumDetails(Stadium stadiumDetails) {
    this.stadiumDetails = stadiumDetails;
    return this;
  }

  /**
   * Get stadiumDetails
   * @return stadiumDetails
   */
  @javax.annotation.Nullable
  public Stadium getStadiumDetails() {
    return stadiumDetails;
  }

  public void setStadiumDetails(Stadium stadiumDetails) {
    this.stadiumDetails = stadiumDetails;
  }


  public Team stadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
    return this;
  }

  /**
   * Get stadiumID
   * @return stadiumID
   */
  @javax.annotation.Nullable
  public Integer getStadiumID() {
    return stadiumID;
  }

  public void setStadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
  }


  public Team teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Team tertiaryColor(String tertiaryColor) {
    this.tertiaryColor = tertiaryColor;
    return this;
  }

  /**
   * Get tertiaryColor
   * @return tertiaryColor
   */
  @javax.annotation.Nullable
  public String getTertiaryColor() {
    return tertiaryColor;
  }

  public void setTertiaryColor(String tertiaryColor) {
    this.tertiaryColor = tertiaryColor;
  }


  public Team upcomingDraftKingsSalary(Integer upcomingDraftKingsSalary) {
    this.upcomingDraftKingsSalary = upcomingDraftKingsSalary;
    return this;
  }

  /**
   * Get upcomingDraftKingsSalary
   * @return upcomingDraftKingsSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingDraftKingsSalary() {
    return upcomingDraftKingsSalary;
  }

  public void setUpcomingDraftKingsSalary(Integer upcomingDraftKingsSalary) {
    this.upcomingDraftKingsSalary = upcomingDraftKingsSalary;
  }


  public Team upcomingFanDuelSalary(Integer upcomingFanDuelSalary) {
    this.upcomingFanDuelSalary = upcomingFanDuelSalary;
    return this;
  }

  /**
   * Get upcomingFanDuelSalary
   * @return upcomingFanDuelSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingFanDuelSalary() {
    return upcomingFanDuelSalary;
  }

  public void setUpcomingFanDuelSalary(Integer upcomingFanDuelSalary) {
    this.upcomingFanDuelSalary = upcomingFanDuelSalary;
  }


  public Team upcomingOpponent(String upcomingOpponent) {
    this.upcomingOpponent = upcomingOpponent;
    return this;
  }

  /**
   * Get upcomingOpponent
   * @return upcomingOpponent
   */
  @javax.annotation.Nullable
  public String getUpcomingOpponent() {
    return upcomingOpponent;
  }

  public void setUpcomingOpponent(String upcomingOpponent) {
    this.upcomingOpponent = upcomingOpponent;
  }


  public Team upcomingOpponentPositionRank(Integer upcomingOpponentPositionRank) {
    this.upcomingOpponentPositionRank = upcomingOpponentPositionRank;
    return this;
  }

  /**
   * Get upcomingOpponentPositionRank
   * @return upcomingOpponentPositionRank
   */
  @javax.annotation.Nullable
  public Integer getUpcomingOpponentPositionRank() {
    return upcomingOpponentPositionRank;
  }

  public void setUpcomingOpponentPositionRank(Integer upcomingOpponentPositionRank) {
    this.upcomingOpponentPositionRank = upcomingOpponentPositionRank;
  }


  public Team upcomingOpponentRank(Integer upcomingOpponentRank) {
    this.upcomingOpponentRank = upcomingOpponentRank;
    return this;
  }

  /**
   * Get upcomingOpponentRank
   * @return upcomingOpponentRank
   */
  @javax.annotation.Nullable
  public Integer getUpcomingOpponentRank() {
    return upcomingOpponentRank;
  }

  public void setUpcomingOpponentRank(Integer upcomingOpponentRank) {
    this.upcomingOpponentRank = upcomingOpponentRank;
  }


  public Team upcomingSalary(Integer upcomingSalary) {
    this.upcomingSalary = upcomingSalary;
    return this;
  }

  /**
   * Get upcomingSalary
   * @return upcomingSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingSalary() {
    return upcomingSalary;
  }

  public void setUpcomingSalary(Integer upcomingSalary) {
    this.upcomingSalary = upcomingSalary;
  }


  public Team upcomingYahooSalary(Integer upcomingYahooSalary) {
    this.upcomingYahooSalary = upcomingYahooSalary;
    return this;
  }

  /**
   * Get upcomingYahooSalary
   * @return upcomingYahooSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingYahooSalary() {
    return upcomingYahooSalary;
  }

  public void setUpcomingYahooSalary(Integer upcomingYahooSalary) {
    this.upcomingYahooSalary = upcomingYahooSalary;
  }


  public Team wikipediaLogoUrl(String wikipediaLogoUrl) {
    this.wikipediaLogoUrl = wikipediaLogoUrl;
    return this;
  }

  /**
   * Get wikipediaLogoUrl
   * @return wikipediaLogoUrl
   */
  @javax.annotation.Nullable
  public String getWikipediaLogoUrl() {
    return wikipediaLogoUrl;
  }

  public void setWikipediaLogoUrl(String wikipediaLogoUrl) {
    this.wikipediaLogoUrl = wikipediaLogoUrl;
  }


  public Team wikipediaWordMarkUrl(String wikipediaWordMarkUrl) {
    this.wikipediaWordMarkUrl = wikipediaWordMarkUrl;
    return this;
  }

  /**
   * Get wikipediaWordMarkUrl
   * @return wikipediaWordMarkUrl
   */
  @javax.annotation.Nullable
  public String getWikipediaWordMarkUrl() {
    return wikipediaWordMarkUrl;
  }

  public void setWikipediaWordMarkUrl(String wikipediaWordMarkUrl) {
    this.wikipediaWordMarkUrl = wikipediaWordMarkUrl;
  }


  public Team yahooName(String yahooName) {
    this.yahooName = yahooName;
    return this;
  }

  /**
   * Get yahooName
   * @return yahooName
   */
  @javax.annotation.Nullable
  public String getYahooName() {
    return yahooName;
  }

  public void setYahooName(String yahooName) {
    this.yahooName = yahooName;
  }


  public Team yahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
    return this;
  }

  /**
   * Get yahooPlayerID
   * @return yahooPlayerID
   */
  @javax.annotation.Nullable
  public Integer getYahooPlayerID() {
    return yahooPlayerID;
  }

  public void setYahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.averageDraftPosition, team.averageDraftPosition) &&
        Objects.equals(this.averageDraftPosition2QB, team.averageDraftPosition2QB) &&
        Objects.equals(this.averageDraftPositionDynasty, team.averageDraftPositionDynasty) &&
        Objects.equals(this.averageDraftPositionPPR, team.averageDraftPositionPPR) &&
        Objects.equals(this.byeWeek, team.byeWeek) &&
        Objects.equals(this.city, team.city) &&
        Objects.equals(this.conference, team.conference) &&
        Objects.equals(this.defensiveCoordinator, team.defensiveCoordinator) &&
        Objects.equals(this.defensiveScheme, team.defensiveScheme) &&
        Objects.equals(this.division, team.division) &&
        Objects.equals(this.draftKingsName, team.draftKingsName) &&
        Objects.equals(this.draftKingsPlayerID, team.draftKingsPlayerID) &&
        Objects.equals(this.fanDuelName, team.fanDuelName) &&
        Objects.equals(this.fanDuelPlayerID, team.fanDuelPlayerID) &&
        Objects.equals(this.fantasyDraftName, team.fantasyDraftName) &&
        Objects.equals(this.fantasyDraftPlayerID, team.fantasyDraftPlayerID) &&
        Objects.equals(this.fullName, team.fullName) &&
        Objects.equals(this.globalTeamID, team.globalTeamID) &&
        Objects.equals(this.headCoach, team.headCoach) &&
        Objects.equals(this.key, team.key) &&
        Objects.equals(this.name, team.name) &&
        Objects.equals(this.offensiveCoordinator, team.offensiveCoordinator) &&
        Objects.equals(this.offensiveScheme, team.offensiveScheme) &&
        Objects.equals(this.playerID, team.playerID) &&
        Objects.equals(this.primaryColor, team.primaryColor) &&
        Objects.equals(this.quaternaryColor, team.quaternaryColor) &&
        Objects.equals(this.secondaryColor, team.secondaryColor) &&
        Objects.equals(this.specialTeamsCoach, team.specialTeamsCoach) &&
        Objects.equals(this.stadiumDetails, team.stadiumDetails) &&
        Objects.equals(this.stadiumID, team.stadiumID) &&
        Objects.equals(this.teamID, team.teamID) &&
        Objects.equals(this.tertiaryColor, team.tertiaryColor) &&
        Objects.equals(this.upcomingDraftKingsSalary, team.upcomingDraftKingsSalary) &&
        Objects.equals(this.upcomingFanDuelSalary, team.upcomingFanDuelSalary) &&
        Objects.equals(this.upcomingOpponent, team.upcomingOpponent) &&
        Objects.equals(this.upcomingOpponentPositionRank, team.upcomingOpponentPositionRank) &&
        Objects.equals(this.upcomingOpponentRank, team.upcomingOpponentRank) &&
        Objects.equals(this.upcomingSalary, team.upcomingSalary) &&
        Objects.equals(this.upcomingYahooSalary, team.upcomingYahooSalary) &&
        Objects.equals(this.wikipediaLogoUrl, team.wikipediaLogoUrl) &&
        Objects.equals(this.wikipediaWordMarkUrl, team.wikipediaWordMarkUrl) &&
        Objects.equals(this.yahooName, team.yahooName) &&
        Objects.equals(this.yahooPlayerID, team.yahooPlayerID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageDraftPosition, averageDraftPosition2QB, averageDraftPositionDynasty, averageDraftPositionPPR, byeWeek, city, conference, defensiveCoordinator, defensiveScheme, division, draftKingsName, draftKingsPlayerID, fanDuelName, fanDuelPlayerID, fantasyDraftName, fantasyDraftPlayerID, fullName, globalTeamID, headCoach, key, name, offensiveCoordinator, offensiveScheme, playerID, primaryColor, quaternaryColor, secondaryColor, specialTeamsCoach, stadiumDetails, stadiumID, teamID, tertiaryColor, upcomingDraftKingsSalary, upcomingFanDuelSalary, upcomingOpponent, upcomingOpponentPositionRank, upcomingOpponentRank, upcomingSalary, upcomingYahooSalary, wikipediaLogoUrl, wikipediaWordMarkUrl, yahooName, yahooPlayerID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    averageDraftPosition: ").append(toIndentedString(averageDraftPosition)).append("\n");
    sb.append("    averageDraftPosition2QB: ").append(toIndentedString(averageDraftPosition2QB)).append("\n");
    sb.append("    averageDraftPositionDynasty: ").append(toIndentedString(averageDraftPositionDynasty)).append("\n");
    sb.append("    averageDraftPositionPPR: ").append(toIndentedString(averageDraftPositionPPR)).append("\n");
    sb.append("    byeWeek: ").append(toIndentedString(byeWeek)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    defensiveCoordinator: ").append(toIndentedString(defensiveCoordinator)).append("\n");
    sb.append("    defensiveScheme: ").append(toIndentedString(defensiveScheme)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    draftKingsName: ").append(toIndentedString(draftKingsName)).append("\n");
    sb.append("    draftKingsPlayerID: ").append(toIndentedString(draftKingsPlayerID)).append("\n");
    sb.append("    fanDuelName: ").append(toIndentedString(fanDuelName)).append("\n");
    sb.append("    fanDuelPlayerID: ").append(toIndentedString(fanDuelPlayerID)).append("\n");
    sb.append("    fantasyDraftName: ").append(toIndentedString(fantasyDraftName)).append("\n");
    sb.append("    fantasyDraftPlayerID: ").append(toIndentedString(fantasyDraftPlayerID)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    headCoach: ").append(toIndentedString(headCoach)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offensiveCoordinator: ").append(toIndentedString(offensiveCoordinator)).append("\n");
    sb.append("    offensiveScheme: ").append(toIndentedString(offensiveScheme)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    quaternaryColor: ").append(toIndentedString(quaternaryColor)).append("\n");
    sb.append("    secondaryColor: ").append(toIndentedString(secondaryColor)).append("\n");
    sb.append("    specialTeamsCoach: ").append(toIndentedString(specialTeamsCoach)).append("\n");
    sb.append("    stadiumDetails: ").append(toIndentedString(stadiumDetails)).append("\n");
    sb.append("    stadiumID: ").append(toIndentedString(stadiumID)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    tertiaryColor: ").append(toIndentedString(tertiaryColor)).append("\n");
    sb.append("    upcomingDraftKingsSalary: ").append(toIndentedString(upcomingDraftKingsSalary)).append("\n");
    sb.append("    upcomingFanDuelSalary: ").append(toIndentedString(upcomingFanDuelSalary)).append("\n");
    sb.append("    upcomingOpponent: ").append(toIndentedString(upcomingOpponent)).append("\n");
    sb.append("    upcomingOpponentPositionRank: ").append(toIndentedString(upcomingOpponentPositionRank)).append("\n");
    sb.append("    upcomingOpponentRank: ").append(toIndentedString(upcomingOpponentRank)).append("\n");
    sb.append("    upcomingSalary: ").append(toIndentedString(upcomingSalary)).append("\n");
    sb.append("    upcomingYahooSalary: ").append(toIndentedString(upcomingYahooSalary)).append("\n");
    sb.append("    wikipediaLogoUrl: ").append(toIndentedString(wikipediaLogoUrl)).append("\n");
    sb.append("    wikipediaWordMarkUrl: ").append(toIndentedString(wikipediaWordMarkUrl)).append("\n");
    sb.append("    yahooName: ").append(toIndentedString(yahooName)).append("\n");
    sb.append("    yahooPlayerID: ").append(toIndentedString(yahooPlayerID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AverageDraftPosition");
    openapiFields.add("AverageDraftPosition2QB");
    openapiFields.add("AverageDraftPositionDynasty");
    openapiFields.add("AverageDraftPositionPPR");
    openapiFields.add("ByeWeek");
    openapiFields.add("City");
    openapiFields.add("Conference");
    openapiFields.add("DefensiveCoordinator");
    openapiFields.add("DefensiveScheme");
    openapiFields.add("Division");
    openapiFields.add("DraftKingsName");
    openapiFields.add("DraftKingsPlayerID");
    openapiFields.add("FanDuelName");
    openapiFields.add("FanDuelPlayerID");
    openapiFields.add("FantasyDraftName");
    openapiFields.add("FantasyDraftPlayerID");
    openapiFields.add("FullName");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("HeadCoach");
    openapiFields.add("Key");
    openapiFields.add("Name");
    openapiFields.add("OffensiveCoordinator");
    openapiFields.add("OffensiveScheme");
    openapiFields.add("PlayerID");
    openapiFields.add("PrimaryColor");
    openapiFields.add("QuaternaryColor");
    openapiFields.add("SecondaryColor");
    openapiFields.add("SpecialTeamsCoach");
    openapiFields.add("StadiumDetails");
    openapiFields.add("StadiumID");
    openapiFields.add("TeamID");
    openapiFields.add("TertiaryColor");
    openapiFields.add("UpcomingDraftKingsSalary");
    openapiFields.add("UpcomingFanDuelSalary");
    openapiFields.add("UpcomingOpponent");
    openapiFields.add("UpcomingOpponentPositionRank");
    openapiFields.add("UpcomingOpponentRank");
    openapiFields.add("UpcomingSalary");
    openapiFields.add("UpcomingYahooSalary");
    openapiFields.add("WikipediaLogoUrl");
    openapiFields.add("WikipediaWordMarkUrl");
    openapiFields.add("YahooName");
    openapiFields.add("YahooPlayerID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Team
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Team.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Team is not found in the empty JSON string", Team.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Team.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Team` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("Conference") != null && !jsonObj.get("Conference").isJsonNull()) && !jsonObj.get("Conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Conference").toString()));
      }
      if ((jsonObj.get("DefensiveCoordinator") != null && !jsonObj.get("DefensiveCoordinator").isJsonNull()) && !jsonObj.get("DefensiveCoordinator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefensiveCoordinator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefensiveCoordinator").toString()));
      }
      if ((jsonObj.get("DefensiveScheme") != null && !jsonObj.get("DefensiveScheme").isJsonNull()) && !jsonObj.get("DefensiveScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefensiveScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefensiveScheme").toString()));
      }
      if ((jsonObj.get("Division") != null && !jsonObj.get("Division").isJsonNull()) && !jsonObj.get("Division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Division").toString()));
      }
      if ((jsonObj.get("DraftKingsName") != null && !jsonObj.get("DraftKingsName").isJsonNull()) && !jsonObj.get("DraftKingsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DraftKingsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DraftKingsName").toString()));
      }
      if ((jsonObj.get("FanDuelName") != null && !jsonObj.get("FanDuelName").isJsonNull()) && !jsonObj.get("FanDuelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FanDuelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FanDuelName").toString()));
      }
      if ((jsonObj.get("FantasyDraftName") != null && !jsonObj.get("FantasyDraftName").isJsonNull()) && !jsonObj.get("FantasyDraftName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyDraftName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyDraftName").toString()));
      }
      if ((jsonObj.get("FullName") != null && !jsonObj.get("FullName").isJsonNull()) && !jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if ((jsonObj.get("HeadCoach") != null && !jsonObj.get("HeadCoach").isJsonNull()) && !jsonObj.get("HeadCoach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HeadCoach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HeadCoach").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OffensiveCoordinator") != null && !jsonObj.get("OffensiveCoordinator").isJsonNull()) && !jsonObj.get("OffensiveCoordinator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OffensiveCoordinator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OffensiveCoordinator").toString()));
      }
      if ((jsonObj.get("OffensiveScheme") != null && !jsonObj.get("OffensiveScheme").isJsonNull()) && !jsonObj.get("OffensiveScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OffensiveScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OffensiveScheme").toString()));
      }
      if ((jsonObj.get("PrimaryColor") != null && !jsonObj.get("PrimaryColor").isJsonNull()) && !jsonObj.get("PrimaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimaryColor").toString()));
      }
      if ((jsonObj.get("QuaternaryColor") != null && !jsonObj.get("QuaternaryColor").isJsonNull()) && !jsonObj.get("QuaternaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuaternaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuaternaryColor").toString()));
      }
      if ((jsonObj.get("SecondaryColor") != null && !jsonObj.get("SecondaryColor").isJsonNull()) && !jsonObj.get("SecondaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecondaryColor").toString()));
      }
      if ((jsonObj.get("SpecialTeamsCoach") != null && !jsonObj.get("SpecialTeamsCoach").isJsonNull()) && !jsonObj.get("SpecialTeamsCoach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SpecialTeamsCoach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SpecialTeamsCoach").toString()));
      }
      // validate the optional field `StadiumDetails`
      if (jsonObj.get("StadiumDetails") != null && !jsonObj.get("StadiumDetails").isJsonNull()) {
        Stadium.validateJsonElement(jsonObj.get("StadiumDetails"));
      }
      if ((jsonObj.get("TertiaryColor") != null && !jsonObj.get("TertiaryColor").isJsonNull()) && !jsonObj.get("TertiaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TertiaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TertiaryColor").toString()));
      }
      if ((jsonObj.get("UpcomingOpponent") != null && !jsonObj.get("UpcomingOpponent").isJsonNull()) && !jsonObj.get("UpcomingOpponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpcomingOpponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpcomingOpponent").toString()));
      }
      if ((jsonObj.get("WikipediaLogoUrl") != null && !jsonObj.get("WikipediaLogoUrl").isJsonNull()) && !jsonObj.get("WikipediaLogoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WikipediaLogoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WikipediaLogoUrl").toString()));
      }
      if ((jsonObj.get("WikipediaWordMarkUrl") != null && !jsonObj.get("WikipediaWordMarkUrl").isJsonNull()) && !jsonObj.get("WikipediaWordMarkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WikipediaWordMarkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WikipediaWordMarkUrl").toString()));
      }
      if ((jsonObj.get("YahooName") != null && !jsonObj.get("YahooName").isJsonNull()) && !jsonObj.get("YahooName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YahooName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YahooName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Team.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Team' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Team> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Team.class));

       return (TypeAdapter<T>) new TypeAdapter<Team>() {
           @Override
           public void write(JsonWriter out, Team value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Team read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Team given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Team
   * @throws IOException if the JSON string is invalid with respect to Team
   */
  public static Team fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Team.class);
  }

  /**
   * Convert an instance of Team to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

