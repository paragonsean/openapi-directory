/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Injury
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Injury {
  public static final String SERIALIZED_NAME_BODY_PART = "BodyPart";
  @SerializedName(SERIALIZED_NAME_BODY_PART)
  private String bodyPart;

  public static final String SERIALIZED_NAME_DECLARED_INACTIVE = "DeclaredInactive";
  @SerializedName(SERIALIZED_NAME_DECLARED_INACTIVE)
  private Boolean declaredInactive;

  public static final String SERIALIZED_NAME_INJURY_I_D = "InjuryID";
  @SerializedName(SERIALIZED_NAME_INJURY_I_D)
  private Integer injuryID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_OPPONENT_I_D = "OpponentID";
  @SerializedName(SERIALIZED_NAME_OPPONENT_I_D)
  private Integer opponentID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_PRACTICE = "Practice";
  @SerializedName(SERIALIZED_NAME_PRACTICE)
  private String practice;

  public static final String SERIALIZED_NAME_PRACTICE_DESCRIPTION = "PracticeDescription";
  @SerializedName(SERIALIZED_NAME_PRACTICE_DESCRIPTION)
  private String practiceDescription;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_WEEK = "Week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public Injury() {
  }

  public Injury bodyPart(String bodyPart) {
    this.bodyPart = bodyPart;
    return this;
  }

  /**
   * Get bodyPart
   * @return bodyPart
   */
  @javax.annotation.Nullable
  public String getBodyPart() {
    return bodyPart;
  }

  public void setBodyPart(String bodyPart) {
    this.bodyPart = bodyPart;
  }


  public Injury declaredInactive(Boolean declaredInactive) {
    this.declaredInactive = declaredInactive;
    return this;
  }

  /**
   * Get declaredInactive
   * @return declaredInactive
   */
  @javax.annotation.Nullable
  public Boolean getDeclaredInactive() {
    return declaredInactive;
  }

  public void setDeclaredInactive(Boolean declaredInactive) {
    this.declaredInactive = declaredInactive;
  }


  public Injury injuryID(Integer injuryID) {
    this.injuryID = injuryID;
    return this;
  }

  /**
   * Get injuryID
   * @return injuryID
   */
  @javax.annotation.Nullable
  public Integer getInjuryID() {
    return injuryID;
  }

  public void setInjuryID(Integer injuryID) {
    this.injuryID = injuryID;
  }


  public Injury name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Injury number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public Injury opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public Injury opponentID(Integer opponentID) {
    this.opponentID = opponentID;
    return this;
  }

  /**
   * Get opponentID
   * @return opponentID
   */
  @javax.annotation.Nullable
  public Integer getOpponentID() {
    return opponentID;
  }

  public void setOpponentID(Integer opponentID) {
    this.opponentID = opponentID;
  }


  public Injury playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Injury position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public Injury practice(String practice) {
    this.practice = practice;
    return this;
  }

  /**
   * Get practice
   * @return practice
   */
  @javax.annotation.Nullable
  public String getPractice() {
    return practice;
  }

  public void setPractice(String practice) {
    this.practice = practice;
  }


  public Injury practiceDescription(String practiceDescription) {
    this.practiceDescription = practiceDescription;
    return this;
  }

  /**
   * Get practiceDescription
   * @return practiceDescription
   */
  @javax.annotation.Nullable
  public String getPracticeDescription() {
    return practiceDescription;
  }

  public void setPracticeDescription(String practiceDescription) {
    this.practiceDescription = practiceDescription;
  }


  public Injury season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Injury seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Injury status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Injury team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Injury teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Injury updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Injury week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Injury injury = (Injury) o;
    return Objects.equals(this.bodyPart, injury.bodyPart) &&
        Objects.equals(this.declaredInactive, injury.declaredInactive) &&
        Objects.equals(this.injuryID, injury.injuryID) &&
        Objects.equals(this.name, injury.name) &&
        Objects.equals(this.number, injury.number) &&
        Objects.equals(this.opponent, injury.opponent) &&
        Objects.equals(this.opponentID, injury.opponentID) &&
        Objects.equals(this.playerID, injury.playerID) &&
        Objects.equals(this.position, injury.position) &&
        Objects.equals(this.practice, injury.practice) &&
        Objects.equals(this.practiceDescription, injury.practiceDescription) &&
        Objects.equals(this.season, injury.season) &&
        Objects.equals(this.seasonType, injury.seasonType) &&
        Objects.equals(this.status, injury.status) &&
        Objects.equals(this.team, injury.team) &&
        Objects.equals(this.teamID, injury.teamID) &&
        Objects.equals(this.updated, injury.updated) &&
        Objects.equals(this.week, injury.week);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyPart, declaredInactive, injuryID, name, number, opponent, opponentID, playerID, position, practice, practiceDescription, season, seasonType, status, team, teamID, updated, week);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Injury {\n");
    sb.append("    bodyPart: ").append(toIndentedString(bodyPart)).append("\n");
    sb.append("    declaredInactive: ").append(toIndentedString(declaredInactive)).append("\n");
    sb.append("    injuryID: ").append(toIndentedString(injuryID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    opponentID: ").append(toIndentedString(opponentID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    practice: ").append(toIndentedString(practice)).append("\n");
    sb.append("    practiceDescription: ").append(toIndentedString(practiceDescription)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BodyPart");
    openapiFields.add("DeclaredInactive");
    openapiFields.add("InjuryID");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("Opponent");
    openapiFields.add("OpponentID");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("Practice");
    openapiFields.add("PracticeDescription");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Status");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("Updated");
    openapiFields.add("Week");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Injury
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Injury.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Injury is not found in the empty JSON string", Injury.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Injury.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Injury` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BodyPart") != null && !jsonObj.get("BodyPart").isJsonNull()) && !jsonObj.get("BodyPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BodyPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BodyPart").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("Practice") != null && !jsonObj.get("Practice").isJsonNull()) && !jsonObj.get("Practice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Practice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Practice").toString()));
      }
      if ((jsonObj.get("PracticeDescription") != null && !jsonObj.get("PracticeDescription").isJsonNull()) && !jsonObj.get("PracticeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PracticeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PracticeDescription").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Injury.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Injury' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Injury> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Injury.class));

       return (TypeAdapter<T>) new TypeAdapter<Injury>() {
           @Override
           public void write(JsonWriter out, Injury value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Injury read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Injury given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Injury
   * @throws IOException if the JSON string is invalid with respect to Injury
   */
  public static Injury fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Injury.class);
  }

  /**
   * Convert an instance of Injury to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

