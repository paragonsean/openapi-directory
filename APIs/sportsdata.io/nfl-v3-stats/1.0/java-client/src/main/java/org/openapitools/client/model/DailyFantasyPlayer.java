/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DailyFantasyPlayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyFantasyPlayer {
  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_SALARY = "DraftKingsSalary";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_SALARY)
  private Integer draftKingsSalary;

  public static final String SERIALIZED_NAME_FAN_DUEL_SALARY = "FanDuelSalary";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_SALARY)
  private Integer fanDuelSalary;

  public static final String SERIALIZED_NAME_FANTASY_DATA_SALARY = "FantasyDataSalary";
  @SerializedName(SERIALIZED_NAME_FANTASY_DATA_SALARY)
  private Integer fantasyDataSalary;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_SALARY = "FantasyDraftSalary";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_SALARY)
  private Integer fantasyDraftSalary;

  public static final String SERIALIZED_NAME_HOME_OR_AWAY = "HomeOrAway";
  @SerializedName(SERIALIZED_NAME_HOME_OR_AWAY)
  private String homeOrAway;

  public static final String SERIALIZED_NAME_LAST_GAME_FANTASY_POINTS = "LastGameFantasyPoints";
  @SerializedName(SERIALIZED_NAME_LAST_GAME_FANTASY_POINTS)
  private BigDecimal lastGameFantasyPoints;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_OPPONENT_POSITION_RANK = "OpponentPositionRank";
  @SerializedName(SERIALIZED_NAME_OPPONENT_POSITION_RANK)
  private Integer opponentPositionRank;

  public static final String SERIALIZED_NAME_OPPONENT_RANK = "OpponentRank";
  @SerializedName(SERIALIZED_NAME_OPPONENT_RANK)
  private Integer opponentRank;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_PROJECTED_FANTASY_POINTS = "ProjectedFantasyPoints";
  @SerializedName(SERIALIZED_NAME_PROJECTED_FANTASY_POINTS)
  private BigDecimal projectedFantasyPoints;

  public static final String SERIALIZED_NAME_SALARY = "Salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private Integer salary;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_CODE = "StatusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private String statusCode;

  public static final String SERIALIZED_NAME_STATUS_COLOR = "StatusColor";
  @SerializedName(SERIALIZED_NAME_STATUS_COLOR)
  private String statusColor;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_YAHOO_SALARY = "YahooSalary";
  @SerializedName(SERIALIZED_NAME_YAHOO_SALARY)
  private Integer yahooSalary;

  public DailyFantasyPlayer() {
  }

  public DailyFantasyPlayer date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public DailyFantasyPlayer draftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
    return this;
  }

  /**
   * Get draftKingsSalary
   * @return draftKingsSalary
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsSalary() {
    return draftKingsSalary;
  }

  public void setDraftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
  }


  public DailyFantasyPlayer fanDuelSalary(Integer fanDuelSalary) {
    this.fanDuelSalary = fanDuelSalary;
    return this;
  }

  /**
   * Get fanDuelSalary
   * @return fanDuelSalary
   */
  @javax.annotation.Nullable
  public Integer getFanDuelSalary() {
    return fanDuelSalary;
  }

  public void setFanDuelSalary(Integer fanDuelSalary) {
    this.fanDuelSalary = fanDuelSalary;
  }


  public DailyFantasyPlayer fantasyDataSalary(Integer fantasyDataSalary) {
    this.fantasyDataSalary = fantasyDataSalary;
    return this;
  }

  /**
   * Get fantasyDataSalary
   * @return fantasyDataSalary
   */
  @javax.annotation.Nullable
  public Integer getFantasyDataSalary() {
    return fantasyDataSalary;
  }

  public void setFantasyDataSalary(Integer fantasyDataSalary) {
    this.fantasyDataSalary = fantasyDataSalary;
  }


  public DailyFantasyPlayer fantasyDraftSalary(Integer fantasyDraftSalary) {
    this.fantasyDraftSalary = fantasyDraftSalary;
    return this;
  }

  /**
   * Get fantasyDraftSalary
   * @return fantasyDraftSalary
   */
  @javax.annotation.Nullable
  public Integer getFantasyDraftSalary() {
    return fantasyDraftSalary;
  }

  public void setFantasyDraftSalary(Integer fantasyDraftSalary) {
    this.fantasyDraftSalary = fantasyDraftSalary;
  }


  public DailyFantasyPlayer homeOrAway(String homeOrAway) {
    this.homeOrAway = homeOrAway;
    return this;
  }

  /**
   * Get homeOrAway
   * @return homeOrAway
   */
  @javax.annotation.Nullable
  public String getHomeOrAway() {
    return homeOrAway;
  }

  public void setHomeOrAway(String homeOrAway) {
    this.homeOrAway = homeOrAway;
  }


  public DailyFantasyPlayer lastGameFantasyPoints(BigDecimal lastGameFantasyPoints) {
    this.lastGameFantasyPoints = lastGameFantasyPoints;
    return this;
  }

  /**
   * Get lastGameFantasyPoints
   * @return lastGameFantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getLastGameFantasyPoints() {
    return lastGameFantasyPoints;
  }

  public void setLastGameFantasyPoints(BigDecimal lastGameFantasyPoints) {
    this.lastGameFantasyPoints = lastGameFantasyPoints;
  }


  public DailyFantasyPlayer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DailyFantasyPlayer opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public DailyFantasyPlayer opponentPositionRank(Integer opponentPositionRank) {
    this.opponentPositionRank = opponentPositionRank;
    return this;
  }

  /**
   * Get opponentPositionRank
   * @return opponentPositionRank
   */
  @javax.annotation.Nullable
  public Integer getOpponentPositionRank() {
    return opponentPositionRank;
  }

  public void setOpponentPositionRank(Integer opponentPositionRank) {
    this.opponentPositionRank = opponentPositionRank;
  }


  public DailyFantasyPlayer opponentRank(Integer opponentRank) {
    this.opponentRank = opponentRank;
    return this;
  }

  /**
   * Get opponentRank
   * @return opponentRank
   */
  @javax.annotation.Nullable
  public Integer getOpponentRank() {
    return opponentRank;
  }

  public void setOpponentRank(Integer opponentRank) {
    this.opponentRank = opponentRank;
  }


  public DailyFantasyPlayer playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public DailyFantasyPlayer position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public DailyFantasyPlayer projectedFantasyPoints(BigDecimal projectedFantasyPoints) {
    this.projectedFantasyPoints = projectedFantasyPoints;
    return this;
  }

  /**
   * Get projectedFantasyPoints
   * @return projectedFantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getProjectedFantasyPoints() {
    return projectedFantasyPoints;
  }

  public void setProjectedFantasyPoints(BigDecimal projectedFantasyPoints) {
    this.projectedFantasyPoints = projectedFantasyPoints;
  }


  public DailyFantasyPlayer salary(Integer salary) {
    this.salary = salary;
    return this;
  }

  /**
   * Get salary
   * @return salary
   */
  @javax.annotation.Nullable
  public Integer getSalary() {
    return salary;
  }

  public void setSalary(Integer salary) {
    this.salary = salary;
  }


  public DailyFantasyPlayer shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public DailyFantasyPlayer status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DailyFantasyPlayer statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }


  public DailyFantasyPlayer statusColor(String statusColor) {
    this.statusColor = statusColor;
    return this;
  }

  /**
   * Get statusColor
   * @return statusColor
   */
  @javax.annotation.Nullable
  public String getStatusColor() {
    return statusColor;
  }

  public void setStatusColor(String statusColor) {
    this.statusColor = statusColor;
  }


  public DailyFantasyPlayer team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public DailyFantasyPlayer yahooSalary(Integer yahooSalary) {
    this.yahooSalary = yahooSalary;
    return this;
  }

  /**
   * Get yahooSalary
   * @return yahooSalary
   */
  @javax.annotation.Nullable
  public Integer getYahooSalary() {
    return yahooSalary;
  }

  public void setYahooSalary(Integer yahooSalary) {
    this.yahooSalary = yahooSalary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyFantasyPlayer dailyFantasyPlayer = (DailyFantasyPlayer) o;
    return Objects.equals(this.date, dailyFantasyPlayer.date) &&
        Objects.equals(this.draftKingsSalary, dailyFantasyPlayer.draftKingsSalary) &&
        Objects.equals(this.fanDuelSalary, dailyFantasyPlayer.fanDuelSalary) &&
        Objects.equals(this.fantasyDataSalary, dailyFantasyPlayer.fantasyDataSalary) &&
        Objects.equals(this.fantasyDraftSalary, dailyFantasyPlayer.fantasyDraftSalary) &&
        Objects.equals(this.homeOrAway, dailyFantasyPlayer.homeOrAway) &&
        Objects.equals(this.lastGameFantasyPoints, dailyFantasyPlayer.lastGameFantasyPoints) &&
        Objects.equals(this.name, dailyFantasyPlayer.name) &&
        Objects.equals(this.opponent, dailyFantasyPlayer.opponent) &&
        Objects.equals(this.opponentPositionRank, dailyFantasyPlayer.opponentPositionRank) &&
        Objects.equals(this.opponentRank, dailyFantasyPlayer.opponentRank) &&
        Objects.equals(this.playerID, dailyFantasyPlayer.playerID) &&
        Objects.equals(this.position, dailyFantasyPlayer.position) &&
        Objects.equals(this.projectedFantasyPoints, dailyFantasyPlayer.projectedFantasyPoints) &&
        Objects.equals(this.salary, dailyFantasyPlayer.salary) &&
        Objects.equals(this.shortName, dailyFantasyPlayer.shortName) &&
        Objects.equals(this.status, dailyFantasyPlayer.status) &&
        Objects.equals(this.statusCode, dailyFantasyPlayer.statusCode) &&
        Objects.equals(this.statusColor, dailyFantasyPlayer.statusColor) &&
        Objects.equals(this.team, dailyFantasyPlayer.team) &&
        Objects.equals(this.yahooSalary, dailyFantasyPlayer.yahooSalary);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, draftKingsSalary, fanDuelSalary, fantasyDataSalary, fantasyDraftSalary, homeOrAway, lastGameFantasyPoints, name, opponent, opponentPositionRank, opponentRank, playerID, position, projectedFantasyPoints, salary, shortName, status, statusCode, statusColor, team, yahooSalary);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyFantasyPlayer {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    draftKingsSalary: ").append(toIndentedString(draftKingsSalary)).append("\n");
    sb.append("    fanDuelSalary: ").append(toIndentedString(fanDuelSalary)).append("\n");
    sb.append("    fantasyDataSalary: ").append(toIndentedString(fantasyDataSalary)).append("\n");
    sb.append("    fantasyDraftSalary: ").append(toIndentedString(fantasyDraftSalary)).append("\n");
    sb.append("    homeOrAway: ").append(toIndentedString(homeOrAway)).append("\n");
    sb.append("    lastGameFantasyPoints: ").append(toIndentedString(lastGameFantasyPoints)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    opponentPositionRank: ").append(toIndentedString(opponentPositionRank)).append("\n");
    sb.append("    opponentRank: ").append(toIndentedString(opponentRank)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    projectedFantasyPoints: ").append(toIndentedString(projectedFantasyPoints)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusColor: ").append(toIndentedString(statusColor)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    yahooSalary: ").append(toIndentedString(yahooSalary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Date");
    openapiFields.add("DraftKingsSalary");
    openapiFields.add("FanDuelSalary");
    openapiFields.add("FantasyDataSalary");
    openapiFields.add("FantasyDraftSalary");
    openapiFields.add("HomeOrAway");
    openapiFields.add("LastGameFantasyPoints");
    openapiFields.add("Name");
    openapiFields.add("Opponent");
    openapiFields.add("OpponentPositionRank");
    openapiFields.add("OpponentRank");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("ProjectedFantasyPoints");
    openapiFields.add("Salary");
    openapiFields.add("ShortName");
    openapiFields.add("Status");
    openapiFields.add("StatusCode");
    openapiFields.add("StatusColor");
    openapiFields.add("Team");
    openapiFields.add("YahooSalary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyFantasyPlayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyFantasyPlayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyFantasyPlayer is not found in the empty JSON string", DailyFantasyPlayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyFantasyPlayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyFantasyPlayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("HomeOrAway") != null && !jsonObj.get("HomeOrAway").isJsonNull()) && !jsonObj.get("HomeOrAway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeOrAway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeOrAway").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("StatusCode") != null && !jsonObj.get("StatusCode").isJsonNull()) && !jsonObj.get("StatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusCode").toString()));
      }
      if ((jsonObj.get("StatusColor") != null && !jsonObj.get("StatusColor").isJsonNull()) && !jsonObj.get("StatusColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusColor").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyFantasyPlayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyFantasyPlayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyFantasyPlayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyFantasyPlayer.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyFantasyPlayer>() {
           @Override
           public void write(JsonWriter out, DailyFantasyPlayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyFantasyPlayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyFantasyPlayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyFantasyPlayer
   * @throws IOException if the JSON string is invalid with respect to DailyFantasyPlayer
   */
  public static DailyFantasyPlayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyFantasyPlayer.class);
  }

  /**
   * Convert an instance of DailyFantasyPlayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

