/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerPunting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerPunting {
  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FANTASY_POSITION = "FantasyPosition";
  @SerializedName(SERIALIZED_NAME_FANTASY_POSITION)
  private String fantasyPosition;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PLAYER_GAME_I_D = "PlayerGameID";
  @SerializedName(SERIALIZED_NAME_PLAYER_GAME_I_D)
  private Integer playerGameID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POSITION_CATEGORY = "PositionCategory";
  @SerializedName(SERIALIZED_NAME_POSITION_CATEGORY)
  private String positionCategory;

  public static final String SERIALIZED_NAME_PUNT_AVERAGE = "PuntAverage";
  @SerializedName(SERIALIZED_NAME_PUNT_AVERAGE)
  private BigDecimal puntAverage;

  public static final String SERIALIZED_NAME_PUNT_INSIDE20 = "PuntInside20";
  @SerializedName(SERIALIZED_NAME_PUNT_INSIDE20)
  private Integer puntInside20;

  public static final String SERIALIZED_NAME_PUNT_TOUCHBACKS = "PuntTouchbacks";
  @SerializedName(SERIALIZED_NAME_PUNT_TOUCHBACKS)
  private Integer puntTouchbacks;

  public static final String SERIALIZED_NAME_PUNT_YARDS = "PuntYards";
  @SerializedName(SERIALIZED_NAME_PUNT_YARDS)
  private Integer puntYards;

  public static final String SERIALIZED_NAME_PUNTS = "Punts";
  @SerializedName(SERIALIZED_NAME_PUNTS)
  private Integer punts;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public PlayerPunting() {
  }

  public PlayerPunting fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public PlayerPunting fantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
    return this;
  }

  /**
   * Get fantasyPosition
   * @return fantasyPosition
   */
  @javax.annotation.Nullable
  public String getFantasyPosition() {
    return fantasyPosition;
  }

  public void setFantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
  }


  public PlayerPunting name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerPunting number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PlayerPunting playerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
    return this;
  }

  /**
   * Get playerGameID
   * @return playerGameID
   */
  @javax.annotation.Nullable
  public Integer getPlayerGameID() {
    return playerGameID;
  }

  public void setPlayerGameID(Integer playerGameID) {
    this.playerGameID = playerGameID;
  }


  public PlayerPunting playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayerPunting position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public PlayerPunting positionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
    return this;
  }

  /**
   * Get positionCategory
   * @return positionCategory
   */
  @javax.annotation.Nullable
  public String getPositionCategory() {
    return positionCategory;
  }

  public void setPositionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
  }


  public PlayerPunting puntAverage(BigDecimal puntAverage) {
    this.puntAverage = puntAverage;
    return this;
  }

  /**
   * Get puntAverage
   * @return puntAverage
   */
  @javax.annotation.Nullable
  public BigDecimal getPuntAverage() {
    return puntAverage;
  }

  public void setPuntAverage(BigDecimal puntAverage) {
    this.puntAverage = puntAverage;
  }


  public PlayerPunting puntInside20(Integer puntInside20) {
    this.puntInside20 = puntInside20;
    return this;
  }

  /**
   * Get puntInside20
   * @return puntInside20
   */
  @javax.annotation.Nullable
  public Integer getPuntInside20() {
    return puntInside20;
  }

  public void setPuntInside20(Integer puntInside20) {
    this.puntInside20 = puntInside20;
  }


  public PlayerPunting puntTouchbacks(Integer puntTouchbacks) {
    this.puntTouchbacks = puntTouchbacks;
    return this;
  }

  /**
   * Get puntTouchbacks
   * @return puntTouchbacks
   */
  @javax.annotation.Nullable
  public Integer getPuntTouchbacks() {
    return puntTouchbacks;
  }

  public void setPuntTouchbacks(Integer puntTouchbacks) {
    this.puntTouchbacks = puntTouchbacks;
  }


  public PlayerPunting puntYards(Integer puntYards) {
    this.puntYards = puntYards;
    return this;
  }

  /**
   * Get puntYards
   * @return puntYards
   */
  @javax.annotation.Nullable
  public Integer getPuntYards() {
    return puntYards;
  }

  public void setPuntYards(Integer puntYards) {
    this.puntYards = puntYards;
  }


  public PlayerPunting punts(Integer punts) {
    this.punts = punts;
    return this;
  }

  /**
   * Get punts
   * @return punts
   */
  @javax.annotation.Nullable
  public Integer getPunts() {
    return punts;
  }

  public void setPunts(Integer punts) {
    this.punts = punts;
  }


  public PlayerPunting shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public PlayerPunting team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayerPunting updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerPunting playerPunting = (PlayerPunting) o;
    return Objects.equals(this.fantasyPoints, playerPunting.fantasyPoints) &&
        Objects.equals(this.fantasyPosition, playerPunting.fantasyPosition) &&
        Objects.equals(this.name, playerPunting.name) &&
        Objects.equals(this.number, playerPunting.number) &&
        Objects.equals(this.playerGameID, playerPunting.playerGameID) &&
        Objects.equals(this.playerID, playerPunting.playerID) &&
        Objects.equals(this.position, playerPunting.position) &&
        Objects.equals(this.positionCategory, playerPunting.positionCategory) &&
        Objects.equals(this.puntAverage, playerPunting.puntAverage) &&
        Objects.equals(this.puntInside20, playerPunting.puntInside20) &&
        Objects.equals(this.puntTouchbacks, playerPunting.puntTouchbacks) &&
        Objects.equals(this.puntYards, playerPunting.puntYards) &&
        Objects.equals(this.punts, playerPunting.punts) &&
        Objects.equals(this.shortName, playerPunting.shortName) &&
        Objects.equals(this.team, playerPunting.team) &&
        Objects.equals(this.updated, playerPunting.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fantasyPoints, fantasyPosition, name, number, playerGameID, playerID, position, positionCategory, puntAverage, puntInside20, puntTouchbacks, puntYards, punts, shortName, team, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerPunting {\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    fantasyPosition: ").append(toIndentedString(fantasyPosition)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    playerGameID: ").append(toIndentedString(playerGameID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionCategory: ").append(toIndentedString(positionCategory)).append("\n");
    sb.append("    puntAverage: ").append(toIndentedString(puntAverage)).append("\n");
    sb.append("    puntInside20: ").append(toIndentedString(puntInside20)).append("\n");
    sb.append("    puntTouchbacks: ").append(toIndentedString(puntTouchbacks)).append("\n");
    sb.append("    puntYards: ").append(toIndentedString(puntYards)).append("\n");
    sb.append("    punts: ").append(toIndentedString(punts)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FantasyPoints");
    openapiFields.add("FantasyPosition");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("PlayerGameID");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("PositionCategory");
    openapiFields.add("PuntAverage");
    openapiFields.add("PuntInside20");
    openapiFields.add("PuntTouchbacks");
    openapiFields.add("PuntYards");
    openapiFields.add("Punts");
    openapiFields.add("ShortName");
    openapiFields.add("Team");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerPunting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerPunting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerPunting is not found in the empty JSON string", PlayerPunting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerPunting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerPunting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FantasyPosition") != null && !jsonObj.get("FantasyPosition").isJsonNull()) && !jsonObj.get("FantasyPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyPosition").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("PositionCategory") != null && !jsonObj.get("PositionCategory").isJsonNull()) && !jsonObj.get("PositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionCategory").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerPunting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerPunting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerPunting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerPunting.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerPunting>() {
           @Override
           public void write(JsonWriter out, PlayerPunting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerPunting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerPunting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerPunting
   * @throws IOException if the JSON string is invalid with respect to PlayerPunting
   */
  public static PlayerPunting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerPunting.class);
  }

  /**
   * Convert an instance of PlayerPunting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

