/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FantasyPlayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:11.789534-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FantasyPlayer {
  public static final String SERIALIZED_NAME_AUCTION_VALUE = "AuctionValue";
  @SerializedName(SERIALIZED_NAME_AUCTION_VALUE)
  private Integer auctionValue;

  public static final String SERIALIZED_NAME_AUCTION_VALUE_P_P_R = "AuctionValuePPR";
  @SerializedName(SERIALIZED_NAME_AUCTION_VALUE_P_P_R)
  private Integer auctionValuePPR;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION = "AverageDraftPosition";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION)
  private BigDecimal averageDraftPosition;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION2_Q_B = "AverageDraftPosition2QB";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION2_Q_B)
  private BigDecimal averageDraftPosition2QB;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_DYNASTY = "AverageDraftPositionDynasty";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_DYNASTY)
  private BigDecimal averageDraftPositionDynasty;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_I_D_P = "AverageDraftPositionIDP";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_I_D_P)
  private Integer averageDraftPositionIDP;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_P_P_R = "AverageDraftPositionPPR";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_P_P_R)
  private BigDecimal averageDraftPositionPPR;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_ROOKIE = "AverageDraftPositionRookie";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION_ROOKIE)
  private BigDecimal averageDraftPositionRookie;

  public static final String SERIALIZED_NAME_BYE_WEEK = "ByeWeek";
  @SerializedName(SERIALIZED_NAME_BYE_WEEK)
  private Integer byeWeek;

  public static final String SERIALIZED_NAME_FANTASY_PLAYER_KEY = "FantasyPlayerKey";
  @SerializedName(SERIALIZED_NAME_FANTASY_PLAYER_KEY)
  private String fantasyPlayerKey;

  public static final String SERIALIZED_NAME_LAST_SEASON_FANTASY_POINTS = "LastSeasonFantasyPoints";
  @SerializedName(SERIALIZED_NAME_LAST_SEASON_FANTASY_POINTS)
  private BigDecimal lastSeasonFantasyPoints;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_PROJECTED_FANTASY_POINTS = "ProjectedFantasyPoints";
  @SerializedName(SERIALIZED_NAME_PROJECTED_FANTASY_POINTS)
  private BigDecimal projectedFantasyPoints;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public FantasyPlayer() {
  }

  public FantasyPlayer auctionValue(Integer auctionValue) {
    this.auctionValue = auctionValue;
    return this;
  }

  /**
   * Get auctionValue
   * @return auctionValue
   */
  @javax.annotation.Nullable
  public Integer getAuctionValue() {
    return auctionValue;
  }

  public void setAuctionValue(Integer auctionValue) {
    this.auctionValue = auctionValue;
  }


  public FantasyPlayer auctionValuePPR(Integer auctionValuePPR) {
    this.auctionValuePPR = auctionValuePPR;
    return this;
  }

  /**
   * Get auctionValuePPR
   * @return auctionValuePPR
   */
  @javax.annotation.Nullable
  public Integer getAuctionValuePPR() {
    return auctionValuePPR;
  }

  public void setAuctionValuePPR(Integer auctionValuePPR) {
    this.auctionValuePPR = auctionValuePPR;
  }


  public FantasyPlayer averageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
    return this;
  }

  /**
   * Get averageDraftPosition
   * @return averageDraftPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPosition() {
    return averageDraftPosition;
  }

  public void setAverageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
  }


  public FantasyPlayer averageDraftPosition2QB(BigDecimal averageDraftPosition2QB) {
    this.averageDraftPosition2QB = averageDraftPosition2QB;
    return this;
  }

  /**
   * Get averageDraftPosition2QB
   * @return averageDraftPosition2QB
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPosition2QB() {
    return averageDraftPosition2QB;
  }

  public void setAverageDraftPosition2QB(BigDecimal averageDraftPosition2QB) {
    this.averageDraftPosition2QB = averageDraftPosition2QB;
  }


  public FantasyPlayer averageDraftPositionDynasty(BigDecimal averageDraftPositionDynasty) {
    this.averageDraftPositionDynasty = averageDraftPositionDynasty;
    return this;
  }

  /**
   * Get averageDraftPositionDynasty
   * @return averageDraftPositionDynasty
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPositionDynasty() {
    return averageDraftPositionDynasty;
  }

  public void setAverageDraftPositionDynasty(BigDecimal averageDraftPositionDynasty) {
    this.averageDraftPositionDynasty = averageDraftPositionDynasty;
  }


  public FantasyPlayer averageDraftPositionIDP(Integer averageDraftPositionIDP) {
    this.averageDraftPositionIDP = averageDraftPositionIDP;
    return this;
  }

  /**
   * Get averageDraftPositionIDP
   * @return averageDraftPositionIDP
   */
  @javax.annotation.Nullable
  public Integer getAverageDraftPositionIDP() {
    return averageDraftPositionIDP;
  }

  public void setAverageDraftPositionIDP(Integer averageDraftPositionIDP) {
    this.averageDraftPositionIDP = averageDraftPositionIDP;
  }


  public FantasyPlayer averageDraftPositionPPR(BigDecimal averageDraftPositionPPR) {
    this.averageDraftPositionPPR = averageDraftPositionPPR;
    return this;
  }

  /**
   * Get averageDraftPositionPPR
   * @return averageDraftPositionPPR
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPositionPPR() {
    return averageDraftPositionPPR;
  }

  public void setAverageDraftPositionPPR(BigDecimal averageDraftPositionPPR) {
    this.averageDraftPositionPPR = averageDraftPositionPPR;
  }


  public FantasyPlayer averageDraftPositionRookie(BigDecimal averageDraftPositionRookie) {
    this.averageDraftPositionRookie = averageDraftPositionRookie;
    return this;
  }

  /**
   * Get averageDraftPositionRookie
   * @return averageDraftPositionRookie
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPositionRookie() {
    return averageDraftPositionRookie;
  }

  public void setAverageDraftPositionRookie(BigDecimal averageDraftPositionRookie) {
    this.averageDraftPositionRookie = averageDraftPositionRookie;
  }


  public FantasyPlayer byeWeek(Integer byeWeek) {
    this.byeWeek = byeWeek;
    return this;
  }

  /**
   * Get byeWeek
   * @return byeWeek
   */
  @javax.annotation.Nullable
  public Integer getByeWeek() {
    return byeWeek;
  }

  public void setByeWeek(Integer byeWeek) {
    this.byeWeek = byeWeek;
  }


  public FantasyPlayer fantasyPlayerKey(String fantasyPlayerKey) {
    this.fantasyPlayerKey = fantasyPlayerKey;
    return this;
  }

  /**
   * Get fantasyPlayerKey
   * @return fantasyPlayerKey
   */
  @javax.annotation.Nullable
  public String getFantasyPlayerKey() {
    return fantasyPlayerKey;
  }

  public void setFantasyPlayerKey(String fantasyPlayerKey) {
    this.fantasyPlayerKey = fantasyPlayerKey;
  }


  public FantasyPlayer lastSeasonFantasyPoints(BigDecimal lastSeasonFantasyPoints) {
    this.lastSeasonFantasyPoints = lastSeasonFantasyPoints;
    return this;
  }

  /**
   * Get lastSeasonFantasyPoints
   * @return lastSeasonFantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getLastSeasonFantasyPoints() {
    return lastSeasonFantasyPoints;
  }

  public void setLastSeasonFantasyPoints(BigDecimal lastSeasonFantasyPoints) {
    this.lastSeasonFantasyPoints = lastSeasonFantasyPoints;
  }


  public FantasyPlayer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FantasyPlayer playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public FantasyPlayer position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public FantasyPlayer projectedFantasyPoints(BigDecimal projectedFantasyPoints) {
    this.projectedFantasyPoints = projectedFantasyPoints;
    return this;
  }

  /**
   * Get projectedFantasyPoints
   * @return projectedFantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getProjectedFantasyPoints() {
    return projectedFantasyPoints;
  }

  public void setProjectedFantasyPoints(BigDecimal projectedFantasyPoints) {
    this.projectedFantasyPoints = projectedFantasyPoints;
  }


  public FantasyPlayer team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FantasyPlayer fantasyPlayer = (FantasyPlayer) o;
    return Objects.equals(this.auctionValue, fantasyPlayer.auctionValue) &&
        Objects.equals(this.auctionValuePPR, fantasyPlayer.auctionValuePPR) &&
        Objects.equals(this.averageDraftPosition, fantasyPlayer.averageDraftPosition) &&
        Objects.equals(this.averageDraftPosition2QB, fantasyPlayer.averageDraftPosition2QB) &&
        Objects.equals(this.averageDraftPositionDynasty, fantasyPlayer.averageDraftPositionDynasty) &&
        Objects.equals(this.averageDraftPositionIDP, fantasyPlayer.averageDraftPositionIDP) &&
        Objects.equals(this.averageDraftPositionPPR, fantasyPlayer.averageDraftPositionPPR) &&
        Objects.equals(this.averageDraftPositionRookie, fantasyPlayer.averageDraftPositionRookie) &&
        Objects.equals(this.byeWeek, fantasyPlayer.byeWeek) &&
        Objects.equals(this.fantasyPlayerKey, fantasyPlayer.fantasyPlayerKey) &&
        Objects.equals(this.lastSeasonFantasyPoints, fantasyPlayer.lastSeasonFantasyPoints) &&
        Objects.equals(this.name, fantasyPlayer.name) &&
        Objects.equals(this.playerID, fantasyPlayer.playerID) &&
        Objects.equals(this.position, fantasyPlayer.position) &&
        Objects.equals(this.projectedFantasyPoints, fantasyPlayer.projectedFantasyPoints) &&
        Objects.equals(this.team, fantasyPlayer.team);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(auctionValue, auctionValuePPR, averageDraftPosition, averageDraftPosition2QB, averageDraftPositionDynasty, averageDraftPositionIDP, averageDraftPositionPPR, averageDraftPositionRookie, byeWeek, fantasyPlayerKey, lastSeasonFantasyPoints, name, playerID, position, projectedFantasyPoints, team);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FantasyPlayer {\n");
    sb.append("    auctionValue: ").append(toIndentedString(auctionValue)).append("\n");
    sb.append("    auctionValuePPR: ").append(toIndentedString(auctionValuePPR)).append("\n");
    sb.append("    averageDraftPosition: ").append(toIndentedString(averageDraftPosition)).append("\n");
    sb.append("    averageDraftPosition2QB: ").append(toIndentedString(averageDraftPosition2QB)).append("\n");
    sb.append("    averageDraftPositionDynasty: ").append(toIndentedString(averageDraftPositionDynasty)).append("\n");
    sb.append("    averageDraftPositionIDP: ").append(toIndentedString(averageDraftPositionIDP)).append("\n");
    sb.append("    averageDraftPositionPPR: ").append(toIndentedString(averageDraftPositionPPR)).append("\n");
    sb.append("    averageDraftPositionRookie: ").append(toIndentedString(averageDraftPositionRookie)).append("\n");
    sb.append("    byeWeek: ").append(toIndentedString(byeWeek)).append("\n");
    sb.append("    fantasyPlayerKey: ").append(toIndentedString(fantasyPlayerKey)).append("\n");
    sb.append("    lastSeasonFantasyPoints: ").append(toIndentedString(lastSeasonFantasyPoints)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    projectedFantasyPoints: ").append(toIndentedString(projectedFantasyPoints)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuctionValue");
    openapiFields.add("AuctionValuePPR");
    openapiFields.add("AverageDraftPosition");
    openapiFields.add("AverageDraftPosition2QB");
    openapiFields.add("AverageDraftPositionDynasty");
    openapiFields.add("AverageDraftPositionIDP");
    openapiFields.add("AverageDraftPositionPPR");
    openapiFields.add("AverageDraftPositionRookie");
    openapiFields.add("ByeWeek");
    openapiFields.add("FantasyPlayerKey");
    openapiFields.add("LastSeasonFantasyPoints");
    openapiFields.add("Name");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("ProjectedFantasyPoints");
    openapiFields.add("Team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FantasyPlayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FantasyPlayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FantasyPlayer is not found in the empty JSON string", FantasyPlayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FantasyPlayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FantasyPlayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FantasyPlayerKey") != null && !jsonObj.get("FantasyPlayerKey").isJsonNull()) && !jsonObj.get("FantasyPlayerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyPlayerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyPlayerKey").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FantasyPlayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FantasyPlayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FantasyPlayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FantasyPlayer.class));

       return (TypeAdapter<T>) new TypeAdapter<FantasyPlayer>() {
           @Override
           public void write(JsonWriter out, FantasyPlayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FantasyPlayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FantasyPlayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FantasyPlayer
   * @throws IOException if the JSON string is invalid with respect to FantasyPlayer
   */
  public static FantasyPlayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FantasyPlayer.class);
  }

  /**
   * Convert an instance of FantasyPlayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

