/*
 * NFL v3 Stats
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BoxScore;
import org.openapitools.client.model.BoxScoreV3;
import org.openapitools.client.model.Bye;
import org.openapitools.client.model.DailyFantasyPlayer;
import org.openapitools.client.model.DailyFantasyScoring;
import org.openapitools.client.model.DfsSlate;
import org.openapitools.client.model.FantasyDefenseGame;
import org.openapitools.client.model.FantasyDefenseSeason;
import org.openapitools.client.model.FantasyPlayer;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.Injury;
import org.openapitools.client.model.News;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.PlayerDetail;
import org.openapitools.client.model.PlayerGame;
import org.openapitools.client.model.PlayerGameRedZone;
import org.openapitools.client.model.PlayerInfo;
import org.openapitools.client.model.PlayerOwnership;
import org.openapitools.client.model.PlayerSeason;
import org.openapitools.client.model.PlayerSeasonRedZone;
import org.openapitools.client.model.PlayerSeasonThirdDown;
import org.openapitools.client.model.Schedule;
import org.openapitools.client.model.Score;
import org.openapitools.client.model.Stadium;
import org.openapitools.client.model.Standing;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamGame;
import org.openapitools.client.model.TeamSeason;
import org.openapitools.client.model.Timeframe;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Are Games In Progress
     *
     * Returns &lt;code&gt;true&lt;/code&gt; if there is at least one game being played at the time of the request or &lt;code&gt;false&lt;/code&gt; if there are none.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void areGamesInProgressTest() throws ApiException {
        String format = null;
        Boolean response = api.areGamesInProgress(format);
        // TODO: test validations
    }

    /**
     * Box Score by ScoreID V3
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxScoreByScoreidVTest() throws ApiException {
        String format = null;
        String scoreid = null;
        BoxScoreV3 response = api.boxScoreByScoreidV(format, scoreid);
        // TODO: test validations
    }

    /**
     * Box Score V3
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxScoreVTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String hometeam = null;
        BoxScoreV3 response = api.boxScoreV(format, season, week, hometeam);
        // TODO: test validations
    }

    /**
     * Box Scores Delta V3
     *
     * This method returns all box scores for a given season and week, but only returns player stats that have changed in the last X minutes. You can also filter by type of player stats to include, such as traditional fantasy players, IDP players or all players.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxScoresDeltaVTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String playerstoinclude = null;
        String minutes = null;
        List<BoxScoreV3> response = api.boxScoresDeltaV(format, season, week, playerstoinclude, minutes);
        // TODO: test validations
    }

    /**
     * Box Scores V3 Simulation
     *
     * Gets simulated live box scores of NFL games, covering the Conference Championship games on January 21, 2018.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxScoresVSimulationTest() throws ApiException {
        String format = null;
        String numberofplays = null;
        List<BoxScoreV3> response = api.boxScoresVSimulation(format, numberofplays);
        // TODO: test validations
    }

    /**
     * Bye Weeks
     *
     * Get bye weeks for the teams during a specified NFL season. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void byeWeeksTest() throws ApiException {
        String format = null;
        String season = null;
        List<Bye> response = api.byeWeeks(format, season);
        // TODO: test validations
    }

    /**
     * Daily Fantasy Players
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dailyFantasyPlayersTest() throws ApiException {
        String format = null;
        String date = null;
        List<DailyFantasyPlayer> response = api.dailyFantasyPlayers(format, date);
        // TODO: test validations
    }

    /**
     * Daily Fantasy Scoring
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dailyFantasyScoringTest() throws ApiException {
        String format = null;
        String date = null;
        List<DailyFantasyScoring> response = api.dailyFantasyScoring(format, date);
        // TODO: test validations
    }

    /**
     * DFS Slates by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfsSlatesByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<DfsSlate> response = api.dfsSlatesByDate(format, date);
        // TODO: test validations
    }

    /**
     * DFS Slates by Week
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfsSlatesByWeekTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<DfsSlate> response = api.dfsSlatesByWeek(format, season, week);
        // TODO: test validations
    }

    /**
     * Fantasy Defense Game Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fantasyDefenseGameStatsTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<FantasyDefenseGame> response = api.fantasyDefenseGameStats(format, season, week);
        // TODO: test validations
    }

    /**
     * Fantasy Defense Game Stats by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fantasyDefenseGameStatsByTeamTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String team = null;
        FantasyDefenseGame response = api.fantasyDefenseGameStatsByTeam(format, season, week, team);
        // TODO: test validations
    }

    /**
     * Fantasy Defense Season Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fantasyDefenseSeasonStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<FantasyDefenseSeason> response = api.fantasyDefenseSeasonStats(format, season);
        // TODO: test validations
    }

    /**
     * Fantasy Defense Season Stats by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fantasyDefenseSeasonStatsByTeamTest() throws ApiException {
        String format = null;
        String season = null;
        String team = null;
        FantasyDefenseSeason response = api.fantasyDefenseSeasonStatsByTeam(format, season, team);
        // TODO: test validations
    }

    /**
     * Fantasy Player Ownership Percentages (Season-Long)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fantasyPlayerOwnershipPercentagesSeasonLongTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<PlayerOwnership> response = api.fantasyPlayerOwnershipPercentagesSeasonLong(format, season, week);
        // TODO: test validations
    }

    /**
     * Fantasy Players with ADP
     *
     * This method returns a comprehensive list of draftable fantasy football players, including QB, RB, WR, TE, K and DEF.  Players are sorted by ADP (AverageDraftPosition).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fantasyPlayersWithAdpTest() throws ApiException {
        String format = null;
        List<FantasyPlayer> response = api.fantasyPlayersWithAdp(format);
        // TODO: test validations
    }

    /**
     * Game Stats by Season (Deprecated, use Team Game Stats instead)
     *
     * Game stats for a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadTest() throws ApiException {
        String format = null;
        String season = null;
        List<Game> response = api.gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(format, season);
        // TODO: test validations
    }

    /**
     * Game Stats by Week (Deprecated, use Team Game Stats instead)
     *
     * Game stats for a specified season and week.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<Game> response = api.gameStatsByWeekDeprecatedUseTeamGameStatsInstead(format, season, week);
        // TODO: test validations
    }

    /**
     * IDP Fantasy Players with ADP
     *
     * This method returns the top 300+ IDP Fantasy Players for the current or upcoming season, ordered by AverageDraftPositionIDP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idpFantasyPlayersWithAdpTest() throws ApiException {
        String format = null;
        List<FantasyPlayer> response = api.idpFantasyPlayersWithAdp(format);
        // TODO: test validations
    }

    /**
     * Injuries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void injuriesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<Injury> response = api.injuries(format, season, week);
        // TODO: test validations
    }

    /**
     * Injuries by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void injuriesByTeamTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String team = null;
        List<Injury> response = api.injuriesByTeam(format, season, week, team);
        // TODO: test validations
    }

    /**
     * League Leaders by Season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leagueLeadersBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        String position = null;
        String column = null;
        List<PlayerSeason> response = api.leagueLeadersBySeason(format, season, position, column);
        // TODO: test validations
    }

    /**
     * League Leaders by Week
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leagueLeadersByWeekTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String position = null;
        String column = null;
        List<PlayerGame> response = api.leagueLeadersByWeek(format, season, week, position, column);
        // TODO: test validations
    }

    /**
     * Legacy Box Score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyBoxScoreTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String hometeam = null;
        BoxScore response = api.legacyBoxScore(format, season, week, hometeam);
        // TODO: test validations
    }

    /**
     * Legacy Box Scores
     *
     * This method returns all box scores for a given season and week.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyBoxScoresTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<BoxScore> response = api.legacyBoxScores(format, season, week);
        // TODO: test validations
    }

    /**
     * Legacy Box Scores Active
     *
     * This method returns box scores for all games that are either in-progress or have been updated within the last 30 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyBoxScoresActiveTest() throws ApiException {
        String format = null;
        List<BoxScore> response = api.legacyBoxScoresActive(format);
        // TODO: test validations
    }

    /**
     * Legacy Box Scores Delta
     *
     * This method returns all box scores for a given season and week, but only returns player stats that have changed in the last X minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyBoxScoresDeltaTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String minutes = null;
        List<BoxScore> response = api.legacyBoxScoresDelta(format, season, week, minutes);
        // TODO: test validations
    }

    /**
     * Legacy Box Scores Delta (Current Week)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyBoxScoresDeltaCurrentWeekTest() throws ApiException {
        String format = null;
        String minutes = null;
        List<BoxScore> response = api.legacyBoxScoresDeltaCurrentWeek(format, minutes);
        // TODO: test validations
    }

    /**
     * Legacy Box Scores Final
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyBoxScoresFinalTest() throws ApiException {
        String format = null;
        List<BoxScore> response = api.legacyBoxScoresFinal(format);
        // TODO: test validations
    }

    /**
     * Legacy Box Scores Live
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void legacyBoxScoresLiveTest() throws ApiException {
        String format = null;
        List<BoxScore> response = api.legacyBoxScoresLive(format);
        // TODO: test validations
    }

    /**
     * News
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsTest() throws ApiException {
        String format = null;
        List<News> response = api.news(format);
        // TODO: test validations
    }

    /**
     * News by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<News> response = api.newsByDate(format, date);
        // TODO: test validations
    }

    /**
     * News by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByPlayerTest() throws ApiException {
        String format = null;
        String playerid = null;
        List<News> response = api.newsByPlayer(format, playerid);
        // TODO: test validations
    }

    /**
     * News by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByTeamTest() throws ApiException {
        String format = null;
        String team = null;
        List<News> response = api.newsByTeam(format, team);
        // TODO: test validations
    }

    /**
     * Player Details by Available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByAvailableTest() throws ApiException {
        String format = null;
        List<Player> response = api.playerDetailsByAvailable(format);
        // TODO: test validations
    }

    /**
     * Player Details by Free Agents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByFreeAgentsTest() throws ApiException {
        String format = null;
        List<Player> response = api.playerDetailsByFreeAgents(format);
        // TODO: test validations
    }

    /**
     * Player Details by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByPlayerTest() throws ApiException {
        String format = null;
        String playerid = null;
        PlayerDetail response = api.playerDetailsByPlayer(format, playerid);
        // TODO: test validations
    }

    /**
     * Player Details by Rookie Draft Year
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByRookieDraftYearTest() throws ApiException {
        String format = null;
        String season = null;
        List<Player> response = api.playerDetailsByRookieDraftYear(format, season);
        // TODO: test validations
    }

    /**
     * Player Details by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByTeamTest() throws ApiException {
        String format = null;
        String team = null;
        List<PlayerDetail> response = api.playerDetailsByTeam(format, team);
        // TODO: test validations
    }

    /**
     * Player Game Logs By Season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameLogsBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        String playerid = null;
        String numberofgames = null;
        List<PlayerGame> response = api.playerGameLogsBySeason(format, season, playerid, numberofgames);
        // TODO: test validations
    }

    /**
     * Player Game Red Zone Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameRedZoneStatsTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<PlayerGameRedZone> response = api.playerGameRedZoneStats(format, season, week);
        // TODO: test validations
    }

    /**
     * Player Game Red Zone Stats Inside Five
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameRedZoneStatsInsideFiveTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<PlayerGameRedZone> response = api.playerGameRedZoneStatsInsideFive(format, season, week);
        // TODO: test validations
    }

    /**
     * Player Game Red Zone Stats Inside Ten
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameRedZoneStatsInsideTenTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<PlayerGameRedZone> response = api.playerGameRedZoneStatsInsideTen(format, season, week);
        // TODO: test validations
    }

    /**
     * Player Game Stats by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameStatsByPlayerTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String playerid = null;
        PlayerGame response = api.playerGameStatsByPlayer(format, season, week, playerid);
        // TODO: test validations
    }

    /**
     * Player Game Stats by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameStatsByTeamTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String team = null;
        List<PlayerGame> response = api.playerGameStatsByTeam(format, season, week, team);
        // TODO: test validations
    }

    /**
     * Player Game Stats by Week
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameStatsByWeekTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<PlayerGame> response = api.playerGameStatsByWeek(format, season, week);
        // TODO: test validations
    }

    /**
     * Player Game Stats by Week Delta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameStatsByWeekDeltaTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String minutes = null;
        List<PlayerGame> response = api.playerGameStatsByWeekDelta(format, season, week, minutes);
        // TODO: test validations
    }

    /**
     * Player Game Stats Delta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameStatsDeltaTest() throws ApiException {
        String format = null;
        String minutes = null;
        List<PlayerGame> response = api.playerGameStatsDelta(format, minutes);
        // TODO: test validations
    }

    /**
     * Player Season Red Zone Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonRedZoneStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeasonRedZone> response = api.playerSeasonRedZoneStats(format, season);
        // TODO: test validations
    }

    /**
     * Player Season Red Zone Stats Inside Five
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonRedZoneStatsInsideFiveTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeasonRedZone> response = api.playerSeasonRedZoneStatsInsideFive(format, season);
        // TODO: test validations
    }

    /**
     * Player Season Red Zone Stats Inside Ten
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonRedZoneStatsInsideTenTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeasonRedZone> response = api.playerSeasonRedZoneStatsInsideTen(format, season);
        // TODO: test validations
    }

    /**
     * Player Season Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeason> response = api.playerSeasonStats(format, season);
        // TODO: test validations
    }

    /**
     * Player Season Stats by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonStatsByPlayerTest() throws ApiException {
        String format = null;
        String season = null;
        String playerid = null;
        List<PlayerSeason> response = api.playerSeasonStatsByPlayer(format, season, playerid);
        // TODO: test validations
    }

    /**
     * Player Season Stats by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonStatsByTeamTest() throws ApiException {
        String format = null;
        String season = null;
        String team = null;
        List<PlayerSeason> response = api.playerSeasonStatsByTeam(format, season, team);
        // TODO: test validations
    }

    /**
     * Player Season Third Down Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonThirdDownStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeasonThirdDown> response = api.playerSeasonThirdDownStats(format, season);
        // TODO: test validations
    }

    /**
     * Pro Bowlers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void proBowlersTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerInfo> response = api.proBowlers(format, season);
        // TODO: test validations
    }

    /**
     * Schedule
     *
     * Game schedule for a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleTest() throws ApiException {
        String format = null;
        String season = null;
        List<Schedule> response = api.schedule(format, season);
        // TODO: test validations
    }

    /**
     * Scores by Date
     *
     * Get game scores for a specified week of a season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<Score> response = api.scoresByDate(format, date);
        // TODO: test validations
    }

    /**
     * Scores by Season 
     *
     * Game scores for a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        List<Score> response = api.scoresBySeason(format, season);
        // TODO: test validations
    }

    /**
     * Scores by Week
     *
     * Get game scores for a specified week of a season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresByWeekTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<Score> response = api.scoresByWeek(format, season, week);
        // TODO: test validations
    }

    /**
     * Scores by Week Simulation
     *
     * Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresByWeekSimulationTest() throws ApiException {
        String format = null;
        String numberofplays = null;
        List<Score> response = api.scoresByWeekSimulation(format, numberofplays);
        // TODO: test validations
    }

    /**
     * Season Current
     *
     * Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seasonCurrentTest() throws ApiException {
        String format = null;
        Integer response = api.seasonCurrent(format);
        // TODO: test validations
    }

    /**
     * Season Last Completed
     *
     * Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seasonLastCompletedTest() throws ApiException {
        String format = null;
        Integer response = api.seasonLastCompleted(format);
        // TODO: test validations
    }

    /**
     * Season Upcoming
     *
     * Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seasonUpcomingTest() throws ApiException {
        String format = null;
        Integer response = api.seasonUpcoming(format);
        // TODO: test validations
    }

    /**
     * Stadiums
     *
     * This method returns all stadiums.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stadiumsTest() throws ApiException {
        String format = null;
        List<Stadium> response = api.stadiums(format);
        // TODO: test validations
    }

    /**
     * Standings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void standingsTest() throws ApiException {
        String format = null;
        String season = null;
        List<Standing> response = api.standings(format, season);
        // TODO: test validations
    }

    /**
     * Team Game Logs By Season
     *
     * Game by game log of total team statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamGameLogsBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        String teamid = null;
        String numberofgames = null;
        List<TeamGame> response = api.teamGameLogsBySeason(format, season, teamid, numberofgames);
        // TODO: test validations
    }

    /**
     * Team Game Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamGameStatsTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<TeamGame> response = api.teamGameStats(format, season, week);
        // TODO: test validations
    }

    /**
     * Team Season Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamSeasonStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<TeamSeason> response = api.teamSeasonStats(format, season);
        // TODO: test validations
    }

    /**
     * Teams (Active)
     *
     * Gets all active teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsActiveTest() throws ApiException {
        String format = null;
        List<Team> response = api.teamsActive(format);
        // TODO: test validations
    }

    /**
     * Teams (All)
     *
     * Gets all teams, including pro bowl teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsAllTest() throws ApiException {
        String format = null;
        List<Team> response = api.teamsAll(format);
        // TODO: test validations
    }

    /**
     * Teams by Season
     *
     * List of teams playing in a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        List<Team> response = api.teamsBySeason(format, season);
        // TODO: test validations
    }

    /**
     * Timeframes
     *
     * Get detailed information about past, present, and future timeframes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeframesTest() throws ApiException {
        String format = null;
        String type = null;
        List<Timeframe> response = api.timeframes(format, type);
        // TODO: test validations
    }

    /**
     * Week Current
     *
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void weekCurrentTest() throws ApiException {
        String format = null;
        Integer response = api.weekCurrent(format);
        // TODO: test validations
    }

    /**
     * Week Last Completed
     *
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void weekLastCompletedTest() throws ApiException {
        String format = null;
        Integer response = api.weekLastCompleted(format);
        // TODO: test validations
    }

    /**
     * Week Upcoming
     *
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void weekUpcomingTest() throws ApiException {
        String format = null;
        Integer response = api.weekUpcoming(format);
        // TODO: test validations
    }

}
