# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Standing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, away_losses: int=None, away_wins: int=None, city: str=None, conference: str=None, conference_losses: int=None, conference_rank: int=None, conference_wins: int=None, division: str=None, division_losses: int=None, division_rank: int=None, division_wins: int=None, games_back: float=None, global_team_id: int=None, home_losses: int=None, home_wins: int=None, key: str=None, last_ten_losses: int=None, last_ten_wins: int=None, losses: int=None, name: str=None, percentage: float=None, points_per_game_against: float=None, points_per_game_for: float=None, season: int=None, season_type: int=None, streak: int=None, streak_description: str=None, team_id: int=None, wins: int=None):
        """Standing - a model defined in OpenAPI

        :param away_losses: The away_losses of this Standing.
        :param away_wins: The away_wins of this Standing.
        :param city: The city of this Standing.
        :param conference: The conference of this Standing.
        :param conference_losses: The conference_losses of this Standing.
        :param conference_rank: The conference_rank of this Standing.
        :param conference_wins: The conference_wins of this Standing.
        :param division: The division of this Standing.
        :param division_losses: The division_losses of this Standing.
        :param division_rank: The division_rank of this Standing.
        :param division_wins: The division_wins of this Standing.
        :param games_back: The games_back of this Standing.
        :param global_team_id: The global_team_id of this Standing.
        :param home_losses: The home_losses of this Standing.
        :param home_wins: The home_wins of this Standing.
        :param key: The key of this Standing.
        :param last_ten_losses: The last_ten_losses of this Standing.
        :param last_ten_wins: The last_ten_wins of this Standing.
        :param losses: The losses of this Standing.
        :param name: The name of this Standing.
        :param percentage: The percentage of this Standing.
        :param points_per_game_against: The points_per_game_against of this Standing.
        :param points_per_game_for: The points_per_game_for of this Standing.
        :param season: The season of this Standing.
        :param season_type: The season_type of this Standing.
        :param streak: The streak of this Standing.
        :param streak_description: The streak_description of this Standing.
        :param team_id: The team_id of this Standing.
        :param wins: The wins of this Standing.
        """
        self.openapi_types = {
            'away_losses': int,
            'away_wins': int,
            'city': str,
            'conference': str,
            'conference_losses': int,
            'conference_rank': int,
            'conference_wins': int,
            'division': str,
            'division_losses': int,
            'division_rank': int,
            'division_wins': int,
            'games_back': float,
            'global_team_id': int,
            'home_losses': int,
            'home_wins': int,
            'key': str,
            'last_ten_losses': int,
            'last_ten_wins': int,
            'losses': int,
            'name': str,
            'percentage': float,
            'points_per_game_against': float,
            'points_per_game_for': float,
            'season': int,
            'season_type': int,
            'streak': int,
            'streak_description': str,
            'team_id': int,
            'wins': int
        }

        self.attribute_map = {
            'away_losses': 'AwayLosses',
            'away_wins': 'AwayWins',
            'city': 'City',
            'conference': 'Conference',
            'conference_losses': 'ConferenceLosses',
            'conference_rank': 'ConferenceRank',
            'conference_wins': 'ConferenceWins',
            'division': 'Division',
            'division_losses': 'DivisionLosses',
            'division_rank': 'DivisionRank',
            'division_wins': 'DivisionWins',
            'games_back': 'GamesBack',
            'global_team_id': 'GlobalTeamID',
            'home_losses': 'HomeLosses',
            'home_wins': 'HomeWins',
            'key': 'Key',
            'last_ten_losses': 'LastTenLosses',
            'last_ten_wins': 'LastTenWins',
            'losses': 'Losses',
            'name': 'Name',
            'percentage': 'Percentage',
            'points_per_game_against': 'PointsPerGameAgainst',
            'points_per_game_for': 'PointsPerGameFor',
            'season': 'Season',
            'season_type': 'SeasonType',
            'streak': 'Streak',
            'streak_description': 'StreakDescription',
            'team_id': 'TeamID',
            'wins': 'Wins'
        }

        self._away_losses = away_losses
        self._away_wins = away_wins
        self._city = city
        self._conference = conference
        self._conference_losses = conference_losses
        self._conference_rank = conference_rank
        self._conference_wins = conference_wins
        self._division = division
        self._division_losses = division_losses
        self._division_rank = division_rank
        self._division_wins = division_wins
        self._games_back = games_back
        self._global_team_id = global_team_id
        self._home_losses = home_losses
        self._home_wins = home_wins
        self._key = key
        self._last_ten_losses = last_ten_losses
        self._last_ten_wins = last_ten_wins
        self._losses = losses
        self._name = name
        self._percentage = percentage
        self._points_per_game_against = points_per_game_against
        self._points_per_game_for = points_per_game_for
        self._season = season
        self._season_type = season_type
        self._streak = streak
        self._streak_description = streak_description
        self._team_id = team_id
        self._wins = wins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Standing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Standing of this Standing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def away_losses(self):
        """Gets the away_losses of this Standing.


        :return: The away_losses of this Standing.
        :rtype: int
        """
        return self._away_losses

    @away_losses.setter
    def away_losses(self, away_losses):
        """Sets the away_losses of this Standing.


        :param away_losses: The away_losses of this Standing.
        :type away_losses: int
        """

        self._away_losses = away_losses

    @property
    def away_wins(self):
        """Gets the away_wins of this Standing.


        :return: The away_wins of this Standing.
        :rtype: int
        """
        return self._away_wins

    @away_wins.setter
    def away_wins(self, away_wins):
        """Sets the away_wins of this Standing.


        :param away_wins: The away_wins of this Standing.
        :type away_wins: int
        """

        self._away_wins = away_wins

    @property
    def city(self):
        """Gets the city of this Standing.


        :return: The city of this Standing.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Standing.


        :param city: The city of this Standing.
        :type city: str
        """

        self._city = city

    @property
    def conference(self):
        """Gets the conference of this Standing.


        :return: The conference of this Standing.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this Standing.


        :param conference: The conference of this Standing.
        :type conference: str
        """

        self._conference = conference

    @property
    def conference_losses(self):
        """Gets the conference_losses of this Standing.


        :return: The conference_losses of this Standing.
        :rtype: int
        """
        return self._conference_losses

    @conference_losses.setter
    def conference_losses(self, conference_losses):
        """Sets the conference_losses of this Standing.


        :param conference_losses: The conference_losses of this Standing.
        :type conference_losses: int
        """

        self._conference_losses = conference_losses

    @property
    def conference_rank(self):
        """Gets the conference_rank of this Standing.


        :return: The conference_rank of this Standing.
        :rtype: int
        """
        return self._conference_rank

    @conference_rank.setter
    def conference_rank(self, conference_rank):
        """Sets the conference_rank of this Standing.


        :param conference_rank: The conference_rank of this Standing.
        :type conference_rank: int
        """

        self._conference_rank = conference_rank

    @property
    def conference_wins(self):
        """Gets the conference_wins of this Standing.


        :return: The conference_wins of this Standing.
        :rtype: int
        """
        return self._conference_wins

    @conference_wins.setter
    def conference_wins(self, conference_wins):
        """Sets the conference_wins of this Standing.


        :param conference_wins: The conference_wins of this Standing.
        :type conference_wins: int
        """

        self._conference_wins = conference_wins

    @property
    def division(self):
        """Gets the division of this Standing.


        :return: The division of this Standing.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Standing.


        :param division: The division of this Standing.
        :type division: str
        """

        self._division = division

    @property
    def division_losses(self):
        """Gets the division_losses of this Standing.


        :return: The division_losses of this Standing.
        :rtype: int
        """
        return self._division_losses

    @division_losses.setter
    def division_losses(self, division_losses):
        """Sets the division_losses of this Standing.


        :param division_losses: The division_losses of this Standing.
        :type division_losses: int
        """

        self._division_losses = division_losses

    @property
    def division_rank(self):
        """Gets the division_rank of this Standing.


        :return: The division_rank of this Standing.
        :rtype: int
        """
        return self._division_rank

    @division_rank.setter
    def division_rank(self, division_rank):
        """Sets the division_rank of this Standing.


        :param division_rank: The division_rank of this Standing.
        :type division_rank: int
        """

        self._division_rank = division_rank

    @property
    def division_wins(self):
        """Gets the division_wins of this Standing.


        :return: The division_wins of this Standing.
        :rtype: int
        """
        return self._division_wins

    @division_wins.setter
    def division_wins(self, division_wins):
        """Sets the division_wins of this Standing.


        :param division_wins: The division_wins of this Standing.
        :type division_wins: int
        """

        self._division_wins = division_wins

    @property
    def games_back(self):
        """Gets the games_back of this Standing.


        :return: The games_back of this Standing.
        :rtype: float
        """
        return self._games_back

    @games_back.setter
    def games_back(self, games_back):
        """Sets the games_back of this Standing.


        :param games_back: The games_back of this Standing.
        :type games_back: float
        """

        self._games_back = games_back

    @property
    def global_team_id(self):
        """Gets the global_team_id of this Standing.


        :return: The global_team_id of this Standing.
        :rtype: int
        """
        return self._global_team_id

    @global_team_id.setter
    def global_team_id(self, global_team_id):
        """Sets the global_team_id of this Standing.


        :param global_team_id: The global_team_id of this Standing.
        :type global_team_id: int
        """

        self._global_team_id = global_team_id

    @property
    def home_losses(self):
        """Gets the home_losses of this Standing.


        :return: The home_losses of this Standing.
        :rtype: int
        """
        return self._home_losses

    @home_losses.setter
    def home_losses(self, home_losses):
        """Sets the home_losses of this Standing.


        :param home_losses: The home_losses of this Standing.
        :type home_losses: int
        """

        self._home_losses = home_losses

    @property
    def home_wins(self):
        """Gets the home_wins of this Standing.


        :return: The home_wins of this Standing.
        :rtype: int
        """
        return self._home_wins

    @home_wins.setter
    def home_wins(self, home_wins):
        """Sets the home_wins of this Standing.


        :param home_wins: The home_wins of this Standing.
        :type home_wins: int
        """

        self._home_wins = home_wins

    @property
    def key(self):
        """Gets the key of this Standing.


        :return: The key of this Standing.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Standing.


        :param key: The key of this Standing.
        :type key: str
        """

        self._key = key

    @property
    def last_ten_losses(self):
        """Gets the last_ten_losses of this Standing.


        :return: The last_ten_losses of this Standing.
        :rtype: int
        """
        return self._last_ten_losses

    @last_ten_losses.setter
    def last_ten_losses(self, last_ten_losses):
        """Sets the last_ten_losses of this Standing.


        :param last_ten_losses: The last_ten_losses of this Standing.
        :type last_ten_losses: int
        """

        self._last_ten_losses = last_ten_losses

    @property
    def last_ten_wins(self):
        """Gets the last_ten_wins of this Standing.


        :return: The last_ten_wins of this Standing.
        :rtype: int
        """
        return self._last_ten_wins

    @last_ten_wins.setter
    def last_ten_wins(self, last_ten_wins):
        """Sets the last_ten_wins of this Standing.


        :param last_ten_wins: The last_ten_wins of this Standing.
        :type last_ten_wins: int
        """

        self._last_ten_wins = last_ten_wins

    @property
    def losses(self):
        """Gets the losses of this Standing.


        :return: The losses of this Standing.
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this Standing.


        :param losses: The losses of this Standing.
        :type losses: int
        """

        self._losses = losses

    @property
    def name(self):
        """Gets the name of this Standing.


        :return: The name of this Standing.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Standing.


        :param name: The name of this Standing.
        :type name: str
        """

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this Standing.


        :return: The percentage of this Standing.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Standing.


        :param percentage: The percentage of this Standing.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def points_per_game_against(self):
        """Gets the points_per_game_against of this Standing.


        :return: The points_per_game_against of this Standing.
        :rtype: float
        """
        return self._points_per_game_against

    @points_per_game_against.setter
    def points_per_game_against(self, points_per_game_against):
        """Sets the points_per_game_against of this Standing.


        :param points_per_game_against: The points_per_game_against of this Standing.
        :type points_per_game_against: float
        """

        self._points_per_game_against = points_per_game_against

    @property
    def points_per_game_for(self):
        """Gets the points_per_game_for of this Standing.


        :return: The points_per_game_for of this Standing.
        :rtype: float
        """
        return self._points_per_game_for

    @points_per_game_for.setter
    def points_per_game_for(self, points_per_game_for):
        """Sets the points_per_game_for of this Standing.


        :param points_per_game_for: The points_per_game_for of this Standing.
        :type points_per_game_for: float
        """

        self._points_per_game_for = points_per_game_for

    @property
    def season(self):
        """Gets the season of this Standing.


        :return: The season of this Standing.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Standing.


        :param season: The season of this Standing.
        :type season: int
        """

        self._season = season

    @property
    def season_type(self):
        """Gets the season_type of this Standing.


        :return: The season_type of this Standing.
        :rtype: int
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type):
        """Sets the season_type of this Standing.


        :param season_type: The season_type of this Standing.
        :type season_type: int
        """

        self._season_type = season_type

    @property
    def streak(self):
        """Gets the streak of this Standing.


        :return: The streak of this Standing.
        :rtype: int
        """
        return self._streak

    @streak.setter
    def streak(self, streak):
        """Sets the streak of this Standing.


        :param streak: The streak of this Standing.
        :type streak: int
        """

        self._streak = streak

    @property
    def streak_description(self):
        """Gets the streak_description of this Standing.


        :return: The streak_description of this Standing.
        :rtype: str
        """
        return self._streak_description

    @streak_description.setter
    def streak_description(self, streak_description):
        """Sets the streak_description of this Standing.


        :param streak_description: The streak_description of this Standing.
        :type streak_description: str
        """

        self._streak_description = streak_description

    @property
    def team_id(self):
        """Gets the team_id of this Standing.


        :return: The team_id of this Standing.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Standing.


        :param team_id: The team_id of this Standing.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def wins(self):
        """Gets the wins of this Standing.


        :return: The wins of this Standing.
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this Standing.


        :param wins: The wins of this Standing.
        :type wins: int
        """

        self._wins = wins
