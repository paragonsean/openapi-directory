/**
 * NBA v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfsSlateGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfsSlateGame::OAIDfsSlateGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfsSlateGame::OAIDfsSlateGame() {
    this->initializeModel();
}

OAIDfsSlateGame::~OAIDfsSlateGame() {}

void OAIDfsSlateGame::initializeModel() {

    m_game_isSet = false;
    m_game_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_operator_game_id_isSet = false;
    m_operator_game_id_isValid = false;

    m_removed_by_operator_isSet = false;
    m_removed_by_operator_isValid = false;

    m_slate_game_id_isSet = false;
    m_slate_game_id_isValid = false;

    m_slate_id_isSet = false;
    m_slate_id_isValid = false;
}

void OAIDfsSlateGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfsSlateGame::fromJsonObject(QJsonObject json) {

    m_game_isValid = ::OpenAPI::fromJsonValue(m_game, json[QString("Game")]);
    m_game_isSet = !json[QString("Game")].isNull() && m_game_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_operator_game_id_isValid = ::OpenAPI::fromJsonValue(m_operator_game_id, json[QString("OperatorGameID")]);
    m_operator_game_id_isSet = !json[QString("OperatorGameID")].isNull() && m_operator_game_id_isValid;

    m_removed_by_operator_isValid = ::OpenAPI::fromJsonValue(m_removed_by_operator, json[QString("RemovedByOperator")]);
    m_removed_by_operator_isSet = !json[QString("RemovedByOperator")].isNull() && m_removed_by_operator_isValid;

    m_slate_game_id_isValid = ::OpenAPI::fromJsonValue(m_slate_game_id, json[QString("SlateGameID")]);
    m_slate_game_id_isSet = !json[QString("SlateGameID")].isNull() && m_slate_game_id_isValid;

    m_slate_id_isValid = ::OpenAPI::fromJsonValue(m_slate_id, json[QString("SlateID")]);
    m_slate_id_isSet = !json[QString("SlateID")].isNull() && m_slate_id_isValid;
}

QString OAIDfsSlateGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfsSlateGame::asJsonObject() const {
    QJsonObject obj;
    if (m_game.isSet()) {
        obj.insert(QString("Game"), ::OpenAPI::toJsonValue(m_game));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_operator_game_id_isSet) {
        obj.insert(QString("OperatorGameID"), ::OpenAPI::toJsonValue(m_operator_game_id));
    }
    if (m_removed_by_operator_isSet) {
        obj.insert(QString("RemovedByOperator"), ::OpenAPI::toJsonValue(m_removed_by_operator));
    }
    if (m_slate_game_id_isSet) {
        obj.insert(QString("SlateGameID"), ::OpenAPI::toJsonValue(m_slate_game_id));
    }
    if (m_slate_id_isSet) {
        obj.insert(QString("SlateID"), ::OpenAPI::toJsonValue(m_slate_id));
    }
    return obj;
}

OAIGame OAIDfsSlateGame::getGame() const {
    return m_game;
}
void OAIDfsSlateGame::setGame(const OAIGame &game) {
    m_game = game;
    m_game_isSet = true;
}

bool OAIDfsSlateGame::is_game_Set() const{
    return m_game_isSet;
}

bool OAIDfsSlateGame::is_game_Valid() const{
    return m_game_isValid;
}

qint32 OAIDfsSlateGame::getGameId() const {
    return m_game_id;
}
void OAIDfsSlateGame::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIDfsSlateGame::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIDfsSlateGame::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIDfsSlateGame::getOperatorGameId() const {
    return m_operator_game_id;
}
void OAIDfsSlateGame::setOperatorGameId(const qint32 &operator_game_id) {
    m_operator_game_id = operator_game_id;
    m_operator_game_id_isSet = true;
}

bool OAIDfsSlateGame::is_operator_game_id_Set() const{
    return m_operator_game_id_isSet;
}

bool OAIDfsSlateGame::is_operator_game_id_Valid() const{
    return m_operator_game_id_isValid;
}

bool OAIDfsSlateGame::isRemovedByOperator() const {
    return m_removed_by_operator;
}
void OAIDfsSlateGame::setRemovedByOperator(const bool &removed_by_operator) {
    m_removed_by_operator = removed_by_operator;
    m_removed_by_operator_isSet = true;
}

bool OAIDfsSlateGame::is_removed_by_operator_Set() const{
    return m_removed_by_operator_isSet;
}

bool OAIDfsSlateGame::is_removed_by_operator_Valid() const{
    return m_removed_by_operator_isValid;
}

qint32 OAIDfsSlateGame::getSlateGameId() const {
    return m_slate_game_id;
}
void OAIDfsSlateGame::setSlateGameId(const qint32 &slate_game_id) {
    m_slate_game_id = slate_game_id;
    m_slate_game_id_isSet = true;
}

bool OAIDfsSlateGame::is_slate_game_id_Set() const{
    return m_slate_game_id_isSet;
}

bool OAIDfsSlateGame::is_slate_game_id_Valid() const{
    return m_slate_game_id_isValid;
}

qint32 OAIDfsSlateGame::getSlateId() const {
    return m_slate_id;
}
void OAIDfsSlateGame::setSlateId(const qint32 &slate_id) {
    m_slate_id = slate_id;
    m_slate_id_isSet = true;
}

bool OAIDfsSlateGame::is_slate_id_Set() const{
    return m_slate_id_isSet;
}

bool OAIDfsSlateGame::is_slate_id_Valid() const{
    return m_slate_id_isValid;
}

bool OAIDfsSlateGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_by_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfsSlateGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
