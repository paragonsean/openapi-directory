/*
 * NBA v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:43.661436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Standing {
  public static final String SERIALIZED_NAME_AWAY_LOSSES = "AwayLosses";
  @SerializedName(SERIALIZED_NAME_AWAY_LOSSES)
  private Integer awayLosses;

  public static final String SERIALIZED_NAME_AWAY_WINS = "AwayWins";
  @SerializedName(SERIALIZED_NAME_AWAY_WINS)
  private Integer awayWins;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CONFERENCE = "Conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_CONFERENCE_LOSSES = "ConferenceLosses";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_LOSSES)
  private Integer conferenceLosses;

  public static final String SERIALIZED_NAME_CONFERENCE_RANK = "ConferenceRank";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_RANK)
  private Integer conferenceRank;

  public static final String SERIALIZED_NAME_CONFERENCE_WINS = "ConferenceWins";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_WINS)
  private Integer conferenceWins;

  public static final String SERIALIZED_NAME_DIVISION = "Division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private String division;

  public static final String SERIALIZED_NAME_DIVISION_LOSSES = "DivisionLosses";
  @SerializedName(SERIALIZED_NAME_DIVISION_LOSSES)
  private Integer divisionLosses;

  public static final String SERIALIZED_NAME_DIVISION_RANK = "DivisionRank";
  @SerializedName(SERIALIZED_NAME_DIVISION_RANK)
  private Integer divisionRank;

  public static final String SERIALIZED_NAME_DIVISION_WINS = "DivisionWins";
  @SerializedName(SERIALIZED_NAME_DIVISION_WINS)
  private Integer divisionWins;

  public static final String SERIALIZED_NAME_GAMES_BACK = "GamesBack";
  @SerializedName(SERIALIZED_NAME_GAMES_BACK)
  private BigDecimal gamesBack;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_HOME_LOSSES = "HomeLosses";
  @SerializedName(SERIALIZED_NAME_HOME_LOSSES)
  private Integer homeLosses;

  public static final String SERIALIZED_NAME_HOME_WINS = "HomeWins";
  @SerializedName(SERIALIZED_NAME_HOME_WINS)
  private Integer homeWins;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LAST_TEN_LOSSES = "LastTenLosses";
  @SerializedName(SERIALIZED_NAME_LAST_TEN_LOSSES)
  private Integer lastTenLosses;

  public static final String SERIALIZED_NAME_LAST_TEN_WINS = "LastTenWins";
  @SerializedName(SERIALIZED_NAME_LAST_TEN_WINS)
  private Integer lastTenWins;

  public static final String SERIALIZED_NAME_LOSSES = "Losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private Integer losses;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "Percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private BigDecimal percentage;

  public static final String SERIALIZED_NAME_POINTS_PER_GAME_AGAINST = "PointsPerGameAgainst";
  @SerializedName(SERIALIZED_NAME_POINTS_PER_GAME_AGAINST)
  private BigDecimal pointsPerGameAgainst;

  public static final String SERIALIZED_NAME_POINTS_PER_GAME_FOR = "PointsPerGameFor";
  @SerializedName(SERIALIZED_NAME_POINTS_PER_GAME_FOR)
  private BigDecimal pointsPerGameFor;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_STREAK = "Streak";
  @SerializedName(SERIALIZED_NAME_STREAK)
  private Integer streak;

  public static final String SERIALIZED_NAME_STREAK_DESCRIPTION = "StreakDescription";
  @SerializedName(SERIALIZED_NAME_STREAK_DESCRIPTION)
  private String streakDescription;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_WINS = "Wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public Standing() {
  }

  public Standing awayLosses(Integer awayLosses) {
    this.awayLosses = awayLosses;
    return this;
  }

  /**
   * Get awayLosses
   * @return awayLosses
   */
  @javax.annotation.Nullable
  public Integer getAwayLosses() {
    return awayLosses;
  }

  public void setAwayLosses(Integer awayLosses) {
    this.awayLosses = awayLosses;
  }


  public Standing awayWins(Integer awayWins) {
    this.awayWins = awayWins;
    return this;
  }

  /**
   * Get awayWins
   * @return awayWins
   */
  @javax.annotation.Nullable
  public Integer getAwayWins() {
    return awayWins;
  }

  public void setAwayWins(Integer awayWins) {
    this.awayWins = awayWins;
  }


  public Standing city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Standing conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public Standing conferenceLosses(Integer conferenceLosses) {
    this.conferenceLosses = conferenceLosses;
    return this;
  }

  /**
   * Get conferenceLosses
   * @return conferenceLosses
   */
  @javax.annotation.Nullable
  public Integer getConferenceLosses() {
    return conferenceLosses;
  }

  public void setConferenceLosses(Integer conferenceLosses) {
    this.conferenceLosses = conferenceLosses;
  }


  public Standing conferenceRank(Integer conferenceRank) {
    this.conferenceRank = conferenceRank;
    return this;
  }

  /**
   * Get conferenceRank
   * @return conferenceRank
   */
  @javax.annotation.Nullable
  public Integer getConferenceRank() {
    return conferenceRank;
  }

  public void setConferenceRank(Integer conferenceRank) {
    this.conferenceRank = conferenceRank;
  }


  public Standing conferenceWins(Integer conferenceWins) {
    this.conferenceWins = conferenceWins;
    return this;
  }

  /**
   * Get conferenceWins
   * @return conferenceWins
   */
  @javax.annotation.Nullable
  public Integer getConferenceWins() {
    return conferenceWins;
  }

  public void setConferenceWins(Integer conferenceWins) {
    this.conferenceWins = conferenceWins;
  }


  public Standing division(String division) {
    this.division = division;
    return this;
  }

  /**
   * Get division
   * @return division
   */
  @javax.annotation.Nullable
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }


  public Standing divisionLosses(Integer divisionLosses) {
    this.divisionLosses = divisionLosses;
    return this;
  }

  /**
   * Get divisionLosses
   * @return divisionLosses
   */
  @javax.annotation.Nullable
  public Integer getDivisionLosses() {
    return divisionLosses;
  }

  public void setDivisionLosses(Integer divisionLosses) {
    this.divisionLosses = divisionLosses;
  }


  public Standing divisionRank(Integer divisionRank) {
    this.divisionRank = divisionRank;
    return this;
  }

  /**
   * Get divisionRank
   * @return divisionRank
   */
  @javax.annotation.Nullable
  public Integer getDivisionRank() {
    return divisionRank;
  }

  public void setDivisionRank(Integer divisionRank) {
    this.divisionRank = divisionRank;
  }


  public Standing divisionWins(Integer divisionWins) {
    this.divisionWins = divisionWins;
    return this;
  }

  /**
   * Get divisionWins
   * @return divisionWins
   */
  @javax.annotation.Nullable
  public Integer getDivisionWins() {
    return divisionWins;
  }

  public void setDivisionWins(Integer divisionWins) {
    this.divisionWins = divisionWins;
  }


  public Standing gamesBack(BigDecimal gamesBack) {
    this.gamesBack = gamesBack;
    return this;
  }

  /**
   * Get gamesBack
   * @return gamesBack
   */
  @javax.annotation.Nullable
  public BigDecimal getGamesBack() {
    return gamesBack;
  }

  public void setGamesBack(BigDecimal gamesBack) {
    this.gamesBack = gamesBack;
  }


  public Standing globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public Standing homeLosses(Integer homeLosses) {
    this.homeLosses = homeLosses;
    return this;
  }

  /**
   * Get homeLosses
   * @return homeLosses
   */
  @javax.annotation.Nullable
  public Integer getHomeLosses() {
    return homeLosses;
  }

  public void setHomeLosses(Integer homeLosses) {
    this.homeLosses = homeLosses;
  }


  public Standing homeWins(Integer homeWins) {
    this.homeWins = homeWins;
    return this;
  }

  /**
   * Get homeWins
   * @return homeWins
   */
  @javax.annotation.Nullable
  public Integer getHomeWins() {
    return homeWins;
  }

  public void setHomeWins(Integer homeWins) {
    this.homeWins = homeWins;
  }


  public Standing key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Standing lastTenLosses(Integer lastTenLosses) {
    this.lastTenLosses = lastTenLosses;
    return this;
  }

  /**
   * Get lastTenLosses
   * @return lastTenLosses
   */
  @javax.annotation.Nullable
  public Integer getLastTenLosses() {
    return lastTenLosses;
  }

  public void setLastTenLosses(Integer lastTenLosses) {
    this.lastTenLosses = lastTenLosses;
  }


  public Standing lastTenWins(Integer lastTenWins) {
    this.lastTenWins = lastTenWins;
    return this;
  }

  /**
   * Get lastTenWins
   * @return lastTenWins
   */
  @javax.annotation.Nullable
  public Integer getLastTenWins() {
    return lastTenWins;
  }

  public void setLastTenWins(Integer lastTenWins) {
    this.lastTenWins = lastTenWins;
  }


  public Standing losses(Integer losses) {
    this.losses = losses;
    return this;
  }

  /**
   * Get losses
   * @return losses
   */
  @javax.annotation.Nullable
  public Integer getLosses() {
    return losses;
  }

  public void setLosses(Integer losses) {
    this.losses = losses;
  }


  public Standing name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Standing percentage(BigDecimal percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentage() {
    return percentage;
  }

  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }


  public Standing pointsPerGameAgainst(BigDecimal pointsPerGameAgainst) {
    this.pointsPerGameAgainst = pointsPerGameAgainst;
    return this;
  }

  /**
   * Get pointsPerGameAgainst
   * @return pointsPerGameAgainst
   */
  @javax.annotation.Nullable
  public BigDecimal getPointsPerGameAgainst() {
    return pointsPerGameAgainst;
  }

  public void setPointsPerGameAgainst(BigDecimal pointsPerGameAgainst) {
    this.pointsPerGameAgainst = pointsPerGameAgainst;
  }


  public Standing pointsPerGameFor(BigDecimal pointsPerGameFor) {
    this.pointsPerGameFor = pointsPerGameFor;
    return this;
  }

  /**
   * Get pointsPerGameFor
   * @return pointsPerGameFor
   */
  @javax.annotation.Nullable
  public BigDecimal getPointsPerGameFor() {
    return pointsPerGameFor;
  }

  public void setPointsPerGameFor(BigDecimal pointsPerGameFor) {
    this.pointsPerGameFor = pointsPerGameFor;
  }


  public Standing season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Standing seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Standing streak(Integer streak) {
    this.streak = streak;
    return this;
  }

  /**
   * Get streak
   * @return streak
   */
  @javax.annotation.Nullable
  public Integer getStreak() {
    return streak;
  }

  public void setStreak(Integer streak) {
    this.streak = streak;
  }


  public Standing streakDescription(String streakDescription) {
    this.streakDescription = streakDescription;
    return this;
  }

  /**
   * Get streakDescription
   * @return streakDescription
   */
  @javax.annotation.Nullable
  public String getStreakDescription() {
    return streakDescription;
  }

  public void setStreakDescription(String streakDescription) {
    this.streakDescription = streakDescription;
  }


  public Standing teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Standing wins(Integer wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Standing standing = (Standing) o;
    return Objects.equals(this.awayLosses, standing.awayLosses) &&
        Objects.equals(this.awayWins, standing.awayWins) &&
        Objects.equals(this.city, standing.city) &&
        Objects.equals(this.conference, standing.conference) &&
        Objects.equals(this.conferenceLosses, standing.conferenceLosses) &&
        Objects.equals(this.conferenceRank, standing.conferenceRank) &&
        Objects.equals(this.conferenceWins, standing.conferenceWins) &&
        Objects.equals(this.division, standing.division) &&
        Objects.equals(this.divisionLosses, standing.divisionLosses) &&
        Objects.equals(this.divisionRank, standing.divisionRank) &&
        Objects.equals(this.divisionWins, standing.divisionWins) &&
        Objects.equals(this.gamesBack, standing.gamesBack) &&
        Objects.equals(this.globalTeamID, standing.globalTeamID) &&
        Objects.equals(this.homeLosses, standing.homeLosses) &&
        Objects.equals(this.homeWins, standing.homeWins) &&
        Objects.equals(this.key, standing.key) &&
        Objects.equals(this.lastTenLosses, standing.lastTenLosses) &&
        Objects.equals(this.lastTenWins, standing.lastTenWins) &&
        Objects.equals(this.losses, standing.losses) &&
        Objects.equals(this.name, standing.name) &&
        Objects.equals(this.percentage, standing.percentage) &&
        Objects.equals(this.pointsPerGameAgainst, standing.pointsPerGameAgainst) &&
        Objects.equals(this.pointsPerGameFor, standing.pointsPerGameFor) &&
        Objects.equals(this.season, standing.season) &&
        Objects.equals(this.seasonType, standing.seasonType) &&
        Objects.equals(this.streak, standing.streak) &&
        Objects.equals(this.streakDescription, standing.streakDescription) &&
        Objects.equals(this.teamID, standing.teamID) &&
        Objects.equals(this.wins, standing.wins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayLosses, awayWins, city, conference, conferenceLosses, conferenceRank, conferenceWins, division, divisionLosses, divisionRank, divisionWins, gamesBack, globalTeamID, homeLosses, homeWins, key, lastTenLosses, lastTenWins, losses, name, percentage, pointsPerGameAgainst, pointsPerGameFor, season, seasonType, streak, streakDescription, teamID, wins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Standing {\n");
    sb.append("    awayLosses: ").append(toIndentedString(awayLosses)).append("\n");
    sb.append("    awayWins: ").append(toIndentedString(awayWins)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    conferenceLosses: ").append(toIndentedString(conferenceLosses)).append("\n");
    sb.append("    conferenceRank: ").append(toIndentedString(conferenceRank)).append("\n");
    sb.append("    conferenceWins: ").append(toIndentedString(conferenceWins)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    divisionLosses: ").append(toIndentedString(divisionLosses)).append("\n");
    sb.append("    divisionRank: ").append(toIndentedString(divisionRank)).append("\n");
    sb.append("    divisionWins: ").append(toIndentedString(divisionWins)).append("\n");
    sb.append("    gamesBack: ").append(toIndentedString(gamesBack)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    homeLosses: ").append(toIndentedString(homeLosses)).append("\n");
    sb.append("    homeWins: ").append(toIndentedString(homeWins)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastTenLosses: ").append(toIndentedString(lastTenLosses)).append("\n");
    sb.append("    lastTenWins: ").append(toIndentedString(lastTenWins)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    pointsPerGameAgainst: ").append(toIndentedString(pointsPerGameAgainst)).append("\n");
    sb.append("    pointsPerGameFor: ").append(toIndentedString(pointsPerGameFor)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    streak: ").append(toIndentedString(streak)).append("\n");
    sb.append("    streakDescription: ").append(toIndentedString(streakDescription)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AwayLosses");
    openapiFields.add("AwayWins");
    openapiFields.add("City");
    openapiFields.add("Conference");
    openapiFields.add("ConferenceLosses");
    openapiFields.add("ConferenceRank");
    openapiFields.add("ConferenceWins");
    openapiFields.add("Division");
    openapiFields.add("DivisionLosses");
    openapiFields.add("DivisionRank");
    openapiFields.add("DivisionWins");
    openapiFields.add("GamesBack");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("HomeLosses");
    openapiFields.add("HomeWins");
    openapiFields.add("Key");
    openapiFields.add("LastTenLosses");
    openapiFields.add("LastTenWins");
    openapiFields.add("Losses");
    openapiFields.add("Name");
    openapiFields.add("Percentage");
    openapiFields.add("PointsPerGameAgainst");
    openapiFields.add("PointsPerGameFor");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Streak");
    openapiFields.add("StreakDescription");
    openapiFields.add("TeamID");
    openapiFields.add("Wins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Standing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Standing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Standing is not found in the empty JSON string", Standing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Standing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Standing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("Conference") != null && !jsonObj.get("Conference").isJsonNull()) && !jsonObj.get("Conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Conference").toString()));
      }
      if ((jsonObj.get("Division") != null && !jsonObj.get("Division").isJsonNull()) && !jsonObj.get("Division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Division").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("StreakDescription") != null && !jsonObj.get("StreakDescription").isJsonNull()) && !jsonObj.get("StreakDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreakDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreakDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Standing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Standing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Standing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Standing.class));

       return (TypeAdapter<T>) new TypeAdapter<Standing>() {
           @Override
           public void write(JsonWriter out, Standing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Standing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Standing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Standing
   * @throws IOException if the JSON string is invalid with respect to Standing
   */
  public static Standing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Standing.class);
  }

  /**
   * Convert an instance of Standing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

