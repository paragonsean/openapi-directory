/*
 * NBA v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DfsSlatePlayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:43.661436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DfsSlatePlayer {
  public static final String SERIALIZED_NAME_OPERATOR_PLAYER_I_D = "OperatorPlayerID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_PLAYER_I_D)
  private String operatorPlayerID;

  public static final String SERIALIZED_NAME_OPERATOR_PLAYER_NAME = "OperatorPlayerName";
  @SerializedName(SERIALIZED_NAME_OPERATOR_PLAYER_NAME)
  private String operatorPlayerName;

  public static final String SERIALIZED_NAME_OPERATOR_POSITION = "OperatorPosition";
  @SerializedName(SERIALIZED_NAME_OPERATOR_POSITION)
  private String operatorPosition;

  public static final String SERIALIZED_NAME_OPERATOR_ROSTER_SLOTS = "OperatorRosterSlots";
  @SerializedName(SERIALIZED_NAME_OPERATOR_ROSTER_SLOTS)
  private List<String> operatorRosterSlots = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATOR_SALARY = "OperatorSalary";
  @SerializedName(SERIALIZED_NAME_OPERATOR_SALARY)
  private Integer operatorSalary;

  public static final String SERIALIZED_NAME_OPERATOR_SLATE_PLAYER_I_D = "OperatorSlatePlayerID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_SLATE_PLAYER_I_D)
  private String operatorSlatePlayerID;

  public static final String SERIALIZED_NAME_PLAYER_GAME_PROJECTION_STAT_I_D = "PlayerGameProjectionStatID";
  @SerializedName(SERIALIZED_NAME_PLAYER_GAME_PROJECTION_STAT_I_D)
  private Integer playerGameProjectionStatID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_REMOVED_BY_OPERATOR = "RemovedByOperator";
  @SerializedName(SERIALIZED_NAME_REMOVED_BY_OPERATOR)
  private Boolean removedByOperator;

  public static final String SERIALIZED_NAME_SLATE_GAME_I_D = "SlateGameID";
  @SerializedName(SERIALIZED_NAME_SLATE_GAME_I_D)
  private Integer slateGameID;

  public static final String SERIALIZED_NAME_SLATE_I_D = "SlateID";
  @SerializedName(SERIALIZED_NAME_SLATE_I_D)
  private Integer slateID;

  public static final String SERIALIZED_NAME_SLATE_PLAYER_I_D = "SlatePlayerID";
  @SerializedName(SERIALIZED_NAME_SLATE_PLAYER_I_D)
  private Integer slatePlayerID;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public DfsSlatePlayer() {
  }

  public DfsSlatePlayer operatorPlayerID(String operatorPlayerID) {
    this.operatorPlayerID = operatorPlayerID;
    return this;
  }

  /**
   * Get operatorPlayerID
   * @return operatorPlayerID
   */
  @javax.annotation.Nullable
  public String getOperatorPlayerID() {
    return operatorPlayerID;
  }

  public void setOperatorPlayerID(String operatorPlayerID) {
    this.operatorPlayerID = operatorPlayerID;
  }


  public DfsSlatePlayer operatorPlayerName(String operatorPlayerName) {
    this.operatorPlayerName = operatorPlayerName;
    return this;
  }

  /**
   * Get operatorPlayerName
   * @return operatorPlayerName
   */
  @javax.annotation.Nullable
  public String getOperatorPlayerName() {
    return operatorPlayerName;
  }

  public void setOperatorPlayerName(String operatorPlayerName) {
    this.operatorPlayerName = operatorPlayerName;
  }


  public DfsSlatePlayer operatorPosition(String operatorPosition) {
    this.operatorPosition = operatorPosition;
    return this;
  }

  /**
   * Get operatorPosition
   * @return operatorPosition
   */
  @javax.annotation.Nullable
  public String getOperatorPosition() {
    return operatorPosition;
  }

  public void setOperatorPosition(String operatorPosition) {
    this.operatorPosition = operatorPosition;
  }


  public DfsSlatePlayer operatorRosterSlots(List<String> operatorRosterSlots) {
    this.operatorRosterSlots = operatorRosterSlots;
    return this;
  }

  public DfsSlatePlayer addOperatorRosterSlotsItem(String operatorRosterSlotsItem) {
    if (this.operatorRosterSlots == null) {
      this.operatorRosterSlots = new ArrayList<>();
    }
    this.operatorRosterSlots.add(operatorRosterSlotsItem);
    return this;
  }

  /**
   * Get operatorRosterSlots
   * @return operatorRosterSlots
   */
  @javax.annotation.Nullable
  public List<String> getOperatorRosterSlots() {
    return operatorRosterSlots;
  }

  public void setOperatorRosterSlots(List<String> operatorRosterSlots) {
    this.operatorRosterSlots = operatorRosterSlots;
  }


  public DfsSlatePlayer operatorSalary(Integer operatorSalary) {
    this.operatorSalary = operatorSalary;
    return this;
  }

  /**
   * Get operatorSalary
   * @return operatorSalary
   */
  @javax.annotation.Nullable
  public Integer getOperatorSalary() {
    return operatorSalary;
  }

  public void setOperatorSalary(Integer operatorSalary) {
    this.operatorSalary = operatorSalary;
  }


  public DfsSlatePlayer operatorSlatePlayerID(String operatorSlatePlayerID) {
    this.operatorSlatePlayerID = operatorSlatePlayerID;
    return this;
  }

  /**
   * Get operatorSlatePlayerID
   * @return operatorSlatePlayerID
   */
  @javax.annotation.Nullable
  public String getOperatorSlatePlayerID() {
    return operatorSlatePlayerID;
  }

  public void setOperatorSlatePlayerID(String operatorSlatePlayerID) {
    this.operatorSlatePlayerID = operatorSlatePlayerID;
  }


  public DfsSlatePlayer playerGameProjectionStatID(Integer playerGameProjectionStatID) {
    this.playerGameProjectionStatID = playerGameProjectionStatID;
    return this;
  }

  /**
   * Get playerGameProjectionStatID
   * @return playerGameProjectionStatID
   */
  @javax.annotation.Nullable
  public Integer getPlayerGameProjectionStatID() {
    return playerGameProjectionStatID;
  }

  public void setPlayerGameProjectionStatID(Integer playerGameProjectionStatID) {
    this.playerGameProjectionStatID = playerGameProjectionStatID;
  }


  public DfsSlatePlayer playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public DfsSlatePlayer removedByOperator(Boolean removedByOperator) {
    this.removedByOperator = removedByOperator;
    return this;
  }

  /**
   * Get removedByOperator
   * @return removedByOperator
   */
  @javax.annotation.Nullable
  public Boolean getRemovedByOperator() {
    return removedByOperator;
  }

  public void setRemovedByOperator(Boolean removedByOperator) {
    this.removedByOperator = removedByOperator;
  }


  public DfsSlatePlayer slateGameID(Integer slateGameID) {
    this.slateGameID = slateGameID;
    return this;
  }

  /**
   * Get slateGameID
   * @return slateGameID
   */
  @javax.annotation.Nullable
  public Integer getSlateGameID() {
    return slateGameID;
  }

  public void setSlateGameID(Integer slateGameID) {
    this.slateGameID = slateGameID;
  }


  public DfsSlatePlayer slateID(Integer slateID) {
    this.slateID = slateID;
    return this;
  }

  /**
   * Get slateID
   * @return slateID
   */
  @javax.annotation.Nullable
  public Integer getSlateID() {
    return slateID;
  }

  public void setSlateID(Integer slateID) {
    this.slateID = slateID;
  }


  public DfsSlatePlayer slatePlayerID(Integer slatePlayerID) {
    this.slatePlayerID = slatePlayerID;
    return this;
  }

  /**
   * Get slatePlayerID
   * @return slatePlayerID
   */
  @javax.annotation.Nullable
  public Integer getSlatePlayerID() {
    return slatePlayerID;
  }

  public void setSlatePlayerID(Integer slatePlayerID) {
    this.slatePlayerID = slatePlayerID;
  }


  public DfsSlatePlayer team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public DfsSlatePlayer teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsSlatePlayer dfsSlatePlayer = (DfsSlatePlayer) o;
    return Objects.equals(this.operatorPlayerID, dfsSlatePlayer.operatorPlayerID) &&
        Objects.equals(this.operatorPlayerName, dfsSlatePlayer.operatorPlayerName) &&
        Objects.equals(this.operatorPosition, dfsSlatePlayer.operatorPosition) &&
        Objects.equals(this.operatorRosterSlots, dfsSlatePlayer.operatorRosterSlots) &&
        Objects.equals(this.operatorSalary, dfsSlatePlayer.operatorSalary) &&
        Objects.equals(this.operatorSlatePlayerID, dfsSlatePlayer.operatorSlatePlayerID) &&
        Objects.equals(this.playerGameProjectionStatID, dfsSlatePlayer.playerGameProjectionStatID) &&
        Objects.equals(this.playerID, dfsSlatePlayer.playerID) &&
        Objects.equals(this.removedByOperator, dfsSlatePlayer.removedByOperator) &&
        Objects.equals(this.slateGameID, dfsSlatePlayer.slateGameID) &&
        Objects.equals(this.slateID, dfsSlatePlayer.slateID) &&
        Objects.equals(this.slatePlayerID, dfsSlatePlayer.slatePlayerID) &&
        Objects.equals(this.team, dfsSlatePlayer.team) &&
        Objects.equals(this.teamID, dfsSlatePlayer.teamID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatorPlayerID, operatorPlayerName, operatorPosition, operatorRosterSlots, operatorSalary, operatorSlatePlayerID, playerGameProjectionStatID, playerID, removedByOperator, slateGameID, slateID, slatePlayerID, team, teamID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsSlatePlayer {\n");
    sb.append("    operatorPlayerID: ").append(toIndentedString(operatorPlayerID)).append("\n");
    sb.append("    operatorPlayerName: ").append(toIndentedString(operatorPlayerName)).append("\n");
    sb.append("    operatorPosition: ").append(toIndentedString(operatorPosition)).append("\n");
    sb.append("    operatorRosterSlots: ").append(toIndentedString(operatorRosterSlots)).append("\n");
    sb.append("    operatorSalary: ").append(toIndentedString(operatorSalary)).append("\n");
    sb.append("    operatorSlatePlayerID: ").append(toIndentedString(operatorSlatePlayerID)).append("\n");
    sb.append("    playerGameProjectionStatID: ").append(toIndentedString(playerGameProjectionStatID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    removedByOperator: ").append(toIndentedString(removedByOperator)).append("\n");
    sb.append("    slateGameID: ").append(toIndentedString(slateGameID)).append("\n");
    sb.append("    slateID: ").append(toIndentedString(slateID)).append("\n");
    sb.append("    slatePlayerID: ").append(toIndentedString(slatePlayerID)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OperatorPlayerID");
    openapiFields.add("OperatorPlayerName");
    openapiFields.add("OperatorPosition");
    openapiFields.add("OperatorRosterSlots");
    openapiFields.add("OperatorSalary");
    openapiFields.add("OperatorSlatePlayerID");
    openapiFields.add("PlayerGameProjectionStatID");
    openapiFields.add("PlayerID");
    openapiFields.add("RemovedByOperator");
    openapiFields.add("SlateGameID");
    openapiFields.add("SlateID");
    openapiFields.add("SlatePlayerID");
    openapiFields.add("Team");
    openapiFields.add("TeamID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DfsSlatePlayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DfsSlatePlayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DfsSlatePlayer is not found in the empty JSON string", DfsSlatePlayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DfsSlatePlayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DfsSlatePlayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("OperatorPlayerID") != null && !jsonObj.get("OperatorPlayerID").isJsonNull()) && !jsonObj.get("OperatorPlayerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorPlayerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorPlayerID").toString()));
      }
      if ((jsonObj.get("OperatorPlayerName") != null && !jsonObj.get("OperatorPlayerName").isJsonNull()) && !jsonObj.get("OperatorPlayerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorPlayerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorPlayerName").toString()));
      }
      if ((jsonObj.get("OperatorPosition") != null && !jsonObj.get("OperatorPosition").isJsonNull()) && !jsonObj.get("OperatorPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorPosition").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("OperatorRosterSlots") != null && !jsonObj.get("OperatorRosterSlots").isJsonNull() && !jsonObj.get("OperatorRosterSlots").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorRosterSlots` to be an array in the JSON string but got `%s`", jsonObj.get("OperatorRosterSlots").toString()));
      }
      if ((jsonObj.get("OperatorSlatePlayerID") != null && !jsonObj.get("OperatorSlatePlayerID").isJsonNull()) && !jsonObj.get("OperatorSlatePlayerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorSlatePlayerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorSlatePlayerID").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DfsSlatePlayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DfsSlatePlayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DfsSlatePlayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DfsSlatePlayer.class));

       return (TypeAdapter<T>) new TypeAdapter<DfsSlatePlayer>() {
           @Override
           public void write(JsonWriter out, DfsSlatePlayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DfsSlatePlayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DfsSlatePlayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DfsSlatePlayer
   * @throws IOException if the JSON string is invalid with respect to DfsSlatePlayer
   */
  public static DfsSlatePlayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DfsSlatePlayer.class);
  }

  /**
   * Convert an instance of DfsSlatePlayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

