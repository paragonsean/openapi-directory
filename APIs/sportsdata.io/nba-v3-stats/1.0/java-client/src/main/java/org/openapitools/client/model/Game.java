/*
 * NBA v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Quarter;
import org.openapitools.client.model.Series;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Game
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:43.661436-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Game {
  public static final String SERIALIZED_NAME_ALTERNATE_I_D = "AlternateID";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_I_D)
  private Integer alternateID;

  public static final String SERIALIZED_NAME_ATTENDANCE = "Attendance";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE)
  private Integer attendance;

  public static final String SERIALIZED_NAME_AWAY_ROTATION_NUMBER = "AwayRotationNumber";
  @SerializedName(SERIALIZED_NAME_AWAY_ROTATION_NUMBER)
  private Integer awayRotationNumber;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "AwayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_AWAY_TEAM_I_D = "AwayTeamID";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_I_D)
  private Integer awayTeamID;

  public static final String SERIALIZED_NAME_AWAY_TEAM_MONEY_LINE = "AwayTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_MONEY_LINE)
  private Integer awayTeamMoneyLine;

  public static final String SERIALIZED_NAME_AWAY_TEAM_SCORE = "AwayTeamScore";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_SCORE)
  private Integer awayTeamScore;

  public static final String SERIALIZED_NAME_CHANNEL = "Channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CREW_CHIEF_I_D = "CrewChiefID";
  @SerializedName(SERIALIZED_NAME_CREW_CHIEF_I_D)
  private Integer crewChiefID;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DATE_TIME_U_T_C = "DateTimeUTC";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_U_T_C)
  private String dateTimeUTC;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_GAME_END_DATE_TIME = "GameEndDateTime";
  @SerializedName(SERIALIZED_NAME_GAME_END_DATE_TIME)
  private String gameEndDateTime;

  public static final String SERIALIZED_NAME_GAME_I_D = "GameID";
  @SerializedName(SERIALIZED_NAME_GAME_I_D)
  private Integer gameID;

  public static final String SERIALIZED_NAME_GLOBAL_AWAY_TEAM_I_D = "GlobalAwayTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_AWAY_TEAM_I_D)
  private Integer globalAwayTeamID;

  public static final String SERIALIZED_NAME_GLOBAL_GAME_I_D = "GlobalGameID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_GAME_I_D)
  private Integer globalGameID;

  public static final String SERIALIZED_NAME_GLOBAL_HOME_TEAM_I_D = "GlobalHomeTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_HOME_TEAM_I_D)
  private Integer globalHomeTeamID;

  public static final String SERIALIZED_NAME_HOME_ROTATION_NUMBER = "HomeRotationNumber";
  @SerializedName(SERIALIZED_NAME_HOME_ROTATION_NUMBER)
  private Integer homeRotationNumber;

  public static final String SERIALIZED_NAME_HOME_TEAM = "HomeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_HOME_TEAM_I_D = "HomeTeamID";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_I_D)
  private Integer homeTeamID;

  public static final String SERIALIZED_NAME_HOME_TEAM_MONEY_LINE = "HomeTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_MONEY_LINE)
  private Integer homeTeamMoneyLine;

  public static final String SERIALIZED_NAME_HOME_TEAM_SCORE = "HomeTeamScore";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_SCORE)
  private Integer homeTeamScore;

  public static final String SERIALIZED_NAME_IS_CLOSED = "IsClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_LAST_PLAY = "LastPlay";
  @SerializedName(SERIALIZED_NAME_LAST_PLAY)
  private String lastPlay;

  public static final String SERIALIZED_NAME_NEUTRAL_VENUE = "NeutralVenue";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_VENUE)
  private Boolean neutralVenue;

  public static final String SERIALIZED_NAME_OVER_PAYOUT = "OverPayout";
  @SerializedName(SERIALIZED_NAME_OVER_PAYOUT)
  private Integer overPayout;

  public static final String SERIALIZED_NAME_OVER_UNDER = "OverUnder";
  @SerializedName(SERIALIZED_NAME_OVER_UNDER)
  private BigDecimal overUnder;

  public static final String SERIALIZED_NAME_POINT_SPREAD = "PointSpread";
  @SerializedName(SERIALIZED_NAME_POINT_SPREAD)
  private BigDecimal pointSpread;

  public static final String SERIALIZED_NAME_POINT_SPREAD_AWAY_TEAM_MONEY_LINE = "PointSpreadAwayTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_POINT_SPREAD_AWAY_TEAM_MONEY_LINE)
  private Integer pointSpreadAwayTeamMoneyLine;

  public static final String SERIALIZED_NAME_POINT_SPREAD_HOME_TEAM_MONEY_LINE = "PointSpreadHomeTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_POINT_SPREAD_HOME_TEAM_MONEY_LINE)
  private Integer pointSpreadHomeTeamMoneyLine;

  public static final String SERIALIZED_NAME_QUARTER = "Quarter";
  @SerializedName(SERIALIZED_NAME_QUARTER)
  private String quarter;

  public static final String SERIALIZED_NAME_QUARTERS = "Quarters";
  @SerializedName(SERIALIZED_NAME_QUARTERS)
  private List<Quarter> quarters = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFEREE_I_D = "RefereeID";
  @SerializedName(SERIALIZED_NAME_REFEREE_I_D)
  private Integer refereeID;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_SERIES_INFO = "SeriesInfo";
  @SerializedName(SERIALIZED_NAME_SERIES_INFO)
  private Series seriesInfo;

  public static final String SERIALIZED_NAME_STADIUM_I_D = "StadiumID";
  @SerializedName(SERIALIZED_NAME_STADIUM_I_D)
  private Integer stadiumID;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIME_REMAINING_MINUTES = "TimeRemainingMinutes";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING_MINUTES)
  private Integer timeRemainingMinutes;

  public static final String SERIALIZED_NAME_TIME_REMAINING_SECONDS = "TimeRemainingSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING_SECONDS)
  private Integer timeRemainingSeconds;

  public static final String SERIALIZED_NAME_UMPIRE_I_D = "UmpireID";
  @SerializedName(SERIALIZED_NAME_UMPIRE_I_D)
  private Integer umpireID;

  public static final String SERIALIZED_NAME_UNDER_PAYOUT = "UnderPayout";
  @SerializedName(SERIALIZED_NAME_UNDER_PAYOUT)
  private Integer underPayout;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public Game() {
  }

  public Game alternateID(Integer alternateID) {
    this.alternateID = alternateID;
    return this;
  }

  /**
   * Get alternateID
   * @return alternateID
   */
  @javax.annotation.Nullable
  public Integer getAlternateID() {
    return alternateID;
  }

  public void setAlternateID(Integer alternateID) {
    this.alternateID = alternateID;
  }


  public Game attendance(Integer attendance) {
    this.attendance = attendance;
    return this;
  }

  /**
   * Get attendance
   * @return attendance
   */
  @javax.annotation.Nullable
  public Integer getAttendance() {
    return attendance;
  }

  public void setAttendance(Integer attendance) {
    this.attendance = attendance;
  }


  public Game awayRotationNumber(Integer awayRotationNumber) {
    this.awayRotationNumber = awayRotationNumber;
    return this;
  }

  /**
   * Get awayRotationNumber
   * @return awayRotationNumber
   */
  @javax.annotation.Nullable
  public Integer getAwayRotationNumber() {
    return awayRotationNumber;
  }

  public void setAwayRotationNumber(Integer awayRotationNumber) {
    this.awayRotationNumber = awayRotationNumber;
  }


  public Game awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public Game awayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
    return this;
  }

  /**
   * Get awayTeamID
   * @return awayTeamID
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamID() {
    return awayTeamID;
  }

  public void setAwayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
  }


  public Game awayTeamMoneyLine(Integer awayTeamMoneyLine) {
    this.awayTeamMoneyLine = awayTeamMoneyLine;
    return this;
  }

  /**
   * Get awayTeamMoneyLine
   * @return awayTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamMoneyLine() {
    return awayTeamMoneyLine;
  }

  public void setAwayTeamMoneyLine(Integer awayTeamMoneyLine) {
    this.awayTeamMoneyLine = awayTeamMoneyLine;
  }


  public Game awayTeamScore(Integer awayTeamScore) {
    this.awayTeamScore = awayTeamScore;
    return this;
  }

  /**
   * Get awayTeamScore
   * @return awayTeamScore
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamScore() {
    return awayTeamScore;
  }

  public void setAwayTeamScore(Integer awayTeamScore) {
    this.awayTeamScore = awayTeamScore;
  }


  public Game channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public Game crewChiefID(Integer crewChiefID) {
    this.crewChiefID = crewChiefID;
    return this;
  }

  /**
   * Get crewChiefID
   * @return crewChiefID
   */
  @javax.annotation.Nullable
  public Integer getCrewChiefID() {
    return crewChiefID;
  }

  public void setCrewChiefID(Integer crewChiefID) {
    this.crewChiefID = crewChiefID;
  }


  public Game dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public Game dateTimeUTC(String dateTimeUTC) {
    this.dateTimeUTC = dateTimeUTC;
    return this;
  }

  /**
   * Get dateTimeUTC
   * @return dateTimeUTC
   */
  @javax.annotation.Nullable
  public String getDateTimeUTC() {
    return dateTimeUTC;
  }

  public void setDateTimeUTC(String dateTimeUTC) {
    this.dateTimeUTC = dateTimeUTC;
  }


  public Game day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Game gameEndDateTime(String gameEndDateTime) {
    this.gameEndDateTime = gameEndDateTime;
    return this;
  }

  /**
   * Get gameEndDateTime
   * @return gameEndDateTime
   */
  @javax.annotation.Nullable
  public String getGameEndDateTime() {
    return gameEndDateTime;
  }

  public void setGameEndDateTime(String gameEndDateTime) {
    this.gameEndDateTime = gameEndDateTime;
  }


  public Game gameID(Integer gameID) {
    this.gameID = gameID;
    return this;
  }

  /**
   * Get gameID
   * @return gameID
   */
  @javax.annotation.Nullable
  public Integer getGameID() {
    return gameID;
  }

  public void setGameID(Integer gameID) {
    this.gameID = gameID;
  }


  public Game globalAwayTeamID(Integer globalAwayTeamID) {
    this.globalAwayTeamID = globalAwayTeamID;
    return this;
  }

  /**
   * Get globalAwayTeamID
   * @return globalAwayTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalAwayTeamID() {
    return globalAwayTeamID;
  }

  public void setGlobalAwayTeamID(Integer globalAwayTeamID) {
    this.globalAwayTeamID = globalAwayTeamID;
  }


  public Game globalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
    return this;
  }

  /**
   * Get globalGameID
   * @return globalGameID
   */
  @javax.annotation.Nullable
  public Integer getGlobalGameID() {
    return globalGameID;
  }

  public void setGlobalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
  }


  public Game globalHomeTeamID(Integer globalHomeTeamID) {
    this.globalHomeTeamID = globalHomeTeamID;
    return this;
  }

  /**
   * Get globalHomeTeamID
   * @return globalHomeTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalHomeTeamID() {
    return globalHomeTeamID;
  }

  public void setGlobalHomeTeamID(Integer globalHomeTeamID) {
    this.globalHomeTeamID = globalHomeTeamID;
  }


  public Game homeRotationNumber(Integer homeRotationNumber) {
    this.homeRotationNumber = homeRotationNumber;
    return this;
  }

  /**
   * Get homeRotationNumber
   * @return homeRotationNumber
   */
  @javax.annotation.Nullable
  public Integer getHomeRotationNumber() {
    return homeRotationNumber;
  }

  public void setHomeRotationNumber(Integer homeRotationNumber) {
    this.homeRotationNumber = homeRotationNumber;
  }


  public Game homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public Game homeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
    return this;
  }

  /**
   * Get homeTeamID
   * @return homeTeamID
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamID() {
    return homeTeamID;
  }

  public void setHomeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
  }


  public Game homeTeamMoneyLine(Integer homeTeamMoneyLine) {
    this.homeTeamMoneyLine = homeTeamMoneyLine;
    return this;
  }

  /**
   * Get homeTeamMoneyLine
   * @return homeTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamMoneyLine() {
    return homeTeamMoneyLine;
  }

  public void setHomeTeamMoneyLine(Integer homeTeamMoneyLine) {
    this.homeTeamMoneyLine = homeTeamMoneyLine;
  }


  public Game homeTeamScore(Integer homeTeamScore) {
    this.homeTeamScore = homeTeamScore;
    return this;
  }

  /**
   * Get homeTeamScore
   * @return homeTeamScore
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamScore() {
    return homeTeamScore;
  }

  public void setHomeTeamScore(Integer homeTeamScore) {
    this.homeTeamScore = homeTeamScore;
  }


  public Game isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public Game lastPlay(String lastPlay) {
    this.lastPlay = lastPlay;
    return this;
  }

  /**
   * Get lastPlay
   * @return lastPlay
   */
  @javax.annotation.Nullable
  public String getLastPlay() {
    return lastPlay;
  }

  public void setLastPlay(String lastPlay) {
    this.lastPlay = lastPlay;
  }


  public Game neutralVenue(Boolean neutralVenue) {
    this.neutralVenue = neutralVenue;
    return this;
  }

  /**
   * Get neutralVenue
   * @return neutralVenue
   */
  @javax.annotation.Nullable
  public Boolean getNeutralVenue() {
    return neutralVenue;
  }

  public void setNeutralVenue(Boolean neutralVenue) {
    this.neutralVenue = neutralVenue;
  }


  public Game overPayout(Integer overPayout) {
    this.overPayout = overPayout;
    return this;
  }

  /**
   * Get overPayout
   * @return overPayout
   */
  @javax.annotation.Nullable
  public Integer getOverPayout() {
    return overPayout;
  }

  public void setOverPayout(Integer overPayout) {
    this.overPayout = overPayout;
  }


  public Game overUnder(BigDecimal overUnder) {
    this.overUnder = overUnder;
    return this;
  }

  /**
   * Get overUnder
   * @return overUnder
   */
  @javax.annotation.Nullable
  public BigDecimal getOverUnder() {
    return overUnder;
  }

  public void setOverUnder(BigDecimal overUnder) {
    this.overUnder = overUnder;
  }


  public Game pointSpread(BigDecimal pointSpread) {
    this.pointSpread = pointSpread;
    return this;
  }

  /**
   * Get pointSpread
   * @return pointSpread
   */
  @javax.annotation.Nullable
  public BigDecimal getPointSpread() {
    return pointSpread;
  }

  public void setPointSpread(BigDecimal pointSpread) {
    this.pointSpread = pointSpread;
  }


  public Game pointSpreadAwayTeamMoneyLine(Integer pointSpreadAwayTeamMoneyLine) {
    this.pointSpreadAwayTeamMoneyLine = pointSpreadAwayTeamMoneyLine;
    return this;
  }

  /**
   * Get pointSpreadAwayTeamMoneyLine
   * @return pointSpreadAwayTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getPointSpreadAwayTeamMoneyLine() {
    return pointSpreadAwayTeamMoneyLine;
  }

  public void setPointSpreadAwayTeamMoneyLine(Integer pointSpreadAwayTeamMoneyLine) {
    this.pointSpreadAwayTeamMoneyLine = pointSpreadAwayTeamMoneyLine;
  }


  public Game pointSpreadHomeTeamMoneyLine(Integer pointSpreadHomeTeamMoneyLine) {
    this.pointSpreadHomeTeamMoneyLine = pointSpreadHomeTeamMoneyLine;
    return this;
  }

  /**
   * Get pointSpreadHomeTeamMoneyLine
   * @return pointSpreadHomeTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getPointSpreadHomeTeamMoneyLine() {
    return pointSpreadHomeTeamMoneyLine;
  }

  public void setPointSpreadHomeTeamMoneyLine(Integer pointSpreadHomeTeamMoneyLine) {
    this.pointSpreadHomeTeamMoneyLine = pointSpreadHomeTeamMoneyLine;
  }


  public Game quarter(String quarter) {
    this.quarter = quarter;
    return this;
  }

  /**
   * Get quarter
   * @return quarter
   */
  @javax.annotation.Nullable
  public String getQuarter() {
    return quarter;
  }

  public void setQuarter(String quarter) {
    this.quarter = quarter;
  }


  public Game quarters(List<Quarter> quarters) {
    this.quarters = quarters;
    return this;
  }

  public Game addQuartersItem(Quarter quartersItem) {
    if (this.quarters == null) {
      this.quarters = new ArrayList<>();
    }
    this.quarters.add(quartersItem);
    return this;
  }

  /**
   * Get quarters
   * @return quarters
   */
  @javax.annotation.Nullable
  public List<Quarter> getQuarters() {
    return quarters;
  }

  public void setQuarters(List<Quarter> quarters) {
    this.quarters = quarters;
  }


  public Game refereeID(Integer refereeID) {
    this.refereeID = refereeID;
    return this;
  }

  /**
   * Get refereeID
   * @return refereeID
   */
  @javax.annotation.Nullable
  public Integer getRefereeID() {
    return refereeID;
  }

  public void setRefereeID(Integer refereeID) {
    this.refereeID = refereeID;
  }


  public Game season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Game seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Game seriesInfo(Series seriesInfo) {
    this.seriesInfo = seriesInfo;
    return this;
  }

  /**
   * Get seriesInfo
   * @return seriesInfo
   */
  @javax.annotation.Nullable
  public Series getSeriesInfo() {
    return seriesInfo;
  }

  public void setSeriesInfo(Series seriesInfo) {
    this.seriesInfo = seriesInfo;
  }


  public Game stadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
    return this;
  }

  /**
   * Get stadiumID
   * @return stadiumID
   */
  @javax.annotation.Nullable
  public Integer getStadiumID() {
    return stadiumID;
  }

  public void setStadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
  }


  public Game status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Game timeRemainingMinutes(Integer timeRemainingMinutes) {
    this.timeRemainingMinutes = timeRemainingMinutes;
    return this;
  }

  /**
   * Get timeRemainingMinutes
   * @return timeRemainingMinutes
   */
  @javax.annotation.Nullable
  public Integer getTimeRemainingMinutes() {
    return timeRemainingMinutes;
  }

  public void setTimeRemainingMinutes(Integer timeRemainingMinutes) {
    this.timeRemainingMinutes = timeRemainingMinutes;
  }


  public Game timeRemainingSeconds(Integer timeRemainingSeconds) {
    this.timeRemainingSeconds = timeRemainingSeconds;
    return this;
  }

  /**
   * Get timeRemainingSeconds
   * @return timeRemainingSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeRemainingSeconds() {
    return timeRemainingSeconds;
  }

  public void setTimeRemainingSeconds(Integer timeRemainingSeconds) {
    this.timeRemainingSeconds = timeRemainingSeconds;
  }


  public Game umpireID(Integer umpireID) {
    this.umpireID = umpireID;
    return this;
  }

  /**
   * Get umpireID
   * @return umpireID
   */
  @javax.annotation.Nullable
  public Integer getUmpireID() {
    return umpireID;
  }

  public void setUmpireID(Integer umpireID) {
    this.umpireID = umpireID;
  }


  public Game underPayout(Integer underPayout) {
    this.underPayout = underPayout;
    return this;
  }

  /**
   * Get underPayout
   * @return underPayout
   */
  @javax.annotation.Nullable
  public Integer getUnderPayout() {
    return underPayout;
  }

  public void setUnderPayout(Integer underPayout) {
    this.underPayout = underPayout;
  }


  public Game updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Game game = (Game) o;
    return Objects.equals(this.alternateID, game.alternateID) &&
        Objects.equals(this.attendance, game.attendance) &&
        Objects.equals(this.awayRotationNumber, game.awayRotationNumber) &&
        Objects.equals(this.awayTeam, game.awayTeam) &&
        Objects.equals(this.awayTeamID, game.awayTeamID) &&
        Objects.equals(this.awayTeamMoneyLine, game.awayTeamMoneyLine) &&
        Objects.equals(this.awayTeamScore, game.awayTeamScore) &&
        Objects.equals(this.channel, game.channel) &&
        Objects.equals(this.crewChiefID, game.crewChiefID) &&
        Objects.equals(this.dateTime, game.dateTime) &&
        Objects.equals(this.dateTimeUTC, game.dateTimeUTC) &&
        Objects.equals(this.day, game.day) &&
        Objects.equals(this.gameEndDateTime, game.gameEndDateTime) &&
        Objects.equals(this.gameID, game.gameID) &&
        Objects.equals(this.globalAwayTeamID, game.globalAwayTeamID) &&
        Objects.equals(this.globalGameID, game.globalGameID) &&
        Objects.equals(this.globalHomeTeamID, game.globalHomeTeamID) &&
        Objects.equals(this.homeRotationNumber, game.homeRotationNumber) &&
        Objects.equals(this.homeTeam, game.homeTeam) &&
        Objects.equals(this.homeTeamID, game.homeTeamID) &&
        Objects.equals(this.homeTeamMoneyLine, game.homeTeamMoneyLine) &&
        Objects.equals(this.homeTeamScore, game.homeTeamScore) &&
        Objects.equals(this.isClosed, game.isClosed) &&
        Objects.equals(this.lastPlay, game.lastPlay) &&
        Objects.equals(this.neutralVenue, game.neutralVenue) &&
        Objects.equals(this.overPayout, game.overPayout) &&
        Objects.equals(this.overUnder, game.overUnder) &&
        Objects.equals(this.pointSpread, game.pointSpread) &&
        Objects.equals(this.pointSpreadAwayTeamMoneyLine, game.pointSpreadAwayTeamMoneyLine) &&
        Objects.equals(this.pointSpreadHomeTeamMoneyLine, game.pointSpreadHomeTeamMoneyLine) &&
        Objects.equals(this.quarter, game.quarter) &&
        Objects.equals(this.quarters, game.quarters) &&
        Objects.equals(this.refereeID, game.refereeID) &&
        Objects.equals(this.season, game.season) &&
        Objects.equals(this.seasonType, game.seasonType) &&
        Objects.equals(this.seriesInfo, game.seriesInfo) &&
        Objects.equals(this.stadiumID, game.stadiumID) &&
        Objects.equals(this.status, game.status) &&
        Objects.equals(this.timeRemainingMinutes, game.timeRemainingMinutes) &&
        Objects.equals(this.timeRemainingSeconds, game.timeRemainingSeconds) &&
        Objects.equals(this.umpireID, game.umpireID) &&
        Objects.equals(this.underPayout, game.underPayout) &&
        Objects.equals(this.updated, game.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateID, attendance, awayRotationNumber, awayTeam, awayTeamID, awayTeamMoneyLine, awayTeamScore, channel, crewChiefID, dateTime, dateTimeUTC, day, gameEndDateTime, gameID, globalAwayTeamID, globalGameID, globalHomeTeamID, homeRotationNumber, homeTeam, homeTeamID, homeTeamMoneyLine, homeTeamScore, isClosed, lastPlay, neutralVenue, overPayout, overUnder, pointSpread, pointSpreadAwayTeamMoneyLine, pointSpreadHomeTeamMoneyLine, quarter, quarters, refereeID, season, seasonType, seriesInfo, stadiumID, status, timeRemainingMinutes, timeRemainingSeconds, umpireID, underPayout, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Game {\n");
    sb.append("    alternateID: ").append(toIndentedString(alternateID)).append("\n");
    sb.append("    attendance: ").append(toIndentedString(attendance)).append("\n");
    sb.append("    awayRotationNumber: ").append(toIndentedString(awayRotationNumber)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    awayTeamID: ").append(toIndentedString(awayTeamID)).append("\n");
    sb.append("    awayTeamMoneyLine: ").append(toIndentedString(awayTeamMoneyLine)).append("\n");
    sb.append("    awayTeamScore: ").append(toIndentedString(awayTeamScore)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    crewChiefID: ").append(toIndentedString(crewChiefID)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    dateTimeUTC: ").append(toIndentedString(dateTimeUTC)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    gameEndDateTime: ").append(toIndentedString(gameEndDateTime)).append("\n");
    sb.append("    gameID: ").append(toIndentedString(gameID)).append("\n");
    sb.append("    globalAwayTeamID: ").append(toIndentedString(globalAwayTeamID)).append("\n");
    sb.append("    globalGameID: ").append(toIndentedString(globalGameID)).append("\n");
    sb.append("    globalHomeTeamID: ").append(toIndentedString(globalHomeTeamID)).append("\n");
    sb.append("    homeRotationNumber: ").append(toIndentedString(homeRotationNumber)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    homeTeamID: ").append(toIndentedString(homeTeamID)).append("\n");
    sb.append("    homeTeamMoneyLine: ").append(toIndentedString(homeTeamMoneyLine)).append("\n");
    sb.append("    homeTeamScore: ").append(toIndentedString(homeTeamScore)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    lastPlay: ").append(toIndentedString(lastPlay)).append("\n");
    sb.append("    neutralVenue: ").append(toIndentedString(neutralVenue)).append("\n");
    sb.append("    overPayout: ").append(toIndentedString(overPayout)).append("\n");
    sb.append("    overUnder: ").append(toIndentedString(overUnder)).append("\n");
    sb.append("    pointSpread: ").append(toIndentedString(pointSpread)).append("\n");
    sb.append("    pointSpreadAwayTeamMoneyLine: ").append(toIndentedString(pointSpreadAwayTeamMoneyLine)).append("\n");
    sb.append("    pointSpreadHomeTeamMoneyLine: ").append(toIndentedString(pointSpreadHomeTeamMoneyLine)).append("\n");
    sb.append("    quarter: ").append(toIndentedString(quarter)).append("\n");
    sb.append("    quarters: ").append(toIndentedString(quarters)).append("\n");
    sb.append("    refereeID: ").append(toIndentedString(refereeID)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    seriesInfo: ").append(toIndentedString(seriesInfo)).append("\n");
    sb.append("    stadiumID: ").append(toIndentedString(stadiumID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeRemainingMinutes: ").append(toIndentedString(timeRemainingMinutes)).append("\n");
    sb.append("    timeRemainingSeconds: ").append(toIndentedString(timeRemainingSeconds)).append("\n");
    sb.append("    umpireID: ").append(toIndentedString(umpireID)).append("\n");
    sb.append("    underPayout: ").append(toIndentedString(underPayout)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlternateID");
    openapiFields.add("Attendance");
    openapiFields.add("AwayRotationNumber");
    openapiFields.add("AwayTeam");
    openapiFields.add("AwayTeamID");
    openapiFields.add("AwayTeamMoneyLine");
    openapiFields.add("AwayTeamScore");
    openapiFields.add("Channel");
    openapiFields.add("CrewChiefID");
    openapiFields.add("DateTime");
    openapiFields.add("DateTimeUTC");
    openapiFields.add("Day");
    openapiFields.add("GameEndDateTime");
    openapiFields.add("GameID");
    openapiFields.add("GlobalAwayTeamID");
    openapiFields.add("GlobalGameID");
    openapiFields.add("GlobalHomeTeamID");
    openapiFields.add("HomeRotationNumber");
    openapiFields.add("HomeTeam");
    openapiFields.add("HomeTeamID");
    openapiFields.add("HomeTeamMoneyLine");
    openapiFields.add("HomeTeamScore");
    openapiFields.add("IsClosed");
    openapiFields.add("LastPlay");
    openapiFields.add("NeutralVenue");
    openapiFields.add("OverPayout");
    openapiFields.add("OverUnder");
    openapiFields.add("PointSpread");
    openapiFields.add("PointSpreadAwayTeamMoneyLine");
    openapiFields.add("PointSpreadHomeTeamMoneyLine");
    openapiFields.add("Quarter");
    openapiFields.add("Quarters");
    openapiFields.add("RefereeID");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("SeriesInfo");
    openapiFields.add("StadiumID");
    openapiFields.add("Status");
    openapiFields.add("TimeRemainingMinutes");
    openapiFields.add("TimeRemainingSeconds");
    openapiFields.add("UmpireID");
    openapiFields.add("UnderPayout");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Game
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Game.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Game is not found in the empty JSON string", Game.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Game.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Game` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AwayTeam") != null && !jsonObj.get("AwayTeam").isJsonNull()) && !jsonObj.get("AwayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeam").toString()));
      }
      if ((jsonObj.get("Channel") != null && !jsonObj.get("Channel").isJsonNull()) && !jsonObj.get("Channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Channel").toString()));
      }
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("DateTimeUTC") != null && !jsonObj.get("DateTimeUTC").isJsonNull()) && !jsonObj.get("DateTimeUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTimeUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTimeUTC").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("GameEndDateTime") != null && !jsonObj.get("GameEndDateTime").isJsonNull()) && !jsonObj.get("GameEndDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GameEndDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GameEndDateTime").toString()));
      }
      if ((jsonObj.get("HomeTeam") != null && !jsonObj.get("HomeTeam").isJsonNull()) && !jsonObj.get("HomeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeam").toString()));
      }
      if ((jsonObj.get("LastPlay") != null && !jsonObj.get("LastPlay").isJsonNull()) && !jsonObj.get("LastPlay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastPlay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastPlay").toString()));
      }
      if ((jsonObj.get("Quarter") != null && !jsonObj.get("Quarter").isJsonNull()) && !jsonObj.get("Quarter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Quarter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Quarter").toString()));
      }
      if (jsonObj.get("Quarters") != null && !jsonObj.get("Quarters").isJsonNull()) {
        JsonArray jsonArrayquarters = jsonObj.getAsJsonArray("Quarters");
        if (jsonArrayquarters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Quarters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Quarters` to be an array in the JSON string but got `%s`", jsonObj.get("Quarters").toString()));
          }

          // validate the optional field `Quarters` (array)
          for (int i = 0; i < jsonArrayquarters.size(); i++) {
            Quarter.validateJsonElement(jsonArrayquarters.get(i));
          };
        }
      }
      // validate the optional field `SeriesInfo`
      if (jsonObj.get("SeriesInfo") != null && !jsonObj.get("SeriesInfo").isJsonNull()) {
        Series.validateJsonElement(jsonObj.get("SeriesInfo"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Game.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Game' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Game> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Game.class));

       return (TypeAdapter<T>) new TypeAdapter<Game>() {
           @Override
           public void write(JsonWriter out, Game value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Game read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Game given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Game
   * @throws IOException if the JSON string is invalid with respect to Game
   */
  public static Game fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Game.class);
  }

  /**
   * Convert an instance of Game to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

