/*
 * NBA v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BoxScore;
import org.openapitools.client.model.DfsSlate;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.News;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.PlayerGame;
import org.openapitools.client.model.PlayerInfo;
import org.openapitools.client.model.PlayerSeason;
import org.openapitools.client.model.Season;
import org.openapitools.client.model.Stadium;
import org.openapitools.client.model.Standing;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamGame;
import org.openapitools.client.model.TeamSeason;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * All-Stars
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allStarsTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerInfo> response = api.allStars(format, season);
        // TODO: test validations
    }

    /**
     * Are Games In Progress
     *
     * Returns &lt;code&gt;true&lt;/code&gt; if there is at least one game being played at the time of the request or &lt;code&gt;false&lt;/code&gt; if there are none.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void areGamesInProgressTest() throws ApiException {
        String format = null;
        Boolean response = api.areGamesInProgress(format);
        // TODO: test validations
    }

    /**
     * Box Score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxScoreTest() throws ApiException {
        String format = null;
        String gameid = null;
        BoxScore response = api.boxScore(format, gameid);
        // TODO: test validations
    }

    /**
     * Box Scores by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxScoresByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<BoxScore> response = api.boxScoresByDate(format, date);
        // TODO: test validations
    }

    /**
     * Box Scores by Date Delta
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void boxScoresByDateDeltaTest() throws ApiException {
        String format = null;
        String date = null;
        String minutes = null;
        List<BoxScore> response = api.boxScoresByDateDelta(format, date, minutes);
        // TODO: test validations
    }

    /**
     * Current Season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentSeasonTest() throws ApiException {
        String format = null;
        Season response = api.currentSeason(format);
        // TODO: test validations
    }

    /**
     * DFS Slates by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfsSlatesByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<DfsSlate> response = api.dfsSlatesByDate(format, date);
        // TODO: test validations
    }

    /**
     * Games by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<Game> response = api.gamesByDate(format, date);
        // TODO: test validations
    }

    /**
     * News
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsTest() throws ApiException {
        String format = null;
        List<News> response = api.news(format);
        // TODO: test validations
    }

    /**
     * News by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<News> response = api.newsByDate(format, date);
        // TODO: test validations
    }

    /**
     * News by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByPlayerTest() throws ApiException {
        String format = null;
        String playerid = null;
        List<News> response = api.newsByPlayer(format, playerid);
        // TODO: test validations
    }

    /**
     * Player Details by Active
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByActiveTest() throws ApiException {
        String format = null;
        List<Player> response = api.playerDetailsByActive(format);
        // TODO: test validations
    }

    /**
     * Player Details by Free Agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByFreeAgentTest() throws ApiException {
        String format = null;
        List<Player> response = api.playerDetailsByFreeAgent(format);
        // TODO: test validations
    }

    /**
     * Player Details by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByPlayerTest() throws ApiException {
        String format = null;
        String playerid = null;
        Player response = api.playerDetailsByPlayer(format, playerid);
        // TODO: test validations
    }

    /**
     * Player Game Logs By Season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameLogsBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        String playerid = null;
        String numberofgames = null;
        List<PlayerGame> response = api.playerGameLogsBySeason(format, season, playerid, numberofgames);
        // TODO: test validations
    }

    /**
     * Player Game Stats by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameStatsByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<PlayerGame> response = api.playerGameStatsByDate(format, date);
        // TODO: test validations
    }

    /**
     * Player Game Stats by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerGameStatsByPlayerTest() throws ApiException {
        String format = null;
        String date = null;
        String playerid = null;
        PlayerGame response = api.playerGameStatsByPlayer(format, date, playerid);
        // TODO: test validations
    }

    /**
     * Player Season Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeason> response = api.playerSeasonStats(format, season);
        // TODO: test validations
    }

    /**
     * Player Season Stats By Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonStatsByPlayerTest() throws ApiException {
        String format = null;
        String season = null;
        String playerid = null;
        PlayerSeason response = api.playerSeasonStatsByPlayer(format, season, playerid);
        // TODO: test validations
    }

    /**
     * Player Season Stats by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonStatsByTeamTest() throws ApiException {
        String format = null;
        String season = null;
        String team = null;
        List<PlayerSeason> response = api.playerSeasonStatsByTeam(format, season, team);
        // TODO: test validations
    }

    /**
     * Players by Team
     *
     * This endpoint provides active player details by team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playersByTeamTest() throws ApiException {
        String format = null;
        String team = null;
        List<Player> response = api.playersByTeam(format, team);
        // TODO: test validations
    }

    /**
     * Schedules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void schedulesTest() throws ApiException {
        String format = null;
        String season = null;
        List<Game> response = api.schedules(format, season);
        // TODO: test validations
    }

    /**
     * Stadiums
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stadiumsTest() throws ApiException {
        String format = null;
        List<Stadium> response = api.stadiums(format);
        // TODO: test validations
    }

    /**
     * Standings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void standingsTest() throws ApiException {
        String format = null;
        String season = null;
        List<Standing> response = api.standings(format, season);
        // TODO: test validations
    }

    /**
     * Team Game Logs By Season
     *
     * Game by game log of total team statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamGameLogsBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        String teamid = null;
        String numberofgames = null;
        List<TeamGame> response = api.teamGameLogsBySeason(format, season, teamid, numberofgames);
        // TODO: test validations
    }

    /**
     * Team Game Stats by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamGameStatsByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<TeamGame> response = api.teamGameStatsByDate(format, date);
        // TODO: test validations
    }

    /**
     * Team Season Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamSeasonStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<TeamSeason> response = api.teamSeasonStats(format, season);
        // TODO: test validations
    }

    /**
     * Team Stats Allowed by Position
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamStatsAllowedByPositionTest() throws ApiException {
        String format = null;
        String season = null;
        List<TeamSeason> response = api.teamStatsAllowedByPosition(format, season);
        // TODO: test validations
    }

    /**
     * Teams (Active)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsActiveTest() throws ApiException {
        String format = null;
        List<Team> response = api.teamsActive(format);
        // TODO: test validations
    }

    /**
     * Teams (All)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsAllTest() throws ApiException {
        String format = null;
        List<Team> response = api.teamsAll(format);
        // TODO: test validations
    }

}
