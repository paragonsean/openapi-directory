# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreBasic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, away_score: int=None, away_team: str=None, away_team_id: int=None, canceled: bool=None, closed: bool=None, _date: str=None, date_time: str=None, date_time_utc: str=None, day: str=None, game_end_date_time: str=None, game_id: int=None, game_key: str=None, global_away_team_id: int=None, global_game_id: int=None, global_home_team_id: int=None, home_score: int=None, home_team: str=None, home_team_id: int=None, last_updated: str=None, quarter: str=None, quarter_description: str=None, score_id: int=None, season: int=None, season_type: int=None, stadium_id: int=None, status: str=None, time_remaining: str=None, week: int=None):
        """ScoreBasic - a model defined in OpenAPI

        :param away_score: The away_score of this ScoreBasic.
        :param away_team: The away_team of this ScoreBasic.
        :param away_team_id: The away_team_id of this ScoreBasic.
        :param canceled: The canceled of this ScoreBasic.
        :param closed: The closed of this ScoreBasic.
        :param _date: The _date of this ScoreBasic.
        :param date_time: The date_time of this ScoreBasic.
        :param date_time_utc: The date_time_utc of this ScoreBasic.
        :param day: The day of this ScoreBasic.
        :param game_end_date_time: The game_end_date_time of this ScoreBasic.
        :param game_id: The game_id of this ScoreBasic.
        :param game_key: The game_key of this ScoreBasic.
        :param global_away_team_id: The global_away_team_id of this ScoreBasic.
        :param global_game_id: The global_game_id of this ScoreBasic.
        :param global_home_team_id: The global_home_team_id of this ScoreBasic.
        :param home_score: The home_score of this ScoreBasic.
        :param home_team: The home_team of this ScoreBasic.
        :param home_team_id: The home_team_id of this ScoreBasic.
        :param last_updated: The last_updated of this ScoreBasic.
        :param quarter: The quarter of this ScoreBasic.
        :param quarter_description: The quarter_description of this ScoreBasic.
        :param score_id: The score_id of this ScoreBasic.
        :param season: The season of this ScoreBasic.
        :param season_type: The season_type of this ScoreBasic.
        :param stadium_id: The stadium_id of this ScoreBasic.
        :param status: The status of this ScoreBasic.
        :param time_remaining: The time_remaining of this ScoreBasic.
        :param week: The week of this ScoreBasic.
        """
        self.openapi_types = {
            'away_score': int,
            'away_team': str,
            'away_team_id': int,
            'canceled': bool,
            'closed': bool,
            '_date': str,
            'date_time': str,
            'date_time_utc': str,
            'day': str,
            'game_end_date_time': str,
            'game_id': int,
            'game_key': str,
            'global_away_team_id': int,
            'global_game_id': int,
            'global_home_team_id': int,
            'home_score': int,
            'home_team': str,
            'home_team_id': int,
            'last_updated': str,
            'quarter': str,
            'quarter_description': str,
            'score_id': int,
            'season': int,
            'season_type': int,
            'stadium_id': int,
            'status': str,
            'time_remaining': str,
            'week': int
        }

        self.attribute_map = {
            'away_score': 'AwayScore',
            'away_team': 'AwayTeam',
            'away_team_id': 'AwayTeamID',
            'canceled': 'Canceled',
            'closed': 'Closed',
            '_date': 'Date',
            'date_time': 'DateTime',
            'date_time_utc': 'DateTimeUTC',
            'day': 'Day',
            'game_end_date_time': 'GameEndDateTime',
            'game_id': 'GameID',
            'game_key': 'GameKey',
            'global_away_team_id': 'GlobalAwayTeamID',
            'global_game_id': 'GlobalGameID',
            'global_home_team_id': 'GlobalHomeTeamID',
            'home_score': 'HomeScore',
            'home_team': 'HomeTeam',
            'home_team_id': 'HomeTeamID',
            'last_updated': 'LastUpdated',
            'quarter': 'Quarter',
            'quarter_description': 'QuarterDescription',
            'score_id': 'ScoreID',
            'season': 'Season',
            'season_type': 'SeasonType',
            'stadium_id': 'StadiumID',
            'status': 'Status',
            'time_remaining': 'TimeRemaining',
            'week': 'Week'
        }

        self._away_score = away_score
        self._away_team = away_team
        self._away_team_id = away_team_id
        self._canceled = canceled
        self._closed = closed
        self.__date = _date
        self._date_time = date_time
        self._date_time_utc = date_time_utc
        self._day = day
        self._game_end_date_time = game_end_date_time
        self._game_id = game_id
        self._game_key = game_key
        self._global_away_team_id = global_away_team_id
        self._global_game_id = global_game_id
        self._global_home_team_id = global_home_team_id
        self._home_score = home_score
        self._home_team = home_team
        self._home_team_id = home_team_id
        self._last_updated = last_updated
        self._quarter = quarter
        self._quarter_description = quarter_description
        self._score_id = score_id
        self._season = season
        self._season_type = season_type
        self._stadium_id = stadium_id
        self._status = status
        self._time_remaining = time_remaining
        self._week = week

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreBasic of this ScoreBasic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def away_score(self):
        """Gets the away_score of this ScoreBasic.


        :return: The away_score of this ScoreBasic.
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this ScoreBasic.


        :param away_score: The away_score of this ScoreBasic.
        :type away_score: int
        """

        self._away_score = away_score

    @property
    def away_team(self):
        """Gets the away_team of this ScoreBasic.


        :return: The away_team of this ScoreBasic.
        :rtype: str
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team):
        """Sets the away_team of this ScoreBasic.


        :param away_team: The away_team of this ScoreBasic.
        :type away_team: str
        """

        self._away_team = away_team

    @property
    def away_team_id(self):
        """Gets the away_team_id of this ScoreBasic.


        :return: The away_team_id of this ScoreBasic.
        :rtype: int
        """
        return self._away_team_id

    @away_team_id.setter
    def away_team_id(self, away_team_id):
        """Sets the away_team_id of this ScoreBasic.


        :param away_team_id: The away_team_id of this ScoreBasic.
        :type away_team_id: int
        """

        self._away_team_id = away_team_id

    @property
    def canceled(self):
        """Gets the canceled of this ScoreBasic.


        :return: The canceled of this ScoreBasic.
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this ScoreBasic.


        :param canceled: The canceled of this ScoreBasic.
        :type canceled: bool
        """

        self._canceled = canceled

    @property
    def closed(self):
        """Gets the closed of this ScoreBasic.


        :return: The closed of this ScoreBasic.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this ScoreBasic.


        :param closed: The closed of this ScoreBasic.
        :type closed: bool
        """

        self._closed = closed

    @property
    def _date(self):
        """Gets the _date of this ScoreBasic.


        :return: The _date of this ScoreBasic.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ScoreBasic.


        :param _date: The _date of this ScoreBasic.
        :type _date: str
        """

        self.__date = _date

    @property
    def date_time(self):
        """Gets the date_time of this ScoreBasic.


        :return: The date_time of this ScoreBasic.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this ScoreBasic.


        :param date_time: The date_time of this ScoreBasic.
        :type date_time: str
        """

        self._date_time = date_time

    @property
    def date_time_utc(self):
        """Gets the date_time_utc of this ScoreBasic.


        :return: The date_time_utc of this ScoreBasic.
        :rtype: str
        """
        return self._date_time_utc

    @date_time_utc.setter
    def date_time_utc(self, date_time_utc):
        """Sets the date_time_utc of this ScoreBasic.


        :param date_time_utc: The date_time_utc of this ScoreBasic.
        :type date_time_utc: str
        """

        self._date_time_utc = date_time_utc

    @property
    def day(self):
        """Gets the day of this ScoreBasic.


        :return: The day of this ScoreBasic.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this ScoreBasic.


        :param day: The day of this ScoreBasic.
        :type day: str
        """

        self._day = day

    @property
    def game_end_date_time(self):
        """Gets the game_end_date_time of this ScoreBasic.


        :return: The game_end_date_time of this ScoreBasic.
        :rtype: str
        """
        return self._game_end_date_time

    @game_end_date_time.setter
    def game_end_date_time(self, game_end_date_time):
        """Sets the game_end_date_time of this ScoreBasic.


        :param game_end_date_time: The game_end_date_time of this ScoreBasic.
        :type game_end_date_time: str
        """

        self._game_end_date_time = game_end_date_time

    @property
    def game_id(self):
        """Gets the game_id of this ScoreBasic.


        :return: The game_id of this ScoreBasic.
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this ScoreBasic.


        :param game_id: The game_id of this ScoreBasic.
        :type game_id: int
        """

        self._game_id = game_id

    @property
    def game_key(self):
        """Gets the game_key of this ScoreBasic.


        :return: The game_key of this ScoreBasic.
        :rtype: str
        """
        return self._game_key

    @game_key.setter
    def game_key(self, game_key):
        """Sets the game_key of this ScoreBasic.


        :param game_key: The game_key of this ScoreBasic.
        :type game_key: str
        """

        self._game_key = game_key

    @property
    def global_away_team_id(self):
        """Gets the global_away_team_id of this ScoreBasic.


        :return: The global_away_team_id of this ScoreBasic.
        :rtype: int
        """
        return self._global_away_team_id

    @global_away_team_id.setter
    def global_away_team_id(self, global_away_team_id):
        """Sets the global_away_team_id of this ScoreBasic.


        :param global_away_team_id: The global_away_team_id of this ScoreBasic.
        :type global_away_team_id: int
        """

        self._global_away_team_id = global_away_team_id

    @property
    def global_game_id(self):
        """Gets the global_game_id of this ScoreBasic.


        :return: The global_game_id of this ScoreBasic.
        :rtype: int
        """
        return self._global_game_id

    @global_game_id.setter
    def global_game_id(self, global_game_id):
        """Sets the global_game_id of this ScoreBasic.


        :param global_game_id: The global_game_id of this ScoreBasic.
        :type global_game_id: int
        """

        self._global_game_id = global_game_id

    @property
    def global_home_team_id(self):
        """Gets the global_home_team_id of this ScoreBasic.


        :return: The global_home_team_id of this ScoreBasic.
        :rtype: int
        """
        return self._global_home_team_id

    @global_home_team_id.setter
    def global_home_team_id(self, global_home_team_id):
        """Sets the global_home_team_id of this ScoreBasic.


        :param global_home_team_id: The global_home_team_id of this ScoreBasic.
        :type global_home_team_id: int
        """

        self._global_home_team_id = global_home_team_id

    @property
    def home_score(self):
        """Gets the home_score of this ScoreBasic.


        :return: The home_score of this ScoreBasic.
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this ScoreBasic.


        :param home_score: The home_score of this ScoreBasic.
        :type home_score: int
        """

        self._home_score = home_score

    @property
    def home_team(self):
        """Gets the home_team of this ScoreBasic.


        :return: The home_team of this ScoreBasic.
        :rtype: str
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team):
        """Sets the home_team of this ScoreBasic.


        :param home_team: The home_team of this ScoreBasic.
        :type home_team: str
        """

        self._home_team = home_team

    @property
    def home_team_id(self):
        """Gets the home_team_id of this ScoreBasic.


        :return: The home_team_id of this ScoreBasic.
        :rtype: int
        """
        return self._home_team_id

    @home_team_id.setter
    def home_team_id(self, home_team_id):
        """Sets the home_team_id of this ScoreBasic.


        :param home_team_id: The home_team_id of this ScoreBasic.
        :type home_team_id: int
        """

        self._home_team_id = home_team_id

    @property
    def last_updated(self):
        """Gets the last_updated of this ScoreBasic.


        :return: The last_updated of this ScoreBasic.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ScoreBasic.


        :param last_updated: The last_updated of this ScoreBasic.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def quarter(self):
        """Gets the quarter of this ScoreBasic.


        :return: The quarter of this ScoreBasic.
        :rtype: str
        """
        return self._quarter

    @quarter.setter
    def quarter(self, quarter):
        """Sets the quarter of this ScoreBasic.


        :param quarter: The quarter of this ScoreBasic.
        :type quarter: str
        """

        self._quarter = quarter

    @property
    def quarter_description(self):
        """Gets the quarter_description of this ScoreBasic.


        :return: The quarter_description of this ScoreBasic.
        :rtype: str
        """
        return self._quarter_description

    @quarter_description.setter
    def quarter_description(self, quarter_description):
        """Sets the quarter_description of this ScoreBasic.


        :param quarter_description: The quarter_description of this ScoreBasic.
        :type quarter_description: str
        """

        self._quarter_description = quarter_description

    @property
    def score_id(self):
        """Gets the score_id of this ScoreBasic.


        :return: The score_id of this ScoreBasic.
        :rtype: int
        """
        return self._score_id

    @score_id.setter
    def score_id(self, score_id):
        """Sets the score_id of this ScoreBasic.


        :param score_id: The score_id of this ScoreBasic.
        :type score_id: int
        """

        self._score_id = score_id

    @property
    def season(self):
        """Gets the season of this ScoreBasic.


        :return: The season of this ScoreBasic.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this ScoreBasic.


        :param season: The season of this ScoreBasic.
        :type season: int
        """

        self._season = season

    @property
    def season_type(self):
        """Gets the season_type of this ScoreBasic.


        :return: The season_type of this ScoreBasic.
        :rtype: int
        """
        return self._season_type

    @season_type.setter
    def season_type(self, season_type):
        """Sets the season_type of this ScoreBasic.


        :param season_type: The season_type of this ScoreBasic.
        :type season_type: int
        """

        self._season_type = season_type

    @property
    def stadium_id(self):
        """Gets the stadium_id of this ScoreBasic.


        :return: The stadium_id of this ScoreBasic.
        :rtype: int
        """
        return self._stadium_id

    @stadium_id.setter
    def stadium_id(self, stadium_id):
        """Sets the stadium_id of this ScoreBasic.


        :param stadium_id: The stadium_id of this ScoreBasic.
        :type stadium_id: int
        """

        self._stadium_id = stadium_id

    @property
    def status(self):
        """Gets the status of this ScoreBasic.


        :return: The status of this ScoreBasic.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScoreBasic.


        :param status: The status of this ScoreBasic.
        :type status: str
        """

        self._status = status

    @property
    def time_remaining(self):
        """Gets the time_remaining of this ScoreBasic.


        :return: The time_remaining of this ScoreBasic.
        :rtype: str
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this ScoreBasic.


        :param time_remaining: The time_remaining of this ScoreBasic.
        :type time_remaining: str
        """

        self._time_remaining = time_remaining

    @property
    def week(self):
        """Gets the week of this ScoreBasic.


        :return: The week of this ScoreBasic.
        :rtype: int
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this ScoreBasic.


        :param week: The week of this ScoreBasic.
        :type week: int
        """

        self._week = week
