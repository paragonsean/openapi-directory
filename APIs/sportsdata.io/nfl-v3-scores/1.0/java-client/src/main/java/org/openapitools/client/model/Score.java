/*
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Stadium;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Score
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:21.929041-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Score {
  public static final String SERIALIZED_NAME_ATTENDANCE = "Attendance";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE)
  private Integer attendance;

  public static final String SERIALIZED_NAME_AWAY_ROTATION_NUMBER = "AwayRotationNumber";
  @SerializedName(SERIALIZED_NAME_AWAY_ROTATION_NUMBER)
  private Integer awayRotationNumber;

  public static final String SERIALIZED_NAME_AWAY_SCORE = "AwayScore";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE)
  private Integer awayScore;

  public static final String SERIALIZED_NAME_AWAY_SCORE_OVERTIME = "AwayScoreOvertime";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE_OVERTIME)
  private Integer awayScoreOvertime;

  public static final String SERIALIZED_NAME_AWAY_SCORE_QUARTER1 = "AwayScoreQuarter1";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE_QUARTER1)
  private Integer awayScoreQuarter1;

  public static final String SERIALIZED_NAME_AWAY_SCORE_QUARTER2 = "AwayScoreQuarter2";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE_QUARTER2)
  private Integer awayScoreQuarter2;

  public static final String SERIALIZED_NAME_AWAY_SCORE_QUARTER3 = "AwayScoreQuarter3";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE_QUARTER3)
  private Integer awayScoreQuarter3;

  public static final String SERIALIZED_NAME_AWAY_SCORE_QUARTER4 = "AwayScoreQuarter4";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE_QUARTER4)
  private Integer awayScoreQuarter4;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "AwayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_AWAY_TEAM_I_D = "AwayTeamID";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_I_D)
  private Integer awayTeamID;

  public static final String SERIALIZED_NAME_AWAY_TEAM_MONEY_LINE = "AwayTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_MONEY_LINE)
  private Integer awayTeamMoneyLine;

  public static final String SERIALIZED_NAME_AWAY_TIMEOUTS = "AwayTimeouts";
  @SerializedName(SERIALIZED_NAME_AWAY_TIMEOUTS)
  private Integer awayTimeouts;

  public static final String SERIALIZED_NAME_CANCELED = "Canceled";
  @SerializedName(SERIALIZED_NAME_CANCELED)
  private Boolean canceled;

  public static final String SERIALIZED_NAME_CHANNEL = "Channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CLOSED = "Closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DATE_TIME_U_T_C = "DateTimeUTC";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_U_T_C)
  private String dateTimeUTC;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_DISTANCE = "Distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private String distance;

  public static final String SERIALIZED_NAME_DOWN = "Down";
  @SerializedName(SERIALIZED_NAME_DOWN)
  private Integer down;

  public static final String SERIALIZED_NAME_DOWN_AND_DISTANCE = "DownAndDistance";
  @SerializedName(SERIALIZED_NAME_DOWN_AND_DISTANCE)
  private String downAndDistance;

  public static final String SERIALIZED_NAME_FORECAST_DESCRIPTION = "ForecastDescription";
  @SerializedName(SERIALIZED_NAME_FORECAST_DESCRIPTION)
  private String forecastDescription;

  public static final String SERIALIZED_NAME_FORECAST_TEMP_HIGH = "ForecastTempHigh";
  @SerializedName(SERIALIZED_NAME_FORECAST_TEMP_HIGH)
  private Integer forecastTempHigh;

  public static final String SERIALIZED_NAME_FORECAST_TEMP_LOW = "ForecastTempLow";
  @SerializedName(SERIALIZED_NAME_FORECAST_TEMP_LOW)
  private Integer forecastTempLow;

  public static final String SERIALIZED_NAME_FORECAST_WIND_CHILL = "ForecastWindChill";
  @SerializedName(SERIALIZED_NAME_FORECAST_WIND_CHILL)
  private Integer forecastWindChill;

  public static final String SERIALIZED_NAME_FORECAST_WIND_SPEED = "ForecastWindSpeed";
  @SerializedName(SERIALIZED_NAME_FORECAST_WIND_SPEED)
  private Integer forecastWindSpeed;

  public static final String SERIALIZED_NAME_GAME_END_DATE_TIME = "GameEndDateTime";
  @SerializedName(SERIALIZED_NAME_GAME_END_DATE_TIME)
  private String gameEndDateTime;

  public static final String SERIALIZED_NAME_GAME_KEY = "GameKey";
  @SerializedName(SERIALIZED_NAME_GAME_KEY)
  private String gameKey;

  public static final String SERIALIZED_NAME_GEO_LAT = "GeoLat";
  @SerializedName(SERIALIZED_NAME_GEO_LAT)
  private BigDecimal geoLat;

  public static final String SERIALIZED_NAME_GEO_LONG = "GeoLong";
  @SerializedName(SERIALIZED_NAME_GEO_LONG)
  private BigDecimal geoLong;

  public static final String SERIALIZED_NAME_GLOBAL_AWAY_TEAM_I_D = "GlobalAwayTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_AWAY_TEAM_I_D)
  private Integer globalAwayTeamID;

  public static final String SERIALIZED_NAME_GLOBAL_GAME_I_D = "GlobalGameID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_GAME_I_D)
  private Integer globalGameID;

  public static final String SERIALIZED_NAME_GLOBAL_HOME_TEAM_I_D = "GlobalHomeTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_HOME_TEAM_I_D)
  private Integer globalHomeTeamID;

  public static final String SERIALIZED_NAME_HAS1ST_QUARTER_STARTED = "Has1stQuarterStarted";
  @SerializedName(SERIALIZED_NAME_HAS1ST_QUARTER_STARTED)
  private Boolean has1stQuarterStarted;

  public static final String SERIALIZED_NAME_HAS2ND_QUARTER_STARTED = "Has2ndQuarterStarted";
  @SerializedName(SERIALIZED_NAME_HAS2ND_QUARTER_STARTED)
  private Boolean has2ndQuarterStarted;

  public static final String SERIALIZED_NAME_HAS3RD_QUARTER_STARTED = "Has3rdQuarterStarted";
  @SerializedName(SERIALIZED_NAME_HAS3RD_QUARTER_STARTED)
  private Boolean has3rdQuarterStarted;

  public static final String SERIALIZED_NAME_HAS4TH_QUARTER_STARTED = "Has4thQuarterStarted";
  @SerializedName(SERIALIZED_NAME_HAS4TH_QUARTER_STARTED)
  private Boolean has4thQuarterStarted;

  public static final String SERIALIZED_NAME_HAS_STARTED = "HasStarted";
  @SerializedName(SERIALIZED_NAME_HAS_STARTED)
  private Boolean hasStarted;

  public static final String SERIALIZED_NAME_HOME_ROTATION_NUMBER = "HomeRotationNumber";
  @SerializedName(SERIALIZED_NAME_HOME_ROTATION_NUMBER)
  private Integer homeRotationNumber;

  public static final String SERIALIZED_NAME_HOME_SCORE = "HomeScore";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE)
  private Integer homeScore;

  public static final String SERIALIZED_NAME_HOME_SCORE_OVERTIME = "HomeScoreOvertime";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE_OVERTIME)
  private Integer homeScoreOvertime;

  public static final String SERIALIZED_NAME_HOME_SCORE_QUARTER1 = "HomeScoreQuarter1";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE_QUARTER1)
  private Integer homeScoreQuarter1;

  public static final String SERIALIZED_NAME_HOME_SCORE_QUARTER2 = "HomeScoreQuarter2";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE_QUARTER2)
  private Integer homeScoreQuarter2;

  public static final String SERIALIZED_NAME_HOME_SCORE_QUARTER3 = "HomeScoreQuarter3";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE_QUARTER3)
  private Integer homeScoreQuarter3;

  public static final String SERIALIZED_NAME_HOME_SCORE_QUARTER4 = "HomeScoreQuarter4";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE_QUARTER4)
  private Integer homeScoreQuarter4;

  public static final String SERIALIZED_NAME_HOME_TEAM = "HomeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_HOME_TEAM_I_D = "HomeTeamID";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_I_D)
  private Integer homeTeamID;

  public static final String SERIALIZED_NAME_HOME_TEAM_MONEY_LINE = "HomeTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_MONEY_LINE)
  private Integer homeTeamMoneyLine;

  public static final String SERIALIZED_NAME_HOME_TIMEOUTS = "HomeTimeouts";
  @SerializedName(SERIALIZED_NAME_HOME_TIMEOUTS)
  private Integer homeTimeouts;

  public static final String SERIALIZED_NAME_IS_IN_PROGRESS = "IsInProgress";
  @SerializedName(SERIALIZED_NAME_IS_IN_PROGRESS)
  private Boolean isInProgress;

  public static final String SERIALIZED_NAME_IS_OVER = "IsOver";
  @SerializedName(SERIALIZED_NAME_IS_OVER)
  private Boolean isOver;

  public static final String SERIALIZED_NAME_IS_OVERTIME = "IsOvertime";
  @SerializedName(SERIALIZED_NAME_IS_OVERTIME)
  private Boolean isOvertime;

  public static final String SERIALIZED_NAME_LAST_PLAY = "LastPlay";
  @SerializedName(SERIALIZED_NAME_LAST_PLAY)
  private String lastPlay;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_NEUTRAL_VENUE = "NeutralVenue";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_VENUE)
  private Boolean neutralVenue;

  public static final String SERIALIZED_NAME_OVER_PAYOUT = "OverPayout";
  @SerializedName(SERIALIZED_NAME_OVER_PAYOUT)
  private Integer overPayout;

  public static final String SERIALIZED_NAME_OVER_UNDER = "OverUnder";
  @SerializedName(SERIALIZED_NAME_OVER_UNDER)
  private BigDecimal overUnder;

  public static final String SERIALIZED_NAME_POINT_SPREAD = "PointSpread";
  @SerializedName(SERIALIZED_NAME_POINT_SPREAD)
  private BigDecimal pointSpread;

  public static final String SERIALIZED_NAME_POINT_SPREAD_AWAY_TEAM_MONEY_LINE = "PointSpreadAwayTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_POINT_SPREAD_AWAY_TEAM_MONEY_LINE)
  private Integer pointSpreadAwayTeamMoneyLine;

  public static final String SERIALIZED_NAME_POINT_SPREAD_HOME_TEAM_MONEY_LINE = "PointSpreadHomeTeamMoneyLine";
  @SerializedName(SERIALIZED_NAME_POINT_SPREAD_HOME_TEAM_MONEY_LINE)
  private Integer pointSpreadHomeTeamMoneyLine;

  public static final String SERIALIZED_NAME_POSSESSION = "Possession";
  @SerializedName(SERIALIZED_NAME_POSSESSION)
  private String possession;

  public static final String SERIALIZED_NAME_QUARTER = "Quarter";
  @SerializedName(SERIALIZED_NAME_QUARTER)
  private String quarter;

  public static final String SERIALIZED_NAME_QUARTER_DESCRIPTION = "QuarterDescription";
  @SerializedName(SERIALIZED_NAME_QUARTER_DESCRIPTION)
  private String quarterDescription;

  public static final String SERIALIZED_NAME_RED_ZONE = "RedZone";
  @SerializedName(SERIALIZED_NAME_RED_ZONE)
  private String redZone;

  public static final String SERIALIZED_NAME_REFEREE_I_D = "RefereeID";
  @SerializedName(SERIALIZED_NAME_REFEREE_I_D)
  private Integer refereeID;

  public static final String SERIALIZED_NAME_SCORE_I_D = "ScoreID";
  @SerializedName(SERIALIZED_NAME_SCORE_I_D)
  private Integer scoreID;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_STADIUM_DETAILS = "StadiumDetails";
  @SerializedName(SERIALIZED_NAME_STADIUM_DETAILS)
  private Stadium stadiumDetails;

  public static final String SERIALIZED_NAME_STADIUM_I_D = "StadiumID";
  @SerializedName(SERIALIZED_NAME_STADIUM_I_D)
  private Integer stadiumID;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIME_REMAINING = "TimeRemaining";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING)
  private String timeRemaining;

  public static final String SERIALIZED_NAME_UNDER_PAYOUT = "UnderPayout";
  @SerializedName(SERIALIZED_NAME_UNDER_PAYOUT)
  private Integer underPayout;

  public static final String SERIALIZED_NAME_WEEK = "Week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public static final String SERIALIZED_NAME_YARD_LINE = "YardLine";
  @SerializedName(SERIALIZED_NAME_YARD_LINE)
  private Integer yardLine;

  public static final String SERIALIZED_NAME_YARD_LINE_TERRITORY = "YardLineTerritory";
  @SerializedName(SERIALIZED_NAME_YARD_LINE_TERRITORY)
  private String yardLineTerritory;

  public Score() {
  }

  public Score attendance(Integer attendance) {
    this.attendance = attendance;
    return this;
  }

  /**
   * Get attendance
   * @return attendance
   */
  @javax.annotation.Nullable
  public Integer getAttendance() {
    return attendance;
  }

  public void setAttendance(Integer attendance) {
    this.attendance = attendance;
  }


  public Score awayRotationNumber(Integer awayRotationNumber) {
    this.awayRotationNumber = awayRotationNumber;
    return this;
  }

  /**
   * Get awayRotationNumber
   * @return awayRotationNumber
   */
  @javax.annotation.Nullable
  public Integer getAwayRotationNumber() {
    return awayRotationNumber;
  }

  public void setAwayRotationNumber(Integer awayRotationNumber) {
    this.awayRotationNumber = awayRotationNumber;
  }


  public Score awayScore(Integer awayScore) {
    this.awayScore = awayScore;
    return this;
  }

  /**
   * Get awayScore
   * @return awayScore
   */
  @javax.annotation.Nullable
  public Integer getAwayScore() {
    return awayScore;
  }

  public void setAwayScore(Integer awayScore) {
    this.awayScore = awayScore;
  }


  public Score awayScoreOvertime(Integer awayScoreOvertime) {
    this.awayScoreOvertime = awayScoreOvertime;
    return this;
  }

  /**
   * Get awayScoreOvertime
   * @return awayScoreOvertime
   */
  @javax.annotation.Nullable
  public Integer getAwayScoreOvertime() {
    return awayScoreOvertime;
  }

  public void setAwayScoreOvertime(Integer awayScoreOvertime) {
    this.awayScoreOvertime = awayScoreOvertime;
  }


  public Score awayScoreQuarter1(Integer awayScoreQuarter1) {
    this.awayScoreQuarter1 = awayScoreQuarter1;
    return this;
  }

  /**
   * Get awayScoreQuarter1
   * @return awayScoreQuarter1
   */
  @javax.annotation.Nullable
  public Integer getAwayScoreQuarter1() {
    return awayScoreQuarter1;
  }

  public void setAwayScoreQuarter1(Integer awayScoreQuarter1) {
    this.awayScoreQuarter1 = awayScoreQuarter1;
  }


  public Score awayScoreQuarter2(Integer awayScoreQuarter2) {
    this.awayScoreQuarter2 = awayScoreQuarter2;
    return this;
  }

  /**
   * Get awayScoreQuarter2
   * @return awayScoreQuarter2
   */
  @javax.annotation.Nullable
  public Integer getAwayScoreQuarter2() {
    return awayScoreQuarter2;
  }

  public void setAwayScoreQuarter2(Integer awayScoreQuarter2) {
    this.awayScoreQuarter2 = awayScoreQuarter2;
  }


  public Score awayScoreQuarter3(Integer awayScoreQuarter3) {
    this.awayScoreQuarter3 = awayScoreQuarter3;
    return this;
  }

  /**
   * Get awayScoreQuarter3
   * @return awayScoreQuarter3
   */
  @javax.annotation.Nullable
  public Integer getAwayScoreQuarter3() {
    return awayScoreQuarter3;
  }

  public void setAwayScoreQuarter3(Integer awayScoreQuarter3) {
    this.awayScoreQuarter3 = awayScoreQuarter3;
  }


  public Score awayScoreQuarter4(Integer awayScoreQuarter4) {
    this.awayScoreQuarter4 = awayScoreQuarter4;
    return this;
  }

  /**
   * Get awayScoreQuarter4
   * @return awayScoreQuarter4
   */
  @javax.annotation.Nullable
  public Integer getAwayScoreQuarter4() {
    return awayScoreQuarter4;
  }

  public void setAwayScoreQuarter4(Integer awayScoreQuarter4) {
    this.awayScoreQuarter4 = awayScoreQuarter4;
  }


  public Score awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public Score awayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
    return this;
  }

  /**
   * Get awayTeamID
   * @return awayTeamID
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamID() {
    return awayTeamID;
  }

  public void setAwayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
  }


  public Score awayTeamMoneyLine(Integer awayTeamMoneyLine) {
    this.awayTeamMoneyLine = awayTeamMoneyLine;
    return this;
  }

  /**
   * Get awayTeamMoneyLine
   * @return awayTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamMoneyLine() {
    return awayTeamMoneyLine;
  }

  public void setAwayTeamMoneyLine(Integer awayTeamMoneyLine) {
    this.awayTeamMoneyLine = awayTeamMoneyLine;
  }


  public Score awayTimeouts(Integer awayTimeouts) {
    this.awayTimeouts = awayTimeouts;
    return this;
  }

  /**
   * Get awayTimeouts
   * @return awayTimeouts
   */
  @javax.annotation.Nullable
  public Integer getAwayTimeouts() {
    return awayTimeouts;
  }

  public void setAwayTimeouts(Integer awayTimeouts) {
    this.awayTimeouts = awayTimeouts;
  }


  public Score canceled(Boolean canceled) {
    this.canceled = canceled;
    return this;
  }

  /**
   * Get canceled
   * @return canceled
   */
  @javax.annotation.Nullable
  public Boolean getCanceled() {
    return canceled;
  }

  public void setCanceled(Boolean canceled) {
    this.canceled = canceled;
  }


  public Score channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public Score closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nullable
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public Score date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Score dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public Score dateTimeUTC(String dateTimeUTC) {
    this.dateTimeUTC = dateTimeUTC;
    return this;
  }

  /**
   * Get dateTimeUTC
   * @return dateTimeUTC
   */
  @javax.annotation.Nullable
  public String getDateTimeUTC() {
    return dateTimeUTC;
  }

  public void setDateTimeUTC(String dateTimeUTC) {
    this.dateTimeUTC = dateTimeUTC;
  }


  public Score day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Score distance(String distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public String getDistance() {
    return distance;
  }

  public void setDistance(String distance) {
    this.distance = distance;
  }


  public Score down(Integer down) {
    this.down = down;
    return this;
  }

  /**
   * Get down
   * @return down
   */
  @javax.annotation.Nullable
  public Integer getDown() {
    return down;
  }

  public void setDown(Integer down) {
    this.down = down;
  }


  public Score downAndDistance(String downAndDistance) {
    this.downAndDistance = downAndDistance;
    return this;
  }

  /**
   * Get downAndDistance
   * @return downAndDistance
   */
  @javax.annotation.Nullable
  public String getDownAndDistance() {
    return downAndDistance;
  }

  public void setDownAndDistance(String downAndDistance) {
    this.downAndDistance = downAndDistance;
  }


  public Score forecastDescription(String forecastDescription) {
    this.forecastDescription = forecastDescription;
    return this;
  }

  /**
   * Get forecastDescription
   * @return forecastDescription
   */
  @javax.annotation.Nullable
  public String getForecastDescription() {
    return forecastDescription;
  }

  public void setForecastDescription(String forecastDescription) {
    this.forecastDescription = forecastDescription;
  }


  public Score forecastTempHigh(Integer forecastTempHigh) {
    this.forecastTempHigh = forecastTempHigh;
    return this;
  }

  /**
   * Get forecastTempHigh
   * @return forecastTempHigh
   */
  @javax.annotation.Nullable
  public Integer getForecastTempHigh() {
    return forecastTempHigh;
  }

  public void setForecastTempHigh(Integer forecastTempHigh) {
    this.forecastTempHigh = forecastTempHigh;
  }


  public Score forecastTempLow(Integer forecastTempLow) {
    this.forecastTempLow = forecastTempLow;
    return this;
  }

  /**
   * Get forecastTempLow
   * @return forecastTempLow
   */
  @javax.annotation.Nullable
  public Integer getForecastTempLow() {
    return forecastTempLow;
  }

  public void setForecastTempLow(Integer forecastTempLow) {
    this.forecastTempLow = forecastTempLow;
  }


  public Score forecastWindChill(Integer forecastWindChill) {
    this.forecastWindChill = forecastWindChill;
    return this;
  }

  /**
   * Get forecastWindChill
   * @return forecastWindChill
   */
  @javax.annotation.Nullable
  public Integer getForecastWindChill() {
    return forecastWindChill;
  }

  public void setForecastWindChill(Integer forecastWindChill) {
    this.forecastWindChill = forecastWindChill;
  }


  public Score forecastWindSpeed(Integer forecastWindSpeed) {
    this.forecastWindSpeed = forecastWindSpeed;
    return this;
  }

  /**
   * Get forecastWindSpeed
   * @return forecastWindSpeed
   */
  @javax.annotation.Nullable
  public Integer getForecastWindSpeed() {
    return forecastWindSpeed;
  }

  public void setForecastWindSpeed(Integer forecastWindSpeed) {
    this.forecastWindSpeed = forecastWindSpeed;
  }


  public Score gameEndDateTime(String gameEndDateTime) {
    this.gameEndDateTime = gameEndDateTime;
    return this;
  }

  /**
   * Get gameEndDateTime
   * @return gameEndDateTime
   */
  @javax.annotation.Nullable
  public String getGameEndDateTime() {
    return gameEndDateTime;
  }

  public void setGameEndDateTime(String gameEndDateTime) {
    this.gameEndDateTime = gameEndDateTime;
  }


  public Score gameKey(String gameKey) {
    this.gameKey = gameKey;
    return this;
  }

  /**
   * Get gameKey
   * @return gameKey
   */
  @javax.annotation.Nullable
  public String getGameKey() {
    return gameKey;
  }

  public void setGameKey(String gameKey) {
    this.gameKey = gameKey;
  }


  public Score geoLat(BigDecimal geoLat) {
    this.geoLat = geoLat;
    return this;
  }

  /**
   * Get geoLat
   * @return geoLat
   */
  @javax.annotation.Nullable
  public BigDecimal getGeoLat() {
    return geoLat;
  }

  public void setGeoLat(BigDecimal geoLat) {
    this.geoLat = geoLat;
  }


  public Score geoLong(BigDecimal geoLong) {
    this.geoLong = geoLong;
    return this;
  }

  /**
   * Get geoLong
   * @return geoLong
   */
  @javax.annotation.Nullable
  public BigDecimal getGeoLong() {
    return geoLong;
  }

  public void setGeoLong(BigDecimal geoLong) {
    this.geoLong = geoLong;
  }


  public Score globalAwayTeamID(Integer globalAwayTeamID) {
    this.globalAwayTeamID = globalAwayTeamID;
    return this;
  }

  /**
   * Get globalAwayTeamID
   * @return globalAwayTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalAwayTeamID() {
    return globalAwayTeamID;
  }

  public void setGlobalAwayTeamID(Integer globalAwayTeamID) {
    this.globalAwayTeamID = globalAwayTeamID;
  }


  public Score globalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
    return this;
  }

  /**
   * Get globalGameID
   * @return globalGameID
   */
  @javax.annotation.Nullable
  public Integer getGlobalGameID() {
    return globalGameID;
  }

  public void setGlobalGameID(Integer globalGameID) {
    this.globalGameID = globalGameID;
  }


  public Score globalHomeTeamID(Integer globalHomeTeamID) {
    this.globalHomeTeamID = globalHomeTeamID;
    return this;
  }

  /**
   * Get globalHomeTeamID
   * @return globalHomeTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalHomeTeamID() {
    return globalHomeTeamID;
  }

  public void setGlobalHomeTeamID(Integer globalHomeTeamID) {
    this.globalHomeTeamID = globalHomeTeamID;
  }


  public Score has1stQuarterStarted(Boolean has1stQuarterStarted) {
    this.has1stQuarterStarted = has1stQuarterStarted;
    return this;
  }

  /**
   * Get has1stQuarterStarted
   * @return has1stQuarterStarted
   */
  @javax.annotation.Nullable
  public Boolean getHas1stQuarterStarted() {
    return has1stQuarterStarted;
  }

  public void setHas1stQuarterStarted(Boolean has1stQuarterStarted) {
    this.has1stQuarterStarted = has1stQuarterStarted;
  }


  public Score has2ndQuarterStarted(Boolean has2ndQuarterStarted) {
    this.has2ndQuarterStarted = has2ndQuarterStarted;
    return this;
  }

  /**
   * Get has2ndQuarterStarted
   * @return has2ndQuarterStarted
   */
  @javax.annotation.Nullable
  public Boolean getHas2ndQuarterStarted() {
    return has2ndQuarterStarted;
  }

  public void setHas2ndQuarterStarted(Boolean has2ndQuarterStarted) {
    this.has2ndQuarterStarted = has2ndQuarterStarted;
  }


  public Score has3rdQuarterStarted(Boolean has3rdQuarterStarted) {
    this.has3rdQuarterStarted = has3rdQuarterStarted;
    return this;
  }

  /**
   * Get has3rdQuarterStarted
   * @return has3rdQuarterStarted
   */
  @javax.annotation.Nullable
  public Boolean getHas3rdQuarterStarted() {
    return has3rdQuarterStarted;
  }

  public void setHas3rdQuarterStarted(Boolean has3rdQuarterStarted) {
    this.has3rdQuarterStarted = has3rdQuarterStarted;
  }


  public Score has4thQuarterStarted(Boolean has4thQuarterStarted) {
    this.has4thQuarterStarted = has4thQuarterStarted;
    return this;
  }

  /**
   * Get has4thQuarterStarted
   * @return has4thQuarterStarted
   */
  @javax.annotation.Nullable
  public Boolean getHas4thQuarterStarted() {
    return has4thQuarterStarted;
  }

  public void setHas4thQuarterStarted(Boolean has4thQuarterStarted) {
    this.has4thQuarterStarted = has4thQuarterStarted;
  }


  public Score hasStarted(Boolean hasStarted) {
    this.hasStarted = hasStarted;
    return this;
  }

  /**
   * Get hasStarted
   * @return hasStarted
   */
  @javax.annotation.Nullable
  public Boolean getHasStarted() {
    return hasStarted;
  }

  public void setHasStarted(Boolean hasStarted) {
    this.hasStarted = hasStarted;
  }


  public Score homeRotationNumber(Integer homeRotationNumber) {
    this.homeRotationNumber = homeRotationNumber;
    return this;
  }

  /**
   * Get homeRotationNumber
   * @return homeRotationNumber
   */
  @javax.annotation.Nullable
  public Integer getHomeRotationNumber() {
    return homeRotationNumber;
  }

  public void setHomeRotationNumber(Integer homeRotationNumber) {
    this.homeRotationNumber = homeRotationNumber;
  }


  public Score homeScore(Integer homeScore) {
    this.homeScore = homeScore;
    return this;
  }

  /**
   * Get homeScore
   * @return homeScore
   */
  @javax.annotation.Nullable
  public Integer getHomeScore() {
    return homeScore;
  }

  public void setHomeScore(Integer homeScore) {
    this.homeScore = homeScore;
  }


  public Score homeScoreOvertime(Integer homeScoreOvertime) {
    this.homeScoreOvertime = homeScoreOvertime;
    return this;
  }

  /**
   * Get homeScoreOvertime
   * @return homeScoreOvertime
   */
  @javax.annotation.Nullable
  public Integer getHomeScoreOvertime() {
    return homeScoreOvertime;
  }

  public void setHomeScoreOvertime(Integer homeScoreOvertime) {
    this.homeScoreOvertime = homeScoreOvertime;
  }


  public Score homeScoreQuarter1(Integer homeScoreQuarter1) {
    this.homeScoreQuarter1 = homeScoreQuarter1;
    return this;
  }

  /**
   * Get homeScoreQuarter1
   * @return homeScoreQuarter1
   */
  @javax.annotation.Nullable
  public Integer getHomeScoreQuarter1() {
    return homeScoreQuarter1;
  }

  public void setHomeScoreQuarter1(Integer homeScoreQuarter1) {
    this.homeScoreQuarter1 = homeScoreQuarter1;
  }


  public Score homeScoreQuarter2(Integer homeScoreQuarter2) {
    this.homeScoreQuarter2 = homeScoreQuarter2;
    return this;
  }

  /**
   * Get homeScoreQuarter2
   * @return homeScoreQuarter2
   */
  @javax.annotation.Nullable
  public Integer getHomeScoreQuarter2() {
    return homeScoreQuarter2;
  }

  public void setHomeScoreQuarter2(Integer homeScoreQuarter2) {
    this.homeScoreQuarter2 = homeScoreQuarter2;
  }


  public Score homeScoreQuarter3(Integer homeScoreQuarter3) {
    this.homeScoreQuarter3 = homeScoreQuarter3;
    return this;
  }

  /**
   * Get homeScoreQuarter3
   * @return homeScoreQuarter3
   */
  @javax.annotation.Nullable
  public Integer getHomeScoreQuarter3() {
    return homeScoreQuarter3;
  }

  public void setHomeScoreQuarter3(Integer homeScoreQuarter3) {
    this.homeScoreQuarter3 = homeScoreQuarter3;
  }


  public Score homeScoreQuarter4(Integer homeScoreQuarter4) {
    this.homeScoreQuarter4 = homeScoreQuarter4;
    return this;
  }

  /**
   * Get homeScoreQuarter4
   * @return homeScoreQuarter4
   */
  @javax.annotation.Nullable
  public Integer getHomeScoreQuarter4() {
    return homeScoreQuarter4;
  }

  public void setHomeScoreQuarter4(Integer homeScoreQuarter4) {
    this.homeScoreQuarter4 = homeScoreQuarter4;
  }


  public Score homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public Score homeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
    return this;
  }

  /**
   * Get homeTeamID
   * @return homeTeamID
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamID() {
    return homeTeamID;
  }

  public void setHomeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
  }


  public Score homeTeamMoneyLine(Integer homeTeamMoneyLine) {
    this.homeTeamMoneyLine = homeTeamMoneyLine;
    return this;
  }

  /**
   * Get homeTeamMoneyLine
   * @return homeTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamMoneyLine() {
    return homeTeamMoneyLine;
  }

  public void setHomeTeamMoneyLine(Integer homeTeamMoneyLine) {
    this.homeTeamMoneyLine = homeTeamMoneyLine;
  }


  public Score homeTimeouts(Integer homeTimeouts) {
    this.homeTimeouts = homeTimeouts;
    return this;
  }

  /**
   * Get homeTimeouts
   * @return homeTimeouts
   */
  @javax.annotation.Nullable
  public Integer getHomeTimeouts() {
    return homeTimeouts;
  }

  public void setHomeTimeouts(Integer homeTimeouts) {
    this.homeTimeouts = homeTimeouts;
  }


  public Score isInProgress(Boolean isInProgress) {
    this.isInProgress = isInProgress;
    return this;
  }

  /**
   * Get isInProgress
   * @return isInProgress
   */
  @javax.annotation.Nullable
  public Boolean getIsInProgress() {
    return isInProgress;
  }

  public void setIsInProgress(Boolean isInProgress) {
    this.isInProgress = isInProgress;
  }


  public Score isOver(Boolean isOver) {
    this.isOver = isOver;
    return this;
  }

  /**
   * Get isOver
   * @return isOver
   */
  @javax.annotation.Nullable
  public Boolean getIsOver() {
    return isOver;
  }

  public void setIsOver(Boolean isOver) {
    this.isOver = isOver;
  }


  public Score isOvertime(Boolean isOvertime) {
    this.isOvertime = isOvertime;
    return this;
  }

  /**
   * Get isOvertime
   * @return isOvertime
   */
  @javax.annotation.Nullable
  public Boolean getIsOvertime() {
    return isOvertime;
  }

  public void setIsOvertime(Boolean isOvertime) {
    this.isOvertime = isOvertime;
  }


  public Score lastPlay(String lastPlay) {
    this.lastPlay = lastPlay;
    return this;
  }

  /**
   * Get lastPlay
   * @return lastPlay
   */
  @javax.annotation.Nullable
  public String getLastPlay() {
    return lastPlay;
  }

  public void setLastPlay(String lastPlay) {
    this.lastPlay = lastPlay;
  }


  public Score lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Score neutralVenue(Boolean neutralVenue) {
    this.neutralVenue = neutralVenue;
    return this;
  }

  /**
   * Get neutralVenue
   * @return neutralVenue
   */
  @javax.annotation.Nullable
  public Boolean getNeutralVenue() {
    return neutralVenue;
  }

  public void setNeutralVenue(Boolean neutralVenue) {
    this.neutralVenue = neutralVenue;
  }


  public Score overPayout(Integer overPayout) {
    this.overPayout = overPayout;
    return this;
  }

  /**
   * Get overPayout
   * @return overPayout
   */
  @javax.annotation.Nullable
  public Integer getOverPayout() {
    return overPayout;
  }

  public void setOverPayout(Integer overPayout) {
    this.overPayout = overPayout;
  }


  public Score overUnder(BigDecimal overUnder) {
    this.overUnder = overUnder;
    return this;
  }

  /**
   * Get overUnder
   * @return overUnder
   */
  @javax.annotation.Nullable
  public BigDecimal getOverUnder() {
    return overUnder;
  }

  public void setOverUnder(BigDecimal overUnder) {
    this.overUnder = overUnder;
  }


  public Score pointSpread(BigDecimal pointSpread) {
    this.pointSpread = pointSpread;
    return this;
  }

  /**
   * Get pointSpread
   * @return pointSpread
   */
  @javax.annotation.Nullable
  public BigDecimal getPointSpread() {
    return pointSpread;
  }

  public void setPointSpread(BigDecimal pointSpread) {
    this.pointSpread = pointSpread;
  }


  public Score pointSpreadAwayTeamMoneyLine(Integer pointSpreadAwayTeamMoneyLine) {
    this.pointSpreadAwayTeamMoneyLine = pointSpreadAwayTeamMoneyLine;
    return this;
  }

  /**
   * Get pointSpreadAwayTeamMoneyLine
   * @return pointSpreadAwayTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getPointSpreadAwayTeamMoneyLine() {
    return pointSpreadAwayTeamMoneyLine;
  }

  public void setPointSpreadAwayTeamMoneyLine(Integer pointSpreadAwayTeamMoneyLine) {
    this.pointSpreadAwayTeamMoneyLine = pointSpreadAwayTeamMoneyLine;
  }


  public Score pointSpreadHomeTeamMoneyLine(Integer pointSpreadHomeTeamMoneyLine) {
    this.pointSpreadHomeTeamMoneyLine = pointSpreadHomeTeamMoneyLine;
    return this;
  }

  /**
   * Get pointSpreadHomeTeamMoneyLine
   * @return pointSpreadHomeTeamMoneyLine
   */
  @javax.annotation.Nullable
  public Integer getPointSpreadHomeTeamMoneyLine() {
    return pointSpreadHomeTeamMoneyLine;
  }

  public void setPointSpreadHomeTeamMoneyLine(Integer pointSpreadHomeTeamMoneyLine) {
    this.pointSpreadHomeTeamMoneyLine = pointSpreadHomeTeamMoneyLine;
  }


  public Score possession(String possession) {
    this.possession = possession;
    return this;
  }

  /**
   * Get possession
   * @return possession
   */
  @javax.annotation.Nullable
  public String getPossession() {
    return possession;
  }

  public void setPossession(String possession) {
    this.possession = possession;
  }


  public Score quarter(String quarter) {
    this.quarter = quarter;
    return this;
  }

  /**
   * Get quarter
   * @return quarter
   */
  @javax.annotation.Nullable
  public String getQuarter() {
    return quarter;
  }

  public void setQuarter(String quarter) {
    this.quarter = quarter;
  }


  public Score quarterDescription(String quarterDescription) {
    this.quarterDescription = quarterDescription;
    return this;
  }

  /**
   * Get quarterDescription
   * @return quarterDescription
   */
  @javax.annotation.Nullable
  public String getQuarterDescription() {
    return quarterDescription;
  }

  public void setQuarterDescription(String quarterDescription) {
    this.quarterDescription = quarterDescription;
  }


  public Score redZone(String redZone) {
    this.redZone = redZone;
    return this;
  }

  /**
   * Get redZone
   * @return redZone
   */
  @javax.annotation.Nullable
  public String getRedZone() {
    return redZone;
  }

  public void setRedZone(String redZone) {
    this.redZone = redZone;
  }


  public Score refereeID(Integer refereeID) {
    this.refereeID = refereeID;
    return this;
  }

  /**
   * Get refereeID
   * @return refereeID
   */
  @javax.annotation.Nullable
  public Integer getRefereeID() {
    return refereeID;
  }

  public void setRefereeID(Integer refereeID) {
    this.refereeID = refereeID;
  }


  public Score scoreID(Integer scoreID) {
    this.scoreID = scoreID;
    return this;
  }

  /**
   * Get scoreID
   * @return scoreID
   */
  @javax.annotation.Nullable
  public Integer getScoreID() {
    return scoreID;
  }

  public void setScoreID(Integer scoreID) {
    this.scoreID = scoreID;
  }


  public Score season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Score seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public Score stadiumDetails(Stadium stadiumDetails) {
    this.stadiumDetails = stadiumDetails;
    return this;
  }

  /**
   * Get stadiumDetails
   * @return stadiumDetails
   */
  @javax.annotation.Nullable
  public Stadium getStadiumDetails() {
    return stadiumDetails;
  }

  public void setStadiumDetails(Stadium stadiumDetails) {
    this.stadiumDetails = stadiumDetails;
  }


  public Score stadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
    return this;
  }

  /**
   * Get stadiumID
   * @return stadiumID
   */
  @javax.annotation.Nullable
  public Integer getStadiumID() {
    return stadiumID;
  }

  public void setStadiumID(Integer stadiumID) {
    this.stadiumID = stadiumID;
  }


  public Score status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Score timeRemaining(String timeRemaining) {
    this.timeRemaining = timeRemaining;
    return this;
  }

  /**
   * Get timeRemaining
   * @return timeRemaining
   */
  @javax.annotation.Nullable
  public String getTimeRemaining() {
    return timeRemaining;
  }

  public void setTimeRemaining(String timeRemaining) {
    this.timeRemaining = timeRemaining;
  }


  public Score underPayout(Integer underPayout) {
    this.underPayout = underPayout;
    return this;
  }

  /**
   * Get underPayout
   * @return underPayout
   */
  @javax.annotation.Nullable
  public Integer getUnderPayout() {
    return underPayout;
  }

  public void setUnderPayout(Integer underPayout) {
    this.underPayout = underPayout;
  }


  public Score week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }


  public Score yardLine(Integer yardLine) {
    this.yardLine = yardLine;
    return this;
  }

  /**
   * Get yardLine
   * @return yardLine
   */
  @javax.annotation.Nullable
  public Integer getYardLine() {
    return yardLine;
  }

  public void setYardLine(Integer yardLine) {
    this.yardLine = yardLine;
  }


  public Score yardLineTerritory(String yardLineTerritory) {
    this.yardLineTerritory = yardLineTerritory;
    return this;
  }

  /**
   * Get yardLineTerritory
   * @return yardLineTerritory
   */
  @javax.annotation.Nullable
  public String getYardLineTerritory() {
    return yardLineTerritory;
  }

  public void setYardLineTerritory(String yardLineTerritory) {
    this.yardLineTerritory = yardLineTerritory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Score score = (Score) o;
    return Objects.equals(this.attendance, score.attendance) &&
        Objects.equals(this.awayRotationNumber, score.awayRotationNumber) &&
        Objects.equals(this.awayScore, score.awayScore) &&
        Objects.equals(this.awayScoreOvertime, score.awayScoreOvertime) &&
        Objects.equals(this.awayScoreQuarter1, score.awayScoreQuarter1) &&
        Objects.equals(this.awayScoreQuarter2, score.awayScoreQuarter2) &&
        Objects.equals(this.awayScoreQuarter3, score.awayScoreQuarter3) &&
        Objects.equals(this.awayScoreQuarter4, score.awayScoreQuarter4) &&
        Objects.equals(this.awayTeam, score.awayTeam) &&
        Objects.equals(this.awayTeamID, score.awayTeamID) &&
        Objects.equals(this.awayTeamMoneyLine, score.awayTeamMoneyLine) &&
        Objects.equals(this.awayTimeouts, score.awayTimeouts) &&
        Objects.equals(this.canceled, score.canceled) &&
        Objects.equals(this.channel, score.channel) &&
        Objects.equals(this.closed, score.closed) &&
        Objects.equals(this.date, score.date) &&
        Objects.equals(this.dateTime, score.dateTime) &&
        Objects.equals(this.dateTimeUTC, score.dateTimeUTC) &&
        Objects.equals(this.day, score.day) &&
        Objects.equals(this.distance, score.distance) &&
        Objects.equals(this.down, score.down) &&
        Objects.equals(this.downAndDistance, score.downAndDistance) &&
        Objects.equals(this.forecastDescription, score.forecastDescription) &&
        Objects.equals(this.forecastTempHigh, score.forecastTempHigh) &&
        Objects.equals(this.forecastTempLow, score.forecastTempLow) &&
        Objects.equals(this.forecastWindChill, score.forecastWindChill) &&
        Objects.equals(this.forecastWindSpeed, score.forecastWindSpeed) &&
        Objects.equals(this.gameEndDateTime, score.gameEndDateTime) &&
        Objects.equals(this.gameKey, score.gameKey) &&
        Objects.equals(this.geoLat, score.geoLat) &&
        Objects.equals(this.geoLong, score.geoLong) &&
        Objects.equals(this.globalAwayTeamID, score.globalAwayTeamID) &&
        Objects.equals(this.globalGameID, score.globalGameID) &&
        Objects.equals(this.globalHomeTeamID, score.globalHomeTeamID) &&
        Objects.equals(this.has1stQuarterStarted, score.has1stQuarterStarted) &&
        Objects.equals(this.has2ndQuarterStarted, score.has2ndQuarterStarted) &&
        Objects.equals(this.has3rdQuarterStarted, score.has3rdQuarterStarted) &&
        Objects.equals(this.has4thQuarterStarted, score.has4thQuarterStarted) &&
        Objects.equals(this.hasStarted, score.hasStarted) &&
        Objects.equals(this.homeRotationNumber, score.homeRotationNumber) &&
        Objects.equals(this.homeScore, score.homeScore) &&
        Objects.equals(this.homeScoreOvertime, score.homeScoreOvertime) &&
        Objects.equals(this.homeScoreQuarter1, score.homeScoreQuarter1) &&
        Objects.equals(this.homeScoreQuarter2, score.homeScoreQuarter2) &&
        Objects.equals(this.homeScoreQuarter3, score.homeScoreQuarter3) &&
        Objects.equals(this.homeScoreQuarter4, score.homeScoreQuarter4) &&
        Objects.equals(this.homeTeam, score.homeTeam) &&
        Objects.equals(this.homeTeamID, score.homeTeamID) &&
        Objects.equals(this.homeTeamMoneyLine, score.homeTeamMoneyLine) &&
        Objects.equals(this.homeTimeouts, score.homeTimeouts) &&
        Objects.equals(this.isInProgress, score.isInProgress) &&
        Objects.equals(this.isOver, score.isOver) &&
        Objects.equals(this.isOvertime, score.isOvertime) &&
        Objects.equals(this.lastPlay, score.lastPlay) &&
        Objects.equals(this.lastUpdated, score.lastUpdated) &&
        Objects.equals(this.neutralVenue, score.neutralVenue) &&
        Objects.equals(this.overPayout, score.overPayout) &&
        Objects.equals(this.overUnder, score.overUnder) &&
        Objects.equals(this.pointSpread, score.pointSpread) &&
        Objects.equals(this.pointSpreadAwayTeamMoneyLine, score.pointSpreadAwayTeamMoneyLine) &&
        Objects.equals(this.pointSpreadHomeTeamMoneyLine, score.pointSpreadHomeTeamMoneyLine) &&
        Objects.equals(this.possession, score.possession) &&
        Objects.equals(this.quarter, score.quarter) &&
        Objects.equals(this.quarterDescription, score.quarterDescription) &&
        Objects.equals(this.redZone, score.redZone) &&
        Objects.equals(this.refereeID, score.refereeID) &&
        Objects.equals(this.scoreID, score.scoreID) &&
        Objects.equals(this.season, score.season) &&
        Objects.equals(this.seasonType, score.seasonType) &&
        Objects.equals(this.stadiumDetails, score.stadiumDetails) &&
        Objects.equals(this.stadiumID, score.stadiumID) &&
        Objects.equals(this.status, score.status) &&
        Objects.equals(this.timeRemaining, score.timeRemaining) &&
        Objects.equals(this.underPayout, score.underPayout) &&
        Objects.equals(this.week, score.week) &&
        Objects.equals(this.yardLine, score.yardLine) &&
        Objects.equals(this.yardLineTerritory, score.yardLineTerritory);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendance, awayRotationNumber, awayScore, awayScoreOvertime, awayScoreQuarter1, awayScoreQuarter2, awayScoreQuarter3, awayScoreQuarter4, awayTeam, awayTeamID, awayTeamMoneyLine, awayTimeouts, canceled, channel, closed, date, dateTime, dateTimeUTC, day, distance, down, downAndDistance, forecastDescription, forecastTempHigh, forecastTempLow, forecastWindChill, forecastWindSpeed, gameEndDateTime, gameKey, geoLat, geoLong, globalAwayTeamID, globalGameID, globalHomeTeamID, has1stQuarterStarted, has2ndQuarterStarted, has3rdQuarterStarted, has4thQuarterStarted, hasStarted, homeRotationNumber, homeScore, homeScoreOvertime, homeScoreQuarter1, homeScoreQuarter2, homeScoreQuarter3, homeScoreQuarter4, homeTeam, homeTeamID, homeTeamMoneyLine, homeTimeouts, isInProgress, isOver, isOvertime, lastPlay, lastUpdated, neutralVenue, overPayout, overUnder, pointSpread, pointSpreadAwayTeamMoneyLine, pointSpreadHomeTeamMoneyLine, possession, quarter, quarterDescription, redZone, refereeID, scoreID, season, seasonType, stadiumDetails, stadiumID, status, timeRemaining, underPayout, week, yardLine, yardLineTerritory);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Score {\n");
    sb.append("    attendance: ").append(toIndentedString(attendance)).append("\n");
    sb.append("    awayRotationNumber: ").append(toIndentedString(awayRotationNumber)).append("\n");
    sb.append("    awayScore: ").append(toIndentedString(awayScore)).append("\n");
    sb.append("    awayScoreOvertime: ").append(toIndentedString(awayScoreOvertime)).append("\n");
    sb.append("    awayScoreQuarter1: ").append(toIndentedString(awayScoreQuarter1)).append("\n");
    sb.append("    awayScoreQuarter2: ").append(toIndentedString(awayScoreQuarter2)).append("\n");
    sb.append("    awayScoreQuarter3: ").append(toIndentedString(awayScoreQuarter3)).append("\n");
    sb.append("    awayScoreQuarter4: ").append(toIndentedString(awayScoreQuarter4)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    awayTeamID: ").append(toIndentedString(awayTeamID)).append("\n");
    sb.append("    awayTeamMoneyLine: ").append(toIndentedString(awayTeamMoneyLine)).append("\n");
    sb.append("    awayTimeouts: ").append(toIndentedString(awayTimeouts)).append("\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    dateTimeUTC: ").append(toIndentedString(dateTimeUTC)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    downAndDistance: ").append(toIndentedString(downAndDistance)).append("\n");
    sb.append("    forecastDescription: ").append(toIndentedString(forecastDescription)).append("\n");
    sb.append("    forecastTempHigh: ").append(toIndentedString(forecastTempHigh)).append("\n");
    sb.append("    forecastTempLow: ").append(toIndentedString(forecastTempLow)).append("\n");
    sb.append("    forecastWindChill: ").append(toIndentedString(forecastWindChill)).append("\n");
    sb.append("    forecastWindSpeed: ").append(toIndentedString(forecastWindSpeed)).append("\n");
    sb.append("    gameEndDateTime: ").append(toIndentedString(gameEndDateTime)).append("\n");
    sb.append("    gameKey: ").append(toIndentedString(gameKey)).append("\n");
    sb.append("    geoLat: ").append(toIndentedString(geoLat)).append("\n");
    sb.append("    geoLong: ").append(toIndentedString(geoLong)).append("\n");
    sb.append("    globalAwayTeamID: ").append(toIndentedString(globalAwayTeamID)).append("\n");
    sb.append("    globalGameID: ").append(toIndentedString(globalGameID)).append("\n");
    sb.append("    globalHomeTeamID: ").append(toIndentedString(globalHomeTeamID)).append("\n");
    sb.append("    has1stQuarterStarted: ").append(toIndentedString(has1stQuarterStarted)).append("\n");
    sb.append("    has2ndQuarterStarted: ").append(toIndentedString(has2ndQuarterStarted)).append("\n");
    sb.append("    has3rdQuarterStarted: ").append(toIndentedString(has3rdQuarterStarted)).append("\n");
    sb.append("    has4thQuarterStarted: ").append(toIndentedString(has4thQuarterStarted)).append("\n");
    sb.append("    hasStarted: ").append(toIndentedString(hasStarted)).append("\n");
    sb.append("    homeRotationNumber: ").append(toIndentedString(homeRotationNumber)).append("\n");
    sb.append("    homeScore: ").append(toIndentedString(homeScore)).append("\n");
    sb.append("    homeScoreOvertime: ").append(toIndentedString(homeScoreOvertime)).append("\n");
    sb.append("    homeScoreQuarter1: ").append(toIndentedString(homeScoreQuarter1)).append("\n");
    sb.append("    homeScoreQuarter2: ").append(toIndentedString(homeScoreQuarter2)).append("\n");
    sb.append("    homeScoreQuarter3: ").append(toIndentedString(homeScoreQuarter3)).append("\n");
    sb.append("    homeScoreQuarter4: ").append(toIndentedString(homeScoreQuarter4)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    homeTeamID: ").append(toIndentedString(homeTeamID)).append("\n");
    sb.append("    homeTeamMoneyLine: ").append(toIndentedString(homeTeamMoneyLine)).append("\n");
    sb.append("    homeTimeouts: ").append(toIndentedString(homeTimeouts)).append("\n");
    sb.append("    isInProgress: ").append(toIndentedString(isInProgress)).append("\n");
    sb.append("    isOver: ").append(toIndentedString(isOver)).append("\n");
    sb.append("    isOvertime: ").append(toIndentedString(isOvertime)).append("\n");
    sb.append("    lastPlay: ").append(toIndentedString(lastPlay)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    neutralVenue: ").append(toIndentedString(neutralVenue)).append("\n");
    sb.append("    overPayout: ").append(toIndentedString(overPayout)).append("\n");
    sb.append("    overUnder: ").append(toIndentedString(overUnder)).append("\n");
    sb.append("    pointSpread: ").append(toIndentedString(pointSpread)).append("\n");
    sb.append("    pointSpreadAwayTeamMoneyLine: ").append(toIndentedString(pointSpreadAwayTeamMoneyLine)).append("\n");
    sb.append("    pointSpreadHomeTeamMoneyLine: ").append(toIndentedString(pointSpreadHomeTeamMoneyLine)).append("\n");
    sb.append("    possession: ").append(toIndentedString(possession)).append("\n");
    sb.append("    quarter: ").append(toIndentedString(quarter)).append("\n");
    sb.append("    quarterDescription: ").append(toIndentedString(quarterDescription)).append("\n");
    sb.append("    redZone: ").append(toIndentedString(redZone)).append("\n");
    sb.append("    refereeID: ").append(toIndentedString(refereeID)).append("\n");
    sb.append("    scoreID: ").append(toIndentedString(scoreID)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    stadiumDetails: ").append(toIndentedString(stadiumDetails)).append("\n");
    sb.append("    stadiumID: ").append(toIndentedString(stadiumID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeRemaining: ").append(toIndentedString(timeRemaining)).append("\n");
    sb.append("    underPayout: ").append(toIndentedString(underPayout)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    yardLine: ").append(toIndentedString(yardLine)).append("\n");
    sb.append("    yardLineTerritory: ").append(toIndentedString(yardLineTerritory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attendance");
    openapiFields.add("AwayRotationNumber");
    openapiFields.add("AwayScore");
    openapiFields.add("AwayScoreOvertime");
    openapiFields.add("AwayScoreQuarter1");
    openapiFields.add("AwayScoreQuarter2");
    openapiFields.add("AwayScoreQuarter3");
    openapiFields.add("AwayScoreQuarter4");
    openapiFields.add("AwayTeam");
    openapiFields.add("AwayTeamID");
    openapiFields.add("AwayTeamMoneyLine");
    openapiFields.add("AwayTimeouts");
    openapiFields.add("Canceled");
    openapiFields.add("Channel");
    openapiFields.add("Closed");
    openapiFields.add("Date");
    openapiFields.add("DateTime");
    openapiFields.add("DateTimeUTC");
    openapiFields.add("Day");
    openapiFields.add("Distance");
    openapiFields.add("Down");
    openapiFields.add("DownAndDistance");
    openapiFields.add("ForecastDescription");
    openapiFields.add("ForecastTempHigh");
    openapiFields.add("ForecastTempLow");
    openapiFields.add("ForecastWindChill");
    openapiFields.add("ForecastWindSpeed");
    openapiFields.add("GameEndDateTime");
    openapiFields.add("GameKey");
    openapiFields.add("GeoLat");
    openapiFields.add("GeoLong");
    openapiFields.add("GlobalAwayTeamID");
    openapiFields.add("GlobalGameID");
    openapiFields.add("GlobalHomeTeamID");
    openapiFields.add("Has1stQuarterStarted");
    openapiFields.add("Has2ndQuarterStarted");
    openapiFields.add("Has3rdQuarterStarted");
    openapiFields.add("Has4thQuarterStarted");
    openapiFields.add("HasStarted");
    openapiFields.add("HomeRotationNumber");
    openapiFields.add("HomeScore");
    openapiFields.add("HomeScoreOvertime");
    openapiFields.add("HomeScoreQuarter1");
    openapiFields.add("HomeScoreQuarter2");
    openapiFields.add("HomeScoreQuarter3");
    openapiFields.add("HomeScoreQuarter4");
    openapiFields.add("HomeTeam");
    openapiFields.add("HomeTeamID");
    openapiFields.add("HomeTeamMoneyLine");
    openapiFields.add("HomeTimeouts");
    openapiFields.add("IsInProgress");
    openapiFields.add("IsOver");
    openapiFields.add("IsOvertime");
    openapiFields.add("LastPlay");
    openapiFields.add("LastUpdated");
    openapiFields.add("NeutralVenue");
    openapiFields.add("OverPayout");
    openapiFields.add("OverUnder");
    openapiFields.add("PointSpread");
    openapiFields.add("PointSpreadAwayTeamMoneyLine");
    openapiFields.add("PointSpreadHomeTeamMoneyLine");
    openapiFields.add("Possession");
    openapiFields.add("Quarter");
    openapiFields.add("QuarterDescription");
    openapiFields.add("RedZone");
    openapiFields.add("RefereeID");
    openapiFields.add("ScoreID");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("StadiumDetails");
    openapiFields.add("StadiumID");
    openapiFields.add("Status");
    openapiFields.add("TimeRemaining");
    openapiFields.add("UnderPayout");
    openapiFields.add("Week");
    openapiFields.add("YardLine");
    openapiFields.add("YardLineTerritory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Score
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Score.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Score is not found in the empty JSON string", Score.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Score.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Score` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AwayTeam") != null && !jsonObj.get("AwayTeam").isJsonNull()) && !jsonObj.get("AwayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeam").toString()));
      }
      if ((jsonObj.get("Channel") != null && !jsonObj.get("Channel").isJsonNull()) && !jsonObj.get("Channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Channel").toString()));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("DateTimeUTC") != null && !jsonObj.get("DateTimeUTC").isJsonNull()) && !jsonObj.get("DateTimeUTC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTimeUTC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTimeUTC").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("Distance") != null && !jsonObj.get("Distance").isJsonNull()) && !jsonObj.get("Distance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Distance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Distance").toString()));
      }
      if ((jsonObj.get("DownAndDistance") != null && !jsonObj.get("DownAndDistance").isJsonNull()) && !jsonObj.get("DownAndDistance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DownAndDistance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DownAndDistance").toString()));
      }
      if ((jsonObj.get("ForecastDescription") != null && !jsonObj.get("ForecastDescription").isJsonNull()) && !jsonObj.get("ForecastDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ForecastDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ForecastDescription").toString()));
      }
      if ((jsonObj.get("GameEndDateTime") != null && !jsonObj.get("GameEndDateTime").isJsonNull()) && !jsonObj.get("GameEndDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GameEndDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GameEndDateTime").toString()));
      }
      if ((jsonObj.get("GameKey") != null && !jsonObj.get("GameKey").isJsonNull()) && !jsonObj.get("GameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GameKey").toString()));
      }
      if ((jsonObj.get("HomeTeam") != null && !jsonObj.get("HomeTeam").isJsonNull()) && !jsonObj.get("HomeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeam").toString()));
      }
      if ((jsonObj.get("LastPlay") != null && !jsonObj.get("LastPlay").isJsonNull()) && !jsonObj.get("LastPlay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastPlay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastPlay").toString()));
      }
      if ((jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) && !jsonObj.get("LastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastUpdated").toString()));
      }
      if ((jsonObj.get("Possession") != null && !jsonObj.get("Possession").isJsonNull()) && !jsonObj.get("Possession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Possession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Possession").toString()));
      }
      if ((jsonObj.get("Quarter") != null && !jsonObj.get("Quarter").isJsonNull()) && !jsonObj.get("Quarter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Quarter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Quarter").toString()));
      }
      if ((jsonObj.get("QuarterDescription") != null && !jsonObj.get("QuarterDescription").isJsonNull()) && !jsonObj.get("QuarterDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuarterDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuarterDescription").toString()));
      }
      if ((jsonObj.get("RedZone") != null && !jsonObj.get("RedZone").isJsonNull()) && !jsonObj.get("RedZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RedZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RedZone").toString()));
      }
      // validate the optional field `StadiumDetails`
      if (jsonObj.get("StadiumDetails") != null && !jsonObj.get("StadiumDetails").isJsonNull()) {
        Stadium.validateJsonElement(jsonObj.get("StadiumDetails"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("TimeRemaining") != null && !jsonObj.get("TimeRemaining").isJsonNull()) && !jsonObj.get("TimeRemaining").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeRemaining` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeRemaining").toString()));
      }
      if ((jsonObj.get("YardLineTerritory") != null && !jsonObj.get("YardLineTerritory").isJsonNull()) && !jsonObj.get("YardLineTerritory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YardLineTerritory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YardLineTerritory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Score.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Score' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Score> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Score.class));

       return (TypeAdapter<T>) new TypeAdapter<Score>() {
           @Override
           public void write(JsonWriter out, Score value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Score read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Score given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Score
   * @throws IOException if the JSON string is invalid with respect to Score
   */
  public static Score fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Score.class);
  }

  /**
   * Convert an instance of Score to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

