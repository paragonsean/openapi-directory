/*
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Bye;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.News;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.PlayerDetail;
import org.openapitools.client.model.Referee;
import org.openapitools.client.model.Schedule;
import org.openapitools.client.model.ScheduleBasic;
import org.openapitools.client.model.Score;
import org.openapitools.client.model.ScoreBasic;
import org.openapitools.client.model.Stadium;
import org.openapitools.client.model.Standing;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamBasic;
import org.openapitools.client.model.TeamDepthChart;
import org.openapitools.client.model.TeamGame;
import org.openapitools.client.model.TeamSeason;
import org.openapitools.client.model.Timeframe;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Are Games In Progress
     *
     * Returns &lt;code&gt;true&lt;/code&gt; if there is at least one game being played at the time of the request or &lt;code&gt;false&lt;/code&gt; if there are none.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void areGamesInProgressTest() throws ApiException {
        String format = null;
        Boolean response = api.areGamesInProgress(format);
        // TODO: test validations
    }

    /**
     * Bye Weeks
     *
     * Get bye weeks for the teams during a specified NFL season. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void byeWeeksTest() throws ApiException {
        String format = null;
        String season = null;
        List<Bye> response = api.byeWeeks(format, season);
        // TODO: test validations
    }

    /**
     * Depth Charts
     *
     * Depth charts for all NFL teams split by offensive, defensive, and special teams position groupings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void depthChartsTest() throws ApiException {
        String format = null;
        List<TeamDepthChart> response = api.depthCharts(format);
        // TODO: test validations
    }

    /**
     * Game Stats by Season (Deprecated, use Team Game Stats instead)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadTest() throws ApiException {
        String format = null;
        String season = null;
        List<Game> response = api.gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(format, season);
        // TODO: test validations
    }

    /**
     * Game Stats by Week (Deprecated, use Team Game Stats instead)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<Game> response = api.gameStatsByWeekDeprecatedUseTeamGameStatsInstead(format, season, week);
        // TODO: test validations
    }

    /**
     * News
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsTest() throws ApiException {
        String format = null;
        List<News> response = api.news(format);
        // TODO: test validations
    }

    /**
     * News by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<News> response = api.newsByDate(format, date);
        // TODO: test validations
    }

    /**
     * News by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByPlayerTest() throws ApiException {
        String format = null;
        String playerid = null;
        List<News> response = api.newsByPlayer(format, playerid);
        // TODO: test validations
    }

    /**
     * News by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByTeamTest() throws ApiException {
        String format = null;
        String team = null;
        List<News> response = api.newsByTeam(format, team);
        // TODO: test validations
    }

    /**
     * Player Details by Available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByAvailableTest() throws ApiException {
        String format = null;
        List<Player> response = api.playerDetailsByAvailable(format);
        // TODO: test validations
    }

    /**
     * Player Details by Free Agents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByFreeAgentsTest() throws ApiException {
        String format = null;
        List<Player> response = api.playerDetailsByFreeAgents(format);
        // TODO: test validations
    }

    /**
     * Player Details by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByPlayerTest() throws ApiException {
        String format = null;
        String playerid = null;
        PlayerDetail response = api.playerDetailsByPlayer(format, playerid);
        // TODO: test validations
    }

    /**
     * Player Details by Rookie Draft Year
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByRookieDraftYearTest() throws ApiException {
        String format = null;
        String season = null;
        List<Player> response = api.playerDetailsByRookieDraftYear(format, season);
        // TODO: test validations
    }

    /**
     * Player Details by Team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerDetailsByTeamTest() throws ApiException {
        String format = null;
        String team = null;
        List<PlayerDetail> response = api.playerDetailsByTeam(format, team);
        // TODO: test validations
    }

    /**
     * Players by Team (Basic)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playersByTeamBasicTest() throws ApiException {
        String format = null;
        String team = null;
        Object response = api.playersByTeamBasic(format, team);
        // TODO: test validations
    }

    /**
     * Referees
     *
     * Returns full list of NFL Referees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refereesTest() throws ApiException {
        String format = null;
        List<Referee> response = api.referees(format);
        // TODO: test validations
    }

    /**
     * Schedule
     *
     * Game schedule for a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleTest() throws ApiException {
        String format = null;
        String season = null;
        List<Schedule> response = api.schedule(format, season);
        // TODO: test validations
    }

    /**
     * Schedule (Basic)
     *
     * Game schedule for a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleBasicTest() throws ApiException {
        String format = null;
        String season = null;
        List<ScheduleBasic> response = api.scheduleBasic(format, season);
        // TODO: test validations
    }

    /**
     * Scores by Date
     *
     * Get game scores for a specified week of a season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<Score> response = api.scoresByDate(format, date);
        // TODO: test validations
    }

    /**
     * Scores by Season 
     *
     * Game scores for a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        List<Score> response = api.scoresBySeason(format, season);
        // TODO: test validations
    }

    /**
     * Scores by Week
     *
     * Get game scores for a specified week of a season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresByWeekTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<Score> response = api.scoresByWeek(format, season, week);
        // TODO: test validations
    }

    /**
     * Scores by Week (Basic)
     *
     * Get game scores for a specified week of a season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresByWeekBasicTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<ScoreBasic> response = api.scoresByWeekBasic(format, season, week);
        // TODO: test validations
    }

    /**
     * Scores by Week Simulation
     *
     * Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scoresByWeekSimulationTest() throws ApiException {
        String format = null;
        String numberofplays = null;
        List<Score> response = api.scoresByWeekSimulation(format, numberofplays);
        // TODO: test validations
    }

    /**
     * Season Current
     *
     * Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seasonCurrentTest() throws ApiException {
        String format = null;
        Integer response = api.seasonCurrent(format);
        // TODO: test validations
    }

    /**
     * Season Last Completed
     *
     * Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seasonLastCompletedTest() throws ApiException {
        String format = null;
        Integer response = api.seasonLastCompleted(format);
        // TODO: test validations
    }

    /**
     * Season Upcoming
     *
     * Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seasonUpcomingTest() throws ApiException {
        String format = null;
        Integer response = api.seasonUpcoming(format);
        // TODO: test validations
    }

    /**
     * Stadiums
     *
     * This method returns all stadiums.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stadiumsTest() throws ApiException {
        String format = null;
        List<Stadium> response = api.stadiums(format);
        // TODO: test validations
    }

    /**
     * Standings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void standingsTest() throws ApiException {
        String format = null;
        String season = null;
        List<Standing> response = api.standings(format, season);
        // TODO: test validations
    }

    /**
     * Team Game Logs By Season
     *
     * Game by game log of total team statistics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamGameLogsBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        String teamid = null;
        String numberofgames = null;
        List<TeamGame> response = api.teamGameLogsBySeason(format, season, teamid, numberofgames);
        // TODO: test validations
    }

    /**
     * Team Game Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamGameStatsTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<TeamGame> response = api.teamGameStats(format, season, week);
        // TODO: test validations
    }

    /**
     * Team Season Stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamSeasonStatsTest() throws ApiException {
        String format = null;
        String season = null;
        List<TeamSeason> response = api.teamSeasonStats(format, season);
        // TODO: test validations
    }

    /**
     * Teams (Active)
     *
     * Gets all active teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsActiveTest() throws ApiException {
        String format = null;
        List<Team> response = api.teamsActive(format);
        // TODO: test validations
    }

    /**
     * Teams (All)
     *
     * Gets all teams, including pro bowl teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsAllTest() throws ApiException {
        String format = null;
        List<Team> response = api.teamsAll(format);
        // TODO: test validations
    }

    /**
     * Teams (Basic)
     *
     * Gets all teams, including pro bowl teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBasicTest() throws ApiException {
        String format = null;
        List<TeamBasic> response = api.teamsBasic(format);
        // TODO: test validations
    }

    /**
     * Teams by Season
     *
     * List of teams playing in a specified season.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        List<Team> response = api.teamsBySeason(format, season);
        // TODO: test validations
    }

    /**
     * Timeframes
     *
     * Get detailed information about past, present, and future timeframes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeframesTest() throws ApiException {
        String format = null;
        String type = null;
        List<Timeframe> response = api.timeframes(format, type);
        // TODO: test validations
    }

    /**
     * Week Current
     *
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void weekCurrentTest() throws ApiException {
        String format = null;
        Integer response = api.weekCurrent(format);
        // TODO: test validations
    }

    /**
     * Week Last Completed
     *
     * Number of the last completed week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void weekLastCompletedTest() throws ApiException {
        String format = null;
        Integer response = api.weekLastCompleted(format);
        // TODO: test validations
    }

    /**
     * Week Upcoming
     *
     * Number of the upcoming week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void weekUpcomingTest() throws ApiException {
        String format = null;
        Integer response = api.weekUpcoming(format);
        // TODO: test validations
    }

    /**
     * X Ping
     *
     * Ping NFL API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void xPingTest() throws ApiException {
        String format = null;
        String seconds = null;
        Object response = api.xPing(format, seconds);
        // TODO: test validations
    }

}
