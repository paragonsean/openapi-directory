/**
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDepthChart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDepthChart::OAITeamDepthChart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDepthChart::OAITeamDepthChart() {
    this->initializeModel();
}

OAITeamDepthChart::~OAITeamDepthChart() {}

void OAITeamDepthChart::initializeModel() {

    m_defense_isSet = false;
    m_defense_isValid = false;

    m_offense_isSet = false;
    m_offense_isValid = false;

    m_special_teams_isSet = false;
    m_special_teams_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAITeamDepthChart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDepthChart::fromJsonObject(QJsonObject json) {

    m_defense_isValid = ::OpenAPI::fromJsonValue(m_defense, json[QString("Defense")]);
    m_defense_isSet = !json[QString("Defense")].isNull() && m_defense_isValid;

    m_offense_isValid = ::OpenAPI::fromJsonValue(m_offense, json[QString("Offense")]);
    m_offense_isSet = !json[QString("Offense")].isNull() && m_offense_isValid;

    m_special_teams_isValid = ::OpenAPI::fromJsonValue(m_special_teams, json[QString("SpecialTeams")]);
    m_special_teams_isSet = !json[QString("SpecialTeams")].isNull() && m_special_teams_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;
}

QString OAITeamDepthChart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDepthChart::asJsonObject() const {
    QJsonObject obj;
    if (m_defense.size() > 0) {
        obj.insert(QString("Defense"), ::OpenAPI::toJsonValue(m_defense));
    }
    if (m_offense.size() > 0) {
        obj.insert(QString("Offense"), ::OpenAPI::toJsonValue(m_offense));
    }
    if (m_special_teams.size() > 0) {
        obj.insert(QString("SpecialTeams"), ::OpenAPI::toJsonValue(m_special_teams));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

QList<OAIDepthChart> OAITeamDepthChart::getDefense() const {
    return m_defense;
}
void OAITeamDepthChart::setDefense(const QList<OAIDepthChart> &defense) {
    m_defense = defense;
    m_defense_isSet = true;
}

bool OAITeamDepthChart::is_defense_Set() const{
    return m_defense_isSet;
}

bool OAITeamDepthChart::is_defense_Valid() const{
    return m_defense_isValid;
}

QList<OAIDepthChart> OAITeamDepthChart::getOffense() const {
    return m_offense;
}
void OAITeamDepthChart::setOffense(const QList<OAIDepthChart> &offense) {
    m_offense = offense;
    m_offense_isSet = true;
}

bool OAITeamDepthChart::is_offense_Set() const{
    return m_offense_isSet;
}

bool OAITeamDepthChart::is_offense_Valid() const{
    return m_offense_isValid;
}

QList<OAIDepthChart> OAITeamDepthChart::getSpecialTeams() const {
    return m_special_teams;
}
void OAITeamDepthChart::setSpecialTeams(const QList<OAIDepthChart> &special_teams) {
    m_special_teams = special_teams;
    m_special_teams_isSet = true;
}

bool OAITeamDepthChart::is_special_teams_Set() const{
    return m_special_teams_isSet;
}

bool OAITeamDepthChart::is_special_teams_Valid() const{
    return m_special_teams_isValid;
}

qint32 OAITeamDepthChart::getTeamId() const {
    return m_team_id;
}
void OAITeamDepthChart::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamDepthChart::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamDepthChart::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAITeamDepthChart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_defense.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDepthChart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
