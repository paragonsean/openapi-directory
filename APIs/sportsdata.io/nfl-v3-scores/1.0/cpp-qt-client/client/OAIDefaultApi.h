/**
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBye.h"
#include "OAIGame.h"
#include "OAINews.h"
#include "OAIPlayer.h"
#include "OAIPlayerDetail.h"
#include "OAIReferee.h"
#include "OAISchedule.h"
#include "OAIScheduleBasic.h"
#include "OAIScore.h"
#include "OAIScoreBasic.h"
#include "OAIStadium.h"
#include "OAIStanding.h"
#include "OAITeam.h"
#include "OAITeamBasic.h"
#include "OAITeamDepthChart.h"
#include "OAITeamGame.h"
#include "OAITeamSeason.h"
#include "OAITimeframe.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    */
    virtual void areGamesInProgress(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void byeWeeks(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void depthCharts(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void gameStatsByWeekDeprecatedUseTeamGameStatsInstead(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    */
    virtual void news(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void newsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void newsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void newsByTeam(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByAvailable(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByFreeAgents(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerDetailsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerDetailsByRookieDraftYear(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playerDetailsByTeam(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playersByTeamBasic(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    */
    virtual void referees(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void schedule(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void scheduleBasic(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void scoresByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void scoresBySeason(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void scoresByWeek(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void scoresByWeekBasic(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  numberofplays QString [required]
    */
    virtual void scoresByWeekSimulation(const QString &format, const QString &numberofplays);

    /**
    * @param[in]  format QString [required]
    */
    virtual void seasonCurrent(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void seasonLastCompleted(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void seasonUpcoming(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void stadiums(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void standings(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  teamid QString [required]
    * @param[in]  numberofgames QString [required]
    */
    virtual void teamGameLogsBySeason(const QString &format, const QString &season, const QString &teamid, const QString &numberofgames);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void teamGameStats(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void teamSeasonStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsActive(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsAll(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsBasic(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void teamsBySeason(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  type QString [required]
    */
    virtual void timeframes(const QString &format, const QString &type);

    /**
    * @param[in]  format QString [required]
    */
    virtual void weekCurrent(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void weekLastCompleted(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void weekUpcoming(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  seconds QString [required]
    */
    virtual void xPing(const QString &format, const QString &seconds);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void areGamesInProgressCallback(OAIHttpRequestWorker *worker);
    void byeWeeksCallback(OAIHttpRequestWorker *worker);
    void depthChartsCallback(OAIHttpRequestWorker *worker);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback(OAIHttpRequestWorker *worker);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback(OAIHttpRequestWorker *worker);
    void newsCallback(OAIHttpRequestWorker *worker);
    void newsByDateCallback(OAIHttpRequestWorker *worker);
    void newsByPlayerCallback(OAIHttpRequestWorker *worker);
    void newsByTeamCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByAvailableCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByFreeAgentsCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByRookieDraftYearCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByTeamCallback(OAIHttpRequestWorker *worker);
    void playersByTeamBasicCallback(OAIHttpRequestWorker *worker);
    void refereesCallback(OAIHttpRequestWorker *worker);
    void scheduleCallback(OAIHttpRequestWorker *worker);
    void scheduleBasicCallback(OAIHttpRequestWorker *worker);
    void scoresByDateCallback(OAIHttpRequestWorker *worker);
    void scoresBySeasonCallback(OAIHttpRequestWorker *worker);
    void scoresByWeekCallback(OAIHttpRequestWorker *worker);
    void scoresByWeekBasicCallback(OAIHttpRequestWorker *worker);
    void scoresByWeekSimulationCallback(OAIHttpRequestWorker *worker);
    void seasonCurrentCallback(OAIHttpRequestWorker *worker);
    void seasonLastCompletedCallback(OAIHttpRequestWorker *worker);
    void seasonUpcomingCallback(OAIHttpRequestWorker *worker);
    void stadiumsCallback(OAIHttpRequestWorker *worker);
    void standingsCallback(OAIHttpRequestWorker *worker);
    void teamGameLogsBySeasonCallback(OAIHttpRequestWorker *worker);
    void teamGameStatsCallback(OAIHttpRequestWorker *worker);
    void teamSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void teamsActiveCallback(OAIHttpRequestWorker *worker);
    void teamsAllCallback(OAIHttpRequestWorker *worker);
    void teamsBasicCallback(OAIHttpRequestWorker *worker);
    void teamsBySeasonCallback(OAIHttpRequestWorker *worker);
    void timeframesCallback(OAIHttpRequestWorker *worker);
    void weekCurrentCallback(OAIHttpRequestWorker *worker);
    void weekLastCompletedCallback(OAIHttpRequestWorker *worker);
    void weekUpcomingCallback(OAIHttpRequestWorker *worker);
    void xPingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void areGamesInProgressSignal(bool summary);
    void byeWeeksSignal(QList<OAIBye> summary);
    void depthChartsSignal(QList<OAITeamDepthChart> summary);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignal(QList<OAIGame> summary);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignal(QList<OAIGame> summary);
    void newsSignal(QList<OAINews> summary);
    void newsByDateSignal(QList<OAINews> summary);
    void newsByPlayerSignal(QList<OAINews> summary);
    void newsByTeamSignal(QList<OAINews> summary);
    void playerDetailsByAvailableSignal(QList<OAIPlayer> summary);
    void playerDetailsByFreeAgentsSignal(QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignal(OAIPlayerDetail summary);
    void playerDetailsByRookieDraftYearSignal(QList<OAIPlayer> summary);
    void playerDetailsByTeamSignal(QList<OAIPlayerDetail> summary);
    void playersByTeamBasicSignal(QJsonValue summary);
    void refereesSignal(QList<OAIReferee> summary);
    void scheduleSignal(QList<OAISchedule> summary);
    void scheduleBasicSignal(QList<OAIScheduleBasic> summary);
    void scoresByDateSignal(QList<OAIScore> summary);
    void scoresBySeasonSignal(QList<OAIScore> summary);
    void scoresByWeekSignal(QList<OAIScore> summary);
    void scoresByWeekBasicSignal(QList<OAIScoreBasic> summary);
    void scoresByWeekSimulationSignal(QList<OAIScore> summary);
    void seasonCurrentSignal(qint32 summary);
    void seasonLastCompletedSignal(qint32 summary);
    void seasonUpcomingSignal(qint32 summary);
    void stadiumsSignal(QList<OAIStadium> summary);
    void standingsSignal(QList<OAIStanding> summary);
    void teamGameLogsBySeasonSignal(QList<OAITeamGame> summary);
    void teamGameStatsSignal(QList<OAITeamGame> summary);
    void teamSeasonStatsSignal(QList<OAITeamSeason> summary);
    void teamsActiveSignal(QList<OAITeam> summary);
    void teamsAllSignal(QList<OAITeam> summary);
    void teamsBasicSignal(QList<OAITeamBasic> summary);
    void teamsBySeasonSignal(QList<OAITeam> summary);
    void timeframesSignal(QList<OAITimeframe> summary);
    void weekCurrentSignal(qint32 summary);
    void weekLastCompletedSignal(qint32 summary);
    void weekUpcomingSignal(qint32 summary);
    void xPingSignal(QJsonValue summary);


    void areGamesInProgressSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void byeWeeksSignalFull(OAIHttpRequestWorker *worker, QList<OAIBye> summary);
    void depthChartsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamDepthChart> summary);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void newsSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByPlayerSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void playerDetailsByAvailableSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByFreeAgentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayerDetail summary);
    void playerDetailsByRookieDraftYearSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerDetail> summary);
    void playersByTeamBasicSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void refereesSignalFull(OAIHttpRequestWorker *worker, QList<OAIReferee> summary);
    void scheduleSignalFull(OAIHttpRequestWorker *worker, QList<OAISchedule> summary);
    void scheduleBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduleBasic> summary);
    void scoresByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void scoresBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void scoresByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void scoresByWeekBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreBasic> summary);
    void scoresByWeekSimulationSignalFull(OAIHttpRequestWorker *worker, QList<OAIScore> summary);
    void seasonCurrentSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void seasonLastCompletedSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void seasonUpcomingSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void stadiumsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStadium> summary);
    void standingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStanding> summary);
    void teamGameLogsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamGameStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamSeason> summary);
    void teamsActiveSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teamsAllSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teamsBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamBasic> summary);
    void teamsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void timeframesSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeframe> summary);
    void weekCurrentSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void weekLastCompletedSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void weekUpcomingSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void xPingSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalError() instead")
    void areGamesInProgressSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use byeWeeksSignalError() instead")
    void byeWeeksSignalE(QList<OAIBye> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void byeWeeksSignalError(QList<OAIBye> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depthChartsSignalError() instead")
    void depthChartsSignalE(QList<OAITeamDepthChart> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void depthChartsSignalError(QList<OAITeamDepthChart> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalError() instead")
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalError() instead")
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalError() instead")
    void newsSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalError() instead")
    void newsByDateSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalError() instead")
    void newsByPlayerSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByTeamSignalError() instead")
    void newsByTeamSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByTeamSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByAvailableSignalError() instead")
    void playerDetailsByAvailableSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByAvailableSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByFreeAgentsSignalError() instead")
    void playerDetailsByFreeAgentsSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByFreeAgentsSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalError() instead")
    void playerDetailsByPlayerSignalE(OAIPlayerDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalError(OAIPlayerDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByRookieDraftYearSignalError() instead")
    void playerDetailsByRookieDraftYearSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByRookieDraftYearSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalError() instead")
    void playerDetailsByTeamSignalE(QList<OAIPlayerDetail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalError(QList<OAIPlayerDetail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamBasicSignalError() instead")
    void playersByTeamBasicSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamBasicSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refereesSignalError() instead")
    void refereesSignalE(QList<OAIReferee> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refereesSignalError(QList<OAIReferee> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleSignalError() instead")
    void scheduleSignalE(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleSignalError(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleBasicSignalError() instead")
    void scheduleBasicSignalE(QList<OAIScheduleBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleBasicSignalError(QList<OAIScheduleBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByDateSignalError() instead")
    void scoresByDateSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByDateSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresBySeasonSignalError() instead")
    void scoresBySeasonSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresBySeasonSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSignalError() instead")
    void scoresByWeekSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekBasicSignalError() instead")
    void scoresByWeekBasicSignalE(QList<OAIScoreBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekBasicSignalError(QList<OAIScoreBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSimulationSignalError() instead")
    void scoresByWeekSimulationSignalE(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSimulationSignalError(QList<OAIScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonCurrentSignalError() instead")
    void seasonCurrentSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonCurrentSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonLastCompletedSignalError() instead")
    void seasonLastCompletedSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonLastCompletedSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonUpcomingSignalError() instead")
    void seasonUpcomingSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonUpcomingSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalError() instead")
    void stadiumsSignalE(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalError(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use standingsSignalError() instead")
    void standingsSignalE(QList<OAIStanding> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void standingsSignalError(QList<OAIStanding> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalError() instead")
    void teamGameLogsBySeasonSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsSignalError() instead")
    void teamGameStatsSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalError() instead")
    void teamSeasonStatsSignalE(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalError(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsActiveSignalError() instead")
    void teamsActiveSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsActiveSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAllSignalError() instead")
    void teamsAllSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAllSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBasicSignalError() instead")
    void teamsBasicSignalE(QList<OAITeamBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBasicSignalError(QList<OAITeamBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBySeasonSignalError() instead")
    void teamsBySeasonSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBySeasonSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeframesSignalError() instead")
    void timeframesSignalE(QList<OAITimeframe> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void timeframesSignalError(QList<OAITimeframe> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekCurrentSignalError() instead")
    void weekCurrentSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weekCurrentSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekLastCompletedSignalError() instead")
    void weekLastCompletedSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weekLastCompletedSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekUpcomingSignalError() instead")
    void weekUpcomingSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weekUpcomingSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xPingSignalError() instead")
    void xPingSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xPingSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalErrorFull() instead")
    void areGamesInProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use byeWeeksSignalErrorFull() instead")
    void byeWeeksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void byeWeeksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depthChartsSignalErrorFull() instead")
    void depthChartsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void depthChartsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalErrorFull() instead")
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalErrorFull() instead")
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gameStatsByWeekDeprecatedUseTeamGameStatsInsteadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalErrorFull() instead")
    void newsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalErrorFull() instead")
    void newsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalErrorFull() instead")
    void newsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByTeamSignalErrorFull() instead")
    void newsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByAvailableSignalErrorFull() instead")
    void playerDetailsByAvailableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByAvailableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByFreeAgentsSignalErrorFull() instead")
    void playerDetailsByFreeAgentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByFreeAgentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalErrorFull() instead")
    void playerDetailsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByRookieDraftYearSignalErrorFull() instead")
    void playerDetailsByRookieDraftYearSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByRookieDraftYearSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalErrorFull() instead")
    void playerDetailsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamBasicSignalErrorFull() instead")
    void playersByTeamBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refereesSignalErrorFull() instead")
    void refereesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refereesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleSignalErrorFull() instead")
    void scheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleBasicSignalErrorFull() instead")
    void scheduleBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByDateSignalErrorFull() instead")
    void scoresByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresBySeasonSignalErrorFull() instead")
    void scoresBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSignalErrorFull() instead")
    void scoresByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekBasicSignalErrorFull() instead")
    void scoresByWeekBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoresByWeekSimulationSignalErrorFull() instead")
    void scoresByWeekSimulationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoresByWeekSimulationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonCurrentSignalErrorFull() instead")
    void seasonCurrentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonCurrentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonLastCompletedSignalErrorFull() instead")
    void seasonLastCompletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonLastCompletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seasonUpcomingSignalErrorFull() instead")
    void seasonUpcomingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seasonUpcomingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalErrorFull() instead")
    void stadiumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use standingsSignalErrorFull() instead")
    void standingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void standingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalErrorFull() instead")
    void teamGameLogsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsSignalErrorFull() instead")
    void teamGameStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalErrorFull() instead")
    void teamSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsActiveSignalErrorFull() instead")
    void teamsActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAllSignalErrorFull() instead")
    void teamsAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBasicSignalErrorFull() instead")
    void teamsBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsBySeasonSignalErrorFull() instead")
    void teamsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timeframesSignalErrorFull() instead")
    void timeframesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timeframesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekCurrentSignalErrorFull() instead")
    void weekCurrentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weekCurrentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekLastCompletedSignalErrorFull() instead")
    void weekLastCompletedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weekLastCompletedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weekUpcomingSignalErrorFull() instead")
    void weekUpcomingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weekUpcomingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xPingSignalErrorFull() instead")
    void xPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
