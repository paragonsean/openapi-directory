/**
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamBasic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamBasic::OAITeamBasic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamBasic::OAITeamBasic() {
    this->initializeModel();
}

OAITeamBasic::~OAITeamBasic() {}

void OAITeamBasic::initializeModel() {

    m_bye_week_isSet = false;
    m_bye_week_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_defensive_coordinator_isSet = false;
    m_defensive_coordinator_isValid = false;

    m_defensive_scheme_isSet = false;
    m_defensive_scheme_isValid = false;

    m_division_isSet = false;
    m_division_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_head_coach_isSet = false;
    m_head_coach_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offensive_coordinator_isSet = false;
    m_offensive_coordinator_isValid = false;

    m_offensive_scheme_isSet = false;
    m_offensive_scheme_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_primary_color_isSet = false;
    m_primary_color_isValid = false;

    m_quaternary_color_isSet = false;
    m_quaternary_color_isValid = false;

    m_secondary_color_isSet = false;
    m_secondary_color_isValid = false;

    m_special_teams_coach_isSet = false;
    m_special_teams_coach_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_tertiary_color_isSet = false;
    m_tertiary_color_isValid = false;

    m_wikipedia_logo_url_isSet = false;
    m_wikipedia_logo_url_isValid = false;

    m_wikipedia_word_mark_url_isSet = false;
    m_wikipedia_word_mark_url_isValid = false;
}

void OAITeamBasic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamBasic::fromJsonObject(QJsonObject json) {

    m_bye_week_isValid = ::OpenAPI::fromJsonValue(m_bye_week, json[QString("ByeWeek")]);
    m_bye_week_isSet = !json[QString("ByeWeek")].isNull() && m_bye_week_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("Conference")]);
    m_conference_isSet = !json[QString("Conference")].isNull() && m_conference_isValid;

    m_defensive_coordinator_isValid = ::OpenAPI::fromJsonValue(m_defensive_coordinator, json[QString("DefensiveCoordinator")]);
    m_defensive_coordinator_isSet = !json[QString("DefensiveCoordinator")].isNull() && m_defensive_coordinator_isValid;

    m_defensive_scheme_isValid = ::OpenAPI::fromJsonValue(m_defensive_scheme, json[QString("DefensiveScheme")]);
    m_defensive_scheme_isSet = !json[QString("DefensiveScheme")].isNull() && m_defensive_scheme_isValid;

    m_division_isValid = ::OpenAPI::fromJsonValue(m_division, json[QString("Division")]);
    m_division_isSet = !json[QString("Division")].isNull() && m_division_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_head_coach_isValid = ::OpenAPI::fromJsonValue(m_head_coach, json[QString("HeadCoach")]);
    m_head_coach_isSet = !json[QString("HeadCoach")].isNull() && m_head_coach_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_offensive_coordinator_isValid = ::OpenAPI::fromJsonValue(m_offensive_coordinator, json[QString("OffensiveCoordinator")]);
    m_offensive_coordinator_isSet = !json[QString("OffensiveCoordinator")].isNull() && m_offensive_coordinator_isValid;

    m_offensive_scheme_isValid = ::OpenAPI::fromJsonValue(m_offensive_scheme, json[QString("OffensiveScheme")]);
    m_offensive_scheme_isSet = !json[QString("OffensiveScheme")].isNull() && m_offensive_scheme_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_primary_color_isValid = ::OpenAPI::fromJsonValue(m_primary_color, json[QString("PrimaryColor")]);
    m_primary_color_isSet = !json[QString("PrimaryColor")].isNull() && m_primary_color_isValid;

    m_quaternary_color_isValid = ::OpenAPI::fromJsonValue(m_quaternary_color, json[QString("QuaternaryColor")]);
    m_quaternary_color_isSet = !json[QString("QuaternaryColor")].isNull() && m_quaternary_color_isValid;

    m_secondary_color_isValid = ::OpenAPI::fromJsonValue(m_secondary_color, json[QString("SecondaryColor")]);
    m_secondary_color_isSet = !json[QString("SecondaryColor")].isNull() && m_secondary_color_isValid;

    m_special_teams_coach_isValid = ::OpenAPI::fromJsonValue(m_special_teams_coach, json[QString("SpecialTeamsCoach")]);
    m_special_teams_coach_isSet = !json[QString("SpecialTeamsCoach")].isNull() && m_special_teams_coach_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_tertiary_color_isValid = ::OpenAPI::fromJsonValue(m_tertiary_color, json[QString("TertiaryColor")]);
    m_tertiary_color_isSet = !json[QString("TertiaryColor")].isNull() && m_tertiary_color_isValid;

    m_wikipedia_logo_url_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_logo_url, json[QString("WikipediaLogoURL")]);
    m_wikipedia_logo_url_isSet = !json[QString("WikipediaLogoURL")].isNull() && m_wikipedia_logo_url_isValid;

    m_wikipedia_word_mark_url_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_word_mark_url, json[QString("WikipediaWordMarkURL")]);
    m_wikipedia_word_mark_url_isSet = !json[QString("WikipediaWordMarkURL")].isNull() && m_wikipedia_word_mark_url_isValid;
}

QString OAITeamBasic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamBasic::asJsonObject() const {
    QJsonObject obj;
    if (m_bye_week_isSet) {
        obj.insert(QString("ByeWeek"), ::OpenAPI::toJsonValue(m_bye_week));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_conference_isSet) {
        obj.insert(QString("Conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_defensive_coordinator_isSet) {
        obj.insert(QString("DefensiveCoordinator"), ::OpenAPI::toJsonValue(m_defensive_coordinator));
    }
    if (m_defensive_scheme_isSet) {
        obj.insert(QString("DefensiveScheme"), ::OpenAPI::toJsonValue(m_defensive_scheme));
    }
    if (m_division_isSet) {
        obj.insert(QString("Division"), ::OpenAPI::toJsonValue(m_division));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_head_coach_isSet) {
        obj.insert(QString("HeadCoach"), ::OpenAPI::toJsonValue(m_head_coach));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offensive_coordinator_isSet) {
        obj.insert(QString("OffensiveCoordinator"), ::OpenAPI::toJsonValue(m_offensive_coordinator));
    }
    if (m_offensive_scheme_isSet) {
        obj.insert(QString("OffensiveScheme"), ::OpenAPI::toJsonValue(m_offensive_scheme));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_primary_color_isSet) {
        obj.insert(QString("PrimaryColor"), ::OpenAPI::toJsonValue(m_primary_color));
    }
    if (m_quaternary_color_isSet) {
        obj.insert(QString("QuaternaryColor"), ::OpenAPI::toJsonValue(m_quaternary_color));
    }
    if (m_secondary_color_isSet) {
        obj.insert(QString("SecondaryColor"), ::OpenAPI::toJsonValue(m_secondary_color));
    }
    if (m_special_teams_coach_isSet) {
        obj.insert(QString("SpecialTeamsCoach"), ::OpenAPI::toJsonValue(m_special_teams_coach));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_tertiary_color_isSet) {
        obj.insert(QString("TertiaryColor"), ::OpenAPI::toJsonValue(m_tertiary_color));
    }
    if (m_wikipedia_logo_url_isSet) {
        obj.insert(QString("WikipediaLogoURL"), ::OpenAPI::toJsonValue(m_wikipedia_logo_url));
    }
    if (m_wikipedia_word_mark_url_isSet) {
        obj.insert(QString("WikipediaWordMarkURL"), ::OpenAPI::toJsonValue(m_wikipedia_word_mark_url));
    }
    return obj;
}

qint32 OAITeamBasic::getByeWeek() const {
    return m_bye_week;
}
void OAITeamBasic::setByeWeek(const qint32 &bye_week) {
    m_bye_week = bye_week;
    m_bye_week_isSet = true;
}

bool OAITeamBasic::is_bye_week_Set() const{
    return m_bye_week_isSet;
}

bool OAITeamBasic::is_bye_week_Valid() const{
    return m_bye_week_isValid;
}

QString OAITeamBasic::getCity() const {
    return m_city;
}
void OAITeamBasic::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITeamBasic::is_city_Set() const{
    return m_city_isSet;
}

bool OAITeamBasic::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITeamBasic::getConference() const {
    return m_conference;
}
void OAITeamBasic::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAITeamBasic::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAITeamBasic::is_conference_Valid() const{
    return m_conference_isValid;
}

QString OAITeamBasic::getDefensiveCoordinator() const {
    return m_defensive_coordinator;
}
void OAITeamBasic::setDefensiveCoordinator(const QString &defensive_coordinator) {
    m_defensive_coordinator = defensive_coordinator;
    m_defensive_coordinator_isSet = true;
}

bool OAITeamBasic::is_defensive_coordinator_Set() const{
    return m_defensive_coordinator_isSet;
}

bool OAITeamBasic::is_defensive_coordinator_Valid() const{
    return m_defensive_coordinator_isValid;
}

QString OAITeamBasic::getDefensiveScheme() const {
    return m_defensive_scheme;
}
void OAITeamBasic::setDefensiveScheme(const QString &defensive_scheme) {
    m_defensive_scheme = defensive_scheme;
    m_defensive_scheme_isSet = true;
}

bool OAITeamBasic::is_defensive_scheme_Set() const{
    return m_defensive_scheme_isSet;
}

bool OAITeamBasic::is_defensive_scheme_Valid() const{
    return m_defensive_scheme_isValid;
}

QString OAITeamBasic::getDivision() const {
    return m_division;
}
void OAITeamBasic::setDivision(const QString &division) {
    m_division = division;
    m_division_isSet = true;
}

bool OAITeamBasic::is_division_Set() const{
    return m_division_isSet;
}

bool OAITeamBasic::is_division_Valid() const{
    return m_division_isValid;
}

QString OAITeamBasic::getFullName() const {
    return m_full_name;
}
void OAITeamBasic::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAITeamBasic::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAITeamBasic::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint32 OAITeamBasic::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAITeamBasic::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAITeamBasic::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAITeamBasic::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

QString OAITeamBasic::getHeadCoach() const {
    return m_head_coach;
}
void OAITeamBasic::setHeadCoach(const QString &head_coach) {
    m_head_coach = head_coach;
    m_head_coach_isSet = true;
}

bool OAITeamBasic::is_head_coach_Set() const{
    return m_head_coach_isSet;
}

bool OAITeamBasic::is_head_coach_Valid() const{
    return m_head_coach_isValid;
}

QString OAITeamBasic::getKey() const {
    return m_key;
}
void OAITeamBasic::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITeamBasic::is_key_Set() const{
    return m_key_isSet;
}

bool OAITeamBasic::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITeamBasic::getName() const {
    return m_name;
}
void OAITeamBasic::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamBasic::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamBasic::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeamBasic::getOffensiveCoordinator() const {
    return m_offensive_coordinator;
}
void OAITeamBasic::setOffensiveCoordinator(const QString &offensive_coordinator) {
    m_offensive_coordinator = offensive_coordinator;
    m_offensive_coordinator_isSet = true;
}

bool OAITeamBasic::is_offensive_coordinator_Set() const{
    return m_offensive_coordinator_isSet;
}

bool OAITeamBasic::is_offensive_coordinator_Valid() const{
    return m_offensive_coordinator_isValid;
}

QString OAITeamBasic::getOffensiveScheme() const {
    return m_offensive_scheme;
}
void OAITeamBasic::setOffensiveScheme(const QString &offensive_scheme) {
    m_offensive_scheme = offensive_scheme;
    m_offensive_scheme_isSet = true;
}

bool OAITeamBasic::is_offensive_scheme_Set() const{
    return m_offensive_scheme_isSet;
}

bool OAITeamBasic::is_offensive_scheme_Valid() const{
    return m_offensive_scheme_isValid;
}

qint32 OAITeamBasic::getPlayerId() const {
    return m_player_id;
}
void OAITeamBasic::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAITeamBasic::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAITeamBasic::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAITeamBasic::getPrimaryColor() const {
    return m_primary_color;
}
void OAITeamBasic::setPrimaryColor(const QString &primary_color) {
    m_primary_color = primary_color;
    m_primary_color_isSet = true;
}

bool OAITeamBasic::is_primary_color_Set() const{
    return m_primary_color_isSet;
}

bool OAITeamBasic::is_primary_color_Valid() const{
    return m_primary_color_isValid;
}

QString OAITeamBasic::getQuaternaryColor() const {
    return m_quaternary_color;
}
void OAITeamBasic::setQuaternaryColor(const QString &quaternary_color) {
    m_quaternary_color = quaternary_color;
    m_quaternary_color_isSet = true;
}

bool OAITeamBasic::is_quaternary_color_Set() const{
    return m_quaternary_color_isSet;
}

bool OAITeamBasic::is_quaternary_color_Valid() const{
    return m_quaternary_color_isValid;
}

QString OAITeamBasic::getSecondaryColor() const {
    return m_secondary_color;
}
void OAITeamBasic::setSecondaryColor(const QString &secondary_color) {
    m_secondary_color = secondary_color;
    m_secondary_color_isSet = true;
}

bool OAITeamBasic::is_secondary_color_Set() const{
    return m_secondary_color_isSet;
}

bool OAITeamBasic::is_secondary_color_Valid() const{
    return m_secondary_color_isValid;
}

QString OAITeamBasic::getSpecialTeamsCoach() const {
    return m_special_teams_coach;
}
void OAITeamBasic::setSpecialTeamsCoach(const QString &special_teams_coach) {
    m_special_teams_coach = special_teams_coach;
    m_special_teams_coach_isSet = true;
}

bool OAITeamBasic::is_special_teams_coach_Set() const{
    return m_special_teams_coach_isSet;
}

bool OAITeamBasic::is_special_teams_coach_Valid() const{
    return m_special_teams_coach_isValid;
}

qint32 OAITeamBasic::getStadiumId() const {
    return m_stadium_id;
}
void OAITeamBasic::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAITeamBasic::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAITeamBasic::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

qint32 OAITeamBasic::getTeamId() const {
    return m_team_id;
}
void OAITeamBasic::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamBasic::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamBasic::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAITeamBasic::getTertiaryColor() const {
    return m_tertiary_color;
}
void OAITeamBasic::setTertiaryColor(const QString &tertiary_color) {
    m_tertiary_color = tertiary_color;
    m_tertiary_color_isSet = true;
}

bool OAITeamBasic::is_tertiary_color_Set() const{
    return m_tertiary_color_isSet;
}

bool OAITeamBasic::is_tertiary_color_Valid() const{
    return m_tertiary_color_isValid;
}

QString OAITeamBasic::getWikipediaLogoUrl() const {
    return m_wikipedia_logo_url;
}
void OAITeamBasic::setWikipediaLogoUrl(const QString &wikipedia_logo_url) {
    m_wikipedia_logo_url = wikipedia_logo_url;
    m_wikipedia_logo_url_isSet = true;
}

bool OAITeamBasic::is_wikipedia_logo_url_Set() const{
    return m_wikipedia_logo_url_isSet;
}

bool OAITeamBasic::is_wikipedia_logo_url_Valid() const{
    return m_wikipedia_logo_url_isValid;
}

QString OAITeamBasic::getWikipediaWordMarkUrl() const {
    return m_wikipedia_word_mark_url;
}
void OAITeamBasic::setWikipediaWordMarkUrl(const QString &wikipedia_word_mark_url) {
    m_wikipedia_word_mark_url = wikipedia_word_mark_url;
    m_wikipedia_word_mark_url_isSet = true;
}

bool OAITeamBasic::is_wikipedia_word_mark_url_Set() const{
    return m_wikipedia_word_mark_url_isSet;
}

bool OAITeamBasic::is_wikipedia_word_mark_url_Valid() const{
    return m_wikipedia_word_mark_url_isValid;
}

bool OAITeamBasic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bye_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_coordinator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_coach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_coordinator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quaternary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_coach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tertiary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_word_mark_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamBasic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
