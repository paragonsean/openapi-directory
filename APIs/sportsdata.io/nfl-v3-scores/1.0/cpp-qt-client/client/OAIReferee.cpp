/**
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferee::OAIReferee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferee::OAIReferee() {
    this->initializeModel();
}

OAIReferee::~OAIReferee() {}

void OAIReferee::initializeModel() {

    m_college_isSet = false;
    m_college_isValid = false;

    m_experience_isSet = false;
    m_experience_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_referee_id_isSet = false;
    m_referee_id_isValid = false;
}

void OAIReferee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferee::fromJsonObject(QJsonObject json) {

    m_college_isValid = ::OpenAPI::fromJsonValue(m_college, json[QString("College")]);
    m_college_isSet = !json[QString("College")].isNull() && m_college_isValid;

    m_experience_isValid = ::OpenAPI::fromJsonValue(m_experience, json[QString("Experience")]);
    m_experience_isSet = !json[QString("Experience")].isNull() && m_experience_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_referee_id_isValid = ::OpenAPI::fromJsonValue(m_referee_id, json[QString("RefereeID")]);
    m_referee_id_isSet = !json[QString("RefereeID")].isNull() && m_referee_id_isValid;
}

QString OAIReferee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferee::asJsonObject() const {
    QJsonObject obj;
    if (m_college_isSet) {
        obj.insert(QString("College"), ::OpenAPI::toJsonValue(m_college));
    }
    if (m_experience_isSet) {
        obj.insert(QString("Experience"), ::OpenAPI::toJsonValue(m_experience));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_referee_id_isSet) {
        obj.insert(QString("RefereeID"), ::OpenAPI::toJsonValue(m_referee_id));
    }
    return obj;
}

QString OAIReferee::getCollege() const {
    return m_college;
}
void OAIReferee::setCollege(const QString &college) {
    m_college = college;
    m_college_isSet = true;
}

bool OAIReferee::is_college_Set() const{
    return m_college_isSet;
}

bool OAIReferee::is_college_Valid() const{
    return m_college_isValid;
}

qint32 OAIReferee::getExperience() const {
    return m_experience;
}
void OAIReferee::setExperience(const qint32 &experience) {
    m_experience = experience;
    m_experience_isSet = true;
}

bool OAIReferee::is_experience_Set() const{
    return m_experience_isSet;
}

bool OAIReferee::is_experience_Valid() const{
    return m_experience_isValid;
}

QString OAIReferee::getName() const {
    return m_name;
}
void OAIReferee::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReferee::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReferee::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIReferee::getNumber() const {
    return m_number;
}
void OAIReferee::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIReferee::is_number_Set() const{
    return m_number_isSet;
}

bool OAIReferee::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIReferee::getPosition() const {
    return m_position;
}
void OAIReferee::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIReferee::is_position_Set() const{
    return m_position_isSet;
}

bool OAIReferee::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIReferee::getRefereeId() const {
    return m_referee_id;
}
void OAIReferee::setRefereeId(const qint32 &referee_id) {
    m_referee_id = referee_id;
    m_referee_id_isSet = true;
}

bool OAIReferee::is_referee_id_Set() const{
    return m_referee_id_isSet;
}

bool OAIReferee::is_referee_id_Valid() const{
    return m_referee_id_isValid;
}

bool OAIReferee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_college_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referee_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferee::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
