/**
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam::OAITeam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam::OAITeam() {
    this->initializeModel();
}

OAITeam::~OAITeam() {}

void OAITeam::initializeModel() {

    m_average_draft_position_isSet = false;
    m_average_draft_position_isValid = false;

    m_average_draft_position2_qb_isSet = false;
    m_average_draft_position2_qb_isValid = false;

    m_average_draft_position_dynasty_isSet = false;
    m_average_draft_position_dynasty_isValid = false;

    m_average_draft_position_ppr_isSet = false;
    m_average_draft_position_ppr_isValid = false;

    m_bye_week_isSet = false;
    m_bye_week_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_defensive_coordinator_isSet = false;
    m_defensive_coordinator_isValid = false;

    m_defensive_scheme_isSet = false;
    m_defensive_scheme_isValid = false;

    m_division_isSet = false;
    m_division_isValid = false;

    m_draft_kings_name_isSet = false;
    m_draft_kings_name_isValid = false;

    m_draft_kings_player_id_isSet = false;
    m_draft_kings_player_id_isValid = false;

    m_fan_duel_name_isSet = false;
    m_fan_duel_name_isValid = false;

    m_fan_duel_player_id_isSet = false;
    m_fan_duel_player_id_isValid = false;

    m_fantasy_draft_name_isSet = false;
    m_fantasy_draft_name_isValid = false;

    m_fantasy_draft_player_id_isSet = false;
    m_fantasy_draft_player_id_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_head_coach_isSet = false;
    m_head_coach_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offensive_coordinator_isSet = false;
    m_offensive_coordinator_isValid = false;

    m_offensive_scheme_isSet = false;
    m_offensive_scheme_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_primary_color_isSet = false;
    m_primary_color_isValid = false;

    m_quaternary_color_isSet = false;
    m_quaternary_color_isValid = false;

    m_secondary_color_isSet = false;
    m_secondary_color_isValid = false;

    m_special_teams_coach_isSet = false;
    m_special_teams_coach_isValid = false;

    m_stadium_details_isSet = false;
    m_stadium_details_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_tertiary_color_isSet = false;
    m_tertiary_color_isValid = false;

    m_upcoming_draft_kings_salary_isSet = false;
    m_upcoming_draft_kings_salary_isValid = false;

    m_upcoming_fan_duel_salary_isSet = false;
    m_upcoming_fan_duel_salary_isValid = false;

    m_upcoming_opponent_isSet = false;
    m_upcoming_opponent_isValid = false;

    m_upcoming_opponent_position_rank_isSet = false;
    m_upcoming_opponent_position_rank_isValid = false;

    m_upcoming_opponent_rank_isSet = false;
    m_upcoming_opponent_rank_isValid = false;

    m_upcoming_salary_isSet = false;
    m_upcoming_salary_isValid = false;

    m_upcoming_yahoo_salary_isSet = false;
    m_upcoming_yahoo_salary_isValid = false;

    m_wikipedia_logo_url_isSet = false;
    m_wikipedia_logo_url_isValid = false;

    m_wikipedia_word_mark_url_isSet = false;
    m_wikipedia_word_mark_url_isValid = false;

    m_yahoo_name_isSet = false;
    m_yahoo_name_isValid = false;

    m_yahoo_player_id_isSet = false;
    m_yahoo_player_id_isValid = false;
}

void OAITeam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam::fromJsonObject(QJsonObject json) {

    m_average_draft_position_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position, json[QString("AverageDraftPosition")]);
    m_average_draft_position_isSet = !json[QString("AverageDraftPosition")].isNull() && m_average_draft_position_isValid;

    m_average_draft_position2_qb_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position2_qb, json[QString("AverageDraftPosition2QB")]);
    m_average_draft_position2_qb_isSet = !json[QString("AverageDraftPosition2QB")].isNull() && m_average_draft_position2_qb_isValid;

    m_average_draft_position_dynasty_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position_dynasty, json[QString("AverageDraftPositionDynasty")]);
    m_average_draft_position_dynasty_isSet = !json[QString("AverageDraftPositionDynasty")].isNull() && m_average_draft_position_dynasty_isValid;

    m_average_draft_position_ppr_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position_ppr, json[QString("AverageDraftPositionPPR")]);
    m_average_draft_position_ppr_isSet = !json[QString("AverageDraftPositionPPR")].isNull() && m_average_draft_position_ppr_isValid;

    m_bye_week_isValid = ::OpenAPI::fromJsonValue(m_bye_week, json[QString("ByeWeek")]);
    m_bye_week_isSet = !json[QString("ByeWeek")].isNull() && m_bye_week_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("Conference")]);
    m_conference_isSet = !json[QString("Conference")].isNull() && m_conference_isValid;

    m_defensive_coordinator_isValid = ::OpenAPI::fromJsonValue(m_defensive_coordinator, json[QString("DefensiveCoordinator")]);
    m_defensive_coordinator_isSet = !json[QString("DefensiveCoordinator")].isNull() && m_defensive_coordinator_isValid;

    m_defensive_scheme_isValid = ::OpenAPI::fromJsonValue(m_defensive_scheme, json[QString("DefensiveScheme")]);
    m_defensive_scheme_isSet = !json[QString("DefensiveScheme")].isNull() && m_defensive_scheme_isValid;

    m_division_isValid = ::OpenAPI::fromJsonValue(m_division, json[QString("Division")]);
    m_division_isSet = !json[QString("Division")].isNull() && m_division_isValid;

    m_draft_kings_name_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_name, json[QString("DraftKingsName")]);
    m_draft_kings_name_isSet = !json[QString("DraftKingsName")].isNull() && m_draft_kings_name_isValid;

    m_draft_kings_player_id_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_player_id, json[QString("DraftKingsPlayerID")]);
    m_draft_kings_player_id_isSet = !json[QString("DraftKingsPlayerID")].isNull() && m_draft_kings_player_id_isValid;

    m_fan_duel_name_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_name, json[QString("FanDuelName")]);
    m_fan_duel_name_isSet = !json[QString("FanDuelName")].isNull() && m_fan_duel_name_isValid;

    m_fan_duel_player_id_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_player_id, json[QString("FanDuelPlayerID")]);
    m_fan_duel_player_id_isSet = !json[QString("FanDuelPlayerID")].isNull() && m_fan_duel_player_id_isValid;

    m_fantasy_draft_name_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_name, json[QString("FantasyDraftName")]);
    m_fantasy_draft_name_isSet = !json[QString("FantasyDraftName")].isNull() && m_fantasy_draft_name_isValid;

    m_fantasy_draft_player_id_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_player_id, json[QString("FantasyDraftPlayerID")]);
    m_fantasy_draft_player_id_isSet = !json[QString("FantasyDraftPlayerID")].isNull() && m_fantasy_draft_player_id_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_head_coach_isValid = ::OpenAPI::fromJsonValue(m_head_coach, json[QString("HeadCoach")]);
    m_head_coach_isSet = !json[QString("HeadCoach")].isNull() && m_head_coach_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_offensive_coordinator_isValid = ::OpenAPI::fromJsonValue(m_offensive_coordinator, json[QString("OffensiveCoordinator")]);
    m_offensive_coordinator_isSet = !json[QString("OffensiveCoordinator")].isNull() && m_offensive_coordinator_isValid;

    m_offensive_scheme_isValid = ::OpenAPI::fromJsonValue(m_offensive_scheme, json[QString("OffensiveScheme")]);
    m_offensive_scheme_isSet = !json[QString("OffensiveScheme")].isNull() && m_offensive_scheme_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_primary_color_isValid = ::OpenAPI::fromJsonValue(m_primary_color, json[QString("PrimaryColor")]);
    m_primary_color_isSet = !json[QString("PrimaryColor")].isNull() && m_primary_color_isValid;

    m_quaternary_color_isValid = ::OpenAPI::fromJsonValue(m_quaternary_color, json[QString("QuaternaryColor")]);
    m_quaternary_color_isSet = !json[QString("QuaternaryColor")].isNull() && m_quaternary_color_isValid;

    m_secondary_color_isValid = ::OpenAPI::fromJsonValue(m_secondary_color, json[QString("SecondaryColor")]);
    m_secondary_color_isSet = !json[QString("SecondaryColor")].isNull() && m_secondary_color_isValid;

    m_special_teams_coach_isValid = ::OpenAPI::fromJsonValue(m_special_teams_coach, json[QString("SpecialTeamsCoach")]);
    m_special_teams_coach_isSet = !json[QString("SpecialTeamsCoach")].isNull() && m_special_teams_coach_isValid;

    m_stadium_details_isValid = ::OpenAPI::fromJsonValue(m_stadium_details, json[QString("StadiumDetails")]);
    m_stadium_details_isSet = !json[QString("StadiumDetails")].isNull() && m_stadium_details_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_tertiary_color_isValid = ::OpenAPI::fromJsonValue(m_tertiary_color, json[QString("TertiaryColor")]);
    m_tertiary_color_isSet = !json[QString("TertiaryColor")].isNull() && m_tertiary_color_isValid;

    m_upcoming_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_draft_kings_salary, json[QString("UpcomingDraftKingsSalary")]);
    m_upcoming_draft_kings_salary_isSet = !json[QString("UpcomingDraftKingsSalary")].isNull() && m_upcoming_draft_kings_salary_isValid;

    m_upcoming_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_fan_duel_salary, json[QString("UpcomingFanDuelSalary")]);
    m_upcoming_fan_duel_salary_isSet = !json[QString("UpcomingFanDuelSalary")].isNull() && m_upcoming_fan_duel_salary_isValid;

    m_upcoming_opponent_isValid = ::OpenAPI::fromJsonValue(m_upcoming_opponent, json[QString("UpcomingOpponent")]);
    m_upcoming_opponent_isSet = !json[QString("UpcomingOpponent")].isNull() && m_upcoming_opponent_isValid;

    m_upcoming_opponent_position_rank_isValid = ::OpenAPI::fromJsonValue(m_upcoming_opponent_position_rank, json[QString("UpcomingOpponentPositionRank")]);
    m_upcoming_opponent_position_rank_isSet = !json[QString("UpcomingOpponentPositionRank")].isNull() && m_upcoming_opponent_position_rank_isValid;

    m_upcoming_opponent_rank_isValid = ::OpenAPI::fromJsonValue(m_upcoming_opponent_rank, json[QString("UpcomingOpponentRank")]);
    m_upcoming_opponent_rank_isSet = !json[QString("UpcomingOpponentRank")].isNull() && m_upcoming_opponent_rank_isValid;

    m_upcoming_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_salary, json[QString("UpcomingSalary")]);
    m_upcoming_salary_isSet = !json[QString("UpcomingSalary")].isNull() && m_upcoming_salary_isValid;

    m_upcoming_yahoo_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_yahoo_salary, json[QString("UpcomingYahooSalary")]);
    m_upcoming_yahoo_salary_isSet = !json[QString("UpcomingYahooSalary")].isNull() && m_upcoming_yahoo_salary_isValid;

    m_wikipedia_logo_url_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_logo_url, json[QString("WikipediaLogoUrl")]);
    m_wikipedia_logo_url_isSet = !json[QString("WikipediaLogoUrl")].isNull() && m_wikipedia_logo_url_isValid;

    m_wikipedia_word_mark_url_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_word_mark_url, json[QString("WikipediaWordMarkUrl")]);
    m_wikipedia_word_mark_url_isSet = !json[QString("WikipediaWordMarkUrl")].isNull() && m_wikipedia_word_mark_url_isValid;

    m_yahoo_name_isValid = ::OpenAPI::fromJsonValue(m_yahoo_name, json[QString("YahooName")]);
    m_yahoo_name_isSet = !json[QString("YahooName")].isNull() && m_yahoo_name_isValid;

    m_yahoo_player_id_isValid = ::OpenAPI::fromJsonValue(m_yahoo_player_id, json[QString("YahooPlayerID")]);
    m_yahoo_player_id_isSet = !json[QString("YahooPlayerID")].isNull() && m_yahoo_player_id_isValid;
}

QString OAITeam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam::asJsonObject() const {
    QJsonObject obj;
    if (m_average_draft_position_isSet) {
        obj.insert(QString("AverageDraftPosition"), ::OpenAPI::toJsonValue(m_average_draft_position));
    }
    if (m_average_draft_position2_qb_isSet) {
        obj.insert(QString("AverageDraftPosition2QB"), ::OpenAPI::toJsonValue(m_average_draft_position2_qb));
    }
    if (m_average_draft_position_dynasty_isSet) {
        obj.insert(QString("AverageDraftPositionDynasty"), ::OpenAPI::toJsonValue(m_average_draft_position_dynasty));
    }
    if (m_average_draft_position_ppr_isSet) {
        obj.insert(QString("AverageDraftPositionPPR"), ::OpenAPI::toJsonValue(m_average_draft_position_ppr));
    }
    if (m_bye_week_isSet) {
        obj.insert(QString("ByeWeek"), ::OpenAPI::toJsonValue(m_bye_week));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_conference_isSet) {
        obj.insert(QString("Conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_defensive_coordinator_isSet) {
        obj.insert(QString("DefensiveCoordinator"), ::OpenAPI::toJsonValue(m_defensive_coordinator));
    }
    if (m_defensive_scheme_isSet) {
        obj.insert(QString("DefensiveScheme"), ::OpenAPI::toJsonValue(m_defensive_scheme));
    }
    if (m_division_isSet) {
        obj.insert(QString("Division"), ::OpenAPI::toJsonValue(m_division));
    }
    if (m_draft_kings_name_isSet) {
        obj.insert(QString("DraftKingsName"), ::OpenAPI::toJsonValue(m_draft_kings_name));
    }
    if (m_draft_kings_player_id_isSet) {
        obj.insert(QString("DraftKingsPlayerID"), ::OpenAPI::toJsonValue(m_draft_kings_player_id));
    }
    if (m_fan_duel_name_isSet) {
        obj.insert(QString("FanDuelName"), ::OpenAPI::toJsonValue(m_fan_duel_name));
    }
    if (m_fan_duel_player_id_isSet) {
        obj.insert(QString("FanDuelPlayerID"), ::OpenAPI::toJsonValue(m_fan_duel_player_id));
    }
    if (m_fantasy_draft_name_isSet) {
        obj.insert(QString("FantasyDraftName"), ::OpenAPI::toJsonValue(m_fantasy_draft_name));
    }
    if (m_fantasy_draft_player_id_isSet) {
        obj.insert(QString("FantasyDraftPlayerID"), ::OpenAPI::toJsonValue(m_fantasy_draft_player_id));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_head_coach_isSet) {
        obj.insert(QString("HeadCoach"), ::OpenAPI::toJsonValue(m_head_coach));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offensive_coordinator_isSet) {
        obj.insert(QString("OffensiveCoordinator"), ::OpenAPI::toJsonValue(m_offensive_coordinator));
    }
    if (m_offensive_scheme_isSet) {
        obj.insert(QString("OffensiveScheme"), ::OpenAPI::toJsonValue(m_offensive_scheme));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_primary_color_isSet) {
        obj.insert(QString("PrimaryColor"), ::OpenAPI::toJsonValue(m_primary_color));
    }
    if (m_quaternary_color_isSet) {
        obj.insert(QString("QuaternaryColor"), ::OpenAPI::toJsonValue(m_quaternary_color));
    }
    if (m_secondary_color_isSet) {
        obj.insert(QString("SecondaryColor"), ::OpenAPI::toJsonValue(m_secondary_color));
    }
    if (m_special_teams_coach_isSet) {
        obj.insert(QString("SpecialTeamsCoach"), ::OpenAPI::toJsonValue(m_special_teams_coach));
    }
    if (m_stadium_details.isSet()) {
        obj.insert(QString("StadiumDetails"), ::OpenAPI::toJsonValue(m_stadium_details));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_tertiary_color_isSet) {
        obj.insert(QString("TertiaryColor"), ::OpenAPI::toJsonValue(m_tertiary_color));
    }
    if (m_upcoming_draft_kings_salary_isSet) {
        obj.insert(QString("UpcomingDraftKingsSalary"), ::OpenAPI::toJsonValue(m_upcoming_draft_kings_salary));
    }
    if (m_upcoming_fan_duel_salary_isSet) {
        obj.insert(QString("UpcomingFanDuelSalary"), ::OpenAPI::toJsonValue(m_upcoming_fan_duel_salary));
    }
    if (m_upcoming_opponent_isSet) {
        obj.insert(QString("UpcomingOpponent"), ::OpenAPI::toJsonValue(m_upcoming_opponent));
    }
    if (m_upcoming_opponent_position_rank_isSet) {
        obj.insert(QString("UpcomingOpponentPositionRank"), ::OpenAPI::toJsonValue(m_upcoming_opponent_position_rank));
    }
    if (m_upcoming_opponent_rank_isSet) {
        obj.insert(QString("UpcomingOpponentRank"), ::OpenAPI::toJsonValue(m_upcoming_opponent_rank));
    }
    if (m_upcoming_salary_isSet) {
        obj.insert(QString("UpcomingSalary"), ::OpenAPI::toJsonValue(m_upcoming_salary));
    }
    if (m_upcoming_yahoo_salary_isSet) {
        obj.insert(QString("UpcomingYahooSalary"), ::OpenAPI::toJsonValue(m_upcoming_yahoo_salary));
    }
    if (m_wikipedia_logo_url_isSet) {
        obj.insert(QString("WikipediaLogoUrl"), ::OpenAPI::toJsonValue(m_wikipedia_logo_url));
    }
    if (m_wikipedia_word_mark_url_isSet) {
        obj.insert(QString("WikipediaWordMarkUrl"), ::OpenAPI::toJsonValue(m_wikipedia_word_mark_url));
    }
    if (m_yahoo_name_isSet) {
        obj.insert(QString("YahooName"), ::OpenAPI::toJsonValue(m_yahoo_name));
    }
    if (m_yahoo_player_id_isSet) {
        obj.insert(QString("YahooPlayerID"), ::OpenAPI::toJsonValue(m_yahoo_player_id));
    }
    return obj;
}

double OAITeam::getAverageDraftPosition() const {
    return m_average_draft_position;
}
void OAITeam::setAverageDraftPosition(const double &average_draft_position) {
    m_average_draft_position = average_draft_position;
    m_average_draft_position_isSet = true;
}

bool OAITeam::is_average_draft_position_Set() const{
    return m_average_draft_position_isSet;
}

bool OAITeam::is_average_draft_position_Valid() const{
    return m_average_draft_position_isValid;
}

double OAITeam::getAverageDraftPosition2Qb() const {
    return m_average_draft_position2_qb;
}
void OAITeam::setAverageDraftPosition2Qb(const double &average_draft_position2_qb) {
    m_average_draft_position2_qb = average_draft_position2_qb;
    m_average_draft_position2_qb_isSet = true;
}

bool OAITeam::is_average_draft_position2_qb_Set() const{
    return m_average_draft_position2_qb_isSet;
}

bool OAITeam::is_average_draft_position2_qb_Valid() const{
    return m_average_draft_position2_qb_isValid;
}

double OAITeam::getAverageDraftPositionDynasty() const {
    return m_average_draft_position_dynasty;
}
void OAITeam::setAverageDraftPositionDynasty(const double &average_draft_position_dynasty) {
    m_average_draft_position_dynasty = average_draft_position_dynasty;
    m_average_draft_position_dynasty_isSet = true;
}

bool OAITeam::is_average_draft_position_dynasty_Set() const{
    return m_average_draft_position_dynasty_isSet;
}

bool OAITeam::is_average_draft_position_dynasty_Valid() const{
    return m_average_draft_position_dynasty_isValid;
}

double OAITeam::getAverageDraftPositionPpr() const {
    return m_average_draft_position_ppr;
}
void OAITeam::setAverageDraftPositionPpr(const double &average_draft_position_ppr) {
    m_average_draft_position_ppr = average_draft_position_ppr;
    m_average_draft_position_ppr_isSet = true;
}

bool OAITeam::is_average_draft_position_ppr_Set() const{
    return m_average_draft_position_ppr_isSet;
}

bool OAITeam::is_average_draft_position_ppr_Valid() const{
    return m_average_draft_position_ppr_isValid;
}

qint32 OAITeam::getByeWeek() const {
    return m_bye_week;
}
void OAITeam::setByeWeek(const qint32 &bye_week) {
    m_bye_week = bye_week;
    m_bye_week_isSet = true;
}

bool OAITeam::is_bye_week_Set() const{
    return m_bye_week_isSet;
}

bool OAITeam::is_bye_week_Valid() const{
    return m_bye_week_isValid;
}

QString OAITeam::getCity() const {
    return m_city;
}
void OAITeam::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITeam::is_city_Set() const{
    return m_city_isSet;
}

bool OAITeam::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITeam::getConference() const {
    return m_conference;
}
void OAITeam::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAITeam::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAITeam::is_conference_Valid() const{
    return m_conference_isValid;
}

QString OAITeam::getDefensiveCoordinator() const {
    return m_defensive_coordinator;
}
void OAITeam::setDefensiveCoordinator(const QString &defensive_coordinator) {
    m_defensive_coordinator = defensive_coordinator;
    m_defensive_coordinator_isSet = true;
}

bool OAITeam::is_defensive_coordinator_Set() const{
    return m_defensive_coordinator_isSet;
}

bool OAITeam::is_defensive_coordinator_Valid() const{
    return m_defensive_coordinator_isValid;
}

QString OAITeam::getDefensiveScheme() const {
    return m_defensive_scheme;
}
void OAITeam::setDefensiveScheme(const QString &defensive_scheme) {
    m_defensive_scheme = defensive_scheme;
    m_defensive_scheme_isSet = true;
}

bool OAITeam::is_defensive_scheme_Set() const{
    return m_defensive_scheme_isSet;
}

bool OAITeam::is_defensive_scheme_Valid() const{
    return m_defensive_scheme_isValid;
}

QString OAITeam::getDivision() const {
    return m_division;
}
void OAITeam::setDivision(const QString &division) {
    m_division = division;
    m_division_isSet = true;
}

bool OAITeam::is_division_Set() const{
    return m_division_isSet;
}

bool OAITeam::is_division_Valid() const{
    return m_division_isValid;
}

QString OAITeam::getDraftKingsName() const {
    return m_draft_kings_name;
}
void OAITeam::setDraftKingsName(const QString &draft_kings_name) {
    m_draft_kings_name = draft_kings_name;
    m_draft_kings_name_isSet = true;
}

bool OAITeam::is_draft_kings_name_Set() const{
    return m_draft_kings_name_isSet;
}

bool OAITeam::is_draft_kings_name_Valid() const{
    return m_draft_kings_name_isValid;
}

qint32 OAITeam::getDraftKingsPlayerId() const {
    return m_draft_kings_player_id;
}
void OAITeam::setDraftKingsPlayerId(const qint32 &draft_kings_player_id) {
    m_draft_kings_player_id = draft_kings_player_id;
    m_draft_kings_player_id_isSet = true;
}

bool OAITeam::is_draft_kings_player_id_Set() const{
    return m_draft_kings_player_id_isSet;
}

bool OAITeam::is_draft_kings_player_id_Valid() const{
    return m_draft_kings_player_id_isValid;
}

QString OAITeam::getFanDuelName() const {
    return m_fan_duel_name;
}
void OAITeam::setFanDuelName(const QString &fan_duel_name) {
    m_fan_duel_name = fan_duel_name;
    m_fan_duel_name_isSet = true;
}

bool OAITeam::is_fan_duel_name_Set() const{
    return m_fan_duel_name_isSet;
}

bool OAITeam::is_fan_duel_name_Valid() const{
    return m_fan_duel_name_isValid;
}

qint32 OAITeam::getFanDuelPlayerId() const {
    return m_fan_duel_player_id;
}
void OAITeam::setFanDuelPlayerId(const qint32 &fan_duel_player_id) {
    m_fan_duel_player_id = fan_duel_player_id;
    m_fan_duel_player_id_isSet = true;
}

bool OAITeam::is_fan_duel_player_id_Set() const{
    return m_fan_duel_player_id_isSet;
}

bool OAITeam::is_fan_duel_player_id_Valid() const{
    return m_fan_duel_player_id_isValid;
}

QString OAITeam::getFantasyDraftName() const {
    return m_fantasy_draft_name;
}
void OAITeam::setFantasyDraftName(const QString &fantasy_draft_name) {
    m_fantasy_draft_name = fantasy_draft_name;
    m_fantasy_draft_name_isSet = true;
}

bool OAITeam::is_fantasy_draft_name_Set() const{
    return m_fantasy_draft_name_isSet;
}

bool OAITeam::is_fantasy_draft_name_Valid() const{
    return m_fantasy_draft_name_isValid;
}

qint32 OAITeam::getFantasyDraftPlayerId() const {
    return m_fantasy_draft_player_id;
}
void OAITeam::setFantasyDraftPlayerId(const qint32 &fantasy_draft_player_id) {
    m_fantasy_draft_player_id = fantasy_draft_player_id;
    m_fantasy_draft_player_id_isSet = true;
}

bool OAITeam::is_fantasy_draft_player_id_Set() const{
    return m_fantasy_draft_player_id_isSet;
}

bool OAITeam::is_fantasy_draft_player_id_Valid() const{
    return m_fantasy_draft_player_id_isValid;
}

QString OAITeam::getFullName() const {
    return m_full_name;
}
void OAITeam::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAITeam::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAITeam::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint32 OAITeam::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAITeam::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAITeam::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAITeam::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

QString OAITeam::getHeadCoach() const {
    return m_head_coach;
}
void OAITeam::setHeadCoach(const QString &head_coach) {
    m_head_coach = head_coach;
    m_head_coach_isSet = true;
}

bool OAITeam::is_head_coach_Set() const{
    return m_head_coach_isSet;
}

bool OAITeam::is_head_coach_Valid() const{
    return m_head_coach_isValid;
}

QString OAITeam::getKey() const {
    return m_key;
}
void OAITeam::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITeam::is_key_Set() const{
    return m_key_isSet;
}

bool OAITeam::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITeam::getName() const {
    return m_name;
}
void OAITeam::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeam::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeam::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeam::getOffensiveCoordinator() const {
    return m_offensive_coordinator;
}
void OAITeam::setOffensiveCoordinator(const QString &offensive_coordinator) {
    m_offensive_coordinator = offensive_coordinator;
    m_offensive_coordinator_isSet = true;
}

bool OAITeam::is_offensive_coordinator_Set() const{
    return m_offensive_coordinator_isSet;
}

bool OAITeam::is_offensive_coordinator_Valid() const{
    return m_offensive_coordinator_isValid;
}

QString OAITeam::getOffensiveScheme() const {
    return m_offensive_scheme;
}
void OAITeam::setOffensiveScheme(const QString &offensive_scheme) {
    m_offensive_scheme = offensive_scheme;
    m_offensive_scheme_isSet = true;
}

bool OAITeam::is_offensive_scheme_Set() const{
    return m_offensive_scheme_isSet;
}

bool OAITeam::is_offensive_scheme_Valid() const{
    return m_offensive_scheme_isValid;
}

qint32 OAITeam::getPlayerId() const {
    return m_player_id;
}
void OAITeam::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAITeam::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAITeam::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAITeam::getPrimaryColor() const {
    return m_primary_color;
}
void OAITeam::setPrimaryColor(const QString &primary_color) {
    m_primary_color = primary_color;
    m_primary_color_isSet = true;
}

bool OAITeam::is_primary_color_Set() const{
    return m_primary_color_isSet;
}

bool OAITeam::is_primary_color_Valid() const{
    return m_primary_color_isValid;
}

QString OAITeam::getQuaternaryColor() const {
    return m_quaternary_color;
}
void OAITeam::setQuaternaryColor(const QString &quaternary_color) {
    m_quaternary_color = quaternary_color;
    m_quaternary_color_isSet = true;
}

bool OAITeam::is_quaternary_color_Set() const{
    return m_quaternary_color_isSet;
}

bool OAITeam::is_quaternary_color_Valid() const{
    return m_quaternary_color_isValid;
}

QString OAITeam::getSecondaryColor() const {
    return m_secondary_color;
}
void OAITeam::setSecondaryColor(const QString &secondary_color) {
    m_secondary_color = secondary_color;
    m_secondary_color_isSet = true;
}

bool OAITeam::is_secondary_color_Set() const{
    return m_secondary_color_isSet;
}

bool OAITeam::is_secondary_color_Valid() const{
    return m_secondary_color_isValid;
}

QString OAITeam::getSpecialTeamsCoach() const {
    return m_special_teams_coach;
}
void OAITeam::setSpecialTeamsCoach(const QString &special_teams_coach) {
    m_special_teams_coach = special_teams_coach;
    m_special_teams_coach_isSet = true;
}

bool OAITeam::is_special_teams_coach_Set() const{
    return m_special_teams_coach_isSet;
}

bool OAITeam::is_special_teams_coach_Valid() const{
    return m_special_teams_coach_isValid;
}

OAIStadium OAITeam::getStadiumDetails() const {
    return m_stadium_details;
}
void OAITeam::setStadiumDetails(const OAIStadium &stadium_details) {
    m_stadium_details = stadium_details;
    m_stadium_details_isSet = true;
}

bool OAITeam::is_stadium_details_Set() const{
    return m_stadium_details_isSet;
}

bool OAITeam::is_stadium_details_Valid() const{
    return m_stadium_details_isValid;
}

qint32 OAITeam::getStadiumId() const {
    return m_stadium_id;
}
void OAITeam::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAITeam::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAITeam::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

qint32 OAITeam::getTeamId() const {
    return m_team_id;
}
void OAITeam::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeam::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeam::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAITeam::getTertiaryColor() const {
    return m_tertiary_color;
}
void OAITeam::setTertiaryColor(const QString &tertiary_color) {
    m_tertiary_color = tertiary_color;
    m_tertiary_color_isSet = true;
}

bool OAITeam::is_tertiary_color_Set() const{
    return m_tertiary_color_isSet;
}

bool OAITeam::is_tertiary_color_Valid() const{
    return m_tertiary_color_isValid;
}

qint32 OAITeam::getUpcomingDraftKingsSalary() const {
    return m_upcoming_draft_kings_salary;
}
void OAITeam::setUpcomingDraftKingsSalary(const qint32 &upcoming_draft_kings_salary) {
    m_upcoming_draft_kings_salary = upcoming_draft_kings_salary;
    m_upcoming_draft_kings_salary_isSet = true;
}

bool OAITeam::is_upcoming_draft_kings_salary_Set() const{
    return m_upcoming_draft_kings_salary_isSet;
}

bool OAITeam::is_upcoming_draft_kings_salary_Valid() const{
    return m_upcoming_draft_kings_salary_isValid;
}

qint32 OAITeam::getUpcomingFanDuelSalary() const {
    return m_upcoming_fan_duel_salary;
}
void OAITeam::setUpcomingFanDuelSalary(const qint32 &upcoming_fan_duel_salary) {
    m_upcoming_fan_duel_salary = upcoming_fan_duel_salary;
    m_upcoming_fan_duel_salary_isSet = true;
}

bool OAITeam::is_upcoming_fan_duel_salary_Set() const{
    return m_upcoming_fan_duel_salary_isSet;
}

bool OAITeam::is_upcoming_fan_duel_salary_Valid() const{
    return m_upcoming_fan_duel_salary_isValid;
}

QString OAITeam::getUpcomingOpponent() const {
    return m_upcoming_opponent;
}
void OAITeam::setUpcomingOpponent(const QString &upcoming_opponent) {
    m_upcoming_opponent = upcoming_opponent;
    m_upcoming_opponent_isSet = true;
}

bool OAITeam::is_upcoming_opponent_Set() const{
    return m_upcoming_opponent_isSet;
}

bool OAITeam::is_upcoming_opponent_Valid() const{
    return m_upcoming_opponent_isValid;
}

qint32 OAITeam::getUpcomingOpponentPositionRank() const {
    return m_upcoming_opponent_position_rank;
}
void OAITeam::setUpcomingOpponentPositionRank(const qint32 &upcoming_opponent_position_rank) {
    m_upcoming_opponent_position_rank = upcoming_opponent_position_rank;
    m_upcoming_opponent_position_rank_isSet = true;
}

bool OAITeam::is_upcoming_opponent_position_rank_Set() const{
    return m_upcoming_opponent_position_rank_isSet;
}

bool OAITeam::is_upcoming_opponent_position_rank_Valid() const{
    return m_upcoming_opponent_position_rank_isValid;
}

qint32 OAITeam::getUpcomingOpponentRank() const {
    return m_upcoming_opponent_rank;
}
void OAITeam::setUpcomingOpponentRank(const qint32 &upcoming_opponent_rank) {
    m_upcoming_opponent_rank = upcoming_opponent_rank;
    m_upcoming_opponent_rank_isSet = true;
}

bool OAITeam::is_upcoming_opponent_rank_Set() const{
    return m_upcoming_opponent_rank_isSet;
}

bool OAITeam::is_upcoming_opponent_rank_Valid() const{
    return m_upcoming_opponent_rank_isValid;
}

qint32 OAITeam::getUpcomingSalary() const {
    return m_upcoming_salary;
}
void OAITeam::setUpcomingSalary(const qint32 &upcoming_salary) {
    m_upcoming_salary = upcoming_salary;
    m_upcoming_salary_isSet = true;
}

bool OAITeam::is_upcoming_salary_Set() const{
    return m_upcoming_salary_isSet;
}

bool OAITeam::is_upcoming_salary_Valid() const{
    return m_upcoming_salary_isValid;
}

qint32 OAITeam::getUpcomingYahooSalary() const {
    return m_upcoming_yahoo_salary;
}
void OAITeam::setUpcomingYahooSalary(const qint32 &upcoming_yahoo_salary) {
    m_upcoming_yahoo_salary = upcoming_yahoo_salary;
    m_upcoming_yahoo_salary_isSet = true;
}

bool OAITeam::is_upcoming_yahoo_salary_Set() const{
    return m_upcoming_yahoo_salary_isSet;
}

bool OAITeam::is_upcoming_yahoo_salary_Valid() const{
    return m_upcoming_yahoo_salary_isValid;
}

QString OAITeam::getWikipediaLogoUrl() const {
    return m_wikipedia_logo_url;
}
void OAITeam::setWikipediaLogoUrl(const QString &wikipedia_logo_url) {
    m_wikipedia_logo_url = wikipedia_logo_url;
    m_wikipedia_logo_url_isSet = true;
}

bool OAITeam::is_wikipedia_logo_url_Set() const{
    return m_wikipedia_logo_url_isSet;
}

bool OAITeam::is_wikipedia_logo_url_Valid() const{
    return m_wikipedia_logo_url_isValid;
}

QString OAITeam::getWikipediaWordMarkUrl() const {
    return m_wikipedia_word_mark_url;
}
void OAITeam::setWikipediaWordMarkUrl(const QString &wikipedia_word_mark_url) {
    m_wikipedia_word_mark_url = wikipedia_word_mark_url;
    m_wikipedia_word_mark_url_isSet = true;
}

bool OAITeam::is_wikipedia_word_mark_url_Set() const{
    return m_wikipedia_word_mark_url_isSet;
}

bool OAITeam::is_wikipedia_word_mark_url_Valid() const{
    return m_wikipedia_word_mark_url_isValid;
}

QString OAITeam::getYahooName() const {
    return m_yahoo_name;
}
void OAITeam::setYahooName(const QString &yahoo_name) {
    m_yahoo_name = yahoo_name;
    m_yahoo_name_isSet = true;
}

bool OAITeam::is_yahoo_name_Set() const{
    return m_yahoo_name_isSet;
}

bool OAITeam::is_yahoo_name_Valid() const{
    return m_yahoo_name_isValid;
}

qint32 OAITeam::getYahooPlayerId() const {
    return m_yahoo_player_id;
}
void OAITeam::setYahooPlayerId(const qint32 &yahoo_player_id) {
    m_yahoo_player_id = yahoo_player_id;
    m_yahoo_player_id_isSet = true;
}

bool OAITeam::is_yahoo_player_id_Set() const{
    return m_yahoo_player_id_isSet;
}

bool OAITeam::is_yahoo_player_id_Valid() const{
    return m_yahoo_player_id_isValid;
}

bool OAITeam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_draft_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position2_qb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_dynasty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_ppr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bye_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_coordinator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_coach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_coordinator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quaternary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams_coach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tertiary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_opponent_position_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_opponent_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_yahoo_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_word_mark_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
