/**
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Bye from '../model/Bye';
import Game from '../model/Game';
import News from '../model/News';
import Player from '../model/Player';
import PlayerDetail from '../model/PlayerDetail';
import Referee from '../model/Referee';
import Schedule from '../model/Schedule';
import ScheduleBasic from '../model/ScheduleBasic';
import Score from '../model/Score';
import ScoreBasic from '../model/ScoreBasic';
import Stadium from '../model/Stadium';
import Standing from '../model/Standing';
import Team from '../model/Team';
import TeamBasic from '../model/TeamBasic';
import TeamDepthChart from '../model/TeamDepthChart';
import TeamGame from '../model/TeamGame';
import TeamSeason from '../model/TeamSeason';
import Timeframe from '../model/Timeframe';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the areGamesInProgress operation.
     * @callback module:api/DefaultApi~areGamesInProgressCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Are Games In Progress
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~areGamesInProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    areGamesInProgress(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling areGamesInProgress");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/{format}/AreAnyGamesInProgress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the byeWeeks operation.
     * @callback module:api/DefaultApi~byeWeeksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bye>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bye Weeks
     * Get bye weeks for the teams during a specified NFL season. 
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~byeWeeksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bye>}
     */
    byeWeeks(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling byeWeeks");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling byeWeeks");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Bye];
      return this.apiClient.callApi(
        '/{format}/Byes/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the depthCharts operation.
     * @callback module:api/DefaultApi~depthChartsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDepthChart>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Depth Charts
     * Depth charts for all NFL teams split by offensive, defensive, and special teams position groupings.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~depthChartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDepthChart>}
     */
    depthCharts(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling depthCharts");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDepthChart];
      return this.apiClient.callApi(
        '/{format}/DepthCharts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameStatsBySeasonDeprecatedUseTeamGameStatsInstead operation.
     * @callback module:api/DefaultApi~gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Game Stats by Season (Deprecated, use Team Game Stats instead)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~gameStatsBySeasonDeprecatedUseTeamGameStatsInsteadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gameStatsBySeasonDeprecatedUseTeamGameStatsInstead");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling gameStatsBySeasonDeprecatedUseTeamGameStatsInstead");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GameStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameStatsByWeekDeprecatedUseTeamGameStatsInstead operation.
     * @callback module:api/DefaultApi~gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Game Stats by Week (Deprecated, use Team Game Stats instead)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~gameStatsByWeekDeprecatedUseTeamGameStatsInsteadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gameStatsByWeekDeprecatedUseTeamGameStatsInstead(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gameStatsByWeekDeprecatedUseTeamGameStatsInstead");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling gameStatsByWeekDeprecatedUseTeamGameStatsInstead");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling gameStatsByWeekDeprecatedUseTeamGameStatsInstead");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GameStatsByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the news operation.
     * @callback module:api/DefaultApi~newsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~newsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    news(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling news");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/News', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByDate operation.
     * @callback module:api/DefaultApi~newsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the news. <br>Examples: <code>2017-JUL-31</code>, <code>2017-SEP-01</code>.
     * @param {module:api/DefaultApi~newsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling newsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByPlayer operation.
     * @callback module:api/DefaultApi~newsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Player
     * @param {module:model/String} format            Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.         
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>14257</code>.
     * @param {module:api/DefaultApi~newsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling newsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByPlayerID/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByTeam operation.
     * @callback module:api/DefaultApi~newsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~newsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByTeam(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling newsByTeam");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByTeam/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByAvailable operation.
     * @callback module:api/DefaultApi~playerDetailsByAvailableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Available
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playerDetailsByAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByAvailable(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByAvailable");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByFreeAgents operation.
     * @callback module:api/DefaultApi~playerDetailsByFreeAgentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Free Agents
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playerDetailsByFreeAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByFreeAgents(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByFreeAgents");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/FreeAgents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByPlayer operation.
     * @callback module:api/DefaultApi~playerDetailsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>732</code>.
     * @param {module:api/DefaultApi~playerDetailsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerDetail}
     */
    playerDetailsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerDetailsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerDetail;
      return this.apiClient.callApi(
        '/{format}/Player/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByRookieDraftYear operation.
     * @callback module:api/DefaultApi~playerDetailsByRookieDraftYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Rookie Draft Year
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season.<br>Examples: <code>2018</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~playerDetailsByRookieDraftYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playerDetailsByRookieDraftYear(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByRookieDraftYear");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerDetailsByRookieDraftYear");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Rookies/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerDetailsByTeam operation.
     * @callback module:api/DefaultApi~playerDetailsByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Details by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~playerDetailsByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerDetail>}
     */
    playerDetailsByTeam(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerDetailsByTeam");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playerDetailsByTeam");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerDetail];
      return this.apiClient.callApi(
        '/{format}/Players/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playersByTeamBasic operation.
     * @callback module:api/DefaultApi~playersByTeamBasicCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players by Team (Basic)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~playersByTeamBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    playersByTeamBasic(format, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playersByTeamBasic");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling playersByTeamBasic");
      }

      let pathParams = {
        'format': format,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/{format}/PlayersBasic/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referees operation.
     * @callback module:api/DefaultApi~refereesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Referee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Referees
     * Returns full list of NFL Referees
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~refereesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Referee>}
     */
    referees(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling referees");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Referee];
      return this.apiClient.callApi(
        '/{format}/Referees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedule operation.
     * @callback module:api/DefaultApi~scheduleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule
     * Game schedule for a specified season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~scheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schedule>}
     */
    schedule(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedule");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling schedule");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schedule];
      return this.apiClient.callApi(
        '/{format}/Schedules/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleBasic operation.
     * @callback module:api/DefaultApi~scheduleBasicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduleBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule (Basic)
     * Game schedule for a specified season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~scheduleBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduleBasic>}
     */
    scheduleBasic(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scheduleBasic");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling scheduleBasic");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScheduleBasic];
      return this.apiClient.callApi(
        '/{format}/SchedulesBasic/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresByDate operation.
     * @callback module:api/DefaultApi~scoresByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Date
     * Get game scores for a specified week of a season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the games.<br>Examples: <code>2021-SEP-12</code>, <code>2021-NOV-28</code>.
     * @param {module:api/DefaultApi~scoresByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling scoresByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/ScoresByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresBySeason operation.
     * @callback module:api/DefaultApi~scoresBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Season 
     * Game scores for a specified season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season (with optional season type).<br>Examples: <code>2018</code>, <code>2018PRE</code>, <code>2018POST</code>, <code>2018STAR</code>, <code>2019</code>, etc.
     * @param {module:api/DefaultApi~scoresBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresBySeason(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling scoresBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/Scores/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresByWeek operation.
     * @callback module:api/DefaultApi~scoresByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Week
     * Get game scores for a specified week of a season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~scoresByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresByWeek(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling scoresByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling scoresByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/ScoresByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresByWeekBasic operation.
     * @callback module:api/DefaultApi~scoresByWeekBasicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Week (Basic)
     * Get game scores for a specified week of a season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~scoresByWeekBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreBasic>}
     */
    scoresByWeekBasic(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresByWeekBasic");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling scoresByWeekBasic");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling scoresByWeekBasic");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreBasic];
      return this.apiClient.callApi(
        '/{format}/ScoresBasic/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoresByWeekSimulation operation.
     * @callback module:api/DefaultApi~scoresByWeekSimulationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Score>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scores by Week Simulation
     * Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} numberofplays The number of plays to progress in this NFL live game simulation. Example entries are <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>150</code>, <code>200</code>, etc.
     * @param {module:api/DefaultApi~scoresByWeekSimulationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Score>}
     */
    scoresByWeekSimulation(format, numberofplays, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scoresByWeekSimulation");
      }
      // verify the required parameter 'numberofplays' is set
      if (numberofplays === undefined || numberofplays === null) {
        throw new Error("Missing the required parameter 'numberofplays' when calling scoresByWeekSimulation");
      }

      let pathParams = {
        'format': format,
        'numberofplays': numberofplays
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Score];
      return this.apiClient.callApi(
        '/{format}/SimulatedScores/{numberofplays}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonCurrent operation.
     * @callback module:api/DefaultApi~seasonCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Current
     * Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~seasonCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    seasonCurrent(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonCurrent");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/CurrentSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonLastCompleted operation.
     * @callback module:api/DefaultApi~seasonLastCompletedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Last Completed
     * Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~seasonLastCompletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    seasonLastCompleted(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonLastCompleted");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/LastCompletedSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonUpcoming operation.
     * @callback module:api/DefaultApi~seasonUpcomingCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Upcoming
     * Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~seasonUpcomingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    seasonUpcoming(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonUpcoming");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/UpcomingSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stadiums operation.
     * @callback module:api/DefaultApi~stadiumsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Stadium>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stadiums
     * This method returns all stadiums.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~stadiumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Stadium>}
     */
    stadiums(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling stadiums");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stadium];
      return this.apiClient.callApi(
        '/{format}/Stadiums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the standings operation.
     * @callback module:api/DefaultApi~standingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Standing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Standings
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~standingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Standing>}
     */
    standings(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling standings");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling standings");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Standing];
      return this.apiClient.callApi(
        '/{format}/Standings/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameLogsBySeason operation.
     * @callback module:api/DefaultApi~teamGameLogsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Logs By Season
     * Game by game log of total team statistics.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Season to get games from. Example <code>2019POST</code>, <code>2020</code>        
     * @param {String} teamid Unique ID of team.  Example <code> 8 </code>
     * @param {String} numberofgames How many games to return. Example <code>all</code>, <code>10</code>, <code>25</code>
     * @param {module:api/DefaultApi~teamGameLogsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameLogsBySeason(format, season, teamid, numberofgames, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling teamGameLogsBySeason");
      }
      // verify the required parameter 'numberofgames' is set
      if (numberofgames === undefined || numberofgames === null) {
        throw new Error("Missing the required parameter 'numberofgames' when calling teamGameLogsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'teamid': teamid,
        'numberofgames': numberofgames
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamGameStats operation.
     * @callback module:api/DefaultApi~teamGameStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Game Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~teamGameStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    teamGameStats(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamGameStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamGameStats");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling teamGameStats");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/{format}/TeamGameStats/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamSeasonStats operation.
     * @callback module:api/DefaultApi~teamSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Season Stats
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~teamSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSeason>}
     */
    teamSeasonStats(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamSeasonStats");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamSeasonStats");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSeason];
      return this.apiClient.callApi(
        '/{format}/TeamSeasonStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsActive operation.
     * @callback module:api/DefaultApi~teamsActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (Active)
     * Gets all active teams.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/Teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAll operation.
     * @callback module:api/DefaultApi~teamsAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (All)
     * Gets all teams, including pro bowl teams.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsAll(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsAll");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/AllTeams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBasic operation.
     * @callback module:api/DefaultApi~teamsBasicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams (Basic)
     * Gets all teams, including pro bowl teams.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamBasic>}
     */
    teamsBasic(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsBasic");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamBasic];
      return this.apiClient.callApi(
        '/{format}/TeamsBasic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsBySeason operation.
     * @callback module:api/DefaultApi~teamsBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams by Season
     * List of teams playing in a specified season.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season            Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~teamsBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsBySeason(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teamsBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamsBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/Teams/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timeframes operation.
     * @callback module:api/DefaultApi~timeframesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Timeframe>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Timeframes
     * Get detailed information about past, present, and future timeframes.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:model/String} type The type of timeframes to return.  Valid entries are <code>current</code> or <code>upcoming</code> or <code>completed</code> or <code>recent</code> or <code>all</code>.
     * @param {module:api/DefaultApi~timeframesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Timeframe>}
     */
    timeframes(format, type, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling timeframes");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling timeframes");
      }

      let pathParams = {
        'format': format,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Timeframe];
      return this.apiClient.callApi(
        '/{format}/Timeframes/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the weekCurrent operation.
     * @callback module:api/DefaultApi~weekCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Week Current
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~weekCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    weekCurrent(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling weekCurrent");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/CurrentWeek', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the weekLastCompleted operation.
     * @callback module:api/DefaultApi~weekLastCompletedCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Week Last Completed
     * Number of the last completed week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~weekLastCompletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    weekLastCompleted(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling weekLastCompleted");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/LastCompletedWeek', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the weekUpcoming operation.
     * @callback module:api/DefaultApi~weekUpcomingCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Week Upcoming
     * Number of the upcoming week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~weekUpcomingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    weekUpcoming(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling weekUpcoming");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/{format}/UpcomingWeek', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the xPing operation.
     * @callback module:api/DefaultApi~xPingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * X Ping
     * Ping NFL API
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} seconds Number of seconds to sleep before responding
     * @param {module:api/DefaultApi~xPingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    xPing(format, seconds, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling xPing");
      }
      // verify the required parameter 'seconds' is set
      if (seconds === undefined || seconds === null) {
        throw new Error("Missing the required parameter 'seconds' when calling xPing");
      }

      let pathParams = {
        'format': format,
        'seconds': seconds
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/{format}/Ping/{seconds}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
