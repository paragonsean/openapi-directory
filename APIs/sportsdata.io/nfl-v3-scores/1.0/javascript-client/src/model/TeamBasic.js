/**
 * NFL v3 Scores
 * NFL schedules, scores, odds, weather, and news API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamBasic model module.
 * @module model/TeamBasic
 * @version 1.0
 */
class TeamBasic {
    /**
     * Constructs a new <code>TeamBasic</code>.
     * @alias module:model/TeamBasic
     */
    constructor() { 
        
        TeamBasic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamBasic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamBasic} obj Optional instance to populate.
     * @return {module:model/TeamBasic} The populated <code>TeamBasic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamBasic();

            if (data.hasOwnProperty('ByeWeek')) {
                obj['ByeWeek'] = ApiClient.convertToType(data['ByeWeek'], 'Number');
            }
            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Conference')) {
                obj['Conference'] = ApiClient.convertToType(data['Conference'], 'String');
            }
            if (data.hasOwnProperty('DefensiveCoordinator')) {
                obj['DefensiveCoordinator'] = ApiClient.convertToType(data['DefensiveCoordinator'], 'String');
            }
            if (data.hasOwnProperty('DefensiveScheme')) {
                obj['DefensiveScheme'] = ApiClient.convertToType(data['DefensiveScheme'], 'String');
            }
            if (data.hasOwnProperty('Division')) {
                obj['Division'] = ApiClient.convertToType(data['Division'], 'String');
            }
            if (data.hasOwnProperty('FullName')) {
                obj['FullName'] = ApiClient.convertToType(data['FullName'], 'String');
            }
            if (data.hasOwnProperty('GlobalTeamID')) {
                obj['GlobalTeamID'] = ApiClient.convertToType(data['GlobalTeamID'], 'Number');
            }
            if (data.hasOwnProperty('HeadCoach')) {
                obj['HeadCoach'] = ApiClient.convertToType(data['HeadCoach'], 'String');
            }
            if (data.hasOwnProperty('Key')) {
                obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OffensiveCoordinator')) {
                obj['OffensiveCoordinator'] = ApiClient.convertToType(data['OffensiveCoordinator'], 'String');
            }
            if (data.hasOwnProperty('OffensiveScheme')) {
                obj['OffensiveScheme'] = ApiClient.convertToType(data['OffensiveScheme'], 'String');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('PrimaryColor')) {
                obj['PrimaryColor'] = ApiClient.convertToType(data['PrimaryColor'], 'String');
            }
            if (data.hasOwnProperty('QuaternaryColor')) {
                obj['QuaternaryColor'] = ApiClient.convertToType(data['QuaternaryColor'], 'String');
            }
            if (data.hasOwnProperty('SecondaryColor')) {
                obj['SecondaryColor'] = ApiClient.convertToType(data['SecondaryColor'], 'String');
            }
            if (data.hasOwnProperty('SpecialTeamsCoach')) {
                obj['SpecialTeamsCoach'] = ApiClient.convertToType(data['SpecialTeamsCoach'], 'String');
            }
            if (data.hasOwnProperty('StadiumID')) {
                obj['StadiumID'] = ApiClient.convertToType(data['StadiumID'], 'Number');
            }
            if (data.hasOwnProperty('TeamID')) {
                obj['TeamID'] = ApiClient.convertToType(data['TeamID'], 'Number');
            }
            if (data.hasOwnProperty('TertiaryColor')) {
                obj['TertiaryColor'] = ApiClient.convertToType(data['TertiaryColor'], 'String');
            }
            if (data.hasOwnProperty('WikipediaLogoURL')) {
                obj['WikipediaLogoURL'] = ApiClient.convertToType(data['WikipediaLogoURL'], 'String');
            }
            if (data.hasOwnProperty('WikipediaWordMarkURL')) {
                obj['WikipediaWordMarkURL'] = ApiClient.convertToType(data['WikipediaWordMarkURL'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamBasic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamBasic</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Conference'] && !(typeof data['Conference'] === 'string' || data['Conference'] instanceof String)) {
            throw new Error("Expected the field `Conference` to be a primitive type in the JSON string but got " + data['Conference']);
        }
        // ensure the json data is a string
        if (data['DefensiveCoordinator'] && !(typeof data['DefensiveCoordinator'] === 'string' || data['DefensiveCoordinator'] instanceof String)) {
            throw new Error("Expected the field `DefensiveCoordinator` to be a primitive type in the JSON string but got " + data['DefensiveCoordinator']);
        }
        // ensure the json data is a string
        if (data['DefensiveScheme'] && !(typeof data['DefensiveScheme'] === 'string' || data['DefensiveScheme'] instanceof String)) {
            throw new Error("Expected the field `DefensiveScheme` to be a primitive type in the JSON string but got " + data['DefensiveScheme']);
        }
        // ensure the json data is a string
        if (data['Division'] && !(typeof data['Division'] === 'string' || data['Division'] instanceof String)) {
            throw new Error("Expected the field `Division` to be a primitive type in the JSON string but got " + data['Division']);
        }
        // ensure the json data is a string
        if (data['FullName'] && !(typeof data['FullName'] === 'string' || data['FullName'] instanceof String)) {
            throw new Error("Expected the field `FullName` to be a primitive type in the JSON string but got " + data['FullName']);
        }
        // ensure the json data is a string
        if (data['HeadCoach'] && !(typeof data['HeadCoach'] === 'string' || data['HeadCoach'] instanceof String)) {
            throw new Error("Expected the field `HeadCoach` to be a primitive type in the JSON string but got " + data['HeadCoach']);
        }
        // ensure the json data is a string
        if (data['Key'] && !(typeof data['Key'] === 'string' || data['Key'] instanceof String)) {
            throw new Error("Expected the field `Key` to be a primitive type in the JSON string but got " + data['Key']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OffensiveCoordinator'] && !(typeof data['OffensiveCoordinator'] === 'string' || data['OffensiveCoordinator'] instanceof String)) {
            throw new Error("Expected the field `OffensiveCoordinator` to be a primitive type in the JSON string but got " + data['OffensiveCoordinator']);
        }
        // ensure the json data is a string
        if (data['OffensiveScheme'] && !(typeof data['OffensiveScheme'] === 'string' || data['OffensiveScheme'] instanceof String)) {
            throw new Error("Expected the field `OffensiveScheme` to be a primitive type in the JSON string but got " + data['OffensiveScheme']);
        }
        // ensure the json data is a string
        if (data['PrimaryColor'] && !(typeof data['PrimaryColor'] === 'string' || data['PrimaryColor'] instanceof String)) {
            throw new Error("Expected the field `PrimaryColor` to be a primitive type in the JSON string but got " + data['PrimaryColor']);
        }
        // ensure the json data is a string
        if (data['QuaternaryColor'] && !(typeof data['QuaternaryColor'] === 'string' || data['QuaternaryColor'] instanceof String)) {
            throw new Error("Expected the field `QuaternaryColor` to be a primitive type in the JSON string but got " + data['QuaternaryColor']);
        }
        // ensure the json data is a string
        if (data['SecondaryColor'] && !(typeof data['SecondaryColor'] === 'string' || data['SecondaryColor'] instanceof String)) {
            throw new Error("Expected the field `SecondaryColor` to be a primitive type in the JSON string but got " + data['SecondaryColor']);
        }
        // ensure the json data is a string
        if (data['SpecialTeamsCoach'] && !(typeof data['SpecialTeamsCoach'] === 'string' || data['SpecialTeamsCoach'] instanceof String)) {
            throw new Error("Expected the field `SpecialTeamsCoach` to be a primitive type in the JSON string but got " + data['SpecialTeamsCoach']);
        }
        // ensure the json data is a string
        if (data['TertiaryColor'] && !(typeof data['TertiaryColor'] === 'string' || data['TertiaryColor'] instanceof String)) {
            throw new Error("Expected the field `TertiaryColor` to be a primitive type in the JSON string but got " + data['TertiaryColor']);
        }
        // ensure the json data is a string
        if (data['WikipediaLogoURL'] && !(typeof data['WikipediaLogoURL'] === 'string' || data['WikipediaLogoURL'] instanceof String)) {
            throw new Error("Expected the field `WikipediaLogoURL` to be a primitive type in the JSON string but got " + data['WikipediaLogoURL']);
        }
        // ensure the json data is a string
        if (data['WikipediaWordMarkURL'] && !(typeof data['WikipediaWordMarkURL'] === 'string' || data['WikipediaWordMarkURL'] instanceof String)) {
            throw new Error("Expected the field `WikipediaWordMarkURL` to be a primitive type in the JSON string but got " + data['WikipediaWordMarkURL']);
        }

        return true;
    }


}



/**
 * @member {Number} ByeWeek
 */
TeamBasic.prototype['ByeWeek'] = undefined;

/**
 * @member {String} City
 */
TeamBasic.prototype['City'] = undefined;

/**
 * @member {String} Conference
 */
TeamBasic.prototype['Conference'] = undefined;

/**
 * @member {String} DefensiveCoordinator
 */
TeamBasic.prototype['DefensiveCoordinator'] = undefined;

/**
 * @member {String} DefensiveScheme
 */
TeamBasic.prototype['DefensiveScheme'] = undefined;

/**
 * @member {String} Division
 */
TeamBasic.prototype['Division'] = undefined;

/**
 * @member {String} FullName
 */
TeamBasic.prototype['FullName'] = undefined;

/**
 * @member {Number} GlobalTeamID
 */
TeamBasic.prototype['GlobalTeamID'] = undefined;

/**
 * @member {String} HeadCoach
 */
TeamBasic.prototype['HeadCoach'] = undefined;

/**
 * @member {String} Key
 */
TeamBasic.prototype['Key'] = undefined;

/**
 * @member {String} Name
 */
TeamBasic.prototype['Name'] = undefined;

/**
 * @member {String} OffensiveCoordinator
 */
TeamBasic.prototype['OffensiveCoordinator'] = undefined;

/**
 * @member {String} OffensiveScheme
 */
TeamBasic.prototype['OffensiveScheme'] = undefined;

/**
 * @member {Number} PlayerID
 */
TeamBasic.prototype['PlayerID'] = undefined;

/**
 * @member {String} PrimaryColor
 */
TeamBasic.prototype['PrimaryColor'] = undefined;

/**
 * @member {String} QuaternaryColor
 */
TeamBasic.prototype['QuaternaryColor'] = undefined;

/**
 * @member {String} SecondaryColor
 */
TeamBasic.prototype['SecondaryColor'] = undefined;

/**
 * @member {String} SpecialTeamsCoach
 */
TeamBasic.prototype['SpecialTeamsCoach'] = undefined;

/**
 * @member {Number} StadiumID
 */
TeamBasic.prototype['StadiumID'] = undefined;

/**
 * @member {Number} TeamID
 */
TeamBasic.prototype['TeamID'] = undefined;

/**
 * @member {String} TertiaryColor
 */
TeamBasic.prototype['TertiaryColor'] = undefined;

/**
 * @member {String} WikipediaLogoURL
 */
TeamBasic.prototype['WikipediaLogoURL'] = undefined;

/**
 * @member {String} WikipediaWordMarkURL
 */
TeamBasic.prototype['WikipediaWordMarkURL'] = undefined;






export default TeamBasic;

