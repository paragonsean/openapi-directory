/**
 * NHL v3 Play-by-Play
 * NHL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NhlV3PlayByPlay);
  }
}(this, function(expect, NhlV3PlayByPlay) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NhlV3PlayByPlay.Penalty();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Penalty', function() {
    it('should create an instance of Penalty', function() {
      // uncomment below and update the code to test Penalty
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be.a(NhlV3PlayByPlay.Penalty);
    });

    it('should have the property benchPenaltyServedByPlayerID (base name: "BenchPenaltyServedByPlayerID")', function() {
      // uncomment below and update the code to test the property benchPenaltyServedByPlayerID
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property drawnByPlayerID (base name: "DrawnByPlayerID")', function() {
      // uncomment below and update the code to test the property drawnByPlayerID
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property drawnByTeamID (base name: "DrawnByTeamID")', function() {
      // uncomment below and update the code to test the property drawnByTeamID
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property isBenchPenalty (base name: "IsBenchPenalty")', function() {
      // uncomment below and update the code to test the property isBenchPenalty
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property penalizedPlayerID (base name: "PenalizedPlayerID")', function() {
      // uncomment below and update the code to test the property penalizedPlayerID
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property penalizedTeamID (base name: "PenalizedTeamID")', function() {
      // uncomment below and update the code to test the property penalizedTeamID
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property penaltyID (base name: "PenaltyID")', function() {
      // uncomment below and update the code to test the property penaltyID
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property penaltyMinutes (base name: "PenaltyMinutes")', function() {
      // uncomment below and update the code to test the property penaltyMinutes
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property periodID (base name: "PeriodID")', function() {
      // uncomment below and update the code to test the property periodID
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property sequence (base name: "Sequence")', function() {
      // uncomment below and update the code to test the property sequence
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property timeRemainingMinutes (base name: "TimeRemainingMinutes")', function() {
      // uncomment below and update the code to test the property timeRemainingMinutes
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

    it('should have the property timeRemainingSeconds (base name: "TimeRemainingSeconds")', function() {
      // uncomment below and update the code to test the property timeRemainingSeconds
      //var instance = new NhlV3PlayByPlay.Penalty();
      //expect(instance).to.be();
    });

  });

}));
