/**
 * NHL v3 Play-by-Play
 * NHL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlayByPlay from '../model/PlayByPlay';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the playByPlay operation.
     * @callback module:api/DefaultApi~playByPlayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayByPlay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play By Play
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} gameid The GameID of an NHL game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code>
     * @param {module:api/DefaultApi~playByPlayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayByPlay}
     */
    playByPlay(format, gameid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playByPlay");
      }
      // verify the required parameter 'gameid' is set
      if (gameid === undefined || gameid === null) {
        throw new Error("Missing the required parameter 'gameid' when calling playByPlay");
      }

      let pathParams = {
        'format': format,
        'gameid': gameid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayByPlay;
      return this.apiClient.callApi(
        '/{format}/PlayByPlay/{gameid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playByPlayDelta operation.
     * @callback module:api/DefaultApi~playByPlayDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayByPlay>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play By Play Delta
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2018-JAN-31</code>, <code>2017-OCT-01</code>.
     * @param {String} minutes Only returns plays that have changed in the last X minutes.  You specify how many minutes in time to go back.  Valid entries are: <code>1</code>, <code>2</code> ... <code>all</code>.
     * @param {module:api/DefaultApi~playByPlayDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayByPlay>}
     */
    playByPlayDelta(format, date, minutes, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playByPlayDelta");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling playByPlayDelta");
      }
      // verify the required parameter 'minutes' is set
      if (minutes === undefined || minutes === null) {
        throw new Error("Missing the required parameter 'minutes' when calling playByPlayDelta");
      }

      let pathParams = {
        'format': format,
        'date': date,
        'minutes': minutes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayByPlay];
      return this.apiClient.callApi(
        '/{format}/PlayByPlayDelta/{date}/{minutes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
