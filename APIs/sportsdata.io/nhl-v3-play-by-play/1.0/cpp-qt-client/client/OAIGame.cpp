/**
 * NHL v3 Play-by-Play
 * NHL play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGame::OAIGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGame::OAIGame() {
    this->initializeModel();
}

OAIGame::~OAIGame() {}

void OAIGame::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_away_rotation_number_isSet = false;
    m_away_rotation_number_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_away_team_id_isSet = false;
    m_away_team_id_isValid = false;

    m_away_team_money_line_isSet = false;
    m_away_team_money_line_isValid = false;

    m_away_team_score_isSet = false;
    m_away_team_score_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_date_time_utc_isSet = false;
    m_date_time_utc_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_game_end_date_time_isSet = false;
    m_game_end_date_time_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_global_away_team_id_isSet = false;
    m_global_away_team_id_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_home_team_id_isSet = false;
    m_global_home_team_id_isValid = false;

    m_home_rotation_number_isSet = false;
    m_home_rotation_number_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_home_team_id_isSet = false;
    m_home_team_id_isValid = false;

    m_home_team_money_line_isSet = false;
    m_home_team_money_line_isValid = false;

    m_home_team_score_isSet = false;
    m_home_team_score_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_last_play_isSet = false;
    m_last_play_isValid = false;

    m_neutral_venue_isSet = false;
    m_neutral_venue_isValid = false;

    m_over_payout_isSet = false;
    m_over_payout_isValid = false;

    m_over_under_isSet = false;
    m_over_under_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_point_spread_isSet = false;
    m_point_spread_isValid = false;

    m_point_spread_away_team_money_line_isSet = false;
    m_point_spread_away_team_money_line_isValid = false;

    m_point_spread_home_team_money_line_isSet = false;
    m_point_spread_home_team_money_line_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_series_info_isSet = false;
    m_series_info_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_remaining_minutes_isSet = false;
    m_time_remaining_minutes_isValid = false;

    m_time_remaining_seconds_isSet = false;
    m_time_remaining_seconds_isValid = false;

    m_under_payout_isSet = false;
    m_under_payout_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGame::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("Attendance")]);
    m_attendance_isSet = !json[QString("Attendance")].isNull() && m_attendance_isValid;

    m_away_rotation_number_isValid = ::OpenAPI::fromJsonValue(m_away_rotation_number, json[QString("AwayRotationNumber")]);
    m_away_rotation_number_isSet = !json[QString("AwayRotationNumber")].isNull() && m_away_rotation_number_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("AwayTeam")]);
    m_away_team_isSet = !json[QString("AwayTeam")].isNull() && m_away_team_isValid;

    m_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_away_team_id, json[QString("AwayTeamID")]);
    m_away_team_id_isSet = !json[QString("AwayTeamID")].isNull() && m_away_team_id_isValid;

    m_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_away_team_money_line, json[QString("AwayTeamMoneyLine")]);
    m_away_team_money_line_isSet = !json[QString("AwayTeamMoneyLine")].isNull() && m_away_team_money_line_isValid;

    m_away_team_score_isValid = ::OpenAPI::fromJsonValue(m_away_team_score, json[QString("AwayTeamScore")]);
    m_away_team_score_isSet = !json[QString("AwayTeamScore")].isNull() && m_away_team_score_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_date_time_utc, json[QString("DateTimeUTC")]);
    m_date_time_utc_isSet = !json[QString("DateTimeUTC")].isNull() && m_date_time_utc_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_game_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_game_end_date_time, json[QString("GameEndDateTime")]);
    m_game_end_date_time_isSet = !json[QString("GameEndDateTime")].isNull() && m_game_end_date_time_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_global_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_away_team_id, json[QString("GlobalAwayTeamID")]);
    m_global_away_team_id_isSet = !json[QString("GlobalAwayTeamID")].isNull() && m_global_away_team_id_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_home_team_id, json[QString("GlobalHomeTeamID")]);
    m_global_home_team_id_isSet = !json[QString("GlobalHomeTeamID")].isNull() && m_global_home_team_id_isValid;

    m_home_rotation_number_isValid = ::OpenAPI::fromJsonValue(m_home_rotation_number, json[QString("HomeRotationNumber")]);
    m_home_rotation_number_isSet = !json[QString("HomeRotationNumber")].isNull() && m_home_rotation_number_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("HomeTeam")]);
    m_home_team_isSet = !json[QString("HomeTeam")].isNull() && m_home_team_isValid;

    m_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_home_team_id, json[QString("HomeTeamID")]);
    m_home_team_id_isSet = !json[QString("HomeTeamID")].isNull() && m_home_team_id_isValid;

    m_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_home_team_money_line, json[QString("HomeTeamMoneyLine")]);
    m_home_team_money_line_isSet = !json[QString("HomeTeamMoneyLine")].isNull() && m_home_team_money_line_isValid;

    m_home_team_score_isValid = ::OpenAPI::fromJsonValue(m_home_team_score, json[QString("HomeTeamScore")]);
    m_home_team_score_isSet = !json[QString("HomeTeamScore")].isNull() && m_home_team_score_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("IsClosed")]);
    m_is_closed_isSet = !json[QString("IsClosed")].isNull() && m_is_closed_isValid;

    m_last_play_isValid = ::OpenAPI::fromJsonValue(m_last_play, json[QString("LastPlay")]);
    m_last_play_isSet = !json[QString("LastPlay")].isNull() && m_last_play_isValid;

    m_neutral_venue_isValid = ::OpenAPI::fromJsonValue(m_neutral_venue, json[QString("NeutralVenue")]);
    m_neutral_venue_isSet = !json[QString("NeutralVenue")].isNull() && m_neutral_venue_isValid;

    m_over_payout_isValid = ::OpenAPI::fromJsonValue(m_over_payout, json[QString("OverPayout")]);
    m_over_payout_isSet = !json[QString("OverPayout")].isNull() && m_over_payout_isValid;

    m_over_under_isValid = ::OpenAPI::fromJsonValue(m_over_under, json[QString("OverUnder")]);
    m_over_under_isSet = !json[QString("OverUnder")].isNull() && m_over_under_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("Periods")]);
    m_periods_isSet = !json[QString("Periods")].isNull() && m_periods_isValid;

    m_point_spread_isValid = ::OpenAPI::fromJsonValue(m_point_spread, json[QString("PointSpread")]);
    m_point_spread_isSet = !json[QString("PointSpread")].isNull() && m_point_spread_isValid;

    m_point_spread_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_point_spread_away_team_money_line, json[QString("PointSpreadAwayTeamMoneyLine")]);
    m_point_spread_away_team_money_line_isSet = !json[QString("PointSpreadAwayTeamMoneyLine")].isNull() && m_point_spread_away_team_money_line_isValid;

    m_point_spread_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_point_spread_home_team_money_line, json[QString("PointSpreadHomeTeamMoneyLine")]);
    m_point_spread_home_team_money_line_isSet = !json[QString("PointSpreadHomeTeamMoneyLine")].isNull() && m_point_spread_home_team_money_line_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_series_info_isValid = ::OpenAPI::fromJsonValue(m_series_info, json[QString("SeriesInfo")]);
    m_series_info_isSet = !json[QString("SeriesInfo")].isNull() && m_series_info_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_time_remaining_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_minutes, json[QString("TimeRemainingMinutes")]);
    m_time_remaining_minutes_isSet = !json[QString("TimeRemainingMinutes")].isNull() && m_time_remaining_minutes_isValid;

    m_time_remaining_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_seconds, json[QString("TimeRemainingSeconds")]);
    m_time_remaining_seconds_isSet = !json[QString("TimeRemainingSeconds")].isNull() && m_time_remaining_seconds_isValid;

    m_under_payout_isValid = ::OpenAPI::fromJsonValue(m_under_payout, json[QString("UnderPayout")]);
    m_under_payout_isSet = !json[QString("UnderPayout")].isNull() && m_under_payout_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGame::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance_isSet) {
        obj.insert(QString("Attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_away_rotation_number_isSet) {
        obj.insert(QString("AwayRotationNumber"), ::OpenAPI::toJsonValue(m_away_rotation_number));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("AwayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_away_team_id_isSet) {
        obj.insert(QString("AwayTeamID"), ::OpenAPI::toJsonValue(m_away_team_id));
    }
    if (m_away_team_money_line_isSet) {
        obj.insert(QString("AwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_away_team_money_line));
    }
    if (m_away_team_score_isSet) {
        obj.insert(QString("AwayTeamScore"), ::OpenAPI::toJsonValue(m_away_team_score));
    }
    if (m_channel_isSet) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_date_time_utc_isSet) {
        obj.insert(QString("DateTimeUTC"), ::OpenAPI::toJsonValue(m_date_time_utc));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_game_end_date_time_isSet) {
        obj.insert(QString("GameEndDateTime"), ::OpenAPI::toJsonValue(m_game_end_date_time));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_global_away_team_id_isSet) {
        obj.insert(QString("GlobalAwayTeamID"), ::OpenAPI::toJsonValue(m_global_away_team_id));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_home_team_id_isSet) {
        obj.insert(QString("GlobalHomeTeamID"), ::OpenAPI::toJsonValue(m_global_home_team_id));
    }
    if (m_home_rotation_number_isSet) {
        obj.insert(QString("HomeRotationNumber"), ::OpenAPI::toJsonValue(m_home_rotation_number));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("HomeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_home_team_id_isSet) {
        obj.insert(QString("HomeTeamID"), ::OpenAPI::toJsonValue(m_home_team_id));
    }
    if (m_home_team_money_line_isSet) {
        obj.insert(QString("HomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_home_team_money_line));
    }
    if (m_home_team_score_isSet) {
        obj.insert(QString("HomeTeamScore"), ::OpenAPI::toJsonValue(m_home_team_score));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("IsClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_last_play_isSet) {
        obj.insert(QString("LastPlay"), ::OpenAPI::toJsonValue(m_last_play));
    }
    if (m_neutral_venue_isSet) {
        obj.insert(QString("NeutralVenue"), ::OpenAPI::toJsonValue(m_neutral_venue));
    }
    if (m_over_payout_isSet) {
        obj.insert(QString("OverPayout"), ::OpenAPI::toJsonValue(m_over_payout));
    }
    if (m_over_under_isSet) {
        obj.insert(QString("OverUnder"), ::OpenAPI::toJsonValue(m_over_under));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_periods.size() > 0) {
        obj.insert(QString("Periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_point_spread_isSet) {
        obj.insert(QString("PointSpread"), ::OpenAPI::toJsonValue(m_point_spread));
    }
    if (m_point_spread_away_team_money_line_isSet) {
        obj.insert(QString("PointSpreadAwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_point_spread_away_team_money_line));
    }
    if (m_point_spread_home_team_money_line_isSet) {
        obj.insert(QString("PointSpreadHomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_point_spread_home_team_money_line));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_series_info.isSet()) {
        obj.insert(QString("SeriesInfo"), ::OpenAPI::toJsonValue(m_series_info));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_remaining_minutes_isSet) {
        obj.insert(QString("TimeRemainingMinutes"), ::OpenAPI::toJsonValue(m_time_remaining_minutes));
    }
    if (m_time_remaining_seconds_isSet) {
        obj.insert(QString("TimeRemainingSeconds"), ::OpenAPI::toJsonValue(m_time_remaining_seconds));
    }
    if (m_under_payout_isSet) {
        obj.insert(QString("UnderPayout"), ::OpenAPI::toJsonValue(m_under_payout));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIGame::getAttendance() const {
    return m_attendance;
}
void OAIGame::setAttendance(const qint32 &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAIGame::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAIGame::is_attendance_Valid() const{
    return m_attendance_isValid;
}

qint32 OAIGame::getAwayRotationNumber() const {
    return m_away_rotation_number;
}
void OAIGame::setAwayRotationNumber(const qint32 &away_rotation_number) {
    m_away_rotation_number = away_rotation_number;
    m_away_rotation_number_isSet = true;
}

bool OAIGame::is_away_rotation_number_Set() const{
    return m_away_rotation_number_isSet;
}

bool OAIGame::is_away_rotation_number_Valid() const{
    return m_away_rotation_number_isValid;
}

QString OAIGame::getAwayTeam() const {
    return m_away_team;
}
void OAIGame::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIGame::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIGame::is_away_team_Valid() const{
    return m_away_team_isValid;
}

qint32 OAIGame::getAwayTeamId() const {
    return m_away_team_id;
}
void OAIGame::setAwayTeamId(const qint32 &away_team_id) {
    m_away_team_id = away_team_id;
    m_away_team_id_isSet = true;
}

bool OAIGame::is_away_team_id_Set() const{
    return m_away_team_id_isSet;
}

bool OAIGame::is_away_team_id_Valid() const{
    return m_away_team_id_isValid;
}

qint32 OAIGame::getAwayTeamMoneyLine() const {
    return m_away_team_money_line;
}
void OAIGame::setAwayTeamMoneyLine(const qint32 &away_team_money_line) {
    m_away_team_money_line = away_team_money_line;
    m_away_team_money_line_isSet = true;
}

bool OAIGame::is_away_team_money_line_Set() const{
    return m_away_team_money_line_isSet;
}

bool OAIGame::is_away_team_money_line_Valid() const{
    return m_away_team_money_line_isValid;
}

qint32 OAIGame::getAwayTeamScore() const {
    return m_away_team_score;
}
void OAIGame::setAwayTeamScore(const qint32 &away_team_score) {
    m_away_team_score = away_team_score;
    m_away_team_score_isSet = true;
}

bool OAIGame::is_away_team_score_Set() const{
    return m_away_team_score_isSet;
}

bool OAIGame::is_away_team_score_Valid() const{
    return m_away_team_score_isValid;
}

QString OAIGame::getChannel() const {
    return m_channel;
}
void OAIGame::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIGame::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIGame::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIGame::getDateTime() const {
    return m_date_time;
}
void OAIGame::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIGame::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIGame::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIGame::getDateTimeUtc() const {
    return m_date_time_utc;
}
void OAIGame::setDateTimeUtc(const QString &date_time_utc) {
    m_date_time_utc = date_time_utc;
    m_date_time_utc_isSet = true;
}

bool OAIGame::is_date_time_utc_Set() const{
    return m_date_time_utc_isSet;
}

bool OAIGame::is_date_time_utc_Valid() const{
    return m_date_time_utc_isValid;
}

QString OAIGame::getDay() const {
    return m_day;
}
void OAIGame::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIGame::is_day_Set() const{
    return m_day_isSet;
}

bool OAIGame::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIGame::getGameEndDateTime() const {
    return m_game_end_date_time;
}
void OAIGame::setGameEndDateTime(const QString &game_end_date_time) {
    m_game_end_date_time = game_end_date_time;
    m_game_end_date_time_isSet = true;
}

bool OAIGame::is_game_end_date_time_Set() const{
    return m_game_end_date_time_isSet;
}

bool OAIGame::is_game_end_date_time_Valid() const{
    return m_game_end_date_time_isValid;
}

qint32 OAIGame::getGameId() const {
    return m_game_id;
}
void OAIGame::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIGame::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIGame::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIGame::getGlobalAwayTeamId() const {
    return m_global_away_team_id;
}
void OAIGame::setGlobalAwayTeamId(const qint32 &global_away_team_id) {
    m_global_away_team_id = global_away_team_id;
    m_global_away_team_id_isSet = true;
}

bool OAIGame::is_global_away_team_id_Set() const{
    return m_global_away_team_id_isSet;
}

bool OAIGame::is_global_away_team_id_Valid() const{
    return m_global_away_team_id_isValid;
}

qint32 OAIGame::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIGame::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIGame::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIGame::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIGame::getGlobalHomeTeamId() const {
    return m_global_home_team_id;
}
void OAIGame::setGlobalHomeTeamId(const qint32 &global_home_team_id) {
    m_global_home_team_id = global_home_team_id;
    m_global_home_team_id_isSet = true;
}

bool OAIGame::is_global_home_team_id_Set() const{
    return m_global_home_team_id_isSet;
}

bool OAIGame::is_global_home_team_id_Valid() const{
    return m_global_home_team_id_isValid;
}

qint32 OAIGame::getHomeRotationNumber() const {
    return m_home_rotation_number;
}
void OAIGame::setHomeRotationNumber(const qint32 &home_rotation_number) {
    m_home_rotation_number = home_rotation_number;
    m_home_rotation_number_isSet = true;
}

bool OAIGame::is_home_rotation_number_Set() const{
    return m_home_rotation_number_isSet;
}

bool OAIGame::is_home_rotation_number_Valid() const{
    return m_home_rotation_number_isValid;
}

QString OAIGame::getHomeTeam() const {
    return m_home_team;
}
void OAIGame::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIGame::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIGame::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIGame::getHomeTeamId() const {
    return m_home_team_id;
}
void OAIGame::setHomeTeamId(const qint32 &home_team_id) {
    m_home_team_id = home_team_id;
    m_home_team_id_isSet = true;
}

bool OAIGame::is_home_team_id_Set() const{
    return m_home_team_id_isSet;
}

bool OAIGame::is_home_team_id_Valid() const{
    return m_home_team_id_isValid;
}

qint32 OAIGame::getHomeTeamMoneyLine() const {
    return m_home_team_money_line;
}
void OAIGame::setHomeTeamMoneyLine(const qint32 &home_team_money_line) {
    m_home_team_money_line = home_team_money_line;
    m_home_team_money_line_isSet = true;
}

bool OAIGame::is_home_team_money_line_Set() const{
    return m_home_team_money_line_isSet;
}

bool OAIGame::is_home_team_money_line_Valid() const{
    return m_home_team_money_line_isValid;
}

qint32 OAIGame::getHomeTeamScore() const {
    return m_home_team_score;
}
void OAIGame::setHomeTeamScore(const qint32 &home_team_score) {
    m_home_team_score = home_team_score;
    m_home_team_score_isSet = true;
}

bool OAIGame::is_home_team_score_Set() const{
    return m_home_team_score_isSet;
}

bool OAIGame::is_home_team_score_Valid() const{
    return m_home_team_score_isValid;
}

bool OAIGame::isIsClosed() const {
    return m_is_closed;
}
void OAIGame::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAIGame::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAIGame::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

QString OAIGame::getLastPlay() const {
    return m_last_play;
}
void OAIGame::setLastPlay(const QString &last_play) {
    m_last_play = last_play;
    m_last_play_isSet = true;
}

bool OAIGame::is_last_play_Set() const{
    return m_last_play_isSet;
}

bool OAIGame::is_last_play_Valid() const{
    return m_last_play_isValid;
}

bool OAIGame::isNeutralVenue() const {
    return m_neutral_venue;
}
void OAIGame::setNeutralVenue(const bool &neutral_venue) {
    m_neutral_venue = neutral_venue;
    m_neutral_venue_isSet = true;
}

bool OAIGame::is_neutral_venue_Set() const{
    return m_neutral_venue_isSet;
}

bool OAIGame::is_neutral_venue_Valid() const{
    return m_neutral_venue_isValid;
}

qint32 OAIGame::getOverPayout() const {
    return m_over_payout;
}
void OAIGame::setOverPayout(const qint32 &over_payout) {
    m_over_payout = over_payout;
    m_over_payout_isSet = true;
}

bool OAIGame::is_over_payout_Set() const{
    return m_over_payout_isSet;
}

bool OAIGame::is_over_payout_Valid() const{
    return m_over_payout_isValid;
}

double OAIGame::getOverUnder() const {
    return m_over_under;
}
void OAIGame::setOverUnder(const double &over_under) {
    m_over_under = over_under;
    m_over_under_isSet = true;
}

bool OAIGame::is_over_under_Set() const{
    return m_over_under_isSet;
}

bool OAIGame::is_over_under_Valid() const{
    return m_over_under_isValid;
}

QString OAIGame::getPeriod() const {
    return m_period;
}
void OAIGame::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGame::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGame::is_period_Valid() const{
    return m_period_isValid;
}

QList<OAIPeriod> OAIGame::getPeriods() const {
    return m_periods;
}
void OAIGame::setPeriods(const QList<OAIPeriod> &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAIGame::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAIGame::is_periods_Valid() const{
    return m_periods_isValid;
}

double OAIGame::getPointSpread() const {
    return m_point_spread;
}
void OAIGame::setPointSpread(const double &point_spread) {
    m_point_spread = point_spread;
    m_point_spread_isSet = true;
}

bool OAIGame::is_point_spread_Set() const{
    return m_point_spread_isSet;
}

bool OAIGame::is_point_spread_Valid() const{
    return m_point_spread_isValid;
}

qint32 OAIGame::getPointSpreadAwayTeamMoneyLine() const {
    return m_point_spread_away_team_money_line;
}
void OAIGame::setPointSpreadAwayTeamMoneyLine(const qint32 &point_spread_away_team_money_line) {
    m_point_spread_away_team_money_line = point_spread_away_team_money_line;
    m_point_spread_away_team_money_line_isSet = true;
}

bool OAIGame::is_point_spread_away_team_money_line_Set() const{
    return m_point_spread_away_team_money_line_isSet;
}

bool OAIGame::is_point_spread_away_team_money_line_Valid() const{
    return m_point_spread_away_team_money_line_isValid;
}

qint32 OAIGame::getPointSpreadHomeTeamMoneyLine() const {
    return m_point_spread_home_team_money_line;
}
void OAIGame::setPointSpreadHomeTeamMoneyLine(const qint32 &point_spread_home_team_money_line) {
    m_point_spread_home_team_money_line = point_spread_home_team_money_line;
    m_point_spread_home_team_money_line_isSet = true;
}

bool OAIGame::is_point_spread_home_team_money_line_Set() const{
    return m_point_spread_home_team_money_line_isSet;
}

bool OAIGame::is_point_spread_home_team_money_line_Valid() const{
    return m_point_spread_home_team_money_line_isValid;
}

qint32 OAIGame::getSeason() const {
    return m_season;
}
void OAIGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGame::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIGame::getSeasonType() const {
    return m_season_type;
}
void OAIGame::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

OAISeries OAIGame::getSeriesInfo() const {
    return m_series_info;
}
void OAIGame::setSeriesInfo(const OAISeries &series_info) {
    m_series_info = series_info;
    m_series_info_isSet = true;
}

bool OAIGame::is_series_info_Set() const{
    return m_series_info_isSet;
}

bool OAIGame::is_series_info_Valid() const{
    return m_series_info_isValid;
}

qint32 OAIGame::getStadiumId() const {
    return m_stadium_id;
}
void OAIGame::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAIGame::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAIGame::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

QString OAIGame::getStatus() const {
    return m_status;
}
void OAIGame::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGame::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGame::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIGame::getTimeRemainingMinutes() const {
    return m_time_remaining_minutes;
}
void OAIGame::setTimeRemainingMinutes(const qint32 &time_remaining_minutes) {
    m_time_remaining_minutes = time_remaining_minutes;
    m_time_remaining_minutes_isSet = true;
}

bool OAIGame::is_time_remaining_minutes_Set() const{
    return m_time_remaining_minutes_isSet;
}

bool OAIGame::is_time_remaining_minutes_Valid() const{
    return m_time_remaining_minutes_isValid;
}

qint32 OAIGame::getTimeRemainingSeconds() const {
    return m_time_remaining_seconds;
}
void OAIGame::setTimeRemainingSeconds(const qint32 &time_remaining_seconds) {
    m_time_remaining_seconds = time_remaining_seconds;
    m_time_remaining_seconds_isSet = true;
}

bool OAIGame::is_time_remaining_seconds_Set() const{
    return m_time_remaining_seconds_isSet;
}

bool OAIGame::is_time_remaining_seconds_Valid() const{
    return m_time_remaining_seconds_isValid;
}

qint32 OAIGame::getUnderPayout() const {
    return m_under_payout;
}
void OAIGame::setUnderPayout(const qint32 &under_payout) {
    m_under_payout = under_payout;
    m_under_payout_isSet = true;
}

bool OAIGame::is_under_payout_Set() const{
    return m_under_payout_isSet;
}

bool OAIGame::is_under_payout_Valid() const{
    return m_under_payout_isValid;
}

QString OAIGame::getUpdated() const {
    return m_updated;
}
void OAIGame::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIGame::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIGame::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_rotation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_rotation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_payout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
