/**
 * NHL v3 Projections
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerGameProjection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerGameProjection::OAIPlayerGameProjection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerGameProjection::OAIPlayerGameProjection() {
    this->initializeModel();
}

OAIPlayerGameProjection::~OAIPlayerGameProjection() {}

void OAIPlayerGameProjection::initializeModel() {

    m_assists_isSet = false;
    m_assists_isValid = false;

    m_bench_penalty_minutes_isSet = false;
    m_bench_penalty_minutes_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_draft_kings_position_isSet = false;
    m_draft_kings_position_isValid = false;

    m_draft_kings_salary_isSet = false;
    m_draft_kings_salary_isValid = false;

    m_empty_net_goals_isSet = false;
    m_empty_net_goals_isValid = false;

    m_faceoffs_lost_isSet = false;
    m_faceoffs_lost_isValid = false;

    m_faceoffs_won_isSet = false;
    m_faceoffs_won_isValid = false;

    m_fan_duel_position_isSet = false;
    m_fan_duel_position_isValid = false;

    m_fan_duel_salary_isSet = false;
    m_fan_duel_salary_isValid = false;

    m_fantasy_data_salary_isSet = false;
    m_fantasy_data_salary_isValid = false;

    m_fantasy_draft_position_isSet = false;
    m_fantasy_draft_position_isValid = false;

    m_fantasy_draft_salary_isSet = false;
    m_fantasy_draft_salary_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_fantasy_draft_isSet = false;
    m_fantasy_points_fantasy_draft_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_giveaways_isSet = false;
    m_giveaways_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_opponent_id_isSet = false;
    m_global_opponent_id_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_goaltending_goals_against_isSet = false;
    m_goaltending_goals_against_isValid = false;

    m_goaltending_losses_isSet = false;
    m_goaltending_losses_isValid = false;

    m_goaltending_minutes_isSet = false;
    m_goaltending_minutes_isValid = false;

    m_goaltending_overtime_losses_isSet = false;
    m_goaltending_overtime_losses_isValid = false;

    m_goaltending_saves_isSet = false;
    m_goaltending_saves_isValid = false;

    m_goaltending_seconds_isSet = false;
    m_goaltending_seconds_isValid = false;

    m_goaltending_shots_against_isSet = false;
    m_goaltending_shots_against_isValid = false;

    m_goaltending_shutouts_isSet = false;
    m_goaltending_shutouts_isValid = false;

    m_goaltending_wins_isSet = false;
    m_goaltending_wins_isValid = false;

    m_hat_tricks_isSet = false;
    m_hat_tricks_isValid = false;

    m_hits_isSet = false;
    m_hits_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_injury_body_part_isSet = false;
    m_injury_body_part_isValid = false;

    m_injury_notes_isSet = false;
    m_injury_notes_isValid = false;

    m_injury_start_date_isSet = false;
    m_injury_start_date_isValid = false;

    m_injury_status_isSet = false;
    m_injury_status_isValid = false;

    m_is_game_over_isSet = false;
    m_is_game_over_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_opponent_position_rank_isSet = false;
    m_opponent_position_rank_isValid = false;

    m_opponent_rank_isSet = false;
    m_opponent_rank_isValid = false;

    m_penalty_minutes_isSet = false;
    m_penalty_minutes_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_plus_minus_isSet = false;
    m_plus_minus_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_power_play_assists_isSet = false;
    m_power_play_assists_isValid = false;

    m_power_play_goals_isSet = false;
    m_power_play_goals_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;

    m_shifts_isSet = false;
    m_shifts_isValid = false;

    m_shootout_goals_isSet = false;
    m_shootout_goals_isValid = false;

    m_short_handed_assists_isSet = false;
    m_short_handed_assists_isValid = false;

    m_short_handed_goals_isSet = false;
    m_short_handed_goals_isValid = false;

    m_shots_on_goal_isSet = false;
    m_shots_on_goal_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_stat_id_isSet = false;
    m_stat_id_isValid = false;

    m_takeaways_isSet = false;
    m_takeaways_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_yahoo_position_isSet = false;
    m_yahoo_position_isValid = false;

    m_yahoo_salary_isSet = false;
    m_yahoo_salary_isValid = false;
}

void OAIPlayerGameProjection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerGameProjection::fromJsonObject(QJsonObject json) {

    m_assists_isValid = ::OpenAPI::fromJsonValue(m_assists, json[QString("Assists")]);
    m_assists_isSet = !json[QString("Assists")].isNull() && m_assists_isValid;

    m_bench_penalty_minutes_isValid = ::OpenAPI::fromJsonValue(m_bench_penalty_minutes, json[QString("BenchPenaltyMinutes")]);
    m_bench_penalty_minutes_isSet = !json[QString("BenchPenaltyMinutes")].isNull() && m_bench_penalty_minutes_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("Blocks")]);
    m_blocks_isSet = !json[QString("Blocks")].isNull() && m_blocks_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_draft_kings_position_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_position, json[QString("DraftKingsPosition")]);
    m_draft_kings_position_isSet = !json[QString("DraftKingsPosition")].isNull() && m_draft_kings_position_isValid;

    m_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_salary, json[QString("DraftKingsSalary")]);
    m_draft_kings_salary_isSet = !json[QString("DraftKingsSalary")].isNull() && m_draft_kings_salary_isValid;

    m_empty_net_goals_isValid = ::OpenAPI::fromJsonValue(m_empty_net_goals, json[QString("EmptyNetGoals")]);
    m_empty_net_goals_isSet = !json[QString("EmptyNetGoals")].isNull() && m_empty_net_goals_isValid;

    m_faceoffs_lost_isValid = ::OpenAPI::fromJsonValue(m_faceoffs_lost, json[QString("FaceoffsLost")]);
    m_faceoffs_lost_isSet = !json[QString("FaceoffsLost")].isNull() && m_faceoffs_lost_isValid;

    m_faceoffs_won_isValid = ::OpenAPI::fromJsonValue(m_faceoffs_won, json[QString("FaceoffsWon")]);
    m_faceoffs_won_isSet = !json[QString("FaceoffsWon")].isNull() && m_faceoffs_won_isValid;

    m_fan_duel_position_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_position, json[QString("FanDuelPosition")]);
    m_fan_duel_position_isSet = !json[QString("FanDuelPosition")].isNull() && m_fan_duel_position_isValid;

    m_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_salary, json[QString("FanDuelSalary")]);
    m_fan_duel_salary_isSet = !json[QString("FanDuelSalary")].isNull() && m_fan_duel_salary_isValid;

    m_fantasy_data_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_data_salary, json[QString("FantasyDataSalary")]);
    m_fantasy_data_salary_isSet = !json[QString("FantasyDataSalary")].isNull() && m_fantasy_data_salary_isValid;

    m_fantasy_draft_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_position, json[QString("FantasyDraftPosition")]);
    m_fantasy_draft_position_isSet = !json[QString("FantasyDraftPosition")].isNull() && m_fantasy_draft_position_isValid;

    m_fantasy_draft_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_salary, json[QString("FantasyDraftSalary")]);
    m_fantasy_draft_salary_isSet = !json[QString("FantasyDraftSalary")].isNull() && m_fantasy_draft_salary_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_fantasy_draft_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fantasy_draft, json[QString("FantasyPointsFantasyDraft")]);
    m_fantasy_points_fantasy_draft_isSet = !json[QString("FantasyPointsFantasyDraft")].isNull() && m_fantasy_points_fantasy_draft_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_giveaways_isValid = ::OpenAPI::fromJsonValue(m_giveaways, json[QString("Giveaways")]);
    m_giveaways_isSet = !json[QString("Giveaways")].isNull() && m_giveaways_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_global_opponent_id, json[QString("GlobalOpponentID")]);
    m_global_opponent_id_isSet = !json[QString("GlobalOpponentID")].isNull() && m_global_opponent_id_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("Goals")]);
    m_goals_isSet = !json[QString("Goals")].isNull() && m_goals_isValid;

    m_goaltending_goals_against_isValid = ::OpenAPI::fromJsonValue(m_goaltending_goals_against, json[QString("GoaltendingGoalsAgainst")]);
    m_goaltending_goals_against_isSet = !json[QString("GoaltendingGoalsAgainst")].isNull() && m_goaltending_goals_against_isValid;

    m_goaltending_losses_isValid = ::OpenAPI::fromJsonValue(m_goaltending_losses, json[QString("GoaltendingLosses")]);
    m_goaltending_losses_isSet = !json[QString("GoaltendingLosses")].isNull() && m_goaltending_losses_isValid;

    m_goaltending_minutes_isValid = ::OpenAPI::fromJsonValue(m_goaltending_minutes, json[QString("GoaltendingMinutes")]);
    m_goaltending_minutes_isSet = !json[QString("GoaltendingMinutes")].isNull() && m_goaltending_minutes_isValid;

    m_goaltending_overtime_losses_isValid = ::OpenAPI::fromJsonValue(m_goaltending_overtime_losses, json[QString("GoaltendingOvertimeLosses")]);
    m_goaltending_overtime_losses_isSet = !json[QString("GoaltendingOvertimeLosses")].isNull() && m_goaltending_overtime_losses_isValid;

    m_goaltending_saves_isValid = ::OpenAPI::fromJsonValue(m_goaltending_saves, json[QString("GoaltendingSaves")]);
    m_goaltending_saves_isSet = !json[QString("GoaltendingSaves")].isNull() && m_goaltending_saves_isValid;

    m_goaltending_seconds_isValid = ::OpenAPI::fromJsonValue(m_goaltending_seconds, json[QString("GoaltendingSeconds")]);
    m_goaltending_seconds_isSet = !json[QString("GoaltendingSeconds")].isNull() && m_goaltending_seconds_isValid;

    m_goaltending_shots_against_isValid = ::OpenAPI::fromJsonValue(m_goaltending_shots_against, json[QString("GoaltendingShotsAgainst")]);
    m_goaltending_shots_against_isSet = !json[QString("GoaltendingShotsAgainst")].isNull() && m_goaltending_shots_against_isValid;

    m_goaltending_shutouts_isValid = ::OpenAPI::fromJsonValue(m_goaltending_shutouts, json[QString("GoaltendingShutouts")]);
    m_goaltending_shutouts_isSet = !json[QString("GoaltendingShutouts")].isNull() && m_goaltending_shutouts_isValid;

    m_goaltending_wins_isValid = ::OpenAPI::fromJsonValue(m_goaltending_wins, json[QString("GoaltendingWins")]);
    m_goaltending_wins_isSet = !json[QString("GoaltendingWins")].isNull() && m_goaltending_wins_isValid;

    m_hat_tricks_isValid = ::OpenAPI::fromJsonValue(m_hat_tricks, json[QString("HatTricks")]);
    m_hat_tricks_isSet = !json[QString("HatTricks")].isNull() && m_hat_tricks_isValid;

    m_hits_isValid = ::OpenAPI::fromJsonValue(m_hits, json[QString("Hits")]);
    m_hits_isSet = !json[QString("Hits")].isNull() && m_hits_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_injury_body_part_isValid = ::OpenAPI::fromJsonValue(m_injury_body_part, json[QString("InjuryBodyPart")]);
    m_injury_body_part_isSet = !json[QString("InjuryBodyPart")].isNull() && m_injury_body_part_isValid;

    m_injury_notes_isValid = ::OpenAPI::fromJsonValue(m_injury_notes, json[QString("InjuryNotes")]);
    m_injury_notes_isSet = !json[QString("InjuryNotes")].isNull() && m_injury_notes_isValid;

    m_injury_start_date_isValid = ::OpenAPI::fromJsonValue(m_injury_start_date, json[QString("InjuryStartDate")]);
    m_injury_start_date_isSet = !json[QString("InjuryStartDate")].isNull() && m_injury_start_date_isValid;

    m_injury_status_isValid = ::OpenAPI::fromJsonValue(m_injury_status, json[QString("InjuryStatus")]);
    m_injury_status_isSet = !json[QString("InjuryStatus")].isNull() && m_injury_status_isValid;

    m_is_game_over_isValid = ::OpenAPI::fromJsonValue(m_is_game_over, json[QString("IsGameOver")]);
    m_is_game_over_isSet = !json[QString("IsGameOver")].isNull() && m_is_game_over_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("Minutes")]);
    m_minutes_isSet = !json[QString("Minutes")].isNull() && m_minutes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentID")]);
    m_opponent_id_isSet = !json[QString("OpponentID")].isNull() && m_opponent_id_isValid;

    m_opponent_position_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_position_rank, json[QString("OpponentPositionRank")]);
    m_opponent_position_rank_isSet = !json[QString("OpponentPositionRank")].isNull() && m_opponent_position_rank_isValid;

    m_opponent_rank_isValid = ::OpenAPI::fromJsonValue(m_opponent_rank, json[QString("OpponentRank")]);
    m_opponent_rank_isSet = !json[QString("OpponentRank")].isNull() && m_opponent_rank_isValid;

    m_penalty_minutes_isValid = ::OpenAPI::fromJsonValue(m_penalty_minutes, json[QString("PenaltyMinutes")]);
    m_penalty_minutes_isSet = !json[QString("PenaltyMinutes")].isNull() && m_penalty_minutes_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_plus_minus_isValid = ::OpenAPI::fromJsonValue(m_plus_minus, json[QString("PlusMinus")]);
    m_plus_minus_isSet = !json[QString("PlusMinus")].isNull() && m_plus_minus_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_power_play_assists_isValid = ::OpenAPI::fromJsonValue(m_power_play_assists, json[QString("PowerPlayAssists")]);
    m_power_play_assists_isSet = !json[QString("PowerPlayAssists")].isNull() && m_power_play_assists_isValid;

    m_power_play_goals_isValid = ::OpenAPI::fromJsonValue(m_power_play_goals, json[QString("PowerPlayGoals")]);
    m_power_play_goals_isSet = !json[QString("PowerPlayGoals")].isNull() && m_power_play_goals_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("Seconds")]);
    m_seconds_isSet = !json[QString("Seconds")].isNull() && m_seconds_isValid;

    m_shifts_isValid = ::OpenAPI::fromJsonValue(m_shifts, json[QString("Shifts")]);
    m_shifts_isSet = !json[QString("Shifts")].isNull() && m_shifts_isValid;

    m_shootout_goals_isValid = ::OpenAPI::fromJsonValue(m_shootout_goals, json[QString("ShootoutGoals")]);
    m_shootout_goals_isSet = !json[QString("ShootoutGoals")].isNull() && m_shootout_goals_isValid;

    m_short_handed_assists_isValid = ::OpenAPI::fromJsonValue(m_short_handed_assists, json[QString("ShortHandedAssists")]);
    m_short_handed_assists_isSet = !json[QString("ShortHandedAssists")].isNull() && m_short_handed_assists_isValid;

    m_short_handed_goals_isValid = ::OpenAPI::fromJsonValue(m_short_handed_goals, json[QString("ShortHandedGoals")]);
    m_short_handed_goals_isSet = !json[QString("ShortHandedGoals")].isNull() && m_short_handed_goals_isValid;

    m_shots_on_goal_isValid = ::OpenAPI::fromJsonValue(m_shots_on_goal, json[QString("ShotsOnGoal")]);
    m_shots_on_goal_isSet = !json[QString("ShotsOnGoal")].isNull() && m_shots_on_goal_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("Started")]);
    m_started_isSet = !json[QString("Started")].isNull() && m_started_isValid;

    m_stat_id_isValid = ::OpenAPI::fromJsonValue(m_stat_id, json[QString("StatID")]);
    m_stat_id_isSet = !json[QString("StatID")].isNull() && m_stat_id_isValid;

    m_takeaways_isValid = ::OpenAPI::fromJsonValue(m_takeaways, json[QString("Takeaways")]);
    m_takeaways_isSet = !json[QString("Takeaways")].isNull() && m_takeaways_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_yahoo_position_isValid = ::OpenAPI::fromJsonValue(m_yahoo_position, json[QString("YahooPosition")]);
    m_yahoo_position_isSet = !json[QString("YahooPosition")].isNull() && m_yahoo_position_isValid;

    m_yahoo_salary_isValid = ::OpenAPI::fromJsonValue(m_yahoo_salary, json[QString("YahooSalary")]);
    m_yahoo_salary_isSet = !json[QString("YahooSalary")].isNull() && m_yahoo_salary_isValid;
}

QString OAIPlayerGameProjection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerGameProjection::asJsonObject() const {
    QJsonObject obj;
    if (m_assists_isSet) {
        obj.insert(QString("Assists"), ::OpenAPI::toJsonValue(m_assists));
    }
    if (m_bench_penalty_minutes_isSet) {
        obj.insert(QString("BenchPenaltyMinutes"), ::OpenAPI::toJsonValue(m_bench_penalty_minutes));
    }
    if (m_blocks_isSet) {
        obj.insert(QString("Blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_draft_kings_position_isSet) {
        obj.insert(QString("DraftKingsPosition"), ::OpenAPI::toJsonValue(m_draft_kings_position));
    }
    if (m_draft_kings_salary_isSet) {
        obj.insert(QString("DraftKingsSalary"), ::OpenAPI::toJsonValue(m_draft_kings_salary));
    }
    if (m_empty_net_goals_isSet) {
        obj.insert(QString("EmptyNetGoals"), ::OpenAPI::toJsonValue(m_empty_net_goals));
    }
    if (m_faceoffs_lost_isSet) {
        obj.insert(QString("FaceoffsLost"), ::OpenAPI::toJsonValue(m_faceoffs_lost));
    }
    if (m_faceoffs_won_isSet) {
        obj.insert(QString("FaceoffsWon"), ::OpenAPI::toJsonValue(m_faceoffs_won));
    }
    if (m_fan_duel_position_isSet) {
        obj.insert(QString("FanDuelPosition"), ::OpenAPI::toJsonValue(m_fan_duel_position));
    }
    if (m_fan_duel_salary_isSet) {
        obj.insert(QString("FanDuelSalary"), ::OpenAPI::toJsonValue(m_fan_duel_salary));
    }
    if (m_fantasy_data_salary_isSet) {
        obj.insert(QString("FantasyDataSalary"), ::OpenAPI::toJsonValue(m_fantasy_data_salary));
    }
    if (m_fantasy_draft_position_isSet) {
        obj.insert(QString("FantasyDraftPosition"), ::OpenAPI::toJsonValue(m_fantasy_draft_position));
    }
    if (m_fantasy_draft_salary_isSet) {
        obj.insert(QString("FantasyDraftSalary"), ::OpenAPI::toJsonValue(m_fantasy_draft_salary));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_fantasy_draft_isSet) {
        obj.insert(QString("FantasyPointsFantasyDraft"), ::OpenAPI::toJsonValue(m_fantasy_points_fantasy_draft));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_giveaways_isSet) {
        obj.insert(QString("Giveaways"), ::OpenAPI::toJsonValue(m_giveaways));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_opponent_id_isSet) {
        obj.insert(QString("GlobalOpponentID"), ::OpenAPI::toJsonValue(m_global_opponent_id));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_goals_isSet) {
        obj.insert(QString("Goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_goaltending_goals_against_isSet) {
        obj.insert(QString("GoaltendingGoalsAgainst"), ::OpenAPI::toJsonValue(m_goaltending_goals_against));
    }
    if (m_goaltending_losses_isSet) {
        obj.insert(QString("GoaltendingLosses"), ::OpenAPI::toJsonValue(m_goaltending_losses));
    }
    if (m_goaltending_minutes_isSet) {
        obj.insert(QString("GoaltendingMinutes"), ::OpenAPI::toJsonValue(m_goaltending_minutes));
    }
    if (m_goaltending_overtime_losses_isSet) {
        obj.insert(QString("GoaltendingOvertimeLosses"), ::OpenAPI::toJsonValue(m_goaltending_overtime_losses));
    }
    if (m_goaltending_saves_isSet) {
        obj.insert(QString("GoaltendingSaves"), ::OpenAPI::toJsonValue(m_goaltending_saves));
    }
    if (m_goaltending_seconds_isSet) {
        obj.insert(QString("GoaltendingSeconds"), ::OpenAPI::toJsonValue(m_goaltending_seconds));
    }
    if (m_goaltending_shots_against_isSet) {
        obj.insert(QString("GoaltendingShotsAgainst"), ::OpenAPI::toJsonValue(m_goaltending_shots_against));
    }
    if (m_goaltending_shutouts_isSet) {
        obj.insert(QString("GoaltendingShutouts"), ::OpenAPI::toJsonValue(m_goaltending_shutouts));
    }
    if (m_goaltending_wins_isSet) {
        obj.insert(QString("GoaltendingWins"), ::OpenAPI::toJsonValue(m_goaltending_wins));
    }
    if (m_hat_tricks_isSet) {
        obj.insert(QString("HatTricks"), ::OpenAPI::toJsonValue(m_hat_tricks));
    }
    if (m_hits_isSet) {
        obj.insert(QString("Hits"), ::OpenAPI::toJsonValue(m_hits));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_injury_body_part_isSet) {
        obj.insert(QString("InjuryBodyPart"), ::OpenAPI::toJsonValue(m_injury_body_part));
    }
    if (m_injury_notes_isSet) {
        obj.insert(QString("InjuryNotes"), ::OpenAPI::toJsonValue(m_injury_notes));
    }
    if (m_injury_start_date_isSet) {
        obj.insert(QString("InjuryStartDate"), ::OpenAPI::toJsonValue(m_injury_start_date));
    }
    if (m_injury_status_isSet) {
        obj.insert(QString("InjuryStatus"), ::OpenAPI::toJsonValue(m_injury_status));
    }
    if (m_is_game_over_isSet) {
        obj.insert(QString("IsGameOver"), ::OpenAPI::toJsonValue(m_is_game_over));
    }
    if (m_minutes_isSet) {
        obj.insert(QString("Minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentID"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_opponent_position_rank_isSet) {
        obj.insert(QString("OpponentPositionRank"), ::OpenAPI::toJsonValue(m_opponent_position_rank));
    }
    if (m_opponent_rank_isSet) {
        obj.insert(QString("OpponentRank"), ::OpenAPI::toJsonValue(m_opponent_rank));
    }
    if (m_penalty_minutes_isSet) {
        obj.insert(QString("PenaltyMinutes"), ::OpenAPI::toJsonValue(m_penalty_minutes));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_plus_minus_isSet) {
        obj.insert(QString("PlusMinus"), ::OpenAPI::toJsonValue(m_plus_minus));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_power_play_assists_isSet) {
        obj.insert(QString("PowerPlayAssists"), ::OpenAPI::toJsonValue(m_power_play_assists));
    }
    if (m_power_play_goals_isSet) {
        obj.insert(QString("PowerPlayGoals"), ::OpenAPI::toJsonValue(m_power_play_goals));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("Seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    if (m_shifts_isSet) {
        obj.insert(QString("Shifts"), ::OpenAPI::toJsonValue(m_shifts));
    }
    if (m_shootout_goals_isSet) {
        obj.insert(QString("ShootoutGoals"), ::OpenAPI::toJsonValue(m_shootout_goals));
    }
    if (m_short_handed_assists_isSet) {
        obj.insert(QString("ShortHandedAssists"), ::OpenAPI::toJsonValue(m_short_handed_assists));
    }
    if (m_short_handed_goals_isSet) {
        obj.insert(QString("ShortHandedGoals"), ::OpenAPI::toJsonValue(m_short_handed_goals));
    }
    if (m_shots_on_goal_isSet) {
        obj.insert(QString("ShotsOnGoal"), ::OpenAPI::toJsonValue(m_shots_on_goal));
    }
    if (m_started_isSet) {
        obj.insert(QString("Started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_stat_id_isSet) {
        obj.insert(QString("StatID"), ::OpenAPI::toJsonValue(m_stat_id));
    }
    if (m_takeaways_isSet) {
        obj.insert(QString("Takeaways"), ::OpenAPI::toJsonValue(m_takeaways));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_yahoo_position_isSet) {
        obj.insert(QString("YahooPosition"), ::OpenAPI::toJsonValue(m_yahoo_position));
    }
    if (m_yahoo_salary_isSet) {
        obj.insert(QString("YahooSalary"), ::OpenAPI::toJsonValue(m_yahoo_salary));
    }
    return obj;
}

double OAIPlayerGameProjection::getAssists() const {
    return m_assists;
}
void OAIPlayerGameProjection::setAssists(const double &assists) {
    m_assists = assists;
    m_assists_isSet = true;
}

bool OAIPlayerGameProjection::is_assists_Set() const{
    return m_assists_isSet;
}

bool OAIPlayerGameProjection::is_assists_Valid() const{
    return m_assists_isValid;
}

double OAIPlayerGameProjection::getBenchPenaltyMinutes() const {
    return m_bench_penalty_minutes;
}
void OAIPlayerGameProjection::setBenchPenaltyMinutes(const double &bench_penalty_minutes) {
    m_bench_penalty_minutes = bench_penalty_minutes;
    m_bench_penalty_minutes_isSet = true;
}

bool OAIPlayerGameProjection::is_bench_penalty_minutes_Set() const{
    return m_bench_penalty_minutes_isSet;
}

bool OAIPlayerGameProjection::is_bench_penalty_minutes_Valid() const{
    return m_bench_penalty_minutes_isValid;
}

double OAIPlayerGameProjection::getBlocks() const {
    return m_blocks;
}
void OAIPlayerGameProjection::setBlocks(const double &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIPlayerGameProjection::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIPlayerGameProjection::is_blocks_Valid() const{
    return m_blocks_isValid;
}

QString OAIPlayerGameProjection::getDateTime() const {
    return m_date_time;
}
void OAIPlayerGameProjection::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIPlayerGameProjection::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIPlayerGameProjection::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIPlayerGameProjection::getDay() const {
    return m_day;
}
void OAIPlayerGameProjection::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIPlayerGameProjection::is_day_Set() const{
    return m_day_isSet;
}

bool OAIPlayerGameProjection::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIPlayerGameProjection::getDraftKingsPosition() const {
    return m_draft_kings_position;
}
void OAIPlayerGameProjection::setDraftKingsPosition(const QString &draft_kings_position) {
    m_draft_kings_position = draft_kings_position;
    m_draft_kings_position_isSet = true;
}

bool OAIPlayerGameProjection::is_draft_kings_position_Set() const{
    return m_draft_kings_position_isSet;
}

bool OAIPlayerGameProjection::is_draft_kings_position_Valid() const{
    return m_draft_kings_position_isValid;
}

qint32 OAIPlayerGameProjection::getDraftKingsSalary() const {
    return m_draft_kings_salary;
}
void OAIPlayerGameProjection::setDraftKingsSalary(const qint32 &draft_kings_salary) {
    m_draft_kings_salary = draft_kings_salary;
    m_draft_kings_salary_isSet = true;
}

bool OAIPlayerGameProjection::is_draft_kings_salary_Set() const{
    return m_draft_kings_salary_isSet;
}

bool OAIPlayerGameProjection::is_draft_kings_salary_Valid() const{
    return m_draft_kings_salary_isValid;
}

double OAIPlayerGameProjection::getEmptyNetGoals() const {
    return m_empty_net_goals;
}
void OAIPlayerGameProjection::setEmptyNetGoals(const double &empty_net_goals) {
    m_empty_net_goals = empty_net_goals;
    m_empty_net_goals_isSet = true;
}

bool OAIPlayerGameProjection::is_empty_net_goals_Set() const{
    return m_empty_net_goals_isSet;
}

bool OAIPlayerGameProjection::is_empty_net_goals_Valid() const{
    return m_empty_net_goals_isValid;
}

double OAIPlayerGameProjection::getFaceoffsLost() const {
    return m_faceoffs_lost;
}
void OAIPlayerGameProjection::setFaceoffsLost(const double &faceoffs_lost) {
    m_faceoffs_lost = faceoffs_lost;
    m_faceoffs_lost_isSet = true;
}

bool OAIPlayerGameProjection::is_faceoffs_lost_Set() const{
    return m_faceoffs_lost_isSet;
}

bool OAIPlayerGameProjection::is_faceoffs_lost_Valid() const{
    return m_faceoffs_lost_isValid;
}

double OAIPlayerGameProjection::getFaceoffsWon() const {
    return m_faceoffs_won;
}
void OAIPlayerGameProjection::setFaceoffsWon(const double &faceoffs_won) {
    m_faceoffs_won = faceoffs_won;
    m_faceoffs_won_isSet = true;
}

bool OAIPlayerGameProjection::is_faceoffs_won_Set() const{
    return m_faceoffs_won_isSet;
}

bool OAIPlayerGameProjection::is_faceoffs_won_Valid() const{
    return m_faceoffs_won_isValid;
}

QString OAIPlayerGameProjection::getFanDuelPosition() const {
    return m_fan_duel_position;
}
void OAIPlayerGameProjection::setFanDuelPosition(const QString &fan_duel_position) {
    m_fan_duel_position = fan_duel_position;
    m_fan_duel_position_isSet = true;
}

bool OAIPlayerGameProjection::is_fan_duel_position_Set() const{
    return m_fan_duel_position_isSet;
}

bool OAIPlayerGameProjection::is_fan_duel_position_Valid() const{
    return m_fan_duel_position_isValid;
}

qint32 OAIPlayerGameProjection::getFanDuelSalary() const {
    return m_fan_duel_salary;
}
void OAIPlayerGameProjection::setFanDuelSalary(const qint32 &fan_duel_salary) {
    m_fan_duel_salary = fan_duel_salary;
    m_fan_duel_salary_isSet = true;
}

bool OAIPlayerGameProjection::is_fan_duel_salary_Set() const{
    return m_fan_duel_salary_isSet;
}

bool OAIPlayerGameProjection::is_fan_duel_salary_Valid() const{
    return m_fan_duel_salary_isValid;
}

qint32 OAIPlayerGameProjection::getFantasyDataSalary() const {
    return m_fantasy_data_salary;
}
void OAIPlayerGameProjection::setFantasyDataSalary(const qint32 &fantasy_data_salary) {
    m_fantasy_data_salary = fantasy_data_salary;
    m_fantasy_data_salary_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_data_salary_Set() const{
    return m_fantasy_data_salary_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_data_salary_Valid() const{
    return m_fantasy_data_salary_isValid;
}

QString OAIPlayerGameProjection::getFantasyDraftPosition() const {
    return m_fantasy_draft_position;
}
void OAIPlayerGameProjection::setFantasyDraftPosition(const QString &fantasy_draft_position) {
    m_fantasy_draft_position = fantasy_draft_position;
    m_fantasy_draft_position_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_draft_position_Set() const{
    return m_fantasy_draft_position_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_draft_position_Valid() const{
    return m_fantasy_draft_position_isValid;
}

qint32 OAIPlayerGameProjection::getFantasyDraftSalary() const {
    return m_fantasy_draft_salary;
}
void OAIPlayerGameProjection::setFantasyDraftSalary(const qint32 &fantasy_draft_salary) {
    m_fantasy_draft_salary = fantasy_draft_salary;
    m_fantasy_draft_salary_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_draft_salary_Set() const{
    return m_fantasy_draft_salary_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_draft_salary_Valid() const{
    return m_fantasy_draft_salary_isValid;
}

double OAIPlayerGameProjection::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerGameProjection::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAIPlayerGameProjection::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAIPlayerGameProjection::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAIPlayerGameProjection::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAIPlayerGameProjection::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAIPlayerGameProjection::getFantasyPointsFantasyDraft() const {
    return m_fantasy_points_fantasy_draft;
}
void OAIPlayerGameProjection::setFantasyPointsFantasyDraft(const double &fantasy_points_fantasy_draft) {
    m_fantasy_points_fantasy_draft = fantasy_points_fantasy_draft;
    m_fantasy_points_fantasy_draft_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_points_fantasy_draft_Set() const{
    return m_fantasy_points_fantasy_draft_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_points_fantasy_draft_Valid() const{
    return m_fantasy_points_fantasy_draft_isValid;
}

double OAIPlayerGameProjection::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAIPlayerGameProjection::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAIPlayerGameProjection::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAIPlayerGameProjection::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

qint32 OAIPlayerGameProjection::getGameId() const {
    return m_game_id;
}
void OAIPlayerGameProjection::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIPlayerGameProjection::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIPlayerGameProjection::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIPlayerGameProjection::getGames() const {
    return m_games;
}
void OAIPlayerGameProjection::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAIPlayerGameProjection::is_games_Set() const{
    return m_games_isSet;
}

bool OAIPlayerGameProjection::is_games_Valid() const{
    return m_games_isValid;
}

double OAIPlayerGameProjection::getGiveaways() const {
    return m_giveaways;
}
void OAIPlayerGameProjection::setGiveaways(const double &giveaways) {
    m_giveaways = giveaways;
    m_giveaways_isSet = true;
}

bool OAIPlayerGameProjection::is_giveaways_Set() const{
    return m_giveaways_isSet;
}

bool OAIPlayerGameProjection::is_giveaways_Valid() const{
    return m_giveaways_isValid;
}

qint32 OAIPlayerGameProjection::getGlobalGameId() const {
    return m_global_game_id;
}
void OAIPlayerGameProjection::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAIPlayerGameProjection::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAIPlayerGameProjection::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAIPlayerGameProjection::getGlobalOpponentId() const {
    return m_global_opponent_id;
}
void OAIPlayerGameProjection::setGlobalOpponentId(const qint32 &global_opponent_id) {
    m_global_opponent_id = global_opponent_id;
    m_global_opponent_id_isSet = true;
}

bool OAIPlayerGameProjection::is_global_opponent_id_Set() const{
    return m_global_opponent_id_isSet;
}

bool OAIPlayerGameProjection::is_global_opponent_id_Valid() const{
    return m_global_opponent_id_isValid;
}

qint32 OAIPlayerGameProjection::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIPlayerGameProjection::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIPlayerGameProjection::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIPlayerGameProjection::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

double OAIPlayerGameProjection::getGoals() const {
    return m_goals;
}
void OAIPlayerGameProjection::setGoals(const double &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIPlayerGameProjection::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIPlayerGameProjection::is_goals_Valid() const{
    return m_goals_isValid;
}

double OAIPlayerGameProjection::getGoaltendingGoalsAgainst() const {
    return m_goaltending_goals_against;
}
void OAIPlayerGameProjection::setGoaltendingGoalsAgainst(const double &goaltending_goals_against) {
    m_goaltending_goals_against = goaltending_goals_against;
    m_goaltending_goals_against_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_goals_against_Set() const{
    return m_goaltending_goals_against_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_goals_against_Valid() const{
    return m_goaltending_goals_against_isValid;
}

double OAIPlayerGameProjection::getGoaltendingLosses() const {
    return m_goaltending_losses;
}
void OAIPlayerGameProjection::setGoaltendingLosses(const double &goaltending_losses) {
    m_goaltending_losses = goaltending_losses;
    m_goaltending_losses_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_losses_Set() const{
    return m_goaltending_losses_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_losses_Valid() const{
    return m_goaltending_losses_isValid;
}

qint32 OAIPlayerGameProjection::getGoaltendingMinutes() const {
    return m_goaltending_minutes;
}
void OAIPlayerGameProjection::setGoaltendingMinutes(const qint32 &goaltending_minutes) {
    m_goaltending_minutes = goaltending_minutes;
    m_goaltending_minutes_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_minutes_Set() const{
    return m_goaltending_minutes_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_minutes_Valid() const{
    return m_goaltending_minutes_isValid;
}

double OAIPlayerGameProjection::getGoaltendingOvertimeLosses() const {
    return m_goaltending_overtime_losses;
}
void OAIPlayerGameProjection::setGoaltendingOvertimeLosses(const double &goaltending_overtime_losses) {
    m_goaltending_overtime_losses = goaltending_overtime_losses;
    m_goaltending_overtime_losses_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_overtime_losses_Set() const{
    return m_goaltending_overtime_losses_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_overtime_losses_Valid() const{
    return m_goaltending_overtime_losses_isValid;
}

double OAIPlayerGameProjection::getGoaltendingSaves() const {
    return m_goaltending_saves;
}
void OAIPlayerGameProjection::setGoaltendingSaves(const double &goaltending_saves) {
    m_goaltending_saves = goaltending_saves;
    m_goaltending_saves_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_saves_Set() const{
    return m_goaltending_saves_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_saves_Valid() const{
    return m_goaltending_saves_isValid;
}

qint32 OAIPlayerGameProjection::getGoaltendingSeconds() const {
    return m_goaltending_seconds;
}
void OAIPlayerGameProjection::setGoaltendingSeconds(const qint32 &goaltending_seconds) {
    m_goaltending_seconds = goaltending_seconds;
    m_goaltending_seconds_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_seconds_Set() const{
    return m_goaltending_seconds_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_seconds_Valid() const{
    return m_goaltending_seconds_isValid;
}

double OAIPlayerGameProjection::getGoaltendingShotsAgainst() const {
    return m_goaltending_shots_against;
}
void OAIPlayerGameProjection::setGoaltendingShotsAgainst(const double &goaltending_shots_against) {
    m_goaltending_shots_against = goaltending_shots_against;
    m_goaltending_shots_against_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_shots_against_Set() const{
    return m_goaltending_shots_against_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_shots_against_Valid() const{
    return m_goaltending_shots_against_isValid;
}

double OAIPlayerGameProjection::getGoaltendingShutouts() const {
    return m_goaltending_shutouts;
}
void OAIPlayerGameProjection::setGoaltendingShutouts(const double &goaltending_shutouts) {
    m_goaltending_shutouts = goaltending_shutouts;
    m_goaltending_shutouts_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_shutouts_Set() const{
    return m_goaltending_shutouts_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_shutouts_Valid() const{
    return m_goaltending_shutouts_isValid;
}

double OAIPlayerGameProjection::getGoaltendingWins() const {
    return m_goaltending_wins;
}
void OAIPlayerGameProjection::setGoaltendingWins(const double &goaltending_wins) {
    m_goaltending_wins = goaltending_wins;
    m_goaltending_wins_isSet = true;
}

bool OAIPlayerGameProjection::is_goaltending_wins_Set() const{
    return m_goaltending_wins_isSet;
}

bool OAIPlayerGameProjection::is_goaltending_wins_Valid() const{
    return m_goaltending_wins_isValid;
}

double OAIPlayerGameProjection::getHatTricks() const {
    return m_hat_tricks;
}
void OAIPlayerGameProjection::setHatTricks(const double &hat_tricks) {
    m_hat_tricks = hat_tricks;
    m_hat_tricks_isSet = true;
}

bool OAIPlayerGameProjection::is_hat_tricks_Set() const{
    return m_hat_tricks_isSet;
}

bool OAIPlayerGameProjection::is_hat_tricks_Valid() const{
    return m_hat_tricks_isValid;
}

double OAIPlayerGameProjection::getHits() const {
    return m_hits;
}
void OAIPlayerGameProjection::setHits(const double &hits) {
    m_hits = hits;
    m_hits_isSet = true;
}

bool OAIPlayerGameProjection::is_hits_Set() const{
    return m_hits_isSet;
}

bool OAIPlayerGameProjection::is_hits_Valid() const{
    return m_hits_isValid;
}

QString OAIPlayerGameProjection::getHomeOrAway() const {
    return m_home_or_away;
}
void OAIPlayerGameProjection::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAIPlayerGameProjection::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAIPlayerGameProjection::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

QString OAIPlayerGameProjection::getInjuryBodyPart() const {
    return m_injury_body_part;
}
void OAIPlayerGameProjection::setInjuryBodyPart(const QString &injury_body_part) {
    m_injury_body_part = injury_body_part;
    m_injury_body_part_isSet = true;
}

bool OAIPlayerGameProjection::is_injury_body_part_Set() const{
    return m_injury_body_part_isSet;
}

bool OAIPlayerGameProjection::is_injury_body_part_Valid() const{
    return m_injury_body_part_isValid;
}

QString OAIPlayerGameProjection::getInjuryNotes() const {
    return m_injury_notes;
}
void OAIPlayerGameProjection::setInjuryNotes(const QString &injury_notes) {
    m_injury_notes = injury_notes;
    m_injury_notes_isSet = true;
}

bool OAIPlayerGameProjection::is_injury_notes_Set() const{
    return m_injury_notes_isSet;
}

bool OAIPlayerGameProjection::is_injury_notes_Valid() const{
    return m_injury_notes_isValid;
}

QString OAIPlayerGameProjection::getInjuryStartDate() const {
    return m_injury_start_date;
}
void OAIPlayerGameProjection::setInjuryStartDate(const QString &injury_start_date) {
    m_injury_start_date = injury_start_date;
    m_injury_start_date_isSet = true;
}

bool OAIPlayerGameProjection::is_injury_start_date_Set() const{
    return m_injury_start_date_isSet;
}

bool OAIPlayerGameProjection::is_injury_start_date_Valid() const{
    return m_injury_start_date_isValid;
}

QString OAIPlayerGameProjection::getInjuryStatus() const {
    return m_injury_status;
}
void OAIPlayerGameProjection::setInjuryStatus(const QString &injury_status) {
    m_injury_status = injury_status;
    m_injury_status_isSet = true;
}

bool OAIPlayerGameProjection::is_injury_status_Set() const{
    return m_injury_status_isSet;
}

bool OAIPlayerGameProjection::is_injury_status_Valid() const{
    return m_injury_status_isValid;
}

bool OAIPlayerGameProjection::isIsGameOver() const {
    return m_is_game_over;
}
void OAIPlayerGameProjection::setIsGameOver(const bool &is_game_over) {
    m_is_game_over = is_game_over;
    m_is_game_over_isSet = true;
}

bool OAIPlayerGameProjection::is_is_game_over_Set() const{
    return m_is_game_over_isSet;
}

bool OAIPlayerGameProjection::is_is_game_over_Valid() const{
    return m_is_game_over_isValid;
}

qint32 OAIPlayerGameProjection::getMinutes() const {
    return m_minutes;
}
void OAIPlayerGameProjection::setMinutes(const qint32 &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIPlayerGameProjection::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIPlayerGameProjection::is_minutes_Valid() const{
    return m_minutes_isValid;
}

QString OAIPlayerGameProjection::getName() const {
    return m_name;
}
void OAIPlayerGameProjection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerGameProjection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerGameProjection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlayerGameProjection::getOpponent() const {
    return m_opponent;
}
void OAIPlayerGameProjection::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIPlayerGameProjection::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIPlayerGameProjection::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIPlayerGameProjection::getOpponentId() const {
    return m_opponent_id;
}
void OAIPlayerGameProjection::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAIPlayerGameProjection::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAIPlayerGameProjection::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

qint32 OAIPlayerGameProjection::getOpponentPositionRank() const {
    return m_opponent_position_rank;
}
void OAIPlayerGameProjection::setOpponentPositionRank(const qint32 &opponent_position_rank) {
    m_opponent_position_rank = opponent_position_rank;
    m_opponent_position_rank_isSet = true;
}

bool OAIPlayerGameProjection::is_opponent_position_rank_Set() const{
    return m_opponent_position_rank_isSet;
}

bool OAIPlayerGameProjection::is_opponent_position_rank_Valid() const{
    return m_opponent_position_rank_isValid;
}

qint32 OAIPlayerGameProjection::getOpponentRank() const {
    return m_opponent_rank;
}
void OAIPlayerGameProjection::setOpponentRank(const qint32 &opponent_rank) {
    m_opponent_rank = opponent_rank;
    m_opponent_rank_isSet = true;
}

bool OAIPlayerGameProjection::is_opponent_rank_Set() const{
    return m_opponent_rank_isSet;
}

bool OAIPlayerGameProjection::is_opponent_rank_Valid() const{
    return m_opponent_rank_isValid;
}

double OAIPlayerGameProjection::getPenaltyMinutes() const {
    return m_penalty_minutes;
}
void OAIPlayerGameProjection::setPenaltyMinutes(const double &penalty_minutes) {
    m_penalty_minutes = penalty_minutes;
    m_penalty_minutes_isSet = true;
}

bool OAIPlayerGameProjection::is_penalty_minutes_Set() const{
    return m_penalty_minutes_isSet;
}

bool OAIPlayerGameProjection::is_penalty_minutes_Valid() const{
    return m_penalty_minutes_isValid;
}

qint32 OAIPlayerGameProjection::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerGameProjection::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerGameProjection::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerGameProjection::is_player_id_Valid() const{
    return m_player_id_isValid;
}

double OAIPlayerGameProjection::getPlusMinus() const {
    return m_plus_minus;
}
void OAIPlayerGameProjection::setPlusMinus(const double &plus_minus) {
    m_plus_minus = plus_minus;
    m_plus_minus_isSet = true;
}

bool OAIPlayerGameProjection::is_plus_minus_Set() const{
    return m_plus_minus_isSet;
}

bool OAIPlayerGameProjection::is_plus_minus_Valid() const{
    return m_plus_minus_isValid;
}

QString OAIPlayerGameProjection::getPosition() const {
    return m_position;
}
void OAIPlayerGameProjection::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerGameProjection::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerGameProjection::is_position_Valid() const{
    return m_position_isValid;
}

double OAIPlayerGameProjection::getPowerPlayAssists() const {
    return m_power_play_assists;
}
void OAIPlayerGameProjection::setPowerPlayAssists(const double &power_play_assists) {
    m_power_play_assists = power_play_assists;
    m_power_play_assists_isSet = true;
}

bool OAIPlayerGameProjection::is_power_play_assists_Set() const{
    return m_power_play_assists_isSet;
}

bool OAIPlayerGameProjection::is_power_play_assists_Valid() const{
    return m_power_play_assists_isValid;
}

double OAIPlayerGameProjection::getPowerPlayGoals() const {
    return m_power_play_goals;
}
void OAIPlayerGameProjection::setPowerPlayGoals(const double &power_play_goals) {
    m_power_play_goals = power_play_goals;
    m_power_play_goals_isSet = true;
}

bool OAIPlayerGameProjection::is_power_play_goals_Set() const{
    return m_power_play_goals_isSet;
}

bool OAIPlayerGameProjection::is_power_play_goals_Valid() const{
    return m_power_play_goals_isValid;
}

qint32 OAIPlayerGameProjection::getSeason() const {
    return m_season;
}
void OAIPlayerGameProjection::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayerGameProjection::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayerGameProjection::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIPlayerGameProjection::getSeasonType() const {
    return m_season_type;
}
void OAIPlayerGameProjection::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIPlayerGameProjection::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIPlayerGameProjection::is_season_type_Valid() const{
    return m_season_type_isValid;
}

qint32 OAIPlayerGameProjection::getSeconds() const {
    return m_seconds;
}
void OAIPlayerGameProjection::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAIPlayerGameProjection::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAIPlayerGameProjection::is_seconds_Valid() const{
    return m_seconds_isValid;
}

double OAIPlayerGameProjection::getShifts() const {
    return m_shifts;
}
void OAIPlayerGameProjection::setShifts(const double &shifts) {
    m_shifts = shifts;
    m_shifts_isSet = true;
}

bool OAIPlayerGameProjection::is_shifts_Set() const{
    return m_shifts_isSet;
}

bool OAIPlayerGameProjection::is_shifts_Valid() const{
    return m_shifts_isValid;
}

double OAIPlayerGameProjection::getShootoutGoals() const {
    return m_shootout_goals;
}
void OAIPlayerGameProjection::setShootoutGoals(const double &shootout_goals) {
    m_shootout_goals = shootout_goals;
    m_shootout_goals_isSet = true;
}

bool OAIPlayerGameProjection::is_shootout_goals_Set() const{
    return m_shootout_goals_isSet;
}

bool OAIPlayerGameProjection::is_shootout_goals_Valid() const{
    return m_shootout_goals_isValid;
}

double OAIPlayerGameProjection::getShortHandedAssists() const {
    return m_short_handed_assists;
}
void OAIPlayerGameProjection::setShortHandedAssists(const double &short_handed_assists) {
    m_short_handed_assists = short_handed_assists;
    m_short_handed_assists_isSet = true;
}

bool OAIPlayerGameProjection::is_short_handed_assists_Set() const{
    return m_short_handed_assists_isSet;
}

bool OAIPlayerGameProjection::is_short_handed_assists_Valid() const{
    return m_short_handed_assists_isValid;
}

double OAIPlayerGameProjection::getShortHandedGoals() const {
    return m_short_handed_goals;
}
void OAIPlayerGameProjection::setShortHandedGoals(const double &short_handed_goals) {
    m_short_handed_goals = short_handed_goals;
    m_short_handed_goals_isSet = true;
}

bool OAIPlayerGameProjection::is_short_handed_goals_Set() const{
    return m_short_handed_goals_isSet;
}

bool OAIPlayerGameProjection::is_short_handed_goals_Valid() const{
    return m_short_handed_goals_isValid;
}

double OAIPlayerGameProjection::getShotsOnGoal() const {
    return m_shots_on_goal;
}
void OAIPlayerGameProjection::setShotsOnGoal(const double &shots_on_goal) {
    m_shots_on_goal = shots_on_goal;
    m_shots_on_goal_isSet = true;
}

bool OAIPlayerGameProjection::is_shots_on_goal_Set() const{
    return m_shots_on_goal_isSet;
}

bool OAIPlayerGameProjection::is_shots_on_goal_Valid() const{
    return m_shots_on_goal_isValid;
}

qint32 OAIPlayerGameProjection::getStarted() const {
    return m_started;
}
void OAIPlayerGameProjection::setStarted(const qint32 &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIPlayerGameProjection::is_started_Set() const{
    return m_started_isSet;
}

bool OAIPlayerGameProjection::is_started_Valid() const{
    return m_started_isValid;
}

qint32 OAIPlayerGameProjection::getStatId() const {
    return m_stat_id;
}
void OAIPlayerGameProjection::setStatId(const qint32 &stat_id) {
    m_stat_id = stat_id;
    m_stat_id_isSet = true;
}

bool OAIPlayerGameProjection::is_stat_id_Set() const{
    return m_stat_id_isSet;
}

bool OAIPlayerGameProjection::is_stat_id_Valid() const{
    return m_stat_id_isValid;
}

double OAIPlayerGameProjection::getTakeaways() const {
    return m_takeaways;
}
void OAIPlayerGameProjection::setTakeaways(const double &takeaways) {
    m_takeaways = takeaways;
    m_takeaways_isSet = true;
}

bool OAIPlayerGameProjection::is_takeaways_Set() const{
    return m_takeaways_isSet;
}

bool OAIPlayerGameProjection::is_takeaways_Valid() const{
    return m_takeaways_isValid;
}

QString OAIPlayerGameProjection::getTeam() const {
    return m_team;
}
void OAIPlayerGameProjection::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerGameProjection::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerGameProjection::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayerGameProjection::getTeamId() const {
    return m_team_id;
}
void OAIPlayerGameProjection::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayerGameProjection::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayerGameProjection::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIPlayerGameProjection::getUpdated() const {
    return m_updated;
}
void OAIPlayerGameProjection::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlayerGameProjection::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlayerGameProjection::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIPlayerGameProjection::getYahooPosition() const {
    return m_yahoo_position;
}
void OAIPlayerGameProjection::setYahooPosition(const QString &yahoo_position) {
    m_yahoo_position = yahoo_position;
    m_yahoo_position_isSet = true;
}

bool OAIPlayerGameProjection::is_yahoo_position_Set() const{
    return m_yahoo_position_isSet;
}

bool OAIPlayerGameProjection::is_yahoo_position_Valid() const{
    return m_yahoo_position_isValid;
}

qint32 OAIPlayerGameProjection::getYahooSalary() const {
    return m_yahoo_salary;
}
void OAIPlayerGameProjection::setYahooSalary(const qint32 &yahoo_salary) {
    m_yahoo_salary = yahoo_salary;
    m_yahoo_salary_isSet = true;
}

bool OAIPlayerGameProjection::is_yahoo_salary_Set() const{
    return m_yahoo_salary_isSet;
}

bool OAIPlayerGameProjection::is_yahoo_salary_Valid() const{
    return m_yahoo_salary_isValid;
}

bool OAIPlayerGameProjection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bench_penalty_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_net_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faceoffs_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faceoffs_won_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_data_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fantasy_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_giveaways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_goals_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_overtime_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_saves_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_shots_against_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_shutouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goaltending_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hat_tricks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_game_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_position_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penalty_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plus_minus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_play_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_play_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shifts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shootout_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_handed_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_handed_goals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shots_on_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_takeaways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_salary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerGameProjection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
