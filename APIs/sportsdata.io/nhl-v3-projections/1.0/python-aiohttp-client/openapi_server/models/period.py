# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.penalty import Penalty
from openapi_server.models.scoring_play import ScoringPlay
from openapi_server import util


class Period(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, away_score: int=None, game_id: int=None, home_score: int=None, name: str=None, penalties: List[Penalty]=None, period_id: int=None, scoring_plays: List[ScoringPlay]=None):
        """Period - a model defined in OpenAPI

        :param away_score: The away_score of this Period.
        :param game_id: The game_id of this Period.
        :param home_score: The home_score of this Period.
        :param name: The name of this Period.
        :param penalties: The penalties of this Period.
        :param period_id: The period_id of this Period.
        :param scoring_plays: The scoring_plays of this Period.
        """
        self.openapi_types = {
            'away_score': int,
            'game_id': int,
            'home_score': int,
            'name': str,
            'penalties': List[Penalty],
            'period_id': int,
            'scoring_plays': List[ScoringPlay]
        }

        self.attribute_map = {
            'away_score': 'AwayScore',
            'game_id': 'GameID',
            'home_score': 'HomeScore',
            'name': 'Name',
            'penalties': 'Penalties',
            'period_id': 'PeriodID',
            'scoring_plays': 'ScoringPlays'
        }

        self._away_score = away_score
        self._game_id = game_id
        self._home_score = home_score
        self._name = name
        self._penalties = penalties
        self._period_id = period_id
        self._scoring_plays = scoring_plays

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Period':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Period of this Period.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def away_score(self):
        """Gets the away_score of this Period.


        :return: The away_score of this Period.
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this Period.


        :param away_score: The away_score of this Period.
        :type away_score: int
        """

        self._away_score = away_score

    @property
    def game_id(self):
        """Gets the game_id of this Period.


        :return: The game_id of this Period.
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this Period.


        :param game_id: The game_id of this Period.
        :type game_id: int
        """

        self._game_id = game_id

    @property
    def home_score(self):
        """Gets the home_score of this Period.


        :return: The home_score of this Period.
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this Period.


        :param home_score: The home_score of this Period.
        :type home_score: int
        """

        self._home_score = home_score

    @property
    def name(self):
        """Gets the name of this Period.


        :return: The name of this Period.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Period.


        :param name: The name of this Period.
        :type name: str
        """

        self._name = name

    @property
    def penalties(self):
        """Gets the penalties of this Period.


        :return: The penalties of this Period.
        :rtype: List[Penalty]
        """
        return self._penalties

    @penalties.setter
    def penalties(self, penalties):
        """Sets the penalties of this Period.


        :param penalties: The penalties of this Period.
        :type penalties: List[Penalty]
        """

        self._penalties = penalties

    @property
    def period_id(self):
        """Gets the period_id of this Period.


        :return: The period_id of this Period.
        :rtype: int
        """
        return self._period_id

    @period_id.setter
    def period_id(self, period_id):
        """Sets the period_id of this Period.


        :param period_id: The period_id of this Period.
        :type period_id: int
        """

        self._period_id = period_id

    @property
    def scoring_plays(self):
        """Gets the scoring_plays of this Period.


        :return: The scoring_plays of this Period.
        :rtype: List[ScoringPlay]
        """
        return self._scoring_plays

    @scoring_plays.setter
    def scoring_plays(self, scoring_plays):
        """Sets the scoring_plays of this Period.


        :param scoring_plays: The scoring_plays of this Period.
        :type scoring_plays: List[ScoringPlay]
        """

        self._scoring_plays = scoring_plays
