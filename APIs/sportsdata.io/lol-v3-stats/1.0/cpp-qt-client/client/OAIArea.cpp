/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArea::OAIArea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArea::OAIArea() {
    this->initializeModel();
}

OAIArea::~OAIArea() {}

void OAIArea::initializeModel() {

    m_area_id_isSet = false;
    m_area_id_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIArea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArea::fromJsonObject(QJsonObject json) {

    m_area_id_isValid = ::OpenAPI::fromJsonValue(m_area_id, json[QString("AreaId")]);
    m_area_id_isSet = !json[QString("AreaId")].isNull() && m_area_id_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIArea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArea::asJsonObject() const {
    QJsonObject obj;
    if (m_area_id_isSet) {
        obj.insert(QString("AreaId"), ::OpenAPI::toJsonValue(m_area_id));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIArea::getAreaId() const {
    return m_area_id;
}
void OAIArea::setAreaId(const qint32 &area_id) {
    m_area_id = area_id;
    m_area_id_isSet = true;
}

bool OAIArea::is_area_id_Set() const{
    return m_area_id_isSet;
}

bool OAIArea::is_area_id_Valid() const{
    return m_area_id_isValid;
}

QString OAIArea::getCountryCode() const {
    return m_country_code;
}
void OAIArea::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIArea::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIArea::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIArea::getName() const {
    return m_name;
}
void OAIArea::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArea::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArea::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIArea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArea::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
