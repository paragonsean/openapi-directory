/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChampion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChampion::OAIChampion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChampion::OAIChampion() {
    this->initializeModel();
}

OAIChampion::~OAIChampion() {}

void OAIChampion::initializeModel() {

    m_armor_isSet = false;
    m_armor_isValid = false;

    m_armor_per_level_isSet = false;
    m_armor_per_level_isValid = false;

    m_attack_isSet = false;
    m_attack_isValid = false;

    m_attack_damage_isSet = false;
    m_attack_damage_isValid = false;

    m_attack_damage_per_level_isSet = false;
    m_attack_damage_per_level_isValid = false;

    m_attack_range_isSet = false;
    m_attack_range_isValid = false;

    m_attack_speed_offset_isSet = false;
    m_attack_speed_offset_isValid = false;

    m_champion_id_isSet = false;
    m_champion_id_isValid = false;

    m_defense_isSet = false;
    m_defense_isValid = false;

    m_difficulty_isSet = false;
    m_difficulty_isValid = false;

    m_hp_isSet = false;
    m_hp_isValid = false;

    m_hp_regen_isSet = false;
    m_hp_regen_isValid = false;

    m_hp_regen_per_level_isSet = false;
    m_hp_regen_per_level_isValid = false;

    m_hp_up_per_level_isSet = false;
    m_hp_up_per_level_isValid = false;

    m_magic_isSet = false;
    m_magic_isValid = false;

    m_move_speed_isSet = false;
    m_move_speed_isValid = false;

    m_mp_isSet = false;
    m_mp_isValid = false;

    m_mp_regen_isSet = false;
    m_mp_regen_isValid = false;

    m_mp_regen_per_level_isSet = false;
    m_mp_regen_per_level_isValid = false;

    m_mp_up_per_level_isSet = false;
    m_mp_up_per_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_spell_block_isSet = false;
    m_spell_block_isValid = false;

    m_spell_block_per_level_isSet = false;
    m_spell_block_per_level_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIChampion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChampion::fromJsonObject(QJsonObject json) {

    m_armor_isValid = ::OpenAPI::fromJsonValue(m_armor, json[QString("Armor")]);
    m_armor_isSet = !json[QString("Armor")].isNull() && m_armor_isValid;

    m_armor_per_level_isValid = ::OpenAPI::fromJsonValue(m_armor_per_level, json[QString("ArmorPerLevel")]);
    m_armor_per_level_isSet = !json[QString("ArmorPerLevel")].isNull() && m_armor_per_level_isValid;

    m_attack_isValid = ::OpenAPI::fromJsonValue(m_attack, json[QString("Attack")]);
    m_attack_isSet = !json[QString("Attack")].isNull() && m_attack_isValid;

    m_attack_damage_isValid = ::OpenAPI::fromJsonValue(m_attack_damage, json[QString("AttackDamage")]);
    m_attack_damage_isSet = !json[QString("AttackDamage")].isNull() && m_attack_damage_isValid;

    m_attack_damage_per_level_isValid = ::OpenAPI::fromJsonValue(m_attack_damage_per_level, json[QString("AttackDamagePerLevel")]);
    m_attack_damage_per_level_isSet = !json[QString("AttackDamagePerLevel")].isNull() && m_attack_damage_per_level_isValid;

    m_attack_range_isValid = ::OpenAPI::fromJsonValue(m_attack_range, json[QString("AttackRange")]);
    m_attack_range_isSet = !json[QString("AttackRange")].isNull() && m_attack_range_isValid;

    m_attack_speed_offset_isValid = ::OpenAPI::fromJsonValue(m_attack_speed_offset, json[QString("AttackSpeedOffset")]);
    m_attack_speed_offset_isSet = !json[QString("AttackSpeedOffset")].isNull() && m_attack_speed_offset_isValid;

    m_champion_id_isValid = ::OpenAPI::fromJsonValue(m_champion_id, json[QString("ChampionId")]);
    m_champion_id_isSet = !json[QString("ChampionId")].isNull() && m_champion_id_isValid;

    m_defense_isValid = ::OpenAPI::fromJsonValue(m_defense, json[QString("Defense")]);
    m_defense_isSet = !json[QString("Defense")].isNull() && m_defense_isValid;

    m_difficulty_isValid = ::OpenAPI::fromJsonValue(m_difficulty, json[QString("Difficulty")]);
    m_difficulty_isSet = !json[QString("Difficulty")].isNull() && m_difficulty_isValid;

    m_hp_isValid = ::OpenAPI::fromJsonValue(m_hp, json[QString("Hp")]);
    m_hp_isSet = !json[QString("Hp")].isNull() && m_hp_isValid;

    m_hp_regen_isValid = ::OpenAPI::fromJsonValue(m_hp_regen, json[QString("HpRegen")]);
    m_hp_regen_isSet = !json[QString("HpRegen")].isNull() && m_hp_regen_isValid;

    m_hp_regen_per_level_isValid = ::OpenAPI::fromJsonValue(m_hp_regen_per_level, json[QString("HpRegenPerLevel")]);
    m_hp_regen_per_level_isSet = !json[QString("HpRegenPerLevel")].isNull() && m_hp_regen_per_level_isValid;

    m_hp_up_per_level_isValid = ::OpenAPI::fromJsonValue(m_hp_up_per_level, json[QString("HpUpPerLevel")]);
    m_hp_up_per_level_isSet = !json[QString("HpUpPerLevel")].isNull() && m_hp_up_per_level_isValid;

    m_magic_isValid = ::OpenAPI::fromJsonValue(m_magic, json[QString("Magic")]);
    m_magic_isSet = !json[QString("Magic")].isNull() && m_magic_isValid;

    m_move_speed_isValid = ::OpenAPI::fromJsonValue(m_move_speed, json[QString("MoveSpeed")]);
    m_move_speed_isSet = !json[QString("MoveSpeed")].isNull() && m_move_speed_isValid;

    m_mp_isValid = ::OpenAPI::fromJsonValue(m_mp, json[QString("Mp")]);
    m_mp_isSet = !json[QString("Mp")].isNull() && m_mp_isValid;

    m_mp_regen_isValid = ::OpenAPI::fromJsonValue(m_mp_regen, json[QString("MpRegen")]);
    m_mp_regen_isSet = !json[QString("MpRegen")].isNull() && m_mp_regen_isValid;

    m_mp_regen_per_level_isValid = ::OpenAPI::fromJsonValue(m_mp_regen_per_level, json[QString("MpRegenPerLevel")]);
    m_mp_regen_per_level_isSet = !json[QString("MpRegenPerLevel")].isNull() && m_mp_regen_per_level_isValid;

    m_mp_up_per_level_isValid = ::OpenAPI::fromJsonValue(m_mp_up_per_level, json[QString("MpUpPerLevel")]);
    m_mp_up_per_level_isSet = !json[QString("MpUpPerLevel")].isNull() && m_mp_up_per_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_spell_block_isValid = ::OpenAPI::fromJsonValue(m_spell_block, json[QString("SpellBlock")]);
    m_spell_block_isSet = !json[QString("SpellBlock")].isNull() && m_spell_block_isValid;

    m_spell_block_per_level_isValid = ::OpenAPI::fromJsonValue(m_spell_block_per_level, json[QString("SpellBlockPerLevel")]);
    m_spell_block_per_level_isSet = !json[QString("SpellBlockPerLevel")].isNull() && m_spell_block_per_level_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAIChampion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChampion::asJsonObject() const {
    QJsonObject obj;
    if (m_armor_isSet) {
        obj.insert(QString("Armor"), ::OpenAPI::toJsonValue(m_armor));
    }
    if (m_armor_per_level_isSet) {
        obj.insert(QString("ArmorPerLevel"), ::OpenAPI::toJsonValue(m_armor_per_level));
    }
    if (m_attack_isSet) {
        obj.insert(QString("Attack"), ::OpenAPI::toJsonValue(m_attack));
    }
    if (m_attack_damage_isSet) {
        obj.insert(QString("AttackDamage"), ::OpenAPI::toJsonValue(m_attack_damage));
    }
    if (m_attack_damage_per_level_isSet) {
        obj.insert(QString("AttackDamagePerLevel"), ::OpenAPI::toJsonValue(m_attack_damage_per_level));
    }
    if (m_attack_range_isSet) {
        obj.insert(QString("AttackRange"), ::OpenAPI::toJsonValue(m_attack_range));
    }
    if (m_attack_speed_offset_isSet) {
        obj.insert(QString("AttackSpeedOffset"), ::OpenAPI::toJsonValue(m_attack_speed_offset));
    }
    if (m_champion_id_isSet) {
        obj.insert(QString("ChampionId"), ::OpenAPI::toJsonValue(m_champion_id));
    }
    if (m_defense_isSet) {
        obj.insert(QString("Defense"), ::OpenAPI::toJsonValue(m_defense));
    }
    if (m_difficulty_isSet) {
        obj.insert(QString("Difficulty"), ::OpenAPI::toJsonValue(m_difficulty));
    }
    if (m_hp_isSet) {
        obj.insert(QString("Hp"), ::OpenAPI::toJsonValue(m_hp));
    }
    if (m_hp_regen_isSet) {
        obj.insert(QString("HpRegen"), ::OpenAPI::toJsonValue(m_hp_regen));
    }
    if (m_hp_regen_per_level_isSet) {
        obj.insert(QString("HpRegenPerLevel"), ::OpenAPI::toJsonValue(m_hp_regen_per_level));
    }
    if (m_hp_up_per_level_isSet) {
        obj.insert(QString("HpUpPerLevel"), ::OpenAPI::toJsonValue(m_hp_up_per_level));
    }
    if (m_magic_isSet) {
        obj.insert(QString("Magic"), ::OpenAPI::toJsonValue(m_magic));
    }
    if (m_move_speed_isSet) {
        obj.insert(QString("MoveSpeed"), ::OpenAPI::toJsonValue(m_move_speed));
    }
    if (m_mp_isSet) {
        obj.insert(QString("Mp"), ::OpenAPI::toJsonValue(m_mp));
    }
    if (m_mp_regen_isSet) {
        obj.insert(QString("MpRegen"), ::OpenAPI::toJsonValue(m_mp_regen));
    }
    if (m_mp_regen_per_level_isSet) {
        obj.insert(QString("MpRegenPerLevel"), ::OpenAPI::toJsonValue(m_mp_regen_per_level));
    }
    if (m_mp_up_per_level_isSet) {
        obj.insert(QString("MpUpPerLevel"), ::OpenAPI::toJsonValue(m_mp_up_per_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_spell_block_isSet) {
        obj.insert(QString("SpellBlock"), ::OpenAPI::toJsonValue(m_spell_block));
    }
    if (m_spell_block_per_level_isSet) {
        obj.insert(QString("SpellBlockPerLevel"), ::OpenAPI::toJsonValue(m_spell_block_per_level));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

double OAIChampion::getArmor() const {
    return m_armor;
}
void OAIChampion::setArmor(const double &armor) {
    m_armor = armor;
    m_armor_isSet = true;
}

bool OAIChampion::is_armor_Set() const{
    return m_armor_isSet;
}

bool OAIChampion::is_armor_Valid() const{
    return m_armor_isValid;
}

double OAIChampion::getArmorPerLevel() const {
    return m_armor_per_level;
}
void OAIChampion::setArmorPerLevel(const double &armor_per_level) {
    m_armor_per_level = armor_per_level;
    m_armor_per_level_isSet = true;
}

bool OAIChampion::is_armor_per_level_Set() const{
    return m_armor_per_level_isSet;
}

bool OAIChampion::is_armor_per_level_Valid() const{
    return m_armor_per_level_isValid;
}

double OAIChampion::getAttack() const {
    return m_attack;
}
void OAIChampion::setAttack(const double &attack) {
    m_attack = attack;
    m_attack_isSet = true;
}

bool OAIChampion::is_attack_Set() const{
    return m_attack_isSet;
}

bool OAIChampion::is_attack_Valid() const{
    return m_attack_isValid;
}

double OAIChampion::getAttackDamage() const {
    return m_attack_damage;
}
void OAIChampion::setAttackDamage(const double &attack_damage) {
    m_attack_damage = attack_damage;
    m_attack_damage_isSet = true;
}

bool OAIChampion::is_attack_damage_Set() const{
    return m_attack_damage_isSet;
}

bool OAIChampion::is_attack_damage_Valid() const{
    return m_attack_damage_isValid;
}

double OAIChampion::getAttackDamagePerLevel() const {
    return m_attack_damage_per_level;
}
void OAIChampion::setAttackDamagePerLevel(const double &attack_damage_per_level) {
    m_attack_damage_per_level = attack_damage_per_level;
    m_attack_damage_per_level_isSet = true;
}

bool OAIChampion::is_attack_damage_per_level_Set() const{
    return m_attack_damage_per_level_isSet;
}

bool OAIChampion::is_attack_damage_per_level_Valid() const{
    return m_attack_damage_per_level_isValid;
}

double OAIChampion::getAttackRange() const {
    return m_attack_range;
}
void OAIChampion::setAttackRange(const double &attack_range) {
    m_attack_range = attack_range;
    m_attack_range_isSet = true;
}

bool OAIChampion::is_attack_range_Set() const{
    return m_attack_range_isSet;
}

bool OAIChampion::is_attack_range_Valid() const{
    return m_attack_range_isValid;
}

double OAIChampion::getAttackSpeedOffset() const {
    return m_attack_speed_offset;
}
void OAIChampion::setAttackSpeedOffset(const double &attack_speed_offset) {
    m_attack_speed_offset = attack_speed_offset;
    m_attack_speed_offset_isSet = true;
}

bool OAIChampion::is_attack_speed_offset_Set() const{
    return m_attack_speed_offset_isSet;
}

bool OAIChampion::is_attack_speed_offset_Valid() const{
    return m_attack_speed_offset_isValid;
}

qint32 OAIChampion::getChampionId() const {
    return m_champion_id;
}
void OAIChampion::setChampionId(const qint32 &champion_id) {
    m_champion_id = champion_id;
    m_champion_id_isSet = true;
}

bool OAIChampion::is_champion_id_Set() const{
    return m_champion_id_isSet;
}

bool OAIChampion::is_champion_id_Valid() const{
    return m_champion_id_isValid;
}

double OAIChampion::getDefense() const {
    return m_defense;
}
void OAIChampion::setDefense(const double &defense) {
    m_defense = defense;
    m_defense_isSet = true;
}

bool OAIChampion::is_defense_Set() const{
    return m_defense_isSet;
}

bool OAIChampion::is_defense_Valid() const{
    return m_defense_isValid;
}

double OAIChampion::getDifficulty() const {
    return m_difficulty;
}
void OAIChampion::setDifficulty(const double &difficulty) {
    m_difficulty = difficulty;
    m_difficulty_isSet = true;
}

bool OAIChampion::is_difficulty_Set() const{
    return m_difficulty_isSet;
}

bool OAIChampion::is_difficulty_Valid() const{
    return m_difficulty_isValid;
}

double OAIChampion::getHp() const {
    return m_hp;
}
void OAIChampion::setHp(const double &hp) {
    m_hp = hp;
    m_hp_isSet = true;
}

bool OAIChampion::is_hp_Set() const{
    return m_hp_isSet;
}

bool OAIChampion::is_hp_Valid() const{
    return m_hp_isValid;
}

double OAIChampion::getHpRegen() const {
    return m_hp_regen;
}
void OAIChampion::setHpRegen(const double &hp_regen) {
    m_hp_regen = hp_regen;
    m_hp_regen_isSet = true;
}

bool OAIChampion::is_hp_regen_Set() const{
    return m_hp_regen_isSet;
}

bool OAIChampion::is_hp_regen_Valid() const{
    return m_hp_regen_isValid;
}

double OAIChampion::getHpRegenPerLevel() const {
    return m_hp_regen_per_level;
}
void OAIChampion::setHpRegenPerLevel(const double &hp_regen_per_level) {
    m_hp_regen_per_level = hp_regen_per_level;
    m_hp_regen_per_level_isSet = true;
}

bool OAIChampion::is_hp_regen_per_level_Set() const{
    return m_hp_regen_per_level_isSet;
}

bool OAIChampion::is_hp_regen_per_level_Valid() const{
    return m_hp_regen_per_level_isValid;
}

double OAIChampion::getHpUpPerLevel() const {
    return m_hp_up_per_level;
}
void OAIChampion::setHpUpPerLevel(const double &hp_up_per_level) {
    m_hp_up_per_level = hp_up_per_level;
    m_hp_up_per_level_isSet = true;
}

bool OAIChampion::is_hp_up_per_level_Set() const{
    return m_hp_up_per_level_isSet;
}

bool OAIChampion::is_hp_up_per_level_Valid() const{
    return m_hp_up_per_level_isValid;
}

double OAIChampion::getMagic() const {
    return m_magic;
}
void OAIChampion::setMagic(const double &magic) {
    m_magic = magic;
    m_magic_isSet = true;
}

bool OAIChampion::is_magic_Set() const{
    return m_magic_isSet;
}

bool OAIChampion::is_magic_Valid() const{
    return m_magic_isValid;
}

double OAIChampion::getMoveSpeed() const {
    return m_move_speed;
}
void OAIChampion::setMoveSpeed(const double &move_speed) {
    m_move_speed = move_speed;
    m_move_speed_isSet = true;
}

bool OAIChampion::is_move_speed_Set() const{
    return m_move_speed_isSet;
}

bool OAIChampion::is_move_speed_Valid() const{
    return m_move_speed_isValid;
}

double OAIChampion::getMp() const {
    return m_mp;
}
void OAIChampion::setMp(const double &mp) {
    m_mp = mp;
    m_mp_isSet = true;
}

bool OAIChampion::is_mp_Set() const{
    return m_mp_isSet;
}

bool OAIChampion::is_mp_Valid() const{
    return m_mp_isValid;
}

double OAIChampion::getMpRegen() const {
    return m_mp_regen;
}
void OAIChampion::setMpRegen(const double &mp_regen) {
    m_mp_regen = mp_regen;
    m_mp_regen_isSet = true;
}

bool OAIChampion::is_mp_regen_Set() const{
    return m_mp_regen_isSet;
}

bool OAIChampion::is_mp_regen_Valid() const{
    return m_mp_regen_isValid;
}

double OAIChampion::getMpRegenPerLevel() const {
    return m_mp_regen_per_level;
}
void OAIChampion::setMpRegenPerLevel(const double &mp_regen_per_level) {
    m_mp_regen_per_level = mp_regen_per_level;
    m_mp_regen_per_level_isSet = true;
}

bool OAIChampion::is_mp_regen_per_level_Set() const{
    return m_mp_regen_per_level_isSet;
}

bool OAIChampion::is_mp_regen_per_level_Valid() const{
    return m_mp_regen_per_level_isValid;
}

double OAIChampion::getMpUpPerLevel() const {
    return m_mp_up_per_level;
}
void OAIChampion::setMpUpPerLevel(const double &mp_up_per_level) {
    m_mp_up_per_level = mp_up_per_level;
    m_mp_up_per_level_isSet = true;
}

bool OAIChampion::is_mp_up_per_level_Set() const{
    return m_mp_up_per_level_isSet;
}

bool OAIChampion::is_mp_up_per_level_Valid() const{
    return m_mp_up_per_level_isValid;
}

QString OAIChampion::getName() const {
    return m_name;
}
void OAIChampion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChampion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChampion::is_name_Valid() const{
    return m_name_isValid;
}

double OAIChampion::getSpellBlock() const {
    return m_spell_block;
}
void OAIChampion::setSpellBlock(const double &spell_block) {
    m_spell_block = spell_block;
    m_spell_block_isSet = true;
}

bool OAIChampion::is_spell_block_Set() const{
    return m_spell_block_isSet;
}

bool OAIChampion::is_spell_block_Valid() const{
    return m_spell_block_isValid;
}

double OAIChampion::getSpellBlockPerLevel() const {
    return m_spell_block_per_level;
}
void OAIChampion::setSpellBlockPerLevel(const double &spell_block_per_level) {
    m_spell_block_per_level = spell_block_per_level;
    m_spell_block_per_level_isSet = true;
}

bool OAIChampion::is_spell_block_per_level_Set() const{
    return m_spell_block_per_level_isSet;
}

bool OAIChampion::is_spell_block_per_level_Valid() const{
    return m_spell_block_per_level_isValid;
}

QString OAIChampion::getTitle() const {
    return m_title;
}
void OAIChampion::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIChampion::is_title_Set() const{
    return m_title_isSet;
}

bool OAIChampion::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIChampion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_armor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_armor_per_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_damage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_damage_per_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_speed_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_champion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difficulty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hp_regen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hp_regen_per_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hp_up_per_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp_regen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp_regen_per_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp_up_per_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_block_per_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChampion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
