/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITeamMatch.h
 *
 * 
 */

#ifndef OAITeamMatch_H
#define OAITeamMatch_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITeamMatch : public OAIObject {
public:
    OAITeamMatch();
    OAITeamMatch(QString json);
    ~OAITeamMatch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAssists() const;
    void setAssists(const double &assists);
    bool is_assists_Set() const;
    bool is_assists_Valid() const;

    double getCombatPlayerScore() const;
    void setCombatPlayerScore(const double &combat_player_score);
    bool is_combat_player_score_Set() const;
    bool is_combat_player_score_Valid() const;

    QString getDateTime() const;
    void setDateTime(const QString &date_time);
    bool is_date_time_Set() const;
    bool is_date_time_Valid() const;

    QString getDay() const;
    void setDay(const QString &day);
    bool is_day_Set() const;
    bool is_day_Valid() const;

    double getDeaths() const;
    void setDeaths(const double &deaths);
    bool is_deaths_Set() const;
    bool is_deaths_Valid() const;

    double getDoubleKills() const;
    void setDoubleKills(const double &double_kills);
    bool is_double_kills_Set() const;
    bool is_double_kills_Valid() const;

    double getFantasyPoints() const;
    void setFantasyPoints(const double &fantasy_points);
    bool is_fantasy_points_Set() const;
    bool is_fantasy_points_Valid() const;

    double getFirstBaron() const;
    void setFirstBaron(const double &first_baron);
    bool is_first_baron_Set() const;
    bool is_first_baron_Valid() const;

    double getFirstBlood() const;
    void setFirstBlood(const double &first_blood);
    bool is_first_blood_Set() const;
    bool is_first_blood_Valid() const;

    double getFirstDragon() const;
    void setFirstDragon(const double &first_dragon);
    bool is_first_dragon_Set() const;
    bool is_first_dragon_Valid() const;

    double getFirstInhibitor() const;
    void setFirstInhibitor(const double &first_inhibitor);
    bool is_first_inhibitor_Set() const;
    bool is_first_inhibitor_Valid() const;

    double getFirstRiftHerald() const;
    void setFirstRiftHerald(const double &first_rift_herald);
    bool is_first_rift_herald_Set() const;
    bool is_first_rift_herald_Valid() const;

    double getFirstTower() const;
    void setFirstTower(const double &first_tower);
    bool is_first_tower_Set() const;
    bool is_first_tower_Valid() const;

    qint32 getGameId() const;
    void setGameId(const qint32 &game_id);
    bool is_game_id_Set() const;
    bool is_game_id_Valid() const;

    qint32 getGames() const;
    void setGames(const qint32 &games);
    bool is_games_Set() const;
    bool is_games_Valid() const;

    double getGoldEarned() const;
    void setGoldEarned(const double &gold_earned);
    bool is_gold_earned_Set() const;
    bool is_gold_earned_Valid() const;

    double getGoldSpent() const;
    void setGoldSpent(const double &gold_spent);
    bool is_gold_spent_Set() const;
    bool is_gold_spent_Valid() const;

    double getInhibitorKills() const;
    void setInhibitorKills(const double &inhibitor_kills);
    bool is_inhibitor_kills_Set() const;
    bool is_inhibitor_kills_Valid() const;

    bool isIsClosed() const;
    void setIsClosed(const bool &is_closed);
    bool is_is_closed_Set() const;
    bool is_is_closed_Valid() const;

    double getKillingSpree() const;
    void setKillingSpree(const double &killing_spree);
    bool is_killing_spree_Set() const;
    bool is_killing_spree_Valid() const;

    double getKills() const;
    void setKills(const double &kills);
    bool is_kills_Set() const;
    bool is_kills_Valid() const;

    double getLargestCriticalStrike() const;
    void setLargestCriticalStrike(const double &largest_critical_strike);
    bool is_largest_critical_strike_Set() const;
    bool is_largest_critical_strike_Valid() const;

    double getLargestKillingSpree() const;
    void setLargestKillingSpree(const double &largest_killing_spree);
    bool is_largest_killing_spree_Set() const;
    bool is_largest_killing_spree_Valid() const;

    double getLargestMultiKill() const;
    void setLargestMultiKill(const double &largest_multi_kill);
    bool is_largest_multi_kill_Set() const;
    bool is_largest_multi_kill_Valid() const;

    double getLongestTimeSpentLiving() const;
    void setLongestTimeSpentLiving(const double &longest_time_spent_living);
    bool is_longest_time_spent_living_Set() const;
    bool is_longest_time_spent_living_Valid() const;

    double getMagicDamageDealt() const;
    void setMagicDamageDealt(const double &magic_damage_dealt);
    bool is_magic_damage_dealt_Set() const;
    bool is_magic_damage_dealt_Valid() const;

    double getMagicDamageDealtToChampions() const;
    void setMagicDamageDealtToChampions(const double &magic_damage_dealt_to_champions);
    bool is_magic_damage_dealt_to_champions_Set() const;
    bool is_magic_damage_dealt_to_champions_Valid() const;

    double getMagicDamageTaken() const;
    void setMagicDamageTaken(const double &magic_damage_taken);
    bool is_magic_damage_taken_Set() const;
    bool is_magic_damage_taken_Valid() const;

    QString getMatchName() const;
    void setMatchName(const QString &match_name);
    bool is_match_name_Set() const;
    bool is_match_name_Valid() const;

    qint32 getMatches() const;
    void setMatches(const qint32 &matches);
    bool is_matches_Set() const;
    bool is_matches_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getNeutralMinionsKIlled() const;
    void setNeutralMinionsKIlled(const double &neutral_minions_k_illed);
    bool is_neutral_minions_k_illed_Set() const;
    bool is_neutral_minions_k_illed_Valid() const;

    double getNeutralMinionsKIlledTeamJungle() const;
    void setNeutralMinionsKIlledTeamJungle(const double &neutral_minions_k_illed_team_jungle);
    bool is_neutral_minions_k_illed_team_jungle_Set() const;
    bool is_neutral_minions_k_illed_team_jungle_Valid() const;

    double getNeutralMinionsKilledEnemyJungle() const;
    void setNeutralMinionsKilledEnemyJungle(const double &neutral_minions_killed_enemy_jungle);
    bool is_neutral_minions_killed_enemy_jungle_Set() const;
    bool is_neutral_minions_killed_enemy_jungle_Valid() const;

    double getObjectivePlayerScore() const;
    void setObjectivePlayerScore(const double &objective_player_score);
    bool is_objective_player_score_Set() const;
    bool is_objective_player_score_Valid() const;

    QString getOpponent() const;
    void setOpponent(const QString &opponent);
    bool is_opponent_Set() const;
    bool is_opponent_Valid() const;

    qint32 getOpponentId() const;
    void setOpponentId(const qint32 &opponent_id);
    bool is_opponent_id_Set() const;
    bool is_opponent_id_Valid() const;

    double getPentaKills() const;
    void setPentaKills(const double &penta_kills);
    bool is_penta_kills_Set() const;
    bool is_penta_kills_Valid() const;

    double getPhysicalDamageDealt() const;
    void setPhysicalDamageDealt(const double &physical_damage_dealt);
    bool is_physical_damage_dealt_Set() const;
    bool is_physical_damage_dealt_Valid() const;

    double getPhysicalDamageDealtToChampions() const;
    void setPhysicalDamageDealtToChampions(const double &physical_damage_dealt_to_champions);
    bool is_physical_damage_dealt_to_champions_Set() const;
    bool is_physical_damage_dealt_to_champions_Valid() const;

    double getPhysicalDamageTaken() const;
    void setPhysicalDamageTaken(const double &physical_damage_taken);
    bool is_physical_damage_taken_Set() const;
    bool is_physical_damage_taken_Valid() const;

    qint32 getPlayerId() const;
    void setPlayerId(const qint32 &player_id);
    bool is_player_id_Set() const;
    bool is_player_id_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    double getQuadraKills() const;
    void setQuadraKills(const double &quadra_kills);
    bool is_quadra_kills_Set() const;
    bool is_quadra_kills_Valid() const;

    double getSightWardsBoughtInGame() const;
    void setSightWardsBoughtInGame(const double &sight_wards_bought_in_game);
    bool is_sight_wards_bought_in_game_Set() const;
    bool is_sight_wards_bought_in_game_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    double getTenKillsOrAssists() const;
    void setTenKillsOrAssists(const double &ten_kills_or_assists);
    bool is_ten_kills_or_assists_Set() const;
    bool is_ten_kills_or_assists_Valid() const;

    double getTotalDamageDealt() const;
    void setTotalDamageDealt(const double &total_damage_dealt);
    bool is_total_damage_dealt_Set() const;
    bool is_total_damage_dealt_Valid() const;

    double getTotalDamageDealtToChampions() const;
    void setTotalDamageDealtToChampions(const double &total_damage_dealt_to_champions);
    bool is_total_damage_dealt_to_champions_Set() const;
    bool is_total_damage_dealt_to_champions_Valid() const;

    double getTotalDamageTaken() const;
    void setTotalDamageTaken(const double &total_damage_taken);
    bool is_total_damage_taken_Set() const;
    bool is_total_damage_taken_Valid() const;

    double getTotalHeal() const;
    void setTotalHeal(const double &total_heal);
    bool is_total_heal_Set() const;
    bool is_total_heal_Valid() const;

    double getTotalMinionsKilled() const;
    void setTotalMinionsKilled(const double &total_minions_killed);
    bool is_total_minions_killed_Set() const;
    bool is_total_minions_killed_Valid() const;

    double getTotalPlayerScore() const;
    void setTotalPlayerScore(const double &total_player_score);
    bool is_total_player_score_Set() const;
    bool is_total_player_score_Valid() const;

    double getTotalTimeCrowdControlDealt() const;
    void setTotalTimeCrowdControlDealt(const double &total_time_crowd_control_dealt);
    bool is_total_time_crowd_control_dealt_Set() const;
    bool is_total_time_crowd_control_dealt_Valid() const;

    double getTotalUnitsHealed() const;
    void setTotalUnitsHealed(const double &total_units_healed);
    bool is_total_units_healed_Set() const;
    bool is_total_units_healed_Valid() const;

    double getTripleKills() const;
    void setTripleKills(const double &triple_kills);
    bool is_triple_kills_Set() const;
    bool is_triple_kills_Valid() const;

    double getTrueDamageDealt() const;
    void setTrueDamageDealt(const double &true_damage_dealt);
    bool is_true_damage_dealt_Set() const;
    bool is_true_damage_dealt_Valid() const;

    double getTrueDamageDealtToChampions() const;
    void setTrueDamageDealtToChampions(const double &true_damage_dealt_to_champions);
    bool is_true_damage_dealt_to_champions_Set() const;
    bool is_true_damage_dealt_to_champions_Valid() const;

    double getTrueDamageTaken() const;
    void setTrueDamageTaken(const double &true_damage_taken);
    bool is_true_damage_taken_Set() const;
    bool is_true_damage_taken_Valid() const;

    double getTurretKills() const;
    void setTurretKills(const double &turret_kills);
    bool is_turret_kills_Set() const;
    bool is_turret_kills_Valid() const;

    double getUnrealKills() const;
    void setUnrealKills(const double &unreal_kills);
    bool is_unreal_kills_Set() const;
    bool is_unreal_kills_Valid() const;

    QString getUpdated() const;
    void setUpdated(const QString &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    double getVisionWardsBoughtInGame() const;
    void setVisionWardsBoughtInGame(const double &vision_wards_bought_in_game);
    bool is_vision_wards_bought_in_game_Set() const;
    bool is_vision_wards_bought_in_game_Valid() const;

    double getWardsKilled() const;
    void setWardsKilled(const double &wards_killed);
    bool is_wards_killed_Set() const;
    bool is_wards_killed_Valid() const;

    double getWardsPlaced() const;
    void setWardsPlaced(const double &wards_placed);
    bool is_wards_placed_Set() const;
    bool is_wards_placed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_assists;
    bool m_assists_isSet;
    bool m_assists_isValid;

    double m_combat_player_score;
    bool m_combat_player_score_isSet;
    bool m_combat_player_score_isValid;

    QString m_date_time;
    bool m_date_time_isSet;
    bool m_date_time_isValid;

    QString m_day;
    bool m_day_isSet;
    bool m_day_isValid;

    double m_deaths;
    bool m_deaths_isSet;
    bool m_deaths_isValid;

    double m_double_kills;
    bool m_double_kills_isSet;
    bool m_double_kills_isValid;

    double m_fantasy_points;
    bool m_fantasy_points_isSet;
    bool m_fantasy_points_isValid;

    double m_first_baron;
    bool m_first_baron_isSet;
    bool m_first_baron_isValid;

    double m_first_blood;
    bool m_first_blood_isSet;
    bool m_first_blood_isValid;

    double m_first_dragon;
    bool m_first_dragon_isSet;
    bool m_first_dragon_isValid;

    double m_first_inhibitor;
    bool m_first_inhibitor_isSet;
    bool m_first_inhibitor_isValid;

    double m_first_rift_herald;
    bool m_first_rift_herald_isSet;
    bool m_first_rift_herald_isValid;

    double m_first_tower;
    bool m_first_tower_isSet;
    bool m_first_tower_isValid;

    qint32 m_game_id;
    bool m_game_id_isSet;
    bool m_game_id_isValid;

    qint32 m_games;
    bool m_games_isSet;
    bool m_games_isValid;

    double m_gold_earned;
    bool m_gold_earned_isSet;
    bool m_gold_earned_isValid;

    double m_gold_spent;
    bool m_gold_spent_isSet;
    bool m_gold_spent_isValid;

    double m_inhibitor_kills;
    bool m_inhibitor_kills_isSet;
    bool m_inhibitor_kills_isValid;

    bool m_is_closed;
    bool m_is_closed_isSet;
    bool m_is_closed_isValid;

    double m_killing_spree;
    bool m_killing_spree_isSet;
    bool m_killing_spree_isValid;

    double m_kills;
    bool m_kills_isSet;
    bool m_kills_isValid;

    double m_largest_critical_strike;
    bool m_largest_critical_strike_isSet;
    bool m_largest_critical_strike_isValid;

    double m_largest_killing_spree;
    bool m_largest_killing_spree_isSet;
    bool m_largest_killing_spree_isValid;

    double m_largest_multi_kill;
    bool m_largest_multi_kill_isSet;
    bool m_largest_multi_kill_isValid;

    double m_longest_time_spent_living;
    bool m_longest_time_spent_living_isSet;
    bool m_longest_time_spent_living_isValid;

    double m_magic_damage_dealt;
    bool m_magic_damage_dealt_isSet;
    bool m_magic_damage_dealt_isValid;

    double m_magic_damage_dealt_to_champions;
    bool m_magic_damage_dealt_to_champions_isSet;
    bool m_magic_damage_dealt_to_champions_isValid;

    double m_magic_damage_taken;
    bool m_magic_damage_taken_isSet;
    bool m_magic_damage_taken_isValid;

    QString m_match_name;
    bool m_match_name_isSet;
    bool m_match_name_isValid;

    qint32 m_matches;
    bool m_matches_isSet;
    bool m_matches_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_neutral_minions_k_illed;
    bool m_neutral_minions_k_illed_isSet;
    bool m_neutral_minions_k_illed_isValid;

    double m_neutral_minions_k_illed_team_jungle;
    bool m_neutral_minions_k_illed_team_jungle_isSet;
    bool m_neutral_minions_k_illed_team_jungle_isValid;

    double m_neutral_minions_killed_enemy_jungle;
    bool m_neutral_minions_killed_enemy_jungle_isSet;
    bool m_neutral_minions_killed_enemy_jungle_isValid;

    double m_objective_player_score;
    bool m_objective_player_score_isSet;
    bool m_objective_player_score_isValid;

    QString m_opponent;
    bool m_opponent_isSet;
    bool m_opponent_isValid;

    qint32 m_opponent_id;
    bool m_opponent_id_isSet;
    bool m_opponent_id_isValid;

    double m_penta_kills;
    bool m_penta_kills_isSet;
    bool m_penta_kills_isValid;

    double m_physical_damage_dealt;
    bool m_physical_damage_dealt_isSet;
    bool m_physical_damage_dealt_isValid;

    double m_physical_damage_dealt_to_champions;
    bool m_physical_damage_dealt_to_champions_isSet;
    bool m_physical_damage_dealt_to_champions_isValid;

    double m_physical_damage_taken;
    bool m_physical_damage_taken_isSet;
    bool m_physical_damage_taken_isValid;

    qint32 m_player_id;
    bool m_player_id_isSet;
    bool m_player_id_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    double m_quadra_kills;
    bool m_quadra_kills_isSet;
    bool m_quadra_kills_isValid;

    double m_sight_wards_bought_in_game;
    bool m_sight_wards_bought_in_game_isSet;
    bool m_sight_wards_bought_in_game_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    double m_ten_kills_or_assists;
    bool m_ten_kills_or_assists_isSet;
    bool m_ten_kills_or_assists_isValid;

    double m_total_damage_dealt;
    bool m_total_damage_dealt_isSet;
    bool m_total_damage_dealt_isValid;

    double m_total_damage_dealt_to_champions;
    bool m_total_damage_dealt_to_champions_isSet;
    bool m_total_damage_dealt_to_champions_isValid;

    double m_total_damage_taken;
    bool m_total_damage_taken_isSet;
    bool m_total_damage_taken_isValid;

    double m_total_heal;
    bool m_total_heal_isSet;
    bool m_total_heal_isValid;

    double m_total_minions_killed;
    bool m_total_minions_killed_isSet;
    bool m_total_minions_killed_isValid;

    double m_total_player_score;
    bool m_total_player_score_isSet;
    bool m_total_player_score_isValid;

    double m_total_time_crowd_control_dealt;
    bool m_total_time_crowd_control_dealt_isSet;
    bool m_total_time_crowd_control_dealt_isValid;

    double m_total_units_healed;
    bool m_total_units_healed_isSet;
    bool m_total_units_healed_isValid;

    double m_triple_kills;
    bool m_triple_kills_isSet;
    bool m_triple_kills_isValid;

    double m_true_damage_dealt;
    bool m_true_damage_dealt_isSet;
    bool m_true_damage_dealt_isValid;

    double m_true_damage_dealt_to_champions;
    bool m_true_damage_dealt_to_champions_isSet;
    bool m_true_damage_dealt_to_champions_isValid;

    double m_true_damage_taken;
    bool m_true_damage_taken_isSet;
    bool m_true_damage_taken_isValid;

    double m_turret_kills;
    bool m_turret_kills_isSet;
    bool m_turret_kills_isValid;

    double m_unreal_kills;
    bool m_unreal_kills_isSet;
    bool m_unreal_kills_isValid;

    QString m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    double m_vision_wards_bought_in_game;
    bool m_vision_wards_bought_in_game_isSet;
    bool m_vision_wards_bought_in_game_isValid;

    double m_wards_killed;
    bool m_wards_killed_isSet;
    bool m_wards_killed_isValid;

    double m_wards_placed;
    bool m_wards_placed_isSet;
    bool m_wards_placed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITeamMatch)

#endif // OAITeamMatch_H
