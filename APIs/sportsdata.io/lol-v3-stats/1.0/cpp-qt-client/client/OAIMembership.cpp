/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembership::OAIMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembership::OAIMembership() {
    this->initializeModel();
}

OAIMembership::~OAIMembership() {}

void OAIMembership::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_player_name_isSet = false;
    m_player_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_team_area_isSet = false;
    m_team_area_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_team_name_isSet = false;
    m_team_name_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembership::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("MembershipId")]);
    m_membership_id_isSet = !json[QString("MembershipId")].isNull() && m_membership_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerId")]);
    m_player_id_isSet = !json[QString("PlayerId")].isNull() && m_player_id_isValid;

    m_player_name_isValid = ::OpenAPI::fromJsonValue(m_player_name, json[QString("PlayerName")]);
    m_player_name_isSet = !json[QString("PlayerName")].isNull() && m_player_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_team_area_isValid = ::OpenAPI::fromJsonValue(m_team_area, json[QString("TeamArea")]);
    m_team_area_isSet = !json[QString("TeamArea")].isNull() && m_team_area_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_team_name_isValid = ::OpenAPI::fromJsonValue(m_team_name, json[QString("TeamName")]);
    m_team_name_isSet = !json[QString("TeamName")].isNull() && m_team_name_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("MembershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_player_name_isSet) {
        obj.insert(QString("PlayerName"), ::OpenAPI::toJsonValue(m_player_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_team_area_isSet) {
        obj.insert(QString("TeamArea"), ::OpenAPI::toJsonValue(m_team_area));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_team_name_isSet) {
        obj.insert(QString("TeamName"), ::OpenAPI::toJsonValue(m_team_name));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

bool OAIMembership::isActive() const {
    return m_active;
}
void OAIMembership::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIMembership::is_active_Set() const{
    return m_active_isSet;
}

bool OAIMembership::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIMembership::getEndDate() const {
    return m_end_date;
}
void OAIMembership::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIMembership::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIMembership::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIMembership::getMembershipId() const {
    return m_membership_id;
}
void OAIMembership::setMembershipId(const qint32 &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIMembership::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIMembership::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

qint32 OAIMembership::getPlayerId() const {
    return m_player_id;
}
void OAIMembership::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIMembership::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIMembership::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIMembership::getPlayerName() const {
    return m_player_name;
}
void OAIMembership::setPlayerName(const QString &player_name) {
    m_player_name = player_name;
    m_player_name_isSet = true;
}

bool OAIMembership::is_player_name_Set() const{
    return m_player_name_isSet;
}

bool OAIMembership::is_player_name_Valid() const{
    return m_player_name_isValid;
}

QString OAIMembership::getStartDate() const {
    return m_start_date;
}
void OAIMembership::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIMembership::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIMembership::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIMembership::getTeamArea() const {
    return m_team_area;
}
void OAIMembership::setTeamArea(const QString &team_area) {
    m_team_area = team_area;
    m_team_area_isSet = true;
}

bool OAIMembership::is_team_area_Set() const{
    return m_team_area_isSet;
}

bool OAIMembership::is_team_area_Valid() const{
    return m_team_area_isValid;
}

qint32 OAIMembership::getTeamId() const {
    return m_team_id;
}
void OAIMembership::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIMembership::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIMembership::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIMembership::getTeamName() const {
    return m_team_name;
}
void OAIMembership::setTeamName(const QString &team_name) {
    m_team_name = team_name;
    m_team_name_isSet = true;
}

bool OAIMembership::is_team_name_Set() const{
    return m_team_name_isSet;
}

bool OAIMembership::is_team_name_Valid() const{
    return m_team_name_isValid;
}

QString OAIMembership::getUpdated() const {
    return m_updated;
}
void OAIMembership::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIMembership::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIMembership::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
