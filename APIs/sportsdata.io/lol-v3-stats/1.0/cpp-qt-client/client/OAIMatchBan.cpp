/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchBan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchBan::OAIMatchBan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchBan::OAIMatchBan() {
    this->initializeModel();
}

OAIMatchBan::~OAIMatchBan() {}

void OAIMatchBan::initializeModel() {

    m_champion_isSet = false;
    m_champion_isValid = false;

    m_champion_id_isSet = false;
    m_champion_id_isValid = false;

    m_match_id_isSet = false;
    m_match_id_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIMatchBan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchBan::fromJsonObject(QJsonObject json) {

    m_champion_isValid = ::OpenAPI::fromJsonValue(m_champion, json[QString("Champion")]);
    m_champion_isSet = !json[QString("Champion")].isNull() && m_champion_isValid;

    m_champion_id_isValid = ::OpenAPI::fromJsonValue(m_champion_id, json[QString("ChampionId")]);
    m_champion_id_isSet = !json[QString("ChampionId")].isNull() && m_champion_id_isValid;

    m_match_id_isValid = ::OpenAPI::fromJsonValue(m_match_id, json[QString("MatchId")]);
    m_match_id_isSet = !json[QString("MatchId")].isNull() && m_match_id_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;
}

QString OAIMatchBan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchBan::asJsonObject() const {
    QJsonObject obj;
    if (m_champion.isSet()) {
        obj.insert(QString("Champion"), ::OpenAPI::toJsonValue(m_champion));
    }
    if (m_champion_id_isSet) {
        obj.insert(QString("ChampionId"), ::OpenAPI::toJsonValue(m_champion_id));
    }
    if (m_match_id_isSet) {
        obj.insert(QString("MatchId"), ::OpenAPI::toJsonValue(m_match_id));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

OAIChampionInfo OAIMatchBan::getChampion() const {
    return m_champion;
}
void OAIMatchBan::setChampion(const OAIChampionInfo &champion) {
    m_champion = champion;
    m_champion_isSet = true;
}

bool OAIMatchBan::is_champion_Set() const{
    return m_champion_isSet;
}

bool OAIMatchBan::is_champion_Valid() const{
    return m_champion_isValid;
}

qint32 OAIMatchBan::getChampionId() const {
    return m_champion_id;
}
void OAIMatchBan::setChampionId(const qint32 &champion_id) {
    m_champion_id = champion_id;
    m_champion_id_isSet = true;
}

bool OAIMatchBan::is_champion_id_Set() const{
    return m_champion_id_isSet;
}

bool OAIMatchBan::is_champion_id_Valid() const{
    return m_champion_id_isValid;
}

qint32 OAIMatchBan::getMatchId() const {
    return m_match_id;
}
void OAIMatchBan::setMatchId(const qint32 &match_id) {
    m_match_id = match_id;
    m_match_id_isSet = true;
}

bool OAIMatchBan::is_match_id_Set() const{
    return m_match_id_isSet;
}

bool OAIMatchBan::is_match_id_Valid() const{
    return m_match_id_isValid;
}

qint32 OAIMatchBan::getTeamId() const {
    return m_team_id;
}
void OAIMatchBan::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIMatchBan::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIMatchBan::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIMatchBan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_champion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_champion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchBan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
