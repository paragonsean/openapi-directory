/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDetail::OAITeamDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDetail::OAITeamDetail() {
    this->initializeModel();
}

OAITeamDetail::~OAITeamDetail() {}

void OAITeamDetail::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_area_id_isSet = false;
    m_area_id_isValid = false;

    m_area_name_isSet = false;
    m_area_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_facebook_isSet = false;
    m_facebook_isValid = false;

    m_founded_isSet = false;
    m_founded_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_instagram_isSet = false;
    m_instagram_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_players_isSet = false;
    m_players_isValid = false;

    m_primary_color_isSet = false;
    m_primary_color_isValid = false;

    m_quaternary_color_isSet = false;
    m_quaternary_color_isValid = false;

    m_secondary_color_isSet = false;
    m_secondary_color_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_tertiary_color_isSet = false;
    m_tertiary_color_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_you_tube_isSet = false;
    m_you_tube_isValid = false;
}

void OAITeamDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDetail::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_area_id_isValid = ::OpenAPI::fromJsonValue(m_area_id, json[QString("AreaId")]);
    m_area_id_isSet = !json[QString("AreaId")].isNull() && m_area_id_isValid;

    m_area_name_isValid = ::OpenAPI::fromJsonValue(m_area_name, json[QString("AreaName")]);
    m_area_name_isSet = !json[QString("AreaName")].isNull() && m_area_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_facebook_isValid = ::OpenAPI::fromJsonValue(m_facebook, json[QString("Facebook")]);
    m_facebook_isSet = !json[QString("Facebook")].isNull() && m_facebook_isValid;

    m_founded_isValid = ::OpenAPI::fromJsonValue(m_founded, json[QString("Founded")]);
    m_founded_isSet = !json[QString("Founded")].isNull() && m_founded_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_instagram_isValid = ::OpenAPI::fromJsonValue(m_instagram, json[QString("Instagram")]);
    m_instagram_isSet = !json[QString("Instagram")].isNull() && m_instagram_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_players_isValid = ::OpenAPI::fromJsonValue(m_players, json[QString("Players")]);
    m_players_isSet = !json[QString("Players")].isNull() && m_players_isValid;

    m_primary_color_isValid = ::OpenAPI::fromJsonValue(m_primary_color, json[QString("PrimaryColor")]);
    m_primary_color_isSet = !json[QString("PrimaryColor")].isNull() && m_primary_color_isValid;

    m_quaternary_color_isValid = ::OpenAPI::fromJsonValue(m_quaternary_color, json[QString("QuaternaryColor")]);
    m_quaternary_color_isSet = !json[QString("QuaternaryColor")].isNull() && m_quaternary_color_isValid;

    m_secondary_color_isValid = ::OpenAPI::fromJsonValue(m_secondary_color, json[QString("SecondaryColor")]);
    m_secondary_color_isSet = !json[QString("SecondaryColor")].isNull() && m_secondary_color_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_tertiary_color_isValid = ::OpenAPI::fromJsonValue(m_tertiary_color, json[QString("TertiaryColor")]);
    m_tertiary_color_isSet = !json[QString("TertiaryColor")].isNull() && m_tertiary_color_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("Twitter")]);
    m_twitter_isSet = !json[QString("Twitter")].isNull() && m_twitter_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("Website")]);
    m_website_isSet = !json[QString("Website")].isNull() && m_website_isValid;

    m_you_tube_isValid = ::OpenAPI::fromJsonValue(m_you_tube, json[QString("YouTube")]);
    m_you_tube_isSet = !json[QString("YouTube")].isNull() && m_you_tube_isValid;
}

QString OAITeamDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_area_id_isSet) {
        obj.insert(QString("AreaId"), ::OpenAPI::toJsonValue(m_area_id));
    }
    if (m_area_name_isSet) {
        obj.insert(QString("AreaName"), ::OpenAPI::toJsonValue(m_area_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_facebook_isSet) {
        obj.insert(QString("Facebook"), ::OpenAPI::toJsonValue(m_facebook));
    }
    if (m_founded_isSet) {
        obj.insert(QString("Founded"), ::OpenAPI::toJsonValue(m_founded));
    }
    if (m_gender_isSet) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_instagram_isSet) {
        obj.insert(QString("Instagram"), ::OpenAPI::toJsonValue(m_instagram));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_players.size() > 0) {
        obj.insert(QString("Players"), ::OpenAPI::toJsonValue(m_players));
    }
    if (m_primary_color_isSet) {
        obj.insert(QString("PrimaryColor"), ::OpenAPI::toJsonValue(m_primary_color));
    }
    if (m_quaternary_color_isSet) {
        obj.insert(QString("QuaternaryColor"), ::OpenAPI::toJsonValue(m_quaternary_color));
    }
    if (m_secondary_color_isSet) {
        obj.insert(QString("SecondaryColor"), ::OpenAPI::toJsonValue(m_secondary_color));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_tertiary_color_isSet) {
        obj.insert(QString("TertiaryColor"), ::OpenAPI::toJsonValue(m_tertiary_color));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("Twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_website_isSet) {
        obj.insert(QString("Website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_you_tube_isSet) {
        obj.insert(QString("YouTube"), ::OpenAPI::toJsonValue(m_you_tube));
    }
    return obj;
}

bool OAITeamDetail::isActive() const {
    return m_active;
}
void OAITeamDetail::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAITeamDetail::is_active_Set() const{
    return m_active_isSet;
}

bool OAITeamDetail::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAITeamDetail::getAreaId() const {
    return m_area_id;
}
void OAITeamDetail::setAreaId(const qint32 &area_id) {
    m_area_id = area_id;
    m_area_id_isSet = true;
}

bool OAITeamDetail::is_area_id_Set() const{
    return m_area_id_isSet;
}

bool OAITeamDetail::is_area_id_Valid() const{
    return m_area_id_isValid;
}

QString OAITeamDetail::getAreaName() const {
    return m_area_name;
}
void OAITeamDetail::setAreaName(const QString &area_name) {
    m_area_name = area_name;
    m_area_name_isSet = true;
}

bool OAITeamDetail::is_area_name_Set() const{
    return m_area_name_isSet;
}

bool OAITeamDetail::is_area_name_Valid() const{
    return m_area_name_isValid;
}

QString OAITeamDetail::getEmail() const {
    return m_email;
}
void OAITeamDetail::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAITeamDetail::is_email_Set() const{
    return m_email_isSet;
}

bool OAITeamDetail::is_email_Valid() const{
    return m_email_isValid;
}

QString OAITeamDetail::getFacebook() const {
    return m_facebook;
}
void OAITeamDetail::setFacebook(const QString &facebook) {
    m_facebook = facebook;
    m_facebook_isSet = true;
}

bool OAITeamDetail::is_facebook_Set() const{
    return m_facebook_isSet;
}

bool OAITeamDetail::is_facebook_Valid() const{
    return m_facebook_isValid;
}

qint32 OAITeamDetail::getFounded() const {
    return m_founded;
}
void OAITeamDetail::setFounded(const qint32 &founded) {
    m_founded = founded;
    m_founded_isSet = true;
}

bool OAITeamDetail::is_founded_Set() const{
    return m_founded_isSet;
}

bool OAITeamDetail::is_founded_Valid() const{
    return m_founded_isValid;
}

QString OAITeamDetail::getGender() const {
    return m_gender;
}
void OAITeamDetail::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAITeamDetail::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAITeamDetail::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAITeamDetail::getInstagram() const {
    return m_instagram;
}
void OAITeamDetail::setInstagram(const QString &instagram) {
    m_instagram = instagram;
    m_instagram_isSet = true;
}

bool OAITeamDetail::is_instagram_Set() const{
    return m_instagram_isSet;
}

bool OAITeamDetail::is_instagram_Valid() const{
    return m_instagram_isValid;
}

QString OAITeamDetail::getKey() const {
    return m_key;
}
void OAITeamDetail::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITeamDetail::is_key_Set() const{
    return m_key_isSet;
}

bool OAITeamDetail::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITeamDetail::getName() const {
    return m_name;
}
void OAITeamDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamDetail::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPlayer> OAITeamDetail::getPlayers() const {
    return m_players;
}
void OAITeamDetail::setPlayers(const QList<OAIPlayer> &players) {
    m_players = players;
    m_players_isSet = true;
}

bool OAITeamDetail::is_players_Set() const{
    return m_players_isSet;
}

bool OAITeamDetail::is_players_Valid() const{
    return m_players_isValid;
}

QString OAITeamDetail::getPrimaryColor() const {
    return m_primary_color;
}
void OAITeamDetail::setPrimaryColor(const QString &primary_color) {
    m_primary_color = primary_color;
    m_primary_color_isSet = true;
}

bool OAITeamDetail::is_primary_color_Set() const{
    return m_primary_color_isSet;
}

bool OAITeamDetail::is_primary_color_Valid() const{
    return m_primary_color_isValid;
}

QString OAITeamDetail::getQuaternaryColor() const {
    return m_quaternary_color;
}
void OAITeamDetail::setQuaternaryColor(const QString &quaternary_color) {
    m_quaternary_color = quaternary_color;
    m_quaternary_color_isSet = true;
}

bool OAITeamDetail::is_quaternary_color_Set() const{
    return m_quaternary_color_isSet;
}

bool OAITeamDetail::is_quaternary_color_Valid() const{
    return m_quaternary_color_isValid;
}

QString OAITeamDetail::getSecondaryColor() const {
    return m_secondary_color;
}
void OAITeamDetail::setSecondaryColor(const QString &secondary_color) {
    m_secondary_color = secondary_color;
    m_secondary_color_isSet = true;
}

bool OAITeamDetail::is_secondary_color_Set() const{
    return m_secondary_color_isSet;
}

bool OAITeamDetail::is_secondary_color_Valid() const{
    return m_secondary_color_isValid;
}

QString OAITeamDetail::getShortName() const {
    return m_short_name;
}
void OAITeamDetail::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAITeamDetail::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAITeamDetail::is_short_name_Valid() const{
    return m_short_name_isValid;
}

qint32 OAITeamDetail::getTeamId() const {
    return m_team_id;
}
void OAITeamDetail::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamDetail::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamDetail::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAITeamDetail::getTertiaryColor() const {
    return m_tertiary_color;
}
void OAITeamDetail::setTertiaryColor(const QString &tertiary_color) {
    m_tertiary_color = tertiary_color;
    m_tertiary_color_isSet = true;
}

bool OAITeamDetail::is_tertiary_color_Set() const{
    return m_tertiary_color_isSet;
}

bool OAITeamDetail::is_tertiary_color_Valid() const{
    return m_tertiary_color_isValid;
}

QString OAITeamDetail::getTwitter() const {
    return m_twitter;
}
void OAITeamDetail::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAITeamDetail::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAITeamDetail::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QString OAITeamDetail::getType() const {
    return m_type;
}
void OAITeamDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITeamDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAITeamDetail::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITeamDetail::getWebsite() const {
    return m_website;
}
void OAITeamDetail::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAITeamDetail::is_website_Set() const{
    return m_website_isSet;
}

bool OAITeamDetail::is_website_Valid() const{
    return m_website_isValid;
}

QString OAITeamDetail::getYouTube() const {
    return m_you_tube;
}
void OAITeamDetail::setYouTube(const QString &you_tube) {
    m_you_tube = you_tube;
    m_you_tube_isSet = true;
}

bool OAITeamDetail::is_you_tube_Set() const{
    return m_you_tube_isSet;
}

bool OAITeamDetail::is_you_tube_Valid() const{
    return m_you_tube_isValid;
}

bool OAITeamDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_founded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instagram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_players.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quaternary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tertiary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_you_tube_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
