/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamMatch::OAITeamMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamMatch::OAITeamMatch() {
    this->initializeModel();
}

OAITeamMatch::~OAITeamMatch() {}

void OAITeamMatch::initializeModel() {

    m_assists_isSet = false;
    m_assists_isValid = false;

    m_combat_player_score_isSet = false;
    m_combat_player_score_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_deaths_isSet = false;
    m_deaths_isValid = false;

    m_double_kills_isSet = false;
    m_double_kills_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_first_baron_isSet = false;
    m_first_baron_isValid = false;

    m_first_blood_isSet = false;
    m_first_blood_isValid = false;

    m_first_dragon_isSet = false;
    m_first_dragon_isValid = false;

    m_first_inhibitor_isSet = false;
    m_first_inhibitor_isValid = false;

    m_first_rift_herald_isSet = false;
    m_first_rift_herald_isValid = false;

    m_first_tower_isSet = false;
    m_first_tower_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_gold_earned_isSet = false;
    m_gold_earned_isValid = false;

    m_gold_spent_isSet = false;
    m_gold_spent_isValid = false;

    m_inhibitor_kills_isSet = false;
    m_inhibitor_kills_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_killing_spree_isSet = false;
    m_killing_spree_isValid = false;

    m_kills_isSet = false;
    m_kills_isValid = false;

    m_largest_critical_strike_isSet = false;
    m_largest_critical_strike_isValid = false;

    m_largest_killing_spree_isSet = false;
    m_largest_killing_spree_isValid = false;

    m_largest_multi_kill_isSet = false;
    m_largest_multi_kill_isValid = false;

    m_longest_time_spent_living_isSet = false;
    m_longest_time_spent_living_isValid = false;

    m_magic_damage_dealt_isSet = false;
    m_magic_damage_dealt_isValid = false;

    m_magic_damage_dealt_to_champions_isSet = false;
    m_magic_damage_dealt_to_champions_isValid = false;

    m_magic_damage_taken_isSet = false;
    m_magic_damage_taken_isValid = false;

    m_match_name_isSet = false;
    m_match_name_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_neutral_minions_k_illed_isSet = false;
    m_neutral_minions_k_illed_isValid = false;

    m_neutral_minions_k_illed_team_jungle_isSet = false;
    m_neutral_minions_k_illed_team_jungle_isValid = false;

    m_neutral_minions_killed_enemy_jungle_isSet = false;
    m_neutral_minions_killed_enemy_jungle_isValid = false;

    m_objective_player_score_isSet = false;
    m_objective_player_score_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_penta_kills_isSet = false;
    m_penta_kills_isValid = false;

    m_physical_damage_dealt_isSet = false;
    m_physical_damage_dealt_isValid = false;

    m_physical_damage_dealt_to_champions_isSet = false;
    m_physical_damage_dealt_to_champions_isValid = false;

    m_physical_damage_taken_isSet = false;
    m_physical_damage_taken_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_quadra_kills_isSet = false;
    m_quadra_kills_isValid = false;

    m_sight_wards_bought_in_game_isSet = false;
    m_sight_wards_bought_in_game_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_ten_kills_or_assists_isSet = false;
    m_ten_kills_or_assists_isValid = false;

    m_total_damage_dealt_isSet = false;
    m_total_damage_dealt_isValid = false;

    m_total_damage_dealt_to_champions_isSet = false;
    m_total_damage_dealt_to_champions_isValid = false;

    m_total_damage_taken_isSet = false;
    m_total_damage_taken_isValid = false;

    m_total_heal_isSet = false;
    m_total_heal_isValid = false;

    m_total_minions_killed_isSet = false;
    m_total_minions_killed_isValid = false;

    m_total_player_score_isSet = false;
    m_total_player_score_isValid = false;

    m_total_time_crowd_control_dealt_isSet = false;
    m_total_time_crowd_control_dealt_isValid = false;

    m_total_units_healed_isSet = false;
    m_total_units_healed_isValid = false;

    m_triple_kills_isSet = false;
    m_triple_kills_isValid = false;

    m_true_damage_dealt_isSet = false;
    m_true_damage_dealt_isValid = false;

    m_true_damage_dealt_to_champions_isSet = false;
    m_true_damage_dealt_to_champions_isValid = false;

    m_true_damage_taken_isSet = false;
    m_true_damage_taken_isValid = false;

    m_turret_kills_isSet = false;
    m_turret_kills_isValid = false;

    m_unreal_kills_isSet = false;
    m_unreal_kills_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_vision_wards_bought_in_game_isSet = false;
    m_vision_wards_bought_in_game_isValid = false;

    m_wards_killed_isSet = false;
    m_wards_killed_isValid = false;

    m_wards_placed_isSet = false;
    m_wards_placed_isValid = false;
}

void OAITeamMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamMatch::fromJsonObject(QJsonObject json) {

    m_assists_isValid = ::OpenAPI::fromJsonValue(m_assists, json[QString("Assists")]);
    m_assists_isSet = !json[QString("Assists")].isNull() && m_assists_isValid;

    m_combat_player_score_isValid = ::OpenAPI::fromJsonValue(m_combat_player_score, json[QString("CombatPlayerScore")]);
    m_combat_player_score_isSet = !json[QString("CombatPlayerScore")].isNull() && m_combat_player_score_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_deaths_isValid = ::OpenAPI::fromJsonValue(m_deaths, json[QString("Deaths")]);
    m_deaths_isSet = !json[QString("Deaths")].isNull() && m_deaths_isValid;

    m_double_kills_isValid = ::OpenAPI::fromJsonValue(m_double_kills, json[QString("DoubleKills")]);
    m_double_kills_isSet = !json[QString("DoubleKills")].isNull() && m_double_kills_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_first_baron_isValid = ::OpenAPI::fromJsonValue(m_first_baron, json[QString("FirstBaron")]);
    m_first_baron_isSet = !json[QString("FirstBaron")].isNull() && m_first_baron_isValid;

    m_first_blood_isValid = ::OpenAPI::fromJsonValue(m_first_blood, json[QString("FirstBlood")]);
    m_first_blood_isSet = !json[QString("FirstBlood")].isNull() && m_first_blood_isValid;

    m_first_dragon_isValid = ::OpenAPI::fromJsonValue(m_first_dragon, json[QString("FirstDragon")]);
    m_first_dragon_isSet = !json[QString("FirstDragon")].isNull() && m_first_dragon_isValid;

    m_first_inhibitor_isValid = ::OpenAPI::fromJsonValue(m_first_inhibitor, json[QString("FirstInhibitor")]);
    m_first_inhibitor_isSet = !json[QString("FirstInhibitor")].isNull() && m_first_inhibitor_isValid;

    m_first_rift_herald_isValid = ::OpenAPI::fromJsonValue(m_first_rift_herald, json[QString("FirstRiftHerald")]);
    m_first_rift_herald_isSet = !json[QString("FirstRiftHerald")].isNull() && m_first_rift_herald_isValid;

    m_first_tower_isValid = ::OpenAPI::fromJsonValue(m_first_tower, json[QString("FirstTower")]);
    m_first_tower_isSet = !json[QString("FirstTower")].isNull() && m_first_tower_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameId")]);
    m_game_id_isSet = !json[QString("GameId")].isNull() && m_game_id_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_gold_earned_isValid = ::OpenAPI::fromJsonValue(m_gold_earned, json[QString("GoldEarned")]);
    m_gold_earned_isSet = !json[QString("GoldEarned")].isNull() && m_gold_earned_isValid;

    m_gold_spent_isValid = ::OpenAPI::fromJsonValue(m_gold_spent, json[QString("GoldSpent")]);
    m_gold_spent_isSet = !json[QString("GoldSpent")].isNull() && m_gold_spent_isValid;

    m_inhibitor_kills_isValid = ::OpenAPI::fromJsonValue(m_inhibitor_kills, json[QString("InhibitorKills")]);
    m_inhibitor_kills_isSet = !json[QString("InhibitorKills")].isNull() && m_inhibitor_kills_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("IsClosed")]);
    m_is_closed_isSet = !json[QString("IsClosed")].isNull() && m_is_closed_isValid;

    m_killing_spree_isValid = ::OpenAPI::fromJsonValue(m_killing_spree, json[QString("KillingSpree")]);
    m_killing_spree_isSet = !json[QString("KillingSpree")].isNull() && m_killing_spree_isValid;

    m_kills_isValid = ::OpenAPI::fromJsonValue(m_kills, json[QString("Kills")]);
    m_kills_isSet = !json[QString("Kills")].isNull() && m_kills_isValid;

    m_largest_critical_strike_isValid = ::OpenAPI::fromJsonValue(m_largest_critical_strike, json[QString("LargestCriticalStrike")]);
    m_largest_critical_strike_isSet = !json[QString("LargestCriticalStrike")].isNull() && m_largest_critical_strike_isValid;

    m_largest_killing_spree_isValid = ::OpenAPI::fromJsonValue(m_largest_killing_spree, json[QString("LargestKillingSpree")]);
    m_largest_killing_spree_isSet = !json[QString("LargestKillingSpree")].isNull() && m_largest_killing_spree_isValid;

    m_largest_multi_kill_isValid = ::OpenAPI::fromJsonValue(m_largest_multi_kill, json[QString("LargestMultiKill")]);
    m_largest_multi_kill_isSet = !json[QString("LargestMultiKill")].isNull() && m_largest_multi_kill_isValid;

    m_longest_time_spent_living_isValid = ::OpenAPI::fromJsonValue(m_longest_time_spent_living, json[QString("LongestTimeSpentLiving")]);
    m_longest_time_spent_living_isSet = !json[QString("LongestTimeSpentLiving")].isNull() && m_longest_time_spent_living_isValid;

    m_magic_damage_dealt_isValid = ::OpenAPI::fromJsonValue(m_magic_damage_dealt, json[QString("MagicDamageDealt")]);
    m_magic_damage_dealt_isSet = !json[QString("MagicDamageDealt")].isNull() && m_magic_damage_dealt_isValid;

    m_magic_damage_dealt_to_champions_isValid = ::OpenAPI::fromJsonValue(m_magic_damage_dealt_to_champions, json[QString("MagicDamageDealtToChampions")]);
    m_magic_damage_dealt_to_champions_isSet = !json[QString("MagicDamageDealtToChampions")].isNull() && m_magic_damage_dealt_to_champions_isValid;

    m_magic_damage_taken_isValid = ::OpenAPI::fromJsonValue(m_magic_damage_taken, json[QString("MagicDamageTaken")]);
    m_magic_damage_taken_isSet = !json[QString("MagicDamageTaken")].isNull() && m_magic_damage_taken_isValid;

    m_match_name_isValid = ::OpenAPI::fromJsonValue(m_match_name, json[QString("MatchName")]);
    m_match_name_isSet = !json[QString("MatchName")].isNull() && m_match_name_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("Matches")]);
    m_matches_isSet = !json[QString("Matches")].isNull() && m_matches_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_neutral_minions_k_illed_isValid = ::OpenAPI::fromJsonValue(m_neutral_minions_k_illed, json[QString("NeutralMinionsKIlled")]);
    m_neutral_minions_k_illed_isSet = !json[QString("NeutralMinionsKIlled")].isNull() && m_neutral_minions_k_illed_isValid;

    m_neutral_minions_k_illed_team_jungle_isValid = ::OpenAPI::fromJsonValue(m_neutral_minions_k_illed_team_jungle, json[QString("NeutralMinionsKIlledTeamJungle")]);
    m_neutral_minions_k_illed_team_jungle_isSet = !json[QString("NeutralMinionsKIlledTeamJungle")].isNull() && m_neutral_minions_k_illed_team_jungle_isValid;

    m_neutral_minions_killed_enemy_jungle_isValid = ::OpenAPI::fromJsonValue(m_neutral_minions_killed_enemy_jungle, json[QString("NeutralMinionsKilledEnemyJungle")]);
    m_neutral_minions_killed_enemy_jungle_isSet = !json[QString("NeutralMinionsKilledEnemyJungle")].isNull() && m_neutral_minions_killed_enemy_jungle_isValid;

    m_objective_player_score_isValid = ::OpenAPI::fromJsonValue(m_objective_player_score, json[QString("ObjectivePlayerScore")]);
    m_objective_player_score_isSet = !json[QString("ObjectivePlayerScore")].isNull() && m_objective_player_score_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentId")]);
    m_opponent_id_isSet = !json[QString("OpponentId")].isNull() && m_opponent_id_isValid;

    m_penta_kills_isValid = ::OpenAPI::fromJsonValue(m_penta_kills, json[QString("PentaKills")]);
    m_penta_kills_isSet = !json[QString("PentaKills")].isNull() && m_penta_kills_isValid;

    m_physical_damage_dealt_isValid = ::OpenAPI::fromJsonValue(m_physical_damage_dealt, json[QString("PhysicalDamageDealt")]);
    m_physical_damage_dealt_isSet = !json[QString("PhysicalDamageDealt")].isNull() && m_physical_damage_dealt_isValid;

    m_physical_damage_dealt_to_champions_isValid = ::OpenAPI::fromJsonValue(m_physical_damage_dealt_to_champions, json[QString("PhysicalDamageDealtToChampions")]);
    m_physical_damage_dealt_to_champions_isSet = !json[QString("PhysicalDamageDealtToChampions")].isNull() && m_physical_damage_dealt_to_champions_isValid;

    m_physical_damage_taken_isValid = ::OpenAPI::fromJsonValue(m_physical_damage_taken, json[QString("PhysicalDamageTaken")]);
    m_physical_damage_taken_isSet = !json[QString("PhysicalDamageTaken")].isNull() && m_physical_damage_taken_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerId")]);
    m_player_id_isSet = !json[QString("PlayerId")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_quadra_kills_isValid = ::OpenAPI::fromJsonValue(m_quadra_kills, json[QString("QuadraKills")]);
    m_quadra_kills_isSet = !json[QString("QuadraKills")].isNull() && m_quadra_kills_isValid;

    m_sight_wards_bought_in_game_isValid = ::OpenAPI::fromJsonValue(m_sight_wards_bought_in_game, json[QString("SightWardsBoughtInGame")]);
    m_sight_wards_bought_in_game_isSet = !json[QString("SightWardsBoughtInGame")].isNull() && m_sight_wards_bought_in_game_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;

    m_ten_kills_or_assists_isValid = ::OpenAPI::fromJsonValue(m_ten_kills_or_assists, json[QString("TenKillsOrAssists")]);
    m_ten_kills_or_assists_isSet = !json[QString("TenKillsOrAssists")].isNull() && m_ten_kills_or_assists_isValid;

    m_total_damage_dealt_isValid = ::OpenAPI::fromJsonValue(m_total_damage_dealt, json[QString("TotalDamageDealt")]);
    m_total_damage_dealt_isSet = !json[QString("TotalDamageDealt")].isNull() && m_total_damage_dealt_isValid;

    m_total_damage_dealt_to_champions_isValid = ::OpenAPI::fromJsonValue(m_total_damage_dealt_to_champions, json[QString("TotalDamageDealtToChampions")]);
    m_total_damage_dealt_to_champions_isSet = !json[QString("TotalDamageDealtToChampions")].isNull() && m_total_damage_dealt_to_champions_isValid;

    m_total_damage_taken_isValid = ::OpenAPI::fromJsonValue(m_total_damage_taken, json[QString("TotalDamageTaken")]);
    m_total_damage_taken_isSet = !json[QString("TotalDamageTaken")].isNull() && m_total_damage_taken_isValid;

    m_total_heal_isValid = ::OpenAPI::fromJsonValue(m_total_heal, json[QString("TotalHeal")]);
    m_total_heal_isSet = !json[QString("TotalHeal")].isNull() && m_total_heal_isValid;

    m_total_minions_killed_isValid = ::OpenAPI::fromJsonValue(m_total_minions_killed, json[QString("TotalMinionsKilled")]);
    m_total_minions_killed_isSet = !json[QString("TotalMinionsKilled")].isNull() && m_total_minions_killed_isValid;

    m_total_player_score_isValid = ::OpenAPI::fromJsonValue(m_total_player_score, json[QString("TotalPlayerScore")]);
    m_total_player_score_isSet = !json[QString("TotalPlayerScore")].isNull() && m_total_player_score_isValid;

    m_total_time_crowd_control_dealt_isValid = ::OpenAPI::fromJsonValue(m_total_time_crowd_control_dealt, json[QString("TotalTimeCrowdControlDealt")]);
    m_total_time_crowd_control_dealt_isSet = !json[QString("TotalTimeCrowdControlDealt")].isNull() && m_total_time_crowd_control_dealt_isValid;

    m_total_units_healed_isValid = ::OpenAPI::fromJsonValue(m_total_units_healed, json[QString("TotalUnitsHealed")]);
    m_total_units_healed_isSet = !json[QString("TotalUnitsHealed")].isNull() && m_total_units_healed_isValid;

    m_triple_kills_isValid = ::OpenAPI::fromJsonValue(m_triple_kills, json[QString("TripleKills")]);
    m_triple_kills_isSet = !json[QString("TripleKills")].isNull() && m_triple_kills_isValid;

    m_true_damage_dealt_isValid = ::OpenAPI::fromJsonValue(m_true_damage_dealt, json[QString("TrueDamageDealt")]);
    m_true_damage_dealt_isSet = !json[QString("TrueDamageDealt")].isNull() && m_true_damage_dealt_isValid;

    m_true_damage_dealt_to_champions_isValid = ::OpenAPI::fromJsonValue(m_true_damage_dealt_to_champions, json[QString("TrueDamageDealtToChampions")]);
    m_true_damage_dealt_to_champions_isSet = !json[QString("TrueDamageDealtToChampions")].isNull() && m_true_damage_dealt_to_champions_isValid;

    m_true_damage_taken_isValid = ::OpenAPI::fromJsonValue(m_true_damage_taken, json[QString("TrueDamageTaken")]);
    m_true_damage_taken_isSet = !json[QString("TrueDamageTaken")].isNull() && m_true_damage_taken_isValid;

    m_turret_kills_isValid = ::OpenAPI::fromJsonValue(m_turret_kills, json[QString("TurretKills")]);
    m_turret_kills_isSet = !json[QString("TurretKills")].isNull() && m_turret_kills_isValid;

    m_unreal_kills_isValid = ::OpenAPI::fromJsonValue(m_unreal_kills, json[QString("UnrealKills")]);
    m_unreal_kills_isSet = !json[QString("UnrealKills")].isNull() && m_unreal_kills_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_vision_wards_bought_in_game_isValid = ::OpenAPI::fromJsonValue(m_vision_wards_bought_in_game, json[QString("VisionWardsBoughtInGame")]);
    m_vision_wards_bought_in_game_isSet = !json[QString("VisionWardsBoughtInGame")].isNull() && m_vision_wards_bought_in_game_isValid;

    m_wards_killed_isValid = ::OpenAPI::fromJsonValue(m_wards_killed, json[QString("WardsKilled")]);
    m_wards_killed_isSet = !json[QString("WardsKilled")].isNull() && m_wards_killed_isValid;

    m_wards_placed_isValid = ::OpenAPI::fromJsonValue(m_wards_placed, json[QString("WardsPlaced")]);
    m_wards_placed_isSet = !json[QString("WardsPlaced")].isNull() && m_wards_placed_isValid;
}

QString OAITeamMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_assists_isSet) {
        obj.insert(QString("Assists"), ::OpenAPI::toJsonValue(m_assists));
    }
    if (m_combat_player_score_isSet) {
        obj.insert(QString("CombatPlayerScore"), ::OpenAPI::toJsonValue(m_combat_player_score));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_deaths_isSet) {
        obj.insert(QString("Deaths"), ::OpenAPI::toJsonValue(m_deaths));
    }
    if (m_double_kills_isSet) {
        obj.insert(QString("DoubleKills"), ::OpenAPI::toJsonValue(m_double_kills));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_first_baron_isSet) {
        obj.insert(QString("FirstBaron"), ::OpenAPI::toJsonValue(m_first_baron));
    }
    if (m_first_blood_isSet) {
        obj.insert(QString("FirstBlood"), ::OpenAPI::toJsonValue(m_first_blood));
    }
    if (m_first_dragon_isSet) {
        obj.insert(QString("FirstDragon"), ::OpenAPI::toJsonValue(m_first_dragon));
    }
    if (m_first_inhibitor_isSet) {
        obj.insert(QString("FirstInhibitor"), ::OpenAPI::toJsonValue(m_first_inhibitor));
    }
    if (m_first_rift_herald_isSet) {
        obj.insert(QString("FirstRiftHerald"), ::OpenAPI::toJsonValue(m_first_rift_herald));
    }
    if (m_first_tower_isSet) {
        obj.insert(QString("FirstTower"), ::OpenAPI::toJsonValue(m_first_tower));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_gold_earned_isSet) {
        obj.insert(QString("GoldEarned"), ::OpenAPI::toJsonValue(m_gold_earned));
    }
    if (m_gold_spent_isSet) {
        obj.insert(QString("GoldSpent"), ::OpenAPI::toJsonValue(m_gold_spent));
    }
    if (m_inhibitor_kills_isSet) {
        obj.insert(QString("InhibitorKills"), ::OpenAPI::toJsonValue(m_inhibitor_kills));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("IsClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_killing_spree_isSet) {
        obj.insert(QString("KillingSpree"), ::OpenAPI::toJsonValue(m_killing_spree));
    }
    if (m_kills_isSet) {
        obj.insert(QString("Kills"), ::OpenAPI::toJsonValue(m_kills));
    }
    if (m_largest_critical_strike_isSet) {
        obj.insert(QString("LargestCriticalStrike"), ::OpenAPI::toJsonValue(m_largest_critical_strike));
    }
    if (m_largest_killing_spree_isSet) {
        obj.insert(QString("LargestKillingSpree"), ::OpenAPI::toJsonValue(m_largest_killing_spree));
    }
    if (m_largest_multi_kill_isSet) {
        obj.insert(QString("LargestMultiKill"), ::OpenAPI::toJsonValue(m_largest_multi_kill));
    }
    if (m_longest_time_spent_living_isSet) {
        obj.insert(QString("LongestTimeSpentLiving"), ::OpenAPI::toJsonValue(m_longest_time_spent_living));
    }
    if (m_magic_damage_dealt_isSet) {
        obj.insert(QString("MagicDamageDealt"), ::OpenAPI::toJsonValue(m_magic_damage_dealt));
    }
    if (m_magic_damage_dealt_to_champions_isSet) {
        obj.insert(QString("MagicDamageDealtToChampions"), ::OpenAPI::toJsonValue(m_magic_damage_dealt_to_champions));
    }
    if (m_magic_damage_taken_isSet) {
        obj.insert(QString("MagicDamageTaken"), ::OpenAPI::toJsonValue(m_magic_damage_taken));
    }
    if (m_match_name_isSet) {
        obj.insert(QString("MatchName"), ::OpenAPI::toJsonValue(m_match_name));
    }
    if (m_matches_isSet) {
        obj.insert(QString("Matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_neutral_minions_k_illed_isSet) {
        obj.insert(QString("NeutralMinionsKIlled"), ::OpenAPI::toJsonValue(m_neutral_minions_k_illed));
    }
    if (m_neutral_minions_k_illed_team_jungle_isSet) {
        obj.insert(QString("NeutralMinionsKIlledTeamJungle"), ::OpenAPI::toJsonValue(m_neutral_minions_k_illed_team_jungle));
    }
    if (m_neutral_minions_killed_enemy_jungle_isSet) {
        obj.insert(QString("NeutralMinionsKilledEnemyJungle"), ::OpenAPI::toJsonValue(m_neutral_minions_killed_enemy_jungle));
    }
    if (m_objective_player_score_isSet) {
        obj.insert(QString("ObjectivePlayerScore"), ::OpenAPI::toJsonValue(m_objective_player_score));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentId"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_penta_kills_isSet) {
        obj.insert(QString("PentaKills"), ::OpenAPI::toJsonValue(m_penta_kills));
    }
    if (m_physical_damage_dealt_isSet) {
        obj.insert(QString("PhysicalDamageDealt"), ::OpenAPI::toJsonValue(m_physical_damage_dealt));
    }
    if (m_physical_damage_dealt_to_champions_isSet) {
        obj.insert(QString("PhysicalDamageDealtToChampions"), ::OpenAPI::toJsonValue(m_physical_damage_dealt_to_champions));
    }
    if (m_physical_damage_taken_isSet) {
        obj.insert(QString("PhysicalDamageTaken"), ::OpenAPI::toJsonValue(m_physical_damage_taken));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_quadra_kills_isSet) {
        obj.insert(QString("QuadraKills"), ::OpenAPI::toJsonValue(m_quadra_kills));
    }
    if (m_sight_wards_bought_in_game_isSet) {
        obj.insert(QString("SightWardsBoughtInGame"), ::OpenAPI::toJsonValue(m_sight_wards_bought_in_game));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_ten_kills_or_assists_isSet) {
        obj.insert(QString("TenKillsOrAssists"), ::OpenAPI::toJsonValue(m_ten_kills_or_assists));
    }
    if (m_total_damage_dealt_isSet) {
        obj.insert(QString("TotalDamageDealt"), ::OpenAPI::toJsonValue(m_total_damage_dealt));
    }
    if (m_total_damage_dealt_to_champions_isSet) {
        obj.insert(QString("TotalDamageDealtToChampions"), ::OpenAPI::toJsonValue(m_total_damage_dealt_to_champions));
    }
    if (m_total_damage_taken_isSet) {
        obj.insert(QString("TotalDamageTaken"), ::OpenAPI::toJsonValue(m_total_damage_taken));
    }
    if (m_total_heal_isSet) {
        obj.insert(QString("TotalHeal"), ::OpenAPI::toJsonValue(m_total_heal));
    }
    if (m_total_minions_killed_isSet) {
        obj.insert(QString("TotalMinionsKilled"), ::OpenAPI::toJsonValue(m_total_minions_killed));
    }
    if (m_total_player_score_isSet) {
        obj.insert(QString("TotalPlayerScore"), ::OpenAPI::toJsonValue(m_total_player_score));
    }
    if (m_total_time_crowd_control_dealt_isSet) {
        obj.insert(QString("TotalTimeCrowdControlDealt"), ::OpenAPI::toJsonValue(m_total_time_crowd_control_dealt));
    }
    if (m_total_units_healed_isSet) {
        obj.insert(QString("TotalUnitsHealed"), ::OpenAPI::toJsonValue(m_total_units_healed));
    }
    if (m_triple_kills_isSet) {
        obj.insert(QString("TripleKills"), ::OpenAPI::toJsonValue(m_triple_kills));
    }
    if (m_true_damage_dealt_isSet) {
        obj.insert(QString("TrueDamageDealt"), ::OpenAPI::toJsonValue(m_true_damage_dealt));
    }
    if (m_true_damage_dealt_to_champions_isSet) {
        obj.insert(QString("TrueDamageDealtToChampions"), ::OpenAPI::toJsonValue(m_true_damage_dealt_to_champions));
    }
    if (m_true_damage_taken_isSet) {
        obj.insert(QString("TrueDamageTaken"), ::OpenAPI::toJsonValue(m_true_damage_taken));
    }
    if (m_turret_kills_isSet) {
        obj.insert(QString("TurretKills"), ::OpenAPI::toJsonValue(m_turret_kills));
    }
    if (m_unreal_kills_isSet) {
        obj.insert(QString("UnrealKills"), ::OpenAPI::toJsonValue(m_unreal_kills));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_vision_wards_bought_in_game_isSet) {
        obj.insert(QString("VisionWardsBoughtInGame"), ::OpenAPI::toJsonValue(m_vision_wards_bought_in_game));
    }
    if (m_wards_killed_isSet) {
        obj.insert(QString("WardsKilled"), ::OpenAPI::toJsonValue(m_wards_killed));
    }
    if (m_wards_placed_isSet) {
        obj.insert(QString("WardsPlaced"), ::OpenAPI::toJsonValue(m_wards_placed));
    }
    return obj;
}

double OAITeamMatch::getAssists() const {
    return m_assists;
}
void OAITeamMatch::setAssists(const double &assists) {
    m_assists = assists;
    m_assists_isSet = true;
}

bool OAITeamMatch::is_assists_Set() const{
    return m_assists_isSet;
}

bool OAITeamMatch::is_assists_Valid() const{
    return m_assists_isValid;
}

double OAITeamMatch::getCombatPlayerScore() const {
    return m_combat_player_score;
}
void OAITeamMatch::setCombatPlayerScore(const double &combat_player_score) {
    m_combat_player_score = combat_player_score;
    m_combat_player_score_isSet = true;
}

bool OAITeamMatch::is_combat_player_score_Set() const{
    return m_combat_player_score_isSet;
}

bool OAITeamMatch::is_combat_player_score_Valid() const{
    return m_combat_player_score_isValid;
}

QString OAITeamMatch::getDateTime() const {
    return m_date_time;
}
void OAITeamMatch::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAITeamMatch::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAITeamMatch::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAITeamMatch::getDay() const {
    return m_day;
}
void OAITeamMatch::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAITeamMatch::is_day_Set() const{
    return m_day_isSet;
}

bool OAITeamMatch::is_day_Valid() const{
    return m_day_isValid;
}

double OAITeamMatch::getDeaths() const {
    return m_deaths;
}
void OAITeamMatch::setDeaths(const double &deaths) {
    m_deaths = deaths;
    m_deaths_isSet = true;
}

bool OAITeamMatch::is_deaths_Set() const{
    return m_deaths_isSet;
}

bool OAITeamMatch::is_deaths_Valid() const{
    return m_deaths_isValid;
}

double OAITeamMatch::getDoubleKills() const {
    return m_double_kills;
}
void OAITeamMatch::setDoubleKills(const double &double_kills) {
    m_double_kills = double_kills;
    m_double_kills_isSet = true;
}

bool OAITeamMatch::is_double_kills_Set() const{
    return m_double_kills_isSet;
}

bool OAITeamMatch::is_double_kills_Valid() const{
    return m_double_kills_isValid;
}

double OAITeamMatch::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAITeamMatch::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAITeamMatch::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAITeamMatch::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAITeamMatch::getFirstBaron() const {
    return m_first_baron;
}
void OAITeamMatch::setFirstBaron(const double &first_baron) {
    m_first_baron = first_baron;
    m_first_baron_isSet = true;
}

bool OAITeamMatch::is_first_baron_Set() const{
    return m_first_baron_isSet;
}

bool OAITeamMatch::is_first_baron_Valid() const{
    return m_first_baron_isValid;
}

double OAITeamMatch::getFirstBlood() const {
    return m_first_blood;
}
void OAITeamMatch::setFirstBlood(const double &first_blood) {
    m_first_blood = first_blood;
    m_first_blood_isSet = true;
}

bool OAITeamMatch::is_first_blood_Set() const{
    return m_first_blood_isSet;
}

bool OAITeamMatch::is_first_blood_Valid() const{
    return m_first_blood_isValid;
}

double OAITeamMatch::getFirstDragon() const {
    return m_first_dragon;
}
void OAITeamMatch::setFirstDragon(const double &first_dragon) {
    m_first_dragon = first_dragon;
    m_first_dragon_isSet = true;
}

bool OAITeamMatch::is_first_dragon_Set() const{
    return m_first_dragon_isSet;
}

bool OAITeamMatch::is_first_dragon_Valid() const{
    return m_first_dragon_isValid;
}

double OAITeamMatch::getFirstInhibitor() const {
    return m_first_inhibitor;
}
void OAITeamMatch::setFirstInhibitor(const double &first_inhibitor) {
    m_first_inhibitor = first_inhibitor;
    m_first_inhibitor_isSet = true;
}

bool OAITeamMatch::is_first_inhibitor_Set() const{
    return m_first_inhibitor_isSet;
}

bool OAITeamMatch::is_first_inhibitor_Valid() const{
    return m_first_inhibitor_isValid;
}

double OAITeamMatch::getFirstRiftHerald() const {
    return m_first_rift_herald;
}
void OAITeamMatch::setFirstRiftHerald(const double &first_rift_herald) {
    m_first_rift_herald = first_rift_herald;
    m_first_rift_herald_isSet = true;
}

bool OAITeamMatch::is_first_rift_herald_Set() const{
    return m_first_rift_herald_isSet;
}

bool OAITeamMatch::is_first_rift_herald_Valid() const{
    return m_first_rift_herald_isValid;
}

double OAITeamMatch::getFirstTower() const {
    return m_first_tower;
}
void OAITeamMatch::setFirstTower(const double &first_tower) {
    m_first_tower = first_tower;
    m_first_tower_isSet = true;
}

bool OAITeamMatch::is_first_tower_Set() const{
    return m_first_tower_isSet;
}

bool OAITeamMatch::is_first_tower_Valid() const{
    return m_first_tower_isValid;
}

qint32 OAITeamMatch::getGameId() const {
    return m_game_id;
}
void OAITeamMatch::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAITeamMatch::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAITeamMatch::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAITeamMatch::getGames() const {
    return m_games;
}
void OAITeamMatch::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITeamMatch::is_games_Set() const{
    return m_games_isSet;
}

bool OAITeamMatch::is_games_Valid() const{
    return m_games_isValid;
}

double OAITeamMatch::getGoldEarned() const {
    return m_gold_earned;
}
void OAITeamMatch::setGoldEarned(const double &gold_earned) {
    m_gold_earned = gold_earned;
    m_gold_earned_isSet = true;
}

bool OAITeamMatch::is_gold_earned_Set() const{
    return m_gold_earned_isSet;
}

bool OAITeamMatch::is_gold_earned_Valid() const{
    return m_gold_earned_isValid;
}

double OAITeamMatch::getGoldSpent() const {
    return m_gold_spent;
}
void OAITeamMatch::setGoldSpent(const double &gold_spent) {
    m_gold_spent = gold_spent;
    m_gold_spent_isSet = true;
}

bool OAITeamMatch::is_gold_spent_Set() const{
    return m_gold_spent_isSet;
}

bool OAITeamMatch::is_gold_spent_Valid() const{
    return m_gold_spent_isValid;
}

double OAITeamMatch::getInhibitorKills() const {
    return m_inhibitor_kills;
}
void OAITeamMatch::setInhibitorKills(const double &inhibitor_kills) {
    m_inhibitor_kills = inhibitor_kills;
    m_inhibitor_kills_isSet = true;
}

bool OAITeamMatch::is_inhibitor_kills_Set() const{
    return m_inhibitor_kills_isSet;
}

bool OAITeamMatch::is_inhibitor_kills_Valid() const{
    return m_inhibitor_kills_isValid;
}

bool OAITeamMatch::isIsClosed() const {
    return m_is_closed;
}
void OAITeamMatch::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAITeamMatch::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAITeamMatch::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

double OAITeamMatch::getKillingSpree() const {
    return m_killing_spree;
}
void OAITeamMatch::setKillingSpree(const double &killing_spree) {
    m_killing_spree = killing_spree;
    m_killing_spree_isSet = true;
}

bool OAITeamMatch::is_killing_spree_Set() const{
    return m_killing_spree_isSet;
}

bool OAITeamMatch::is_killing_spree_Valid() const{
    return m_killing_spree_isValid;
}

double OAITeamMatch::getKills() const {
    return m_kills;
}
void OAITeamMatch::setKills(const double &kills) {
    m_kills = kills;
    m_kills_isSet = true;
}

bool OAITeamMatch::is_kills_Set() const{
    return m_kills_isSet;
}

bool OAITeamMatch::is_kills_Valid() const{
    return m_kills_isValid;
}

double OAITeamMatch::getLargestCriticalStrike() const {
    return m_largest_critical_strike;
}
void OAITeamMatch::setLargestCriticalStrike(const double &largest_critical_strike) {
    m_largest_critical_strike = largest_critical_strike;
    m_largest_critical_strike_isSet = true;
}

bool OAITeamMatch::is_largest_critical_strike_Set() const{
    return m_largest_critical_strike_isSet;
}

bool OAITeamMatch::is_largest_critical_strike_Valid() const{
    return m_largest_critical_strike_isValid;
}

double OAITeamMatch::getLargestKillingSpree() const {
    return m_largest_killing_spree;
}
void OAITeamMatch::setLargestKillingSpree(const double &largest_killing_spree) {
    m_largest_killing_spree = largest_killing_spree;
    m_largest_killing_spree_isSet = true;
}

bool OAITeamMatch::is_largest_killing_spree_Set() const{
    return m_largest_killing_spree_isSet;
}

bool OAITeamMatch::is_largest_killing_spree_Valid() const{
    return m_largest_killing_spree_isValid;
}

double OAITeamMatch::getLargestMultiKill() const {
    return m_largest_multi_kill;
}
void OAITeamMatch::setLargestMultiKill(const double &largest_multi_kill) {
    m_largest_multi_kill = largest_multi_kill;
    m_largest_multi_kill_isSet = true;
}

bool OAITeamMatch::is_largest_multi_kill_Set() const{
    return m_largest_multi_kill_isSet;
}

bool OAITeamMatch::is_largest_multi_kill_Valid() const{
    return m_largest_multi_kill_isValid;
}

double OAITeamMatch::getLongestTimeSpentLiving() const {
    return m_longest_time_spent_living;
}
void OAITeamMatch::setLongestTimeSpentLiving(const double &longest_time_spent_living) {
    m_longest_time_spent_living = longest_time_spent_living;
    m_longest_time_spent_living_isSet = true;
}

bool OAITeamMatch::is_longest_time_spent_living_Set() const{
    return m_longest_time_spent_living_isSet;
}

bool OAITeamMatch::is_longest_time_spent_living_Valid() const{
    return m_longest_time_spent_living_isValid;
}

double OAITeamMatch::getMagicDamageDealt() const {
    return m_magic_damage_dealt;
}
void OAITeamMatch::setMagicDamageDealt(const double &magic_damage_dealt) {
    m_magic_damage_dealt = magic_damage_dealt;
    m_magic_damage_dealt_isSet = true;
}

bool OAITeamMatch::is_magic_damage_dealt_Set() const{
    return m_magic_damage_dealt_isSet;
}

bool OAITeamMatch::is_magic_damage_dealt_Valid() const{
    return m_magic_damage_dealt_isValid;
}

double OAITeamMatch::getMagicDamageDealtToChampions() const {
    return m_magic_damage_dealt_to_champions;
}
void OAITeamMatch::setMagicDamageDealtToChampions(const double &magic_damage_dealt_to_champions) {
    m_magic_damage_dealt_to_champions = magic_damage_dealt_to_champions;
    m_magic_damage_dealt_to_champions_isSet = true;
}

bool OAITeamMatch::is_magic_damage_dealt_to_champions_Set() const{
    return m_magic_damage_dealt_to_champions_isSet;
}

bool OAITeamMatch::is_magic_damage_dealt_to_champions_Valid() const{
    return m_magic_damage_dealt_to_champions_isValid;
}

double OAITeamMatch::getMagicDamageTaken() const {
    return m_magic_damage_taken;
}
void OAITeamMatch::setMagicDamageTaken(const double &magic_damage_taken) {
    m_magic_damage_taken = magic_damage_taken;
    m_magic_damage_taken_isSet = true;
}

bool OAITeamMatch::is_magic_damage_taken_Set() const{
    return m_magic_damage_taken_isSet;
}

bool OAITeamMatch::is_magic_damage_taken_Valid() const{
    return m_magic_damage_taken_isValid;
}

QString OAITeamMatch::getMatchName() const {
    return m_match_name;
}
void OAITeamMatch::setMatchName(const QString &match_name) {
    m_match_name = match_name;
    m_match_name_isSet = true;
}

bool OAITeamMatch::is_match_name_Set() const{
    return m_match_name_isSet;
}

bool OAITeamMatch::is_match_name_Valid() const{
    return m_match_name_isValid;
}

qint32 OAITeamMatch::getMatches() const {
    return m_matches;
}
void OAITeamMatch::setMatches(const qint32 &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAITeamMatch::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAITeamMatch::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAITeamMatch::getName() const {
    return m_name;
}
void OAITeamMatch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamMatch::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamMatch::is_name_Valid() const{
    return m_name_isValid;
}

double OAITeamMatch::getNeutralMinionsKIlled() const {
    return m_neutral_minions_k_illed;
}
void OAITeamMatch::setNeutralMinionsKIlled(const double &neutral_minions_k_illed) {
    m_neutral_minions_k_illed = neutral_minions_k_illed;
    m_neutral_minions_k_illed_isSet = true;
}

bool OAITeamMatch::is_neutral_minions_k_illed_Set() const{
    return m_neutral_minions_k_illed_isSet;
}

bool OAITeamMatch::is_neutral_minions_k_illed_Valid() const{
    return m_neutral_minions_k_illed_isValid;
}

double OAITeamMatch::getNeutralMinionsKIlledTeamJungle() const {
    return m_neutral_minions_k_illed_team_jungle;
}
void OAITeamMatch::setNeutralMinionsKIlledTeamJungle(const double &neutral_minions_k_illed_team_jungle) {
    m_neutral_minions_k_illed_team_jungle = neutral_minions_k_illed_team_jungle;
    m_neutral_minions_k_illed_team_jungle_isSet = true;
}

bool OAITeamMatch::is_neutral_minions_k_illed_team_jungle_Set() const{
    return m_neutral_minions_k_illed_team_jungle_isSet;
}

bool OAITeamMatch::is_neutral_minions_k_illed_team_jungle_Valid() const{
    return m_neutral_minions_k_illed_team_jungle_isValid;
}

double OAITeamMatch::getNeutralMinionsKilledEnemyJungle() const {
    return m_neutral_minions_killed_enemy_jungle;
}
void OAITeamMatch::setNeutralMinionsKilledEnemyJungle(const double &neutral_minions_killed_enemy_jungle) {
    m_neutral_minions_killed_enemy_jungle = neutral_minions_killed_enemy_jungle;
    m_neutral_minions_killed_enemy_jungle_isSet = true;
}

bool OAITeamMatch::is_neutral_minions_killed_enemy_jungle_Set() const{
    return m_neutral_minions_killed_enemy_jungle_isSet;
}

bool OAITeamMatch::is_neutral_minions_killed_enemy_jungle_Valid() const{
    return m_neutral_minions_killed_enemy_jungle_isValid;
}

double OAITeamMatch::getObjectivePlayerScore() const {
    return m_objective_player_score;
}
void OAITeamMatch::setObjectivePlayerScore(const double &objective_player_score) {
    m_objective_player_score = objective_player_score;
    m_objective_player_score_isSet = true;
}

bool OAITeamMatch::is_objective_player_score_Set() const{
    return m_objective_player_score_isSet;
}

bool OAITeamMatch::is_objective_player_score_Valid() const{
    return m_objective_player_score_isValid;
}

QString OAITeamMatch::getOpponent() const {
    return m_opponent;
}
void OAITeamMatch::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAITeamMatch::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAITeamMatch::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAITeamMatch::getOpponentId() const {
    return m_opponent_id;
}
void OAITeamMatch::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAITeamMatch::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAITeamMatch::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

double OAITeamMatch::getPentaKills() const {
    return m_penta_kills;
}
void OAITeamMatch::setPentaKills(const double &penta_kills) {
    m_penta_kills = penta_kills;
    m_penta_kills_isSet = true;
}

bool OAITeamMatch::is_penta_kills_Set() const{
    return m_penta_kills_isSet;
}

bool OAITeamMatch::is_penta_kills_Valid() const{
    return m_penta_kills_isValid;
}

double OAITeamMatch::getPhysicalDamageDealt() const {
    return m_physical_damage_dealt;
}
void OAITeamMatch::setPhysicalDamageDealt(const double &physical_damage_dealt) {
    m_physical_damage_dealt = physical_damage_dealt;
    m_physical_damage_dealt_isSet = true;
}

bool OAITeamMatch::is_physical_damage_dealt_Set() const{
    return m_physical_damage_dealt_isSet;
}

bool OAITeamMatch::is_physical_damage_dealt_Valid() const{
    return m_physical_damage_dealt_isValid;
}

double OAITeamMatch::getPhysicalDamageDealtToChampions() const {
    return m_physical_damage_dealt_to_champions;
}
void OAITeamMatch::setPhysicalDamageDealtToChampions(const double &physical_damage_dealt_to_champions) {
    m_physical_damage_dealt_to_champions = physical_damage_dealt_to_champions;
    m_physical_damage_dealt_to_champions_isSet = true;
}

bool OAITeamMatch::is_physical_damage_dealt_to_champions_Set() const{
    return m_physical_damage_dealt_to_champions_isSet;
}

bool OAITeamMatch::is_physical_damage_dealt_to_champions_Valid() const{
    return m_physical_damage_dealt_to_champions_isValid;
}

double OAITeamMatch::getPhysicalDamageTaken() const {
    return m_physical_damage_taken;
}
void OAITeamMatch::setPhysicalDamageTaken(const double &physical_damage_taken) {
    m_physical_damage_taken = physical_damage_taken;
    m_physical_damage_taken_isSet = true;
}

bool OAITeamMatch::is_physical_damage_taken_Set() const{
    return m_physical_damage_taken_isSet;
}

bool OAITeamMatch::is_physical_damage_taken_Valid() const{
    return m_physical_damage_taken_isValid;
}

qint32 OAITeamMatch::getPlayerId() const {
    return m_player_id;
}
void OAITeamMatch::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAITeamMatch::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAITeamMatch::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAITeamMatch::getPosition() const {
    return m_position;
}
void OAITeamMatch::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAITeamMatch::is_position_Set() const{
    return m_position_isSet;
}

bool OAITeamMatch::is_position_Valid() const{
    return m_position_isValid;
}

double OAITeamMatch::getQuadraKills() const {
    return m_quadra_kills;
}
void OAITeamMatch::setQuadraKills(const double &quadra_kills) {
    m_quadra_kills = quadra_kills;
    m_quadra_kills_isSet = true;
}

bool OAITeamMatch::is_quadra_kills_Set() const{
    return m_quadra_kills_isSet;
}

bool OAITeamMatch::is_quadra_kills_Valid() const{
    return m_quadra_kills_isValid;
}

double OAITeamMatch::getSightWardsBoughtInGame() const {
    return m_sight_wards_bought_in_game;
}
void OAITeamMatch::setSightWardsBoughtInGame(const double &sight_wards_bought_in_game) {
    m_sight_wards_bought_in_game = sight_wards_bought_in_game;
    m_sight_wards_bought_in_game_isSet = true;
}

bool OAITeamMatch::is_sight_wards_bought_in_game_Set() const{
    return m_sight_wards_bought_in_game_isSet;
}

bool OAITeamMatch::is_sight_wards_bought_in_game_Valid() const{
    return m_sight_wards_bought_in_game_isValid;
}

QString OAITeamMatch::getTeam() const {
    return m_team;
}
void OAITeamMatch::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamMatch::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamMatch::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAITeamMatch::getTeamId() const {
    return m_team_id;
}
void OAITeamMatch::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamMatch::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamMatch::is_team_id_Valid() const{
    return m_team_id_isValid;
}

double OAITeamMatch::getTenKillsOrAssists() const {
    return m_ten_kills_or_assists;
}
void OAITeamMatch::setTenKillsOrAssists(const double &ten_kills_or_assists) {
    m_ten_kills_or_assists = ten_kills_or_assists;
    m_ten_kills_or_assists_isSet = true;
}

bool OAITeamMatch::is_ten_kills_or_assists_Set() const{
    return m_ten_kills_or_assists_isSet;
}

bool OAITeamMatch::is_ten_kills_or_assists_Valid() const{
    return m_ten_kills_or_assists_isValid;
}

double OAITeamMatch::getTotalDamageDealt() const {
    return m_total_damage_dealt;
}
void OAITeamMatch::setTotalDamageDealt(const double &total_damage_dealt) {
    m_total_damage_dealt = total_damage_dealt;
    m_total_damage_dealt_isSet = true;
}

bool OAITeamMatch::is_total_damage_dealt_Set() const{
    return m_total_damage_dealt_isSet;
}

bool OAITeamMatch::is_total_damage_dealt_Valid() const{
    return m_total_damage_dealt_isValid;
}

double OAITeamMatch::getTotalDamageDealtToChampions() const {
    return m_total_damage_dealt_to_champions;
}
void OAITeamMatch::setTotalDamageDealtToChampions(const double &total_damage_dealt_to_champions) {
    m_total_damage_dealt_to_champions = total_damage_dealt_to_champions;
    m_total_damage_dealt_to_champions_isSet = true;
}

bool OAITeamMatch::is_total_damage_dealt_to_champions_Set() const{
    return m_total_damage_dealt_to_champions_isSet;
}

bool OAITeamMatch::is_total_damage_dealt_to_champions_Valid() const{
    return m_total_damage_dealt_to_champions_isValid;
}

double OAITeamMatch::getTotalDamageTaken() const {
    return m_total_damage_taken;
}
void OAITeamMatch::setTotalDamageTaken(const double &total_damage_taken) {
    m_total_damage_taken = total_damage_taken;
    m_total_damage_taken_isSet = true;
}

bool OAITeamMatch::is_total_damage_taken_Set() const{
    return m_total_damage_taken_isSet;
}

bool OAITeamMatch::is_total_damage_taken_Valid() const{
    return m_total_damage_taken_isValid;
}

double OAITeamMatch::getTotalHeal() const {
    return m_total_heal;
}
void OAITeamMatch::setTotalHeal(const double &total_heal) {
    m_total_heal = total_heal;
    m_total_heal_isSet = true;
}

bool OAITeamMatch::is_total_heal_Set() const{
    return m_total_heal_isSet;
}

bool OAITeamMatch::is_total_heal_Valid() const{
    return m_total_heal_isValid;
}

double OAITeamMatch::getTotalMinionsKilled() const {
    return m_total_minions_killed;
}
void OAITeamMatch::setTotalMinionsKilled(const double &total_minions_killed) {
    m_total_minions_killed = total_minions_killed;
    m_total_minions_killed_isSet = true;
}

bool OAITeamMatch::is_total_minions_killed_Set() const{
    return m_total_minions_killed_isSet;
}

bool OAITeamMatch::is_total_minions_killed_Valid() const{
    return m_total_minions_killed_isValid;
}

double OAITeamMatch::getTotalPlayerScore() const {
    return m_total_player_score;
}
void OAITeamMatch::setTotalPlayerScore(const double &total_player_score) {
    m_total_player_score = total_player_score;
    m_total_player_score_isSet = true;
}

bool OAITeamMatch::is_total_player_score_Set() const{
    return m_total_player_score_isSet;
}

bool OAITeamMatch::is_total_player_score_Valid() const{
    return m_total_player_score_isValid;
}

double OAITeamMatch::getTotalTimeCrowdControlDealt() const {
    return m_total_time_crowd_control_dealt;
}
void OAITeamMatch::setTotalTimeCrowdControlDealt(const double &total_time_crowd_control_dealt) {
    m_total_time_crowd_control_dealt = total_time_crowd_control_dealt;
    m_total_time_crowd_control_dealt_isSet = true;
}

bool OAITeamMatch::is_total_time_crowd_control_dealt_Set() const{
    return m_total_time_crowd_control_dealt_isSet;
}

bool OAITeamMatch::is_total_time_crowd_control_dealt_Valid() const{
    return m_total_time_crowd_control_dealt_isValid;
}

double OAITeamMatch::getTotalUnitsHealed() const {
    return m_total_units_healed;
}
void OAITeamMatch::setTotalUnitsHealed(const double &total_units_healed) {
    m_total_units_healed = total_units_healed;
    m_total_units_healed_isSet = true;
}

bool OAITeamMatch::is_total_units_healed_Set() const{
    return m_total_units_healed_isSet;
}

bool OAITeamMatch::is_total_units_healed_Valid() const{
    return m_total_units_healed_isValid;
}

double OAITeamMatch::getTripleKills() const {
    return m_triple_kills;
}
void OAITeamMatch::setTripleKills(const double &triple_kills) {
    m_triple_kills = triple_kills;
    m_triple_kills_isSet = true;
}

bool OAITeamMatch::is_triple_kills_Set() const{
    return m_triple_kills_isSet;
}

bool OAITeamMatch::is_triple_kills_Valid() const{
    return m_triple_kills_isValid;
}

double OAITeamMatch::getTrueDamageDealt() const {
    return m_true_damage_dealt;
}
void OAITeamMatch::setTrueDamageDealt(const double &true_damage_dealt) {
    m_true_damage_dealt = true_damage_dealt;
    m_true_damage_dealt_isSet = true;
}

bool OAITeamMatch::is_true_damage_dealt_Set() const{
    return m_true_damage_dealt_isSet;
}

bool OAITeamMatch::is_true_damage_dealt_Valid() const{
    return m_true_damage_dealt_isValid;
}

double OAITeamMatch::getTrueDamageDealtToChampions() const {
    return m_true_damage_dealt_to_champions;
}
void OAITeamMatch::setTrueDamageDealtToChampions(const double &true_damage_dealt_to_champions) {
    m_true_damage_dealt_to_champions = true_damage_dealt_to_champions;
    m_true_damage_dealt_to_champions_isSet = true;
}

bool OAITeamMatch::is_true_damage_dealt_to_champions_Set() const{
    return m_true_damage_dealt_to_champions_isSet;
}

bool OAITeamMatch::is_true_damage_dealt_to_champions_Valid() const{
    return m_true_damage_dealt_to_champions_isValid;
}

double OAITeamMatch::getTrueDamageTaken() const {
    return m_true_damage_taken;
}
void OAITeamMatch::setTrueDamageTaken(const double &true_damage_taken) {
    m_true_damage_taken = true_damage_taken;
    m_true_damage_taken_isSet = true;
}

bool OAITeamMatch::is_true_damage_taken_Set() const{
    return m_true_damage_taken_isSet;
}

bool OAITeamMatch::is_true_damage_taken_Valid() const{
    return m_true_damage_taken_isValid;
}

double OAITeamMatch::getTurretKills() const {
    return m_turret_kills;
}
void OAITeamMatch::setTurretKills(const double &turret_kills) {
    m_turret_kills = turret_kills;
    m_turret_kills_isSet = true;
}

bool OAITeamMatch::is_turret_kills_Set() const{
    return m_turret_kills_isSet;
}

bool OAITeamMatch::is_turret_kills_Valid() const{
    return m_turret_kills_isValid;
}

double OAITeamMatch::getUnrealKills() const {
    return m_unreal_kills;
}
void OAITeamMatch::setUnrealKills(const double &unreal_kills) {
    m_unreal_kills = unreal_kills;
    m_unreal_kills_isSet = true;
}

bool OAITeamMatch::is_unreal_kills_Set() const{
    return m_unreal_kills_isSet;
}

bool OAITeamMatch::is_unreal_kills_Valid() const{
    return m_unreal_kills_isValid;
}

QString OAITeamMatch::getUpdated() const {
    return m_updated;
}
void OAITeamMatch::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITeamMatch::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITeamMatch::is_updated_Valid() const{
    return m_updated_isValid;
}

double OAITeamMatch::getVisionWardsBoughtInGame() const {
    return m_vision_wards_bought_in_game;
}
void OAITeamMatch::setVisionWardsBoughtInGame(const double &vision_wards_bought_in_game) {
    m_vision_wards_bought_in_game = vision_wards_bought_in_game;
    m_vision_wards_bought_in_game_isSet = true;
}

bool OAITeamMatch::is_vision_wards_bought_in_game_Set() const{
    return m_vision_wards_bought_in_game_isSet;
}

bool OAITeamMatch::is_vision_wards_bought_in_game_Valid() const{
    return m_vision_wards_bought_in_game_isValid;
}

double OAITeamMatch::getWardsKilled() const {
    return m_wards_killed;
}
void OAITeamMatch::setWardsKilled(const double &wards_killed) {
    m_wards_killed = wards_killed;
    m_wards_killed_isSet = true;
}

bool OAITeamMatch::is_wards_killed_Set() const{
    return m_wards_killed_isSet;
}

bool OAITeamMatch::is_wards_killed_Valid() const{
    return m_wards_killed_isValid;
}

double OAITeamMatch::getWardsPlaced() const {
    return m_wards_placed;
}
void OAITeamMatch::setWardsPlaced(const double &wards_placed) {
    m_wards_placed = wards_placed;
    m_wards_placed_isSet = true;
}

bool OAITeamMatch::is_wards_placed_Set() const{
    return m_wards_placed_isSet;
}

bool OAITeamMatch::is_wards_placed_Valid() const{
    return m_wards_placed_isValid;
}

bool OAITeamMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_combat_player_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deaths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_baron_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_blood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_dragon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_inhibitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_rift_herald_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_tower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gold_earned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gold_spent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inhibitor_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_killing_spree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_largest_critical_strike_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_largest_killing_spree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_largest_multi_kill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longest_time_spent_living_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magic_damage_dealt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magic_damage_dealt_to_champions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_magic_damage_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_minions_k_illed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_minions_k_illed_team_jungle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_minions_killed_enemy_jungle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objective_player_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penta_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_damage_dealt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_damage_dealt_to_champions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_damage_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quadra_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sight_wards_bought_in_game_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ten_kills_or_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_damage_dealt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_damage_dealt_to_champions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_damage_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_heal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_minions_killed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_player_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_crowd_control_dealt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_units_healed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triple_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_damage_dealt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_damage_dealt_to_champions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_damage_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turret_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreal_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vision_wards_bought_in_game_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wards_killed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wards_placed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
