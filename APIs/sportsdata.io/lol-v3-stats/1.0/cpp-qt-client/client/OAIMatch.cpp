/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch::OAIMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch::OAIMatch() {
    this->initializeModel();
}

OAIMatch::~OAIMatch() {}

void OAIMatch::initializeModel() {

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_game_version_isSet = false;
    m_game_version_isValid = false;

    m_map_name_isSet = false;
    m_map_name_isValid = false;

    m_match_bans_isSet = false;
    m_match_bans_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_player_matches_isSet = false;
    m_player_matches_isValid = false;

    m_team_matches_isSet = false;
    m_team_matches_isValid = false;

    m_winning_team_id_isSet = false;
    m_winning_team_id_isValid = false;
}

void OAIMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch::fromJsonObject(QJsonObject json) {

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameId")]);
    m_game_id_isSet = !json[QString("GameId")].isNull() && m_game_id_isValid;

    m_game_version_isValid = ::OpenAPI::fromJsonValue(m_game_version, json[QString("GameVersion")]);
    m_game_version_isSet = !json[QString("GameVersion")].isNull() && m_game_version_isValid;

    m_map_name_isValid = ::OpenAPI::fromJsonValue(m_map_name, json[QString("MapName")]);
    m_map_name_isSet = !json[QString("MapName")].isNull() && m_map_name_isValid;

    m_match_bans_isValid = ::OpenAPI::fromJsonValue(m_match_bans, json[QString("MatchBans")]);
    m_match_bans_isSet = !json[QString("MatchBans")].isNull() && m_match_bans_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_player_matches_isValid = ::OpenAPI::fromJsonValue(m_player_matches, json[QString("PlayerMatches")]);
    m_player_matches_isSet = !json[QString("PlayerMatches")].isNull() && m_player_matches_isValid;

    m_team_matches_isValid = ::OpenAPI::fromJsonValue(m_team_matches, json[QString("TeamMatches")]);
    m_team_matches_isSet = !json[QString("TeamMatches")].isNull() && m_team_matches_isValid;

    m_winning_team_id_isValid = ::OpenAPI::fromJsonValue(m_winning_team_id, json[QString("WinningTeamId")]);
    m_winning_team_id_isSet = !json[QString("WinningTeamId")].isNull() && m_winning_team_id_isValid;
}

QString OAIMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_game_id_isSet) {
        obj.insert(QString("GameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_game_version_isSet) {
        obj.insert(QString("GameVersion"), ::OpenAPI::toJsonValue(m_game_version));
    }
    if (m_map_name_isSet) {
        obj.insert(QString("MapName"), ::OpenAPI::toJsonValue(m_map_name));
    }
    if (m_match_bans.size() > 0) {
        obj.insert(QString("MatchBans"), ::OpenAPI::toJsonValue(m_match_bans));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_player_matches.size() > 0) {
        obj.insert(QString("PlayerMatches"), ::OpenAPI::toJsonValue(m_player_matches));
    }
    if (m_team_matches.size() > 0) {
        obj.insert(QString("TeamMatches"), ::OpenAPI::toJsonValue(m_team_matches));
    }
    if (m_winning_team_id_isSet) {
        obj.insert(QString("WinningTeamId"), ::OpenAPI::toJsonValue(m_winning_team_id));
    }
    return obj;
}

qint32 OAIMatch::getGameId() const {
    return m_game_id;
}
void OAIMatch::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIMatch::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIMatch::is_game_id_Valid() const{
    return m_game_id_isValid;
}

QString OAIMatch::getGameVersion() const {
    return m_game_version;
}
void OAIMatch::setGameVersion(const QString &game_version) {
    m_game_version = game_version;
    m_game_version_isSet = true;
}

bool OAIMatch::is_game_version_Set() const{
    return m_game_version_isSet;
}

bool OAIMatch::is_game_version_Valid() const{
    return m_game_version_isValid;
}

QString OAIMatch::getMapName() const {
    return m_map_name;
}
void OAIMatch::setMapName(const QString &map_name) {
    m_map_name = map_name;
    m_map_name_isSet = true;
}

bool OAIMatch::is_map_name_Set() const{
    return m_map_name_isSet;
}

bool OAIMatch::is_map_name_Valid() const{
    return m_map_name_isValid;
}

QList<OAIMatchBan> OAIMatch::getMatchBans() const {
    return m_match_bans;
}
void OAIMatch::setMatchBans(const QList<OAIMatchBan> &match_bans) {
    m_match_bans = match_bans;
    m_match_bans_isSet = true;
}

bool OAIMatch::is_match_bans_Set() const{
    return m_match_bans_isSet;
}

bool OAIMatch::is_match_bans_Valid() const{
    return m_match_bans_isValid;
}

qint32 OAIMatch::getNumber() const {
    return m_number;
}
void OAIMatch::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIMatch::is_number_Set() const{
    return m_number_isSet;
}

bool OAIMatch::is_number_Valid() const{
    return m_number_isValid;
}

QList<OAIPlayerMatch> OAIMatch::getPlayerMatches() const {
    return m_player_matches;
}
void OAIMatch::setPlayerMatches(const QList<OAIPlayerMatch> &player_matches) {
    m_player_matches = player_matches;
    m_player_matches_isSet = true;
}

bool OAIMatch::is_player_matches_Set() const{
    return m_player_matches_isSet;
}

bool OAIMatch::is_player_matches_Valid() const{
    return m_player_matches_isValid;
}

QList<OAITeamMatch> OAIMatch::getTeamMatches() const {
    return m_team_matches;
}
void OAIMatch::setTeamMatches(const QList<OAITeamMatch> &team_matches) {
    m_team_matches = team_matches;
    m_team_matches_isSet = true;
}

bool OAIMatch::is_team_matches_Set() const{
    return m_team_matches_isSet;
}

bool OAIMatch::is_team_matches_Valid() const{
    return m_team_matches_isValid;
}

qint32 OAIMatch::getWinningTeamId() const {
    return m_winning_team_id;
}
void OAIMatch::setWinningTeamId(const qint32 &winning_team_id) {
    m_winning_team_id = winning_team_id;
    m_winning_team_id_isSet = true;
}

bool OAIMatch::is_winning_team_id_Set() const{
    return m_winning_team_id_isSet;
}

bool OAIMatch::is_winning_team_id_Valid() const{
    return m_winning_team_id_isValid;
}

bool OAIMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_bans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_winning_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
