# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_ban import MatchBan
from openapi_server.models.player_match import PlayerMatch
from openapi_server.models.team_match import TeamMatch
from openapi_server import util


class Match(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_id: int=None, game_version: str=None, map_name: str=None, match_bans: List[MatchBan]=None, number: int=None, player_matches: List[PlayerMatch]=None, team_matches: List[TeamMatch]=None, winning_team_id: int=None):
        """Match - a model defined in OpenAPI

        :param game_id: The game_id of this Match.
        :param game_version: The game_version of this Match.
        :param map_name: The map_name of this Match.
        :param match_bans: The match_bans of this Match.
        :param number: The number of this Match.
        :param player_matches: The player_matches of this Match.
        :param team_matches: The team_matches of this Match.
        :param winning_team_id: The winning_team_id of this Match.
        """
        self.openapi_types = {
            'game_id': int,
            'game_version': str,
            'map_name': str,
            'match_bans': List[MatchBan],
            'number': int,
            'player_matches': List[PlayerMatch],
            'team_matches': List[TeamMatch],
            'winning_team_id': int
        }

        self.attribute_map = {
            'game_id': 'GameId',
            'game_version': 'GameVersion',
            'map_name': 'MapName',
            'match_bans': 'MatchBans',
            'number': 'Number',
            'player_matches': 'PlayerMatches',
            'team_matches': 'TeamMatches',
            'winning_team_id': 'WinningTeamId'
        }

        self._game_id = game_id
        self._game_version = game_version
        self._map_name = map_name
        self._match_bans = match_bans
        self._number = number
        self._player_matches = player_matches
        self._team_matches = team_matches
        self._winning_team_id = winning_team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Match':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match of this Match.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_id(self):
        """Gets the game_id of this Match.


        :return: The game_id of this Match.
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this Match.


        :param game_id: The game_id of this Match.
        :type game_id: int
        """

        self._game_id = game_id

    @property
    def game_version(self):
        """Gets the game_version of this Match.


        :return: The game_version of this Match.
        :rtype: str
        """
        return self._game_version

    @game_version.setter
    def game_version(self, game_version):
        """Sets the game_version of this Match.


        :param game_version: The game_version of this Match.
        :type game_version: str
        """

        self._game_version = game_version

    @property
    def map_name(self):
        """Gets the map_name of this Match.


        :return: The map_name of this Match.
        :rtype: str
        """
        return self._map_name

    @map_name.setter
    def map_name(self, map_name):
        """Sets the map_name of this Match.


        :param map_name: The map_name of this Match.
        :type map_name: str
        """

        self._map_name = map_name

    @property
    def match_bans(self):
        """Gets the match_bans of this Match.


        :return: The match_bans of this Match.
        :rtype: List[MatchBan]
        """
        return self._match_bans

    @match_bans.setter
    def match_bans(self, match_bans):
        """Sets the match_bans of this Match.


        :param match_bans: The match_bans of this Match.
        :type match_bans: List[MatchBan]
        """

        self._match_bans = match_bans

    @property
    def number(self):
        """Gets the number of this Match.


        :return: The number of this Match.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Match.


        :param number: The number of this Match.
        :type number: int
        """

        self._number = number

    @property
    def player_matches(self):
        """Gets the player_matches of this Match.


        :return: The player_matches of this Match.
        :rtype: List[PlayerMatch]
        """
        return self._player_matches

    @player_matches.setter
    def player_matches(self, player_matches):
        """Sets the player_matches of this Match.


        :param player_matches: The player_matches of this Match.
        :type player_matches: List[PlayerMatch]
        """

        self._player_matches = player_matches

    @property
    def team_matches(self):
        """Gets the team_matches of this Match.


        :return: The team_matches of this Match.
        :rtype: List[TeamMatch]
        """
        return self._team_matches

    @team_matches.setter
    def team_matches(self, team_matches):
        """Sets the team_matches of this Match.


        :param team_matches: The team_matches of this Match.
        :type team_matches: List[TeamMatch]
        """

        self._team_matches = team_matches

    @property
    def winning_team_id(self):
        """Gets the winning_team_id of this Match.


        :return: The winning_team_id of this Match.
        :rtype: int
        """
        return self._winning_team_id

    @winning_team_id.setter
    def winning_team_id(self, winning_team_id):
        """Sets the winning_team_id of this Match.


        :param winning_team_id: The winning_team_id of this Match.
        :type winning_team_id: int
        """

        self._winning_team_id = winning_team_id
