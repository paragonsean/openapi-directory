/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoLV3Stats);
  }
}(this, function(expect, LoLV3Stats) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LoLV3Stats.Champion();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Champion', function() {
    it('should create an instance of Champion', function() {
      // uncomment below and update the code to test Champion
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be.a(LoLV3Stats.Champion);
    });

    it('should have the property armor (base name: "Armor")', function() {
      // uncomment below and update the code to test the property armor
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property armorPerLevel (base name: "ArmorPerLevel")', function() {
      // uncomment below and update the code to test the property armorPerLevel
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property attack (base name: "Attack")', function() {
      // uncomment below and update the code to test the property attack
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property attackDamage (base name: "AttackDamage")', function() {
      // uncomment below and update the code to test the property attackDamage
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property attackDamagePerLevel (base name: "AttackDamagePerLevel")', function() {
      // uncomment below and update the code to test the property attackDamagePerLevel
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property attackRange (base name: "AttackRange")', function() {
      // uncomment below and update the code to test the property attackRange
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property attackSpeedOffset (base name: "AttackSpeedOffset")', function() {
      // uncomment below and update the code to test the property attackSpeedOffset
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property championId (base name: "ChampionId")', function() {
      // uncomment below and update the code to test the property championId
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property defense (base name: "Defense")', function() {
      // uncomment below and update the code to test the property defense
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property difficulty (base name: "Difficulty")', function() {
      // uncomment below and update the code to test the property difficulty
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property hp (base name: "Hp")', function() {
      // uncomment below and update the code to test the property hp
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property hpRegen (base name: "HpRegen")', function() {
      // uncomment below and update the code to test the property hpRegen
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property hpRegenPerLevel (base name: "HpRegenPerLevel")', function() {
      // uncomment below and update the code to test the property hpRegenPerLevel
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property hpUpPerLevel (base name: "HpUpPerLevel")', function() {
      // uncomment below and update the code to test the property hpUpPerLevel
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property magic (base name: "Magic")', function() {
      // uncomment below and update the code to test the property magic
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property moveSpeed (base name: "MoveSpeed")', function() {
      // uncomment below and update the code to test the property moveSpeed
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property mp (base name: "Mp")', function() {
      // uncomment below and update the code to test the property mp
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property mpRegen (base name: "MpRegen")', function() {
      // uncomment below and update the code to test the property mpRegen
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property mpRegenPerLevel (base name: "MpRegenPerLevel")', function() {
      // uncomment below and update the code to test the property mpRegenPerLevel
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property mpUpPerLevel (base name: "MpUpPerLevel")', function() {
      // uncomment below and update the code to test the property mpUpPerLevel
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property spellBlock (base name: "SpellBlock")', function() {
      // uncomment below and update the code to test the property spellBlock
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property spellBlockPerLevel (base name: "SpellBlockPerLevel")', function() {
      // uncomment below and update the code to test the property spellBlockPerLevel
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "Title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new LoLV3Stats.Champion();
      //expect(instance).to.be();
    });

  });

}));
