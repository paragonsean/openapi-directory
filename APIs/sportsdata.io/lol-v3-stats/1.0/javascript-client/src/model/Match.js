/**
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MatchBan from './MatchBan';
import PlayerMatch from './PlayerMatch';
import TeamMatch from './TeamMatch';

/**
 * The Match model module.
 * @module model/Match
 * @version 1.0
 */
class Match {
    /**
     * Constructs a new <code>Match</code>.
     * @alias module:model/Match
     */
    constructor() { 
        
        Match.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Match</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Match} obj Optional instance to populate.
     * @return {module:model/Match} The populated <code>Match</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Match();

            if (data.hasOwnProperty('GameId')) {
                obj['GameId'] = ApiClient.convertToType(data['GameId'], 'Number');
            }
            if (data.hasOwnProperty('GameVersion')) {
                obj['GameVersion'] = ApiClient.convertToType(data['GameVersion'], 'String');
            }
            if (data.hasOwnProperty('MapName')) {
                obj['MapName'] = ApiClient.convertToType(data['MapName'], 'String');
            }
            if (data.hasOwnProperty('MatchBans')) {
                obj['MatchBans'] = ApiClient.convertToType(data['MatchBans'], [MatchBan]);
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('PlayerMatches')) {
                obj['PlayerMatches'] = ApiClient.convertToType(data['PlayerMatches'], [PlayerMatch]);
            }
            if (data.hasOwnProperty('TeamMatches')) {
                obj['TeamMatches'] = ApiClient.convertToType(data['TeamMatches'], [TeamMatch]);
            }
            if (data.hasOwnProperty('WinningTeamId')) {
                obj['WinningTeamId'] = ApiClient.convertToType(data['WinningTeamId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Match</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Match</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['GameVersion'] && !(typeof data['GameVersion'] === 'string' || data['GameVersion'] instanceof String)) {
            throw new Error("Expected the field `GameVersion` to be a primitive type in the JSON string but got " + data['GameVersion']);
        }
        // ensure the json data is a string
        if (data['MapName'] && !(typeof data['MapName'] === 'string' || data['MapName'] instanceof String)) {
            throw new Error("Expected the field `MapName` to be a primitive type in the JSON string but got " + data['MapName']);
        }
        if (data['MatchBans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MatchBans'])) {
                throw new Error("Expected the field `MatchBans` to be an array in the JSON data but got " + data['MatchBans']);
            }
            // validate the optional field `MatchBans` (array)
            for (const item of data['MatchBans']) {
                MatchBan.validateJSON(item);
            };
        }
        if (data['PlayerMatches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PlayerMatches'])) {
                throw new Error("Expected the field `PlayerMatches` to be an array in the JSON data but got " + data['PlayerMatches']);
            }
            // validate the optional field `PlayerMatches` (array)
            for (const item of data['PlayerMatches']) {
                PlayerMatch.validateJSON(item);
            };
        }
        if (data['TeamMatches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TeamMatches'])) {
                throw new Error("Expected the field `TeamMatches` to be an array in the JSON data but got " + data['TeamMatches']);
            }
            // validate the optional field `TeamMatches` (array)
            for (const item of data['TeamMatches']) {
                TeamMatch.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} GameId
 */
Match.prototype['GameId'] = undefined;

/**
 * @member {String} GameVersion
 */
Match.prototype['GameVersion'] = undefined;

/**
 * @member {String} MapName
 */
Match.prototype['MapName'] = undefined;

/**
 * @member {Array.<module:model/MatchBan>} MatchBans
 */
Match.prototype['MatchBans'] = undefined;

/**
 * @member {Number} Number
 */
Match.prototype['Number'] = undefined;

/**
 * @member {Array.<module:model/PlayerMatch>} PlayerMatches
 */
Match.prototype['PlayerMatches'] = undefined;

/**
 * @member {Array.<module:model/TeamMatch>} TeamMatches
 */
Match.prototype['TeamMatches'] = undefined;

/**
 * @member {Number} WinningTeamId
 */
Match.prototype['WinningTeamId'] = undefined;






export default Match;

