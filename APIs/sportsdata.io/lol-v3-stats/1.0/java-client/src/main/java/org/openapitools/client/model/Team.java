/*
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Team
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:14.423769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Team {
  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_AREA_ID = "AreaId";
  @SerializedName(SERIALIZED_NAME_AREA_ID)
  private Integer areaId;

  public static final String SERIALIZED_NAME_AREA_NAME = "AreaName";
  @SerializedName(SERIALIZED_NAME_AREA_NAME)
  private String areaName;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FACEBOOK = "Facebook";
  @SerializedName(SERIALIZED_NAME_FACEBOOK)
  private String facebook;

  public static final String SERIALIZED_NAME_FOUNDED = "Founded";
  @SerializedName(SERIALIZED_NAME_FOUNDED)
  private Integer founded;

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_INSTAGRAM = "Instagram";
  @SerializedName(SERIALIZED_NAME_INSTAGRAM)
  private String instagram;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR = "PrimaryColor";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR)
  private String primaryColor;

  public static final String SERIALIZED_NAME_QUATERNARY_COLOR = "QuaternaryColor";
  @SerializedName(SERIALIZED_NAME_QUATERNARY_COLOR)
  private String quaternaryColor;

  public static final String SERIALIZED_NAME_SECONDARY_COLOR = "SecondaryColor";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COLOR)
  private String secondaryColor;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_TERTIARY_COLOR = "TertiaryColor";
  @SerializedName(SERIALIZED_NAME_TERTIARY_COLOR)
  private String tertiaryColor;

  public static final String SERIALIZED_NAME_TWITTER = "Twitter";
  @SerializedName(SERIALIZED_NAME_TWITTER)
  private String twitter;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WEBSITE = "Website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_YOU_TUBE = "YouTube";
  @SerializedName(SERIALIZED_NAME_YOU_TUBE)
  private String youTube;

  public Team() {
  }

  public Team active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Team areaId(Integer areaId) {
    this.areaId = areaId;
    return this;
  }

  /**
   * Get areaId
   * @return areaId
   */
  @javax.annotation.Nullable
  public Integer getAreaId() {
    return areaId;
  }

  public void setAreaId(Integer areaId) {
    this.areaId = areaId;
  }


  public Team areaName(String areaName) {
    this.areaName = areaName;
    return this;
  }

  /**
   * Get areaName
   * @return areaName
   */
  @javax.annotation.Nullable
  public String getAreaName() {
    return areaName;
  }

  public void setAreaName(String areaName) {
    this.areaName = areaName;
  }


  public Team email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Team facebook(String facebook) {
    this.facebook = facebook;
    return this;
  }

  /**
   * Get facebook
   * @return facebook
   */
  @javax.annotation.Nullable
  public String getFacebook() {
    return facebook;
  }

  public void setFacebook(String facebook) {
    this.facebook = facebook;
  }


  public Team founded(Integer founded) {
    this.founded = founded;
    return this;
  }

  /**
   * Get founded
   * @return founded
   */
  @javax.annotation.Nullable
  public Integer getFounded() {
    return founded;
  }

  public void setFounded(Integer founded) {
    this.founded = founded;
  }


  public Team gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public Team instagram(String instagram) {
    this.instagram = instagram;
    return this;
  }

  /**
   * Get instagram
   * @return instagram
   */
  @javax.annotation.Nullable
  public String getInstagram() {
    return instagram;
  }

  public void setInstagram(String instagram) {
    this.instagram = instagram;
  }


  public Team key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Team name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Team primaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
    return this;
  }

  /**
   * Get primaryColor
   * @return primaryColor
   */
  @javax.annotation.Nullable
  public String getPrimaryColor() {
    return primaryColor;
  }

  public void setPrimaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
  }


  public Team quaternaryColor(String quaternaryColor) {
    this.quaternaryColor = quaternaryColor;
    return this;
  }

  /**
   * Get quaternaryColor
   * @return quaternaryColor
   */
  @javax.annotation.Nullable
  public String getQuaternaryColor() {
    return quaternaryColor;
  }

  public void setQuaternaryColor(String quaternaryColor) {
    this.quaternaryColor = quaternaryColor;
  }


  public Team secondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
    return this;
  }

  /**
   * Get secondaryColor
   * @return secondaryColor
   */
  @javax.annotation.Nullable
  public String getSecondaryColor() {
    return secondaryColor;
  }

  public void setSecondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
  }


  public Team shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public Team teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public Team tertiaryColor(String tertiaryColor) {
    this.tertiaryColor = tertiaryColor;
    return this;
  }

  /**
   * Get tertiaryColor
   * @return tertiaryColor
   */
  @javax.annotation.Nullable
  public String getTertiaryColor() {
    return tertiaryColor;
  }

  public void setTertiaryColor(String tertiaryColor) {
    this.tertiaryColor = tertiaryColor;
  }


  public Team twitter(String twitter) {
    this.twitter = twitter;
    return this;
  }

  /**
   * Get twitter
   * @return twitter
   */
  @javax.annotation.Nullable
  public String getTwitter() {
    return twitter;
  }

  public void setTwitter(String twitter) {
    this.twitter = twitter;
  }


  public Team type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Team website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public Team youTube(String youTube) {
    this.youTube = youTube;
    return this;
  }

  /**
   * Get youTube
   * @return youTube
   */
  @javax.annotation.Nullable
  public String getYouTube() {
    return youTube;
  }

  public void setYouTube(String youTube) {
    this.youTube = youTube;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.active, team.active) &&
        Objects.equals(this.areaId, team.areaId) &&
        Objects.equals(this.areaName, team.areaName) &&
        Objects.equals(this.email, team.email) &&
        Objects.equals(this.facebook, team.facebook) &&
        Objects.equals(this.founded, team.founded) &&
        Objects.equals(this.gender, team.gender) &&
        Objects.equals(this.instagram, team.instagram) &&
        Objects.equals(this.key, team.key) &&
        Objects.equals(this.name, team.name) &&
        Objects.equals(this.primaryColor, team.primaryColor) &&
        Objects.equals(this.quaternaryColor, team.quaternaryColor) &&
        Objects.equals(this.secondaryColor, team.secondaryColor) &&
        Objects.equals(this.shortName, team.shortName) &&
        Objects.equals(this.teamId, team.teamId) &&
        Objects.equals(this.tertiaryColor, team.tertiaryColor) &&
        Objects.equals(this.twitter, team.twitter) &&
        Objects.equals(this.type, team.type) &&
        Objects.equals(this.website, team.website) &&
        Objects.equals(this.youTube, team.youTube);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, areaId, areaName, email, facebook, founded, gender, instagram, key, name, primaryColor, quaternaryColor, secondaryColor, shortName, teamId, tertiaryColor, twitter, type, website, youTube);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    areaId: ").append(toIndentedString(areaId)).append("\n");
    sb.append("    areaName: ").append(toIndentedString(areaName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    facebook: ").append(toIndentedString(facebook)).append("\n");
    sb.append("    founded: ").append(toIndentedString(founded)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    instagram: ").append(toIndentedString(instagram)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    quaternaryColor: ").append(toIndentedString(quaternaryColor)).append("\n");
    sb.append("    secondaryColor: ").append(toIndentedString(secondaryColor)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    tertiaryColor: ").append(toIndentedString(tertiaryColor)).append("\n");
    sb.append("    twitter: ").append(toIndentedString(twitter)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    youTube: ").append(toIndentedString(youTube)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Active");
    openapiFields.add("AreaId");
    openapiFields.add("AreaName");
    openapiFields.add("Email");
    openapiFields.add("Facebook");
    openapiFields.add("Founded");
    openapiFields.add("Gender");
    openapiFields.add("Instagram");
    openapiFields.add("Key");
    openapiFields.add("Name");
    openapiFields.add("PrimaryColor");
    openapiFields.add("QuaternaryColor");
    openapiFields.add("SecondaryColor");
    openapiFields.add("ShortName");
    openapiFields.add("TeamId");
    openapiFields.add("TertiaryColor");
    openapiFields.add("Twitter");
    openapiFields.add("Type");
    openapiFields.add("Website");
    openapiFields.add("YouTube");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Team
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Team.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Team is not found in the empty JSON string", Team.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Team.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Team` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AreaName") != null && !jsonObj.get("AreaName").isJsonNull()) && !jsonObj.get("AreaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AreaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AreaName").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("Facebook") != null && !jsonObj.get("Facebook").isJsonNull()) && !jsonObj.get("Facebook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Facebook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Facebook").toString()));
      }
      if ((jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) && !jsonObj.get("Gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gender").toString()));
      }
      if ((jsonObj.get("Instagram") != null && !jsonObj.get("Instagram").isJsonNull()) && !jsonObj.get("Instagram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Instagram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Instagram").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PrimaryColor") != null && !jsonObj.get("PrimaryColor").isJsonNull()) && !jsonObj.get("PrimaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrimaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrimaryColor").toString()));
      }
      if ((jsonObj.get("QuaternaryColor") != null && !jsonObj.get("QuaternaryColor").isJsonNull()) && !jsonObj.get("QuaternaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuaternaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuaternaryColor").toString()));
      }
      if ((jsonObj.get("SecondaryColor") != null && !jsonObj.get("SecondaryColor").isJsonNull()) && !jsonObj.get("SecondaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecondaryColor").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("TertiaryColor") != null && !jsonObj.get("TertiaryColor").isJsonNull()) && !jsonObj.get("TertiaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TertiaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TertiaryColor").toString()));
      }
      if ((jsonObj.get("Twitter") != null && !jsonObj.get("Twitter").isJsonNull()) && !jsonObj.get("Twitter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Twitter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Twitter").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Website") != null && !jsonObj.get("Website").isJsonNull()) && !jsonObj.get("Website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Website").toString()));
      }
      if ((jsonObj.get("YouTube") != null && !jsonObj.get("YouTube").isJsonNull()) && !jsonObj.get("YouTube").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YouTube` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YouTube").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Team.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Team' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Team> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Team.class));

       return (TypeAdapter<T>) new TypeAdapter<Team>() {
           @Override
           public void write(JsonWriter out, Team value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Team read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Team given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Team
   * @throws IOException if the JSON string is invalid with respect to Team
   */
  public static Team fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Team.class);
  }

  /**
   * Convert an instance of Team to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

