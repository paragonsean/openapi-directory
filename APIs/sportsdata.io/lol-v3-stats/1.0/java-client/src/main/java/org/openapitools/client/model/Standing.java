/*
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:14.423769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Standing {
  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private Integer games;

  public static final String SERIALIZED_NAME_GROUP = "Group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_LOSSES = "Losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private Integer losses;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER = "Order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_POINTS = "Points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private Integer points;

  public static final String SERIALIZED_NAME_ROUND_ID = "RoundId";
  @SerializedName(SERIALIZED_NAME_ROUND_ID)
  private Integer roundId;

  public static final String SERIALIZED_NAME_SCORE_AGAINST = "ScoreAgainst";
  @SerializedName(SERIALIZED_NAME_SCORE_AGAINST)
  private Integer scoreAgainst;

  public static final String SERIALIZED_NAME_SCORE_DIFFERENCE = "ScoreDifference";
  @SerializedName(SERIALIZED_NAME_SCORE_DIFFERENCE)
  private Integer scoreDifference;

  public static final String SERIALIZED_NAME_SCORE_FOR = "ScoreFor";
  @SerializedName(SERIALIZED_NAME_SCORE_FOR)
  private Integer scoreFor;

  public static final String SERIALIZED_NAME_STANDING_ID = "StandingId";
  @SerializedName(SERIALIZED_NAME_STANDING_ID)
  private Integer standingId;

  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_WINS = "Wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public Standing() {
  }

  public Standing games(Integer games) {
    this.games = games;
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public Integer getGames() {
    return games;
  }

  public void setGames(Integer games) {
    this.games = games;
  }


  public Standing group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public Standing losses(Integer losses) {
    this.losses = losses;
    return this;
  }

  /**
   * Get losses
   * @return losses
   */
  @javax.annotation.Nullable
  public Integer getLosses() {
    return losses;
  }

  public void setLosses(Integer losses) {
    this.losses = losses;
  }


  public Standing name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Standing order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public Standing points(Integer points) {
    this.points = points;
    return this;
  }

  /**
   * Get points
   * @return points
   */
  @javax.annotation.Nullable
  public Integer getPoints() {
    return points;
  }

  public void setPoints(Integer points) {
    this.points = points;
  }


  public Standing roundId(Integer roundId) {
    this.roundId = roundId;
    return this;
  }

  /**
   * Get roundId
   * @return roundId
   */
  @javax.annotation.Nullable
  public Integer getRoundId() {
    return roundId;
  }

  public void setRoundId(Integer roundId) {
    this.roundId = roundId;
  }


  public Standing scoreAgainst(Integer scoreAgainst) {
    this.scoreAgainst = scoreAgainst;
    return this;
  }

  /**
   * Get scoreAgainst
   * @return scoreAgainst
   */
  @javax.annotation.Nullable
  public Integer getScoreAgainst() {
    return scoreAgainst;
  }

  public void setScoreAgainst(Integer scoreAgainst) {
    this.scoreAgainst = scoreAgainst;
  }


  public Standing scoreDifference(Integer scoreDifference) {
    this.scoreDifference = scoreDifference;
    return this;
  }

  /**
   * Get scoreDifference
   * @return scoreDifference
   */
  @javax.annotation.Nullable
  public Integer getScoreDifference() {
    return scoreDifference;
  }

  public void setScoreDifference(Integer scoreDifference) {
    this.scoreDifference = scoreDifference;
  }


  public Standing scoreFor(Integer scoreFor) {
    this.scoreFor = scoreFor;
    return this;
  }

  /**
   * Get scoreFor
   * @return scoreFor
   */
  @javax.annotation.Nullable
  public Integer getScoreFor() {
    return scoreFor;
  }

  public void setScoreFor(Integer scoreFor) {
    this.scoreFor = scoreFor;
  }


  public Standing standingId(Integer standingId) {
    this.standingId = standingId;
    return this;
  }

  /**
   * Get standingId
   * @return standingId
   */
  @javax.annotation.Nullable
  public Integer getStandingId() {
    return standingId;
  }

  public void setStandingId(Integer standingId) {
    this.standingId = standingId;
  }


  public Standing teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public Standing wins(Integer wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Standing standing = (Standing) o;
    return Objects.equals(this.games, standing.games) &&
        Objects.equals(this.group, standing.group) &&
        Objects.equals(this.losses, standing.losses) &&
        Objects.equals(this.name, standing.name) &&
        Objects.equals(this.order, standing.order) &&
        Objects.equals(this.points, standing.points) &&
        Objects.equals(this.roundId, standing.roundId) &&
        Objects.equals(this.scoreAgainst, standing.scoreAgainst) &&
        Objects.equals(this.scoreDifference, standing.scoreDifference) &&
        Objects.equals(this.scoreFor, standing.scoreFor) &&
        Objects.equals(this.standingId, standing.standingId) &&
        Objects.equals(this.teamId, standing.teamId) &&
        Objects.equals(this.wins, standing.wins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(games, group, losses, name, order, points, roundId, scoreAgainst, scoreDifference, scoreFor, standingId, teamId, wins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Standing {\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    roundId: ").append(toIndentedString(roundId)).append("\n");
    sb.append("    scoreAgainst: ").append(toIndentedString(scoreAgainst)).append("\n");
    sb.append("    scoreDifference: ").append(toIndentedString(scoreDifference)).append("\n");
    sb.append("    scoreFor: ").append(toIndentedString(scoreFor)).append("\n");
    sb.append("    standingId: ").append(toIndentedString(standingId)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Games");
    openapiFields.add("Group");
    openapiFields.add("Losses");
    openapiFields.add("Name");
    openapiFields.add("Order");
    openapiFields.add("Points");
    openapiFields.add("RoundId");
    openapiFields.add("ScoreAgainst");
    openapiFields.add("ScoreDifference");
    openapiFields.add("ScoreFor");
    openapiFields.add("StandingId");
    openapiFields.add("TeamId");
    openapiFields.add("Wins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Standing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Standing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Standing is not found in the empty JSON string", Standing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Standing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Standing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Group") != null && !jsonObj.get("Group").isJsonNull()) && !jsonObj.get("Group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Group").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Standing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Standing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Standing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Standing.class));

       return (TypeAdapter<T>) new TypeAdapter<Standing>() {
           @Override
           public void write(JsonWriter out, Standing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Standing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Standing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Standing
   * @throws IOException if the JSON string is invalid with respect to Standing
   */
  public static Standing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Standing.class);
  }

  /**
   * Convert an instance of Standing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

