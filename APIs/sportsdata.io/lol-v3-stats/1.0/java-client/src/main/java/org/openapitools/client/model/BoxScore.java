/*
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.Match;
import org.openapitools.client.model.PlayerGame;
import org.openapitools.client.model.TeamGame;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoxScore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:14.423769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxScore {
  public static final String SERIALIZED_NAME_GAME = "Game";
  @SerializedName(SERIALIZED_NAME_GAME)
  private Game game;

  public static final String SERIALIZED_NAME_MATCHES = "Matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private List<Match> matches = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYER_GAMES = "PlayerGames";
  @SerializedName(SERIALIZED_NAME_PLAYER_GAMES)
  private List<PlayerGame> playerGames = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_GAMES = "TeamGames";
  @SerializedName(SERIALIZED_NAME_TEAM_GAMES)
  private List<TeamGame> teamGames = new ArrayList<>();

  public BoxScore() {
  }

  public BoxScore game(Game game) {
    this.game = game;
    return this;
  }

  /**
   * Get game
   * @return game
   */
  @javax.annotation.Nullable
  public Game getGame() {
    return game;
  }

  public void setGame(Game game) {
    this.game = game;
  }


  public BoxScore matches(List<Match> matches) {
    this.matches = matches;
    return this;
  }

  public BoxScore addMatchesItem(Match matchesItem) {
    if (this.matches == null) {
      this.matches = new ArrayList<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

  /**
   * Get matches
   * @return matches
   */
  @javax.annotation.Nullable
  public List<Match> getMatches() {
    return matches;
  }

  public void setMatches(List<Match> matches) {
    this.matches = matches;
  }


  public BoxScore playerGames(List<PlayerGame> playerGames) {
    this.playerGames = playerGames;
    return this;
  }

  public BoxScore addPlayerGamesItem(PlayerGame playerGamesItem) {
    if (this.playerGames == null) {
      this.playerGames = new ArrayList<>();
    }
    this.playerGames.add(playerGamesItem);
    return this;
  }

  /**
   * Get playerGames
   * @return playerGames
   */
  @javax.annotation.Nullable
  public List<PlayerGame> getPlayerGames() {
    return playerGames;
  }

  public void setPlayerGames(List<PlayerGame> playerGames) {
    this.playerGames = playerGames;
  }


  public BoxScore teamGames(List<TeamGame> teamGames) {
    this.teamGames = teamGames;
    return this;
  }

  public BoxScore addTeamGamesItem(TeamGame teamGamesItem) {
    if (this.teamGames == null) {
      this.teamGames = new ArrayList<>();
    }
    this.teamGames.add(teamGamesItem);
    return this;
  }

  /**
   * Get teamGames
   * @return teamGames
   */
  @javax.annotation.Nullable
  public List<TeamGame> getTeamGames() {
    return teamGames;
  }

  public void setTeamGames(List<TeamGame> teamGames) {
    this.teamGames = teamGames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxScore boxScore = (BoxScore) o;
    return Objects.equals(this.game, boxScore.game) &&
        Objects.equals(this.matches, boxScore.matches) &&
        Objects.equals(this.playerGames, boxScore.playerGames) &&
        Objects.equals(this.teamGames, boxScore.teamGames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(game, matches, playerGames, teamGames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxScore {\n");
    sb.append("    game: ").append(toIndentedString(game)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    playerGames: ").append(toIndentedString(playerGames)).append("\n");
    sb.append("    teamGames: ").append(toIndentedString(teamGames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Game");
    openapiFields.add("Matches");
    openapiFields.add("PlayerGames");
    openapiFields.add("TeamGames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxScore is not found in the empty JSON string", BoxScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Game`
      if (jsonObj.get("Game") != null && !jsonObj.get("Game").isJsonNull()) {
        Game.validateJsonElement(jsonObj.get("Game"));
      }
      if (jsonObj.get("Matches") != null && !jsonObj.get("Matches").isJsonNull()) {
        JsonArray jsonArraymatches = jsonObj.getAsJsonArray("Matches");
        if (jsonArraymatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Matches` to be an array in the JSON string but got `%s`", jsonObj.get("Matches").toString()));
          }

          // validate the optional field `Matches` (array)
          for (int i = 0; i < jsonArraymatches.size(); i++) {
            Match.validateJsonElement(jsonArraymatches.get(i));
          };
        }
      }
      if (jsonObj.get("PlayerGames") != null && !jsonObj.get("PlayerGames").isJsonNull()) {
        JsonArray jsonArrayplayerGames = jsonObj.getAsJsonArray("PlayerGames");
        if (jsonArrayplayerGames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PlayerGames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PlayerGames` to be an array in the JSON string but got `%s`", jsonObj.get("PlayerGames").toString()));
          }

          // validate the optional field `PlayerGames` (array)
          for (int i = 0; i < jsonArrayplayerGames.size(); i++) {
            PlayerGame.validateJsonElement(jsonArrayplayerGames.get(i));
          };
        }
      }
      if (jsonObj.get("TeamGames") != null && !jsonObj.get("TeamGames").isJsonNull()) {
        JsonArray jsonArrayteamGames = jsonObj.getAsJsonArray("TeamGames");
        if (jsonArrayteamGames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TeamGames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TeamGames` to be an array in the JSON string but got `%s`", jsonObj.get("TeamGames").toString()));
          }

          // validate the optional field `TeamGames` (array)
          for (int i = 0; i < jsonArrayteamGames.size(); i++) {
            TeamGame.validateJsonElement(jsonArrayteamGames.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxScore.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxScore>() {
           @Override
           public void write(JsonWriter out, BoxScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxScore
   * @throws IOException if the JSON string is invalid with respect to BoxScore
   */
  public static BoxScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxScore.class);
  }

  /**
   * Convert an instance of BoxScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

