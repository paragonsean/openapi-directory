/*
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MatchBan;
import org.openapitools.client.model.PlayerMatch;
import org.openapitools.client.model.TeamMatch;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Match
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:14.423769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Match {
  public static final String SERIALIZED_NAME_GAME_ID = "GameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_GAME_VERSION = "GameVersion";
  @SerializedName(SERIALIZED_NAME_GAME_VERSION)
  private String gameVersion;

  public static final String SERIALIZED_NAME_MAP_NAME = "MapName";
  @SerializedName(SERIALIZED_NAME_MAP_NAME)
  private String mapName;

  public static final String SERIALIZED_NAME_MATCH_BANS = "MatchBans";
  @SerializedName(SERIALIZED_NAME_MATCH_BANS)
  private List<MatchBan> matchBans = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PLAYER_MATCHES = "PlayerMatches";
  @SerializedName(SERIALIZED_NAME_PLAYER_MATCHES)
  private List<PlayerMatch> playerMatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_MATCHES = "TeamMatches";
  @SerializedName(SERIALIZED_NAME_TEAM_MATCHES)
  private List<TeamMatch> teamMatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_WINNING_TEAM_ID = "WinningTeamId";
  @SerializedName(SERIALIZED_NAME_WINNING_TEAM_ID)
  private Integer winningTeamId;

  public Match() {
  }

  public Match gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public Match gameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
    return this;
  }

  /**
   * Get gameVersion
   * @return gameVersion
   */
  @javax.annotation.Nullable
  public String getGameVersion() {
    return gameVersion;
  }

  public void setGameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
  }


  public Match mapName(String mapName) {
    this.mapName = mapName;
    return this;
  }

  /**
   * Get mapName
   * @return mapName
   */
  @javax.annotation.Nullable
  public String getMapName() {
    return mapName;
  }

  public void setMapName(String mapName) {
    this.mapName = mapName;
  }


  public Match matchBans(List<MatchBan> matchBans) {
    this.matchBans = matchBans;
    return this;
  }

  public Match addMatchBansItem(MatchBan matchBansItem) {
    if (this.matchBans == null) {
      this.matchBans = new ArrayList<>();
    }
    this.matchBans.add(matchBansItem);
    return this;
  }

  /**
   * Get matchBans
   * @return matchBans
   */
  @javax.annotation.Nullable
  public List<MatchBan> getMatchBans() {
    return matchBans;
  }

  public void setMatchBans(List<MatchBan> matchBans) {
    this.matchBans = matchBans;
  }


  public Match number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public Match playerMatches(List<PlayerMatch> playerMatches) {
    this.playerMatches = playerMatches;
    return this;
  }

  public Match addPlayerMatchesItem(PlayerMatch playerMatchesItem) {
    if (this.playerMatches == null) {
      this.playerMatches = new ArrayList<>();
    }
    this.playerMatches.add(playerMatchesItem);
    return this;
  }

  /**
   * Get playerMatches
   * @return playerMatches
   */
  @javax.annotation.Nullable
  public List<PlayerMatch> getPlayerMatches() {
    return playerMatches;
  }

  public void setPlayerMatches(List<PlayerMatch> playerMatches) {
    this.playerMatches = playerMatches;
  }


  public Match teamMatches(List<TeamMatch> teamMatches) {
    this.teamMatches = teamMatches;
    return this;
  }

  public Match addTeamMatchesItem(TeamMatch teamMatchesItem) {
    if (this.teamMatches == null) {
      this.teamMatches = new ArrayList<>();
    }
    this.teamMatches.add(teamMatchesItem);
    return this;
  }

  /**
   * Get teamMatches
   * @return teamMatches
   */
  @javax.annotation.Nullable
  public List<TeamMatch> getTeamMatches() {
    return teamMatches;
  }

  public void setTeamMatches(List<TeamMatch> teamMatches) {
    this.teamMatches = teamMatches;
  }


  public Match winningTeamId(Integer winningTeamId) {
    this.winningTeamId = winningTeamId;
    return this;
  }

  /**
   * Get winningTeamId
   * @return winningTeamId
   */
  @javax.annotation.Nullable
  public Integer getWinningTeamId() {
    return winningTeamId;
  }

  public void setWinningTeamId(Integer winningTeamId) {
    this.winningTeamId = winningTeamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Match match = (Match) o;
    return Objects.equals(this.gameId, match.gameId) &&
        Objects.equals(this.gameVersion, match.gameVersion) &&
        Objects.equals(this.mapName, match.mapName) &&
        Objects.equals(this.matchBans, match.matchBans) &&
        Objects.equals(this.number, match.number) &&
        Objects.equals(this.playerMatches, match.playerMatches) &&
        Objects.equals(this.teamMatches, match.teamMatches) &&
        Objects.equals(this.winningTeamId, match.winningTeamId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameId, gameVersion, mapName, matchBans, number, playerMatches, teamMatches, winningTeamId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Match {\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    gameVersion: ").append(toIndentedString(gameVersion)).append("\n");
    sb.append("    mapName: ").append(toIndentedString(mapName)).append("\n");
    sb.append("    matchBans: ").append(toIndentedString(matchBans)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    playerMatches: ").append(toIndentedString(playerMatches)).append("\n");
    sb.append("    teamMatches: ").append(toIndentedString(teamMatches)).append("\n");
    sb.append("    winningTeamId: ").append(toIndentedString(winningTeamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GameId");
    openapiFields.add("GameVersion");
    openapiFields.add("MapName");
    openapiFields.add("MatchBans");
    openapiFields.add("Number");
    openapiFields.add("PlayerMatches");
    openapiFields.add("TeamMatches");
    openapiFields.add("WinningTeamId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Match
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Match.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Match is not found in the empty JSON string", Match.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Match.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Match` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("GameVersion") != null && !jsonObj.get("GameVersion").isJsonNull()) && !jsonObj.get("GameVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GameVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GameVersion").toString()));
      }
      if ((jsonObj.get("MapName") != null && !jsonObj.get("MapName").isJsonNull()) && !jsonObj.get("MapName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MapName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MapName").toString()));
      }
      if (jsonObj.get("MatchBans") != null && !jsonObj.get("MatchBans").isJsonNull()) {
        JsonArray jsonArraymatchBans = jsonObj.getAsJsonArray("MatchBans");
        if (jsonArraymatchBans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MatchBans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MatchBans` to be an array in the JSON string but got `%s`", jsonObj.get("MatchBans").toString()));
          }

          // validate the optional field `MatchBans` (array)
          for (int i = 0; i < jsonArraymatchBans.size(); i++) {
            MatchBan.validateJsonElement(jsonArraymatchBans.get(i));
          };
        }
      }
      if (jsonObj.get("PlayerMatches") != null && !jsonObj.get("PlayerMatches").isJsonNull()) {
        JsonArray jsonArrayplayerMatches = jsonObj.getAsJsonArray("PlayerMatches");
        if (jsonArrayplayerMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PlayerMatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PlayerMatches` to be an array in the JSON string but got `%s`", jsonObj.get("PlayerMatches").toString()));
          }

          // validate the optional field `PlayerMatches` (array)
          for (int i = 0; i < jsonArrayplayerMatches.size(); i++) {
            PlayerMatch.validateJsonElement(jsonArrayplayerMatches.get(i));
          };
        }
      }
      if (jsonObj.get("TeamMatches") != null && !jsonObj.get("TeamMatches").isJsonNull()) {
        JsonArray jsonArrayteamMatches = jsonObj.getAsJsonArray("TeamMatches");
        if (jsonArrayteamMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TeamMatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TeamMatches` to be an array in the JSON string but got `%s`", jsonObj.get("TeamMatches").toString()));
          }

          // validate the optional field `TeamMatches` (array)
          for (int i = 0; i < jsonArrayteamMatches.size(); i++) {
            TeamMatch.validateJsonElement(jsonArrayteamMatches.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Match.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Match' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Match> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Match.class));

       return (TypeAdapter<T>) new TypeAdapter<Match>() {
           @Override
           public void write(JsonWriter out, Match value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Match read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Match given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Match
   * @throws IOException if the JSON string is invalid with respect to Match
   */
  public static Match fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Match.class);
  }

  /**
   * Convert an instance of Match to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

