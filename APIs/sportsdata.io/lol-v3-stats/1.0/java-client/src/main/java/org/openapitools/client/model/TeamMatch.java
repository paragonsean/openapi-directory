/*
 * LoL v3 Stats
 * LoL v3 Stats
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:14.423769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamMatch {
  public static final String SERIALIZED_NAME_ASSISTS = "Assists";
  @SerializedName(SERIALIZED_NAME_ASSISTS)
  private BigDecimal assists;

  public static final String SERIALIZED_NAME_COMBAT_PLAYER_SCORE = "CombatPlayerScore";
  @SerializedName(SERIALIZED_NAME_COMBAT_PLAYER_SCORE)
  private BigDecimal combatPlayerScore;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_DEATHS = "Deaths";
  @SerializedName(SERIALIZED_NAME_DEATHS)
  private BigDecimal deaths;

  public static final String SERIALIZED_NAME_DOUBLE_KILLS = "DoubleKills";
  @SerializedName(SERIALIZED_NAME_DOUBLE_KILLS)
  private BigDecimal doubleKills;

  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FIRST_BARON = "FirstBaron";
  @SerializedName(SERIALIZED_NAME_FIRST_BARON)
  private BigDecimal firstBaron;

  public static final String SERIALIZED_NAME_FIRST_BLOOD = "FirstBlood";
  @SerializedName(SERIALIZED_NAME_FIRST_BLOOD)
  private BigDecimal firstBlood;

  public static final String SERIALIZED_NAME_FIRST_DRAGON = "FirstDragon";
  @SerializedName(SERIALIZED_NAME_FIRST_DRAGON)
  private BigDecimal firstDragon;

  public static final String SERIALIZED_NAME_FIRST_INHIBITOR = "FirstInhibitor";
  @SerializedName(SERIALIZED_NAME_FIRST_INHIBITOR)
  private BigDecimal firstInhibitor;

  public static final String SERIALIZED_NAME_FIRST_RIFT_HERALD = "FirstRiftHerald";
  @SerializedName(SERIALIZED_NAME_FIRST_RIFT_HERALD)
  private BigDecimal firstRiftHerald;

  public static final String SERIALIZED_NAME_FIRST_TOWER = "FirstTower";
  @SerializedName(SERIALIZED_NAME_FIRST_TOWER)
  private BigDecimal firstTower;

  public static final String SERIALIZED_NAME_GAME_ID = "GameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private Integer games;

  public static final String SERIALIZED_NAME_GOLD_EARNED = "GoldEarned";
  @SerializedName(SERIALIZED_NAME_GOLD_EARNED)
  private BigDecimal goldEarned;

  public static final String SERIALIZED_NAME_GOLD_SPENT = "GoldSpent";
  @SerializedName(SERIALIZED_NAME_GOLD_SPENT)
  private BigDecimal goldSpent;

  public static final String SERIALIZED_NAME_INHIBITOR_KILLS = "InhibitorKills";
  @SerializedName(SERIALIZED_NAME_INHIBITOR_KILLS)
  private BigDecimal inhibitorKills;

  public static final String SERIALIZED_NAME_IS_CLOSED = "IsClosed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Boolean isClosed;

  public static final String SERIALIZED_NAME_KILLING_SPREE = "KillingSpree";
  @SerializedName(SERIALIZED_NAME_KILLING_SPREE)
  private BigDecimal killingSpree;

  public static final String SERIALIZED_NAME_KILLS = "Kills";
  @SerializedName(SERIALIZED_NAME_KILLS)
  private BigDecimal kills;

  public static final String SERIALIZED_NAME_LARGEST_CRITICAL_STRIKE = "LargestCriticalStrike";
  @SerializedName(SERIALIZED_NAME_LARGEST_CRITICAL_STRIKE)
  private BigDecimal largestCriticalStrike;

  public static final String SERIALIZED_NAME_LARGEST_KILLING_SPREE = "LargestKillingSpree";
  @SerializedName(SERIALIZED_NAME_LARGEST_KILLING_SPREE)
  private BigDecimal largestKillingSpree;

  public static final String SERIALIZED_NAME_LARGEST_MULTI_KILL = "LargestMultiKill";
  @SerializedName(SERIALIZED_NAME_LARGEST_MULTI_KILL)
  private BigDecimal largestMultiKill;

  public static final String SERIALIZED_NAME_LONGEST_TIME_SPENT_LIVING = "LongestTimeSpentLiving";
  @SerializedName(SERIALIZED_NAME_LONGEST_TIME_SPENT_LIVING)
  private BigDecimal longestTimeSpentLiving;

  public static final String SERIALIZED_NAME_MAGIC_DAMAGE_DEALT = "MagicDamageDealt";
  @SerializedName(SERIALIZED_NAME_MAGIC_DAMAGE_DEALT)
  private BigDecimal magicDamageDealt;

  public static final String SERIALIZED_NAME_MAGIC_DAMAGE_DEALT_TO_CHAMPIONS = "MagicDamageDealtToChampions";
  @SerializedName(SERIALIZED_NAME_MAGIC_DAMAGE_DEALT_TO_CHAMPIONS)
  private BigDecimal magicDamageDealtToChampions;

  public static final String SERIALIZED_NAME_MAGIC_DAMAGE_TAKEN = "MagicDamageTaken";
  @SerializedName(SERIALIZED_NAME_MAGIC_DAMAGE_TAKEN)
  private BigDecimal magicDamageTaken;

  public static final String SERIALIZED_NAME_MATCH_NAME = "MatchName";
  @SerializedName(SERIALIZED_NAME_MATCH_NAME)
  private String matchName;

  public static final String SERIALIZED_NAME_MATCHES = "Matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private Integer matches;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEUTRAL_MINIONS_K_ILLED = "NeutralMinionsKIlled";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_MINIONS_K_ILLED)
  private BigDecimal neutralMinionsKIlled;

  public static final String SERIALIZED_NAME_NEUTRAL_MINIONS_K_ILLED_TEAM_JUNGLE = "NeutralMinionsKIlledTeamJungle";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_MINIONS_K_ILLED_TEAM_JUNGLE)
  private BigDecimal neutralMinionsKIlledTeamJungle;

  public static final String SERIALIZED_NAME_NEUTRAL_MINIONS_KILLED_ENEMY_JUNGLE = "NeutralMinionsKilledEnemyJungle";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_MINIONS_KILLED_ENEMY_JUNGLE)
  private BigDecimal neutralMinionsKilledEnemyJungle;

  public static final String SERIALIZED_NAME_OBJECTIVE_PLAYER_SCORE = "ObjectivePlayerScore";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE_PLAYER_SCORE)
  private BigDecimal objectivePlayerScore;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_OPPONENT_ID = "OpponentId";
  @SerializedName(SERIALIZED_NAME_OPPONENT_ID)
  private Integer opponentId;

  public static final String SERIALIZED_NAME_PENTA_KILLS = "PentaKills";
  @SerializedName(SERIALIZED_NAME_PENTA_KILLS)
  private BigDecimal pentaKills;

  public static final String SERIALIZED_NAME_PHYSICAL_DAMAGE_DEALT = "PhysicalDamageDealt";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_DAMAGE_DEALT)
  private BigDecimal physicalDamageDealt;

  public static final String SERIALIZED_NAME_PHYSICAL_DAMAGE_DEALT_TO_CHAMPIONS = "PhysicalDamageDealtToChampions";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_DAMAGE_DEALT_TO_CHAMPIONS)
  private BigDecimal physicalDamageDealtToChampions;

  public static final String SERIALIZED_NAME_PHYSICAL_DAMAGE_TAKEN = "PhysicalDamageTaken";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_DAMAGE_TAKEN)
  private BigDecimal physicalDamageTaken;

  public static final String SERIALIZED_NAME_PLAYER_ID = "PlayerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private Integer playerId;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_QUADRA_KILLS = "QuadraKills";
  @SerializedName(SERIALIZED_NAME_QUADRA_KILLS)
  private BigDecimal quadraKills;

  public static final String SERIALIZED_NAME_SIGHT_WARDS_BOUGHT_IN_GAME = "SightWardsBoughtInGame";
  @SerializedName(SERIALIZED_NAME_SIGHT_WARDS_BOUGHT_IN_GAME)
  private BigDecimal sightWardsBoughtInGame;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_TEN_KILLS_OR_ASSISTS = "TenKillsOrAssists";
  @SerializedName(SERIALIZED_NAME_TEN_KILLS_OR_ASSISTS)
  private BigDecimal tenKillsOrAssists;

  public static final String SERIALIZED_NAME_TOTAL_DAMAGE_DEALT = "TotalDamageDealt";
  @SerializedName(SERIALIZED_NAME_TOTAL_DAMAGE_DEALT)
  private BigDecimal totalDamageDealt;

  public static final String SERIALIZED_NAME_TOTAL_DAMAGE_DEALT_TO_CHAMPIONS = "TotalDamageDealtToChampions";
  @SerializedName(SERIALIZED_NAME_TOTAL_DAMAGE_DEALT_TO_CHAMPIONS)
  private BigDecimal totalDamageDealtToChampions;

  public static final String SERIALIZED_NAME_TOTAL_DAMAGE_TAKEN = "TotalDamageTaken";
  @SerializedName(SERIALIZED_NAME_TOTAL_DAMAGE_TAKEN)
  private BigDecimal totalDamageTaken;

  public static final String SERIALIZED_NAME_TOTAL_HEAL = "TotalHeal";
  @SerializedName(SERIALIZED_NAME_TOTAL_HEAL)
  private BigDecimal totalHeal;

  public static final String SERIALIZED_NAME_TOTAL_MINIONS_KILLED = "TotalMinionsKilled";
  @SerializedName(SERIALIZED_NAME_TOTAL_MINIONS_KILLED)
  private BigDecimal totalMinionsKilled;

  public static final String SERIALIZED_NAME_TOTAL_PLAYER_SCORE = "TotalPlayerScore";
  @SerializedName(SERIALIZED_NAME_TOTAL_PLAYER_SCORE)
  private BigDecimal totalPlayerScore;

  public static final String SERIALIZED_NAME_TOTAL_TIME_CROWD_CONTROL_DEALT = "TotalTimeCrowdControlDealt";
  @SerializedName(SERIALIZED_NAME_TOTAL_TIME_CROWD_CONTROL_DEALT)
  private BigDecimal totalTimeCrowdControlDealt;

  public static final String SERIALIZED_NAME_TOTAL_UNITS_HEALED = "TotalUnitsHealed";
  @SerializedName(SERIALIZED_NAME_TOTAL_UNITS_HEALED)
  private BigDecimal totalUnitsHealed;

  public static final String SERIALIZED_NAME_TRIPLE_KILLS = "TripleKills";
  @SerializedName(SERIALIZED_NAME_TRIPLE_KILLS)
  private BigDecimal tripleKills;

  public static final String SERIALIZED_NAME_TRUE_DAMAGE_DEALT = "TrueDamageDealt";
  @SerializedName(SERIALIZED_NAME_TRUE_DAMAGE_DEALT)
  private BigDecimal trueDamageDealt;

  public static final String SERIALIZED_NAME_TRUE_DAMAGE_DEALT_TO_CHAMPIONS = "TrueDamageDealtToChampions";
  @SerializedName(SERIALIZED_NAME_TRUE_DAMAGE_DEALT_TO_CHAMPIONS)
  private BigDecimal trueDamageDealtToChampions;

  public static final String SERIALIZED_NAME_TRUE_DAMAGE_TAKEN = "TrueDamageTaken";
  @SerializedName(SERIALIZED_NAME_TRUE_DAMAGE_TAKEN)
  private BigDecimal trueDamageTaken;

  public static final String SERIALIZED_NAME_TURRET_KILLS = "TurretKills";
  @SerializedName(SERIALIZED_NAME_TURRET_KILLS)
  private BigDecimal turretKills;

  public static final String SERIALIZED_NAME_UNREAL_KILLS = "UnrealKills";
  @SerializedName(SERIALIZED_NAME_UNREAL_KILLS)
  private BigDecimal unrealKills;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_VISION_WARDS_BOUGHT_IN_GAME = "VisionWardsBoughtInGame";
  @SerializedName(SERIALIZED_NAME_VISION_WARDS_BOUGHT_IN_GAME)
  private BigDecimal visionWardsBoughtInGame;

  public static final String SERIALIZED_NAME_WARDS_KILLED = "WardsKilled";
  @SerializedName(SERIALIZED_NAME_WARDS_KILLED)
  private BigDecimal wardsKilled;

  public static final String SERIALIZED_NAME_WARDS_PLACED = "WardsPlaced";
  @SerializedName(SERIALIZED_NAME_WARDS_PLACED)
  private BigDecimal wardsPlaced;

  public TeamMatch() {
  }

  public TeamMatch assists(BigDecimal assists) {
    this.assists = assists;
    return this;
  }

  /**
   * Get assists
   * @return assists
   */
  @javax.annotation.Nullable
  public BigDecimal getAssists() {
    return assists;
  }

  public void setAssists(BigDecimal assists) {
    this.assists = assists;
  }


  public TeamMatch combatPlayerScore(BigDecimal combatPlayerScore) {
    this.combatPlayerScore = combatPlayerScore;
    return this;
  }

  /**
   * Get combatPlayerScore
   * @return combatPlayerScore
   */
  @javax.annotation.Nullable
  public BigDecimal getCombatPlayerScore() {
    return combatPlayerScore;
  }

  public void setCombatPlayerScore(BigDecimal combatPlayerScore) {
    this.combatPlayerScore = combatPlayerScore;
  }


  public TeamMatch dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public TeamMatch day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public TeamMatch deaths(BigDecimal deaths) {
    this.deaths = deaths;
    return this;
  }

  /**
   * Get deaths
   * @return deaths
   */
  @javax.annotation.Nullable
  public BigDecimal getDeaths() {
    return deaths;
  }

  public void setDeaths(BigDecimal deaths) {
    this.deaths = deaths;
  }


  public TeamMatch doubleKills(BigDecimal doubleKills) {
    this.doubleKills = doubleKills;
    return this;
  }

  /**
   * Get doubleKills
   * @return doubleKills
   */
  @javax.annotation.Nullable
  public BigDecimal getDoubleKills() {
    return doubleKills;
  }

  public void setDoubleKills(BigDecimal doubleKills) {
    this.doubleKills = doubleKills;
  }


  public TeamMatch fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public TeamMatch firstBaron(BigDecimal firstBaron) {
    this.firstBaron = firstBaron;
    return this;
  }

  /**
   * Get firstBaron
   * @return firstBaron
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstBaron() {
    return firstBaron;
  }

  public void setFirstBaron(BigDecimal firstBaron) {
    this.firstBaron = firstBaron;
  }


  public TeamMatch firstBlood(BigDecimal firstBlood) {
    this.firstBlood = firstBlood;
    return this;
  }

  /**
   * Get firstBlood
   * @return firstBlood
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstBlood() {
    return firstBlood;
  }

  public void setFirstBlood(BigDecimal firstBlood) {
    this.firstBlood = firstBlood;
  }


  public TeamMatch firstDragon(BigDecimal firstDragon) {
    this.firstDragon = firstDragon;
    return this;
  }

  /**
   * Get firstDragon
   * @return firstDragon
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstDragon() {
    return firstDragon;
  }

  public void setFirstDragon(BigDecimal firstDragon) {
    this.firstDragon = firstDragon;
  }


  public TeamMatch firstInhibitor(BigDecimal firstInhibitor) {
    this.firstInhibitor = firstInhibitor;
    return this;
  }

  /**
   * Get firstInhibitor
   * @return firstInhibitor
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstInhibitor() {
    return firstInhibitor;
  }

  public void setFirstInhibitor(BigDecimal firstInhibitor) {
    this.firstInhibitor = firstInhibitor;
  }


  public TeamMatch firstRiftHerald(BigDecimal firstRiftHerald) {
    this.firstRiftHerald = firstRiftHerald;
    return this;
  }

  /**
   * Get firstRiftHerald
   * @return firstRiftHerald
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstRiftHerald() {
    return firstRiftHerald;
  }

  public void setFirstRiftHerald(BigDecimal firstRiftHerald) {
    this.firstRiftHerald = firstRiftHerald;
  }


  public TeamMatch firstTower(BigDecimal firstTower) {
    this.firstTower = firstTower;
    return this;
  }

  /**
   * Get firstTower
   * @return firstTower
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstTower() {
    return firstTower;
  }

  public void setFirstTower(BigDecimal firstTower) {
    this.firstTower = firstTower;
  }


  public TeamMatch gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public TeamMatch games(Integer games) {
    this.games = games;
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public Integer getGames() {
    return games;
  }

  public void setGames(Integer games) {
    this.games = games;
  }


  public TeamMatch goldEarned(BigDecimal goldEarned) {
    this.goldEarned = goldEarned;
    return this;
  }

  /**
   * Get goldEarned
   * @return goldEarned
   */
  @javax.annotation.Nullable
  public BigDecimal getGoldEarned() {
    return goldEarned;
  }

  public void setGoldEarned(BigDecimal goldEarned) {
    this.goldEarned = goldEarned;
  }


  public TeamMatch goldSpent(BigDecimal goldSpent) {
    this.goldSpent = goldSpent;
    return this;
  }

  /**
   * Get goldSpent
   * @return goldSpent
   */
  @javax.annotation.Nullable
  public BigDecimal getGoldSpent() {
    return goldSpent;
  }

  public void setGoldSpent(BigDecimal goldSpent) {
    this.goldSpent = goldSpent;
  }


  public TeamMatch inhibitorKills(BigDecimal inhibitorKills) {
    this.inhibitorKills = inhibitorKills;
    return this;
  }

  /**
   * Get inhibitorKills
   * @return inhibitorKills
   */
  @javax.annotation.Nullable
  public BigDecimal getInhibitorKills() {
    return inhibitorKills;
  }

  public void setInhibitorKills(BigDecimal inhibitorKills) {
    this.inhibitorKills = inhibitorKills;
  }


  public TeamMatch isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

  /**
   * Get isClosed
   * @return isClosed
   */
  @javax.annotation.Nullable
  public Boolean getIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }


  public TeamMatch killingSpree(BigDecimal killingSpree) {
    this.killingSpree = killingSpree;
    return this;
  }

  /**
   * Get killingSpree
   * @return killingSpree
   */
  @javax.annotation.Nullable
  public BigDecimal getKillingSpree() {
    return killingSpree;
  }

  public void setKillingSpree(BigDecimal killingSpree) {
    this.killingSpree = killingSpree;
  }


  public TeamMatch kills(BigDecimal kills) {
    this.kills = kills;
    return this;
  }

  /**
   * Get kills
   * @return kills
   */
  @javax.annotation.Nullable
  public BigDecimal getKills() {
    return kills;
  }

  public void setKills(BigDecimal kills) {
    this.kills = kills;
  }


  public TeamMatch largestCriticalStrike(BigDecimal largestCriticalStrike) {
    this.largestCriticalStrike = largestCriticalStrike;
    return this;
  }

  /**
   * Get largestCriticalStrike
   * @return largestCriticalStrike
   */
  @javax.annotation.Nullable
  public BigDecimal getLargestCriticalStrike() {
    return largestCriticalStrike;
  }

  public void setLargestCriticalStrike(BigDecimal largestCriticalStrike) {
    this.largestCriticalStrike = largestCriticalStrike;
  }


  public TeamMatch largestKillingSpree(BigDecimal largestKillingSpree) {
    this.largestKillingSpree = largestKillingSpree;
    return this;
  }

  /**
   * Get largestKillingSpree
   * @return largestKillingSpree
   */
  @javax.annotation.Nullable
  public BigDecimal getLargestKillingSpree() {
    return largestKillingSpree;
  }

  public void setLargestKillingSpree(BigDecimal largestKillingSpree) {
    this.largestKillingSpree = largestKillingSpree;
  }


  public TeamMatch largestMultiKill(BigDecimal largestMultiKill) {
    this.largestMultiKill = largestMultiKill;
    return this;
  }

  /**
   * Get largestMultiKill
   * @return largestMultiKill
   */
  @javax.annotation.Nullable
  public BigDecimal getLargestMultiKill() {
    return largestMultiKill;
  }

  public void setLargestMultiKill(BigDecimal largestMultiKill) {
    this.largestMultiKill = largestMultiKill;
  }


  public TeamMatch longestTimeSpentLiving(BigDecimal longestTimeSpentLiving) {
    this.longestTimeSpentLiving = longestTimeSpentLiving;
    return this;
  }

  /**
   * Get longestTimeSpentLiving
   * @return longestTimeSpentLiving
   */
  @javax.annotation.Nullable
  public BigDecimal getLongestTimeSpentLiving() {
    return longestTimeSpentLiving;
  }

  public void setLongestTimeSpentLiving(BigDecimal longestTimeSpentLiving) {
    this.longestTimeSpentLiving = longestTimeSpentLiving;
  }


  public TeamMatch magicDamageDealt(BigDecimal magicDamageDealt) {
    this.magicDamageDealt = magicDamageDealt;
    return this;
  }

  /**
   * Get magicDamageDealt
   * @return magicDamageDealt
   */
  @javax.annotation.Nullable
  public BigDecimal getMagicDamageDealt() {
    return magicDamageDealt;
  }

  public void setMagicDamageDealt(BigDecimal magicDamageDealt) {
    this.magicDamageDealt = magicDamageDealt;
  }


  public TeamMatch magicDamageDealtToChampions(BigDecimal magicDamageDealtToChampions) {
    this.magicDamageDealtToChampions = magicDamageDealtToChampions;
    return this;
  }

  /**
   * Get magicDamageDealtToChampions
   * @return magicDamageDealtToChampions
   */
  @javax.annotation.Nullable
  public BigDecimal getMagicDamageDealtToChampions() {
    return magicDamageDealtToChampions;
  }

  public void setMagicDamageDealtToChampions(BigDecimal magicDamageDealtToChampions) {
    this.magicDamageDealtToChampions = magicDamageDealtToChampions;
  }


  public TeamMatch magicDamageTaken(BigDecimal magicDamageTaken) {
    this.magicDamageTaken = magicDamageTaken;
    return this;
  }

  /**
   * Get magicDamageTaken
   * @return magicDamageTaken
   */
  @javax.annotation.Nullable
  public BigDecimal getMagicDamageTaken() {
    return magicDamageTaken;
  }

  public void setMagicDamageTaken(BigDecimal magicDamageTaken) {
    this.magicDamageTaken = magicDamageTaken;
  }


  public TeamMatch matchName(String matchName) {
    this.matchName = matchName;
    return this;
  }

  /**
   * Get matchName
   * @return matchName
   */
  @javax.annotation.Nullable
  public String getMatchName() {
    return matchName;
  }

  public void setMatchName(String matchName) {
    this.matchName = matchName;
  }


  public TeamMatch matches(Integer matches) {
    this.matches = matches;
    return this;
  }

  /**
   * Get matches
   * @return matches
   */
  @javax.annotation.Nullable
  public Integer getMatches() {
    return matches;
  }

  public void setMatches(Integer matches) {
    this.matches = matches;
  }


  public TeamMatch name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TeamMatch neutralMinionsKIlled(BigDecimal neutralMinionsKIlled) {
    this.neutralMinionsKIlled = neutralMinionsKIlled;
    return this;
  }

  /**
   * Get neutralMinionsKIlled
   * @return neutralMinionsKIlled
   */
  @javax.annotation.Nullable
  public BigDecimal getNeutralMinionsKIlled() {
    return neutralMinionsKIlled;
  }

  public void setNeutralMinionsKIlled(BigDecimal neutralMinionsKIlled) {
    this.neutralMinionsKIlled = neutralMinionsKIlled;
  }


  public TeamMatch neutralMinionsKIlledTeamJungle(BigDecimal neutralMinionsKIlledTeamJungle) {
    this.neutralMinionsKIlledTeamJungle = neutralMinionsKIlledTeamJungle;
    return this;
  }

  /**
   * Get neutralMinionsKIlledTeamJungle
   * @return neutralMinionsKIlledTeamJungle
   */
  @javax.annotation.Nullable
  public BigDecimal getNeutralMinionsKIlledTeamJungle() {
    return neutralMinionsKIlledTeamJungle;
  }

  public void setNeutralMinionsKIlledTeamJungle(BigDecimal neutralMinionsKIlledTeamJungle) {
    this.neutralMinionsKIlledTeamJungle = neutralMinionsKIlledTeamJungle;
  }


  public TeamMatch neutralMinionsKilledEnemyJungle(BigDecimal neutralMinionsKilledEnemyJungle) {
    this.neutralMinionsKilledEnemyJungle = neutralMinionsKilledEnemyJungle;
    return this;
  }

  /**
   * Get neutralMinionsKilledEnemyJungle
   * @return neutralMinionsKilledEnemyJungle
   */
  @javax.annotation.Nullable
  public BigDecimal getNeutralMinionsKilledEnemyJungle() {
    return neutralMinionsKilledEnemyJungle;
  }

  public void setNeutralMinionsKilledEnemyJungle(BigDecimal neutralMinionsKilledEnemyJungle) {
    this.neutralMinionsKilledEnemyJungle = neutralMinionsKilledEnemyJungle;
  }


  public TeamMatch objectivePlayerScore(BigDecimal objectivePlayerScore) {
    this.objectivePlayerScore = objectivePlayerScore;
    return this;
  }

  /**
   * Get objectivePlayerScore
   * @return objectivePlayerScore
   */
  @javax.annotation.Nullable
  public BigDecimal getObjectivePlayerScore() {
    return objectivePlayerScore;
  }

  public void setObjectivePlayerScore(BigDecimal objectivePlayerScore) {
    this.objectivePlayerScore = objectivePlayerScore;
  }


  public TeamMatch opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public TeamMatch opponentId(Integer opponentId) {
    this.opponentId = opponentId;
    return this;
  }

  /**
   * Get opponentId
   * @return opponentId
   */
  @javax.annotation.Nullable
  public Integer getOpponentId() {
    return opponentId;
  }

  public void setOpponentId(Integer opponentId) {
    this.opponentId = opponentId;
  }


  public TeamMatch pentaKills(BigDecimal pentaKills) {
    this.pentaKills = pentaKills;
    return this;
  }

  /**
   * Get pentaKills
   * @return pentaKills
   */
  @javax.annotation.Nullable
  public BigDecimal getPentaKills() {
    return pentaKills;
  }

  public void setPentaKills(BigDecimal pentaKills) {
    this.pentaKills = pentaKills;
  }


  public TeamMatch physicalDamageDealt(BigDecimal physicalDamageDealt) {
    this.physicalDamageDealt = physicalDamageDealt;
    return this;
  }

  /**
   * Get physicalDamageDealt
   * @return physicalDamageDealt
   */
  @javax.annotation.Nullable
  public BigDecimal getPhysicalDamageDealt() {
    return physicalDamageDealt;
  }

  public void setPhysicalDamageDealt(BigDecimal physicalDamageDealt) {
    this.physicalDamageDealt = physicalDamageDealt;
  }


  public TeamMatch physicalDamageDealtToChampions(BigDecimal physicalDamageDealtToChampions) {
    this.physicalDamageDealtToChampions = physicalDamageDealtToChampions;
    return this;
  }

  /**
   * Get physicalDamageDealtToChampions
   * @return physicalDamageDealtToChampions
   */
  @javax.annotation.Nullable
  public BigDecimal getPhysicalDamageDealtToChampions() {
    return physicalDamageDealtToChampions;
  }

  public void setPhysicalDamageDealtToChampions(BigDecimal physicalDamageDealtToChampions) {
    this.physicalDamageDealtToChampions = physicalDamageDealtToChampions;
  }


  public TeamMatch physicalDamageTaken(BigDecimal physicalDamageTaken) {
    this.physicalDamageTaken = physicalDamageTaken;
    return this;
  }

  /**
   * Get physicalDamageTaken
   * @return physicalDamageTaken
   */
  @javax.annotation.Nullable
  public BigDecimal getPhysicalDamageTaken() {
    return physicalDamageTaken;
  }

  public void setPhysicalDamageTaken(BigDecimal physicalDamageTaken) {
    this.physicalDamageTaken = physicalDamageTaken;
  }


  public TeamMatch playerId(Integer playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * Get playerId
   * @return playerId
   */
  @javax.annotation.Nullable
  public Integer getPlayerId() {
    return playerId;
  }

  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }


  public TeamMatch position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public TeamMatch quadraKills(BigDecimal quadraKills) {
    this.quadraKills = quadraKills;
    return this;
  }

  /**
   * Get quadraKills
   * @return quadraKills
   */
  @javax.annotation.Nullable
  public BigDecimal getQuadraKills() {
    return quadraKills;
  }

  public void setQuadraKills(BigDecimal quadraKills) {
    this.quadraKills = quadraKills;
  }


  public TeamMatch sightWardsBoughtInGame(BigDecimal sightWardsBoughtInGame) {
    this.sightWardsBoughtInGame = sightWardsBoughtInGame;
    return this;
  }

  /**
   * Get sightWardsBoughtInGame
   * @return sightWardsBoughtInGame
   */
  @javax.annotation.Nullable
  public BigDecimal getSightWardsBoughtInGame() {
    return sightWardsBoughtInGame;
  }

  public void setSightWardsBoughtInGame(BigDecimal sightWardsBoughtInGame) {
    this.sightWardsBoughtInGame = sightWardsBoughtInGame;
  }


  public TeamMatch team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public TeamMatch teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public TeamMatch tenKillsOrAssists(BigDecimal tenKillsOrAssists) {
    this.tenKillsOrAssists = tenKillsOrAssists;
    return this;
  }

  /**
   * Get tenKillsOrAssists
   * @return tenKillsOrAssists
   */
  @javax.annotation.Nullable
  public BigDecimal getTenKillsOrAssists() {
    return tenKillsOrAssists;
  }

  public void setTenKillsOrAssists(BigDecimal tenKillsOrAssists) {
    this.tenKillsOrAssists = tenKillsOrAssists;
  }


  public TeamMatch totalDamageDealt(BigDecimal totalDamageDealt) {
    this.totalDamageDealt = totalDamageDealt;
    return this;
  }

  /**
   * Get totalDamageDealt
   * @return totalDamageDealt
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalDamageDealt() {
    return totalDamageDealt;
  }

  public void setTotalDamageDealt(BigDecimal totalDamageDealt) {
    this.totalDamageDealt = totalDamageDealt;
  }


  public TeamMatch totalDamageDealtToChampions(BigDecimal totalDamageDealtToChampions) {
    this.totalDamageDealtToChampions = totalDamageDealtToChampions;
    return this;
  }

  /**
   * Get totalDamageDealtToChampions
   * @return totalDamageDealtToChampions
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalDamageDealtToChampions() {
    return totalDamageDealtToChampions;
  }

  public void setTotalDamageDealtToChampions(BigDecimal totalDamageDealtToChampions) {
    this.totalDamageDealtToChampions = totalDamageDealtToChampions;
  }


  public TeamMatch totalDamageTaken(BigDecimal totalDamageTaken) {
    this.totalDamageTaken = totalDamageTaken;
    return this;
  }

  /**
   * Get totalDamageTaken
   * @return totalDamageTaken
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalDamageTaken() {
    return totalDamageTaken;
  }

  public void setTotalDamageTaken(BigDecimal totalDamageTaken) {
    this.totalDamageTaken = totalDamageTaken;
  }


  public TeamMatch totalHeal(BigDecimal totalHeal) {
    this.totalHeal = totalHeal;
    return this;
  }

  /**
   * Get totalHeal
   * @return totalHeal
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalHeal() {
    return totalHeal;
  }

  public void setTotalHeal(BigDecimal totalHeal) {
    this.totalHeal = totalHeal;
  }


  public TeamMatch totalMinionsKilled(BigDecimal totalMinionsKilled) {
    this.totalMinionsKilled = totalMinionsKilled;
    return this;
  }

  /**
   * Get totalMinionsKilled
   * @return totalMinionsKilled
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalMinionsKilled() {
    return totalMinionsKilled;
  }

  public void setTotalMinionsKilled(BigDecimal totalMinionsKilled) {
    this.totalMinionsKilled = totalMinionsKilled;
  }


  public TeamMatch totalPlayerScore(BigDecimal totalPlayerScore) {
    this.totalPlayerScore = totalPlayerScore;
    return this;
  }

  /**
   * Get totalPlayerScore
   * @return totalPlayerScore
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalPlayerScore() {
    return totalPlayerScore;
  }

  public void setTotalPlayerScore(BigDecimal totalPlayerScore) {
    this.totalPlayerScore = totalPlayerScore;
  }


  public TeamMatch totalTimeCrowdControlDealt(BigDecimal totalTimeCrowdControlDealt) {
    this.totalTimeCrowdControlDealt = totalTimeCrowdControlDealt;
    return this;
  }

  /**
   * Get totalTimeCrowdControlDealt
   * @return totalTimeCrowdControlDealt
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalTimeCrowdControlDealt() {
    return totalTimeCrowdControlDealt;
  }

  public void setTotalTimeCrowdControlDealt(BigDecimal totalTimeCrowdControlDealt) {
    this.totalTimeCrowdControlDealt = totalTimeCrowdControlDealt;
  }


  public TeamMatch totalUnitsHealed(BigDecimal totalUnitsHealed) {
    this.totalUnitsHealed = totalUnitsHealed;
    return this;
  }

  /**
   * Get totalUnitsHealed
   * @return totalUnitsHealed
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalUnitsHealed() {
    return totalUnitsHealed;
  }

  public void setTotalUnitsHealed(BigDecimal totalUnitsHealed) {
    this.totalUnitsHealed = totalUnitsHealed;
  }


  public TeamMatch tripleKills(BigDecimal tripleKills) {
    this.tripleKills = tripleKills;
    return this;
  }

  /**
   * Get tripleKills
   * @return tripleKills
   */
  @javax.annotation.Nullable
  public BigDecimal getTripleKills() {
    return tripleKills;
  }

  public void setTripleKills(BigDecimal tripleKills) {
    this.tripleKills = tripleKills;
  }


  public TeamMatch trueDamageDealt(BigDecimal trueDamageDealt) {
    this.trueDamageDealt = trueDamageDealt;
    return this;
  }

  /**
   * Get trueDamageDealt
   * @return trueDamageDealt
   */
  @javax.annotation.Nullable
  public BigDecimal getTrueDamageDealt() {
    return trueDamageDealt;
  }

  public void setTrueDamageDealt(BigDecimal trueDamageDealt) {
    this.trueDamageDealt = trueDamageDealt;
  }


  public TeamMatch trueDamageDealtToChampions(BigDecimal trueDamageDealtToChampions) {
    this.trueDamageDealtToChampions = trueDamageDealtToChampions;
    return this;
  }

  /**
   * Get trueDamageDealtToChampions
   * @return trueDamageDealtToChampions
   */
  @javax.annotation.Nullable
  public BigDecimal getTrueDamageDealtToChampions() {
    return trueDamageDealtToChampions;
  }

  public void setTrueDamageDealtToChampions(BigDecimal trueDamageDealtToChampions) {
    this.trueDamageDealtToChampions = trueDamageDealtToChampions;
  }


  public TeamMatch trueDamageTaken(BigDecimal trueDamageTaken) {
    this.trueDamageTaken = trueDamageTaken;
    return this;
  }

  /**
   * Get trueDamageTaken
   * @return trueDamageTaken
   */
  @javax.annotation.Nullable
  public BigDecimal getTrueDamageTaken() {
    return trueDamageTaken;
  }

  public void setTrueDamageTaken(BigDecimal trueDamageTaken) {
    this.trueDamageTaken = trueDamageTaken;
  }


  public TeamMatch turretKills(BigDecimal turretKills) {
    this.turretKills = turretKills;
    return this;
  }

  /**
   * Get turretKills
   * @return turretKills
   */
  @javax.annotation.Nullable
  public BigDecimal getTurretKills() {
    return turretKills;
  }

  public void setTurretKills(BigDecimal turretKills) {
    this.turretKills = turretKills;
  }


  public TeamMatch unrealKills(BigDecimal unrealKills) {
    this.unrealKills = unrealKills;
    return this;
  }

  /**
   * Get unrealKills
   * @return unrealKills
   */
  @javax.annotation.Nullable
  public BigDecimal getUnrealKills() {
    return unrealKills;
  }

  public void setUnrealKills(BigDecimal unrealKills) {
    this.unrealKills = unrealKills;
  }


  public TeamMatch updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public TeamMatch visionWardsBoughtInGame(BigDecimal visionWardsBoughtInGame) {
    this.visionWardsBoughtInGame = visionWardsBoughtInGame;
    return this;
  }

  /**
   * Get visionWardsBoughtInGame
   * @return visionWardsBoughtInGame
   */
  @javax.annotation.Nullable
  public BigDecimal getVisionWardsBoughtInGame() {
    return visionWardsBoughtInGame;
  }

  public void setVisionWardsBoughtInGame(BigDecimal visionWardsBoughtInGame) {
    this.visionWardsBoughtInGame = visionWardsBoughtInGame;
  }


  public TeamMatch wardsKilled(BigDecimal wardsKilled) {
    this.wardsKilled = wardsKilled;
    return this;
  }

  /**
   * Get wardsKilled
   * @return wardsKilled
   */
  @javax.annotation.Nullable
  public BigDecimal getWardsKilled() {
    return wardsKilled;
  }

  public void setWardsKilled(BigDecimal wardsKilled) {
    this.wardsKilled = wardsKilled;
  }


  public TeamMatch wardsPlaced(BigDecimal wardsPlaced) {
    this.wardsPlaced = wardsPlaced;
    return this;
  }

  /**
   * Get wardsPlaced
   * @return wardsPlaced
   */
  @javax.annotation.Nullable
  public BigDecimal getWardsPlaced() {
    return wardsPlaced;
  }

  public void setWardsPlaced(BigDecimal wardsPlaced) {
    this.wardsPlaced = wardsPlaced;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamMatch teamMatch = (TeamMatch) o;
    return Objects.equals(this.assists, teamMatch.assists) &&
        Objects.equals(this.combatPlayerScore, teamMatch.combatPlayerScore) &&
        Objects.equals(this.dateTime, teamMatch.dateTime) &&
        Objects.equals(this.day, teamMatch.day) &&
        Objects.equals(this.deaths, teamMatch.deaths) &&
        Objects.equals(this.doubleKills, teamMatch.doubleKills) &&
        Objects.equals(this.fantasyPoints, teamMatch.fantasyPoints) &&
        Objects.equals(this.firstBaron, teamMatch.firstBaron) &&
        Objects.equals(this.firstBlood, teamMatch.firstBlood) &&
        Objects.equals(this.firstDragon, teamMatch.firstDragon) &&
        Objects.equals(this.firstInhibitor, teamMatch.firstInhibitor) &&
        Objects.equals(this.firstRiftHerald, teamMatch.firstRiftHerald) &&
        Objects.equals(this.firstTower, teamMatch.firstTower) &&
        Objects.equals(this.gameId, teamMatch.gameId) &&
        Objects.equals(this.games, teamMatch.games) &&
        Objects.equals(this.goldEarned, teamMatch.goldEarned) &&
        Objects.equals(this.goldSpent, teamMatch.goldSpent) &&
        Objects.equals(this.inhibitorKills, teamMatch.inhibitorKills) &&
        Objects.equals(this.isClosed, teamMatch.isClosed) &&
        Objects.equals(this.killingSpree, teamMatch.killingSpree) &&
        Objects.equals(this.kills, teamMatch.kills) &&
        Objects.equals(this.largestCriticalStrike, teamMatch.largestCriticalStrike) &&
        Objects.equals(this.largestKillingSpree, teamMatch.largestKillingSpree) &&
        Objects.equals(this.largestMultiKill, teamMatch.largestMultiKill) &&
        Objects.equals(this.longestTimeSpentLiving, teamMatch.longestTimeSpentLiving) &&
        Objects.equals(this.magicDamageDealt, teamMatch.magicDamageDealt) &&
        Objects.equals(this.magicDamageDealtToChampions, teamMatch.magicDamageDealtToChampions) &&
        Objects.equals(this.magicDamageTaken, teamMatch.magicDamageTaken) &&
        Objects.equals(this.matchName, teamMatch.matchName) &&
        Objects.equals(this.matches, teamMatch.matches) &&
        Objects.equals(this.name, teamMatch.name) &&
        Objects.equals(this.neutralMinionsKIlled, teamMatch.neutralMinionsKIlled) &&
        Objects.equals(this.neutralMinionsKIlledTeamJungle, teamMatch.neutralMinionsKIlledTeamJungle) &&
        Objects.equals(this.neutralMinionsKilledEnemyJungle, teamMatch.neutralMinionsKilledEnemyJungle) &&
        Objects.equals(this.objectivePlayerScore, teamMatch.objectivePlayerScore) &&
        Objects.equals(this.opponent, teamMatch.opponent) &&
        Objects.equals(this.opponentId, teamMatch.opponentId) &&
        Objects.equals(this.pentaKills, teamMatch.pentaKills) &&
        Objects.equals(this.physicalDamageDealt, teamMatch.physicalDamageDealt) &&
        Objects.equals(this.physicalDamageDealtToChampions, teamMatch.physicalDamageDealtToChampions) &&
        Objects.equals(this.physicalDamageTaken, teamMatch.physicalDamageTaken) &&
        Objects.equals(this.playerId, teamMatch.playerId) &&
        Objects.equals(this.position, teamMatch.position) &&
        Objects.equals(this.quadraKills, teamMatch.quadraKills) &&
        Objects.equals(this.sightWardsBoughtInGame, teamMatch.sightWardsBoughtInGame) &&
        Objects.equals(this.team, teamMatch.team) &&
        Objects.equals(this.teamId, teamMatch.teamId) &&
        Objects.equals(this.tenKillsOrAssists, teamMatch.tenKillsOrAssists) &&
        Objects.equals(this.totalDamageDealt, teamMatch.totalDamageDealt) &&
        Objects.equals(this.totalDamageDealtToChampions, teamMatch.totalDamageDealtToChampions) &&
        Objects.equals(this.totalDamageTaken, teamMatch.totalDamageTaken) &&
        Objects.equals(this.totalHeal, teamMatch.totalHeal) &&
        Objects.equals(this.totalMinionsKilled, teamMatch.totalMinionsKilled) &&
        Objects.equals(this.totalPlayerScore, teamMatch.totalPlayerScore) &&
        Objects.equals(this.totalTimeCrowdControlDealt, teamMatch.totalTimeCrowdControlDealt) &&
        Objects.equals(this.totalUnitsHealed, teamMatch.totalUnitsHealed) &&
        Objects.equals(this.tripleKills, teamMatch.tripleKills) &&
        Objects.equals(this.trueDamageDealt, teamMatch.trueDamageDealt) &&
        Objects.equals(this.trueDamageDealtToChampions, teamMatch.trueDamageDealtToChampions) &&
        Objects.equals(this.trueDamageTaken, teamMatch.trueDamageTaken) &&
        Objects.equals(this.turretKills, teamMatch.turretKills) &&
        Objects.equals(this.unrealKills, teamMatch.unrealKills) &&
        Objects.equals(this.updated, teamMatch.updated) &&
        Objects.equals(this.visionWardsBoughtInGame, teamMatch.visionWardsBoughtInGame) &&
        Objects.equals(this.wardsKilled, teamMatch.wardsKilled) &&
        Objects.equals(this.wardsPlaced, teamMatch.wardsPlaced);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assists, combatPlayerScore, dateTime, day, deaths, doubleKills, fantasyPoints, firstBaron, firstBlood, firstDragon, firstInhibitor, firstRiftHerald, firstTower, gameId, games, goldEarned, goldSpent, inhibitorKills, isClosed, killingSpree, kills, largestCriticalStrike, largestKillingSpree, largestMultiKill, longestTimeSpentLiving, magicDamageDealt, magicDamageDealtToChampions, magicDamageTaken, matchName, matches, name, neutralMinionsKIlled, neutralMinionsKIlledTeamJungle, neutralMinionsKilledEnemyJungle, objectivePlayerScore, opponent, opponentId, pentaKills, physicalDamageDealt, physicalDamageDealtToChampions, physicalDamageTaken, playerId, position, quadraKills, sightWardsBoughtInGame, team, teamId, tenKillsOrAssists, totalDamageDealt, totalDamageDealtToChampions, totalDamageTaken, totalHeal, totalMinionsKilled, totalPlayerScore, totalTimeCrowdControlDealt, totalUnitsHealed, tripleKills, trueDamageDealt, trueDamageDealtToChampions, trueDamageTaken, turretKills, unrealKills, updated, visionWardsBoughtInGame, wardsKilled, wardsPlaced);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamMatch {\n");
    sb.append("    assists: ").append(toIndentedString(assists)).append("\n");
    sb.append("    combatPlayerScore: ").append(toIndentedString(combatPlayerScore)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    deaths: ").append(toIndentedString(deaths)).append("\n");
    sb.append("    doubleKills: ").append(toIndentedString(doubleKills)).append("\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    firstBaron: ").append(toIndentedString(firstBaron)).append("\n");
    sb.append("    firstBlood: ").append(toIndentedString(firstBlood)).append("\n");
    sb.append("    firstDragon: ").append(toIndentedString(firstDragon)).append("\n");
    sb.append("    firstInhibitor: ").append(toIndentedString(firstInhibitor)).append("\n");
    sb.append("    firstRiftHerald: ").append(toIndentedString(firstRiftHerald)).append("\n");
    sb.append("    firstTower: ").append(toIndentedString(firstTower)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    goldEarned: ").append(toIndentedString(goldEarned)).append("\n");
    sb.append("    goldSpent: ").append(toIndentedString(goldSpent)).append("\n");
    sb.append("    inhibitorKills: ").append(toIndentedString(inhibitorKills)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    killingSpree: ").append(toIndentedString(killingSpree)).append("\n");
    sb.append("    kills: ").append(toIndentedString(kills)).append("\n");
    sb.append("    largestCriticalStrike: ").append(toIndentedString(largestCriticalStrike)).append("\n");
    sb.append("    largestKillingSpree: ").append(toIndentedString(largestKillingSpree)).append("\n");
    sb.append("    largestMultiKill: ").append(toIndentedString(largestMultiKill)).append("\n");
    sb.append("    longestTimeSpentLiving: ").append(toIndentedString(longestTimeSpentLiving)).append("\n");
    sb.append("    magicDamageDealt: ").append(toIndentedString(magicDamageDealt)).append("\n");
    sb.append("    magicDamageDealtToChampions: ").append(toIndentedString(magicDamageDealtToChampions)).append("\n");
    sb.append("    magicDamageTaken: ").append(toIndentedString(magicDamageTaken)).append("\n");
    sb.append("    matchName: ").append(toIndentedString(matchName)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    neutralMinionsKIlled: ").append(toIndentedString(neutralMinionsKIlled)).append("\n");
    sb.append("    neutralMinionsKIlledTeamJungle: ").append(toIndentedString(neutralMinionsKIlledTeamJungle)).append("\n");
    sb.append("    neutralMinionsKilledEnemyJungle: ").append(toIndentedString(neutralMinionsKilledEnemyJungle)).append("\n");
    sb.append("    objectivePlayerScore: ").append(toIndentedString(objectivePlayerScore)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    opponentId: ").append(toIndentedString(opponentId)).append("\n");
    sb.append("    pentaKills: ").append(toIndentedString(pentaKills)).append("\n");
    sb.append("    physicalDamageDealt: ").append(toIndentedString(physicalDamageDealt)).append("\n");
    sb.append("    physicalDamageDealtToChampions: ").append(toIndentedString(physicalDamageDealtToChampions)).append("\n");
    sb.append("    physicalDamageTaken: ").append(toIndentedString(physicalDamageTaken)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    quadraKills: ").append(toIndentedString(quadraKills)).append("\n");
    sb.append("    sightWardsBoughtInGame: ").append(toIndentedString(sightWardsBoughtInGame)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    tenKillsOrAssists: ").append(toIndentedString(tenKillsOrAssists)).append("\n");
    sb.append("    totalDamageDealt: ").append(toIndentedString(totalDamageDealt)).append("\n");
    sb.append("    totalDamageDealtToChampions: ").append(toIndentedString(totalDamageDealtToChampions)).append("\n");
    sb.append("    totalDamageTaken: ").append(toIndentedString(totalDamageTaken)).append("\n");
    sb.append("    totalHeal: ").append(toIndentedString(totalHeal)).append("\n");
    sb.append("    totalMinionsKilled: ").append(toIndentedString(totalMinionsKilled)).append("\n");
    sb.append("    totalPlayerScore: ").append(toIndentedString(totalPlayerScore)).append("\n");
    sb.append("    totalTimeCrowdControlDealt: ").append(toIndentedString(totalTimeCrowdControlDealt)).append("\n");
    sb.append("    totalUnitsHealed: ").append(toIndentedString(totalUnitsHealed)).append("\n");
    sb.append("    tripleKills: ").append(toIndentedString(tripleKills)).append("\n");
    sb.append("    trueDamageDealt: ").append(toIndentedString(trueDamageDealt)).append("\n");
    sb.append("    trueDamageDealtToChampions: ").append(toIndentedString(trueDamageDealtToChampions)).append("\n");
    sb.append("    trueDamageTaken: ").append(toIndentedString(trueDamageTaken)).append("\n");
    sb.append("    turretKills: ").append(toIndentedString(turretKills)).append("\n");
    sb.append("    unrealKills: ").append(toIndentedString(unrealKills)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    visionWardsBoughtInGame: ").append(toIndentedString(visionWardsBoughtInGame)).append("\n");
    sb.append("    wardsKilled: ").append(toIndentedString(wardsKilled)).append("\n");
    sb.append("    wardsPlaced: ").append(toIndentedString(wardsPlaced)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Assists");
    openapiFields.add("CombatPlayerScore");
    openapiFields.add("DateTime");
    openapiFields.add("Day");
    openapiFields.add("Deaths");
    openapiFields.add("DoubleKills");
    openapiFields.add("FantasyPoints");
    openapiFields.add("FirstBaron");
    openapiFields.add("FirstBlood");
    openapiFields.add("FirstDragon");
    openapiFields.add("FirstInhibitor");
    openapiFields.add("FirstRiftHerald");
    openapiFields.add("FirstTower");
    openapiFields.add("GameId");
    openapiFields.add("Games");
    openapiFields.add("GoldEarned");
    openapiFields.add("GoldSpent");
    openapiFields.add("InhibitorKills");
    openapiFields.add("IsClosed");
    openapiFields.add("KillingSpree");
    openapiFields.add("Kills");
    openapiFields.add("LargestCriticalStrike");
    openapiFields.add("LargestKillingSpree");
    openapiFields.add("LargestMultiKill");
    openapiFields.add("LongestTimeSpentLiving");
    openapiFields.add("MagicDamageDealt");
    openapiFields.add("MagicDamageDealtToChampions");
    openapiFields.add("MagicDamageTaken");
    openapiFields.add("MatchName");
    openapiFields.add("Matches");
    openapiFields.add("Name");
    openapiFields.add("NeutralMinionsKIlled");
    openapiFields.add("NeutralMinionsKIlledTeamJungle");
    openapiFields.add("NeutralMinionsKilledEnemyJungle");
    openapiFields.add("ObjectivePlayerScore");
    openapiFields.add("Opponent");
    openapiFields.add("OpponentId");
    openapiFields.add("PentaKills");
    openapiFields.add("PhysicalDamageDealt");
    openapiFields.add("PhysicalDamageDealtToChampions");
    openapiFields.add("PhysicalDamageTaken");
    openapiFields.add("PlayerId");
    openapiFields.add("Position");
    openapiFields.add("QuadraKills");
    openapiFields.add("SightWardsBoughtInGame");
    openapiFields.add("Team");
    openapiFields.add("TeamId");
    openapiFields.add("TenKillsOrAssists");
    openapiFields.add("TotalDamageDealt");
    openapiFields.add("TotalDamageDealtToChampions");
    openapiFields.add("TotalDamageTaken");
    openapiFields.add("TotalHeal");
    openapiFields.add("TotalMinionsKilled");
    openapiFields.add("TotalPlayerScore");
    openapiFields.add("TotalTimeCrowdControlDealt");
    openapiFields.add("TotalUnitsHealed");
    openapiFields.add("TripleKills");
    openapiFields.add("TrueDamageDealt");
    openapiFields.add("TrueDamageDealtToChampions");
    openapiFields.add("TrueDamageTaken");
    openapiFields.add("TurretKills");
    openapiFields.add("UnrealKills");
    openapiFields.add("Updated");
    openapiFields.add("VisionWardsBoughtInGame");
    openapiFields.add("WardsKilled");
    openapiFields.add("WardsPlaced");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamMatch is not found in the empty JSON string", TeamMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("MatchName") != null && !jsonObj.get("MatchName").isJsonNull()) && !jsonObj.get("MatchName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MatchName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MatchName").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamMatch>() {
           @Override
           public void write(JsonWriter out, TeamMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamMatch
   * @throws IOException if the JSON string is invalid with respect to TeamMatch
   */
  public static TeamMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamMatch.class);
  }

  /**
   * Convert an instance of TeamMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

