# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayerHole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birdie: bool=None, bogey: bool=None, double_bogey: bool=None, double_eagle: bool=None, eagle: bool=None, hole_in_one: bool=None, is_par: bool=None, number: int=None, par: int=None, player_round_id: int=None, score: int=None, to_par: int=None, worse_than_double_bogey: bool=None):
        """PlayerHole - a model defined in OpenAPI

        :param birdie: The birdie of this PlayerHole.
        :param bogey: The bogey of this PlayerHole.
        :param double_bogey: The double_bogey of this PlayerHole.
        :param double_eagle: The double_eagle of this PlayerHole.
        :param eagle: The eagle of this PlayerHole.
        :param hole_in_one: The hole_in_one of this PlayerHole.
        :param is_par: The is_par of this PlayerHole.
        :param number: The number of this PlayerHole.
        :param par: The par of this PlayerHole.
        :param player_round_id: The player_round_id of this PlayerHole.
        :param score: The score of this PlayerHole.
        :param to_par: The to_par of this PlayerHole.
        :param worse_than_double_bogey: The worse_than_double_bogey of this PlayerHole.
        """
        self.openapi_types = {
            'birdie': bool,
            'bogey': bool,
            'double_bogey': bool,
            'double_eagle': bool,
            'eagle': bool,
            'hole_in_one': bool,
            'is_par': bool,
            'number': int,
            'par': int,
            'player_round_id': int,
            'score': int,
            'to_par': int,
            'worse_than_double_bogey': bool
        }

        self.attribute_map = {
            'birdie': 'Birdie',
            'bogey': 'Bogey',
            'double_bogey': 'DoubleBogey',
            'double_eagle': 'DoubleEagle',
            'eagle': 'Eagle',
            'hole_in_one': 'HoleInOne',
            'is_par': 'IsPar',
            'number': 'Number',
            'par': 'Par',
            'player_round_id': 'PlayerRoundID',
            'score': 'Score',
            'to_par': 'ToPar',
            'worse_than_double_bogey': 'WorseThanDoubleBogey'
        }

        self._birdie = birdie
        self._bogey = bogey
        self._double_bogey = double_bogey
        self._double_eagle = double_eagle
        self._eagle = eagle
        self._hole_in_one = hole_in_one
        self._is_par = is_par
        self._number = number
        self._par = par
        self._player_round_id = player_round_id
        self._score = score
        self._to_par = to_par
        self._worse_than_double_bogey = worse_than_double_bogey

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerHole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerHole of this PlayerHole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birdie(self):
        """Gets the birdie of this PlayerHole.


        :return: The birdie of this PlayerHole.
        :rtype: bool
        """
        return self._birdie

    @birdie.setter
    def birdie(self, birdie):
        """Sets the birdie of this PlayerHole.


        :param birdie: The birdie of this PlayerHole.
        :type birdie: bool
        """

        self._birdie = birdie

    @property
    def bogey(self):
        """Gets the bogey of this PlayerHole.


        :return: The bogey of this PlayerHole.
        :rtype: bool
        """
        return self._bogey

    @bogey.setter
    def bogey(self, bogey):
        """Sets the bogey of this PlayerHole.


        :param bogey: The bogey of this PlayerHole.
        :type bogey: bool
        """

        self._bogey = bogey

    @property
    def double_bogey(self):
        """Gets the double_bogey of this PlayerHole.


        :return: The double_bogey of this PlayerHole.
        :rtype: bool
        """
        return self._double_bogey

    @double_bogey.setter
    def double_bogey(self, double_bogey):
        """Sets the double_bogey of this PlayerHole.


        :param double_bogey: The double_bogey of this PlayerHole.
        :type double_bogey: bool
        """

        self._double_bogey = double_bogey

    @property
    def double_eagle(self):
        """Gets the double_eagle of this PlayerHole.


        :return: The double_eagle of this PlayerHole.
        :rtype: bool
        """
        return self._double_eagle

    @double_eagle.setter
    def double_eagle(self, double_eagle):
        """Sets the double_eagle of this PlayerHole.


        :param double_eagle: The double_eagle of this PlayerHole.
        :type double_eagle: bool
        """

        self._double_eagle = double_eagle

    @property
    def eagle(self):
        """Gets the eagle of this PlayerHole.


        :return: The eagle of this PlayerHole.
        :rtype: bool
        """
        return self._eagle

    @eagle.setter
    def eagle(self, eagle):
        """Sets the eagle of this PlayerHole.


        :param eagle: The eagle of this PlayerHole.
        :type eagle: bool
        """

        self._eagle = eagle

    @property
    def hole_in_one(self):
        """Gets the hole_in_one of this PlayerHole.


        :return: The hole_in_one of this PlayerHole.
        :rtype: bool
        """
        return self._hole_in_one

    @hole_in_one.setter
    def hole_in_one(self, hole_in_one):
        """Sets the hole_in_one of this PlayerHole.


        :param hole_in_one: The hole_in_one of this PlayerHole.
        :type hole_in_one: bool
        """

        self._hole_in_one = hole_in_one

    @property
    def is_par(self):
        """Gets the is_par of this PlayerHole.


        :return: The is_par of this PlayerHole.
        :rtype: bool
        """
        return self._is_par

    @is_par.setter
    def is_par(self, is_par):
        """Sets the is_par of this PlayerHole.


        :param is_par: The is_par of this PlayerHole.
        :type is_par: bool
        """

        self._is_par = is_par

    @property
    def number(self):
        """Gets the number of this PlayerHole.


        :return: The number of this PlayerHole.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PlayerHole.


        :param number: The number of this PlayerHole.
        :type number: int
        """

        self._number = number

    @property
    def par(self):
        """Gets the par of this PlayerHole.


        :return: The par of this PlayerHole.
        :rtype: int
        """
        return self._par

    @par.setter
    def par(self, par):
        """Sets the par of this PlayerHole.


        :param par: The par of this PlayerHole.
        :type par: int
        """

        self._par = par

    @property
    def player_round_id(self):
        """Gets the player_round_id of this PlayerHole.


        :return: The player_round_id of this PlayerHole.
        :rtype: int
        """
        return self._player_round_id

    @player_round_id.setter
    def player_round_id(self, player_round_id):
        """Sets the player_round_id of this PlayerHole.


        :param player_round_id: The player_round_id of this PlayerHole.
        :type player_round_id: int
        """

        self._player_round_id = player_round_id

    @property
    def score(self):
        """Gets the score of this PlayerHole.


        :return: The score of this PlayerHole.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PlayerHole.


        :param score: The score of this PlayerHole.
        :type score: int
        """

        self._score = score

    @property
    def to_par(self):
        """Gets the to_par of this PlayerHole.


        :return: The to_par of this PlayerHole.
        :rtype: int
        """
        return self._to_par

    @to_par.setter
    def to_par(self, to_par):
        """Sets the to_par of this PlayerHole.


        :param to_par: The to_par of this PlayerHole.
        :type to_par: int
        """

        self._to_par = to_par

    @property
    def worse_than_double_bogey(self):
        """Gets the worse_than_double_bogey of this PlayerHole.


        :return: The worse_than_double_bogey of this PlayerHole.
        :rtype: bool
        """
        return self._worse_than_double_bogey

    @worse_than_double_bogey.setter
    def worse_than_double_bogey(self, worse_than_double_bogey):
        """Sets the worse_than_double_bogey of this PlayerHole.


        :param worse_than_double_bogey: The worse_than_double_bogey of this PlayerHole.
        :type worse_than_double_bogey: bool
        """

        self._worse_than_double_bogey = worse_than_double_bogey
