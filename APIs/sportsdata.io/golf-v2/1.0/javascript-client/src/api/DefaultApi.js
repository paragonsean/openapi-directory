/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DfsSlate from '../model/DfsSlate';
import Injury from '../model/Injury';
import Leaderboard from '../model/Leaderboard';
import News from '../model/News';
import Player from '../model/Player';
import PlayerSeason from '../model/PlayerSeason';
import PlayerTournament from '../model/PlayerTournament';
import PlayerTournamentProjection from '../model/PlayerTournamentProjection';
import Season from '../model/Season';
import Tournament from '../model/Tournament';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the currentSeason operation.
     * @callback module:api/DefaultApi~currentSeasonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Season} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current Season
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~currentSeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Season}
     */
    currentSeason(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling currentSeason");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Season;
      return this.apiClient.callApi(
        '/{format}/CurrentSeason', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlates operation.
     * @callback module:api/DefaultApi~dfsSlatesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slates
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} tournamentid The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>58</code>, <code>61</code>, etc.
     * @param {module:api/DefaultApi~dfsSlatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlates(format, tournamentid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlates");
      }
      // verify the required parameter 'tournamentid' is set
      if (tournamentid === undefined || tournamentid === null) {
        throw new Error("Missing the required parameter 'tournamentid' when calling dfsSlates");
      }

      let pathParams = {
        'format': format,
        'tournamentid': tournamentid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByTournament/{tournamentid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuries operation.
     * @callback module:api/DefaultApi~injuriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Injury>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injuries
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~injuriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Injury>}
     */
    injuries(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuries");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Injury];
      return this.apiClient.callApi(
        '/{format}/Injuries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuriesHistorical operation.
     * @callback module:api/DefaultApi~injuriesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Injury>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injuries (Historical)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~injuriesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Injury>}
     */
    injuriesHistorical(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuriesHistorical");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Injury];
      return this.apiClient.callApi(
        '/{format}/InjuriesByHistorical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaderboard operation.
     * @callback module:api/DefaultApi~leaderboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Leaderboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leaderboard
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} tournamentid The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>58</code>, <code>61</code>, etc.
     * @param {module:api/DefaultApi~leaderboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Leaderboard}
     */
    leaderboard(format, tournamentid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling leaderboard");
      }
      // verify the required parameter 'tournamentid' is set
      if (tournamentid === undefined || tournamentid === null) {
        throw new Error("Missing the required parameter 'tournamentid' when calling leaderboard");
      }

      let pathParams = {
        'format': format,
        'tournamentid': tournamentid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Leaderboard;
      return this.apiClient.callApi(
        '/{format}/Leaderboard/{tournamentid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the news operation.
     * @callback module:api/DefaultApi~newsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~newsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    news(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling news");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/News', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByDate operation.
     * @callback module:api/DefaultApi~newsByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2015-JUL-31</code>, <code>2015-SEP-01</code>.
     * @param {module:api/DefaultApi~newsByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling newsByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newsByPlayer operation.
     * @callback module:api/DefaultApi~newsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/News>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * News by Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>40000019</code>.
     * @param {module:api/DefaultApi~newsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/News>}
     */
    newsByPlayer(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling newsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling newsByPlayer");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [News];
      return this.apiClient.callApi(
        '/{format}/NewsByPlayerID/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the player operation.
     * @callback module:api/DefaultApi~playerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>40000019</code>.
     * @param {module:api/DefaultApi~playerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    player(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling player");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling player");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/{format}/Player/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSeasonStatsWWorldGolfRankings operation.
     * @callback module:api/DefaultApi~playerSeasonStatsWWorldGolfRankingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Season Stats (w/ World Golf Rankings)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2016</code>, <code>2017</code>.
     * @param {module:api/DefaultApi~playerSeasonStatsWWorldGolfRankingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeason>}
     */
    playerSeasonStatsWWorldGolfRankings(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerSeasonStatsWWorldGolfRankings");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerSeasonStatsWWorldGolfRankings");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeason];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerTournamentProjectedStatsWDraftkingsSalaries operation.
     * @callback module:api/DefaultApi~playerTournamentProjectedStatsWDraftkingsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerTournamentProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Tournament Projected Stats (w/ DraftKings Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} tournamentid The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>78</code>, <code>79</code>, <code>80</code>, etc.
     * @param {module:api/DefaultApi~playerTournamentProjectedStatsWDraftkingsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerTournamentProjection>}
     */
    playerTournamentProjectedStatsWDraftkingsSalaries(format, tournamentid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerTournamentProjectedStatsWDraftkingsSalaries");
      }
      // verify the required parameter 'tournamentid' is set
      if (tournamentid === undefined || tournamentid === null) {
        throw new Error("Missing the required parameter 'tournamentid' when calling playerTournamentProjectedStatsWDraftkingsSalaries");
      }

      let pathParams = {
        'format': format,
        'tournamentid': tournamentid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerTournamentProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerTournamentProjectionStats/{tournamentid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerTournamentStatsByPlayer operation.
     * @callback module:api/DefaultApi~playerTournamentStatsByPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerTournament} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Tournament Stats By Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} tournamentid The TournamentID of a tournament.  TournamentIDs can be found in the Tournaments API.  Valid entries are <code>58</code>, <code>61</code>, etc.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>40000019</code>.
     * @param {module:api/DefaultApi~playerTournamentStatsByPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerTournament}
     */
    playerTournamentStatsByPlayer(format, tournamentid, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playerTournamentStatsByPlayer");
      }
      // verify the required parameter 'tournamentid' is set
      if (tournamentid === undefined || tournamentid === null) {
        throw new Error("Missing the required parameter 'tournamentid' when calling playerTournamentStatsByPlayer");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling playerTournamentStatsByPlayer");
      }

      let pathParams = {
        'format': format,
        'tournamentid': tournamentid,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerTournament;
      return this.apiClient.callApi(
        '/{format}/PlayerTournamentStatsByPlayer/{tournamentid}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the players operation.
     * @callback module:api/DefaultApi~playersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    players(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling players");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedule operation.
     * @callback module:api/DefaultApi~scheduleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tournament>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~scheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tournament>}
     */
    schedule(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedule");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tournament];
      return this.apiClient.callApi(
        '/{format}/Tournaments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleBySeason operation.
     * @callback module:api/DefaultApi~scheduleBySeasonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tournament>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule by Season
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2016</code>, <code>2017</code>.
     * @param {module:api/DefaultApi~scheduleBySeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tournament>}
     */
    scheduleBySeason(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling scheduleBySeason");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling scheduleBySeason");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tournament];
      return this.apiClient.callApi(
        '/{format}/Tournaments/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
