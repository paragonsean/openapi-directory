/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Player model module.
 * @module model/Player
 * @version 1.0
 */
class Player {
    /**
     * Constructs a new <code>Player</code>.
     * @alias module:model/Player
     */
    constructor() { 
        
        Player.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Player</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Player} obj Optional instance to populate.
     * @return {module:model/Player} The populated <code>Player</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Player();

            if (data.hasOwnProperty('BirthCity')) {
                obj['BirthCity'] = ApiClient.convertToType(data['BirthCity'], 'String');
            }
            if (data.hasOwnProperty('BirthDate')) {
                obj['BirthDate'] = ApiClient.convertToType(data['BirthDate'], 'String');
            }
            if (data.hasOwnProperty('BirthState')) {
                obj['BirthState'] = ApiClient.convertToType(data['BirthState'], 'String');
            }
            if (data.hasOwnProperty('College')) {
                obj['College'] = ApiClient.convertToType(data['College'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('DraftKingsName')) {
                obj['DraftKingsName'] = ApiClient.convertToType(data['DraftKingsName'], 'String');
            }
            if (data.hasOwnProperty('DraftKingsPlayerID')) {
                obj['DraftKingsPlayerID'] = ApiClient.convertToType(data['DraftKingsPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('FanDuelName')) {
                obj['FanDuelName'] = ApiClient.convertToType(data['FanDuelName'], 'String');
            }
            if (data.hasOwnProperty('FanDuelPlayerID')) {
                obj['FanDuelPlayerID'] = ApiClient.convertToType(data['FanDuelPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('FantasyAlarmPlayerID')) {
                obj['FantasyAlarmPlayerID'] = ApiClient.convertToType(data['FantasyAlarmPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('FantasyDraftName')) {
                obj['FantasyDraftName'] = ApiClient.convertToType(data['FantasyDraftName'], 'String');
            }
            if (data.hasOwnProperty('FantasyDraftPlayerID')) {
                obj['FantasyDraftPlayerID'] = ApiClient.convertToType(data['FantasyDraftPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('PgaDebut')) {
                obj['PgaDebut'] = ApiClient.convertToType(data['PgaDebut'], 'Number');
            }
            if (data.hasOwnProperty('PgaTourPlayerID')) {
                obj['PgaTourPlayerID'] = ApiClient.convertToType(data['PgaTourPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('PhotoUrl')) {
                obj['PhotoUrl'] = ApiClient.convertToType(data['PhotoUrl'], 'String');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('RotoWirePlayerID')) {
                obj['RotoWirePlayerID'] = ApiClient.convertToType(data['RotoWirePlayerID'], 'Number');
            }
            if (data.hasOwnProperty('RotoworldPlayerID')) {
                obj['RotoworldPlayerID'] = ApiClient.convertToType(data['RotoworldPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('SportRadarPlayerID')) {
                obj['SportRadarPlayerID'] = ApiClient.convertToType(data['SportRadarPlayerID'], 'String');
            }
            if (data.hasOwnProperty('Swings')) {
                obj['Swings'] = ApiClient.convertToType(data['Swings'], 'String');
            }
            if (data.hasOwnProperty('Weight')) {
                obj['Weight'] = ApiClient.convertToType(data['Weight'], 'Number');
            }
            if (data.hasOwnProperty('YahooPlayerID')) {
                obj['YahooPlayerID'] = ApiClient.convertToType(data['YahooPlayerID'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Player</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Player</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BirthCity'] && !(typeof data['BirthCity'] === 'string' || data['BirthCity'] instanceof String)) {
            throw new Error("Expected the field `BirthCity` to be a primitive type in the JSON string but got " + data['BirthCity']);
        }
        // ensure the json data is a string
        if (data['BirthDate'] && !(typeof data['BirthDate'] === 'string' || data['BirthDate'] instanceof String)) {
            throw new Error("Expected the field `BirthDate` to be a primitive type in the JSON string but got " + data['BirthDate']);
        }
        // ensure the json data is a string
        if (data['BirthState'] && !(typeof data['BirthState'] === 'string' || data['BirthState'] instanceof String)) {
            throw new Error("Expected the field `BirthState` to be a primitive type in the JSON string but got " + data['BirthState']);
        }
        // ensure the json data is a string
        if (data['College'] && !(typeof data['College'] === 'string' || data['College'] instanceof String)) {
            throw new Error("Expected the field `College` to be a primitive type in the JSON string but got " + data['College']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['DraftKingsName'] && !(typeof data['DraftKingsName'] === 'string' || data['DraftKingsName'] instanceof String)) {
            throw new Error("Expected the field `DraftKingsName` to be a primitive type in the JSON string but got " + data['DraftKingsName']);
        }
        // ensure the json data is a string
        if (data['FanDuelName'] && !(typeof data['FanDuelName'] === 'string' || data['FanDuelName'] instanceof String)) {
            throw new Error("Expected the field `FanDuelName` to be a primitive type in the JSON string but got " + data['FanDuelName']);
        }
        // ensure the json data is a string
        if (data['FantasyDraftName'] && !(typeof data['FantasyDraftName'] === 'string' || data['FantasyDraftName'] instanceof String)) {
            throw new Error("Expected the field `FantasyDraftName` to be a primitive type in the JSON string but got " + data['FantasyDraftName']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['PhotoUrl'] && !(typeof data['PhotoUrl'] === 'string' || data['PhotoUrl'] instanceof String)) {
            throw new Error("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got " + data['PhotoUrl']);
        }
        // ensure the json data is a string
        if (data['SportRadarPlayerID'] && !(typeof data['SportRadarPlayerID'] === 'string' || data['SportRadarPlayerID'] instanceof String)) {
            throw new Error("Expected the field `SportRadarPlayerID` to be a primitive type in the JSON string but got " + data['SportRadarPlayerID']);
        }
        // ensure the json data is a string
        if (data['Swings'] && !(typeof data['Swings'] === 'string' || data['Swings'] instanceof String)) {
            throw new Error("Expected the field `Swings` to be a primitive type in the JSON string but got " + data['Swings']);
        }

        return true;
    }


}



/**
 * @member {String} BirthCity
 */
Player.prototype['BirthCity'] = undefined;

/**
 * @member {String} BirthDate
 */
Player.prototype['BirthDate'] = undefined;

/**
 * @member {String} BirthState
 */
Player.prototype['BirthState'] = undefined;

/**
 * @member {String} College
 */
Player.prototype['College'] = undefined;

/**
 * @member {String} Country
 */
Player.prototype['Country'] = undefined;

/**
 * @member {String} DraftKingsName
 */
Player.prototype['DraftKingsName'] = undefined;

/**
 * @member {Number} DraftKingsPlayerID
 */
Player.prototype['DraftKingsPlayerID'] = undefined;

/**
 * @member {String} FanDuelName
 */
Player.prototype['FanDuelName'] = undefined;

/**
 * @member {Number} FanDuelPlayerID
 */
Player.prototype['FanDuelPlayerID'] = undefined;

/**
 * @member {Number} FantasyAlarmPlayerID
 */
Player.prototype['FantasyAlarmPlayerID'] = undefined;

/**
 * @member {String} FantasyDraftName
 */
Player.prototype['FantasyDraftName'] = undefined;

/**
 * @member {Number} FantasyDraftPlayerID
 */
Player.prototype['FantasyDraftPlayerID'] = undefined;

/**
 * @member {String} FirstName
 */
Player.prototype['FirstName'] = undefined;

/**
 * @member {String} LastName
 */
Player.prototype['LastName'] = undefined;

/**
 * @member {Number} PgaDebut
 */
Player.prototype['PgaDebut'] = undefined;

/**
 * @member {Number} PgaTourPlayerID
 */
Player.prototype['PgaTourPlayerID'] = undefined;

/**
 * @member {String} PhotoUrl
 */
Player.prototype['PhotoUrl'] = undefined;

/**
 * @member {Number} PlayerID
 */
Player.prototype['PlayerID'] = undefined;

/**
 * @member {Number} RotoWirePlayerID
 */
Player.prototype['RotoWirePlayerID'] = undefined;

/**
 * @member {Number} RotoworldPlayerID
 */
Player.prototype['RotoworldPlayerID'] = undefined;

/**
 * @member {String} SportRadarPlayerID
 */
Player.prototype['SportRadarPlayerID'] = undefined;

/**
 * @member {String} Swings
 */
Player.prototype['Swings'] = undefined;

/**
 * @member {Number} Weight
 */
Player.prototype['Weight'] = undefined;

/**
 * @member {Number} YahooPlayerID
 */
Player.prototype['YahooPlayerID'] = undefined;






export default Player;

