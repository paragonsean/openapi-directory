/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlayerSeason model module.
 * @module model/PlayerSeason
 * @version 1.0
 */
class PlayerSeason {
    /**
     * Constructs a new <code>PlayerSeason</code>.
     * @alias module:model/PlayerSeason
     */
    constructor() { 
        
        PlayerSeason.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerSeason</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerSeason} obj Optional instance to populate.
     * @return {module:model/PlayerSeason} The populated <code>PlayerSeason</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerSeason();

            if (data.hasOwnProperty('AveragePoints')) {
                obj['AveragePoints'] = ApiClient.convertToType(data['AveragePoints'], 'Number');
            }
            if (data.hasOwnProperty('Events')) {
                obj['Events'] = ApiClient.convertToType(data['Events'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('PlayerSeasonID')) {
                obj['PlayerSeasonID'] = ApiClient.convertToType(data['PlayerSeasonID'], 'Number');
            }
            if (data.hasOwnProperty('PointsGained')) {
                obj['PointsGained'] = ApiClient.convertToType(data['PointsGained'], 'Number');
            }
            if (data.hasOwnProperty('PointsLost')) {
                obj['PointsLost'] = ApiClient.convertToType(data['PointsLost'], 'Number');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('TotalPoints')) {
                obj['TotalPoints'] = ApiClient.convertToType(data['TotalPoints'], 'Number');
            }
            if (data.hasOwnProperty('WorldGolfRank')) {
                obj['WorldGolfRank'] = ApiClient.convertToType(data['WorldGolfRank'], 'Number');
            }
            if (data.hasOwnProperty('WorldGolfRankLastWeek')) {
                obj['WorldGolfRankLastWeek'] = ApiClient.convertToType(data['WorldGolfRankLastWeek'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerSeason</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerSeason</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}



/**
 * @member {Number} AveragePoints
 */
PlayerSeason.prototype['AveragePoints'] = undefined;

/**
 * @member {Number} Events
 */
PlayerSeason.prototype['Events'] = undefined;

/**
 * @member {String} Name
 */
PlayerSeason.prototype['Name'] = undefined;

/**
 * @member {Number} PlayerID
 */
PlayerSeason.prototype['PlayerID'] = undefined;

/**
 * @member {Number} PlayerSeasonID
 */
PlayerSeason.prototype['PlayerSeasonID'] = undefined;

/**
 * @member {Number} PointsGained
 */
PlayerSeason.prototype['PointsGained'] = undefined;

/**
 * @member {Number} PointsLost
 */
PlayerSeason.prototype['PointsLost'] = undefined;

/**
 * @member {Number} Season
 */
PlayerSeason.prototype['Season'] = undefined;

/**
 * @member {Number} TotalPoints
 */
PlayerSeason.prototype['TotalPoints'] = undefined;

/**
 * @member {Number} WorldGolfRank
 */
PlayerSeason.prototype['WorldGolfRank'] = undefined;

/**
 * @member {Number} WorldGolfRankLastWeek
 */
PlayerSeason.prototype['WorldGolfRankLastWeek'] = undefined;






export default PlayerSeason;

