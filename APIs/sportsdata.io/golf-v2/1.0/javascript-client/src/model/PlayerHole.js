/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlayerHole model module.
 * @module model/PlayerHole
 * @version 1.0
 */
class PlayerHole {
    /**
     * Constructs a new <code>PlayerHole</code>.
     * @alias module:model/PlayerHole
     */
    constructor() { 
        
        PlayerHole.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerHole</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerHole} obj Optional instance to populate.
     * @return {module:model/PlayerHole} The populated <code>PlayerHole</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerHole();

            if (data.hasOwnProperty('Birdie')) {
                obj['Birdie'] = ApiClient.convertToType(data['Birdie'], 'Boolean');
            }
            if (data.hasOwnProperty('Bogey')) {
                obj['Bogey'] = ApiClient.convertToType(data['Bogey'], 'Boolean');
            }
            if (data.hasOwnProperty('DoubleBogey')) {
                obj['DoubleBogey'] = ApiClient.convertToType(data['DoubleBogey'], 'Boolean');
            }
            if (data.hasOwnProperty('DoubleEagle')) {
                obj['DoubleEagle'] = ApiClient.convertToType(data['DoubleEagle'], 'Boolean');
            }
            if (data.hasOwnProperty('Eagle')) {
                obj['Eagle'] = ApiClient.convertToType(data['Eagle'], 'Boolean');
            }
            if (data.hasOwnProperty('HoleInOne')) {
                obj['HoleInOne'] = ApiClient.convertToType(data['HoleInOne'], 'Boolean');
            }
            if (data.hasOwnProperty('IsPar')) {
                obj['IsPar'] = ApiClient.convertToType(data['IsPar'], 'Boolean');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('Par')) {
                obj['Par'] = ApiClient.convertToType(data['Par'], 'Number');
            }
            if (data.hasOwnProperty('PlayerRoundID')) {
                obj['PlayerRoundID'] = ApiClient.convertToType(data['PlayerRoundID'], 'Number');
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = ApiClient.convertToType(data['Score'], 'Number');
            }
            if (data.hasOwnProperty('ToPar')) {
                obj['ToPar'] = ApiClient.convertToType(data['ToPar'], 'Number');
            }
            if (data.hasOwnProperty('WorseThanDoubleBogey')) {
                obj['WorseThanDoubleBogey'] = ApiClient.convertToType(data['WorseThanDoubleBogey'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerHole</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerHole</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Boolean} Birdie
 */
PlayerHole.prototype['Birdie'] = undefined;

/**
 * @member {Boolean} Bogey
 */
PlayerHole.prototype['Bogey'] = undefined;

/**
 * @member {Boolean} DoubleBogey
 */
PlayerHole.prototype['DoubleBogey'] = undefined;

/**
 * @member {Boolean} DoubleEagle
 */
PlayerHole.prototype['DoubleEagle'] = undefined;

/**
 * @member {Boolean} Eagle
 */
PlayerHole.prototype['Eagle'] = undefined;

/**
 * @member {Boolean} HoleInOne
 */
PlayerHole.prototype['HoleInOne'] = undefined;

/**
 * @member {Boolean} IsPar
 */
PlayerHole.prototype['IsPar'] = undefined;

/**
 * @member {Number} Number
 */
PlayerHole.prototype['Number'] = undefined;

/**
 * @member {Number} Par
 */
PlayerHole.prototype['Par'] = undefined;

/**
 * @member {Number} PlayerRoundID
 */
PlayerHole.prototype['PlayerRoundID'] = undefined;

/**
 * @member {Number} Score
 */
PlayerHole.prototype['Score'] = undefined;

/**
 * @member {Number} ToPar
 */
PlayerHole.prototype['ToPar'] = undefined;

/**
 * @member {Boolean} WorseThanDoubleBogey
 */
PlayerHole.prototype['WorseThanDoubleBogey'] = undefined;






export default PlayerHole;

