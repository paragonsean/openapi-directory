/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Round from './Round';

/**
 * The Tournament model module.
 * @module model/Tournament
 * @version 1.0
 */
class Tournament {
    /**
     * Constructs a new <code>Tournament</code>.
     * @alias module:model/Tournament
     */
    constructor() { 
        
        Tournament.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tournament</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tournament} obj Optional instance to populate.
     * @return {module:model/Tournament} The populated <code>Tournament</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tournament();

            if (data.hasOwnProperty('Canceled')) {
                obj['Canceled'] = ApiClient.convertToType(data['Canceled'], 'Boolean');
            }
            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('Covered')) {
                obj['Covered'] = ApiClient.convertToType(data['Covered'], 'Boolean');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'String');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('IsInProgress')) {
                obj['IsInProgress'] = ApiClient.convertToType(data['IsInProgress'], 'Boolean');
            }
            if (data.hasOwnProperty('IsOver')) {
                obj['IsOver'] = ApiClient.convertToType(data['IsOver'], 'Boolean');
            }
            if (data.hasOwnProperty('Location')) {
                obj['Location'] = ApiClient.convertToType(data['Location'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OddsCoverage')) {
                obj['OddsCoverage'] = ApiClient.convertToType(data['OddsCoverage'], 'String');
            }
            if (data.hasOwnProperty('Par')) {
                obj['Par'] = ApiClient.convertToType(data['Par'], 'Number');
            }
            if (data.hasOwnProperty('Purse')) {
                obj['Purse'] = ApiClient.convertToType(data['Purse'], 'Number');
            }
            if (data.hasOwnProperty('Rounds')) {
                obj['Rounds'] = ApiClient.convertToType(data['Rounds'], [Round]);
            }
            if (data.hasOwnProperty('SportRadarTournamentID')) {
                obj['SportRadarTournamentID'] = ApiClient.convertToType(data['SportRadarTournamentID'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('StartDateTime')) {
                obj['StartDateTime'] = ApiClient.convertToType(data['StartDateTime'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
            if (data.hasOwnProperty('TimeZone')) {
                obj['TimeZone'] = ApiClient.convertToType(data['TimeZone'], 'String');
            }
            if (data.hasOwnProperty('TournamentID')) {
                obj['TournamentID'] = ApiClient.convertToType(data['TournamentID'], 'Number');
            }
            if (data.hasOwnProperty('Venue')) {
                obj['Venue'] = ApiClient.convertToType(data['Venue'], 'String');
            }
            if (data.hasOwnProperty('Yards')) {
                obj['Yards'] = ApiClient.convertToType(data['Yards'], 'Number');
            }
            if (data.hasOwnProperty('ZipCode')) {
                obj['ZipCode'] = ApiClient.convertToType(data['ZipCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tournament</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tournament</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['EndDate'] && !(typeof data['EndDate'] === 'string' || data['EndDate'] instanceof String)) {
            throw new Error("Expected the field `EndDate` to be a primitive type in the JSON string but got " + data['EndDate']);
        }
        // ensure the json data is a string
        if (data['Format'] && !(typeof data['Format'] === 'string' || data['Format'] instanceof String)) {
            throw new Error("Expected the field `Format` to be a primitive type in the JSON string but got " + data['Format']);
        }
        // ensure the json data is a string
        if (data['Location'] && !(typeof data['Location'] === 'string' || data['Location'] instanceof String)) {
            throw new Error("Expected the field `Location` to be a primitive type in the JSON string but got " + data['Location']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OddsCoverage'] && !(typeof data['OddsCoverage'] === 'string' || data['OddsCoverage'] instanceof String)) {
            throw new Error("Expected the field `OddsCoverage` to be a primitive type in the JSON string but got " + data['OddsCoverage']);
        }
        if (data['Rounds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Rounds'])) {
                throw new Error("Expected the field `Rounds` to be an array in the JSON data but got " + data['Rounds']);
            }
            // validate the optional field `Rounds` (array)
            for (const item of data['Rounds']) {
                Round.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['SportRadarTournamentID'] && !(typeof data['SportRadarTournamentID'] === 'string' || data['SportRadarTournamentID'] instanceof String)) {
            throw new Error("Expected the field `SportRadarTournamentID` to be a primitive type in the JSON string but got " + data['SportRadarTournamentID']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        // ensure the json data is a string
        if (data['StartDateTime'] && !(typeof data['StartDateTime'] === 'string' || data['StartDateTime'] instanceof String)) {
            throw new Error("Expected the field `StartDateTime` to be a primitive type in the JSON string but got " + data['StartDateTime']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }
        // ensure the json data is a string
        if (data['TimeZone'] && !(typeof data['TimeZone'] === 'string' || data['TimeZone'] instanceof String)) {
            throw new Error("Expected the field `TimeZone` to be a primitive type in the JSON string but got " + data['TimeZone']);
        }
        // ensure the json data is a string
        if (data['Venue'] && !(typeof data['Venue'] === 'string' || data['Venue'] instanceof String)) {
            throw new Error("Expected the field `Venue` to be a primitive type in the JSON string but got " + data['Venue']);
        }
        // ensure the json data is a string
        if (data['ZipCode'] && !(typeof data['ZipCode'] === 'string' || data['ZipCode'] instanceof String)) {
            throw new Error("Expected the field `ZipCode` to be a primitive type in the JSON string but got " + data['ZipCode']);
        }

        return true;
    }


}



/**
 * @member {Boolean} Canceled
 */
Tournament.prototype['Canceled'] = undefined;

/**
 * @member {String} City
 */
Tournament.prototype['City'] = undefined;

/**
 * @member {String} Country
 */
Tournament.prototype['Country'] = undefined;

/**
 * @member {Boolean} Covered
 */
Tournament.prototype['Covered'] = undefined;

/**
 * @member {String} EndDate
 */
Tournament.prototype['EndDate'] = undefined;

/**
 * @member {String} Format
 */
Tournament.prototype['Format'] = undefined;

/**
 * @member {Boolean} IsInProgress
 */
Tournament.prototype['IsInProgress'] = undefined;

/**
 * @member {Boolean} IsOver
 */
Tournament.prototype['IsOver'] = undefined;

/**
 * @member {String} Location
 */
Tournament.prototype['Location'] = undefined;

/**
 * @member {String} Name
 */
Tournament.prototype['Name'] = undefined;

/**
 * @member {String} OddsCoverage
 */
Tournament.prototype['OddsCoverage'] = undefined;

/**
 * @member {Number} Par
 */
Tournament.prototype['Par'] = undefined;

/**
 * @member {Number} Purse
 */
Tournament.prototype['Purse'] = undefined;

/**
 * @member {Array.<module:model/Round>} Rounds
 */
Tournament.prototype['Rounds'] = undefined;

/**
 * @member {String} SportRadarTournamentID
 */
Tournament.prototype['SportRadarTournamentID'] = undefined;

/**
 * @member {String} StartDate
 */
Tournament.prototype['StartDate'] = undefined;

/**
 * @member {String} StartDateTime
 */
Tournament.prototype['StartDateTime'] = undefined;

/**
 * @member {String} State
 */
Tournament.prototype['State'] = undefined;

/**
 * @member {String} TimeZone
 */
Tournament.prototype['TimeZone'] = undefined;

/**
 * @member {Number} TournamentID
 */
Tournament.prototype['TournamentID'] = undefined;

/**
 * @member {String} Venue
 */
Tournament.prototype['Venue'] = undefined;

/**
 * @member {Number} Yards
 */
Tournament.prototype['Yards'] = undefined;

/**
 * @member {String} ZipCode
 */
Tournament.prototype['ZipCode'] = undefined;






export default Tournament;

