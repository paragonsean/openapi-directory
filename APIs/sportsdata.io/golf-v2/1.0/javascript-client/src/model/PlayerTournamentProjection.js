/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlayerRound from './PlayerRound';

/**
 * The PlayerTournamentProjection model module.
 * @module model/PlayerTournamentProjection
 * @version 1.0
 */
class PlayerTournamentProjection {
    /**
     * Constructs a new <code>PlayerTournamentProjection</code>.
     * @alias module:model/PlayerTournamentProjection
     */
    constructor() { 
        
        PlayerTournamentProjection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerTournamentProjection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerTournamentProjection} obj Optional instance to populate.
     * @return {module:model/PlayerTournamentProjection} The populated <code>PlayerTournamentProjection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerTournamentProjection();

            if (data.hasOwnProperty('Birdies')) {
                obj['Birdies'] = ApiClient.convertToType(data['Birdies'], 'Number');
            }
            if (data.hasOwnProperty('BogeyFreeRounds')) {
                obj['BogeyFreeRounds'] = ApiClient.convertToType(data['BogeyFreeRounds'], 'Number');
            }
            if (data.hasOwnProperty('Bogeys')) {
                obj['Bogeys'] = ApiClient.convertToType(data['Bogeys'], 'Number');
            }
            if (data.hasOwnProperty('BounceBackCount')) {
                obj['BounceBackCount'] = ApiClient.convertToType(data['BounceBackCount'], 'Number');
            }
            if (data.hasOwnProperty('ConsecutiveBirdieOrBetterCount')) {
                obj['ConsecutiveBirdieOrBetterCount'] = ApiClient.convertToType(data['ConsecutiveBirdieOrBetterCount'], 'Number');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('DoubleBogeys')) {
                obj['DoubleBogeys'] = ApiClient.convertToType(data['DoubleBogeys'], 'Number');
            }
            if (data.hasOwnProperty('DoubleEagles')) {
                obj['DoubleEagles'] = ApiClient.convertToType(data['DoubleEagles'], 'Number');
            }
            if (data.hasOwnProperty('DraftKingsSalary')) {
                obj['DraftKingsSalary'] = ApiClient.convertToType(data['DraftKingsSalary'], 'Number');
            }
            if (data.hasOwnProperty('Eagles')) {
                obj['Eagles'] = ApiClient.convertToType(data['Eagles'], 'Number');
            }
            if (data.hasOwnProperty('Earnings')) {
                obj['Earnings'] = ApiClient.convertToType(data['Earnings'], 'Number');
            }
            if (data.hasOwnProperty('FanDuelSalary')) {
                obj['FanDuelSalary'] = ApiClient.convertToType(data['FanDuelSalary'], 'Number');
            }
            if (data.hasOwnProperty('FantasyDraftSalary')) {
                obj['FantasyDraftSalary'] = ApiClient.convertToType(data['FantasyDraftSalary'], 'Number');
            }
            if (data.hasOwnProperty('FantasyPoints')) {
                obj['FantasyPoints'] = ApiClient.convertToType(data['FantasyPoints'], 'Number');
            }
            if (data.hasOwnProperty('FantasyPointsDraftKings')) {
                obj['FantasyPointsDraftKings'] = ApiClient.convertToType(data['FantasyPointsDraftKings'], 'Number');
            }
            if (data.hasOwnProperty('FantasyPointsFanDuel')) {
                obj['FantasyPointsFanDuel'] = ApiClient.convertToType(data['FantasyPointsFanDuel'], 'Number');
            }
            if (data.hasOwnProperty('FantasyPointsFantasyDraft')) {
                obj['FantasyPointsFantasyDraft'] = ApiClient.convertToType(data['FantasyPointsFantasyDraft'], 'Number');
            }
            if (data.hasOwnProperty('FantasyPointsYahoo')) {
                obj['FantasyPointsYahoo'] = ApiClient.convertToType(data['FantasyPointsYahoo'], 'Number');
            }
            if (data.hasOwnProperty('FedExPoints')) {
                obj['FedExPoints'] = ApiClient.convertToType(data['FedExPoints'], 'Number');
            }
            if (data.hasOwnProperty('HoleInOnes')) {
                obj['HoleInOnes'] = ApiClient.convertToType(data['HoleInOnes'], 'Number');
            }
            if (data.hasOwnProperty('IsAlternate')) {
                obj['IsAlternate'] = ApiClient.convertToType(data['IsAlternate'], 'Boolean');
            }
            if (data.hasOwnProperty('IsWithdrawn')) {
                obj['IsWithdrawn'] = ApiClient.convertToType(data['IsWithdrawn'], 'Boolean');
            }
            if (data.hasOwnProperty('MadeCut')) {
                obj['MadeCut'] = ApiClient.convertToType(data['MadeCut'], 'Number');
            }
            if (data.hasOwnProperty('MadeCutDidNotFinish')) {
                obj['MadeCutDidNotFinish'] = ApiClient.convertToType(data['MadeCutDidNotFinish'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OddsToWin')) {
                obj['OddsToWin'] = ApiClient.convertToType(data['OddsToWin'], 'Number');
            }
            if (data.hasOwnProperty('OddsToWinDescription')) {
                obj['OddsToWinDescription'] = ApiClient.convertToType(data['OddsToWinDescription'], 'String');
            }
            if (data.hasOwnProperty('Pars')) {
                obj['Pars'] = ApiClient.convertToType(data['Pars'], 'Number');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('PlayerTournamentID')) {
                obj['PlayerTournamentID'] = ApiClient.convertToType(data['PlayerTournamentID'], 'Number');
            }
            if (data.hasOwnProperty('Rank')) {
                obj['Rank'] = ApiClient.convertToType(data['Rank'], 'Number');
            }
            if (data.hasOwnProperty('Rounds')) {
                obj['Rounds'] = ApiClient.convertToType(data['Rounds'], [PlayerRound]);
            }
            if (data.hasOwnProperty('RoundsUnderSeventy')) {
                obj['RoundsUnderSeventy'] = ApiClient.convertToType(data['RoundsUnderSeventy'], 'Number');
            }
            if (data.hasOwnProperty('RoundsWithFiveOrMoreBirdiesOrBetter')) {
                obj['RoundsWithFiveOrMoreBirdiesOrBetter'] = ApiClient.convertToType(data['RoundsWithFiveOrMoreBirdiesOrBetter'], 'Number');
            }
            if (data.hasOwnProperty('StreaksOfFiveBirdiesOrBetter')) {
                obj['StreaksOfFiveBirdiesOrBetter'] = ApiClient.convertToType(data['StreaksOfFiveBirdiesOrBetter'], 'Number');
            }
            if (data.hasOwnProperty('StreaksOfFourBirdiesOrBetter')) {
                obj['StreaksOfFourBirdiesOrBetter'] = ApiClient.convertToType(data['StreaksOfFourBirdiesOrBetter'], 'Number');
            }
            if (data.hasOwnProperty('StreaksOfSixBirdiesOrBetter')) {
                obj['StreaksOfSixBirdiesOrBetter'] = ApiClient.convertToType(data['StreaksOfSixBirdiesOrBetter'], 'Number');
            }
            if (data.hasOwnProperty('StreaksOfThreeBirdiesOrBetter')) {
                obj['StreaksOfThreeBirdiesOrBetter'] = ApiClient.convertToType(data['StreaksOfThreeBirdiesOrBetter'], 'Number');
            }
            if (data.hasOwnProperty('TeeTime')) {
                obj['TeeTime'] = ApiClient.convertToType(data['TeeTime'], 'String');
            }
            if (data.hasOwnProperty('TotalScore')) {
                obj['TotalScore'] = ApiClient.convertToType(data['TotalScore'], 'Number');
            }
            if (data.hasOwnProperty('TotalStrokes')) {
                obj['TotalStrokes'] = ApiClient.convertToType(data['TotalStrokes'], 'Number');
            }
            if (data.hasOwnProperty('TotalThrough')) {
                obj['TotalThrough'] = ApiClient.convertToType(data['TotalThrough'], 'Number');
            }
            if (data.hasOwnProperty('TournamentID')) {
                obj['TournamentID'] = ApiClient.convertToType(data['TournamentID'], 'Number');
            }
            if (data.hasOwnProperty('TournamentStatus')) {
                obj['TournamentStatus'] = ApiClient.convertToType(data['TournamentStatus'], 'String');
            }
            if (data.hasOwnProperty('TripleBogeys')) {
                obj['TripleBogeys'] = ApiClient.convertToType(data['TripleBogeys'], 'Number');
            }
            if (data.hasOwnProperty('Win')) {
                obj['Win'] = ApiClient.convertToType(data['Win'], 'Number');
            }
            if (data.hasOwnProperty('WorseThanDoubleBogey')) {
                obj['WorseThanDoubleBogey'] = ApiClient.convertToType(data['WorseThanDoubleBogey'], 'Number');
            }
            if (data.hasOwnProperty('WorseThanTripleBogey')) {
                obj['WorseThanTripleBogey'] = ApiClient.convertToType(data['WorseThanTripleBogey'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerTournamentProjection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerTournamentProjection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OddsToWinDescription'] && !(typeof data['OddsToWinDescription'] === 'string' || data['OddsToWinDescription'] instanceof String)) {
            throw new Error("Expected the field `OddsToWinDescription` to be a primitive type in the JSON string but got " + data['OddsToWinDescription']);
        }
        if (data['Rounds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Rounds'])) {
                throw new Error("Expected the field `Rounds` to be an array in the JSON data but got " + data['Rounds']);
            }
            // validate the optional field `Rounds` (array)
            for (const item of data['Rounds']) {
                PlayerRound.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TeeTime'] && !(typeof data['TeeTime'] === 'string' || data['TeeTime'] instanceof String)) {
            throw new Error("Expected the field `TeeTime` to be a primitive type in the JSON string but got " + data['TeeTime']);
        }
        // ensure the json data is a string
        if (data['TournamentStatus'] && !(typeof data['TournamentStatus'] === 'string' || data['TournamentStatus'] instanceof String)) {
            throw new Error("Expected the field `TournamentStatus` to be a primitive type in the JSON string but got " + data['TournamentStatus']);
        }

        return true;
    }


}



/**
 * @member {Number} Birdies
 */
PlayerTournamentProjection.prototype['Birdies'] = undefined;

/**
 * @member {Number} BogeyFreeRounds
 */
PlayerTournamentProjection.prototype['BogeyFreeRounds'] = undefined;

/**
 * @member {Number} Bogeys
 */
PlayerTournamentProjection.prototype['Bogeys'] = undefined;

/**
 * @member {Number} BounceBackCount
 */
PlayerTournamentProjection.prototype['BounceBackCount'] = undefined;

/**
 * @member {Number} ConsecutiveBirdieOrBetterCount
 */
PlayerTournamentProjection.prototype['ConsecutiveBirdieOrBetterCount'] = undefined;

/**
 * @member {String} Country
 */
PlayerTournamentProjection.prototype['Country'] = undefined;

/**
 * @member {Number} DoubleBogeys
 */
PlayerTournamentProjection.prototype['DoubleBogeys'] = undefined;

/**
 * @member {Number} DoubleEagles
 */
PlayerTournamentProjection.prototype['DoubleEagles'] = undefined;

/**
 * @member {Number} DraftKingsSalary
 */
PlayerTournamentProjection.prototype['DraftKingsSalary'] = undefined;

/**
 * @member {Number} Eagles
 */
PlayerTournamentProjection.prototype['Eagles'] = undefined;

/**
 * @member {Number} Earnings
 */
PlayerTournamentProjection.prototype['Earnings'] = undefined;

/**
 * @member {Number} FanDuelSalary
 */
PlayerTournamentProjection.prototype['FanDuelSalary'] = undefined;

/**
 * @member {Number} FantasyDraftSalary
 */
PlayerTournamentProjection.prototype['FantasyDraftSalary'] = undefined;

/**
 * @member {Number} FantasyPoints
 */
PlayerTournamentProjection.prototype['FantasyPoints'] = undefined;

/**
 * @member {Number} FantasyPointsDraftKings
 */
PlayerTournamentProjection.prototype['FantasyPointsDraftKings'] = undefined;

/**
 * @member {Number} FantasyPointsFanDuel
 */
PlayerTournamentProjection.prototype['FantasyPointsFanDuel'] = undefined;

/**
 * @member {Number} FantasyPointsFantasyDraft
 */
PlayerTournamentProjection.prototype['FantasyPointsFantasyDraft'] = undefined;

/**
 * @member {Number} FantasyPointsYahoo
 */
PlayerTournamentProjection.prototype['FantasyPointsYahoo'] = undefined;

/**
 * @member {Number} FedExPoints
 */
PlayerTournamentProjection.prototype['FedExPoints'] = undefined;

/**
 * @member {Number} HoleInOnes
 */
PlayerTournamentProjection.prototype['HoleInOnes'] = undefined;

/**
 * @member {Boolean} IsAlternate
 */
PlayerTournamentProjection.prototype['IsAlternate'] = undefined;

/**
 * @member {Boolean} IsWithdrawn
 */
PlayerTournamentProjection.prototype['IsWithdrawn'] = undefined;

/**
 * @member {Number} MadeCut
 */
PlayerTournamentProjection.prototype['MadeCut'] = undefined;

/**
 * @member {Boolean} MadeCutDidNotFinish
 */
PlayerTournamentProjection.prototype['MadeCutDidNotFinish'] = undefined;

/**
 * @member {String} Name
 */
PlayerTournamentProjection.prototype['Name'] = undefined;

/**
 * @member {Number} OddsToWin
 */
PlayerTournamentProjection.prototype['OddsToWin'] = undefined;

/**
 * @member {String} OddsToWinDescription
 */
PlayerTournamentProjection.prototype['OddsToWinDescription'] = undefined;

/**
 * @member {Number} Pars
 */
PlayerTournamentProjection.prototype['Pars'] = undefined;

/**
 * @member {Number} PlayerID
 */
PlayerTournamentProjection.prototype['PlayerID'] = undefined;

/**
 * @member {Number} PlayerTournamentID
 */
PlayerTournamentProjection.prototype['PlayerTournamentID'] = undefined;

/**
 * @member {Number} Rank
 */
PlayerTournamentProjection.prototype['Rank'] = undefined;

/**
 * @member {Array.<module:model/PlayerRound>} Rounds
 */
PlayerTournamentProjection.prototype['Rounds'] = undefined;

/**
 * @member {Number} RoundsUnderSeventy
 */
PlayerTournamentProjection.prototype['RoundsUnderSeventy'] = undefined;

/**
 * @member {Number} RoundsWithFiveOrMoreBirdiesOrBetter
 */
PlayerTournamentProjection.prototype['RoundsWithFiveOrMoreBirdiesOrBetter'] = undefined;

/**
 * @member {Number} StreaksOfFiveBirdiesOrBetter
 */
PlayerTournamentProjection.prototype['StreaksOfFiveBirdiesOrBetter'] = undefined;

/**
 * @member {Number} StreaksOfFourBirdiesOrBetter
 */
PlayerTournamentProjection.prototype['StreaksOfFourBirdiesOrBetter'] = undefined;

/**
 * @member {Number} StreaksOfSixBirdiesOrBetter
 */
PlayerTournamentProjection.prototype['StreaksOfSixBirdiesOrBetter'] = undefined;

/**
 * @member {Number} StreaksOfThreeBirdiesOrBetter
 */
PlayerTournamentProjection.prototype['StreaksOfThreeBirdiesOrBetter'] = undefined;

/**
 * @member {String} TeeTime
 */
PlayerTournamentProjection.prototype['TeeTime'] = undefined;

/**
 * @member {Number} TotalScore
 */
PlayerTournamentProjection.prototype['TotalScore'] = undefined;

/**
 * @member {Number} TotalStrokes
 */
PlayerTournamentProjection.prototype['TotalStrokes'] = undefined;

/**
 * @member {Number} TotalThrough
 */
PlayerTournamentProjection.prototype['TotalThrough'] = undefined;

/**
 * @member {Number} TournamentID
 */
PlayerTournamentProjection.prototype['TournamentID'] = undefined;

/**
 * @member {String} TournamentStatus
 */
PlayerTournamentProjection.prototype['TournamentStatus'] = undefined;

/**
 * @member {Number} TripleBogeys
 */
PlayerTournamentProjection.prototype['TripleBogeys'] = undefined;

/**
 * @member {Number} Win
 */
PlayerTournamentProjection.prototype['Win'] = undefined;

/**
 * @member {Number} WorseThanDoubleBogey
 */
PlayerTournamentProjection.prototype['WorseThanDoubleBogey'] = undefined;

/**
 * @member {Number} WorseThanTripleBogey
 */
PlayerTournamentProjection.prototype['WorseThanTripleBogey'] = undefined;






export default PlayerTournamentProjection;

