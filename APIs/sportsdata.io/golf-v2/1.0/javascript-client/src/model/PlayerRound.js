/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlayerHole from './PlayerHole';

/**
 * The PlayerRound model module.
 * @module model/PlayerRound
 * @version 1.0
 */
class PlayerRound {
    /**
     * Constructs a new <code>PlayerRound</code>.
     * @alias module:model/PlayerRound
     */
    constructor() { 
        
        PlayerRound.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerRound</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerRound} obj Optional instance to populate.
     * @return {module:model/PlayerRound} The populated <code>PlayerRound</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerRound();

            if (data.hasOwnProperty('BackNineStart')) {
                obj['BackNineStart'] = ApiClient.convertToType(data['BackNineStart'], 'Boolean');
            }
            if (data.hasOwnProperty('Birdies')) {
                obj['Birdies'] = ApiClient.convertToType(data['Birdies'], 'Number');
            }
            if (data.hasOwnProperty('BogeyFree')) {
                obj['BogeyFree'] = ApiClient.convertToType(data['BogeyFree'], 'Boolean');
            }
            if (data.hasOwnProperty('Bogeys')) {
                obj['Bogeys'] = ApiClient.convertToType(data['Bogeys'], 'Number');
            }
            if (data.hasOwnProperty('BounceBackCount')) {
                obj['BounceBackCount'] = ApiClient.convertToType(data['BounceBackCount'], 'Number');
            }
            if (data.hasOwnProperty('ConsecutiveBirdieOrBetterCount')) {
                obj['ConsecutiveBirdieOrBetterCount'] = ApiClient.convertToType(data['ConsecutiveBirdieOrBetterCount'], 'Number');
            }
            if (data.hasOwnProperty('Day')) {
                obj['Day'] = ApiClient.convertToType(data['Day'], 'String');
            }
            if (data.hasOwnProperty('DoubleBogeys')) {
                obj['DoubleBogeys'] = ApiClient.convertToType(data['DoubleBogeys'], 'Number');
            }
            if (data.hasOwnProperty('DoubleEagles')) {
                obj['DoubleEagles'] = ApiClient.convertToType(data['DoubleEagles'], 'Number');
            }
            if (data.hasOwnProperty('Eagles')) {
                obj['Eagles'] = ApiClient.convertToType(data['Eagles'], 'Number');
            }
            if (data.hasOwnProperty('HoleInOnes')) {
                obj['HoleInOnes'] = ApiClient.convertToType(data['HoleInOnes'], 'Number');
            }
            if (data.hasOwnProperty('Holes')) {
                obj['Holes'] = ApiClient.convertToType(data['Holes'], [PlayerHole]);
            }
            if (data.hasOwnProperty('IncludesFiveOrMoreBirdiesOrBetter')) {
                obj['IncludesFiveOrMoreBirdiesOrBetter'] = ApiClient.convertToType(data['IncludesFiveOrMoreBirdiesOrBetter'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludesStreakOfFiveBirdiesOrBetter')) {
                obj['IncludesStreakOfFiveBirdiesOrBetter'] = ApiClient.convertToType(data['IncludesStreakOfFiveBirdiesOrBetter'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludesStreakOfFourBirdiesOrBetter')) {
                obj['IncludesStreakOfFourBirdiesOrBetter'] = ApiClient.convertToType(data['IncludesStreakOfFourBirdiesOrBetter'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludesStreakOfSixBirdiesOrBetter')) {
                obj['IncludesStreakOfSixBirdiesOrBetter'] = ApiClient.convertToType(data['IncludesStreakOfSixBirdiesOrBetter'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludesStreakOfThreeBirdiesOrBetter')) {
                obj['IncludesStreakOfThreeBirdiesOrBetter'] = ApiClient.convertToType(data['IncludesStreakOfThreeBirdiesOrBetter'], 'Boolean');
            }
            if (data.hasOwnProperty('LongestBirdieOrBetterStreak')) {
                obj['LongestBirdieOrBetterStreak'] = ApiClient.convertToType(data['LongestBirdieOrBetterStreak'], 'Number');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('Par')) {
                obj['Par'] = ApiClient.convertToType(data['Par'], 'Number');
            }
            if (data.hasOwnProperty('Pars')) {
                obj['Pars'] = ApiClient.convertToType(data['Pars'], 'Number');
            }
            if (data.hasOwnProperty('PlayerRoundID')) {
                obj['PlayerRoundID'] = ApiClient.convertToType(data['PlayerRoundID'], 'Number');
            }
            if (data.hasOwnProperty('PlayerTournamentID')) {
                obj['PlayerTournamentID'] = ApiClient.convertToType(data['PlayerTournamentID'], 'Number');
            }
            if (data.hasOwnProperty('Score')) {
                obj['Score'] = ApiClient.convertToType(data['Score'], 'Number');
            }
            if (data.hasOwnProperty('TeeTime')) {
                obj['TeeTime'] = ApiClient.convertToType(data['TeeTime'], 'String');
            }
            if (data.hasOwnProperty('TripleBogeys')) {
                obj['TripleBogeys'] = ApiClient.convertToType(data['TripleBogeys'], 'Number');
            }
            if (data.hasOwnProperty('WorseThanDoubleBogey')) {
                obj['WorseThanDoubleBogey'] = ApiClient.convertToType(data['WorseThanDoubleBogey'], 'Number');
            }
            if (data.hasOwnProperty('WorseThanTripleBogey')) {
                obj['WorseThanTripleBogey'] = ApiClient.convertToType(data['WorseThanTripleBogey'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerRound</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerRound</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Day'] && !(typeof data['Day'] === 'string' || data['Day'] instanceof String)) {
            throw new Error("Expected the field `Day` to be a primitive type in the JSON string but got " + data['Day']);
        }
        if (data['Holes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Holes'])) {
                throw new Error("Expected the field `Holes` to be an array in the JSON data but got " + data['Holes']);
            }
            // validate the optional field `Holes` (array)
            for (const item of data['Holes']) {
                PlayerHole.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TeeTime'] && !(typeof data['TeeTime'] === 'string' || data['TeeTime'] instanceof String)) {
            throw new Error("Expected the field `TeeTime` to be a primitive type in the JSON string but got " + data['TeeTime']);
        }

        return true;
    }


}



/**
 * @member {Boolean} BackNineStart
 */
PlayerRound.prototype['BackNineStart'] = undefined;

/**
 * @member {Number} Birdies
 */
PlayerRound.prototype['Birdies'] = undefined;

/**
 * @member {Boolean} BogeyFree
 */
PlayerRound.prototype['BogeyFree'] = undefined;

/**
 * @member {Number} Bogeys
 */
PlayerRound.prototype['Bogeys'] = undefined;

/**
 * @member {Number} BounceBackCount
 */
PlayerRound.prototype['BounceBackCount'] = undefined;

/**
 * @member {Number} ConsecutiveBirdieOrBetterCount
 */
PlayerRound.prototype['ConsecutiveBirdieOrBetterCount'] = undefined;

/**
 * @member {String} Day
 */
PlayerRound.prototype['Day'] = undefined;

/**
 * @member {Number} DoubleBogeys
 */
PlayerRound.prototype['DoubleBogeys'] = undefined;

/**
 * @member {Number} DoubleEagles
 */
PlayerRound.prototype['DoubleEagles'] = undefined;

/**
 * @member {Number} Eagles
 */
PlayerRound.prototype['Eagles'] = undefined;

/**
 * @member {Number} HoleInOnes
 */
PlayerRound.prototype['HoleInOnes'] = undefined;

/**
 * @member {Array.<module:model/PlayerHole>} Holes
 */
PlayerRound.prototype['Holes'] = undefined;

/**
 * @member {Boolean} IncludesFiveOrMoreBirdiesOrBetter
 */
PlayerRound.prototype['IncludesFiveOrMoreBirdiesOrBetter'] = undefined;

/**
 * @member {Boolean} IncludesStreakOfFiveBirdiesOrBetter
 */
PlayerRound.prototype['IncludesStreakOfFiveBirdiesOrBetter'] = undefined;

/**
 * @member {Boolean} IncludesStreakOfFourBirdiesOrBetter
 */
PlayerRound.prototype['IncludesStreakOfFourBirdiesOrBetter'] = undefined;

/**
 * @member {Boolean} IncludesStreakOfSixBirdiesOrBetter
 */
PlayerRound.prototype['IncludesStreakOfSixBirdiesOrBetter'] = undefined;

/**
 * @member {Boolean} IncludesStreakOfThreeBirdiesOrBetter
 */
PlayerRound.prototype['IncludesStreakOfThreeBirdiesOrBetter'] = undefined;

/**
 * @member {Number} LongestBirdieOrBetterStreak
 */
PlayerRound.prototype['LongestBirdieOrBetterStreak'] = undefined;

/**
 * @member {Number} Number
 */
PlayerRound.prototype['Number'] = undefined;

/**
 * @member {Number} Par
 */
PlayerRound.prototype['Par'] = undefined;

/**
 * @member {Number} Pars
 */
PlayerRound.prototype['Pars'] = undefined;

/**
 * @member {Number} PlayerRoundID
 */
PlayerRound.prototype['PlayerRoundID'] = undefined;

/**
 * @member {Number} PlayerTournamentID
 */
PlayerRound.prototype['PlayerTournamentID'] = undefined;

/**
 * @member {Number} Score
 */
PlayerRound.prototype['Score'] = undefined;

/**
 * @member {String} TeeTime
 */
PlayerRound.prototype['TeeTime'] = undefined;

/**
 * @member {Number} TripleBogeys
 */
PlayerRound.prototype['TripleBogeys'] = undefined;

/**
 * @member {Number} WorseThanDoubleBogey
 */
PlayerRound.prototype['WorseThanDoubleBogey'] = undefined;

/**
 * @member {Number} WorseThanTripleBogey
 */
PlayerRound.prototype['WorseThanTripleBogey'] = undefined;






export default PlayerRound;

