/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Injury model module.
 * @module model/Injury
 * @version 1.0
 */
class Injury {
    /**
     * Constructs a new <code>Injury</code>.
     * @alias module:model/Injury
     */
    constructor() { 
        
        Injury.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Injury</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Injury} obj Optional instance to populate.
     * @return {module:model/Injury} The populated <code>Injury</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Injury();

            if (data.hasOwnProperty('Active')) {
                obj['Active'] = ApiClient.convertToType(data['Active'], 'Boolean');
            }
            if (data.hasOwnProperty('BodyPart')) {
                obj['BodyPart'] = ApiClient.convertToType(data['BodyPart'], 'String');
            }
            if (data.hasOwnProperty('ExpectedReturn')) {
                obj['ExpectedReturn'] = ApiClient.convertToType(data['ExpectedReturn'], 'String');
            }
            if (data.hasOwnProperty('InjuryID')) {
                obj['InjuryID'] = ApiClient.convertToType(data['InjuryID'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Injury</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Injury</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BodyPart'] && !(typeof data['BodyPart'] === 'string' || data['BodyPart'] instanceof String)) {
            throw new Error("Expected the field `BodyPart` to be a primitive type in the JSON string but got " + data['BodyPart']);
        }
        // ensure the json data is a string
        if (data['ExpectedReturn'] && !(typeof data['ExpectedReturn'] === 'string' || data['ExpectedReturn'] instanceof String)) {
            throw new Error("Expected the field `ExpectedReturn` to be a primitive type in the JSON string but got " + data['ExpectedReturn']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['StartDate'] && !(typeof data['StartDate'] === 'string' || data['StartDate'] instanceof String)) {
            throw new Error("Expected the field `StartDate` to be a primitive type in the JSON string but got " + data['StartDate']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}



/**
 * @member {Boolean} Active
 */
Injury.prototype['Active'] = undefined;

/**
 * @member {String} BodyPart
 */
Injury.prototype['BodyPart'] = undefined;

/**
 * @member {String} ExpectedReturn
 */
Injury.prototype['ExpectedReturn'] = undefined;

/**
 * @member {Number} InjuryID
 */
Injury.prototype['InjuryID'] = undefined;

/**
 * @member {String} Name
 */
Injury.prototype['Name'] = undefined;

/**
 * @member {Number} PlayerID
 */
Injury.prototype['PlayerID'] = undefined;

/**
 * @member {String} StartDate
 */
Injury.prototype['StartDate'] = undefined;

/**
 * @member {String} Status
 */
Injury.prototype['Status'] = undefined;






export default Injury;

