/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GolfV2);
  }
}(this, function(expect, GolfV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GolfV2.Tournament();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Tournament', function() {
    it('should create an instance of Tournament', function() {
      // uncomment below and update the code to test Tournament
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be.a(GolfV2.Tournament);
    });

    it('should have the property canceled (base name: "Canceled")', function() {
      // uncomment below and update the code to test the property canceled
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "City")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "Country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property covered (base name: "Covered")', function() {
      // uncomment below and update the code to test the property covered
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "EndDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property format (base name: "Format")', function() {
      // uncomment below and update the code to test the property format
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property isInProgress (base name: "IsInProgress")', function() {
      // uncomment below and update the code to test the property isInProgress
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property isOver (base name: "IsOver")', function() {
      // uncomment below and update the code to test the property isOver
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "Location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property oddsCoverage (base name: "OddsCoverage")', function() {
      // uncomment below and update the code to test the property oddsCoverage
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property par (base name: "Par")', function() {
      // uncomment below and update the code to test the property par
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property purse (base name: "Purse")', function() {
      // uncomment below and update the code to test the property purse
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property rounds (base name: "Rounds")', function() {
      // uncomment below and update the code to test the property rounds
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property sportRadarTournamentID (base name: "SportRadarTournamentID")', function() {
      // uncomment below and update the code to test the property sportRadarTournamentID
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property startDateTime (base name: "StartDateTime")', function() {
      // uncomment below and update the code to test the property startDateTime
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "TimeZone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property tournamentID (base name: "TournamentID")', function() {
      // uncomment below and update the code to test the property tournamentID
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property venue (base name: "Venue")', function() {
      // uncomment below and update the code to test the property venue
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property yards (base name: "Yards")', function() {
      // uncomment below and update the code to test the property yards
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

    it('should have the property zipCode (base name: "ZipCode")', function() {
      // uncomment below and update the code to test the property zipCode
      //var instance = new GolfV2.Tournament();
      //expect(instance).to.be();
    });

  });

}));
