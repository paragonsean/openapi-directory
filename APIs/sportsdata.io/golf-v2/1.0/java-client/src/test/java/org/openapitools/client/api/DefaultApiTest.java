/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DfsSlate;
import org.openapitools.client.model.Injury;
import org.openapitools.client.model.Leaderboard;
import org.openapitools.client.model.News;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.PlayerSeason;
import org.openapitools.client.model.PlayerTournament;
import org.openapitools.client.model.PlayerTournamentProjection;
import org.openapitools.client.model.Season;
import org.openapitools.client.model.Tournament;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Current Season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void currentSeasonTest() throws ApiException {
        String format = null;
        Season response = api.currentSeason(format);
        // TODO: test validations
    }

    /**
     * DFS Slates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfsSlatesTest() throws ApiException {
        String format = null;
        String tournamentid = null;
        List<DfsSlate> response = api.dfsSlates(format, tournamentid);
        // TODO: test validations
    }

    /**
     * Injuries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void injuriesTest() throws ApiException {
        String format = null;
        List<Injury> response = api.injuries(format);
        // TODO: test validations
    }

    /**
     * Injuries (Historical)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void injuriesHistoricalTest() throws ApiException {
        String format = null;
        List<Injury> response = api.injuriesHistorical(format);
        // TODO: test validations
    }

    /**
     * Leaderboard
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leaderboardTest() throws ApiException {
        String format = null;
        String tournamentid = null;
        Leaderboard response = api.leaderboard(format, tournamentid);
        // TODO: test validations
    }

    /**
     * News
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsTest() throws ApiException {
        String format = null;
        List<News> response = api.news(format);
        // TODO: test validations
    }

    /**
     * News by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<News> response = api.newsByDate(format, date);
        // TODO: test validations
    }

    /**
     * News by Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newsByPlayerTest() throws ApiException {
        String format = null;
        String playerid = null;
        List<News> response = api.newsByPlayer(format, playerid);
        // TODO: test validations
    }

    /**
     * Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerTest() throws ApiException {
        String format = null;
        String playerid = null;
        Player response = api.player(format, playerid);
        // TODO: test validations
    }

    /**
     * Player Season Stats (w/ World Golf Rankings)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSeasonStatsWWorldGolfRankingsTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeason> response = api.playerSeasonStatsWWorldGolfRankings(format, season);
        // TODO: test validations
    }

    /**
     * Player Tournament Projected Stats (w/ DraftKings Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerTournamentProjectedStatsWDraftkingsSalariesTest() throws ApiException {
        String format = null;
        String tournamentid = null;
        List<PlayerTournamentProjection> response = api.playerTournamentProjectedStatsWDraftkingsSalaries(format, tournamentid);
        // TODO: test validations
    }

    /**
     * Player Tournament Stats By Player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerTournamentStatsByPlayerTest() throws ApiException {
        String format = null;
        String tournamentid = null;
        String playerid = null;
        PlayerTournament response = api.playerTournamentStatsByPlayer(format, tournamentid, playerid);
        // TODO: test validations
    }

    /**
     * Players
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playersTest() throws ApiException {
        String format = null;
        List<Player> response = api.players(format);
        // TODO: test validations
    }

    /**
     * Schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleTest() throws ApiException {
        String format = null;
        List<Tournament> response = api.schedule(format);
        // TODO: test validations
    }

    /**
     * Schedule by Season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleBySeasonTest() throws ApiException {
        String format = null;
        String season = null;
        List<Tournament> response = api.scheduleBySeason(format, season);
        // TODO: test validations
    }

}
