/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlayerRound;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerTournament
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerTournament {
  public static final String SERIALIZED_NAME_BIRDIES = "Birdies";
  @SerializedName(SERIALIZED_NAME_BIRDIES)
  private BigDecimal birdies;

  public static final String SERIALIZED_NAME_BOGEY_FREE_ROUNDS = "BogeyFreeRounds";
  @SerializedName(SERIALIZED_NAME_BOGEY_FREE_ROUNDS)
  private BigDecimal bogeyFreeRounds;

  public static final String SERIALIZED_NAME_BOGEYS = "Bogeys";
  @SerializedName(SERIALIZED_NAME_BOGEYS)
  private BigDecimal bogeys;

  public static final String SERIALIZED_NAME_BOUNCE_BACK_COUNT = "BounceBackCount";
  @SerializedName(SERIALIZED_NAME_BOUNCE_BACK_COUNT)
  private BigDecimal bounceBackCount;

  public static final String SERIALIZED_NAME_CONSECUTIVE_BIRDIE_OR_BETTER_COUNT = "ConsecutiveBirdieOrBetterCount";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_BIRDIE_OR_BETTER_COUNT)
  private BigDecimal consecutiveBirdieOrBetterCount;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DOUBLE_BOGEYS = "DoubleBogeys";
  @SerializedName(SERIALIZED_NAME_DOUBLE_BOGEYS)
  private BigDecimal doubleBogeys;

  public static final String SERIALIZED_NAME_DOUBLE_EAGLES = "DoubleEagles";
  @SerializedName(SERIALIZED_NAME_DOUBLE_EAGLES)
  private BigDecimal doubleEagles;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_SALARY = "DraftKingsSalary";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_SALARY)
  private Integer draftKingsSalary;

  public static final String SERIALIZED_NAME_EAGLES = "Eagles";
  @SerializedName(SERIALIZED_NAME_EAGLES)
  private BigDecimal eagles;

  public static final String SERIALIZED_NAME_EARNINGS = "Earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private BigDecimal earnings;

  public static final String SERIALIZED_NAME_FAN_DUEL_SALARY = "FanDuelSalary";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_SALARY)
  private Integer fanDuelSalary;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_SALARY = "FantasyDraftSalary";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_SALARY)
  private Integer fantasyDraftSalary;

  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS = "FantasyPointsDraftKings";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS)
  private BigDecimal fantasyPointsDraftKings;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_FAN_DUEL = "FantasyPointsFanDuel";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_FAN_DUEL)
  private BigDecimal fantasyPointsFanDuel;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_FANTASY_DRAFT = "FantasyPointsFantasyDraft";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_FANTASY_DRAFT)
  private BigDecimal fantasyPointsFantasyDraft;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_YAHOO = "FantasyPointsYahoo";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_YAHOO)
  private BigDecimal fantasyPointsYahoo;

  public static final String SERIALIZED_NAME_FED_EX_POINTS = "FedExPoints";
  @SerializedName(SERIALIZED_NAME_FED_EX_POINTS)
  private Integer fedExPoints;

  public static final String SERIALIZED_NAME_HOLE_IN_ONES = "HoleInOnes";
  @SerializedName(SERIALIZED_NAME_HOLE_IN_ONES)
  private BigDecimal holeInOnes;

  public static final String SERIALIZED_NAME_IS_ALTERNATE = "IsAlternate";
  @SerializedName(SERIALIZED_NAME_IS_ALTERNATE)
  private Boolean isAlternate;

  public static final String SERIALIZED_NAME_IS_WITHDRAWN = "IsWithdrawn";
  @SerializedName(SERIALIZED_NAME_IS_WITHDRAWN)
  private Boolean isWithdrawn;

  public static final String SERIALIZED_NAME_MADE_CUT = "MadeCut";
  @SerializedName(SERIALIZED_NAME_MADE_CUT)
  private BigDecimal madeCut;

  public static final String SERIALIZED_NAME_MADE_CUT_DID_NOT_FINISH = "MadeCutDidNotFinish";
  @SerializedName(SERIALIZED_NAME_MADE_CUT_DID_NOT_FINISH)
  private Boolean madeCutDidNotFinish;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ODDS_TO_WIN = "OddsToWin";
  @SerializedName(SERIALIZED_NAME_ODDS_TO_WIN)
  private BigDecimal oddsToWin;

  public static final String SERIALIZED_NAME_ODDS_TO_WIN_DESCRIPTION = "OddsToWinDescription";
  @SerializedName(SERIALIZED_NAME_ODDS_TO_WIN_DESCRIPTION)
  private String oddsToWinDescription;

  public static final String SERIALIZED_NAME_PARS = "Pars";
  @SerializedName(SERIALIZED_NAME_PARS)
  private BigDecimal pars;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_PLAYER_TOURNAMENT_I_D = "PlayerTournamentID";
  @SerializedName(SERIALIZED_NAME_PLAYER_TOURNAMENT_I_D)
  private Integer playerTournamentID;

  public static final String SERIALIZED_NAME_RANK = "Rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_ROUNDS = "Rounds";
  @SerializedName(SERIALIZED_NAME_ROUNDS)
  private List<PlayerRound> rounds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUNDS_UNDER_SEVENTY = "RoundsUnderSeventy";
  @SerializedName(SERIALIZED_NAME_ROUNDS_UNDER_SEVENTY)
  private BigDecimal roundsUnderSeventy;

  public static final String SERIALIZED_NAME_ROUNDS_WITH_FIVE_OR_MORE_BIRDIES_OR_BETTER = "RoundsWithFiveOrMoreBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_ROUNDS_WITH_FIVE_OR_MORE_BIRDIES_OR_BETTER)
  private BigDecimal roundsWithFiveOrMoreBirdiesOrBetter;

  public static final String SERIALIZED_NAME_STREAKS_OF_FIVE_BIRDIES_OR_BETTER = "StreaksOfFiveBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_STREAKS_OF_FIVE_BIRDIES_OR_BETTER)
  private BigDecimal streaksOfFiveBirdiesOrBetter;

  public static final String SERIALIZED_NAME_STREAKS_OF_FOUR_BIRDIES_OR_BETTER = "StreaksOfFourBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_STREAKS_OF_FOUR_BIRDIES_OR_BETTER)
  private BigDecimal streaksOfFourBirdiesOrBetter;

  public static final String SERIALIZED_NAME_STREAKS_OF_SIX_BIRDIES_OR_BETTER = "StreaksOfSixBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_STREAKS_OF_SIX_BIRDIES_OR_BETTER)
  private BigDecimal streaksOfSixBirdiesOrBetter;

  public static final String SERIALIZED_NAME_STREAKS_OF_THREE_BIRDIES_OR_BETTER = "StreaksOfThreeBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_STREAKS_OF_THREE_BIRDIES_OR_BETTER)
  private BigDecimal streaksOfThreeBirdiesOrBetter;

  public static final String SERIALIZED_NAME_TEE_TIME = "TeeTime";
  @SerializedName(SERIALIZED_NAME_TEE_TIME)
  private String teeTime;

  public static final String SERIALIZED_NAME_TOTAL_SCORE = "TotalScore";
  @SerializedName(SERIALIZED_NAME_TOTAL_SCORE)
  private BigDecimal totalScore;

  public static final String SERIALIZED_NAME_TOTAL_STROKES = "TotalStrokes";
  @SerializedName(SERIALIZED_NAME_TOTAL_STROKES)
  private BigDecimal totalStrokes;

  public static final String SERIALIZED_NAME_TOTAL_THROUGH = "TotalThrough";
  @SerializedName(SERIALIZED_NAME_TOTAL_THROUGH)
  private Integer totalThrough;

  public static final String SERIALIZED_NAME_TOURNAMENT_I_D = "TournamentID";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT_I_D)
  private Integer tournamentID;

  public static final String SERIALIZED_NAME_TOURNAMENT_STATUS = "TournamentStatus";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT_STATUS)
  private String tournamentStatus;

  public static final String SERIALIZED_NAME_TRIPLE_BOGEYS = "TripleBogeys";
  @SerializedName(SERIALIZED_NAME_TRIPLE_BOGEYS)
  private BigDecimal tripleBogeys;

  public static final String SERIALIZED_NAME_WIN = "Win";
  @SerializedName(SERIALIZED_NAME_WIN)
  private BigDecimal win;

  public static final String SERIALIZED_NAME_WORSE_THAN_DOUBLE_BOGEY = "WorseThanDoubleBogey";
  @SerializedName(SERIALIZED_NAME_WORSE_THAN_DOUBLE_BOGEY)
  private BigDecimal worseThanDoubleBogey;

  public static final String SERIALIZED_NAME_WORSE_THAN_TRIPLE_BOGEY = "WorseThanTripleBogey";
  @SerializedName(SERIALIZED_NAME_WORSE_THAN_TRIPLE_BOGEY)
  private BigDecimal worseThanTripleBogey;

  public PlayerTournament() {
  }

  public PlayerTournament birdies(BigDecimal birdies) {
    this.birdies = birdies;
    return this;
  }

  /**
   * Get birdies
   * @return birdies
   */
  @javax.annotation.Nullable
  public BigDecimal getBirdies() {
    return birdies;
  }

  public void setBirdies(BigDecimal birdies) {
    this.birdies = birdies;
  }


  public PlayerTournament bogeyFreeRounds(BigDecimal bogeyFreeRounds) {
    this.bogeyFreeRounds = bogeyFreeRounds;
    return this;
  }

  /**
   * Get bogeyFreeRounds
   * @return bogeyFreeRounds
   */
  @javax.annotation.Nullable
  public BigDecimal getBogeyFreeRounds() {
    return bogeyFreeRounds;
  }

  public void setBogeyFreeRounds(BigDecimal bogeyFreeRounds) {
    this.bogeyFreeRounds = bogeyFreeRounds;
  }


  public PlayerTournament bogeys(BigDecimal bogeys) {
    this.bogeys = bogeys;
    return this;
  }

  /**
   * Get bogeys
   * @return bogeys
   */
  @javax.annotation.Nullable
  public BigDecimal getBogeys() {
    return bogeys;
  }

  public void setBogeys(BigDecimal bogeys) {
    this.bogeys = bogeys;
  }


  public PlayerTournament bounceBackCount(BigDecimal bounceBackCount) {
    this.bounceBackCount = bounceBackCount;
    return this;
  }

  /**
   * Get bounceBackCount
   * @return bounceBackCount
   */
  @javax.annotation.Nullable
  public BigDecimal getBounceBackCount() {
    return bounceBackCount;
  }

  public void setBounceBackCount(BigDecimal bounceBackCount) {
    this.bounceBackCount = bounceBackCount;
  }


  public PlayerTournament consecutiveBirdieOrBetterCount(BigDecimal consecutiveBirdieOrBetterCount) {
    this.consecutiveBirdieOrBetterCount = consecutiveBirdieOrBetterCount;
    return this;
  }

  /**
   * Get consecutiveBirdieOrBetterCount
   * @return consecutiveBirdieOrBetterCount
   */
  @javax.annotation.Nullable
  public BigDecimal getConsecutiveBirdieOrBetterCount() {
    return consecutiveBirdieOrBetterCount;
  }

  public void setConsecutiveBirdieOrBetterCount(BigDecimal consecutiveBirdieOrBetterCount) {
    this.consecutiveBirdieOrBetterCount = consecutiveBirdieOrBetterCount;
  }


  public PlayerTournament country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PlayerTournament doubleBogeys(BigDecimal doubleBogeys) {
    this.doubleBogeys = doubleBogeys;
    return this;
  }

  /**
   * Get doubleBogeys
   * @return doubleBogeys
   */
  @javax.annotation.Nullable
  public BigDecimal getDoubleBogeys() {
    return doubleBogeys;
  }

  public void setDoubleBogeys(BigDecimal doubleBogeys) {
    this.doubleBogeys = doubleBogeys;
  }


  public PlayerTournament doubleEagles(BigDecimal doubleEagles) {
    this.doubleEagles = doubleEagles;
    return this;
  }

  /**
   * Get doubleEagles
   * @return doubleEagles
   */
  @javax.annotation.Nullable
  public BigDecimal getDoubleEagles() {
    return doubleEagles;
  }

  public void setDoubleEagles(BigDecimal doubleEagles) {
    this.doubleEagles = doubleEagles;
  }


  public PlayerTournament draftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
    return this;
  }

  /**
   * Get draftKingsSalary
   * @return draftKingsSalary
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsSalary() {
    return draftKingsSalary;
  }

  public void setDraftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
  }


  public PlayerTournament eagles(BigDecimal eagles) {
    this.eagles = eagles;
    return this;
  }

  /**
   * Get eagles
   * @return eagles
   */
  @javax.annotation.Nullable
  public BigDecimal getEagles() {
    return eagles;
  }

  public void setEagles(BigDecimal eagles) {
    this.eagles = eagles;
  }


  public PlayerTournament earnings(BigDecimal earnings) {
    this.earnings = earnings;
    return this;
  }

  /**
   * Get earnings
   * @return earnings
   */
  @javax.annotation.Nullable
  public BigDecimal getEarnings() {
    return earnings;
  }

  public void setEarnings(BigDecimal earnings) {
    this.earnings = earnings;
  }


  public PlayerTournament fanDuelSalary(Integer fanDuelSalary) {
    this.fanDuelSalary = fanDuelSalary;
    return this;
  }

  /**
   * Get fanDuelSalary
   * @return fanDuelSalary
   */
  @javax.annotation.Nullable
  public Integer getFanDuelSalary() {
    return fanDuelSalary;
  }

  public void setFanDuelSalary(Integer fanDuelSalary) {
    this.fanDuelSalary = fanDuelSalary;
  }


  public PlayerTournament fantasyDraftSalary(Integer fantasyDraftSalary) {
    this.fantasyDraftSalary = fantasyDraftSalary;
    return this;
  }

  /**
   * Get fantasyDraftSalary
   * @return fantasyDraftSalary
   */
  @javax.annotation.Nullable
  public Integer getFantasyDraftSalary() {
    return fantasyDraftSalary;
  }

  public void setFantasyDraftSalary(Integer fantasyDraftSalary) {
    this.fantasyDraftSalary = fantasyDraftSalary;
  }


  public PlayerTournament fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public PlayerTournament fantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
    return this;
  }

  /**
   * Get fantasyPointsDraftKings
   * @return fantasyPointsDraftKings
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsDraftKings() {
    return fantasyPointsDraftKings;
  }

  public void setFantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
  }


  public PlayerTournament fantasyPointsFanDuel(BigDecimal fantasyPointsFanDuel) {
    this.fantasyPointsFanDuel = fantasyPointsFanDuel;
    return this;
  }

  /**
   * Get fantasyPointsFanDuel
   * @return fantasyPointsFanDuel
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsFanDuel() {
    return fantasyPointsFanDuel;
  }

  public void setFantasyPointsFanDuel(BigDecimal fantasyPointsFanDuel) {
    this.fantasyPointsFanDuel = fantasyPointsFanDuel;
  }


  public PlayerTournament fantasyPointsFantasyDraft(BigDecimal fantasyPointsFantasyDraft) {
    this.fantasyPointsFantasyDraft = fantasyPointsFantasyDraft;
    return this;
  }

  /**
   * Get fantasyPointsFantasyDraft
   * @return fantasyPointsFantasyDraft
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsFantasyDraft() {
    return fantasyPointsFantasyDraft;
  }

  public void setFantasyPointsFantasyDraft(BigDecimal fantasyPointsFantasyDraft) {
    this.fantasyPointsFantasyDraft = fantasyPointsFantasyDraft;
  }


  public PlayerTournament fantasyPointsYahoo(BigDecimal fantasyPointsYahoo) {
    this.fantasyPointsYahoo = fantasyPointsYahoo;
    return this;
  }

  /**
   * Get fantasyPointsYahoo
   * @return fantasyPointsYahoo
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsYahoo() {
    return fantasyPointsYahoo;
  }

  public void setFantasyPointsYahoo(BigDecimal fantasyPointsYahoo) {
    this.fantasyPointsYahoo = fantasyPointsYahoo;
  }


  public PlayerTournament fedExPoints(Integer fedExPoints) {
    this.fedExPoints = fedExPoints;
    return this;
  }

  /**
   * Get fedExPoints
   * @return fedExPoints
   */
  @javax.annotation.Nullable
  public Integer getFedExPoints() {
    return fedExPoints;
  }

  public void setFedExPoints(Integer fedExPoints) {
    this.fedExPoints = fedExPoints;
  }


  public PlayerTournament holeInOnes(BigDecimal holeInOnes) {
    this.holeInOnes = holeInOnes;
    return this;
  }

  /**
   * Get holeInOnes
   * @return holeInOnes
   */
  @javax.annotation.Nullable
  public BigDecimal getHoleInOnes() {
    return holeInOnes;
  }

  public void setHoleInOnes(BigDecimal holeInOnes) {
    this.holeInOnes = holeInOnes;
  }


  public PlayerTournament isAlternate(Boolean isAlternate) {
    this.isAlternate = isAlternate;
    return this;
  }

  /**
   * Get isAlternate
   * @return isAlternate
   */
  @javax.annotation.Nullable
  public Boolean getIsAlternate() {
    return isAlternate;
  }

  public void setIsAlternate(Boolean isAlternate) {
    this.isAlternate = isAlternate;
  }


  public PlayerTournament isWithdrawn(Boolean isWithdrawn) {
    this.isWithdrawn = isWithdrawn;
    return this;
  }

  /**
   * Get isWithdrawn
   * @return isWithdrawn
   */
  @javax.annotation.Nullable
  public Boolean getIsWithdrawn() {
    return isWithdrawn;
  }

  public void setIsWithdrawn(Boolean isWithdrawn) {
    this.isWithdrawn = isWithdrawn;
  }


  public PlayerTournament madeCut(BigDecimal madeCut) {
    this.madeCut = madeCut;
    return this;
  }

  /**
   * Get madeCut
   * @return madeCut
   */
  @javax.annotation.Nullable
  public BigDecimal getMadeCut() {
    return madeCut;
  }

  public void setMadeCut(BigDecimal madeCut) {
    this.madeCut = madeCut;
  }


  public PlayerTournament madeCutDidNotFinish(Boolean madeCutDidNotFinish) {
    this.madeCutDidNotFinish = madeCutDidNotFinish;
    return this;
  }

  /**
   * Get madeCutDidNotFinish
   * @return madeCutDidNotFinish
   */
  @javax.annotation.Nullable
  public Boolean getMadeCutDidNotFinish() {
    return madeCutDidNotFinish;
  }

  public void setMadeCutDidNotFinish(Boolean madeCutDidNotFinish) {
    this.madeCutDidNotFinish = madeCutDidNotFinish;
  }


  public PlayerTournament name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerTournament oddsToWin(BigDecimal oddsToWin) {
    this.oddsToWin = oddsToWin;
    return this;
  }

  /**
   * Get oddsToWin
   * @return oddsToWin
   */
  @javax.annotation.Nullable
  public BigDecimal getOddsToWin() {
    return oddsToWin;
  }

  public void setOddsToWin(BigDecimal oddsToWin) {
    this.oddsToWin = oddsToWin;
  }


  public PlayerTournament oddsToWinDescription(String oddsToWinDescription) {
    this.oddsToWinDescription = oddsToWinDescription;
    return this;
  }

  /**
   * Get oddsToWinDescription
   * @return oddsToWinDescription
   */
  @javax.annotation.Nullable
  public String getOddsToWinDescription() {
    return oddsToWinDescription;
  }

  public void setOddsToWinDescription(String oddsToWinDescription) {
    this.oddsToWinDescription = oddsToWinDescription;
  }


  public PlayerTournament pars(BigDecimal pars) {
    this.pars = pars;
    return this;
  }

  /**
   * Get pars
   * @return pars
   */
  @javax.annotation.Nullable
  public BigDecimal getPars() {
    return pars;
  }

  public void setPars(BigDecimal pars) {
    this.pars = pars;
  }


  public PlayerTournament playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayerTournament playerTournamentID(Integer playerTournamentID) {
    this.playerTournamentID = playerTournamentID;
    return this;
  }

  /**
   * Get playerTournamentID
   * @return playerTournamentID
   */
  @javax.annotation.Nullable
  public Integer getPlayerTournamentID() {
    return playerTournamentID;
  }

  public void setPlayerTournamentID(Integer playerTournamentID) {
    this.playerTournamentID = playerTournamentID;
  }


  public PlayerTournament rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public PlayerTournament rounds(List<PlayerRound> rounds) {
    this.rounds = rounds;
    return this;
  }

  public PlayerTournament addRoundsItem(PlayerRound roundsItem) {
    if (this.rounds == null) {
      this.rounds = new ArrayList<>();
    }
    this.rounds.add(roundsItem);
    return this;
  }

  /**
   * Get rounds
   * @return rounds
   */
  @javax.annotation.Nullable
  public List<PlayerRound> getRounds() {
    return rounds;
  }

  public void setRounds(List<PlayerRound> rounds) {
    this.rounds = rounds;
  }


  public PlayerTournament roundsUnderSeventy(BigDecimal roundsUnderSeventy) {
    this.roundsUnderSeventy = roundsUnderSeventy;
    return this;
  }

  /**
   * Get roundsUnderSeventy
   * @return roundsUnderSeventy
   */
  @javax.annotation.Nullable
  public BigDecimal getRoundsUnderSeventy() {
    return roundsUnderSeventy;
  }

  public void setRoundsUnderSeventy(BigDecimal roundsUnderSeventy) {
    this.roundsUnderSeventy = roundsUnderSeventy;
  }


  public PlayerTournament roundsWithFiveOrMoreBirdiesOrBetter(BigDecimal roundsWithFiveOrMoreBirdiesOrBetter) {
    this.roundsWithFiveOrMoreBirdiesOrBetter = roundsWithFiveOrMoreBirdiesOrBetter;
    return this;
  }

  /**
   * Get roundsWithFiveOrMoreBirdiesOrBetter
   * @return roundsWithFiveOrMoreBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public BigDecimal getRoundsWithFiveOrMoreBirdiesOrBetter() {
    return roundsWithFiveOrMoreBirdiesOrBetter;
  }

  public void setRoundsWithFiveOrMoreBirdiesOrBetter(BigDecimal roundsWithFiveOrMoreBirdiesOrBetter) {
    this.roundsWithFiveOrMoreBirdiesOrBetter = roundsWithFiveOrMoreBirdiesOrBetter;
  }


  public PlayerTournament streaksOfFiveBirdiesOrBetter(BigDecimal streaksOfFiveBirdiesOrBetter) {
    this.streaksOfFiveBirdiesOrBetter = streaksOfFiveBirdiesOrBetter;
    return this;
  }

  /**
   * Get streaksOfFiveBirdiesOrBetter
   * @return streaksOfFiveBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public BigDecimal getStreaksOfFiveBirdiesOrBetter() {
    return streaksOfFiveBirdiesOrBetter;
  }

  public void setStreaksOfFiveBirdiesOrBetter(BigDecimal streaksOfFiveBirdiesOrBetter) {
    this.streaksOfFiveBirdiesOrBetter = streaksOfFiveBirdiesOrBetter;
  }


  public PlayerTournament streaksOfFourBirdiesOrBetter(BigDecimal streaksOfFourBirdiesOrBetter) {
    this.streaksOfFourBirdiesOrBetter = streaksOfFourBirdiesOrBetter;
    return this;
  }

  /**
   * Get streaksOfFourBirdiesOrBetter
   * @return streaksOfFourBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public BigDecimal getStreaksOfFourBirdiesOrBetter() {
    return streaksOfFourBirdiesOrBetter;
  }

  public void setStreaksOfFourBirdiesOrBetter(BigDecimal streaksOfFourBirdiesOrBetter) {
    this.streaksOfFourBirdiesOrBetter = streaksOfFourBirdiesOrBetter;
  }


  public PlayerTournament streaksOfSixBirdiesOrBetter(BigDecimal streaksOfSixBirdiesOrBetter) {
    this.streaksOfSixBirdiesOrBetter = streaksOfSixBirdiesOrBetter;
    return this;
  }

  /**
   * Get streaksOfSixBirdiesOrBetter
   * @return streaksOfSixBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public BigDecimal getStreaksOfSixBirdiesOrBetter() {
    return streaksOfSixBirdiesOrBetter;
  }

  public void setStreaksOfSixBirdiesOrBetter(BigDecimal streaksOfSixBirdiesOrBetter) {
    this.streaksOfSixBirdiesOrBetter = streaksOfSixBirdiesOrBetter;
  }


  public PlayerTournament streaksOfThreeBirdiesOrBetter(BigDecimal streaksOfThreeBirdiesOrBetter) {
    this.streaksOfThreeBirdiesOrBetter = streaksOfThreeBirdiesOrBetter;
    return this;
  }

  /**
   * Get streaksOfThreeBirdiesOrBetter
   * @return streaksOfThreeBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public BigDecimal getStreaksOfThreeBirdiesOrBetter() {
    return streaksOfThreeBirdiesOrBetter;
  }

  public void setStreaksOfThreeBirdiesOrBetter(BigDecimal streaksOfThreeBirdiesOrBetter) {
    this.streaksOfThreeBirdiesOrBetter = streaksOfThreeBirdiesOrBetter;
  }


  public PlayerTournament teeTime(String teeTime) {
    this.teeTime = teeTime;
    return this;
  }

  /**
   * Get teeTime
   * @return teeTime
   */
  @javax.annotation.Nullable
  public String getTeeTime() {
    return teeTime;
  }

  public void setTeeTime(String teeTime) {
    this.teeTime = teeTime;
  }


  public PlayerTournament totalScore(BigDecimal totalScore) {
    this.totalScore = totalScore;
    return this;
  }

  /**
   * Get totalScore
   * @return totalScore
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalScore() {
    return totalScore;
  }

  public void setTotalScore(BigDecimal totalScore) {
    this.totalScore = totalScore;
  }


  public PlayerTournament totalStrokes(BigDecimal totalStrokes) {
    this.totalStrokes = totalStrokes;
    return this;
  }

  /**
   * Get totalStrokes
   * @return totalStrokes
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalStrokes() {
    return totalStrokes;
  }

  public void setTotalStrokes(BigDecimal totalStrokes) {
    this.totalStrokes = totalStrokes;
  }


  public PlayerTournament totalThrough(Integer totalThrough) {
    this.totalThrough = totalThrough;
    return this;
  }

  /**
   * Get totalThrough
   * @return totalThrough
   */
  @javax.annotation.Nullable
  public Integer getTotalThrough() {
    return totalThrough;
  }

  public void setTotalThrough(Integer totalThrough) {
    this.totalThrough = totalThrough;
  }


  public PlayerTournament tournamentID(Integer tournamentID) {
    this.tournamentID = tournamentID;
    return this;
  }

  /**
   * Get tournamentID
   * @return tournamentID
   */
  @javax.annotation.Nullable
  public Integer getTournamentID() {
    return tournamentID;
  }

  public void setTournamentID(Integer tournamentID) {
    this.tournamentID = tournamentID;
  }


  public PlayerTournament tournamentStatus(String tournamentStatus) {
    this.tournamentStatus = tournamentStatus;
    return this;
  }

  /**
   * Get tournamentStatus
   * @return tournamentStatus
   */
  @javax.annotation.Nullable
  public String getTournamentStatus() {
    return tournamentStatus;
  }

  public void setTournamentStatus(String tournamentStatus) {
    this.tournamentStatus = tournamentStatus;
  }


  public PlayerTournament tripleBogeys(BigDecimal tripleBogeys) {
    this.tripleBogeys = tripleBogeys;
    return this;
  }

  /**
   * Get tripleBogeys
   * @return tripleBogeys
   */
  @javax.annotation.Nullable
  public BigDecimal getTripleBogeys() {
    return tripleBogeys;
  }

  public void setTripleBogeys(BigDecimal tripleBogeys) {
    this.tripleBogeys = tripleBogeys;
  }


  public PlayerTournament win(BigDecimal win) {
    this.win = win;
    return this;
  }

  /**
   * Get win
   * @return win
   */
  @javax.annotation.Nullable
  public BigDecimal getWin() {
    return win;
  }

  public void setWin(BigDecimal win) {
    this.win = win;
  }


  public PlayerTournament worseThanDoubleBogey(BigDecimal worseThanDoubleBogey) {
    this.worseThanDoubleBogey = worseThanDoubleBogey;
    return this;
  }

  /**
   * Get worseThanDoubleBogey
   * @return worseThanDoubleBogey
   */
  @javax.annotation.Nullable
  public BigDecimal getWorseThanDoubleBogey() {
    return worseThanDoubleBogey;
  }

  public void setWorseThanDoubleBogey(BigDecimal worseThanDoubleBogey) {
    this.worseThanDoubleBogey = worseThanDoubleBogey;
  }


  public PlayerTournament worseThanTripleBogey(BigDecimal worseThanTripleBogey) {
    this.worseThanTripleBogey = worseThanTripleBogey;
    return this;
  }

  /**
   * Get worseThanTripleBogey
   * @return worseThanTripleBogey
   */
  @javax.annotation.Nullable
  public BigDecimal getWorseThanTripleBogey() {
    return worseThanTripleBogey;
  }

  public void setWorseThanTripleBogey(BigDecimal worseThanTripleBogey) {
    this.worseThanTripleBogey = worseThanTripleBogey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerTournament playerTournament = (PlayerTournament) o;
    return Objects.equals(this.birdies, playerTournament.birdies) &&
        Objects.equals(this.bogeyFreeRounds, playerTournament.bogeyFreeRounds) &&
        Objects.equals(this.bogeys, playerTournament.bogeys) &&
        Objects.equals(this.bounceBackCount, playerTournament.bounceBackCount) &&
        Objects.equals(this.consecutiveBirdieOrBetterCount, playerTournament.consecutiveBirdieOrBetterCount) &&
        Objects.equals(this.country, playerTournament.country) &&
        Objects.equals(this.doubleBogeys, playerTournament.doubleBogeys) &&
        Objects.equals(this.doubleEagles, playerTournament.doubleEagles) &&
        Objects.equals(this.draftKingsSalary, playerTournament.draftKingsSalary) &&
        Objects.equals(this.eagles, playerTournament.eagles) &&
        Objects.equals(this.earnings, playerTournament.earnings) &&
        Objects.equals(this.fanDuelSalary, playerTournament.fanDuelSalary) &&
        Objects.equals(this.fantasyDraftSalary, playerTournament.fantasyDraftSalary) &&
        Objects.equals(this.fantasyPoints, playerTournament.fantasyPoints) &&
        Objects.equals(this.fantasyPointsDraftKings, playerTournament.fantasyPointsDraftKings) &&
        Objects.equals(this.fantasyPointsFanDuel, playerTournament.fantasyPointsFanDuel) &&
        Objects.equals(this.fantasyPointsFantasyDraft, playerTournament.fantasyPointsFantasyDraft) &&
        Objects.equals(this.fantasyPointsYahoo, playerTournament.fantasyPointsYahoo) &&
        Objects.equals(this.fedExPoints, playerTournament.fedExPoints) &&
        Objects.equals(this.holeInOnes, playerTournament.holeInOnes) &&
        Objects.equals(this.isAlternate, playerTournament.isAlternate) &&
        Objects.equals(this.isWithdrawn, playerTournament.isWithdrawn) &&
        Objects.equals(this.madeCut, playerTournament.madeCut) &&
        Objects.equals(this.madeCutDidNotFinish, playerTournament.madeCutDidNotFinish) &&
        Objects.equals(this.name, playerTournament.name) &&
        Objects.equals(this.oddsToWin, playerTournament.oddsToWin) &&
        Objects.equals(this.oddsToWinDescription, playerTournament.oddsToWinDescription) &&
        Objects.equals(this.pars, playerTournament.pars) &&
        Objects.equals(this.playerID, playerTournament.playerID) &&
        Objects.equals(this.playerTournamentID, playerTournament.playerTournamentID) &&
        Objects.equals(this.rank, playerTournament.rank) &&
        Objects.equals(this.rounds, playerTournament.rounds) &&
        Objects.equals(this.roundsUnderSeventy, playerTournament.roundsUnderSeventy) &&
        Objects.equals(this.roundsWithFiveOrMoreBirdiesOrBetter, playerTournament.roundsWithFiveOrMoreBirdiesOrBetter) &&
        Objects.equals(this.streaksOfFiveBirdiesOrBetter, playerTournament.streaksOfFiveBirdiesOrBetter) &&
        Objects.equals(this.streaksOfFourBirdiesOrBetter, playerTournament.streaksOfFourBirdiesOrBetter) &&
        Objects.equals(this.streaksOfSixBirdiesOrBetter, playerTournament.streaksOfSixBirdiesOrBetter) &&
        Objects.equals(this.streaksOfThreeBirdiesOrBetter, playerTournament.streaksOfThreeBirdiesOrBetter) &&
        Objects.equals(this.teeTime, playerTournament.teeTime) &&
        Objects.equals(this.totalScore, playerTournament.totalScore) &&
        Objects.equals(this.totalStrokes, playerTournament.totalStrokes) &&
        Objects.equals(this.totalThrough, playerTournament.totalThrough) &&
        Objects.equals(this.tournamentID, playerTournament.tournamentID) &&
        Objects.equals(this.tournamentStatus, playerTournament.tournamentStatus) &&
        Objects.equals(this.tripleBogeys, playerTournament.tripleBogeys) &&
        Objects.equals(this.win, playerTournament.win) &&
        Objects.equals(this.worseThanDoubleBogey, playerTournament.worseThanDoubleBogey) &&
        Objects.equals(this.worseThanTripleBogey, playerTournament.worseThanTripleBogey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(birdies, bogeyFreeRounds, bogeys, bounceBackCount, consecutiveBirdieOrBetterCount, country, doubleBogeys, doubleEagles, draftKingsSalary, eagles, earnings, fanDuelSalary, fantasyDraftSalary, fantasyPoints, fantasyPointsDraftKings, fantasyPointsFanDuel, fantasyPointsFantasyDraft, fantasyPointsYahoo, fedExPoints, holeInOnes, isAlternate, isWithdrawn, madeCut, madeCutDidNotFinish, name, oddsToWin, oddsToWinDescription, pars, playerID, playerTournamentID, rank, rounds, roundsUnderSeventy, roundsWithFiveOrMoreBirdiesOrBetter, streaksOfFiveBirdiesOrBetter, streaksOfFourBirdiesOrBetter, streaksOfSixBirdiesOrBetter, streaksOfThreeBirdiesOrBetter, teeTime, totalScore, totalStrokes, totalThrough, tournamentID, tournamentStatus, tripleBogeys, win, worseThanDoubleBogey, worseThanTripleBogey);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerTournament {\n");
    sb.append("    birdies: ").append(toIndentedString(birdies)).append("\n");
    sb.append("    bogeyFreeRounds: ").append(toIndentedString(bogeyFreeRounds)).append("\n");
    sb.append("    bogeys: ").append(toIndentedString(bogeys)).append("\n");
    sb.append("    bounceBackCount: ").append(toIndentedString(bounceBackCount)).append("\n");
    sb.append("    consecutiveBirdieOrBetterCount: ").append(toIndentedString(consecutiveBirdieOrBetterCount)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    doubleBogeys: ").append(toIndentedString(doubleBogeys)).append("\n");
    sb.append("    doubleEagles: ").append(toIndentedString(doubleEagles)).append("\n");
    sb.append("    draftKingsSalary: ").append(toIndentedString(draftKingsSalary)).append("\n");
    sb.append("    eagles: ").append(toIndentedString(eagles)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    fanDuelSalary: ").append(toIndentedString(fanDuelSalary)).append("\n");
    sb.append("    fantasyDraftSalary: ").append(toIndentedString(fantasyDraftSalary)).append("\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    fantasyPointsDraftKings: ").append(toIndentedString(fantasyPointsDraftKings)).append("\n");
    sb.append("    fantasyPointsFanDuel: ").append(toIndentedString(fantasyPointsFanDuel)).append("\n");
    sb.append("    fantasyPointsFantasyDraft: ").append(toIndentedString(fantasyPointsFantasyDraft)).append("\n");
    sb.append("    fantasyPointsYahoo: ").append(toIndentedString(fantasyPointsYahoo)).append("\n");
    sb.append("    fedExPoints: ").append(toIndentedString(fedExPoints)).append("\n");
    sb.append("    holeInOnes: ").append(toIndentedString(holeInOnes)).append("\n");
    sb.append("    isAlternate: ").append(toIndentedString(isAlternate)).append("\n");
    sb.append("    isWithdrawn: ").append(toIndentedString(isWithdrawn)).append("\n");
    sb.append("    madeCut: ").append(toIndentedString(madeCut)).append("\n");
    sb.append("    madeCutDidNotFinish: ").append(toIndentedString(madeCutDidNotFinish)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oddsToWin: ").append(toIndentedString(oddsToWin)).append("\n");
    sb.append("    oddsToWinDescription: ").append(toIndentedString(oddsToWinDescription)).append("\n");
    sb.append("    pars: ").append(toIndentedString(pars)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    playerTournamentID: ").append(toIndentedString(playerTournamentID)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    rounds: ").append(toIndentedString(rounds)).append("\n");
    sb.append("    roundsUnderSeventy: ").append(toIndentedString(roundsUnderSeventy)).append("\n");
    sb.append("    roundsWithFiveOrMoreBirdiesOrBetter: ").append(toIndentedString(roundsWithFiveOrMoreBirdiesOrBetter)).append("\n");
    sb.append("    streaksOfFiveBirdiesOrBetter: ").append(toIndentedString(streaksOfFiveBirdiesOrBetter)).append("\n");
    sb.append("    streaksOfFourBirdiesOrBetter: ").append(toIndentedString(streaksOfFourBirdiesOrBetter)).append("\n");
    sb.append("    streaksOfSixBirdiesOrBetter: ").append(toIndentedString(streaksOfSixBirdiesOrBetter)).append("\n");
    sb.append("    streaksOfThreeBirdiesOrBetter: ").append(toIndentedString(streaksOfThreeBirdiesOrBetter)).append("\n");
    sb.append("    teeTime: ").append(toIndentedString(teeTime)).append("\n");
    sb.append("    totalScore: ").append(toIndentedString(totalScore)).append("\n");
    sb.append("    totalStrokes: ").append(toIndentedString(totalStrokes)).append("\n");
    sb.append("    totalThrough: ").append(toIndentedString(totalThrough)).append("\n");
    sb.append("    tournamentID: ").append(toIndentedString(tournamentID)).append("\n");
    sb.append("    tournamentStatus: ").append(toIndentedString(tournamentStatus)).append("\n");
    sb.append("    tripleBogeys: ").append(toIndentedString(tripleBogeys)).append("\n");
    sb.append("    win: ").append(toIndentedString(win)).append("\n");
    sb.append("    worseThanDoubleBogey: ").append(toIndentedString(worseThanDoubleBogey)).append("\n");
    sb.append("    worseThanTripleBogey: ").append(toIndentedString(worseThanTripleBogey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Birdies");
    openapiFields.add("BogeyFreeRounds");
    openapiFields.add("Bogeys");
    openapiFields.add("BounceBackCount");
    openapiFields.add("ConsecutiveBirdieOrBetterCount");
    openapiFields.add("Country");
    openapiFields.add("DoubleBogeys");
    openapiFields.add("DoubleEagles");
    openapiFields.add("DraftKingsSalary");
    openapiFields.add("Eagles");
    openapiFields.add("Earnings");
    openapiFields.add("FanDuelSalary");
    openapiFields.add("FantasyDraftSalary");
    openapiFields.add("FantasyPoints");
    openapiFields.add("FantasyPointsDraftKings");
    openapiFields.add("FantasyPointsFanDuel");
    openapiFields.add("FantasyPointsFantasyDraft");
    openapiFields.add("FantasyPointsYahoo");
    openapiFields.add("FedExPoints");
    openapiFields.add("HoleInOnes");
    openapiFields.add("IsAlternate");
    openapiFields.add("IsWithdrawn");
    openapiFields.add("MadeCut");
    openapiFields.add("MadeCutDidNotFinish");
    openapiFields.add("Name");
    openapiFields.add("OddsToWin");
    openapiFields.add("OddsToWinDescription");
    openapiFields.add("Pars");
    openapiFields.add("PlayerID");
    openapiFields.add("PlayerTournamentID");
    openapiFields.add("Rank");
    openapiFields.add("Rounds");
    openapiFields.add("RoundsUnderSeventy");
    openapiFields.add("RoundsWithFiveOrMoreBirdiesOrBetter");
    openapiFields.add("StreaksOfFiveBirdiesOrBetter");
    openapiFields.add("StreaksOfFourBirdiesOrBetter");
    openapiFields.add("StreaksOfSixBirdiesOrBetter");
    openapiFields.add("StreaksOfThreeBirdiesOrBetter");
    openapiFields.add("TeeTime");
    openapiFields.add("TotalScore");
    openapiFields.add("TotalStrokes");
    openapiFields.add("TotalThrough");
    openapiFields.add("TournamentID");
    openapiFields.add("TournamentStatus");
    openapiFields.add("TripleBogeys");
    openapiFields.add("Win");
    openapiFields.add("WorseThanDoubleBogey");
    openapiFields.add("WorseThanTripleBogey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerTournament
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerTournament.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerTournament is not found in the empty JSON string", PlayerTournament.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerTournament.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerTournament` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OddsToWinDescription") != null && !jsonObj.get("OddsToWinDescription").isJsonNull()) && !jsonObj.get("OddsToWinDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OddsToWinDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OddsToWinDescription").toString()));
      }
      if (jsonObj.get("Rounds") != null && !jsonObj.get("Rounds").isJsonNull()) {
        JsonArray jsonArrayrounds = jsonObj.getAsJsonArray("Rounds");
        if (jsonArrayrounds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Rounds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Rounds` to be an array in the JSON string but got `%s`", jsonObj.get("Rounds").toString()));
          }

          // validate the optional field `Rounds` (array)
          for (int i = 0; i < jsonArrayrounds.size(); i++) {
            PlayerRound.validateJsonElement(jsonArrayrounds.get(i));
          };
        }
      }
      if ((jsonObj.get("TeeTime") != null && !jsonObj.get("TeeTime").isJsonNull()) && !jsonObj.get("TeeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TeeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TeeTime").toString()));
      }
      if ((jsonObj.get("TournamentStatus") != null && !jsonObj.get("TournamentStatus").isJsonNull()) && !jsonObj.get("TournamentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TournamentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TournamentStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerTournament.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerTournament' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerTournament> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerTournament.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerTournament>() {
           @Override
           public void write(JsonWriter out, PlayerTournament value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerTournament read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerTournament given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerTournament
   * @throws IOException if the JSON string is invalid with respect to PlayerTournament
   */
  public static PlayerTournament fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerTournament.class);
  }

  /**
   * Convert an instance of PlayerTournament to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

