/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_BIRTH_CITY = "BirthCity";
  @SerializedName(SERIALIZED_NAME_BIRTH_CITY)
  private String birthCity;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "BirthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_BIRTH_STATE = "BirthState";
  @SerializedName(SERIALIZED_NAME_BIRTH_STATE)
  private String birthState;

  public static final String SERIALIZED_NAME_COLLEGE = "College";
  @SerializedName(SERIALIZED_NAME_COLLEGE)
  private String college;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_NAME = "DraftKingsName";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_NAME)
  private String draftKingsName;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D = "DraftKingsPlayerID";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D)
  private Integer draftKingsPlayerID;

  public static final String SERIALIZED_NAME_FAN_DUEL_NAME = "FanDuelName";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_NAME)
  private String fanDuelName;

  public static final String SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D = "FanDuelPlayerID";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D)
  private Integer fanDuelPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D = "FantasyAlarmPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D)
  private Integer fantasyAlarmPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_NAME = "FantasyDraftName";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_NAME)
  private String fantasyDraftName;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D = "FantasyDraftPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D)
  private Integer fantasyDraftPlayerID;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PGA_DEBUT = "PgaDebut";
  @SerializedName(SERIALIZED_NAME_PGA_DEBUT)
  private Integer pgaDebut;

  public static final String SERIALIZED_NAME_PGA_TOUR_PLAYER_I_D = "PgaTourPlayerID";
  @SerializedName(SERIALIZED_NAME_PGA_TOUR_PLAYER_I_D)
  private Integer pgaTourPlayerID;

  public static final String SERIALIZED_NAME_PHOTO_URL = "PhotoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D = "RotoWirePlayerID";
  @SerializedName(SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D)
  private Integer rotoWirePlayerID;

  public static final String SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D = "RotoworldPlayerID";
  @SerializedName(SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D)
  private Integer rotoworldPlayerID;

  public static final String SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D = "SportRadarPlayerID";
  @SerializedName(SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D)
  private String sportRadarPlayerID;

  public static final String SERIALIZED_NAME_SWINGS = "Swings";
  @SerializedName(SERIALIZED_NAME_SWINGS)
  private String swings;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_YAHOO_PLAYER_I_D = "YahooPlayerID";
  @SerializedName(SERIALIZED_NAME_YAHOO_PLAYER_I_D)
  private Integer yahooPlayerID;

  public Player() {
  }

  public Player birthCity(String birthCity) {
    this.birthCity = birthCity;
    return this;
  }

  /**
   * Get birthCity
   * @return birthCity
   */
  @javax.annotation.Nullable
  public String getBirthCity() {
    return birthCity;
  }

  public void setBirthCity(String birthCity) {
    this.birthCity = birthCity;
  }


  public Player birthDate(String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  public Player birthState(String birthState) {
    this.birthState = birthState;
    return this;
  }

  /**
   * Get birthState
   * @return birthState
   */
  @javax.annotation.Nullable
  public String getBirthState() {
    return birthState;
  }

  public void setBirthState(String birthState) {
    this.birthState = birthState;
  }


  public Player college(String college) {
    this.college = college;
    return this;
  }

  /**
   * Get college
   * @return college
   */
  @javax.annotation.Nullable
  public String getCollege() {
    return college;
  }

  public void setCollege(String college) {
    this.college = college;
  }


  public Player country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Player draftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
    return this;
  }

  /**
   * Get draftKingsName
   * @return draftKingsName
   */
  @javax.annotation.Nullable
  public String getDraftKingsName() {
    return draftKingsName;
  }

  public void setDraftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
  }


  public Player draftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
    return this;
  }

  /**
   * Get draftKingsPlayerID
   * @return draftKingsPlayerID
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsPlayerID() {
    return draftKingsPlayerID;
  }

  public void setDraftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
  }


  public Player fanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
    return this;
  }

  /**
   * Get fanDuelName
   * @return fanDuelName
   */
  @javax.annotation.Nullable
  public String getFanDuelName() {
    return fanDuelName;
  }

  public void setFanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
  }


  public Player fanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
    return this;
  }

  /**
   * Get fanDuelPlayerID
   * @return fanDuelPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFanDuelPlayerID() {
    return fanDuelPlayerID;
  }

  public void setFanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
  }


  public Player fantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
    return this;
  }

  /**
   * Get fantasyAlarmPlayerID
   * @return fantasyAlarmPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyAlarmPlayerID() {
    return fantasyAlarmPlayerID;
  }

  public void setFantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
  }


  public Player fantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
    return this;
  }

  /**
   * Get fantasyDraftName
   * @return fantasyDraftName
   */
  @javax.annotation.Nullable
  public String getFantasyDraftName() {
    return fantasyDraftName;
  }

  public void setFantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
  }


  public Player fantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
    return this;
  }

  /**
   * Get fantasyDraftPlayerID
   * @return fantasyDraftPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyDraftPlayerID() {
    return fantasyDraftPlayerID;
  }

  public void setFantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
  }


  public Player firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Player lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Player pgaDebut(Integer pgaDebut) {
    this.pgaDebut = pgaDebut;
    return this;
  }

  /**
   * Get pgaDebut
   * @return pgaDebut
   */
  @javax.annotation.Nullable
  public Integer getPgaDebut() {
    return pgaDebut;
  }

  public void setPgaDebut(Integer pgaDebut) {
    this.pgaDebut = pgaDebut;
  }


  public Player pgaTourPlayerID(Integer pgaTourPlayerID) {
    this.pgaTourPlayerID = pgaTourPlayerID;
    return this;
  }

  /**
   * Get pgaTourPlayerID
   * @return pgaTourPlayerID
   */
  @javax.annotation.Nullable
  public Integer getPgaTourPlayerID() {
    return pgaTourPlayerID;
  }

  public void setPgaTourPlayerID(Integer pgaTourPlayerID) {
    this.pgaTourPlayerID = pgaTourPlayerID;
  }


  public Player photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public Player playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Player rotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
    return this;
  }

  /**
   * Get rotoWirePlayerID
   * @return rotoWirePlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoWirePlayerID() {
    return rotoWirePlayerID;
  }

  public void setRotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
  }


  public Player rotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
    return this;
  }

  /**
   * Get rotoworldPlayerID
   * @return rotoworldPlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoworldPlayerID() {
    return rotoworldPlayerID;
  }

  public void setRotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
  }


  public Player sportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
    return this;
  }

  /**
   * Get sportRadarPlayerID
   * @return sportRadarPlayerID
   */
  @javax.annotation.Nullable
  public String getSportRadarPlayerID() {
    return sportRadarPlayerID;
  }

  public void setSportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
  }


  public Player swings(String swings) {
    this.swings = swings;
    return this;
  }

  /**
   * Get swings
   * @return swings
   */
  @javax.annotation.Nullable
  public String getSwings() {
    return swings;
  }

  public void setSwings(String swings) {
    this.swings = swings;
  }


  public Player weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Player yahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
    return this;
  }

  /**
   * Get yahooPlayerID
   * @return yahooPlayerID
   */
  @javax.annotation.Nullable
  public Integer getYahooPlayerID() {
    return yahooPlayerID;
  }

  public void setYahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.birthCity, player.birthCity) &&
        Objects.equals(this.birthDate, player.birthDate) &&
        Objects.equals(this.birthState, player.birthState) &&
        Objects.equals(this.college, player.college) &&
        Objects.equals(this.country, player.country) &&
        Objects.equals(this.draftKingsName, player.draftKingsName) &&
        Objects.equals(this.draftKingsPlayerID, player.draftKingsPlayerID) &&
        Objects.equals(this.fanDuelName, player.fanDuelName) &&
        Objects.equals(this.fanDuelPlayerID, player.fanDuelPlayerID) &&
        Objects.equals(this.fantasyAlarmPlayerID, player.fantasyAlarmPlayerID) &&
        Objects.equals(this.fantasyDraftName, player.fantasyDraftName) &&
        Objects.equals(this.fantasyDraftPlayerID, player.fantasyDraftPlayerID) &&
        Objects.equals(this.firstName, player.firstName) &&
        Objects.equals(this.lastName, player.lastName) &&
        Objects.equals(this.pgaDebut, player.pgaDebut) &&
        Objects.equals(this.pgaTourPlayerID, player.pgaTourPlayerID) &&
        Objects.equals(this.photoUrl, player.photoUrl) &&
        Objects.equals(this.playerID, player.playerID) &&
        Objects.equals(this.rotoWirePlayerID, player.rotoWirePlayerID) &&
        Objects.equals(this.rotoworldPlayerID, player.rotoworldPlayerID) &&
        Objects.equals(this.sportRadarPlayerID, player.sportRadarPlayerID) &&
        Objects.equals(this.swings, player.swings) &&
        Objects.equals(this.weight, player.weight) &&
        Objects.equals(this.yahooPlayerID, player.yahooPlayerID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthCity, birthDate, birthState, college, country, draftKingsName, draftKingsPlayerID, fanDuelName, fanDuelPlayerID, fantasyAlarmPlayerID, fantasyDraftName, fantasyDraftPlayerID, firstName, lastName, pgaDebut, pgaTourPlayerID, photoUrl, playerID, rotoWirePlayerID, rotoworldPlayerID, sportRadarPlayerID, swings, weight, yahooPlayerID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    birthCity: ").append(toIndentedString(birthCity)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    birthState: ").append(toIndentedString(birthState)).append("\n");
    sb.append("    college: ").append(toIndentedString(college)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    draftKingsName: ").append(toIndentedString(draftKingsName)).append("\n");
    sb.append("    draftKingsPlayerID: ").append(toIndentedString(draftKingsPlayerID)).append("\n");
    sb.append("    fanDuelName: ").append(toIndentedString(fanDuelName)).append("\n");
    sb.append("    fanDuelPlayerID: ").append(toIndentedString(fanDuelPlayerID)).append("\n");
    sb.append("    fantasyAlarmPlayerID: ").append(toIndentedString(fantasyAlarmPlayerID)).append("\n");
    sb.append("    fantasyDraftName: ").append(toIndentedString(fantasyDraftName)).append("\n");
    sb.append("    fantasyDraftPlayerID: ").append(toIndentedString(fantasyDraftPlayerID)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    pgaDebut: ").append(toIndentedString(pgaDebut)).append("\n");
    sb.append("    pgaTourPlayerID: ").append(toIndentedString(pgaTourPlayerID)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    rotoWirePlayerID: ").append(toIndentedString(rotoWirePlayerID)).append("\n");
    sb.append("    rotoworldPlayerID: ").append(toIndentedString(rotoworldPlayerID)).append("\n");
    sb.append("    sportRadarPlayerID: ").append(toIndentedString(sportRadarPlayerID)).append("\n");
    sb.append("    swings: ").append(toIndentedString(swings)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    yahooPlayerID: ").append(toIndentedString(yahooPlayerID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BirthCity");
    openapiFields.add("BirthDate");
    openapiFields.add("BirthState");
    openapiFields.add("College");
    openapiFields.add("Country");
    openapiFields.add("DraftKingsName");
    openapiFields.add("DraftKingsPlayerID");
    openapiFields.add("FanDuelName");
    openapiFields.add("FanDuelPlayerID");
    openapiFields.add("FantasyAlarmPlayerID");
    openapiFields.add("FantasyDraftName");
    openapiFields.add("FantasyDraftPlayerID");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("PgaDebut");
    openapiFields.add("PgaTourPlayerID");
    openapiFields.add("PhotoUrl");
    openapiFields.add("PlayerID");
    openapiFields.add("RotoWirePlayerID");
    openapiFields.add("RotoworldPlayerID");
    openapiFields.add("SportRadarPlayerID");
    openapiFields.add("Swings");
    openapiFields.add("Weight");
    openapiFields.add("YahooPlayerID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BirthCity") != null && !jsonObj.get("BirthCity").isJsonNull()) && !jsonObj.get("BirthCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthCity").toString()));
      }
      if ((jsonObj.get("BirthDate") != null && !jsonObj.get("BirthDate").isJsonNull()) && !jsonObj.get("BirthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthDate").toString()));
      }
      if ((jsonObj.get("BirthState") != null && !jsonObj.get("BirthState").isJsonNull()) && !jsonObj.get("BirthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthState").toString()));
      }
      if ((jsonObj.get("College") != null && !jsonObj.get("College").isJsonNull()) && !jsonObj.get("College").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `College` to be a primitive type in the JSON string but got `%s`", jsonObj.get("College").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("DraftKingsName") != null && !jsonObj.get("DraftKingsName").isJsonNull()) && !jsonObj.get("DraftKingsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DraftKingsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DraftKingsName").toString()));
      }
      if ((jsonObj.get("FanDuelName") != null && !jsonObj.get("FanDuelName").isJsonNull()) && !jsonObj.get("FanDuelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FanDuelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FanDuelName").toString()));
      }
      if ((jsonObj.get("FantasyDraftName") != null && !jsonObj.get("FantasyDraftName").isJsonNull()) && !jsonObj.get("FantasyDraftName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyDraftName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyDraftName").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("PhotoUrl") != null && !jsonObj.get("PhotoUrl").isJsonNull()) && !jsonObj.get("PhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoUrl").toString()));
      }
      if ((jsonObj.get("SportRadarPlayerID") != null && !jsonObj.get("SportRadarPlayerID").isJsonNull()) && !jsonObj.get("SportRadarPlayerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportRadarPlayerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportRadarPlayerID").toString()));
      }
      if ((jsonObj.get("Swings") != null && !jsonObj.get("Swings").isJsonNull()) && !jsonObj.get("Swings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Swings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Swings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

