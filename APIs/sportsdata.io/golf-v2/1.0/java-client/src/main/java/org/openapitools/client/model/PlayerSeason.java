/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerSeason
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerSeason {
  public static final String SERIALIZED_NAME_AVERAGE_POINTS = "AveragePoints";
  @SerializedName(SERIALIZED_NAME_AVERAGE_POINTS)
  private BigDecimal averagePoints;

  public static final String SERIALIZED_NAME_EVENTS = "Events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private Integer events;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_PLAYER_SEASON_I_D = "PlayerSeasonID";
  @SerializedName(SERIALIZED_NAME_PLAYER_SEASON_I_D)
  private Integer playerSeasonID;

  public static final String SERIALIZED_NAME_POINTS_GAINED = "PointsGained";
  @SerializedName(SERIALIZED_NAME_POINTS_GAINED)
  private BigDecimal pointsGained;

  public static final String SERIALIZED_NAME_POINTS_LOST = "PointsLost";
  @SerializedName(SERIALIZED_NAME_POINTS_LOST)
  private BigDecimal pointsLost;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_TOTAL_POINTS = "TotalPoints";
  @SerializedName(SERIALIZED_NAME_TOTAL_POINTS)
  private BigDecimal totalPoints;

  public static final String SERIALIZED_NAME_WORLD_GOLF_RANK = "WorldGolfRank";
  @SerializedName(SERIALIZED_NAME_WORLD_GOLF_RANK)
  private Integer worldGolfRank;

  public static final String SERIALIZED_NAME_WORLD_GOLF_RANK_LAST_WEEK = "WorldGolfRankLastWeek";
  @SerializedName(SERIALIZED_NAME_WORLD_GOLF_RANK_LAST_WEEK)
  private Integer worldGolfRankLastWeek;

  public PlayerSeason() {
  }

  public PlayerSeason averagePoints(BigDecimal averagePoints) {
    this.averagePoints = averagePoints;
    return this;
  }

  /**
   * Get averagePoints
   * @return averagePoints
   */
  @javax.annotation.Nullable
  public BigDecimal getAveragePoints() {
    return averagePoints;
  }

  public void setAveragePoints(BigDecimal averagePoints) {
    this.averagePoints = averagePoints;
  }


  public PlayerSeason events(Integer events) {
    this.events = events;
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public Integer getEvents() {
    return events;
  }

  public void setEvents(Integer events) {
    this.events = events;
  }


  public PlayerSeason name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerSeason playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public PlayerSeason playerSeasonID(Integer playerSeasonID) {
    this.playerSeasonID = playerSeasonID;
    return this;
  }

  /**
   * Get playerSeasonID
   * @return playerSeasonID
   */
  @javax.annotation.Nullable
  public Integer getPlayerSeasonID() {
    return playerSeasonID;
  }

  public void setPlayerSeasonID(Integer playerSeasonID) {
    this.playerSeasonID = playerSeasonID;
  }


  public PlayerSeason pointsGained(BigDecimal pointsGained) {
    this.pointsGained = pointsGained;
    return this;
  }

  /**
   * Get pointsGained
   * @return pointsGained
   */
  @javax.annotation.Nullable
  public BigDecimal getPointsGained() {
    return pointsGained;
  }

  public void setPointsGained(BigDecimal pointsGained) {
    this.pointsGained = pointsGained;
  }


  public PlayerSeason pointsLost(BigDecimal pointsLost) {
    this.pointsLost = pointsLost;
    return this;
  }

  /**
   * Get pointsLost
   * @return pointsLost
   */
  @javax.annotation.Nullable
  public BigDecimal getPointsLost() {
    return pointsLost;
  }

  public void setPointsLost(BigDecimal pointsLost) {
    this.pointsLost = pointsLost;
  }


  public PlayerSeason season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public PlayerSeason totalPoints(BigDecimal totalPoints) {
    this.totalPoints = totalPoints;
    return this;
  }

  /**
   * Get totalPoints
   * @return totalPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalPoints() {
    return totalPoints;
  }

  public void setTotalPoints(BigDecimal totalPoints) {
    this.totalPoints = totalPoints;
  }


  public PlayerSeason worldGolfRank(Integer worldGolfRank) {
    this.worldGolfRank = worldGolfRank;
    return this;
  }

  /**
   * Get worldGolfRank
   * @return worldGolfRank
   */
  @javax.annotation.Nullable
  public Integer getWorldGolfRank() {
    return worldGolfRank;
  }

  public void setWorldGolfRank(Integer worldGolfRank) {
    this.worldGolfRank = worldGolfRank;
  }


  public PlayerSeason worldGolfRankLastWeek(Integer worldGolfRankLastWeek) {
    this.worldGolfRankLastWeek = worldGolfRankLastWeek;
    return this;
  }

  /**
   * Get worldGolfRankLastWeek
   * @return worldGolfRankLastWeek
   */
  @javax.annotation.Nullable
  public Integer getWorldGolfRankLastWeek() {
    return worldGolfRankLastWeek;
  }

  public void setWorldGolfRankLastWeek(Integer worldGolfRankLastWeek) {
    this.worldGolfRankLastWeek = worldGolfRankLastWeek;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerSeason playerSeason = (PlayerSeason) o;
    return Objects.equals(this.averagePoints, playerSeason.averagePoints) &&
        Objects.equals(this.events, playerSeason.events) &&
        Objects.equals(this.name, playerSeason.name) &&
        Objects.equals(this.playerID, playerSeason.playerID) &&
        Objects.equals(this.playerSeasonID, playerSeason.playerSeasonID) &&
        Objects.equals(this.pointsGained, playerSeason.pointsGained) &&
        Objects.equals(this.pointsLost, playerSeason.pointsLost) &&
        Objects.equals(this.season, playerSeason.season) &&
        Objects.equals(this.totalPoints, playerSeason.totalPoints) &&
        Objects.equals(this.worldGolfRank, playerSeason.worldGolfRank) &&
        Objects.equals(this.worldGolfRankLastWeek, playerSeason.worldGolfRankLastWeek);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(averagePoints, events, name, playerID, playerSeasonID, pointsGained, pointsLost, season, totalPoints, worldGolfRank, worldGolfRankLastWeek);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerSeason {\n");
    sb.append("    averagePoints: ").append(toIndentedString(averagePoints)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    playerSeasonID: ").append(toIndentedString(playerSeasonID)).append("\n");
    sb.append("    pointsGained: ").append(toIndentedString(pointsGained)).append("\n");
    sb.append("    pointsLost: ").append(toIndentedString(pointsLost)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    totalPoints: ").append(toIndentedString(totalPoints)).append("\n");
    sb.append("    worldGolfRank: ").append(toIndentedString(worldGolfRank)).append("\n");
    sb.append("    worldGolfRankLastWeek: ").append(toIndentedString(worldGolfRankLastWeek)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AveragePoints");
    openapiFields.add("Events");
    openapiFields.add("Name");
    openapiFields.add("PlayerID");
    openapiFields.add("PlayerSeasonID");
    openapiFields.add("PointsGained");
    openapiFields.add("PointsLost");
    openapiFields.add("Season");
    openapiFields.add("TotalPoints");
    openapiFields.add("WorldGolfRank");
    openapiFields.add("WorldGolfRankLastWeek");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerSeason
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerSeason.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerSeason is not found in the empty JSON string", PlayerSeason.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerSeason.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerSeason` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerSeason.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerSeason' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerSeason> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerSeason.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerSeason>() {
           @Override
           public void write(JsonWriter out, PlayerSeason value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerSeason read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerSeason given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerSeason
   * @throws IOException if the JSON string is invalid with respect to PlayerSeason
   */
  public static PlayerSeason fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerSeason.class);
  }

  /**
   * Convert an instance of PlayerSeason to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

