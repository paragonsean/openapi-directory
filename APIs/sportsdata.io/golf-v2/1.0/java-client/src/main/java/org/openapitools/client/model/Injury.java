/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Injury
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Injury {
  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_BODY_PART = "BodyPart";
  @SerializedName(SERIALIZED_NAME_BODY_PART)
  private String bodyPart;

  public static final String SERIALIZED_NAME_EXPECTED_RETURN = "ExpectedReturn";
  @SerializedName(SERIALIZED_NAME_EXPECTED_RETURN)
  private String expectedReturn;

  public static final String SERIALIZED_NAME_INJURY_I_D = "InjuryID";
  @SerializedName(SERIALIZED_NAME_INJURY_I_D)
  private Integer injuryID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Injury() {
  }

  public Injury active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Injury bodyPart(String bodyPart) {
    this.bodyPart = bodyPart;
    return this;
  }

  /**
   * Get bodyPart
   * @return bodyPart
   */
  @javax.annotation.Nullable
  public String getBodyPart() {
    return bodyPart;
  }

  public void setBodyPart(String bodyPart) {
    this.bodyPart = bodyPart;
  }


  public Injury expectedReturn(String expectedReturn) {
    this.expectedReturn = expectedReturn;
    return this;
  }

  /**
   * Get expectedReturn
   * @return expectedReturn
   */
  @javax.annotation.Nullable
  public String getExpectedReturn() {
    return expectedReturn;
  }

  public void setExpectedReturn(String expectedReturn) {
    this.expectedReturn = expectedReturn;
  }


  public Injury injuryID(Integer injuryID) {
    this.injuryID = injuryID;
    return this;
  }

  /**
   * Get injuryID
   * @return injuryID
   */
  @javax.annotation.Nullable
  public Integer getInjuryID() {
    return injuryID;
  }

  public void setInjuryID(Integer injuryID) {
    this.injuryID = injuryID;
  }


  public Injury name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Injury playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Injury startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Injury status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Injury injury = (Injury) o;
    return Objects.equals(this.active, injury.active) &&
        Objects.equals(this.bodyPart, injury.bodyPart) &&
        Objects.equals(this.expectedReturn, injury.expectedReturn) &&
        Objects.equals(this.injuryID, injury.injuryID) &&
        Objects.equals(this.name, injury.name) &&
        Objects.equals(this.playerID, injury.playerID) &&
        Objects.equals(this.startDate, injury.startDate) &&
        Objects.equals(this.status, injury.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, bodyPart, expectedReturn, injuryID, name, playerID, startDate, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Injury {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    bodyPart: ").append(toIndentedString(bodyPart)).append("\n");
    sb.append("    expectedReturn: ").append(toIndentedString(expectedReturn)).append("\n");
    sb.append("    injuryID: ").append(toIndentedString(injuryID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Active");
    openapiFields.add("BodyPart");
    openapiFields.add("ExpectedReturn");
    openapiFields.add("InjuryID");
    openapiFields.add("Name");
    openapiFields.add("PlayerID");
    openapiFields.add("StartDate");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Injury
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Injury.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Injury is not found in the empty JSON string", Injury.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Injury.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Injury` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BodyPart") != null && !jsonObj.get("BodyPart").isJsonNull()) && !jsonObj.get("BodyPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BodyPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BodyPart").toString()));
      }
      if ((jsonObj.get("ExpectedReturn") != null && !jsonObj.get("ExpectedReturn").isJsonNull()) && !jsonObj.get("ExpectedReturn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpectedReturn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpectedReturn").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("StartDate") != null && !jsonObj.get("StartDate").isJsonNull()) && !jsonObj.get("StartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartDate").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Injury.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Injury' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Injury> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Injury.class));

       return (TypeAdapter<T>) new TypeAdapter<Injury>() {
           @Override
           public void write(JsonWriter out, Injury value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Injury read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Injury given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Injury
   * @throws IOException if the JSON string is invalid with respect to Injury
   */
  public static Injury fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Injury.class);
  }

  /**
   * Convert an instance of Injury to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

