/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Tournament;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DfsSlateTournament
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DfsSlateTournament {
  public static final String SERIALIZED_NAME_OPERATOR_TOURNAMENT_I_D = "OperatorTournamentID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_TOURNAMENT_I_D)
  private Integer operatorTournamentID;

  public static final String SERIALIZED_NAME_REMOVED_BY_OPERATOR = "RemovedByOperator";
  @SerializedName(SERIALIZED_NAME_REMOVED_BY_OPERATOR)
  private Boolean removedByOperator;

  public static final String SERIALIZED_NAME_SLATE_I_D = "SlateID";
  @SerializedName(SERIALIZED_NAME_SLATE_I_D)
  private Integer slateID;

  public static final String SERIALIZED_NAME_SLATE_TOURNAMENT_I_D = "SlateTournamentID";
  @SerializedName(SERIALIZED_NAME_SLATE_TOURNAMENT_I_D)
  private Integer slateTournamentID;

  public static final String SERIALIZED_NAME_TOURNAMENT = "Tournament";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT)
  private Tournament tournament;

  public static final String SERIALIZED_NAME_TOURNAMENT_I_D = "TournamentID";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT_I_D)
  private Integer tournamentID;

  public DfsSlateTournament() {
  }

  public DfsSlateTournament operatorTournamentID(Integer operatorTournamentID) {
    this.operatorTournamentID = operatorTournamentID;
    return this;
  }

  /**
   * Get operatorTournamentID
   * @return operatorTournamentID
   */
  @javax.annotation.Nullable
  public Integer getOperatorTournamentID() {
    return operatorTournamentID;
  }

  public void setOperatorTournamentID(Integer operatorTournamentID) {
    this.operatorTournamentID = operatorTournamentID;
  }


  public DfsSlateTournament removedByOperator(Boolean removedByOperator) {
    this.removedByOperator = removedByOperator;
    return this;
  }

  /**
   * Get removedByOperator
   * @return removedByOperator
   */
  @javax.annotation.Nullable
  public Boolean getRemovedByOperator() {
    return removedByOperator;
  }

  public void setRemovedByOperator(Boolean removedByOperator) {
    this.removedByOperator = removedByOperator;
  }


  public DfsSlateTournament slateID(Integer slateID) {
    this.slateID = slateID;
    return this;
  }

  /**
   * Get slateID
   * @return slateID
   */
  @javax.annotation.Nullable
  public Integer getSlateID() {
    return slateID;
  }

  public void setSlateID(Integer slateID) {
    this.slateID = slateID;
  }


  public DfsSlateTournament slateTournamentID(Integer slateTournamentID) {
    this.slateTournamentID = slateTournamentID;
    return this;
  }

  /**
   * Get slateTournamentID
   * @return slateTournamentID
   */
  @javax.annotation.Nullable
  public Integer getSlateTournamentID() {
    return slateTournamentID;
  }

  public void setSlateTournamentID(Integer slateTournamentID) {
    this.slateTournamentID = slateTournamentID;
  }


  public DfsSlateTournament tournament(Tournament tournament) {
    this.tournament = tournament;
    return this;
  }

  /**
   * Get tournament
   * @return tournament
   */
  @javax.annotation.Nullable
  public Tournament getTournament() {
    return tournament;
  }

  public void setTournament(Tournament tournament) {
    this.tournament = tournament;
  }


  public DfsSlateTournament tournamentID(Integer tournamentID) {
    this.tournamentID = tournamentID;
    return this;
  }

  /**
   * Get tournamentID
   * @return tournamentID
   */
  @javax.annotation.Nullable
  public Integer getTournamentID() {
    return tournamentID;
  }

  public void setTournamentID(Integer tournamentID) {
    this.tournamentID = tournamentID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsSlateTournament dfsSlateTournament = (DfsSlateTournament) o;
    return Objects.equals(this.operatorTournamentID, dfsSlateTournament.operatorTournamentID) &&
        Objects.equals(this.removedByOperator, dfsSlateTournament.removedByOperator) &&
        Objects.equals(this.slateID, dfsSlateTournament.slateID) &&
        Objects.equals(this.slateTournamentID, dfsSlateTournament.slateTournamentID) &&
        Objects.equals(this.tournament, dfsSlateTournament.tournament) &&
        Objects.equals(this.tournamentID, dfsSlateTournament.tournamentID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatorTournamentID, removedByOperator, slateID, slateTournamentID, tournament, tournamentID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsSlateTournament {\n");
    sb.append("    operatorTournamentID: ").append(toIndentedString(operatorTournamentID)).append("\n");
    sb.append("    removedByOperator: ").append(toIndentedString(removedByOperator)).append("\n");
    sb.append("    slateID: ").append(toIndentedString(slateID)).append("\n");
    sb.append("    slateTournamentID: ").append(toIndentedString(slateTournamentID)).append("\n");
    sb.append("    tournament: ").append(toIndentedString(tournament)).append("\n");
    sb.append("    tournamentID: ").append(toIndentedString(tournamentID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OperatorTournamentID");
    openapiFields.add("RemovedByOperator");
    openapiFields.add("SlateID");
    openapiFields.add("SlateTournamentID");
    openapiFields.add("Tournament");
    openapiFields.add("TournamentID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DfsSlateTournament
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DfsSlateTournament.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DfsSlateTournament is not found in the empty JSON string", DfsSlateTournament.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DfsSlateTournament.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DfsSlateTournament` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Tournament`
      if (jsonObj.get("Tournament") != null && !jsonObj.get("Tournament").isJsonNull()) {
        Tournament.validateJsonElement(jsonObj.get("Tournament"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DfsSlateTournament.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DfsSlateTournament' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DfsSlateTournament> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DfsSlateTournament.class));

       return (TypeAdapter<T>) new TypeAdapter<DfsSlateTournament>() {
           @Override
           public void write(JsonWriter out, DfsSlateTournament value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DfsSlateTournament read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DfsSlateTournament given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DfsSlateTournament
   * @throws IOException if the JSON string is invalid with respect to DfsSlateTournament
   */
  public static DfsSlateTournament fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DfsSlateTournament.class);
  }

  /**
   * Convert an instance of DfsSlateTournament to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

