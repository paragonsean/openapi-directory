/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlayerTournament;
import org.openapitools.client.model.Tournament;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Leaderboard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Leaderboard {
  public static final String SERIALIZED_NAME_PLAYERS = "Players";
  @SerializedName(SERIALIZED_NAME_PLAYERS)
  private List<PlayerTournament> players = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOURNAMENT = "Tournament";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT)
  private Tournament tournament;

  public Leaderboard() {
  }

  public Leaderboard players(List<PlayerTournament> players) {
    this.players = players;
    return this;
  }

  public Leaderboard addPlayersItem(PlayerTournament playersItem) {
    if (this.players == null) {
      this.players = new ArrayList<>();
    }
    this.players.add(playersItem);
    return this;
  }

  /**
   * Get players
   * @return players
   */
  @javax.annotation.Nullable
  public List<PlayerTournament> getPlayers() {
    return players;
  }

  public void setPlayers(List<PlayerTournament> players) {
    this.players = players;
  }


  public Leaderboard tournament(Tournament tournament) {
    this.tournament = tournament;
    return this;
  }

  /**
   * Get tournament
   * @return tournament
   */
  @javax.annotation.Nullable
  public Tournament getTournament() {
    return tournament;
  }

  public void setTournament(Tournament tournament) {
    this.tournament = tournament;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Leaderboard leaderboard = (Leaderboard) o;
    return Objects.equals(this.players, leaderboard.players) &&
        Objects.equals(this.tournament, leaderboard.tournament);
  }

  @Override
  public int hashCode() {
    return Objects.hash(players, tournament);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Leaderboard {\n");
    sb.append("    players: ").append(toIndentedString(players)).append("\n");
    sb.append("    tournament: ").append(toIndentedString(tournament)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Players");
    openapiFields.add("Tournament");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Leaderboard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Leaderboard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Leaderboard is not found in the empty JSON string", Leaderboard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Leaderboard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Leaderboard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Players") != null && !jsonObj.get("Players").isJsonNull()) {
        JsonArray jsonArrayplayers = jsonObj.getAsJsonArray("Players");
        if (jsonArrayplayers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Players").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Players` to be an array in the JSON string but got `%s`", jsonObj.get("Players").toString()));
          }

          // validate the optional field `Players` (array)
          for (int i = 0; i < jsonArrayplayers.size(); i++) {
            PlayerTournament.validateJsonElement(jsonArrayplayers.get(i));
          };
        }
      }
      // validate the optional field `Tournament`
      if (jsonObj.get("Tournament") != null && !jsonObj.get("Tournament").isJsonNull()) {
        Tournament.validateJsonElement(jsonObj.get("Tournament"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Leaderboard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Leaderboard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Leaderboard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Leaderboard.class));

       return (TypeAdapter<T>) new TypeAdapter<Leaderboard>() {
           @Override
           public void write(JsonWriter out, Leaderboard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Leaderboard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Leaderboard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Leaderboard
   * @throws IOException if the JSON string is invalid with respect to Leaderboard
   */
  public static Leaderboard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Leaderboard.class);
  }

  /**
   * Convert an instance of Leaderboard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

