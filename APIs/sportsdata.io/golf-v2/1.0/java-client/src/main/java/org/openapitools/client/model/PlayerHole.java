/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerHole
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerHole {
  public static final String SERIALIZED_NAME_BIRDIE = "Birdie";
  @SerializedName(SERIALIZED_NAME_BIRDIE)
  private Boolean birdie;

  public static final String SERIALIZED_NAME_BOGEY = "Bogey";
  @SerializedName(SERIALIZED_NAME_BOGEY)
  private Boolean bogey;

  public static final String SERIALIZED_NAME_DOUBLE_BOGEY = "DoubleBogey";
  @SerializedName(SERIALIZED_NAME_DOUBLE_BOGEY)
  private Boolean doubleBogey;

  public static final String SERIALIZED_NAME_DOUBLE_EAGLE = "DoubleEagle";
  @SerializedName(SERIALIZED_NAME_DOUBLE_EAGLE)
  private Boolean doubleEagle;

  public static final String SERIALIZED_NAME_EAGLE = "Eagle";
  @SerializedName(SERIALIZED_NAME_EAGLE)
  private Boolean eagle;

  public static final String SERIALIZED_NAME_HOLE_IN_ONE = "HoleInOne";
  @SerializedName(SERIALIZED_NAME_HOLE_IN_ONE)
  private Boolean holeInOne;

  public static final String SERIALIZED_NAME_IS_PAR = "IsPar";
  @SerializedName(SERIALIZED_NAME_IS_PAR)
  private Boolean isPar;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PAR = "Par";
  @SerializedName(SERIALIZED_NAME_PAR)
  private Integer par;

  public static final String SERIALIZED_NAME_PLAYER_ROUND_I_D = "PlayerRoundID";
  @SerializedName(SERIALIZED_NAME_PLAYER_ROUND_I_D)
  private Integer playerRoundID;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_TO_PAR = "ToPar";
  @SerializedName(SERIALIZED_NAME_TO_PAR)
  private Integer toPar;

  public static final String SERIALIZED_NAME_WORSE_THAN_DOUBLE_BOGEY = "WorseThanDoubleBogey";
  @SerializedName(SERIALIZED_NAME_WORSE_THAN_DOUBLE_BOGEY)
  private Boolean worseThanDoubleBogey;

  public PlayerHole() {
  }

  public PlayerHole birdie(Boolean birdie) {
    this.birdie = birdie;
    return this;
  }

  /**
   * Get birdie
   * @return birdie
   */
  @javax.annotation.Nullable
  public Boolean getBirdie() {
    return birdie;
  }

  public void setBirdie(Boolean birdie) {
    this.birdie = birdie;
  }


  public PlayerHole bogey(Boolean bogey) {
    this.bogey = bogey;
    return this;
  }

  /**
   * Get bogey
   * @return bogey
   */
  @javax.annotation.Nullable
  public Boolean getBogey() {
    return bogey;
  }

  public void setBogey(Boolean bogey) {
    this.bogey = bogey;
  }


  public PlayerHole doubleBogey(Boolean doubleBogey) {
    this.doubleBogey = doubleBogey;
    return this;
  }

  /**
   * Get doubleBogey
   * @return doubleBogey
   */
  @javax.annotation.Nullable
  public Boolean getDoubleBogey() {
    return doubleBogey;
  }

  public void setDoubleBogey(Boolean doubleBogey) {
    this.doubleBogey = doubleBogey;
  }


  public PlayerHole doubleEagle(Boolean doubleEagle) {
    this.doubleEagle = doubleEagle;
    return this;
  }

  /**
   * Get doubleEagle
   * @return doubleEagle
   */
  @javax.annotation.Nullable
  public Boolean getDoubleEagle() {
    return doubleEagle;
  }

  public void setDoubleEagle(Boolean doubleEagle) {
    this.doubleEagle = doubleEagle;
  }


  public PlayerHole eagle(Boolean eagle) {
    this.eagle = eagle;
    return this;
  }

  /**
   * Get eagle
   * @return eagle
   */
  @javax.annotation.Nullable
  public Boolean getEagle() {
    return eagle;
  }

  public void setEagle(Boolean eagle) {
    this.eagle = eagle;
  }


  public PlayerHole holeInOne(Boolean holeInOne) {
    this.holeInOne = holeInOne;
    return this;
  }

  /**
   * Get holeInOne
   * @return holeInOne
   */
  @javax.annotation.Nullable
  public Boolean getHoleInOne() {
    return holeInOne;
  }

  public void setHoleInOne(Boolean holeInOne) {
    this.holeInOne = holeInOne;
  }


  public PlayerHole isPar(Boolean isPar) {
    this.isPar = isPar;
    return this;
  }

  /**
   * Get isPar
   * @return isPar
   */
  @javax.annotation.Nullable
  public Boolean getIsPar() {
    return isPar;
  }

  public void setIsPar(Boolean isPar) {
    this.isPar = isPar;
  }


  public PlayerHole number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PlayerHole par(Integer par) {
    this.par = par;
    return this;
  }

  /**
   * Get par
   * @return par
   */
  @javax.annotation.Nullable
  public Integer getPar() {
    return par;
  }

  public void setPar(Integer par) {
    this.par = par;
  }


  public PlayerHole playerRoundID(Integer playerRoundID) {
    this.playerRoundID = playerRoundID;
    return this;
  }

  /**
   * Get playerRoundID
   * @return playerRoundID
   */
  @javax.annotation.Nullable
  public Integer getPlayerRoundID() {
    return playerRoundID;
  }

  public void setPlayerRoundID(Integer playerRoundID) {
    this.playerRoundID = playerRoundID;
  }


  public PlayerHole score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public PlayerHole toPar(Integer toPar) {
    this.toPar = toPar;
    return this;
  }

  /**
   * Get toPar
   * @return toPar
   */
  @javax.annotation.Nullable
  public Integer getToPar() {
    return toPar;
  }

  public void setToPar(Integer toPar) {
    this.toPar = toPar;
  }


  public PlayerHole worseThanDoubleBogey(Boolean worseThanDoubleBogey) {
    this.worseThanDoubleBogey = worseThanDoubleBogey;
    return this;
  }

  /**
   * Get worseThanDoubleBogey
   * @return worseThanDoubleBogey
   */
  @javax.annotation.Nullable
  public Boolean getWorseThanDoubleBogey() {
    return worseThanDoubleBogey;
  }

  public void setWorseThanDoubleBogey(Boolean worseThanDoubleBogey) {
    this.worseThanDoubleBogey = worseThanDoubleBogey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerHole playerHole = (PlayerHole) o;
    return Objects.equals(this.birdie, playerHole.birdie) &&
        Objects.equals(this.bogey, playerHole.bogey) &&
        Objects.equals(this.doubleBogey, playerHole.doubleBogey) &&
        Objects.equals(this.doubleEagle, playerHole.doubleEagle) &&
        Objects.equals(this.eagle, playerHole.eagle) &&
        Objects.equals(this.holeInOne, playerHole.holeInOne) &&
        Objects.equals(this.isPar, playerHole.isPar) &&
        Objects.equals(this.number, playerHole.number) &&
        Objects.equals(this.par, playerHole.par) &&
        Objects.equals(this.playerRoundID, playerHole.playerRoundID) &&
        Objects.equals(this.score, playerHole.score) &&
        Objects.equals(this.toPar, playerHole.toPar) &&
        Objects.equals(this.worseThanDoubleBogey, playerHole.worseThanDoubleBogey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(birdie, bogey, doubleBogey, doubleEagle, eagle, holeInOne, isPar, number, par, playerRoundID, score, toPar, worseThanDoubleBogey);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerHole {\n");
    sb.append("    birdie: ").append(toIndentedString(birdie)).append("\n");
    sb.append("    bogey: ").append(toIndentedString(bogey)).append("\n");
    sb.append("    doubleBogey: ").append(toIndentedString(doubleBogey)).append("\n");
    sb.append("    doubleEagle: ").append(toIndentedString(doubleEagle)).append("\n");
    sb.append("    eagle: ").append(toIndentedString(eagle)).append("\n");
    sb.append("    holeInOne: ").append(toIndentedString(holeInOne)).append("\n");
    sb.append("    isPar: ").append(toIndentedString(isPar)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    par: ").append(toIndentedString(par)).append("\n");
    sb.append("    playerRoundID: ").append(toIndentedString(playerRoundID)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    toPar: ").append(toIndentedString(toPar)).append("\n");
    sb.append("    worseThanDoubleBogey: ").append(toIndentedString(worseThanDoubleBogey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Birdie");
    openapiFields.add("Bogey");
    openapiFields.add("DoubleBogey");
    openapiFields.add("DoubleEagle");
    openapiFields.add("Eagle");
    openapiFields.add("HoleInOne");
    openapiFields.add("IsPar");
    openapiFields.add("Number");
    openapiFields.add("Par");
    openapiFields.add("PlayerRoundID");
    openapiFields.add("Score");
    openapiFields.add("ToPar");
    openapiFields.add("WorseThanDoubleBogey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerHole
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerHole.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerHole is not found in the empty JSON string", PlayerHole.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerHole.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerHole` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerHole.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerHole' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerHole> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerHole.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerHole>() {
           @Override
           public void write(JsonWriter out, PlayerHole value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerHole read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerHole given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerHole
   * @throws IOException if the JSON string is invalid with respect to PlayerHole
   */
  public static PlayerHole fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerHole.class);
  }

  /**
   * Convert an instance of PlayerHole to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

