/*
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlayerHole;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerRound
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:32.114934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerRound {
  public static final String SERIALIZED_NAME_BACK_NINE_START = "BackNineStart";
  @SerializedName(SERIALIZED_NAME_BACK_NINE_START)
  private Boolean backNineStart;

  public static final String SERIALIZED_NAME_BIRDIES = "Birdies";
  @SerializedName(SERIALIZED_NAME_BIRDIES)
  private Integer birdies;

  public static final String SERIALIZED_NAME_BOGEY_FREE = "BogeyFree";
  @SerializedName(SERIALIZED_NAME_BOGEY_FREE)
  private Boolean bogeyFree;

  public static final String SERIALIZED_NAME_BOGEYS = "Bogeys";
  @SerializedName(SERIALIZED_NAME_BOGEYS)
  private Integer bogeys;

  public static final String SERIALIZED_NAME_BOUNCE_BACK_COUNT = "BounceBackCount";
  @SerializedName(SERIALIZED_NAME_BOUNCE_BACK_COUNT)
  private BigDecimal bounceBackCount;

  public static final String SERIALIZED_NAME_CONSECUTIVE_BIRDIE_OR_BETTER_COUNT = "ConsecutiveBirdieOrBetterCount";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_BIRDIE_OR_BETTER_COUNT)
  private BigDecimal consecutiveBirdieOrBetterCount;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_DOUBLE_BOGEYS = "DoubleBogeys";
  @SerializedName(SERIALIZED_NAME_DOUBLE_BOGEYS)
  private Integer doubleBogeys;

  public static final String SERIALIZED_NAME_DOUBLE_EAGLES = "DoubleEagles";
  @SerializedName(SERIALIZED_NAME_DOUBLE_EAGLES)
  private Integer doubleEagles;

  public static final String SERIALIZED_NAME_EAGLES = "Eagles";
  @SerializedName(SERIALIZED_NAME_EAGLES)
  private Integer eagles;

  public static final String SERIALIZED_NAME_HOLE_IN_ONES = "HoleInOnes";
  @SerializedName(SERIALIZED_NAME_HOLE_IN_ONES)
  private Integer holeInOnes;

  public static final String SERIALIZED_NAME_HOLES = "Holes";
  @SerializedName(SERIALIZED_NAME_HOLES)
  private List<PlayerHole> holes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDES_FIVE_OR_MORE_BIRDIES_OR_BETTER = "IncludesFiveOrMoreBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_INCLUDES_FIVE_OR_MORE_BIRDIES_OR_BETTER)
  private Boolean includesFiveOrMoreBirdiesOrBetter;

  public static final String SERIALIZED_NAME_INCLUDES_STREAK_OF_FIVE_BIRDIES_OR_BETTER = "IncludesStreakOfFiveBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_INCLUDES_STREAK_OF_FIVE_BIRDIES_OR_BETTER)
  private Boolean includesStreakOfFiveBirdiesOrBetter;

  public static final String SERIALIZED_NAME_INCLUDES_STREAK_OF_FOUR_BIRDIES_OR_BETTER = "IncludesStreakOfFourBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_INCLUDES_STREAK_OF_FOUR_BIRDIES_OR_BETTER)
  private Boolean includesStreakOfFourBirdiesOrBetter;

  public static final String SERIALIZED_NAME_INCLUDES_STREAK_OF_SIX_BIRDIES_OR_BETTER = "IncludesStreakOfSixBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_INCLUDES_STREAK_OF_SIX_BIRDIES_OR_BETTER)
  private Boolean includesStreakOfSixBirdiesOrBetter;

  public static final String SERIALIZED_NAME_INCLUDES_STREAK_OF_THREE_BIRDIES_OR_BETTER = "IncludesStreakOfThreeBirdiesOrBetter";
  @SerializedName(SERIALIZED_NAME_INCLUDES_STREAK_OF_THREE_BIRDIES_OR_BETTER)
  private Boolean includesStreakOfThreeBirdiesOrBetter;

  public static final String SERIALIZED_NAME_LONGEST_BIRDIE_OR_BETTER_STREAK = "LongestBirdieOrBetterStreak";
  @SerializedName(SERIALIZED_NAME_LONGEST_BIRDIE_OR_BETTER_STREAK)
  private BigDecimal longestBirdieOrBetterStreak;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PAR = "Par";
  @SerializedName(SERIALIZED_NAME_PAR)
  private Integer par;

  public static final String SERIALIZED_NAME_PARS = "Pars";
  @SerializedName(SERIALIZED_NAME_PARS)
  private Integer pars;

  public static final String SERIALIZED_NAME_PLAYER_ROUND_I_D = "PlayerRoundID";
  @SerializedName(SERIALIZED_NAME_PLAYER_ROUND_I_D)
  private Integer playerRoundID;

  public static final String SERIALIZED_NAME_PLAYER_TOURNAMENT_I_D = "PlayerTournamentID";
  @SerializedName(SERIALIZED_NAME_PLAYER_TOURNAMENT_I_D)
  private Integer playerTournamentID;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_TEE_TIME = "TeeTime";
  @SerializedName(SERIALIZED_NAME_TEE_TIME)
  private String teeTime;

  public static final String SERIALIZED_NAME_TRIPLE_BOGEYS = "TripleBogeys";
  @SerializedName(SERIALIZED_NAME_TRIPLE_BOGEYS)
  private Integer tripleBogeys;

  public static final String SERIALIZED_NAME_WORSE_THAN_DOUBLE_BOGEY = "WorseThanDoubleBogey";
  @SerializedName(SERIALIZED_NAME_WORSE_THAN_DOUBLE_BOGEY)
  private Integer worseThanDoubleBogey;

  public static final String SERIALIZED_NAME_WORSE_THAN_TRIPLE_BOGEY = "WorseThanTripleBogey";
  @SerializedName(SERIALIZED_NAME_WORSE_THAN_TRIPLE_BOGEY)
  private Integer worseThanTripleBogey;

  public PlayerRound() {
  }

  public PlayerRound backNineStart(Boolean backNineStart) {
    this.backNineStart = backNineStart;
    return this;
  }

  /**
   * Get backNineStart
   * @return backNineStart
   */
  @javax.annotation.Nullable
  public Boolean getBackNineStart() {
    return backNineStart;
  }

  public void setBackNineStart(Boolean backNineStart) {
    this.backNineStart = backNineStart;
  }


  public PlayerRound birdies(Integer birdies) {
    this.birdies = birdies;
    return this;
  }

  /**
   * Get birdies
   * @return birdies
   */
  @javax.annotation.Nullable
  public Integer getBirdies() {
    return birdies;
  }

  public void setBirdies(Integer birdies) {
    this.birdies = birdies;
  }


  public PlayerRound bogeyFree(Boolean bogeyFree) {
    this.bogeyFree = bogeyFree;
    return this;
  }

  /**
   * Get bogeyFree
   * @return bogeyFree
   */
  @javax.annotation.Nullable
  public Boolean getBogeyFree() {
    return bogeyFree;
  }

  public void setBogeyFree(Boolean bogeyFree) {
    this.bogeyFree = bogeyFree;
  }


  public PlayerRound bogeys(Integer bogeys) {
    this.bogeys = bogeys;
    return this;
  }

  /**
   * Get bogeys
   * @return bogeys
   */
  @javax.annotation.Nullable
  public Integer getBogeys() {
    return bogeys;
  }

  public void setBogeys(Integer bogeys) {
    this.bogeys = bogeys;
  }


  public PlayerRound bounceBackCount(BigDecimal bounceBackCount) {
    this.bounceBackCount = bounceBackCount;
    return this;
  }

  /**
   * Get bounceBackCount
   * @return bounceBackCount
   */
  @javax.annotation.Nullable
  public BigDecimal getBounceBackCount() {
    return bounceBackCount;
  }

  public void setBounceBackCount(BigDecimal bounceBackCount) {
    this.bounceBackCount = bounceBackCount;
  }


  public PlayerRound consecutiveBirdieOrBetterCount(BigDecimal consecutiveBirdieOrBetterCount) {
    this.consecutiveBirdieOrBetterCount = consecutiveBirdieOrBetterCount;
    return this;
  }

  /**
   * Get consecutiveBirdieOrBetterCount
   * @return consecutiveBirdieOrBetterCount
   */
  @javax.annotation.Nullable
  public BigDecimal getConsecutiveBirdieOrBetterCount() {
    return consecutiveBirdieOrBetterCount;
  }

  public void setConsecutiveBirdieOrBetterCount(BigDecimal consecutiveBirdieOrBetterCount) {
    this.consecutiveBirdieOrBetterCount = consecutiveBirdieOrBetterCount;
  }


  public PlayerRound day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public PlayerRound doubleBogeys(Integer doubleBogeys) {
    this.doubleBogeys = doubleBogeys;
    return this;
  }

  /**
   * Get doubleBogeys
   * @return doubleBogeys
   */
  @javax.annotation.Nullable
  public Integer getDoubleBogeys() {
    return doubleBogeys;
  }

  public void setDoubleBogeys(Integer doubleBogeys) {
    this.doubleBogeys = doubleBogeys;
  }


  public PlayerRound doubleEagles(Integer doubleEagles) {
    this.doubleEagles = doubleEagles;
    return this;
  }

  /**
   * Get doubleEagles
   * @return doubleEagles
   */
  @javax.annotation.Nullable
  public Integer getDoubleEagles() {
    return doubleEagles;
  }

  public void setDoubleEagles(Integer doubleEagles) {
    this.doubleEagles = doubleEagles;
  }


  public PlayerRound eagles(Integer eagles) {
    this.eagles = eagles;
    return this;
  }

  /**
   * Get eagles
   * @return eagles
   */
  @javax.annotation.Nullable
  public Integer getEagles() {
    return eagles;
  }

  public void setEagles(Integer eagles) {
    this.eagles = eagles;
  }


  public PlayerRound holeInOnes(Integer holeInOnes) {
    this.holeInOnes = holeInOnes;
    return this;
  }

  /**
   * Get holeInOnes
   * @return holeInOnes
   */
  @javax.annotation.Nullable
  public Integer getHoleInOnes() {
    return holeInOnes;
  }

  public void setHoleInOnes(Integer holeInOnes) {
    this.holeInOnes = holeInOnes;
  }


  public PlayerRound holes(List<PlayerHole> holes) {
    this.holes = holes;
    return this;
  }

  public PlayerRound addHolesItem(PlayerHole holesItem) {
    if (this.holes == null) {
      this.holes = new ArrayList<>();
    }
    this.holes.add(holesItem);
    return this;
  }

  /**
   * Get holes
   * @return holes
   */
  @javax.annotation.Nullable
  public List<PlayerHole> getHoles() {
    return holes;
  }

  public void setHoles(List<PlayerHole> holes) {
    this.holes = holes;
  }


  public PlayerRound includesFiveOrMoreBirdiesOrBetter(Boolean includesFiveOrMoreBirdiesOrBetter) {
    this.includesFiveOrMoreBirdiesOrBetter = includesFiveOrMoreBirdiesOrBetter;
    return this;
  }

  /**
   * Get includesFiveOrMoreBirdiesOrBetter
   * @return includesFiveOrMoreBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public Boolean getIncludesFiveOrMoreBirdiesOrBetter() {
    return includesFiveOrMoreBirdiesOrBetter;
  }

  public void setIncludesFiveOrMoreBirdiesOrBetter(Boolean includesFiveOrMoreBirdiesOrBetter) {
    this.includesFiveOrMoreBirdiesOrBetter = includesFiveOrMoreBirdiesOrBetter;
  }


  public PlayerRound includesStreakOfFiveBirdiesOrBetter(Boolean includesStreakOfFiveBirdiesOrBetter) {
    this.includesStreakOfFiveBirdiesOrBetter = includesStreakOfFiveBirdiesOrBetter;
    return this;
  }

  /**
   * Get includesStreakOfFiveBirdiesOrBetter
   * @return includesStreakOfFiveBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public Boolean getIncludesStreakOfFiveBirdiesOrBetter() {
    return includesStreakOfFiveBirdiesOrBetter;
  }

  public void setIncludesStreakOfFiveBirdiesOrBetter(Boolean includesStreakOfFiveBirdiesOrBetter) {
    this.includesStreakOfFiveBirdiesOrBetter = includesStreakOfFiveBirdiesOrBetter;
  }


  public PlayerRound includesStreakOfFourBirdiesOrBetter(Boolean includesStreakOfFourBirdiesOrBetter) {
    this.includesStreakOfFourBirdiesOrBetter = includesStreakOfFourBirdiesOrBetter;
    return this;
  }

  /**
   * Get includesStreakOfFourBirdiesOrBetter
   * @return includesStreakOfFourBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public Boolean getIncludesStreakOfFourBirdiesOrBetter() {
    return includesStreakOfFourBirdiesOrBetter;
  }

  public void setIncludesStreakOfFourBirdiesOrBetter(Boolean includesStreakOfFourBirdiesOrBetter) {
    this.includesStreakOfFourBirdiesOrBetter = includesStreakOfFourBirdiesOrBetter;
  }


  public PlayerRound includesStreakOfSixBirdiesOrBetter(Boolean includesStreakOfSixBirdiesOrBetter) {
    this.includesStreakOfSixBirdiesOrBetter = includesStreakOfSixBirdiesOrBetter;
    return this;
  }

  /**
   * Get includesStreakOfSixBirdiesOrBetter
   * @return includesStreakOfSixBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public Boolean getIncludesStreakOfSixBirdiesOrBetter() {
    return includesStreakOfSixBirdiesOrBetter;
  }

  public void setIncludesStreakOfSixBirdiesOrBetter(Boolean includesStreakOfSixBirdiesOrBetter) {
    this.includesStreakOfSixBirdiesOrBetter = includesStreakOfSixBirdiesOrBetter;
  }


  public PlayerRound includesStreakOfThreeBirdiesOrBetter(Boolean includesStreakOfThreeBirdiesOrBetter) {
    this.includesStreakOfThreeBirdiesOrBetter = includesStreakOfThreeBirdiesOrBetter;
    return this;
  }

  /**
   * Get includesStreakOfThreeBirdiesOrBetter
   * @return includesStreakOfThreeBirdiesOrBetter
   */
  @javax.annotation.Nullable
  public Boolean getIncludesStreakOfThreeBirdiesOrBetter() {
    return includesStreakOfThreeBirdiesOrBetter;
  }

  public void setIncludesStreakOfThreeBirdiesOrBetter(Boolean includesStreakOfThreeBirdiesOrBetter) {
    this.includesStreakOfThreeBirdiesOrBetter = includesStreakOfThreeBirdiesOrBetter;
  }


  public PlayerRound longestBirdieOrBetterStreak(BigDecimal longestBirdieOrBetterStreak) {
    this.longestBirdieOrBetterStreak = longestBirdieOrBetterStreak;
    return this;
  }

  /**
   * Get longestBirdieOrBetterStreak
   * @return longestBirdieOrBetterStreak
   */
  @javax.annotation.Nullable
  public BigDecimal getLongestBirdieOrBetterStreak() {
    return longestBirdieOrBetterStreak;
  }

  public void setLongestBirdieOrBetterStreak(BigDecimal longestBirdieOrBetterStreak) {
    this.longestBirdieOrBetterStreak = longestBirdieOrBetterStreak;
  }


  public PlayerRound number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PlayerRound par(Integer par) {
    this.par = par;
    return this;
  }

  /**
   * Get par
   * @return par
   */
  @javax.annotation.Nullable
  public Integer getPar() {
    return par;
  }

  public void setPar(Integer par) {
    this.par = par;
  }


  public PlayerRound pars(Integer pars) {
    this.pars = pars;
    return this;
  }

  /**
   * Get pars
   * @return pars
   */
  @javax.annotation.Nullable
  public Integer getPars() {
    return pars;
  }

  public void setPars(Integer pars) {
    this.pars = pars;
  }


  public PlayerRound playerRoundID(Integer playerRoundID) {
    this.playerRoundID = playerRoundID;
    return this;
  }

  /**
   * Get playerRoundID
   * @return playerRoundID
   */
  @javax.annotation.Nullable
  public Integer getPlayerRoundID() {
    return playerRoundID;
  }

  public void setPlayerRoundID(Integer playerRoundID) {
    this.playerRoundID = playerRoundID;
  }


  public PlayerRound playerTournamentID(Integer playerTournamentID) {
    this.playerTournamentID = playerTournamentID;
    return this;
  }

  /**
   * Get playerTournamentID
   * @return playerTournamentID
   */
  @javax.annotation.Nullable
  public Integer getPlayerTournamentID() {
    return playerTournamentID;
  }

  public void setPlayerTournamentID(Integer playerTournamentID) {
    this.playerTournamentID = playerTournamentID;
  }


  public PlayerRound score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public PlayerRound teeTime(String teeTime) {
    this.teeTime = teeTime;
    return this;
  }

  /**
   * Get teeTime
   * @return teeTime
   */
  @javax.annotation.Nullable
  public String getTeeTime() {
    return teeTime;
  }

  public void setTeeTime(String teeTime) {
    this.teeTime = teeTime;
  }


  public PlayerRound tripleBogeys(Integer tripleBogeys) {
    this.tripleBogeys = tripleBogeys;
    return this;
  }

  /**
   * Get tripleBogeys
   * @return tripleBogeys
   */
  @javax.annotation.Nullable
  public Integer getTripleBogeys() {
    return tripleBogeys;
  }

  public void setTripleBogeys(Integer tripleBogeys) {
    this.tripleBogeys = tripleBogeys;
  }


  public PlayerRound worseThanDoubleBogey(Integer worseThanDoubleBogey) {
    this.worseThanDoubleBogey = worseThanDoubleBogey;
    return this;
  }

  /**
   * Get worseThanDoubleBogey
   * @return worseThanDoubleBogey
   */
  @javax.annotation.Nullable
  public Integer getWorseThanDoubleBogey() {
    return worseThanDoubleBogey;
  }

  public void setWorseThanDoubleBogey(Integer worseThanDoubleBogey) {
    this.worseThanDoubleBogey = worseThanDoubleBogey;
  }


  public PlayerRound worseThanTripleBogey(Integer worseThanTripleBogey) {
    this.worseThanTripleBogey = worseThanTripleBogey;
    return this;
  }

  /**
   * Get worseThanTripleBogey
   * @return worseThanTripleBogey
   */
  @javax.annotation.Nullable
  public Integer getWorseThanTripleBogey() {
    return worseThanTripleBogey;
  }

  public void setWorseThanTripleBogey(Integer worseThanTripleBogey) {
    this.worseThanTripleBogey = worseThanTripleBogey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerRound playerRound = (PlayerRound) o;
    return Objects.equals(this.backNineStart, playerRound.backNineStart) &&
        Objects.equals(this.birdies, playerRound.birdies) &&
        Objects.equals(this.bogeyFree, playerRound.bogeyFree) &&
        Objects.equals(this.bogeys, playerRound.bogeys) &&
        Objects.equals(this.bounceBackCount, playerRound.bounceBackCount) &&
        Objects.equals(this.consecutiveBirdieOrBetterCount, playerRound.consecutiveBirdieOrBetterCount) &&
        Objects.equals(this.day, playerRound.day) &&
        Objects.equals(this.doubleBogeys, playerRound.doubleBogeys) &&
        Objects.equals(this.doubleEagles, playerRound.doubleEagles) &&
        Objects.equals(this.eagles, playerRound.eagles) &&
        Objects.equals(this.holeInOnes, playerRound.holeInOnes) &&
        Objects.equals(this.holes, playerRound.holes) &&
        Objects.equals(this.includesFiveOrMoreBirdiesOrBetter, playerRound.includesFiveOrMoreBirdiesOrBetter) &&
        Objects.equals(this.includesStreakOfFiveBirdiesOrBetter, playerRound.includesStreakOfFiveBirdiesOrBetter) &&
        Objects.equals(this.includesStreakOfFourBirdiesOrBetter, playerRound.includesStreakOfFourBirdiesOrBetter) &&
        Objects.equals(this.includesStreakOfSixBirdiesOrBetter, playerRound.includesStreakOfSixBirdiesOrBetter) &&
        Objects.equals(this.includesStreakOfThreeBirdiesOrBetter, playerRound.includesStreakOfThreeBirdiesOrBetter) &&
        Objects.equals(this.longestBirdieOrBetterStreak, playerRound.longestBirdieOrBetterStreak) &&
        Objects.equals(this.number, playerRound.number) &&
        Objects.equals(this.par, playerRound.par) &&
        Objects.equals(this.pars, playerRound.pars) &&
        Objects.equals(this.playerRoundID, playerRound.playerRoundID) &&
        Objects.equals(this.playerTournamentID, playerRound.playerTournamentID) &&
        Objects.equals(this.score, playerRound.score) &&
        Objects.equals(this.teeTime, playerRound.teeTime) &&
        Objects.equals(this.tripleBogeys, playerRound.tripleBogeys) &&
        Objects.equals(this.worseThanDoubleBogey, playerRound.worseThanDoubleBogey) &&
        Objects.equals(this.worseThanTripleBogey, playerRound.worseThanTripleBogey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(backNineStart, birdies, bogeyFree, bogeys, bounceBackCount, consecutiveBirdieOrBetterCount, day, doubleBogeys, doubleEagles, eagles, holeInOnes, holes, includesFiveOrMoreBirdiesOrBetter, includesStreakOfFiveBirdiesOrBetter, includesStreakOfFourBirdiesOrBetter, includesStreakOfSixBirdiesOrBetter, includesStreakOfThreeBirdiesOrBetter, longestBirdieOrBetterStreak, number, par, pars, playerRoundID, playerTournamentID, score, teeTime, tripleBogeys, worseThanDoubleBogey, worseThanTripleBogey);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerRound {\n");
    sb.append("    backNineStart: ").append(toIndentedString(backNineStart)).append("\n");
    sb.append("    birdies: ").append(toIndentedString(birdies)).append("\n");
    sb.append("    bogeyFree: ").append(toIndentedString(bogeyFree)).append("\n");
    sb.append("    bogeys: ").append(toIndentedString(bogeys)).append("\n");
    sb.append("    bounceBackCount: ").append(toIndentedString(bounceBackCount)).append("\n");
    sb.append("    consecutiveBirdieOrBetterCount: ").append(toIndentedString(consecutiveBirdieOrBetterCount)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    doubleBogeys: ").append(toIndentedString(doubleBogeys)).append("\n");
    sb.append("    doubleEagles: ").append(toIndentedString(doubleEagles)).append("\n");
    sb.append("    eagles: ").append(toIndentedString(eagles)).append("\n");
    sb.append("    holeInOnes: ").append(toIndentedString(holeInOnes)).append("\n");
    sb.append("    holes: ").append(toIndentedString(holes)).append("\n");
    sb.append("    includesFiveOrMoreBirdiesOrBetter: ").append(toIndentedString(includesFiveOrMoreBirdiesOrBetter)).append("\n");
    sb.append("    includesStreakOfFiveBirdiesOrBetter: ").append(toIndentedString(includesStreakOfFiveBirdiesOrBetter)).append("\n");
    sb.append("    includesStreakOfFourBirdiesOrBetter: ").append(toIndentedString(includesStreakOfFourBirdiesOrBetter)).append("\n");
    sb.append("    includesStreakOfSixBirdiesOrBetter: ").append(toIndentedString(includesStreakOfSixBirdiesOrBetter)).append("\n");
    sb.append("    includesStreakOfThreeBirdiesOrBetter: ").append(toIndentedString(includesStreakOfThreeBirdiesOrBetter)).append("\n");
    sb.append("    longestBirdieOrBetterStreak: ").append(toIndentedString(longestBirdieOrBetterStreak)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    par: ").append(toIndentedString(par)).append("\n");
    sb.append("    pars: ").append(toIndentedString(pars)).append("\n");
    sb.append("    playerRoundID: ").append(toIndentedString(playerRoundID)).append("\n");
    sb.append("    playerTournamentID: ").append(toIndentedString(playerTournamentID)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    teeTime: ").append(toIndentedString(teeTime)).append("\n");
    sb.append("    tripleBogeys: ").append(toIndentedString(tripleBogeys)).append("\n");
    sb.append("    worseThanDoubleBogey: ").append(toIndentedString(worseThanDoubleBogey)).append("\n");
    sb.append("    worseThanTripleBogey: ").append(toIndentedString(worseThanTripleBogey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackNineStart");
    openapiFields.add("Birdies");
    openapiFields.add("BogeyFree");
    openapiFields.add("Bogeys");
    openapiFields.add("BounceBackCount");
    openapiFields.add("ConsecutiveBirdieOrBetterCount");
    openapiFields.add("Day");
    openapiFields.add("DoubleBogeys");
    openapiFields.add("DoubleEagles");
    openapiFields.add("Eagles");
    openapiFields.add("HoleInOnes");
    openapiFields.add("Holes");
    openapiFields.add("IncludesFiveOrMoreBirdiesOrBetter");
    openapiFields.add("IncludesStreakOfFiveBirdiesOrBetter");
    openapiFields.add("IncludesStreakOfFourBirdiesOrBetter");
    openapiFields.add("IncludesStreakOfSixBirdiesOrBetter");
    openapiFields.add("IncludesStreakOfThreeBirdiesOrBetter");
    openapiFields.add("LongestBirdieOrBetterStreak");
    openapiFields.add("Number");
    openapiFields.add("Par");
    openapiFields.add("Pars");
    openapiFields.add("PlayerRoundID");
    openapiFields.add("PlayerTournamentID");
    openapiFields.add("Score");
    openapiFields.add("TeeTime");
    openapiFields.add("TripleBogeys");
    openapiFields.add("WorseThanDoubleBogey");
    openapiFields.add("WorseThanTripleBogey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerRound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerRound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerRound is not found in the empty JSON string", PlayerRound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerRound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerRound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if (jsonObj.get("Holes") != null && !jsonObj.get("Holes").isJsonNull()) {
        JsonArray jsonArrayholes = jsonObj.getAsJsonArray("Holes");
        if (jsonArrayholes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Holes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Holes` to be an array in the JSON string but got `%s`", jsonObj.get("Holes").toString()));
          }

          // validate the optional field `Holes` (array)
          for (int i = 0; i < jsonArrayholes.size(); i++) {
            PlayerHole.validateJsonElement(jsonArrayholes.get(i));
          };
        }
      }
      if ((jsonObj.get("TeeTime") != null && !jsonObj.get("TeeTime").isJsonNull()) && !jsonObj.get("TeeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TeeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TeeTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerRound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerRound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerRound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerRound.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerRound>() {
           @Override
           public void write(JsonWriter out, PlayerRound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerRound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerRound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerRound
   * @throws IOException if the JSON string is invalid with respect to PlayerRound
   */
  public static PlayerRound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerRound.class);
  }

  /**
   * Convert an instance of PlayerRound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

