/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDfsSlate.h"
#include "OAIInjury.h"
#include "OAILeaderboard.h"
#include "OAINews.h"
#include "OAIPlayer.h"
#include "OAIPlayerSeason.h"
#include "OAIPlayerTournament.h"
#include "OAIPlayerTournamentProjection.h"
#include "OAISeason.h"
#include "OAITournament.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    */
    virtual void currentSeason(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  tournamentid QString [required]
    */
    virtual void dfsSlates(const QString &format, const QString &tournamentid);

    /**
    * @param[in]  format QString [required]
    */
    virtual void injuries(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void injuriesHistorical(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  tournamentid QString [required]
    */
    virtual void leaderboard(const QString &format, const QString &tournamentid);

    /**
    * @param[in]  format QString [required]
    */
    virtual void news(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void newsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void newsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void player(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerSeasonStatsWWorldGolfRankings(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  tournamentid QString [required]
    */
    virtual void playerTournamentProjectedStatsWDraftkingsSalaries(const QString &format, const QString &tournamentid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  tournamentid QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerTournamentStatsByPlayer(const QString &format, const QString &tournamentid, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    */
    virtual void players(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void schedule(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void scheduleBySeason(const QString &format, const QString &season);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void currentSeasonCallback(OAIHttpRequestWorker *worker);
    void dfsSlatesCallback(OAIHttpRequestWorker *worker);
    void injuriesCallback(OAIHttpRequestWorker *worker);
    void injuriesHistoricalCallback(OAIHttpRequestWorker *worker);
    void leaderboardCallback(OAIHttpRequestWorker *worker);
    void newsCallback(OAIHttpRequestWorker *worker);
    void newsByDateCallback(OAIHttpRequestWorker *worker);
    void newsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerCallback(OAIHttpRequestWorker *worker);
    void playerSeasonStatsWWorldGolfRankingsCallback(OAIHttpRequestWorker *worker);
    void playerTournamentProjectedStatsWDraftkingsSalariesCallback(OAIHttpRequestWorker *worker);
    void playerTournamentStatsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playersCallback(OAIHttpRequestWorker *worker);
    void scheduleCallback(OAIHttpRequestWorker *worker);
    void scheduleBySeasonCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void currentSeasonSignal(OAISeason summary);
    void dfsSlatesSignal(QList<OAIDfsSlate> summary);
    void injuriesSignal(QList<OAIInjury> summary);
    void injuriesHistoricalSignal(QList<OAIInjury> summary);
    void leaderboardSignal(OAILeaderboard summary);
    void newsSignal(QList<OAINews> summary);
    void newsByDateSignal(QList<OAINews> summary);
    void newsByPlayerSignal(QList<OAINews> summary);
    void playerSignal(OAIPlayer summary);
    void playerSeasonStatsWWorldGolfRankingsSignal(QList<OAIPlayerSeason> summary);
    void playerTournamentProjectedStatsWDraftkingsSalariesSignal(QList<OAIPlayerTournamentProjection> summary);
    void playerTournamentStatsByPlayerSignal(OAIPlayerTournament summary);
    void playersSignal(QList<OAIPlayer> summary);
    void scheduleSignal(QList<OAITournament> summary);
    void scheduleBySeasonSignal(QList<OAITournament> summary);


    void currentSeasonSignalFull(OAIHttpRequestWorker *worker, OAISeason summary);
    void dfsSlatesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDfsSlate> summary);
    void injuriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInjury> summary);
    void injuriesHistoricalSignalFull(OAIHttpRequestWorker *worker, QList<OAIInjury> summary);
    void leaderboardSignalFull(OAIHttpRequestWorker *worker, OAILeaderboard summary);
    void newsSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByPlayerSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void playerSignalFull(OAIHttpRequestWorker *worker, OAIPlayer summary);
    void playerSeasonStatsWWorldGolfRankingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeason> summary);
    void playerTournamentProjectedStatsWDraftkingsSalariesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerTournamentProjection> summary);
    void playerTournamentStatsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayerTournament summary);
    void playersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void scheduleSignalFull(OAIHttpRequestWorker *worker, QList<OAITournament> summary);
    void scheduleBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITournament> summary);

    Q_DECL_DEPRECATED_X("Use currentSeasonSignalError() instead")
    void currentSeasonSignalE(OAISeason summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalError(OAISeason summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesSignalError() instead")
    void dfsSlatesSignalE(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesSignalError(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesSignalError() instead")
    void injuriesSignalE(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesSignalError(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesHistoricalSignalError() instead")
    void injuriesHistoricalSignalE(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesHistoricalSignalError(QList<OAIInjury> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaderboardSignalError() instead")
    void leaderboardSignalE(OAILeaderboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leaderboardSignalError(OAILeaderboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalError() instead")
    void newsSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalError() instead")
    void newsByDateSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalError() instead")
    void newsByPlayerSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSignalError() instead")
    void playerSignalE(OAIPlayer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSignalError(OAIPlayer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsWWorldGolfRankingsSignalError() instead")
    void playerSeasonStatsWWorldGolfRankingsSignalE(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsWWorldGolfRankingsSignalError(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerTournamentProjectedStatsWDraftkingsSalariesSignalError() instead")
    void playerTournamentProjectedStatsWDraftkingsSalariesSignalE(QList<OAIPlayerTournamentProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerTournamentProjectedStatsWDraftkingsSalariesSignalError(QList<OAIPlayerTournamentProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerTournamentStatsByPlayerSignalError() instead")
    void playerTournamentStatsByPlayerSignalE(OAIPlayerTournament summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerTournamentStatsByPlayerSignalError(OAIPlayerTournament summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersSignalError() instead")
    void playersSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playersSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleSignalError() instead")
    void scheduleSignalE(QList<OAITournament> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleSignalError(QList<OAITournament> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleBySeasonSignalError() instead")
    void scheduleBySeasonSignalE(QList<OAITournament> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleBySeasonSignalError(QList<OAITournament> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use currentSeasonSignalErrorFull() instead")
    void currentSeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesSignalErrorFull() instead")
    void dfsSlatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesSignalErrorFull() instead")
    void injuriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuriesHistoricalSignalErrorFull() instead")
    void injuriesHistoricalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void injuriesHistoricalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaderboardSignalErrorFull() instead")
    void leaderboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaderboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalErrorFull() instead")
    void newsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalErrorFull() instead")
    void newsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalErrorFull() instead")
    void newsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSignalErrorFull() instead")
    void playerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsWWorldGolfRankingsSignalErrorFull() instead")
    void playerSeasonStatsWWorldGolfRankingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsWWorldGolfRankingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerTournamentProjectedStatsWDraftkingsSalariesSignalErrorFull() instead")
    void playerTournamentProjectedStatsWDraftkingsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerTournamentProjectedStatsWDraftkingsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerTournamentStatsByPlayerSignalErrorFull() instead")
    void playerTournamentStatsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerTournamentStatsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersSignalErrorFull() instead")
    void playersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleSignalErrorFull() instead")
    void scheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleBySeasonSignalErrorFull() instead")
    void scheduleBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
