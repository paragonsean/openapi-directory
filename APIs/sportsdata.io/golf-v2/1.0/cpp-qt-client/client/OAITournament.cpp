/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITournament.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITournament::OAITournament(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITournament::OAITournament() {
    this->initializeModel();
}

OAITournament::~OAITournament() {}

void OAITournament::initializeModel() {

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_covered_isSet = false;
    m_covered_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_is_in_progress_isSet = false;
    m_is_in_progress_isValid = false;

    m_is_over_isSet = false;
    m_is_over_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_odds_coverage_isSet = false;
    m_odds_coverage_isValid = false;

    m_par_isSet = false;
    m_par_isValid = false;

    m_purse_isSet = false;
    m_purse_isValid = false;

    m_rounds_isSet = false;
    m_rounds_isValid = false;

    m_sport_radar_tournament_id_isSet = false;
    m_sport_radar_tournament_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_tournament_id_isSet = false;
    m_tournament_id_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_yards_isSet = false;
    m_yards_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAITournament::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITournament::fromJsonObject(QJsonObject json) {

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("Canceled")]);
    m_canceled_isSet = !json[QString("Canceled")].isNull() && m_canceled_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_covered_isValid = ::OpenAPI::fromJsonValue(m_covered, json[QString("Covered")]);
    m_covered_isSet = !json[QString("Covered")].isNull() && m_covered_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_is_in_progress_isValid = ::OpenAPI::fromJsonValue(m_is_in_progress, json[QString("IsInProgress")]);
    m_is_in_progress_isSet = !json[QString("IsInProgress")].isNull() && m_is_in_progress_isValid;

    m_is_over_isValid = ::OpenAPI::fromJsonValue(m_is_over, json[QString("IsOver")]);
    m_is_over_isSet = !json[QString("IsOver")].isNull() && m_is_over_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_odds_coverage_isValid = ::OpenAPI::fromJsonValue(m_odds_coverage, json[QString("OddsCoverage")]);
    m_odds_coverage_isSet = !json[QString("OddsCoverage")].isNull() && m_odds_coverage_isValid;

    m_par_isValid = ::OpenAPI::fromJsonValue(m_par, json[QString("Par")]);
    m_par_isSet = !json[QString("Par")].isNull() && m_par_isValid;

    m_purse_isValid = ::OpenAPI::fromJsonValue(m_purse, json[QString("Purse")]);
    m_purse_isSet = !json[QString("Purse")].isNull() && m_purse_isValid;

    m_rounds_isValid = ::OpenAPI::fromJsonValue(m_rounds, json[QString("Rounds")]);
    m_rounds_isSet = !json[QString("Rounds")].isNull() && m_rounds_isValid;

    m_sport_radar_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_sport_radar_tournament_id, json[QString("SportRadarTournamentID")]);
    m_sport_radar_tournament_id_isSet = !json[QString("SportRadarTournamentID")].isNull() && m_sport_radar_tournament_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("StartDateTime")]);
    m_start_date_time_isSet = !json[QString("StartDateTime")].isNull() && m_start_date_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;

    m_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_tournament_id, json[QString("TournamentID")]);
    m_tournament_id_isSet = !json[QString("TournamentID")].isNull() && m_tournament_id_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("Venue")]);
    m_venue_isSet = !json[QString("Venue")].isNull() && m_venue_isValid;

    m_yards_isValid = ::OpenAPI::fromJsonValue(m_yards, json[QString("Yards")]);
    m_yards_isSet = !json[QString("Yards")].isNull() && m_yards_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("ZipCode")]);
    m_zip_code_isSet = !json[QString("ZipCode")].isNull() && m_zip_code_isValid;
}

QString OAITournament::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITournament::asJsonObject() const {
    QJsonObject obj;
    if (m_canceled_isSet) {
        obj.insert(QString("Canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_covered_isSet) {
        obj.insert(QString("Covered"), ::OpenAPI::toJsonValue(m_covered));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_is_in_progress_isSet) {
        obj.insert(QString("IsInProgress"), ::OpenAPI::toJsonValue(m_is_in_progress));
    }
    if (m_is_over_isSet) {
        obj.insert(QString("IsOver"), ::OpenAPI::toJsonValue(m_is_over));
    }
    if (m_location_isSet) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_odds_coverage_isSet) {
        obj.insert(QString("OddsCoverage"), ::OpenAPI::toJsonValue(m_odds_coverage));
    }
    if (m_par_isSet) {
        obj.insert(QString("Par"), ::OpenAPI::toJsonValue(m_par));
    }
    if (m_purse_isSet) {
        obj.insert(QString("Purse"), ::OpenAPI::toJsonValue(m_purse));
    }
    if (m_rounds.size() > 0) {
        obj.insert(QString("Rounds"), ::OpenAPI::toJsonValue(m_rounds));
    }
    if (m_sport_radar_tournament_id_isSet) {
        obj.insert(QString("SportRadarTournamentID"), ::OpenAPI::toJsonValue(m_sport_radar_tournament_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("StartDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_tournament_id_isSet) {
        obj.insert(QString("TournamentID"), ::OpenAPI::toJsonValue(m_tournament_id));
    }
    if (m_venue_isSet) {
        obj.insert(QString("Venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_yards_isSet) {
        obj.insert(QString("Yards"), ::OpenAPI::toJsonValue(m_yards));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("ZipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

bool OAITournament::isCanceled() const {
    return m_canceled;
}
void OAITournament::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAITournament::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAITournament::is_canceled_Valid() const{
    return m_canceled_isValid;
}

QString OAITournament::getCity() const {
    return m_city;
}
void OAITournament::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITournament::is_city_Set() const{
    return m_city_isSet;
}

bool OAITournament::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITournament::getCountry() const {
    return m_country;
}
void OAITournament::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAITournament::is_country_Set() const{
    return m_country_isSet;
}

bool OAITournament::is_country_Valid() const{
    return m_country_isValid;
}

bool OAITournament::isCovered() const {
    return m_covered;
}
void OAITournament::setCovered(const bool &covered) {
    m_covered = covered;
    m_covered_isSet = true;
}

bool OAITournament::is_covered_Set() const{
    return m_covered_isSet;
}

bool OAITournament::is_covered_Valid() const{
    return m_covered_isValid;
}

QString OAITournament::getEndDate() const {
    return m_end_date;
}
void OAITournament::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAITournament::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAITournament::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAITournament::getFormat() const {
    return m_format;
}
void OAITournament::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAITournament::is_format_Set() const{
    return m_format_isSet;
}

bool OAITournament::is_format_Valid() const{
    return m_format_isValid;
}

bool OAITournament::isIsInProgress() const {
    return m_is_in_progress;
}
void OAITournament::setIsInProgress(const bool &is_in_progress) {
    m_is_in_progress = is_in_progress;
    m_is_in_progress_isSet = true;
}

bool OAITournament::is_is_in_progress_Set() const{
    return m_is_in_progress_isSet;
}

bool OAITournament::is_is_in_progress_Valid() const{
    return m_is_in_progress_isValid;
}

bool OAITournament::isIsOver() const {
    return m_is_over;
}
void OAITournament::setIsOver(const bool &is_over) {
    m_is_over = is_over;
    m_is_over_isSet = true;
}

bool OAITournament::is_is_over_Set() const{
    return m_is_over_isSet;
}

bool OAITournament::is_is_over_Valid() const{
    return m_is_over_isValid;
}

QString OAITournament::getLocation() const {
    return m_location;
}
void OAITournament::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITournament::is_location_Set() const{
    return m_location_isSet;
}

bool OAITournament::is_location_Valid() const{
    return m_location_isValid;
}

QString OAITournament::getName() const {
    return m_name;
}
void OAITournament::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITournament::is_name_Set() const{
    return m_name_isSet;
}

bool OAITournament::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITournament::getOddsCoverage() const {
    return m_odds_coverage;
}
void OAITournament::setOddsCoverage(const QString &odds_coverage) {
    m_odds_coverage = odds_coverage;
    m_odds_coverage_isSet = true;
}

bool OAITournament::is_odds_coverage_Set() const{
    return m_odds_coverage_isSet;
}

bool OAITournament::is_odds_coverage_Valid() const{
    return m_odds_coverage_isValid;
}

qint32 OAITournament::getPar() const {
    return m_par;
}
void OAITournament::setPar(const qint32 &par) {
    m_par = par;
    m_par_isSet = true;
}

bool OAITournament::is_par_Set() const{
    return m_par_isSet;
}

bool OAITournament::is_par_Valid() const{
    return m_par_isValid;
}

double OAITournament::getPurse() const {
    return m_purse;
}
void OAITournament::setPurse(const double &purse) {
    m_purse = purse;
    m_purse_isSet = true;
}

bool OAITournament::is_purse_Set() const{
    return m_purse_isSet;
}

bool OAITournament::is_purse_Valid() const{
    return m_purse_isValid;
}

QList<OAIRound> OAITournament::getRounds() const {
    return m_rounds;
}
void OAITournament::setRounds(const QList<OAIRound> &rounds) {
    m_rounds = rounds;
    m_rounds_isSet = true;
}

bool OAITournament::is_rounds_Set() const{
    return m_rounds_isSet;
}

bool OAITournament::is_rounds_Valid() const{
    return m_rounds_isValid;
}

QString OAITournament::getSportRadarTournamentId() const {
    return m_sport_radar_tournament_id;
}
void OAITournament::setSportRadarTournamentId(const QString &sport_radar_tournament_id) {
    m_sport_radar_tournament_id = sport_radar_tournament_id;
    m_sport_radar_tournament_id_isSet = true;
}

bool OAITournament::is_sport_radar_tournament_id_Set() const{
    return m_sport_radar_tournament_id_isSet;
}

bool OAITournament::is_sport_radar_tournament_id_Valid() const{
    return m_sport_radar_tournament_id_isValid;
}

QString OAITournament::getStartDate() const {
    return m_start_date;
}
void OAITournament::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITournament::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITournament::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAITournament::getStartDateTime() const {
    return m_start_date_time;
}
void OAITournament::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAITournament::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAITournament::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAITournament::getState() const {
    return m_state;
}
void OAITournament::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITournament::is_state_Set() const{
    return m_state_isSet;
}

bool OAITournament::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITournament::getTimeZone() const {
    return m_time_zone;
}
void OAITournament::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAITournament::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAITournament::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

qint32 OAITournament::getTournamentId() const {
    return m_tournament_id;
}
void OAITournament::setTournamentId(const qint32 &tournament_id) {
    m_tournament_id = tournament_id;
    m_tournament_id_isSet = true;
}

bool OAITournament::is_tournament_id_Set() const{
    return m_tournament_id_isSet;
}

bool OAITournament::is_tournament_id_Valid() const{
    return m_tournament_id_isValid;
}

QString OAITournament::getVenue() const {
    return m_venue;
}
void OAITournament::setVenue(const QString &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAITournament::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAITournament::is_venue_Valid() const{
    return m_venue_isValid;
}

qint32 OAITournament::getYards() const {
    return m_yards;
}
void OAITournament::setYards(const qint32 &yards) {
    m_yards = yards;
    m_yards_isSet = true;
}

bool OAITournament::is_yards_Set() const{
    return m_yards_isSet;
}

bool OAITournament::is_yards_Valid() const{
    return m_yards_isValid;
}

QString OAITournament::getZipCode() const {
    return m_zip_code;
}
void OAITournament::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAITournament::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAITournament::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAITournament::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_covered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odds_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sport_radar_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITournament::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
