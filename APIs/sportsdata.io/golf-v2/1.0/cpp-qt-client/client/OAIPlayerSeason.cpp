/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerSeason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerSeason::OAIPlayerSeason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerSeason::OAIPlayerSeason() {
    this->initializeModel();
}

OAIPlayerSeason::~OAIPlayerSeason() {}

void OAIPlayerSeason::initializeModel() {

    m_average_points_isSet = false;
    m_average_points_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_player_season_id_isSet = false;
    m_player_season_id_isValid = false;

    m_points_gained_isSet = false;
    m_points_gained_isValid = false;

    m_points_lost_isSet = false;
    m_points_lost_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_total_points_isSet = false;
    m_total_points_isValid = false;

    m_world_golf_rank_isSet = false;
    m_world_golf_rank_isValid = false;

    m_world_golf_rank_last_week_isSet = false;
    m_world_golf_rank_last_week_isValid = false;
}

void OAIPlayerSeason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerSeason::fromJsonObject(QJsonObject json) {

    m_average_points_isValid = ::OpenAPI::fromJsonValue(m_average_points, json[QString("AveragePoints")]);
    m_average_points_isSet = !json[QString("AveragePoints")].isNull() && m_average_points_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("Events")]);
    m_events_isSet = !json[QString("Events")].isNull() && m_events_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_player_season_id_isValid = ::OpenAPI::fromJsonValue(m_player_season_id, json[QString("PlayerSeasonID")]);
    m_player_season_id_isSet = !json[QString("PlayerSeasonID")].isNull() && m_player_season_id_isValid;

    m_points_gained_isValid = ::OpenAPI::fromJsonValue(m_points_gained, json[QString("PointsGained")]);
    m_points_gained_isSet = !json[QString("PointsGained")].isNull() && m_points_gained_isValid;

    m_points_lost_isValid = ::OpenAPI::fromJsonValue(m_points_lost, json[QString("PointsLost")]);
    m_points_lost_isSet = !json[QString("PointsLost")].isNull() && m_points_lost_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_total_points_isValid = ::OpenAPI::fromJsonValue(m_total_points, json[QString("TotalPoints")]);
    m_total_points_isSet = !json[QString("TotalPoints")].isNull() && m_total_points_isValid;

    m_world_golf_rank_isValid = ::OpenAPI::fromJsonValue(m_world_golf_rank, json[QString("WorldGolfRank")]);
    m_world_golf_rank_isSet = !json[QString("WorldGolfRank")].isNull() && m_world_golf_rank_isValid;

    m_world_golf_rank_last_week_isValid = ::OpenAPI::fromJsonValue(m_world_golf_rank_last_week, json[QString("WorldGolfRankLastWeek")]);
    m_world_golf_rank_last_week_isSet = !json[QString("WorldGolfRankLastWeek")].isNull() && m_world_golf_rank_last_week_isValid;
}

QString OAIPlayerSeason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerSeason::asJsonObject() const {
    QJsonObject obj;
    if (m_average_points_isSet) {
        obj.insert(QString("AveragePoints"), ::OpenAPI::toJsonValue(m_average_points));
    }
    if (m_events_isSet) {
        obj.insert(QString("Events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_player_season_id_isSet) {
        obj.insert(QString("PlayerSeasonID"), ::OpenAPI::toJsonValue(m_player_season_id));
    }
    if (m_points_gained_isSet) {
        obj.insert(QString("PointsGained"), ::OpenAPI::toJsonValue(m_points_gained));
    }
    if (m_points_lost_isSet) {
        obj.insert(QString("PointsLost"), ::OpenAPI::toJsonValue(m_points_lost));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_total_points_isSet) {
        obj.insert(QString("TotalPoints"), ::OpenAPI::toJsonValue(m_total_points));
    }
    if (m_world_golf_rank_isSet) {
        obj.insert(QString("WorldGolfRank"), ::OpenAPI::toJsonValue(m_world_golf_rank));
    }
    if (m_world_golf_rank_last_week_isSet) {
        obj.insert(QString("WorldGolfRankLastWeek"), ::OpenAPI::toJsonValue(m_world_golf_rank_last_week));
    }
    return obj;
}

double OAIPlayerSeason::getAveragePoints() const {
    return m_average_points;
}
void OAIPlayerSeason::setAveragePoints(const double &average_points) {
    m_average_points = average_points;
    m_average_points_isSet = true;
}

bool OAIPlayerSeason::is_average_points_Set() const{
    return m_average_points_isSet;
}

bool OAIPlayerSeason::is_average_points_Valid() const{
    return m_average_points_isValid;
}

qint32 OAIPlayerSeason::getEvents() const {
    return m_events;
}
void OAIPlayerSeason::setEvents(const qint32 &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIPlayerSeason::is_events_Set() const{
    return m_events_isSet;
}

bool OAIPlayerSeason::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIPlayerSeason::getName() const {
    return m_name;
}
void OAIPlayerSeason::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerSeason::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerSeason::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayerSeason::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerSeason::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerSeason::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerSeason::is_player_id_Valid() const{
    return m_player_id_isValid;
}

qint32 OAIPlayerSeason::getPlayerSeasonId() const {
    return m_player_season_id;
}
void OAIPlayerSeason::setPlayerSeasonId(const qint32 &player_season_id) {
    m_player_season_id = player_season_id;
    m_player_season_id_isSet = true;
}

bool OAIPlayerSeason::is_player_season_id_Set() const{
    return m_player_season_id_isSet;
}

bool OAIPlayerSeason::is_player_season_id_Valid() const{
    return m_player_season_id_isValid;
}

double OAIPlayerSeason::getPointsGained() const {
    return m_points_gained;
}
void OAIPlayerSeason::setPointsGained(const double &points_gained) {
    m_points_gained = points_gained;
    m_points_gained_isSet = true;
}

bool OAIPlayerSeason::is_points_gained_Set() const{
    return m_points_gained_isSet;
}

bool OAIPlayerSeason::is_points_gained_Valid() const{
    return m_points_gained_isValid;
}

double OAIPlayerSeason::getPointsLost() const {
    return m_points_lost;
}
void OAIPlayerSeason::setPointsLost(const double &points_lost) {
    m_points_lost = points_lost;
    m_points_lost_isSet = true;
}

bool OAIPlayerSeason::is_points_lost_Set() const{
    return m_points_lost_isSet;
}

bool OAIPlayerSeason::is_points_lost_Valid() const{
    return m_points_lost_isValid;
}

qint32 OAIPlayerSeason::getSeason() const {
    return m_season;
}
void OAIPlayerSeason::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayerSeason::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayerSeason::is_season_Valid() const{
    return m_season_isValid;
}

double OAIPlayerSeason::getTotalPoints() const {
    return m_total_points;
}
void OAIPlayerSeason::setTotalPoints(const double &total_points) {
    m_total_points = total_points;
    m_total_points_isSet = true;
}

bool OAIPlayerSeason::is_total_points_Set() const{
    return m_total_points_isSet;
}

bool OAIPlayerSeason::is_total_points_Valid() const{
    return m_total_points_isValid;
}

qint32 OAIPlayerSeason::getWorldGolfRank() const {
    return m_world_golf_rank;
}
void OAIPlayerSeason::setWorldGolfRank(const qint32 &world_golf_rank) {
    m_world_golf_rank = world_golf_rank;
    m_world_golf_rank_isSet = true;
}

bool OAIPlayerSeason::is_world_golf_rank_Set() const{
    return m_world_golf_rank_isSet;
}

bool OAIPlayerSeason::is_world_golf_rank_Valid() const{
    return m_world_golf_rank_isValid;
}

qint32 OAIPlayerSeason::getWorldGolfRankLastWeek() const {
    return m_world_golf_rank_last_week;
}
void OAIPlayerSeason::setWorldGolfRankLastWeek(const qint32 &world_golf_rank_last_week) {
    m_world_golf_rank_last_week = world_golf_rank_last_week;
    m_world_golf_rank_last_week_isSet = true;
}

bool OAIPlayerSeason::is_world_golf_rank_last_week_Set() const{
    return m_world_golf_rank_last_week_isSet;
}

bool OAIPlayerSeason::is_world_golf_rank_last_week_Valid() const{
    return m_world_golf_rank_last_week_isValid;
}

bool OAIPlayerSeason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_season_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_gained_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_lost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_golf_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_world_golf_rank_last_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerSeason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
