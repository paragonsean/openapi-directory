/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeason::OAISeason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeason::OAISeason() {
    this->initializeModel();
}

OAISeason::~OAISeason() {}

void OAISeason::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_season_id_isSet = false;
    m_season_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAISeason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeason::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_season_id_isValid = ::OpenAPI::fromJsonValue(m_season_id, json[QString("SeasonID")]);
    m_season_id_isSet = !json[QString("SeasonID")].isNull() && m_season_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;
}

QString OAISeason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeason::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_season_id_isSet) {
        obj.insert(QString("SeasonID"), ::OpenAPI::toJsonValue(m_season_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAISeason::getDescription() const {
    return m_description;
}
void OAISeason::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISeason::is_description_Set() const{
    return m_description_isSet;
}

bool OAISeason::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISeason::getEndDate() const {
    return m_end_date;
}
void OAISeason::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISeason::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISeason::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAISeason::getSeasonId() const {
    return m_season_id;
}
void OAISeason::setSeasonId(const qint32 &season_id) {
    m_season_id = season_id;
    m_season_id_isSet = true;
}

bool OAISeason::is_season_id_Set() const{
    return m_season_id_isSet;
}

bool OAISeason::is_season_id_Valid() const{
    return m_season_id_isValid;
}

QString OAISeason::getStartDate() const {
    return m_start_date;
}
void OAISeason::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISeason::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISeason::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAISeason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
