/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerRound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerRound::OAIPlayerRound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerRound::OAIPlayerRound() {
    this->initializeModel();
}

OAIPlayerRound::~OAIPlayerRound() {}

void OAIPlayerRound::initializeModel() {

    m_back_nine_start_isSet = false;
    m_back_nine_start_isValid = false;

    m_birdies_isSet = false;
    m_birdies_isValid = false;

    m_bogey_free_isSet = false;
    m_bogey_free_isValid = false;

    m_bogeys_isSet = false;
    m_bogeys_isValid = false;

    m_bounce_back_count_isSet = false;
    m_bounce_back_count_isValid = false;

    m_consecutive_birdie_or_better_count_isSet = false;
    m_consecutive_birdie_or_better_count_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_double_bogeys_isSet = false;
    m_double_bogeys_isValid = false;

    m_double_eagles_isSet = false;
    m_double_eagles_isValid = false;

    m_eagles_isSet = false;
    m_eagles_isValid = false;

    m_hole_in_ones_isSet = false;
    m_hole_in_ones_isValid = false;

    m_holes_isSet = false;
    m_holes_isValid = false;

    m_includes_five_or_more_birdies_or_better_isSet = false;
    m_includes_five_or_more_birdies_or_better_isValid = false;

    m_includes_streak_of_five_birdies_or_better_isSet = false;
    m_includes_streak_of_five_birdies_or_better_isValid = false;

    m_includes_streak_of_four_birdies_or_better_isSet = false;
    m_includes_streak_of_four_birdies_or_better_isValid = false;

    m_includes_streak_of_six_birdies_or_better_isSet = false;
    m_includes_streak_of_six_birdies_or_better_isValid = false;

    m_includes_streak_of_three_birdies_or_better_isSet = false;
    m_includes_streak_of_three_birdies_or_better_isValid = false;

    m_longest_birdie_or_better_streak_isSet = false;
    m_longest_birdie_or_better_streak_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_par_isSet = false;
    m_par_isValid = false;

    m_pars_isSet = false;
    m_pars_isValid = false;

    m_player_round_id_isSet = false;
    m_player_round_id_isValid = false;

    m_player_tournament_id_isSet = false;
    m_player_tournament_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_tee_time_isSet = false;
    m_tee_time_isValid = false;

    m_triple_bogeys_isSet = false;
    m_triple_bogeys_isValid = false;

    m_worse_than_double_bogey_isSet = false;
    m_worse_than_double_bogey_isValid = false;

    m_worse_than_triple_bogey_isSet = false;
    m_worse_than_triple_bogey_isValid = false;
}

void OAIPlayerRound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerRound::fromJsonObject(QJsonObject json) {

    m_back_nine_start_isValid = ::OpenAPI::fromJsonValue(m_back_nine_start, json[QString("BackNineStart")]);
    m_back_nine_start_isSet = !json[QString("BackNineStart")].isNull() && m_back_nine_start_isValid;

    m_birdies_isValid = ::OpenAPI::fromJsonValue(m_birdies, json[QString("Birdies")]);
    m_birdies_isSet = !json[QString("Birdies")].isNull() && m_birdies_isValid;

    m_bogey_free_isValid = ::OpenAPI::fromJsonValue(m_bogey_free, json[QString("BogeyFree")]);
    m_bogey_free_isSet = !json[QString("BogeyFree")].isNull() && m_bogey_free_isValid;

    m_bogeys_isValid = ::OpenAPI::fromJsonValue(m_bogeys, json[QString("Bogeys")]);
    m_bogeys_isSet = !json[QString("Bogeys")].isNull() && m_bogeys_isValid;

    m_bounce_back_count_isValid = ::OpenAPI::fromJsonValue(m_bounce_back_count, json[QString("BounceBackCount")]);
    m_bounce_back_count_isSet = !json[QString("BounceBackCount")].isNull() && m_bounce_back_count_isValid;

    m_consecutive_birdie_or_better_count_isValid = ::OpenAPI::fromJsonValue(m_consecutive_birdie_or_better_count, json[QString("ConsecutiveBirdieOrBetterCount")]);
    m_consecutive_birdie_or_better_count_isSet = !json[QString("ConsecutiveBirdieOrBetterCount")].isNull() && m_consecutive_birdie_or_better_count_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_double_bogeys_isValid = ::OpenAPI::fromJsonValue(m_double_bogeys, json[QString("DoubleBogeys")]);
    m_double_bogeys_isSet = !json[QString("DoubleBogeys")].isNull() && m_double_bogeys_isValid;

    m_double_eagles_isValid = ::OpenAPI::fromJsonValue(m_double_eagles, json[QString("DoubleEagles")]);
    m_double_eagles_isSet = !json[QString("DoubleEagles")].isNull() && m_double_eagles_isValid;

    m_eagles_isValid = ::OpenAPI::fromJsonValue(m_eagles, json[QString("Eagles")]);
    m_eagles_isSet = !json[QString("Eagles")].isNull() && m_eagles_isValid;

    m_hole_in_ones_isValid = ::OpenAPI::fromJsonValue(m_hole_in_ones, json[QString("HoleInOnes")]);
    m_hole_in_ones_isSet = !json[QString("HoleInOnes")].isNull() && m_hole_in_ones_isValid;

    m_holes_isValid = ::OpenAPI::fromJsonValue(m_holes, json[QString("Holes")]);
    m_holes_isSet = !json[QString("Holes")].isNull() && m_holes_isValid;

    m_includes_five_or_more_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_includes_five_or_more_birdies_or_better, json[QString("IncludesFiveOrMoreBirdiesOrBetter")]);
    m_includes_five_or_more_birdies_or_better_isSet = !json[QString("IncludesFiveOrMoreBirdiesOrBetter")].isNull() && m_includes_five_or_more_birdies_or_better_isValid;

    m_includes_streak_of_five_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_includes_streak_of_five_birdies_or_better, json[QString("IncludesStreakOfFiveBirdiesOrBetter")]);
    m_includes_streak_of_five_birdies_or_better_isSet = !json[QString("IncludesStreakOfFiveBirdiesOrBetter")].isNull() && m_includes_streak_of_five_birdies_or_better_isValid;

    m_includes_streak_of_four_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_includes_streak_of_four_birdies_or_better, json[QString("IncludesStreakOfFourBirdiesOrBetter")]);
    m_includes_streak_of_four_birdies_or_better_isSet = !json[QString("IncludesStreakOfFourBirdiesOrBetter")].isNull() && m_includes_streak_of_four_birdies_or_better_isValid;

    m_includes_streak_of_six_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_includes_streak_of_six_birdies_or_better, json[QString("IncludesStreakOfSixBirdiesOrBetter")]);
    m_includes_streak_of_six_birdies_or_better_isSet = !json[QString("IncludesStreakOfSixBirdiesOrBetter")].isNull() && m_includes_streak_of_six_birdies_or_better_isValid;

    m_includes_streak_of_three_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_includes_streak_of_three_birdies_or_better, json[QString("IncludesStreakOfThreeBirdiesOrBetter")]);
    m_includes_streak_of_three_birdies_or_better_isSet = !json[QString("IncludesStreakOfThreeBirdiesOrBetter")].isNull() && m_includes_streak_of_three_birdies_or_better_isValid;

    m_longest_birdie_or_better_streak_isValid = ::OpenAPI::fromJsonValue(m_longest_birdie_or_better_streak, json[QString("LongestBirdieOrBetterStreak")]);
    m_longest_birdie_or_better_streak_isSet = !json[QString("LongestBirdieOrBetterStreak")].isNull() && m_longest_birdie_or_better_streak_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_par_isValid = ::OpenAPI::fromJsonValue(m_par, json[QString("Par")]);
    m_par_isSet = !json[QString("Par")].isNull() && m_par_isValid;

    m_pars_isValid = ::OpenAPI::fromJsonValue(m_pars, json[QString("Pars")]);
    m_pars_isSet = !json[QString("Pars")].isNull() && m_pars_isValid;

    m_player_round_id_isValid = ::OpenAPI::fromJsonValue(m_player_round_id, json[QString("PlayerRoundID")]);
    m_player_round_id_isSet = !json[QString("PlayerRoundID")].isNull() && m_player_round_id_isValid;

    m_player_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_player_tournament_id, json[QString("PlayerTournamentID")]);
    m_player_tournament_id_isSet = !json[QString("PlayerTournamentID")].isNull() && m_player_tournament_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_tee_time_isValid = ::OpenAPI::fromJsonValue(m_tee_time, json[QString("TeeTime")]);
    m_tee_time_isSet = !json[QString("TeeTime")].isNull() && m_tee_time_isValid;

    m_triple_bogeys_isValid = ::OpenAPI::fromJsonValue(m_triple_bogeys, json[QString("TripleBogeys")]);
    m_triple_bogeys_isSet = !json[QString("TripleBogeys")].isNull() && m_triple_bogeys_isValid;

    m_worse_than_double_bogey_isValid = ::OpenAPI::fromJsonValue(m_worse_than_double_bogey, json[QString("WorseThanDoubleBogey")]);
    m_worse_than_double_bogey_isSet = !json[QString("WorseThanDoubleBogey")].isNull() && m_worse_than_double_bogey_isValid;

    m_worse_than_triple_bogey_isValid = ::OpenAPI::fromJsonValue(m_worse_than_triple_bogey, json[QString("WorseThanTripleBogey")]);
    m_worse_than_triple_bogey_isSet = !json[QString("WorseThanTripleBogey")].isNull() && m_worse_than_triple_bogey_isValid;
}

QString OAIPlayerRound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerRound::asJsonObject() const {
    QJsonObject obj;
    if (m_back_nine_start_isSet) {
        obj.insert(QString("BackNineStart"), ::OpenAPI::toJsonValue(m_back_nine_start));
    }
    if (m_birdies_isSet) {
        obj.insert(QString("Birdies"), ::OpenAPI::toJsonValue(m_birdies));
    }
    if (m_bogey_free_isSet) {
        obj.insert(QString("BogeyFree"), ::OpenAPI::toJsonValue(m_bogey_free));
    }
    if (m_bogeys_isSet) {
        obj.insert(QString("Bogeys"), ::OpenAPI::toJsonValue(m_bogeys));
    }
    if (m_bounce_back_count_isSet) {
        obj.insert(QString("BounceBackCount"), ::OpenAPI::toJsonValue(m_bounce_back_count));
    }
    if (m_consecutive_birdie_or_better_count_isSet) {
        obj.insert(QString("ConsecutiveBirdieOrBetterCount"), ::OpenAPI::toJsonValue(m_consecutive_birdie_or_better_count));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_double_bogeys_isSet) {
        obj.insert(QString("DoubleBogeys"), ::OpenAPI::toJsonValue(m_double_bogeys));
    }
    if (m_double_eagles_isSet) {
        obj.insert(QString("DoubleEagles"), ::OpenAPI::toJsonValue(m_double_eagles));
    }
    if (m_eagles_isSet) {
        obj.insert(QString("Eagles"), ::OpenAPI::toJsonValue(m_eagles));
    }
    if (m_hole_in_ones_isSet) {
        obj.insert(QString("HoleInOnes"), ::OpenAPI::toJsonValue(m_hole_in_ones));
    }
    if (m_holes.size() > 0) {
        obj.insert(QString("Holes"), ::OpenAPI::toJsonValue(m_holes));
    }
    if (m_includes_five_or_more_birdies_or_better_isSet) {
        obj.insert(QString("IncludesFiveOrMoreBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_includes_five_or_more_birdies_or_better));
    }
    if (m_includes_streak_of_five_birdies_or_better_isSet) {
        obj.insert(QString("IncludesStreakOfFiveBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_includes_streak_of_five_birdies_or_better));
    }
    if (m_includes_streak_of_four_birdies_or_better_isSet) {
        obj.insert(QString("IncludesStreakOfFourBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_includes_streak_of_four_birdies_or_better));
    }
    if (m_includes_streak_of_six_birdies_or_better_isSet) {
        obj.insert(QString("IncludesStreakOfSixBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_includes_streak_of_six_birdies_or_better));
    }
    if (m_includes_streak_of_three_birdies_or_better_isSet) {
        obj.insert(QString("IncludesStreakOfThreeBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_includes_streak_of_three_birdies_or_better));
    }
    if (m_longest_birdie_or_better_streak_isSet) {
        obj.insert(QString("LongestBirdieOrBetterStreak"), ::OpenAPI::toJsonValue(m_longest_birdie_or_better_streak));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_par_isSet) {
        obj.insert(QString("Par"), ::OpenAPI::toJsonValue(m_par));
    }
    if (m_pars_isSet) {
        obj.insert(QString("Pars"), ::OpenAPI::toJsonValue(m_pars));
    }
    if (m_player_round_id_isSet) {
        obj.insert(QString("PlayerRoundID"), ::OpenAPI::toJsonValue(m_player_round_id));
    }
    if (m_player_tournament_id_isSet) {
        obj.insert(QString("PlayerTournamentID"), ::OpenAPI::toJsonValue(m_player_tournament_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_tee_time_isSet) {
        obj.insert(QString("TeeTime"), ::OpenAPI::toJsonValue(m_tee_time));
    }
    if (m_triple_bogeys_isSet) {
        obj.insert(QString("TripleBogeys"), ::OpenAPI::toJsonValue(m_triple_bogeys));
    }
    if (m_worse_than_double_bogey_isSet) {
        obj.insert(QString("WorseThanDoubleBogey"), ::OpenAPI::toJsonValue(m_worse_than_double_bogey));
    }
    if (m_worse_than_triple_bogey_isSet) {
        obj.insert(QString("WorseThanTripleBogey"), ::OpenAPI::toJsonValue(m_worse_than_triple_bogey));
    }
    return obj;
}

bool OAIPlayerRound::isBackNineStart() const {
    return m_back_nine_start;
}
void OAIPlayerRound::setBackNineStart(const bool &back_nine_start) {
    m_back_nine_start = back_nine_start;
    m_back_nine_start_isSet = true;
}

bool OAIPlayerRound::is_back_nine_start_Set() const{
    return m_back_nine_start_isSet;
}

bool OAIPlayerRound::is_back_nine_start_Valid() const{
    return m_back_nine_start_isValid;
}

qint32 OAIPlayerRound::getBirdies() const {
    return m_birdies;
}
void OAIPlayerRound::setBirdies(const qint32 &birdies) {
    m_birdies = birdies;
    m_birdies_isSet = true;
}

bool OAIPlayerRound::is_birdies_Set() const{
    return m_birdies_isSet;
}

bool OAIPlayerRound::is_birdies_Valid() const{
    return m_birdies_isValid;
}

bool OAIPlayerRound::isBogeyFree() const {
    return m_bogey_free;
}
void OAIPlayerRound::setBogeyFree(const bool &bogey_free) {
    m_bogey_free = bogey_free;
    m_bogey_free_isSet = true;
}

bool OAIPlayerRound::is_bogey_free_Set() const{
    return m_bogey_free_isSet;
}

bool OAIPlayerRound::is_bogey_free_Valid() const{
    return m_bogey_free_isValid;
}

qint32 OAIPlayerRound::getBogeys() const {
    return m_bogeys;
}
void OAIPlayerRound::setBogeys(const qint32 &bogeys) {
    m_bogeys = bogeys;
    m_bogeys_isSet = true;
}

bool OAIPlayerRound::is_bogeys_Set() const{
    return m_bogeys_isSet;
}

bool OAIPlayerRound::is_bogeys_Valid() const{
    return m_bogeys_isValid;
}

double OAIPlayerRound::getBounceBackCount() const {
    return m_bounce_back_count;
}
void OAIPlayerRound::setBounceBackCount(const double &bounce_back_count) {
    m_bounce_back_count = bounce_back_count;
    m_bounce_back_count_isSet = true;
}

bool OAIPlayerRound::is_bounce_back_count_Set() const{
    return m_bounce_back_count_isSet;
}

bool OAIPlayerRound::is_bounce_back_count_Valid() const{
    return m_bounce_back_count_isValid;
}

double OAIPlayerRound::getConsecutiveBirdieOrBetterCount() const {
    return m_consecutive_birdie_or_better_count;
}
void OAIPlayerRound::setConsecutiveBirdieOrBetterCount(const double &consecutive_birdie_or_better_count) {
    m_consecutive_birdie_or_better_count = consecutive_birdie_or_better_count;
    m_consecutive_birdie_or_better_count_isSet = true;
}

bool OAIPlayerRound::is_consecutive_birdie_or_better_count_Set() const{
    return m_consecutive_birdie_or_better_count_isSet;
}

bool OAIPlayerRound::is_consecutive_birdie_or_better_count_Valid() const{
    return m_consecutive_birdie_or_better_count_isValid;
}

QString OAIPlayerRound::getDay() const {
    return m_day;
}
void OAIPlayerRound::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIPlayerRound::is_day_Set() const{
    return m_day_isSet;
}

bool OAIPlayerRound::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIPlayerRound::getDoubleBogeys() const {
    return m_double_bogeys;
}
void OAIPlayerRound::setDoubleBogeys(const qint32 &double_bogeys) {
    m_double_bogeys = double_bogeys;
    m_double_bogeys_isSet = true;
}

bool OAIPlayerRound::is_double_bogeys_Set() const{
    return m_double_bogeys_isSet;
}

bool OAIPlayerRound::is_double_bogeys_Valid() const{
    return m_double_bogeys_isValid;
}

qint32 OAIPlayerRound::getDoubleEagles() const {
    return m_double_eagles;
}
void OAIPlayerRound::setDoubleEagles(const qint32 &double_eagles) {
    m_double_eagles = double_eagles;
    m_double_eagles_isSet = true;
}

bool OAIPlayerRound::is_double_eagles_Set() const{
    return m_double_eagles_isSet;
}

bool OAIPlayerRound::is_double_eagles_Valid() const{
    return m_double_eagles_isValid;
}

qint32 OAIPlayerRound::getEagles() const {
    return m_eagles;
}
void OAIPlayerRound::setEagles(const qint32 &eagles) {
    m_eagles = eagles;
    m_eagles_isSet = true;
}

bool OAIPlayerRound::is_eagles_Set() const{
    return m_eagles_isSet;
}

bool OAIPlayerRound::is_eagles_Valid() const{
    return m_eagles_isValid;
}

qint32 OAIPlayerRound::getHoleInOnes() const {
    return m_hole_in_ones;
}
void OAIPlayerRound::setHoleInOnes(const qint32 &hole_in_ones) {
    m_hole_in_ones = hole_in_ones;
    m_hole_in_ones_isSet = true;
}

bool OAIPlayerRound::is_hole_in_ones_Set() const{
    return m_hole_in_ones_isSet;
}

bool OAIPlayerRound::is_hole_in_ones_Valid() const{
    return m_hole_in_ones_isValid;
}

QList<OAIPlayerHole> OAIPlayerRound::getHoles() const {
    return m_holes;
}
void OAIPlayerRound::setHoles(const QList<OAIPlayerHole> &holes) {
    m_holes = holes;
    m_holes_isSet = true;
}

bool OAIPlayerRound::is_holes_Set() const{
    return m_holes_isSet;
}

bool OAIPlayerRound::is_holes_Valid() const{
    return m_holes_isValid;
}

bool OAIPlayerRound::isIncludesFiveOrMoreBirdiesOrBetter() const {
    return m_includes_five_or_more_birdies_or_better;
}
void OAIPlayerRound::setIncludesFiveOrMoreBirdiesOrBetter(const bool &includes_five_or_more_birdies_or_better) {
    m_includes_five_or_more_birdies_or_better = includes_five_or_more_birdies_or_better;
    m_includes_five_or_more_birdies_or_better_isSet = true;
}

bool OAIPlayerRound::is_includes_five_or_more_birdies_or_better_Set() const{
    return m_includes_five_or_more_birdies_or_better_isSet;
}

bool OAIPlayerRound::is_includes_five_or_more_birdies_or_better_Valid() const{
    return m_includes_five_or_more_birdies_or_better_isValid;
}

bool OAIPlayerRound::isIncludesStreakOfFiveBirdiesOrBetter() const {
    return m_includes_streak_of_five_birdies_or_better;
}
void OAIPlayerRound::setIncludesStreakOfFiveBirdiesOrBetter(const bool &includes_streak_of_five_birdies_or_better) {
    m_includes_streak_of_five_birdies_or_better = includes_streak_of_five_birdies_or_better;
    m_includes_streak_of_five_birdies_or_better_isSet = true;
}

bool OAIPlayerRound::is_includes_streak_of_five_birdies_or_better_Set() const{
    return m_includes_streak_of_five_birdies_or_better_isSet;
}

bool OAIPlayerRound::is_includes_streak_of_five_birdies_or_better_Valid() const{
    return m_includes_streak_of_five_birdies_or_better_isValid;
}

bool OAIPlayerRound::isIncludesStreakOfFourBirdiesOrBetter() const {
    return m_includes_streak_of_four_birdies_or_better;
}
void OAIPlayerRound::setIncludesStreakOfFourBirdiesOrBetter(const bool &includes_streak_of_four_birdies_or_better) {
    m_includes_streak_of_four_birdies_or_better = includes_streak_of_four_birdies_or_better;
    m_includes_streak_of_four_birdies_or_better_isSet = true;
}

bool OAIPlayerRound::is_includes_streak_of_four_birdies_or_better_Set() const{
    return m_includes_streak_of_four_birdies_or_better_isSet;
}

bool OAIPlayerRound::is_includes_streak_of_four_birdies_or_better_Valid() const{
    return m_includes_streak_of_four_birdies_or_better_isValid;
}

bool OAIPlayerRound::isIncludesStreakOfSixBirdiesOrBetter() const {
    return m_includes_streak_of_six_birdies_or_better;
}
void OAIPlayerRound::setIncludesStreakOfSixBirdiesOrBetter(const bool &includes_streak_of_six_birdies_or_better) {
    m_includes_streak_of_six_birdies_or_better = includes_streak_of_six_birdies_or_better;
    m_includes_streak_of_six_birdies_or_better_isSet = true;
}

bool OAIPlayerRound::is_includes_streak_of_six_birdies_or_better_Set() const{
    return m_includes_streak_of_six_birdies_or_better_isSet;
}

bool OAIPlayerRound::is_includes_streak_of_six_birdies_or_better_Valid() const{
    return m_includes_streak_of_six_birdies_or_better_isValid;
}

bool OAIPlayerRound::isIncludesStreakOfThreeBirdiesOrBetter() const {
    return m_includes_streak_of_three_birdies_or_better;
}
void OAIPlayerRound::setIncludesStreakOfThreeBirdiesOrBetter(const bool &includes_streak_of_three_birdies_or_better) {
    m_includes_streak_of_three_birdies_or_better = includes_streak_of_three_birdies_or_better;
    m_includes_streak_of_three_birdies_or_better_isSet = true;
}

bool OAIPlayerRound::is_includes_streak_of_three_birdies_or_better_Set() const{
    return m_includes_streak_of_three_birdies_or_better_isSet;
}

bool OAIPlayerRound::is_includes_streak_of_three_birdies_or_better_Valid() const{
    return m_includes_streak_of_three_birdies_or_better_isValid;
}

double OAIPlayerRound::getLongestBirdieOrBetterStreak() const {
    return m_longest_birdie_or_better_streak;
}
void OAIPlayerRound::setLongestBirdieOrBetterStreak(const double &longest_birdie_or_better_streak) {
    m_longest_birdie_or_better_streak = longest_birdie_or_better_streak;
    m_longest_birdie_or_better_streak_isSet = true;
}

bool OAIPlayerRound::is_longest_birdie_or_better_streak_Set() const{
    return m_longest_birdie_or_better_streak_isSet;
}

bool OAIPlayerRound::is_longest_birdie_or_better_streak_Valid() const{
    return m_longest_birdie_or_better_streak_isValid;
}

qint32 OAIPlayerRound::getNumber() const {
    return m_number;
}
void OAIPlayerRound::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerRound::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerRound::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlayerRound::getPar() const {
    return m_par;
}
void OAIPlayerRound::setPar(const qint32 &par) {
    m_par = par;
    m_par_isSet = true;
}

bool OAIPlayerRound::is_par_Set() const{
    return m_par_isSet;
}

bool OAIPlayerRound::is_par_Valid() const{
    return m_par_isValid;
}

qint32 OAIPlayerRound::getPars() const {
    return m_pars;
}
void OAIPlayerRound::setPars(const qint32 &pars) {
    m_pars = pars;
    m_pars_isSet = true;
}

bool OAIPlayerRound::is_pars_Set() const{
    return m_pars_isSet;
}

bool OAIPlayerRound::is_pars_Valid() const{
    return m_pars_isValid;
}

qint32 OAIPlayerRound::getPlayerRoundId() const {
    return m_player_round_id;
}
void OAIPlayerRound::setPlayerRoundId(const qint32 &player_round_id) {
    m_player_round_id = player_round_id;
    m_player_round_id_isSet = true;
}

bool OAIPlayerRound::is_player_round_id_Set() const{
    return m_player_round_id_isSet;
}

bool OAIPlayerRound::is_player_round_id_Valid() const{
    return m_player_round_id_isValid;
}

qint32 OAIPlayerRound::getPlayerTournamentId() const {
    return m_player_tournament_id;
}
void OAIPlayerRound::setPlayerTournamentId(const qint32 &player_tournament_id) {
    m_player_tournament_id = player_tournament_id;
    m_player_tournament_id_isSet = true;
}

bool OAIPlayerRound::is_player_tournament_id_Set() const{
    return m_player_tournament_id_isSet;
}

bool OAIPlayerRound::is_player_tournament_id_Valid() const{
    return m_player_tournament_id_isValid;
}

qint32 OAIPlayerRound::getScore() const {
    return m_score;
}
void OAIPlayerRound::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPlayerRound::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPlayerRound::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIPlayerRound::getTeeTime() const {
    return m_tee_time;
}
void OAIPlayerRound::setTeeTime(const QString &tee_time) {
    m_tee_time = tee_time;
    m_tee_time_isSet = true;
}

bool OAIPlayerRound::is_tee_time_Set() const{
    return m_tee_time_isSet;
}

bool OAIPlayerRound::is_tee_time_Valid() const{
    return m_tee_time_isValid;
}

qint32 OAIPlayerRound::getTripleBogeys() const {
    return m_triple_bogeys;
}
void OAIPlayerRound::setTripleBogeys(const qint32 &triple_bogeys) {
    m_triple_bogeys = triple_bogeys;
    m_triple_bogeys_isSet = true;
}

bool OAIPlayerRound::is_triple_bogeys_Set() const{
    return m_triple_bogeys_isSet;
}

bool OAIPlayerRound::is_triple_bogeys_Valid() const{
    return m_triple_bogeys_isValid;
}

qint32 OAIPlayerRound::getWorseThanDoubleBogey() const {
    return m_worse_than_double_bogey;
}
void OAIPlayerRound::setWorseThanDoubleBogey(const qint32 &worse_than_double_bogey) {
    m_worse_than_double_bogey = worse_than_double_bogey;
    m_worse_than_double_bogey_isSet = true;
}

bool OAIPlayerRound::is_worse_than_double_bogey_Set() const{
    return m_worse_than_double_bogey_isSet;
}

bool OAIPlayerRound::is_worse_than_double_bogey_Valid() const{
    return m_worse_than_double_bogey_isValid;
}

qint32 OAIPlayerRound::getWorseThanTripleBogey() const {
    return m_worse_than_triple_bogey;
}
void OAIPlayerRound::setWorseThanTripleBogey(const qint32 &worse_than_triple_bogey) {
    m_worse_than_triple_bogey = worse_than_triple_bogey;
    m_worse_than_triple_bogey_isSet = true;
}

bool OAIPlayerRound::is_worse_than_triple_bogey_Set() const{
    return m_worse_than_triple_bogey_isSet;
}

bool OAIPlayerRound::is_worse_than_triple_bogey_Valid() const{
    return m_worse_than_triple_bogey_isValid;
}

bool OAIPlayerRound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_back_nine_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birdies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bogey_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bogeys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounce_back_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consecutive_birdie_or_better_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_bogeys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_eagles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eagles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hole_in_ones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_five_or_more_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_streak_of_five_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_streak_of_four_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_streak_of_six_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes_streak_of_three_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longest_birdie_or_better_streak_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_round_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tee_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triple_bogeys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worse_than_double_bogey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worse_than_triple_bogey_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerRound::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
