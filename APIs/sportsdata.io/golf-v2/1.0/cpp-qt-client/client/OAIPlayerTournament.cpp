/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerTournament.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerTournament::OAIPlayerTournament(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerTournament::OAIPlayerTournament() {
    this->initializeModel();
}

OAIPlayerTournament::~OAIPlayerTournament() {}

void OAIPlayerTournament::initializeModel() {

    m_birdies_isSet = false;
    m_birdies_isValid = false;

    m_bogey_free_rounds_isSet = false;
    m_bogey_free_rounds_isValid = false;

    m_bogeys_isSet = false;
    m_bogeys_isValid = false;

    m_bounce_back_count_isSet = false;
    m_bounce_back_count_isValid = false;

    m_consecutive_birdie_or_better_count_isSet = false;
    m_consecutive_birdie_or_better_count_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_double_bogeys_isSet = false;
    m_double_bogeys_isValid = false;

    m_double_eagles_isSet = false;
    m_double_eagles_isValid = false;

    m_draft_kings_salary_isSet = false;
    m_draft_kings_salary_isValid = false;

    m_eagles_isSet = false;
    m_eagles_isValid = false;

    m_earnings_isSet = false;
    m_earnings_isValid = false;

    m_fan_duel_salary_isSet = false;
    m_fan_duel_salary_isValid = false;

    m_fantasy_draft_salary_isSet = false;
    m_fantasy_draft_salary_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_fantasy_draft_isSet = false;
    m_fantasy_points_fantasy_draft_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_fed_ex_points_isSet = false;
    m_fed_ex_points_isValid = false;

    m_hole_in_ones_isSet = false;
    m_hole_in_ones_isValid = false;

    m_is_alternate_isSet = false;
    m_is_alternate_isValid = false;

    m_is_withdrawn_isSet = false;
    m_is_withdrawn_isValid = false;

    m_made_cut_isSet = false;
    m_made_cut_isValid = false;

    m_made_cut_did_not_finish_isSet = false;
    m_made_cut_did_not_finish_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_odds_to_win_isSet = false;
    m_odds_to_win_isValid = false;

    m_odds_to_win_description_isSet = false;
    m_odds_to_win_description_isValid = false;

    m_pars_isSet = false;
    m_pars_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_player_tournament_id_isSet = false;
    m_player_tournament_id_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_rounds_isSet = false;
    m_rounds_isValid = false;

    m_rounds_under_seventy_isSet = false;
    m_rounds_under_seventy_isValid = false;

    m_rounds_with_five_or_more_birdies_or_better_isSet = false;
    m_rounds_with_five_or_more_birdies_or_better_isValid = false;

    m_streaks_of_five_birdies_or_better_isSet = false;
    m_streaks_of_five_birdies_or_better_isValid = false;

    m_streaks_of_four_birdies_or_better_isSet = false;
    m_streaks_of_four_birdies_or_better_isValid = false;

    m_streaks_of_six_birdies_or_better_isSet = false;
    m_streaks_of_six_birdies_or_better_isValid = false;

    m_streaks_of_three_birdies_or_better_isSet = false;
    m_streaks_of_three_birdies_or_better_isValid = false;

    m_tee_time_isSet = false;
    m_tee_time_isValid = false;

    m_total_score_isSet = false;
    m_total_score_isValid = false;

    m_total_strokes_isSet = false;
    m_total_strokes_isValid = false;

    m_total_through_isSet = false;
    m_total_through_isValid = false;

    m_tournament_id_isSet = false;
    m_tournament_id_isValid = false;

    m_tournament_status_isSet = false;
    m_tournament_status_isValid = false;

    m_triple_bogeys_isSet = false;
    m_triple_bogeys_isValid = false;

    m_win_isSet = false;
    m_win_isValid = false;

    m_worse_than_double_bogey_isSet = false;
    m_worse_than_double_bogey_isValid = false;

    m_worse_than_triple_bogey_isSet = false;
    m_worse_than_triple_bogey_isValid = false;
}

void OAIPlayerTournament::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerTournament::fromJsonObject(QJsonObject json) {

    m_birdies_isValid = ::OpenAPI::fromJsonValue(m_birdies, json[QString("Birdies")]);
    m_birdies_isSet = !json[QString("Birdies")].isNull() && m_birdies_isValid;

    m_bogey_free_rounds_isValid = ::OpenAPI::fromJsonValue(m_bogey_free_rounds, json[QString("BogeyFreeRounds")]);
    m_bogey_free_rounds_isSet = !json[QString("BogeyFreeRounds")].isNull() && m_bogey_free_rounds_isValid;

    m_bogeys_isValid = ::OpenAPI::fromJsonValue(m_bogeys, json[QString("Bogeys")]);
    m_bogeys_isSet = !json[QString("Bogeys")].isNull() && m_bogeys_isValid;

    m_bounce_back_count_isValid = ::OpenAPI::fromJsonValue(m_bounce_back_count, json[QString("BounceBackCount")]);
    m_bounce_back_count_isSet = !json[QString("BounceBackCount")].isNull() && m_bounce_back_count_isValid;

    m_consecutive_birdie_or_better_count_isValid = ::OpenAPI::fromJsonValue(m_consecutive_birdie_or_better_count, json[QString("ConsecutiveBirdieOrBetterCount")]);
    m_consecutive_birdie_or_better_count_isSet = !json[QString("ConsecutiveBirdieOrBetterCount")].isNull() && m_consecutive_birdie_or_better_count_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_double_bogeys_isValid = ::OpenAPI::fromJsonValue(m_double_bogeys, json[QString("DoubleBogeys")]);
    m_double_bogeys_isSet = !json[QString("DoubleBogeys")].isNull() && m_double_bogeys_isValid;

    m_double_eagles_isValid = ::OpenAPI::fromJsonValue(m_double_eagles, json[QString("DoubleEagles")]);
    m_double_eagles_isSet = !json[QString("DoubleEagles")].isNull() && m_double_eagles_isValid;

    m_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_salary, json[QString("DraftKingsSalary")]);
    m_draft_kings_salary_isSet = !json[QString("DraftKingsSalary")].isNull() && m_draft_kings_salary_isValid;

    m_eagles_isValid = ::OpenAPI::fromJsonValue(m_eagles, json[QString("Eagles")]);
    m_eagles_isSet = !json[QString("Eagles")].isNull() && m_eagles_isValid;

    m_earnings_isValid = ::OpenAPI::fromJsonValue(m_earnings, json[QString("Earnings")]);
    m_earnings_isSet = !json[QString("Earnings")].isNull() && m_earnings_isValid;

    m_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_salary, json[QString("FanDuelSalary")]);
    m_fan_duel_salary_isSet = !json[QString("FanDuelSalary")].isNull() && m_fan_duel_salary_isValid;

    m_fantasy_draft_salary_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_salary, json[QString("FantasyDraftSalary")]);
    m_fantasy_draft_salary_isSet = !json[QString("FantasyDraftSalary")].isNull() && m_fantasy_draft_salary_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_fantasy_draft_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fantasy_draft, json[QString("FantasyPointsFantasyDraft")]);
    m_fantasy_points_fantasy_draft_isSet = !json[QString("FantasyPointsFantasyDraft")].isNull() && m_fantasy_points_fantasy_draft_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_fed_ex_points_isValid = ::OpenAPI::fromJsonValue(m_fed_ex_points, json[QString("FedExPoints")]);
    m_fed_ex_points_isSet = !json[QString("FedExPoints")].isNull() && m_fed_ex_points_isValid;

    m_hole_in_ones_isValid = ::OpenAPI::fromJsonValue(m_hole_in_ones, json[QString("HoleInOnes")]);
    m_hole_in_ones_isSet = !json[QString("HoleInOnes")].isNull() && m_hole_in_ones_isValid;

    m_is_alternate_isValid = ::OpenAPI::fromJsonValue(m_is_alternate, json[QString("IsAlternate")]);
    m_is_alternate_isSet = !json[QString("IsAlternate")].isNull() && m_is_alternate_isValid;

    m_is_withdrawn_isValid = ::OpenAPI::fromJsonValue(m_is_withdrawn, json[QString("IsWithdrawn")]);
    m_is_withdrawn_isSet = !json[QString("IsWithdrawn")].isNull() && m_is_withdrawn_isValid;

    m_made_cut_isValid = ::OpenAPI::fromJsonValue(m_made_cut, json[QString("MadeCut")]);
    m_made_cut_isSet = !json[QString("MadeCut")].isNull() && m_made_cut_isValid;

    m_made_cut_did_not_finish_isValid = ::OpenAPI::fromJsonValue(m_made_cut_did_not_finish, json[QString("MadeCutDidNotFinish")]);
    m_made_cut_did_not_finish_isSet = !json[QString("MadeCutDidNotFinish")].isNull() && m_made_cut_did_not_finish_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_odds_to_win_isValid = ::OpenAPI::fromJsonValue(m_odds_to_win, json[QString("OddsToWin")]);
    m_odds_to_win_isSet = !json[QString("OddsToWin")].isNull() && m_odds_to_win_isValid;

    m_odds_to_win_description_isValid = ::OpenAPI::fromJsonValue(m_odds_to_win_description, json[QString("OddsToWinDescription")]);
    m_odds_to_win_description_isSet = !json[QString("OddsToWinDescription")].isNull() && m_odds_to_win_description_isValid;

    m_pars_isValid = ::OpenAPI::fromJsonValue(m_pars, json[QString("Pars")]);
    m_pars_isSet = !json[QString("Pars")].isNull() && m_pars_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_player_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_player_tournament_id, json[QString("PlayerTournamentID")]);
    m_player_tournament_id_isSet = !json[QString("PlayerTournamentID")].isNull() && m_player_tournament_id_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("Rank")]);
    m_rank_isSet = !json[QString("Rank")].isNull() && m_rank_isValid;

    m_rounds_isValid = ::OpenAPI::fromJsonValue(m_rounds, json[QString("Rounds")]);
    m_rounds_isSet = !json[QString("Rounds")].isNull() && m_rounds_isValid;

    m_rounds_under_seventy_isValid = ::OpenAPI::fromJsonValue(m_rounds_under_seventy, json[QString("RoundsUnderSeventy")]);
    m_rounds_under_seventy_isSet = !json[QString("RoundsUnderSeventy")].isNull() && m_rounds_under_seventy_isValid;

    m_rounds_with_five_or_more_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_rounds_with_five_or_more_birdies_or_better, json[QString("RoundsWithFiveOrMoreBirdiesOrBetter")]);
    m_rounds_with_five_or_more_birdies_or_better_isSet = !json[QString("RoundsWithFiveOrMoreBirdiesOrBetter")].isNull() && m_rounds_with_five_or_more_birdies_or_better_isValid;

    m_streaks_of_five_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_streaks_of_five_birdies_or_better, json[QString("StreaksOfFiveBirdiesOrBetter")]);
    m_streaks_of_five_birdies_or_better_isSet = !json[QString("StreaksOfFiveBirdiesOrBetter")].isNull() && m_streaks_of_five_birdies_or_better_isValid;

    m_streaks_of_four_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_streaks_of_four_birdies_or_better, json[QString("StreaksOfFourBirdiesOrBetter")]);
    m_streaks_of_four_birdies_or_better_isSet = !json[QString("StreaksOfFourBirdiesOrBetter")].isNull() && m_streaks_of_four_birdies_or_better_isValid;

    m_streaks_of_six_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_streaks_of_six_birdies_or_better, json[QString("StreaksOfSixBirdiesOrBetter")]);
    m_streaks_of_six_birdies_or_better_isSet = !json[QString("StreaksOfSixBirdiesOrBetter")].isNull() && m_streaks_of_six_birdies_or_better_isValid;

    m_streaks_of_three_birdies_or_better_isValid = ::OpenAPI::fromJsonValue(m_streaks_of_three_birdies_or_better, json[QString("StreaksOfThreeBirdiesOrBetter")]);
    m_streaks_of_three_birdies_or_better_isSet = !json[QString("StreaksOfThreeBirdiesOrBetter")].isNull() && m_streaks_of_three_birdies_or_better_isValid;

    m_tee_time_isValid = ::OpenAPI::fromJsonValue(m_tee_time, json[QString("TeeTime")]);
    m_tee_time_isSet = !json[QString("TeeTime")].isNull() && m_tee_time_isValid;

    m_total_score_isValid = ::OpenAPI::fromJsonValue(m_total_score, json[QString("TotalScore")]);
    m_total_score_isSet = !json[QString("TotalScore")].isNull() && m_total_score_isValid;

    m_total_strokes_isValid = ::OpenAPI::fromJsonValue(m_total_strokes, json[QString("TotalStrokes")]);
    m_total_strokes_isSet = !json[QString("TotalStrokes")].isNull() && m_total_strokes_isValid;

    m_total_through_isValid = ::OpenAPI::fromJsonValue(m_total_through, json[QString("TotalThrough")]);
    m_total_through_isSet = !json[QString("TotalThrough")].isNull() && m_total_through_isValid;

    m_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_tournament_id, json[QString("TournamentID")]);
    m_tournament_id_isSet = !json[QString("TournamentID")].isNull() && m_tournament_id_isValid;

    m_tournament_status_isValid = ::OpenAPI::fromJsonValue(m_tournament_status, json[QString("TournamentStatus")]);
    m_tournament_status_isSet = !json[QString("TournamentStatus")].isNull() && m_tournament_status_isValid;

    m_triple_bogeys_isValid = ::OpenAPI::fromJsonValue(m_triple_bogeys, json[QString("TripleBogeys")]);
    m_triple_bogeys_isSet = !json[QString("TripleBogeys")].isNull() && m_triple_bogeys_isValid;

    m_win_isValid = ::OpenAPI::fromJsonValue(m_win, json[QString("Win")]);
    m_win_isSet = !json[QString("Win")].isNull() && m_win_isValid;

    m_worse_than_double_bogey_isValid = ::OpenAPI::fromJsonValue(m_worse_than_double_bogey, json[QString("WorseThanDoubleBogey")]);
    m_worse_than_double_bogey_isSet = !json[QString("WorseThanDoubleBogey")].isNull() && m_worse_than_double_bogey_isValid;

    m_worse_than_triple_bogey_isValid = ::OpenAPI::fromJsonValue(m_worse_than_triple_bogey, json[QString("WorseThanTripleBogey")]);
    m_worse_than_triple_bogey_isSet = !json[QString("WorseThanTripleBogey")].isNull() && m_worse_than_triple_bogey_isValid;
}

QString OAIPlayerTournament::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerTournament::asJsonObject() const {
    QJsonObject obj;
    if (m_birdies_isSet) {
        obj.insert(QString("Birdies"), ::OpenAPI::toJsonValue(m_birdies));
    }
    if (m_bogey_free_rounds_isSet) {
        obj.insert(QString("BogeyFreeRounds"), ::OpenAPI::toJsonValue(m_bogey_free_rounds));
    }
    if (m_bogeys_isSet) {
        obj.insert(QString("Bogeys"), ::OpenAPI::toJsonValue(m_bogeys));
    }
    if (m_bounce_back_count_isSet) {
        obj.insert(QString("BounceBackCount"), ::OpenAPI::toJsonValue(m_bounce_back_count));
    }
    if (m_consecutive_birdie_or_better_count_isSet) {
        obj.insert(QString("ConsecutiveBirdieOrBetterCount"), ::OpenAPI::toJsonValue(m_consecutive_birdie_or_better_count));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_double_bogeys_isSet) {
        obj.insert(QString("DoubleBogeys"), ::OpenAPI::toJsonValue(m_double_bogeys));
    }
    if (m_double_eagles_isSet) {
        obj.insert(QString("DoubleEagles"), ::OpenAPI::toJsonValue(m_double_eagles));
    }
    if (m_draft_kings_salary_isSet) {
        obj.insert(QString("DraftKingsSalary"), ::OpenAPI::toJsonValue(m_draft_kings_salary));
    }
    if (m_eagles_isSet) {
        obj.insert(QString("Eagles"), ::OpenAPI::toJsonValue(m_eagles));
    }
    if (m_earnings_isSet) {
        obj.insert(QString("Earnings"), ::OpenAPI::toJsonValue(m_earnings));
    }
    if (m_fan_duel_salary_isSet) {
        obj.insert(QString("FanDuelSalary"), ::OpenAPI::toJsonValue(m_fan_duel_salary));
    }
    if (m_fantasy_draft_salary_isSet) {
        obj.insert(QString("FantasyDraftSalary"), ::OpenAPI::toJsonValue(m_fantasy_draft_salary));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_fantasy_draft_isSet) {
        obj.insert(QString("FantasyPointsFantasyDraft"), ::OpenAPI::toJsonValue(m_fantasy_points_fantasy_draft));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_fed_ex_points_isSet) {
        obj.insert(QString("FedExPoints"), ::OpenAPI::toJsonValue(m_fed_ex_points));
    }
    if (m_hole_in_ones_isSet) {
        obj.insert(QString("HoleInOnes"), ::OpenAPI::toJsonValue(m_hole_in_ones));
    }
    if (m_is_alternate_isSet) {
        obj.insert(QString("IsAlternate"), ::OpenAPI::toJsonValue(m_is_alternate));
    }
    if (m_is_withdrawn_isSet) {
        obj.insert(QString("IsWithdrawn"), ::OpenAPI::toJsonValue(m_is_withdrawn));
    }
    if (m_made_cut_isSet) {
        obj.insert(QString("MadeCut"), ::OpenAPI::toJsonValue(m_made_cut));
    }
    if (m_made_cut_did_not_finish_isSet) {
        obj.insert(QString("MadeCutDidNotFinish"), ::OpenAPI::toJsonValue(m_made_cut_did_not_finish));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_odds_to_win_isSet) {
        obj.insert(QString("OddsToWin"), ::OpenAPI::toJsonValue(m_odds_to_win));
    }
    if (m_odds_to_win_description_isSet) {
        obj.insert(QString("OddsToWinDescription"), ::OpenAPI::toJsonValue(m_odds_to_win_description));
    }
    if (m_pars_isSet) {
        obj.insert(QString("Pars"), ::OpenAPI::toJsonValue(m_pars));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_player_tournament_id_isSet) {
        obj.insert(QString("PlayerTournamentID"), ::OpenAPI::toJsonValue(m_player_tournament_id));
    }
    if (m_rank_isSet) {
        obj.insert(QString("Rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_rounds.size() > 0) {
        obj.insert(QString("Rounds"), ::OpenAPI::toJsonValue(m_rounds));
    }
    if (m_rounds_under_seventy_isSet) {
        obj.insert(QString("RoundsUnderSeventy"), ::OpenAPI::toJsonValue(m_rounds_under_seventy));
    }
    if (m_rounds_with_five_or_more_birdies_or_better_isSet) {
        obj.insert(QString("RoundsWithFiveOrMoreBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_rounds_with_five_or_more_birdies_or_better));
    }
    if (m_streaks_of_five_birdies_or_better_isSet) {
        obj.insert(QString("StreaksOfFiveBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_streaks_of_five_birdies_or_better));
    }
    if (m_streaks_of_four_birdies_or_better_isSet) {
        obj.insert(QString("StreaksOfFourBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_streaks_of_four_birdies_or_better));
    }
    if (m_streaks_of_six_birdies_or_better_isSet) {
        obj.insert(QString("StreaksOfSixBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_streaks_of_six_birdies_or_better));
    }
    if (m_streaks_of_three_birdies_or_better_isSet) {
        obj.insert(QString("StreaksOfThreeBirdiesOrBetter"), ::OpenAPI::toJsonValue(m_streaks_of_three_birdies_or_better));
    }
    if (m_tee_time_isSet) {
        obj.insert(QString("TeeTime"), ::OpenAPI::toJsonValue(m_tee_time));
    }
    if (m_total_score_isSet) {
        obj.insert(QString("TotalScore"), ::OpenAPI::toJsonValue(m_total_score));
    }
    if (m_total_strokes_isSet) {
        obj.insert(QString("TotalStrokes"), ::OpenAPI::toJsonValue(m_total_strokes));
    }
    if (m_total_through_isSet) {
        obj.insert(QString("TotalThrough"), ::OpenAPI::toJsonValue(m_total_through));
    }
    if (m_tournament_id_isSet) {
        obj.insert(QString("TournamentID"), ::OpenAPI::toJsonValue(m_tournament_id));
    }
    if (m_tournament_status_isSet) {
        obj.insert(QString("TournamentStatus"), ::OpenAPI::toJsonValue(m_tournament_status));
    }
    if (m_triple_bogeys_isSet) {
        obj.insert(QString("TripleBogeys"), ::OpenAPI::toJsonValue(m_triple_bogeys));
    }
    if (m_win_isSet) {
        obj.insert(QString("Win"), ::OpenAPI::toJsonValue(m_win));
    }
    if (m_worse_than_double_bogey_isSet) {
        obj.insert(QString("WorseThanDoubleBogey"), ::OpenAPI::toJsonValue(m_worse_than_double_bogey));
    }
    if (m_worse_than_triple_bogey_isSet) {
        obj.insert(QString("WorseThanTripleBogey"), ::OpenAPI::toJsonValue(m_worse_than_triple_bogey));
    }
    return obj;
}

double OAIPlayerTournament::getBirdies() const {
    return m_birdies;
}
void OAIPlayerTournament::setBirdies(const double &birdies) {
    m_birdies = birdies;
    m_birdies_isSet = true;
}

bool OAIPlayerTournament::is_birdies_Set() const{
    return m_birdies_isSet;
}

bool OAIPlayerTournament::is_birdies_Valid() const{
    return m_birdies_isValid;
}

double OAIPlayerTournament::getBogeyFreeRounds() const {
    return m_bogey_free_rounds;
}
void OAIPlayerTournament::setBogeyFreeRounds(const double &bogey_free_rounds) {
    m_bogey_free_rounds = bogey_free_rounds;
    m_bogey_free_rounds_isSet = true;
}

bool OAIPlayerTournament::is_bogey_free_rounds_Set() const{
    return m_bogey_free_rounds_isSet;
}

bool OAIPlayerTournament::is_bogey_free_rounds_Valid() const{
    return m_bogey_free_rounds_isValid;
}

double OAIPlayerTournament::getBogeys() const {
    return m_bogeys;
}
void OAIPlayerTournament::setBogeys(const double &bogeys) {
    m_bogeys = bogeys;
    m_bogeys_isSet = true;
}

bool OAIPlayerTournament::is_bogeys_Set() const{
    return m_bogeys_isSet;
}

bool OAIPlayerTournament::is_bogeys_Valid() const{
    return m_bogeys_isValid;
}

double OAIPlayerTournament::getBounceBackCount() const {
    return m_bounce_back_count;
}
void OAIPlayerTournament::setBounceBackCount(const double &bounce_back_count) {
    m_bounce_back_count = bounce_back_count;
    m_bounce_back_count_isSet = true;
}

bool OAIPlayerTournament::is_bounce_back_count_Set() const{
    return m_bounce_back_count_isSet;
}

bool OAIPlayerTournament::is_bounce_back_count_Valid() const{
    return m_bounce_back_count_isValid;
}

double OAIPlayerTournament::getConsecutiveBirdieOrBetterCount() const {
    return m_consecutive_birdie_or_better_count;
}
void OAIPlayerTournament::setConsecutiveBirdieOrBetterCount(const double &consecutive_birdie_or_better_count) {
    m_consecutive_birdie_or_better_count = consecutive_birdie_or_better_count;
    m_consecutive_birdie_or_better_count_isSet = true;
}

bool OAIPlayerTournament::is_consecutive_birdie_or_better_count_Set() const{
    return m_consecutive_birdie_or_better_count_isSet;
}

bool OAIPlayerTournament::is_consecutive_birdie_or_better_count_Valid() const{
    return m_consecutive_birdie_or_better_count_isValid;
}

QString OAIPlayerTournament::getCountry() const {
    return m_country;
}
void OAIPlayerTournament::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPlayerTournament::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPlayerTournament::is_country_Valid() const{
    return m_country_isValid;
}

double OAIPlayerTournament::getDoubleBogeys() const {
    return m_double_bogeys;
}
void OAIPlayerTournament::setDoubleBogeys(const double &double_bogeys) {
    m_double_bogeys = double_bogeys;
    m_double_bogeys_isSet = true;
}

bool OAIPlayerTournament::is_double_bogeys_Set() const{
    return m_double_bogeys_isSet;
}

bool OAIPlayerTournament::is_double_bogeys_Valid() const{
    return m_double_bogeys_isValid;
}

double OAIPlayerTournament::getDoubleEagles() const {
    return m_double_eagles;
}
void OAIPlayerTournament::setDoubleEagles(const double &double_eagles) {
    m_double_eagles = double_eagles;
    m_double_eagles_isSet = true;
}

bool OAIPlayerTournament::is_double_eagles_Set() const{
    return m_double_eagles_isSet;
}

bool OAIPlayerTournament::is_double_eagles_Valid() const{
    return m_double_eagles_isValid;
}

qint32 OAIPlayerTournament::getDraftKingsSalary() const {
    return m_draft_kings_salary;
}
void OAIPlayerTournament::setDraftKingsSalary(const qint32 &draft_kings_salary) {
    m_draft_kings_salary = draft_kings_salary;
    m_draft_kings_salary_isSet = true;
}

bool OAIPlayerTournament::is_draft_kings_salary_Set() const{
    return m_draft_kings_salary_isSet;
}

bool OAIPlayerTournament::is_draft_kings_salary_Valid() const{
    return m_draft_kings_salary_isValid;
}

double OAIPlayerTournament::getEagles() const {
    return m_eagles;
}
void OAIPlayerTournament::setEagles(const double &eagles) {
    m_eagles = eagles;
    m_eagles_isSet = true;
}

bool OAIPlayerTournament::is_eagles_Set() const{
    return m_eagles_isSet;
}

bool OAIPlayerTournament::is_eagles_Valid() const{
    return m_eagles_isValid;
}

double OAIPlayerTournament::getEarnings() const {
    return m_earnings;
}
void OAIPlayerTournament::setEarnings(const double &earnings) {
    m_earnings = earnings;
    m_earnings_isSet = true;
}

bool OAIPlayerTournament::is_earnings_Set() const{
    return m_earnings_isSet;
}

bool OAIPlayerTournament::is_earnings_Valid() const{
    return m_earnings_isValid;
}

qint32 OAIPlayerTournament::getFanDuelSalary() const {
    return m_fan_duel_salary;
}
void OAIPlayerTournament::setFanDuelSalary(const qint32 &fan_duel_salary) {
    m_fan_duel_salary = fan_duel_salary;
    m_fan_duel_salary_isSet = true;
}

bool OAIPlayerTournament::is_fan_duel_salary_Set() const{
    return m_fan_duel_salary_isSet;
}

bool OAIPlayerTournament::is_fan_duel_salary_Valid() const{
    return m_fan_duel_salary_isValid;
}

qint32 OAIPlayerTournament::getFantasyDraftSalary() const {
    return m_fantasy_draft_salary;
}
void OAIPlayerTournament::setFantasyDraftSalary(const qint32 &fantasy_draft_salary) {
    m_fantasy_draft_salary = fantasy_draft_salary;
    m_fantasy_draft_salary_isSet = true;
}

bool OAIPlayerTournament::is_fantasy_draft_salary_Set() const{
    return m_fantasy_draft_salary_isSet;
}

bool OAIPlayerTournament::is_fantasy_draft_salary_Valid() const{
    return m_fantasy_draft_salary_isValid;
}

double OAIPlayerTournament::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAIPlayerTournament::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAIPlayerTournament::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAIPlayerTournament::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAIPlayerTournament::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAIPlayerTournament::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAIPlayerTournament::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAIPlayerTournament::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAIPlayerTournament::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAIPlayerTournament::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAIPlayerTournament::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAIPlayerTournament::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAIPlayerTournament::getFantasyPointsFantasyDraft() const {
    return m_fantasy_points_fantasy_draft;
}
void OAIPlayerTournament::setFantasyPointsFantasyDraft(const double &fantasy_points_fantasy_draft) {
    m_fantasy_points_fantasy_draft = fantasy_points_fantasy_draft;
    m_fantasy_points_fantasy_draft_isSet = true;
}

bool OAIPlayerTournament::is_fantasy_points_fantasy_draft_Set() const{
    return m_fantasy_points_fantasy_draft_isSet;
}

bool OAIPlayerTournament::is_fantasy_points_fantasy_draft_Valid() const{
    return m_fantasy_points_fantasy_draft_isValid;
}

double OAIPlayerTournament::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAIPlayerTournament::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAIPlayerTournament::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAIPlayerTournament::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

qint32 OAIPlayerTournament::getFedExPoints() const {
    return m_fed_ex_points;
}
void OAIPlayerTournament::setFedExPoints(const qint32 &fed_ex_points) {
    m_fed_ex_points = fed_ex_points;
    m_fed_ex_points_isSet = true;
}

bool OAIPlayerTournament::is_fed_ex_points_Set() const{
    return m_fed_ex_points_isSet;
}

bool OAIPlayerTournament::is_fed_ex_points_Valid() const{
    return m_fed_ex_points_isValid;
}

double OAIPlayerTournament::getHoleInOnes() const {
    return m_hole_in_ones;
}
void OAIPlayerTournament::setHoleInOnes(const double &hole_in_ones) {
    m_hole_in_ones = hole_in_ones;
    m_hole_in_ones_isSet = true;
}

bool OAIPlayerTournament::is_hole_in_ones_Set() const{
    return m_hole_in_ones_isSet;
}

bool OAIPlayerTournament::is_hole_in_ones_Valid() const{
    return m_hole_in_ones_isValid;
}

bool OAIPlayerTournament::isIsAlternate() const {
    return m_is_alternate;
}
void OAIPlayerTournament::setIsAlternate(const bool &is_alternate) {
    m_is_alternate = is_alternate;
    m_is_alternate_isSet = true;
}

bool OAIPlayerTournament::is_is_alternate_Set() const{
    return m_is_alternate_isSet;
}

bool OAIPlayerTournament::is_is_alternate_Valid() const{
    return m_is_alternate_isValid;
}

bool OAIPlayerTournament::isIsWithdrawn() const {
    return m_is_withdrawn;
}
void OAIPlayerTournament::setIsWithdrawn(const bool &is_withdrawn) {
    m_is_withdrawn = is_withdrawn;
    m_is_withdrawn_isSet = true;
}

bool OAIPlayerTournament::is_is_withdrawn_Set() const{
    return m_is_withdrawn_isSet;
}

bool OAIPlayerTournament::is_is_withdrawn_Valid() const{
    return m_is_withdrawn_isValid;
}

double OAIPlayerTournament::getMadeCut() const {
    return m_made_cut;
}
void OAIPlayerTournament::setMadeCut(const double &made_cut) {
    m_made_cut = made_cut;
    m_made_cut_isSet = true;
}

bool OAIPlayerTournament::is_made_cut_Set() const{
    return m_made_cut_isSet;
}

bool OAIPlayerTournament::is_made_cut_Valid() const{
    return m_made_cut_isValid;
}

bool OAIPlayerTournament::isMadeCutDidNotFinish() const {
    return m_made_cut_did_not_finish;
}
void OAIPlayerTournament::setMadeCutDidNotFinish(const bool &made_cut_did_not_finish) {
    m_made_cut_did_not_finish = made_cut_did_not_finish;
    m_made_cut_did_not_finish_isSet = true;
}

bool OAIPlayerTournament::is_made_cut_did_not_finish_Set() const{
    return m_made_cut_did_not_finish_isSet;
}

bool OAIPlayerTournament::is_made_cut_did_not_finish_Valid() const{
    return m_made_cut_did_not_finish_isValid;
}

QString OAIPlayerTournament::getName() const {
    return m_name;
}
void OAIPlayerTournament::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerTournament::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerTournament::is_name_Valid() const{
    return m_name_isValid;
}

double OAIPlayerTournament::getOddsToWin() const {
    return m_odds_to_win;
}
void OAIPlayerTournament::setOddsToWin(const double &odds_to_win) {
    m_odds_to_win = odds_to_win;
    m_odds_to_win_isSet = true;
}

bool OAIPlayerTournament::is_odds_to_win_Set() const{
    return m_odds_to_win_isSet;
}

bool OAIPlayerTournament::is_odds_to_win_Valid() const{
    return m_odds_to_win_isValid;
}

QString OAIPlayerTournament::getOddsToWinDescription() const {
    return m_odds_to_win_description;
}
void OAIPlayerTournament::setOddsToWinDescription(const QString &odds_to_win_description) {
    m_odds_to_win_description = odds_to_win_description;
    m_odds_to_win_description_isSet = true;
}

bool OAIPlayerTournament::is_odds_to_win_description_Set() const{
    return m_odds_to_win_description_isSet;
}

bool OAIPlayerTournament::is_odds_to_win_description_Valid() const{
    return m_odds_to_win_description_isValid;
}

double OAIPlayerTournament::getPars() const {
    return m_pars;
}
void OAIPlayerTournament::setPars(const double &pars) {
    m_pars = pars;
    m_pars_isSet = true;
}

bool OAIPlayerTournament::is_pars_Set() const{
    return m_pars_isSet;
}

bool OAIPlayerTournament::is_pars_Valid() const{
    return m_pars_isValid;
}

qint32 OAIPlayerTournament::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerTournament::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerTournament::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerTournament::is_player_id_Valid() const{
    return m_player_id_isValid;
}

qint32 OAIPlayerTournament::getPlayerTournamentId() const {
    return m_player_tournament_id;
}
void OAIPlayerTournament::setPlayerTournamentId(const qint32 &player_tournament_id) {
    m_player_tournament_id = player_tournament_id;
    m_player_tournament_id_isSet = true;
}

bool OAIPlayerTournament::is_player_tournament_id_Set() const{
    return m_player_tournament_id_isSet;
}

bool OAIPlayerTournament::is_player_tournament_id_Valid() const{
    return m_player_tournament_id_isValid;
}

qint32 OAIPlayerTournament::getRank() const {
    return m_rank;
}
void OAIPlayerTournament::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIPlayerTournament::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIPlayerTournament::is_rank_Valid() const{
    return m_rank_isValid;
}

QList<OAIPlayerRound> OAIPlayerTournament::getRounds() const {
    return m_rounds;
}
void OAIPlayerTournament::setRounds(const QList<OAIPlayerRound> &rounds) {
    m_rounds = rounds;
    m_rounds_isSet = true;
}

bool OAIPlayerTournament::is_rounds_Set() const{
    return m_rounds_isSet;
}

bool OAIPlayerTournament::is_rounds_Valid() const{
    return m_rounds_isValid;
}

double OAIPlayerTournament::getRoundsUnderSeventy() const {
    return m_rounds_under_seventy;
}
void OAIPlayerTournament::setRoundsUnderSeventy(const double &rounds_under_seventy) {
    m_rounds_under_seventy = rounds_under_seventy;
    m_rounds_under_seventy_isSet = true;
}

bool OAIPlayerTournament::is_rounds_under_seventy_Set() const{
    return m_rounds_under_seventy_isSet;
}

bool OAIPlayerTournament::is_rounds_under_seventy_Valid() const{
    return m_rounds_under_seventy_isValid;
}

double OAIPlayerTournament::getRoundsWithFiveOrMoreBirdiesOrBetter() const {
    return m_rounds_with_five_or_more_birdies_or_better;
}
void OAIPlayerTournament::setRoundsWithFiveOrMoreBirdiesOrBetter(const double &rounds_with_five_or_more_birdies_or_better) {
    m_rounds_with_five_or_more_birdies_or_better = rounds_with_five_or_more_birdies_or_better;
    m_rounds_with_five_or_more_birdies_or_better_isSet = true;
}

bool OAIPlayerTournament::is_rounds_with_five_or_more_birdies_or_better_Set() const{
    return m_rounds_with_five_or_more_birdies_or_better_isSet;
}

bool OAIPlayerTournament::is_rounds_with_five_or_more_birdies_or_better_Valid() const{
    return m_rounds_with_five_or_more_birdies_or_better_isValid;
}

double OAIPlayerTournament::getStreaksOfFiveBirdiesOrBetter() const {
    return m_streaks_of_five_birdies_or_better;
}
void OAIPlayerTournament::setStreaksOfFiveBirdiesOrBetter(const double &streaks_of_five_birdies_or_better) {
    m_streaks_of_five_birdies_or_better = streaks_of_five_birdies_or_better;
    m_streaks_of_five_birdies_or_better_isSet = true;
}

bool OAIPlayerTournament::is_streaks_of_five_birdies_or_better_Set() const{
    return m_streaks_of_five_birdies_or_better_isSet;
}

bool OAIPlayerTournament::is_streaks_of_five_birdies_or_better_Valid() const{
    return m_streaks_of_five_birdies_or_better_isValid;
}

double OAIPlayerTournament::getStreaksOfFourBirdiesOrBetter() const {
    return m_streaks_of_four_birdies_or_better;
}
void OAIPlayerTournament::setStreaksOfFourBirdiesOrBetter(const double &streaks_of_four_birdies_or_better) {
    m_streaks_of_four_birdies_or_better = streaks_of_four_birdies_or_better;
    m_streaks_of_four_birdies_or_better_isSet = true;
}

bool OAIPlayerTournament::is_streaks_of_four_birdies_or_better_Set() const{
    return m_streaks_of_four_birdies_or_better_isSet;
}

bool OAIPlayerTournament::is_streaks_of_four_birdies_or_better_Valid() const{
    return m_streaks_of_four_birdies_or_better_isValid;
}

double OAIPlayerTournament::getStreaksOfSixBirdiesOrBetter() const {
    return m_streaks_of_six_birdies_or_better;
}
void OAIPlayerTournament::setStreaksOfSixBirdiesOrBetter(const double &streaks_of_six_birdies_or_better) {
    m_streaks_of_six_birdies_or_better = streaks_of_six_birdies_or_better;
    m_streaks_of_six_birdies_or_better_isSet = true;
}

bool OAIPlayerTournament::is_streaks_of_six_birdies_or_better_Set() const{
    return m_streaks_of_six_birdies_or_better_isSet;
}

bool OAIPlayerTournament::is_streaks_of_six_birdies_or_better_Valid() const{
    return m_streaks_of_six_birdies_or_better_isValid;
}

double OAIPlayerTournament::getStreaksOfThreeBirdiesOrBetter() const {
    return m_streaks_of_three_birdies_or_better;
}
void OAIPlayerTournament::setStreaksOfThreeBirdiesOrBetter(const double &streaks_of_three_birdies_or_better) {
    m_streaks_of_three_birdies_or_better = streaks_of_three_birdies_or_better;
    m_streaks_of_three_birdies_or_better_isSet = true;
}

bool OAIPlayerTournament::is_streaks_of_three_birdies_or_better_Set() const{
    return m_streaks_of_three_birdies_or_better_isSet;
}

bool OAIPlayerTournament::is_streaks_of_three_birdies_or_better_Valid() const{
    return m_streaks_of_three_birdies_or_better_isValid;
}

QString OAIPlayerTournament::getTeeTime() const {
    return m_tee_time;
}
void OAIPlayerTournament::setTeeTime(const QString &tee_time) {
    m_tee_time = tee_time;
    m_tee_time_isSet = true;
}

bool OAIPlayerTournament::is_tee_time_Set() const{
    return m_tee_time_isSet;
}

bool OAIPlayerTournament::is_tee_time_Valid() const{
    return m_tee_time_isValid;
}

double OAIPlayerTournament::getTotalScore() const {
    return m_total_score;
}
void OAIPlayerTournament::setTotalScore(const double &total_score) {
    m_total_score = total_score;
    m_total_score_isSet = true;
}

bool OAIPlayerTournament::is_total_score_Set() const{
    return m_total_score_isSet;
}

bool OAIPlayerTournament::is_total_score_Valid() const{
    return m_total_score_isValid;
}

double OAIPlayerTournament::getTotalStrokes() const {
    return m_total_strokes;
}
void OAIPlayerTournament::setTotalStrokes(const double &total_strokes) {
    m_total_strokes = total_strokes;
    m_total_strokes_isSet = true;
}

bool OAIPlayerTournament::is_total_strokes_Set() const{
    return m_total_strokes_isSet;
}

bool OAIPlayerTournament::is_total_strokes_Valid() const{
    return m_total_strokes_isValid;
}

qint32 OAIPlayerTournament::getTotalThrough() const {
    return m_total_through;
}
void OAIPlayerTournament::setTotalThrough(const qint32 &total_through) {
    m_total_through = total_through;
    m_total_through_isSet = true;
}

bool OAIPlayerTournament::is_total_through_Set() const{
    return m_total_through_isSet;
}

bool OAIPlayerTournament::is_total_through_Valid() const{
    return m_total_through_isValid;
}

qint32 OAIPlayerTournament::getTournamentId() const {
    return m_tournament_id;
}
void OAIPlayerTournament::setTournamentId(const qint32 &tournament_id) {
    m_tournament_id = tournament_id;
    m_tournament_id_isSet = true;
}

bool OAIPlayerTournament::is_tournament_id_Set() const{
    return m_tournament_id_isSet;
}

bool OAIPlayerTournament::is_tournament_id_Valid() const{
    return m_tournament_id_isValid;
}

QString OAIPlayerTournament::getTournamentStatus() const {
    return m_tournament_status;
}
void OAIPlayerTournament::setTournamentStatus(const QString &tournament_status) {
    m_tournament_status = tournament_status;
    m_tournament_status_isSet = true;
}

bool OAIPlayerTournament::is_tournament_status_Set() const{
    return m_tournament_status_isSet;
}

bool OAIPlayerTournament::is_tournament_status_Valid() const{
    return m_tournament_status_isValid;
}

double OAIPlayerTournament::getTripleBogeys() const {
    return m_triple_bogeys;
}
void OAIPlayerTournament::setTripleBogeys(const double &triple_bogeys) {
    m_triple_bogeys = triple_bogeys;
    m_triple_bogeys_isSet = true;
}

bool OAIPlayerTournament::is_triple_bogeys_Set() const{
    return m_triple_bogeys_isSet;
}

bool OAIPlayerTournament::is_triple_bogeys_Valid() const{
    return m_triple_bogeys_isValid;
}

double OAIPlayerTournament::getWin() const {
    return m_win;
}
void OAIPlayerTournament::setWin(const double &win) {
    m_win = win;
    m_win_isSet = true;
}

bool OAIPlayerTournament::is_win_Set() const{
    return m_win_isSet;
}

bool OAIPlayerTournament::is_win_Valid() const{
    return m_win_isValid;
}

double OAIPlayerTournament::getWorseThanDoubleBogey() const {
    return m_worse_than_double_bogey;
}
void OAIPlayerTournament::setWorseThanDoubleBogey(const double &worse_than_double_bogey) {
    m_worse_than_double_bogey = worse_than_double_bogey;
    m_worse_than_double_bogey_isSet = true;
}

bool OAIPlayerTournament::is_worse_than_double_bogey_Set() const{
    return m_worse_than_double_bogey_isSet;
}

bool OAIPlayerTournament::is_worse_than_double_bogey_Valid() const{
    return m_worse_than_double_bogey_isValid;
}

double OAIPlayerTournament::getWorseThanTripleBogey() const {
    return m_worse_than_triple_bogey;
}
void OAIPlayerTournament::setWorseThanTripleBogey(const double &worse_than_triple_bogey) {
    m_worse_than_triple_bogey = worse_than_triple_bogey;
    m_worse_than_triple_bogey_isSet = true;
}

bool OAIPlayerTournament::is_worse_than_triple_bogey_Set() const{
    return m_worse_than_triple_bogey_isSet;
}

bool OAIPlayerTournament::is_worse_than_triple_bogey_Valid() const{
    return m_worse_than_triple_bogey_isValid;
}

bool OAIPlayerTournament::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birdies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bogey_free_rounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bogeys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounce_back_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consecutive_birdie_or_better_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_bogeys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_eagles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eagles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fantasy_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_ex_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hole_in_ones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_alternate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_withdrawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_made_cut_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_made_cut_did_not_finish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odds_to_win_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odds_to_win_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounds_under_seventy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounds_with_five_or_more_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaks_of_five_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaks_of_four_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaks_of_six_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaks_of_three_birdies_or_better_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tee_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_strokes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_through_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tournament_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triple_bogeys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_win_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worse_than_double_bogey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worse_than_triple_bogey_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerTournament::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
