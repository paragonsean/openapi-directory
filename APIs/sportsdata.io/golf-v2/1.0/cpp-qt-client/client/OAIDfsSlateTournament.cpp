/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfsSlateTournament.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfsSlateTournament::OAIDfsSlateTournament(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfsSlateTournament::OAIDfsSlateTournament() {
    this->initializeModel();
}

OAIDfsSlateTournament::~OAIDfsSlateTournament() {}

void OAIDfsSlateTournament::initializeModel() {

    m_operator_tournament_id_isSet = false;
    m_operator_tournament_id_isValid = false;

    m_removed_by_operator_isSet = false;
    m_removed_by_operator_isValid = false;

    m_slate_id_isSet = false;
    m_slate_id_isValid = false;

    m_slate_tournament_id_isSet = false;
    m_slate_tournament_id_isValid = false;

    m_tournament_isSet = false;
    m_tournament_isValid = false;

    m_tournament_id_isSet = false;
    m_tournament_id_isValid = false;
}

void OAIDfsSlateTournament::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfsSlateTournament::fromJsonObject(QJsonObject json) {

    m_operator_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_operator_tournament_id, json[QString("OperatorTournamentID")]);
    m_operator_tournament_id_isSet = !json[QString("OperatorTournamentID")].isNull() && m_operator_tournament_id_isValid;

    m_removed_by_operator_isValid = ::OpenAPI::fromJsonValue(m_removed_by_operator, json[QString("RemovedByOperator")]);
    m_removed_by_operator_isSet = !json[QString("RemovedByOperator")].isNull() && m_removed_by_operator_isValid;

    m_slate_id_isValid = ::OpenAPI::fromJsonValue(m_slate_id, json[QString("SlateID")]);
    m_slate_id_isSet = !json[QString("SlateID")].isNull() && m_slate_id_isValid;

    m_slate_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_slate_tournament_id, json[QString("SlateTournamentID")]);
    m_slate_tournament_id_isSet = !json[QString("SlateTournamentID")].isNull() && m_slate_tournament_id_isValid;

    m_tournament_isValid = ::OpenAPI::fromJsonValue(m_tournament, json[QString("Tournament")]);
    m_tournament_isSet = !json[QString("Tournament")].isNull() && m_tournament_isValid;

    m_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_tournament_id, json[QString("TournamentID")]);
    m_tournament_id_isSet = !json[QString("TournamentID")].isNull() && m_tournament_id_isValid;
}

QString OAIDfsSlateTournament::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfsSlateTournament::asJsonObject() const {
    QJsonObject obj;
    if (m_operator_tournament_id_isSet) {
        obj.insert(QString("OperatorTournamentID"), ::OpenAPI::toJsonValue(m_operator_tournament_id));
    }
    if (m_removed_by_operator_isSet) {
        obj.insert(QString("RemovedByOperator"), ::OpenAPI::toJsonValue(m_removed_by_operator));
    }
    if (m_slate_id_isSet) {
        obj.insert(QString("SlateID"), ::OpenAPI::toJsonValue(m_slate_id));
    }
    if (m_slate_tournament_id_isSet) {
        obj.insert(QString("SlateTournamentID"), ::OpenAPI::toJsonValue(m_slate_tournament_id));
    }
    if (m_tournament.isSet()) {
        obj.insert(QString("Tournament"), ::OpenAPI::toJsonValue(m_tournament));
    }
    if (m_tournament_id_isSet) {
        obj.insert(QString("TournamentID"), ::OpenAPI::toJsonValue(m_tournament_id));
    }
    return obj;
}

qint32 OAIDfsSlateTournament::getOperatorTournamentId() const {
    return m_operator_tournament_id;
}
void OAIDfsSlateTournament::setOperatorTournamentId(const qint32 &operator_tournament_id) {
    m_operator_tournament_id = operator_tournament_id;
    m_operator_tournament_id_isSet = true;
}

bool OAIDfsSlateTournament::is_operator_tournament_id_Set() const{
    return m_operator_tournament_id_isSet;
}

bool OAIDfsSlateTournament::is_operator_tournament_id_Valid() const{
    return m_operator_tournament_id_isValid;
}

bool OAIDfsSlateTournament::isRemovedByOperator() const {
    return m_removed_by_operator;
}
void OAIDfsSlateTournament::setRemovedByOperator(const bool &removed_by_operator) {
    m_removed_by_operator = removed_by_operator;
    m_removed_by_operator_isSet = true;
}

bool OAIDfsSlateTournament::is_removed_by_operator_Set() const{
    return m_removed_by_operator_isSet;
}

bool OAIDfsSlateTournament::is_removed_by_operator_Valid() const{
    return m_removed_by_operator_isValid;
}

qint32 OAIDfsSlateTournament::getSlateId() const {
    return m_slate_id;
}
void OAIDfsSlateTournament::setSlateId(const qint32 &slate_id) {
    m_slate_id = slate_id;
    m_slate_id_isSet = true;
}

bool OAIDfsSlateTournament::is_slate_id_Set() const{
    return m_slate_id_isSet;
}

bool OAIDfsSlateTournament::is_slate_id_Valid() const{
    return m_slate_id_isValid;
}

qint32 OAIDfsSlateTournament::getSlateTournamentId() const {
    return m_slate_tournament_id;
}
void OAIDfsSlateTournament::setSlateTournamentId(const qint32 &slate_tournament_id) {
    m_slate_tournament_id = slate_tournament_id;
    m_slate_tournament_id_isSet = true;
}

bool OAIDfsSlateTournament::is_slate_tournament_id_Set() const{
    return m_slate_tournament_id_isSet;
}

bool OAIDfsSlateTournament::is_slate_tournament_id_Valid() const{
    return m_slate_tournament_id_isValid;
}

OAITournament OAIDfsSlateTournament::getTournament() const {
    return m_tournament;
}
void OAIDfsSlateTournament::setTournament(const OAITournament &tournament) {
    m_tournament = tournament;
    m_tournament_isSet = true;
}

bool OAIDfsSlateTournament::is_tournament_Set() const{
    return m_tournament_isSet;
}

bool OAIDfsSlateTournament::is_tournament_Valid() const{
    return m_tournament_isValid;
}

qint32 OAIDfsSlateTournament::getTournamentId() const {
    return m_tournament_id;
}
void OAIDfsSlateTournament::setTournamentId(const qint32 &tournament_id) {
    m_tournament_id = tournament_id;
    m_tournament_id_isSet = true;
}

bool OAIDfsSlateTournament::is_tournament_id_Set() const{
    return m_tournament_id_isSet;
}

bool OAIDfsSlateTournament::is_tournament_id_Valid() const{
    return m_tournament_id_isValid;
}

bool OAIDfsSlateTournament::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operator_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_by_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tournament.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfsSlateTournament::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
