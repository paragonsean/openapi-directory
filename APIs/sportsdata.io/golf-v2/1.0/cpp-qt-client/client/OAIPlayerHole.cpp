/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerHole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerHole::OAIPlayerHole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerHole::OAIPlayerHole() {
    this->initializeModel();
}

OAIPlayerHole::~OAIPlayerHole() {}

void OAIPlayerHole::initializeModel() {

    m_birdie_isSet = false;
    m_birdie_isValid = false;

    m_bogey_isSet = false;
    m_bogey_isValid = false;

    m_double_bogey_isSet = false;
    m_double_bogey_isValid = false;

    m_double_eagle_isSet = false;
    m_double_eagle_isValid = false;

    m_eagle_isSet = false;
    m_eagle_isValid = false;

    m_hole_in_one_isSet = false;
    m_hole_in_one_isValid = false;

    m_is_par_isSet = false;
    m_is_par_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_par_isSet = false;
    m_par_isValid = false;

    m_player_round_id_isSet = false;
    m_player_round_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_to_par_isSet = false;
    m_to_par_isValid = false;

    m_worse_than_double_bogey_isSet = false;
    m_worse_than_double_bogey_isValid = false;
}

void OAIPlayerHole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerHole::fromJsonObject(QJsonObject json) {

    m_birdie_isValid = ::OpenAPI::fromJsonValue(m_birdie, json[QString("Birdie")]);
    m_birdie_isSet = !json[QString("Birdie")].isNull() && m_birdie_isValid;

    m_bogey_isValid = ::OpenAPI::fromJsonValue(m_bogey, json[QString("Bogey")]);
    m_bogey_isSet = !json[QString("Bogey")].isNull() && m_bogey_isValid;

    m_double_bogey_isValid = ::OpenAPI::fromJsonValue(m_double_bogey, json[QString("DoubleBogey")]);
    m_double_bogey_isSet = !json[QString("DoubleBogey")].isNull() && m_double_bogey_isValid;

    m_double_eagle_isValid = ::OpenAPI::fromJsonValue(m_double_eagle, json[QString("DoubleEagle")]);
    m_double_eagle_isSet = !json[QString("DoubleEagle")].isNull() && m_double_eagle_isValid;

    m_eagle_isValid = ::OpenAPI::fromJsonValue(m_eagle, json[QString("Eagle")]);
    m_eagle_isSet = !json[QString("Eagle")].isNull() && m_eagle_isValid;

    m_hole_in_one_isValid = ::OpenAPI::fromJsonValue(m_hole_in_one, json[QString("HoleInOne")]);
    m_hole_in_one_isSet = !json[QString("HoleInOne")].isNull() && m_hole_in_one_isValid;

    m_is_par_isValid = ::OpenAPI::fromJsonValue(m_is_par, json[QString("IsPar")]);
    m_is_par_isSet = !json[QString("IsPar")].isNull() && m_is_par_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_par_isValid = ::OpenAPI::fromJsonValue(m_par, json[QString("Par")]);
    m_par_isSet = !json[QString("Par")].isNull() && m_par_isValid;

    m_player_round_id_isValid = ::OpenAPI::fromJsonValue(m_player_round_id, json[QString("PlayerRoundID")]);
    m_player_round_id_isSet = !json[QString("PlayerRoundID")].isNull() && m_player_round_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_to_par_isValid = ::OpenAPI::fromJsonValue(m_to_par, json[QString("ToPar")]);
    m_to_par_isSet = !json[QString("ToPar")].isNull() && m_to_par_isValid;

    m_worse_than_double_bogey_isValid = ::OpenAPI::fromJsonValue(m_worse_than_double_bogey, json[QString("WorseThanDoubleBogey")]);
    m_worse_than_double_bogey_isSet = !json[QString("WorseThanDoubleBogey")].isNull() && m_worse_than_double_bogey_isValid;
}

QString OAIPlayerHole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerHole::asJsonObject() const {
    QJsonObject obj;
    if (m_birdie_isSet) {
        obj.insert(QString("Birdie"), ::OpenAPI::toJsonValue(m_birdie));
    }
    if (m_bogey_isSet) {
        obj.insert(QString("Bogey"), ::OpenAPI::toJsonValue(m_bogey));
    }
    if (m_double_bogey_isSet) {
        obj.insert(QString("DoubleBogey"), ::OpenAPI::toJsonValue(m_double_bogey));
    }
    if (m_double_eagle_isSet) {
        obj.insert(QString("DoubleEagle"), ::OpenAPI::toJsonValue(m_double_eagle));
    }
    if (m_eagle_isSet) {
        obj.insert(QString("Eagle"), ::OpenAPI::toJsonValue(m_eagle));
    }
    if (m_hole_in_one_isSet) {
        obj.insert(QString("HoleInOne"), ::OpenAPI::toJsonValue(m_hole_in_one));
    }
    if (m_is_par_isSet) {
        obj.insert(QString("IsPar"), ::OpenAPI::toJsonValue(m_is_par));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_par_isSet) {
        obj.insert(QString("Par"), ::OpenAPI::toJsonValue(m_par));
    }
    if (m_player_round_id_isSet) {
        obj.insert(QString("PlayerRoundID"), ::OpenAPI::toJsonValue(m_player_round_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_to_par_isSet) {
        obj.insert(QString("ToPar"), ::OpenAPI::toJsonValue(m_to_par));
    }
    if (m_worse_than_double_bogey_isSet) {
        obj.insert(QString("WorseThanDoubleBogey"), ::OpenAPI::toJsonValue(m_worse_than_double_bogey));
    }
    return obj;
}

bool OAIPlayerHole::isBirdie() const {
    return m_birdie;
}
void OAIPlayerHole::setBirdie(const bool &birdie) {
    m_birdie = birdie;
    m_birdie_isSet = true;
}

bool OAIPlayerHole::is_birdie_Set() const{
    return m_birdie_isSet;
}

bool OAIPlayerHole::is_birdie_Valid() const{
    return m_birdie_isValid;
}

bool OAIPlayerHole::isBogey() const {
    return m_bogey;
}
void OAIPlayerHole::setBogey(const bool &bogey) {
    m_bogey = bogey;
    m_bogey_isSet = true;
}

bool OAIPlayerHole::is_bogey_Set() const{
    return m_bogey_isSet;
}

bool OAIPlayerHole::is_bogey_Valid() const{
    return m_bogey_isValid;
}

bool OAIPlayerHole::isDoubleBogey() const {
    return m_double_bogey;
}
void OAIPlayerHole::setDoubleBogey(const bool &double_bogey) {
    m_double_bogey = double_bogey;
    m_double_bogey_isSet = true;
}

bool OAIPlayerHole::is_double_bogey_Set() const{
    return m_double_bogey_isSet;
}

bool OAIPlayerHole::is_double_bogey_Valid() const{
    return m_double_bogey_isValid;
}

bool OAIPlayerHole::isDoubleEagle() const {
    return m_double_eagle;
}
void OAIPlayerHole::setDoubleEagle(const bool &double_eagle) {
    m_double_eagle = double_eagle;
    m_double_eagle_isSet = true;
}

bool OAIPlayerHole::is_double_eagle_Set() const{
    return m_double_eagle_isSet;
}

bool OAIPlayerHole::is_double_eagle_Valid() const{
    return m_double_eagle_isValid;
}

bool OAIPlayerHole::isEagle() const {
    return m_eagle;
}
void OAIPlayerHole::setEagle(const bool &eagle) {
    m_eagle = eagle;
    m_eagle_isSet = true;
}

bool OAIPlayerHole::is_eagle_Set() const{
    return m_eagle_isSet;
}

bool OAIPlayerHole::is_eagle_Valid() const{
    return m_eagle_isValid;
}

bool OAIPlayerHole::isHoleInOne() const {
    return m_hole_in_one;
}
void OAIPlayerHole::setHoleInOne(const bool &hole_in_one) {
    m_hole_in_one = hole_in_one;
    m_hole_in_one_isSet = true;
}

bool OAIPlayerHole::is_hole_in_one_Set() const{
    return m_hole_in_one_isSet;
}

bool OAIPlayerHole::is_hole_in_one_Valid() const{
    return m_hole_in_one_isValid;
}

bool OAIPlayerHole::isIsPar() const {
    return m_is_par;
}
void OAIPlayerHole::setIsPar(const bool &is_par) {
    m_is_par = is_par;
    m_is_par_isSet = true;
}

bool OAIPlayerHole::is_is_par_Set() const{
    return m_is_par_isSet;
}

bool OAIPlayerHole::is_is_par_Valid() const{
    return m_is_par_isValid;
}

qint32 OAIPlayerHole::getNumber() const {
    return m_number;
}
void OAIPlayerHole::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayerHole::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayerHole::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPlayerHole::getPar() const {
    return m_par;
}
void OAIPlayerHole::setPar(const qint32 &par) {
    m_par = par;
    m_par_isSet = true;
}

bool OAIPlayerHole::is_par_Set() const{
    return m_par_isSet;
}

bool OAIPlayerHole::is_par_Valid() const{
    return m_par_isValid;
}

qint32 OAIPlayerHole::getPlayerRoundId() const {
    return m_player_round_id;
}
void OAIPlayerHole::setPlayerRoundId(const qint32 &player_round_id) {
    m_player_round_id = player_round_id;
    m_player_round_id_isSet = true;
}

bool OAIPlayerHole::is_player_round_id_Set() const{
    return m_player_round_id_isSet;
}

bool OAIPlayerHole::is_player_round_id_Valid() const{
    return m_player_round_id_isValid;
}

qint32 OAIPlayerHole::getScore() const {
    return m_score;
}
void OAIPlayerHole::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPlayerHole::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPlayerHole::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIPlayerHole::getToPar() const {
    return m_to_par;
}
void OAIPlayerHole::setToPar(const qint32 &to_par) {
    m_to_par = to_par;
    m_to_par_isSet = true;
}

bool OAIPlayerHole::is_to_par_Set() const{
    return m_to_par_isSet;
}

bool OAIPlayerHole::is_to_par_Valid() const{
    return m_to_par_isValid;
}

bool OAIPlayerHole::isWorseThanDoubleBogey() const {
    return m_worse_than_double_bogey;
}
void OAIPlayerHole::setWorseThanDoubleBogey(const bool &worse_than_double_bogey) {
    m_worse_than_double_bogey = worse_than_double_bogey;
    m_worse_than_double_bogey_isSet = true;
}

bool OAIPlayerHole::is_worse_than_double_bogey_Set() const{
    return m_worse_than_double_bogey_isSet;
}

bool OAIPlayerHole::is_worse_than_double_bogey_Valid() const{
    return m_worse_than_double_bogey_isValid;
}

bool OAIPlayerHole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birdie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bogey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_bogey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_eagle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eagle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hole_in_one_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_par_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_par_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_round_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_par_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worse_than_double_bogey_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerHole::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
