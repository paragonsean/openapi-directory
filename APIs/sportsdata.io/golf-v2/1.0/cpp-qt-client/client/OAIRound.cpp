/**
 * Golf v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRound::OAIRound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRound::OAIRound() {
    this->initializeModel();
}

OAIRound::~OAIRound() {}

void OAIRound::initializeModel() {

    m_day_isSet = false;
    m_day_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_round_id_isSet = false;
    m_round_id_isValid = false;

    m_tournament_id_isSet = false;
    m_tournament_id_isValid = false;
}

void OAIRound::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRound::fromJsonObject(QJsonObject json) {

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_round_id_isValid = ::OpenAPI::fromJsonValue(m_round_id, json[QString("RoundID")]);
    m_round_id_isSet = !json[QString("RoundID")].isNull() && m_round_id_isValid;

    m_tournament_id_isValid = ::OpenAPI::fromJsonValue(m_tournament_id, json[QString("TournamentID")]);
    m_tournament_id_isSet = !json[QString("TournamentID")].isNull() && m_tournament_id_isValid;
}

QString OAIRound::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRound::asJsonObject() const {
    QJsonObject obj;
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_round_id_isSet) {
        obj.insert(QString("RoundID"), ::OpenAPI::toJsonValue(m_round_id));
    }
    if (m_tournament_id_isSet) {
        obj.insert(QString("TournamentID"), ::OpenAPI::toJsonValue(m_tournament_id));
    }
    return obj;
}

QString OAIRound::getDay() const {
    return m_day;
}
void OAIRound::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIRound::is_day_Set() const{
    return m_day_isSet;
}

bool OAIRound::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIRound::getNumber() const {
    return m_number;
}
void OAIRound::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIRound::is_number_Set() const{
    return m_number_isSet;
}

bool OAIRound::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIRound::getRoundId() const {
    return m_round_id;
}
void OAIRound::setRoundId(const qint32 &round_id) {
    m_round_id = round_id;
    m_round_id_isSet = true;
}

bool OAIRound::is_round_id_Set() const{
    return m_round_id_isSet;
}

bool OAIRound::is_round_id_Valid() const{
    return m_round_id_isValid;
}

qint32 OAIRound::getTournamentId() const {
    return m_tournament_id;
}
void OAIRound::setTournamentId(const qint32 &tournament_id) {
    m_tournament_id = tournament_id;
    m_tournament_id_isSet = true;
}

bool OAIRound::is_tournament_id_Set() const{
    return m_tournament_id_isSet;
}

bool OAIRound::is_tournament_id_Valid() const{
    return m_tournament_id_isValid;
}

bool OAIRound::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tournament_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRound::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
