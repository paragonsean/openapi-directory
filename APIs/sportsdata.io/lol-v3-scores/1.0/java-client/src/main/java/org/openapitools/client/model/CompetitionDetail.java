/*
 * LoL v3 Scores
 * LoL v3 Scores
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.Season;
import org.openapitools.client.model.TeamDetail;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompetitionDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:25.501979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompetitionDetail {
  public static final String SERIALIZED_NAME_AREA_ID = "AreaId";
  @SerializedName(SERIALIZED_NAME_AREA_ID)
  private Integer areaId;

  public static final String SERIALIZED_NAME_AREA_NAME = "AreaName";
  @SerializedName(SERIALIZED_NAME_AREA_NAME)
  private String areaName;

  public static final String SERIALIZED_NAME_COMPETITION_ID = "CompetitionId";
  @SerializedName(SERIALIZED_NAME_COMPETITION_ID)
  private Integer competitionId;

  public static final String SERIALIZED_NAME_CURRENT_SEASON = "CurrentSeason";
  @SerializedName(SERIALIZED_NAME_CURRENT_SEASON)
  private Season currentSeason;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_GAMES = "Games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private List<Game> games = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAYER_STATS_COVERAGE = "PlayerStatsCoverage";
  @SerializedName(SERIALIZED_NAME_PLAYER_STATS_COVERAGE)
  private Boolean playerStatsCoverage;

  public static final String SERIALIZED_NAME_SEASONS = "Seasons";
  @SerializedName(SERIALIZED_NAME_SEASONS)
  private List<Season> seasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAMS = "Teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<TeamDetail> teams = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public CompetitionDetail() {
  }

  public CompetitionDetail areaId(Integer areaId) {
    this.areaId = areaId;
    return this;
  }

  /**
   * Get areaId
   * @return areaId
   */
  @javax.annotation.Nullable
  public Integer getAreaId() {
    return areaId;
  }

  public void setAreaId(Integer areaId) {
    this.areaId = areaId;
  }


  public CompetitionDetail areaName(String areaName) {
    this.areaName = areaName;
    return this;
  }

  /**
   * Get areaName
   * @return areaName
   */
  @javax.annotation.Nullable
  public String getAreaName() {
    return areaName;
  }

  public void setAreaName(String areaName) {
    this.areaName = areaName;
  }


  public CompetitionDetail competitionId(Integer competitionId) {
    this.competitionId = competitionId;
    return this;
  }

  /**
   * Get competitionId
   * @return competitionId
   */
  @javax.annotation.Nullable
  public Integer getCompetitionId() {
    return competitionId;
  }

  public void setCompetitionId(Integer competitionId) {
    this.competitionId = competitionId;
  }


  public CompetitionDetail currentSeason(Season currentSeason) {
    this.currentSeason = currentSeason;
    return this;
  }

  /**
   * Get currentSeason
   * @return currentSeason
   */
  @javax.annotation.Nullable
  public Season getCurrentSeason() {
    return currentSeason;
  }

  public void setCurrentSeason(Season currentSeason) {
    this.currentSeason = currentSeason;
  }


  public CompetitionDetail format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public CompetitionDetail games(List<Game> games) {
    this.games = games;
    return this;
  }

  public CompetitionDetail addGamesItem(Game gamesItem) {
    if (this.games == null) {
      this.games = new ArrayList<>();
    }
    this.games.add(gamesItem);
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public List<Game> getGames() {
    return games;
  }

  public void setGames(List<Game> games) {
    this.games = games;
  }


  public CompetitionDetail gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public CompetitionDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CompetitionDetail playerStatsCoverage(Boolean playerStatsCoverage) {
    this.playerStatsCoverage = playerStatsCoverage;
    return this;
  }

  /**
   * Get playerStatsCoverage
   * @return playerStatsCoverage
   */
  @javax.annotation.Nullable
  public Boolean getPlayerStatsCoverage() {
    return playerStatsCoverage;
  }

  public void setPlayerStatsCoverage(Boolean playerStatsCoverage) {
    this.playerStatsCoverage = playerStatsCoverage;
  }


  public CompetitionDetail seasons(List<Season> seasons) {
    this.seasons = seasons;
    return this;
  }

  public CompetitionDetail addSeasonsItem(Season seasonsItem) {
    if (this.seasons == null) {
      this.seasons = new ArrayList<>();
    }
    this.seasons.add(seasonsItem);
    return this;
  }

  /**
   * Get seasons
   * @return seasons
   */
  @javax.annotation.Nullable
  public List<Season> getSeasons() {
    return seasons;
  }

  public void setSeasons(List<Season> seasons) {
    this.seasons = seasons;
  }


  public CompetitionDetail teams(List<TeamDetail> teams) {
    this.teams = teams;
    return this;
  }

  public CompetitionDetail addTeamsItem(TeamDetail teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

  /**
   * Get teams
   * @return teams
   */
  @javax.annotation.Nullable
  public List<TeamDetail> getTeams() {
    return teams;
  }

  public void setTeams(List<TeamDetail> teams) {
    this.teams = teams;
  }


  public CompetitionDetail type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompetitionDetail competitionDetail = (CompetitionDetail) o;
    return Objects.equals(this.areaId, competitionDetail.areaId) &&
        Objects.equals(this.areaName, competitionDetail.areaName) &&
        Objects.equals(this.competitionId, competitionDetail.competitionId) &&
        Objects.equals(this.currentSeason, competitionDetail.currentSeason) &&
        Objects.equals(this.format, competitionDetail.format) &&
        Objects.equals(this.games, competitionDetail.games) &&
        Objects.equals(this.gender, competitionDetail.gender) &&
        Objects.equals(this.name, competitionDetail.name) &&
        Objects.equals(this.playerStatsCoverage, competitionDetail.playerStatsCoverage) &&
        Objects.equals(this.seasons, competitionDetail.seasons) &&
        Objects.equals(this.teams, competitionDetail.teams) &&
        Objects.equals(this.type, competitionDetail.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaId, areaName, competitionId, currentSeason, format, games, gender, name, playerStatsCoverage, seasons, teams, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompetitionDetail {\n");
    sb.append("    areaId: ").append(toIndentedString(areaId)).append("\n");
    sb.append("    areaName: ").append(toIndentedString(areaName)).append("\n");
    sb.append("    competitionId: ").append(toIndentedString(competitionId)).append("\n");
    sb.append("    currentSeason: ").append(toIndentedString(currentSeason)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    playerStatsCoverage: ").append(toIndentedString(playerStatsCoverage)).append("\n");
    sb.append("    seasons: ").append(toIndentedString(seasons)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AreaId");
    openapiFields.add("AreaName");
    openapiFields.add("CompetitionId");
    openapiFields.add("CurrentSeason");
    openapiFields.add("Format");
    openapiFields.add("Games");
    openapiFields.add("Gender");
    openapiFields.add("Name");
    openapiFields.add("PlayerStatsCoverage");
    openapiFields.add("Seasons");
    openapiFields.add("Teams");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompetitionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompetitionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompetitionDetail is not found in the empty JSON string", CompetitionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompetitionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompetitionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AreaName") != null && !jsonObj.get("AreaName").isJsonNull()) && !jsonObj.get("AreaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AreaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AreaName").toString()));
      }
      // validate the optional field `CurrentSeason`
      if (jsonObj.get("CurrentSeason") != null && !jsonObj.get("CurrentSeason").isJsonNull()) {
        Season.validateJsonElement(jsonObj.get("CurrentSeason"));
      }
      if ((jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) && !jsonObj.get("Format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Format").toString()));
      }
      if (jsonObj.get("Games") != null && !jsonObj.get("Games").isJsonNull()) {
        JsonArray jsonArraygames = jsonObj.getAsJsonArray("Games");
        if (jsonArraygames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Games").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Games` to be an array in the JSON string but got `%s`", jsonObj.get("Games").toString()));
          }

          // validate the optional field `Games` (array)
          for (int i = 0; i < jsonArraygames.size(); i++) {
            Game.validateJsonElement(jsonArraygames.get(i));
          };
        }
      }
      if ((jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) && !jsonObj.get("Gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gender").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Seasons") != null && !jsonObj.get("Seasons").isJsonNull()) {
        JsonArray jsonArrayseasons = jsonObj.getAsJsonArray("Seasons");
        if (jsonArrayseasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Seasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Seasons` to be an array in the JSON string but got `%s`", jsonObj.get("Seasons").toString()));
          }

          // validate the optional field `Seasons` (array)
          for (int i = 0; i < jsonArrayseasons.size(); i++) {
            Season.validateJsonElement(jsonArrayseasons.get(i));
          };
        }
      }
      if (jsonObj.get("Teams") != null && !jsonObj.get("Teams").isJsonNull()) {
        JsonArray jsonArrayteams = jsonObj.getAsJsonArray("Teams");
        if (jsonArrayteams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Teams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Teams` to be an array in the JSON string but got `%s`", jsonObj.get("Teams").toString()));
          }

          // validate the optional field `Teams` (array)
          for (int i = 0; i < jsonArrayteams.size(); i++) {
            TeamDetail.validateJsonElement(jsonArrayteams.get(i));
          };
        }
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompetitionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompetitionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompetitionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompetitionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<CompetitionDetail>() {
           @Override
           public void write(JsonWriter out, CompetitionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompetitionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompetitionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompetitionDetail
   * @throws IOException if the JSON string is invalid with respect to CompetitionDetail
   */
  public static CompetitionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompetitionDetail.class);
  }

  /**
   * Convert an instance of CompetitionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

