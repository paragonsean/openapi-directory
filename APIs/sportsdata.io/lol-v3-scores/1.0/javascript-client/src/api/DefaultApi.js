/**
 * LoL v3 Scores
 * LoL v3 Scores
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Area from '../model/Area';
import Competition from '../model/Competition';
import CompetitionDetail from '../model/CompetitionDetail';
import Game from '../model/Game';
import Membership from '../model/Membership';
import Player from '../model/Player';
import SeasonTeam from '../model/SeasonTeam';
import Standing from '../model/Standing';
import Team from '../model/Team';
import Venue from '../model/Venue';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the areasCountries operation.
     * @callback module:api/DefaultApi~areasCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Area>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Areas (Countries)
     * Areas (Countries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~areasCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Area>}
     */
    areasCountries(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling areasCountries");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Area];
      return this.apiClient.callApi(
        '/{format}/Areas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the competitionFixturesLeagueDetails operation.
     * @callback module:api/DefaultApi~competitionFixturesLeagueDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Competition Fixtures (League Details)
     * Competition Fixtures (League Details)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} competitionid A LoL competition/league unique CompetitionId. Possible values include: <code>100000009</code>, etc.
     * @param {module:api/DefaultApi~competitionFixturesLeagueDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitionDetail}
     */
    competitionFixturesLeagueDetails(format, competitionid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling competitionFixturesLeagueDetails");
      }
      // verify the required parameter 'competitionid' is set
      if (competitionid === undefined || competitionid === null) {
        throw new Error("Missing the required parameter 'competitionid' when calling competitionFixturesLeagueDetails");
      }

      let pathParams = {
        'format': format,
        'competitionid': competitionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompetitionDetail;
      return this.apiClient.callApi(
        '/{format}/CompetitionDetails/{competitionid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the competitionsLeagues operation.
     * @callback module:api/DefaultApi~competitionsLeaguesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Competition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Competitions (Leagues)
     * Competitions (Leagues)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~competitionsLeaguesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Competition>}
     */
    competitionsLeagues(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling competitionsLeagues");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Competition];
      return this.apiClient.callApi(
        '/{format}/Competitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesByDate operation.
     * @callback module:api/DefaultApi~gamesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Games by Date
     * Games by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the game(s). <br>Examples: <code>2018-01-13</code>, <code>2018-06-13</code>.
     * @param {module:api/DefaultApi~gamesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    gamesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling gamesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling gamesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/GamesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsActive operation.
     * @callback module:api/DefaultApi~membershipsActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships (Active)
     * Memberships (Active)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~membershipsActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsActive(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsActive");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/ActiveMemberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsByTeamActive operation.
     * @callback module:api/DefaultApi~membershipsByTeamActiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships by Team (Active)
     * Memberships by Team (Active)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} teamid Unique FantasyData Team ID.  Example:<code>100000001</code>.
     * @param {module:api/DefaultApi~membershipsByTeamActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsByTeamActive(format, teamid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsByTeamActive");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling membershipsByTeamActive");
      }

      let pathParams = {
        'format': format,
        'teamid': teamid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/MembershipsByTeam/{teamid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsByTeamHistorical operation.
     * @callback module:api/DefaultApi~membershipsByTeamHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships by Team (Historical)
     * Memberships by Team (Historical)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} teamid Unique FantasyData Team ID.  Example:<code>100000001</code>.
     * @param {module:api/DefaultApi~membershipsByTeamHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsByTeamHistorical(format, teamid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsByTeamHistorical");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling membershipsByTeamHistorical");
      }

      let pathParams = {
        'format': format,
        'teamid': teamid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/HistoricalMembershipsByTeam/{teamid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the membershipsHistorical operation.
     * @callback module:api/DefaultApi~membershipsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Memberships (Historical)
     * Memberships (Historical)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~membershipsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    membershipsHistorical(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling membershipsHistorical");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Membership];
      return this.apiClient.callApi(
        '/{format}/HistoricalMemberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the player operation.
     * @callback module:api/DefaultApi~playerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player
     * Player
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} playerid Unique FantasyData Player ID. Example:<code>100000576</code>.
     * @param {module:api/DefaultApi~playerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    player(format, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling player");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling player");
      }

      let pathParams = {
        'format': format,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/{format}/Player/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the players operation.
     * @callback module:api/DefaultApi~playersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players
     * Players
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~playersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    players(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling players");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/Players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playersByTeam operation.
     * @callback module:api/DefaultApi~playersByTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Players by Team
     * Players by Team
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} teamid Unique FantasyData Team ID.  Example:<code>100000001</code>.
     * @param {module:api/DefaultApi~playersByTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    playersByTeam(format, teamid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling playersByTeam");
      }
      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling playersByTeam");
      }

      let pathParams = {
        'format': format,
        'teamid': teamid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/PlayersByTeam/{teamid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedule operation.
     * @callback module:api/DefaultApi~scheduleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule
     * Schedule
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competitions and Competition Details endpoints.  Examples: <code>100000138</code>, <code>1000001412</code>, etc
     * @param {module:api/DefaultApi~scheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    schedule(format, roundid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling schedule");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling schedule");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/{format}/Schedule/{roundid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seasonTeams operation.
     * @callback module:api/DefaultApi~seasonTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SeasonTeam>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season Teams
     * Season Teams
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} seasonid Unique FantasyData Season ID. SeasonIDs can be found in the Competitions and Competition Details endpoints.  Examples: <code>100000023</code>, <code>100000024</code>, etc
     * @param {module:api/DefaultApi~seasonTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SeasonTeam>}
     */
    seasonTeams(format, seasonid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling seasonTeams");
      }
      // verify the required parameter 'seasonid' is set
      if (seasonid === undefined || seasonid === null) {
        throw new Error("Missing the required parameter 'seasonid' when calling seasonTeams");
      }

      let pathParams = {
        'format': format,
        'seasonid': seasonid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SeasonTeam];
      return this.apiClient.callApi(
        '/{format}/SeasonTeams/{seasonid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the standings operation.
     * @callback module:api/DefaultApi~standingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Standing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Standings
     * Standings
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} roundid Unique FantasyData Round ID. RoundIDs can be found in the Competitions and Competition Details endpoints.  Example: <code>100000138</code>, etc
     * @param {module:api/DefaultApi~standingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Standing>}
     */
    standings(format, roundid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling standings");
      }
      // verify the required parameter 'roundid' is set
      if (roundid === undefined || roundid === null) {
        throw new Error("Missing the required parameter 'roundid' when calling standings");
      }

      let pathParams = {
        'format': format,
        'roundid': roundid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Standing];
      return this.apiClient.callApi(
        '/{format}/Standings/{roundid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teams operation.
     * @callback module:api/DefaultApi~teamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teams
     * Teams
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~teamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teams(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling teams");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/{format}/Teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the venues operation.
     * @callback module:api/DefaultApi~venuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Venue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Venues
     * Venues
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~venuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Venue>}
     */
    venues(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling venues");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Venue];
      return this.apiClient.callApi(
        '/{format}/Venues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
