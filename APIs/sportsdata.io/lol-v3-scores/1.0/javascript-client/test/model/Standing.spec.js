/**
 * LoL v3 Scores
 * LoL v3 Scores
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LoLV3Scores);
  }
}(this, function(expect, LoLV3Scores) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LoLV3Scores.Standing();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Standing', function() {
    it('should create an instance of Standing', function() {
      // uncomment below and update the code to test Standing
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be.a(LoLV3Scores.Standing);
    });

    it('should have the property games (base name: "Games")', function() {
      // uncomment below and update the code to test the property games
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "Group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property losses (base name: "Losses")', function() {
      // uncomment below and update the code to test the property losses
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property order (base name: "Order")', function() {
      // uncomment below and update the code to test the property order
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "Points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property roundId (base name: "RoundId")', function() {
      // uncomment below and update the code to test the property roundId
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property scoreAgainst (base name: "ScoreAgainst")', function() {
      // uncomment below and update the code to test the property scoreAgainst
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property scoreDifference (base name: "ScoreDifference")', function() {
      // uncomment below and update the code to test the property scoreDifference
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property scoreFor (base name: "ScoreFor")', function() {
      // uncomment below and update the code to test the property scoreFor
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property standingId (base name: "StandingId")', function() {
      // uncomment below and update the code to test the property standingId
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property teamId (base name: "TeamId")', function() {
      // uncomment below and update the code to test the property teamId
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

    it('should have the property wins (base name: "Wins")', function() {
      // uncomment below and update the code to test the property wins
      //var instance = new LoLV3Scores.Standing();
      //expect(instance).to.be();
    });

  });

}));
