/**
 * NBA v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_birth_city_isSet = false;
    m_birth_city_isValid = false;

    m_birth_country_isSet = false;
    m_birth_country_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_birth_state_isSet = false;
    m_birth_state_isValid = false;

    m_college_isSet = false;
    m_college_isValid = false;

    m_depth_chart_order_isSet = false;
    m_depth_chart_order_isValid = false;

    m_depth_chart_position_isSet = false;
    m_depth_chart_position_isValid = false;

    m_draft_kings_name_isSet = false;
    m_draft_kings_name_isValid = false;

    m_draft_kings_player_id_isSet = false;
    m_draft_kings_player_id_isValid = false;

    m_experience_isSet = false;
    m_experience_isValid = false;

    m_fan_duel_name_isSet = false;
    m_fan_duel_name_isValid = false;

    m_fan_duel_player_id_isSet = false;
    m_fan_duel_player_id_isValid = false;

    m_fantasy_alarm_player_id_isSet = false;
    m_fantasy_alarm_player_id_isValid = false;

    m_fantasy_draft_name_isSet = false;
    m_fantasy_draft_name_isValid = false;

    m_fantasy_draft_player_id_isSet = false;
    m_fantasy_draft_player_id_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_high_school_isSet = false;
    m_high_school_isValid = false;

    m_injury_body_part_isSet = false;
    m_injury_body_part_isValid = false;

    m_injury_notes_isSet = false;
    m_injury_notes_isValid = false;

    m_injury_start_date_isSet = false;
    m_injury_start_date_isValid = false;

    m_injury_status_isSet = false;
    m_injury_status_isValid = false;

    m_jersey_isSet = false;
    m_jersey_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_nba_dot_com_player_id_isSet = false;
    m_nba_dot_com_player_id_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_roto_wire_player_id_isSet = false;
    m_roto_wire_player_id_isValid = false;

    m_rotoworld_player_id_isSet = false;
    m_rotoworld_player_id_isValid = false;

    m_salary_isSet = false;
    m_salary_isValid = false;

    m_sport_radar_player_id_isSet = false;
    m_sport_radar_player_id_isValid = false;

    m_sports_data_id_isSet = false;
    m_sports_data_id_isValid = false;

    m_sports_direct_player_id_isSet = false;
    m_sports_direct_player_id_isValid = false;

    m_stats_player_id_isSet = false;
    m_stats_player_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_usa_today_headshot_no_background_updated_isSet = false;
    m_usa_today_headshot_no_background_updated_isValid = false;

    m_usa_today_headshot_no_background_url_isSet = false;
    m_usa_today_headshot_no_background_url_isValid = false;

    m_usa_today_headshot_updated_isSet = false;
    m_usa_today_headshot_updated_isValid = false;

    m_usa_today_headshot_url_isSet = false;
    m_usa_today_headshot_url_isValid = false;

    m_usa_today_player_id_isSet = false;
    m_usa_today_player_id_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_xml_team_player_id_isSet = false;
    m_xml_team_player_id_isValid = false;

    m_yahoo_name_isSet = false;
    m_yahoo_name_isValid = false;

    m_yahoo_player_id_isSet = false;
    m_yahoo_player_id_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_birth_city_isValid = ::OpenAPI::fromJsonValue(m_birth_city, json[QString("BirthCity")]);
    m_birth_city_isSet = !json[QString("BirthCity")].isNull() && m_birth_city_isValid;

    m_birth_country_isValid = ::OpenAPI::fromJsonValue(m_birth_country, json[QString("BirthCountry")]);
    m_birth_country_isSet = !json[QString("BirthCountry")].isNull() && m_birth_country_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("BirthDate")]);
    m_birth_date_isSet = !json[QString("BirthDate")].isNull() && m_birth_date_isValid;

    m_birth_state_isValid = ::OpenAPI::fromJsonValue(m_birth_state, json[QString("BirthState")]);
    m_birth_state_isSet = !json[QString("BirthState")].isNull() && m_birth_state_isValid;

    m_college_isValid = ::OpenAPI::fromJsonValue(m_college, json[QString("College")]);
    m_college_isSet = !json[QString("College")].isNull() && m_college_isValid;

    m_depth_chart_order_isValid = ::OpenAPI::fromJsonValue(m_depth_chart_order, json[QString("DepthChartOrder")]);
    m_depth_chart_order_isSet = !json[QString("DepthChartOrder")].isNull() && m_depth_chart_order_isValid;

    m_depth_chart_position_isValid = ::OpenAPI::fromJsonValue(m_depth_chart_position, json[QString("DepthChartPosition")]);
    m_depth_chart_position_isSet = !json[QString("DepthChartPosition")].isNull() && m_depth_chart_position_isValid;

    m_draft_kings_name_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_name, json[QString("DraftKingsName")]);
    m_draft_kings_name_isSet = !json[QString("DraftKingsName")].isNull() && m_draft_kings_name_isValid;

    m_draft_kings_player_id_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_player_id, json[QString("DraftKingsPlayerID")]);
    m_draft_kings_player_id_isSet = !json[QString("DraftKingsPlayerID")].isNull() && m_draft_kings_player_id_isValid;

    m_experience_isValid = ::OpenAPI::fromJsonValue(m_experience, json[QString("Experience")]);
    m_experience_isSet = !json[QString("Experience")].isNull() && m_experience_isValid;

    m_fan_duel_name_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_name, json[QString("FanDuelName")]);
    m_fan_duel_name_isSet = !json[QString("FanDuelName")].isNull() && m_fan_duel_name_isValid;

    m_fan_duel_player_id_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_player_id, json[QString("FanDuelPlayerID")]);
    m_fan_duel_player_id_isSet = !json[QString("FanDuelPlayerID")].isNull() && m_fan_duel_player_id_isValid;

    m_fantasy_alarm_player_id_isValid = ::OpenAPI::fromJsonValue(m_fantasy_alarm_player_id, json[QString("FantasyAlarmPlayerID")]);
    m_fantasy_alarm_player_id_isSet = !json[QString("FantasyAlarmPlayerID")].isNull() && m_fantasy_alarm_player_id_isValid;

    m_fantasy_draft_name_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_name, json[QString("FantasyDraftName")]);
    m_fantasy_draft_name_isSet = !json[QString("FantasyDraftName")].isNull() && m_fantasy_draft_name_isValid;

    m_fantasy_draft_player_id_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_player_id, json[QString("FantasyDraftPlayerID")]);
    m_fantasy_draft_player_id_isSet = !json[QString("FantasyDraftPlayerID")].isNull() && m_fantasy_draft_player_id_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_high_school_isValid = ::OpenAPI::fromJsonValue(m_high_school, json[QString("HighSchool")]);
    m_high_school_isSet = !json[QString("HighSchool")].isNull() && m_high_school_isValid;

    m_injury_body_part_isValid = ::OpenAPI::fromJsonValue(m_injury_body_part, json[QString("InjuryBodyPart")]);
    m_injury_body_part_isSet = !json[QString("InjuryBodyPart")].isNull() && m_injury_body_part_isValid;

    m_injury_notes_isValid = ::OpenAPI::fromJsonValue(m_injury_notes, json[QString("InjuryNotes")]);
    m_injury_notes_isSet = !json[QString("InjuryNotes")].isNull() && m_injury_notes_isValid;

    m_injury_start_date_isValid = ::OpenAPI::fromJsonValue(m_injury_start_date, json[QString("InjuryStartDate")]);
    m_injury_start_date_isSet = !json[QString("InjuryStartDate")].isNull() && m_injury_start_date_isValid;

    m_injury_status_isValid = ::OpenAPI::fromJsonValue(m_injury_status, json[QString("InjuryStatus")]);
    m_injury_status_isSet = !json[QString("InjuryStatus")].isNull() && m_injury_status_isValid;

    m_jersey_isValid = ::OpenAPI::fromJsonValue(m_jersey, json[QString("Jersey")]);
    m_jersey_isSet = !json[QString("Jersey")].isNull() && m_jersey_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_nba_dot_com_player_id_isValid = ::OpenAPI::fromJsonValue(m_nba_dot_com_player_id, json[QString("NbaDotComPlayerID")]);
    m_nba_dot_com_player_id_isSet = !json[QString("NbaDotComPlayerID")].isNull() && m_nba_dot_com_player_id_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("PhotoUrl")]);
    m_photo_url_isSet = !json[QString("PhotoUrl")].isNull() && m_photo_url_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_roto_wire_player_id_isValid = ::OpenAPI::fromJsonValue(m_roto_wire_player_id, json[QString("RotoWirePlayerID")]);
    m_roto_wire_player_id_isSet = !json[QString("RotoWirePlayerID")].isNull() && m_roto_wire_player_id_isValid;

    m_rotoworld_player_id_isValid = ::OpenAPI::fromJsonValue(m_rotoworld_player_id, json[QString("RotoworldPlayerID")]);
    m_rotoworld_player_id_isSet = !json[QString("RotoworldPlayerID")].isNull() && m_rotoworld_player_id_isValid;

    m_salary_isValid = ::OpenAPI::fromJsonValue(m_salary, json[QString("Salary")]);
    m_salary_isSet = !json[QString("Salary")].isNull() && m_salary_isValid;

    m_sport_radar_player_id_isValid = ::OpenAPI::fromJsonValue(m_sport_radar_player_id, json[QString("SportRadarPlayerID")]);
    m_sport_radar_player_id_isSet = !json[QString("SportRadarPlayerID")].isNull() && m_sport_radar_player_id_isValid;

    m_sports_data_id_isValid = ::OpenAPI::fromJsonValue(m_sports_data_id, json[QString("SportsDataID")]);
    m_sports_data_id_isSet = !json[QString("SportsDataID")].isNull() && m_sports_data_id_isValid;

    m_sports_direct_player_id_isValid = ::OpenAPI::fromJsonValue(m_sports_direct_player_id, json[QString("SportsDirectPlayerID")]);
    m_sports_direct_player_id_isSet = !json[QString("SportsDirectPlayerID")].isNull() && m_sports_direct_player_id_isValid;

    m_stats_player_id_isValid = ::OpenAPI::fromJsonValue(m_stats_player_id, json[QString("StatsPlayerID")]);
    m_stats_player_id_isSet = !json[QString("StatsPlayerID")].isNull() && m_stats_player_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_usa_today_headshot_no_background_updated_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_no_background_updated, json[QString("UsaTodayHeadshotNoBackgroundUpdated")]);
    m_usa_today_headshot_no_background_updated_isSet = !json[QString("UsaTodayHeadshotNoBackgroundUpdated")].isNull() && m_usa_today_headshot_no_background_updated_isValid;

    m_usa_today_headshot_no_background_url_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_no_background_url, json[QString("UsaTodayHeadshotNoBackgroundUrl")]);
    m_usa_today_headshot_no_background_url_isSet = !json[QString("UsaTodayHeadshotNoBackgroundUrl")].isNull() && m_usa_today_headshot_no_background_url_isValid;

    m_usa_today_headshot_updated_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_updated, json[QString("UsaTodayHeadshotUpdated")]);
    m_usa_today_headshot_updated_isSet = !json[QString("UsaTodayHeadshotUpdated")].isNull() && m_usa_today_headshot_updated_isValid;

    m_usa_today_headshot_url_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_url, json[QString("UsaTodayHeadshotUrl")]);
    m_usa_today_headshot_url_isSet = !json[QString("UsaTodayHeadshotUrl")].isNull() && m_usa_today_headshot_url_isValid;

    m_usa_today_player_id_isValid = ::OpenAPI::fromJsonValue(m_usa_today_player_id, json[QString("UsaTodayPlayerID")]);
    m_usa_today_player_id_isSet = !json[QString("UsaTodayPlayerID")].isNull() && m_usa_today_player_id_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;

    m_xml_team_player_id_isValid = ::OpenAPI::fromJsonValue(m_xml_team_player_id, json[QString("XmlTeamPlayerID")]);
    m_xml_team_player_id_isSet = !json[QString("XmlTeamPlayerID")].isNull() && m_xml_team_player_id_isValid;

    m_yahoo_name_isValid = ::OpenAPI::fromJsonValue(m_yahoo_name, json[QString("YahooName")]);
    m_yahoo_name_isSet = !json[QString("YahooName")].isNull() && m_yahoo_name_isValid;

    m_yahoo_player_id_isValid = ::OpenAPI::fromJsonValue(m_yahoo_player_id, json[QString("YahooPlayerID")]);
    m_yahoo_player_id_isSet = !json[QString("YahooPlayerID")].isNull() && m_yahoo_player_id_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_city_isSet) {
        obj.insert(QString("BirthCity"), ::OpenAPI::toJsonValue(m_birth_city));
    }
    if (m_birth_country_isSet) {
        obj.insert(QString("BirthCountry"), ::OpenAPI::toJsonValue(m_birth_country));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("BirthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_birth_state_isSet) {
        obj.insert(QString("BirthState"), ::OpenAPI::toJsonValue(m_birth_state));
    }
    if (m_college_isSet) {
        obj.insert(QString("College"), ::OpenAPI::toJsonValue(m_college));
    }
    if (m_depth_chart_order_isSet) {
        obj.insert(QString("DepthChartOrder"), ::OpenAPI::toJsonValue(m_depth_chart_order));
    }
    if (m_depth_chart_position_isSet) {
        obj.insert(QString("DepthChartPosition"), ::OpenAPI::toJsonValue(m_depth_chart_position));
    }
    if (m_draft_kings_name_isSet) {
        obj.insert(QString("DraftKingsName"), ::OpenAPI::toJsonValue(m_draft_kings_name));
    }
    if (m_draft_kings_player_id_isSet) {
        obj.insert(QString("DraftKingsPlayerID"), ::OpenAPI::toJsonValue(m_draft_kings_player_id));
    }
    if (m_experience_isSet) {
        obj.insert(QString("Experience"), ::OpenAPI::toJsonValue(m_experience));
    }
    if (m_fan_duel_name_isSet) {
        obj.insert(QString("FanDuelName"), ::OpenAPI::toJsonValue(m_fan_duel_name));
    }
    if (m_fan_duel_player_id_isSet) {
        obj.insert(QString("FanDuelPlayerID"), ::OpenAPI::toJsonValue(m_fan_duel_player_id));
    }
    if (m_fantasy_alarm_player_id_isSet) {
        obj.insert(QString("FantasyAlarmPlayerID"), ::OpenAPI::toJsonValue(m_fantasy_alarm_player_id));
    }
    if (m_fantasy_draft_name_isSet) {
        obj.insert(QString("FantasyDraftName"), ::OpenAPI::toJsonValue(m_fantasy_draft_name));
    }
    if (m_fantasy_draft_player_id_isSet) {
        obj.insert(QString("FantasyDraftPlayerID"), ::OpenAPI::toJsonValue(m_fantasy_draft_player_id));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_high_school_isSet) {
        obj.insert(QString("HighSchool"), ::OpenAPI::toJsonValue(m_high_school));
    }
    if (m_injury_body_part_isSet) {
        obj.insert(QString("InjuryBodyPart"), ::OpenAPI::toJsonValue(m_injury_body_part));
    }
    if (m_injury_notes_isSet) {
        obj.insert(QString("InjuryNotes"), ::OpenAPI::toJsonValue(m_injury_notes));
    }
    if (m_injury_start_date_isSet) {
        obj.insert(QString("InjuryStartDate"), ::OpenAPI::toJsonValue(m_injury_start_date));
    }
    if (m_injury_status_isSet) {
        obj.insert(QString("InjuryStatus"), ::OpenAPI::toJsonValue(m_injury_status));
    }
    if (m_jersey_isSet) {
        obj.insert(QString("Jersey"), ::OpenAPI::toJsonValue(m_jersey));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_nba_dot_com_player_id_isSet) {
        obj.insert(QString("NbaDotComPlayerID"), ::OpenAPI::toJsonValue(m_nba_dot_com_player_id));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("PhotoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_roto_wire_player_id_isSet) {
        obj.insert(QString("RotoWirePlayerID"), ::OpenAPI::toJsonValue(m_roto_wire_player_id));
    }
    if (m_rotoworld_player_id_isSet) {
        obj.insert(QString("RotoworldPlayerID"), ::OpenAPI::toJsonValue(m_rotoworld_player_id));
    }
    if (m_salary_isSet) {
        obj.insert(QString("Salary"), ::OpenAPI::toJsonValue(m_salary));
    }
    if (m_sport_radar_player_id_isSet) {
        obj.insert(QString("SportRadarPlayerID"), ::OpenAPI::toJsonValue(m_sport_radar_player_id));
    }
    if (m_sports_data_id_isSet) {
        obj.insert(QString("SportsDataID"), ::OpenAPI::toJsonValue(m_sports_data_id));
    }
    if (m_sports_direct_player_id_isSet) {
        obj.insert(QString("SportsDirectPlayerID"), ::OpenAPI::toJsonValue(m_sports_direct_player_id));
    }
    if (m_stats_player_id_isSet) {
        obj.insert(QString("StatsPlayerID"), ::OpenAPI::toJsonValue(m_stats_player_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_usa_today_headshot_no_background_updated_isSet) {
        obj.insert(QString("UsaTodayHeadshotNoBackgroundUpdated"), ::OpenAPI::toJsonValue(m_usa_today_headshot_no_background_updated));
    }
    if (m_usa_today_headshot_no_background_url_isSet) {
        obj.insert(QString("UsaTodayHeadshotNoBackgroundUrl"), ::OpenAPI::toJsonValue(m_usa_today_headshot_no_background_url));
    }
    if (m_usa_today_headshot_updated_isSet) {
        obj.insert(QString("UsaTodayHeadshotUpdated"), ::OpenAPI::toJsonValue(m_usa_today_headshot_updated));
    }
    if (m_usa_today_headshot_url_isSet) {
        obj.insert(QString("UsaTodayHeadshotUrl"), ::OpenAPI::toJsonValue(m_usa_today_headshot_url));
    }
    if (m_usa_today_player_id_isSet) {
        obj.insert(QString("UsaTodayPlayerID"), ::OpenAPI::toJsonValue(m_usa_today_player_id));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_xml_team_player_id_isSet) {
        obj.insert(QString("XmlTeamPlayerID"), ::OpenAPI::toJsonValue(m_xml_team_player_id));
    }
    if (m_yahoo_name_isSet) {
        obj.insert(QString("YahooName"), ::OpenAPI::toJsonValue(m_yahoo_name));
    }
    if (m_yahoo_player_id_isSet) {
        obj.insert(QString("YahooPlayerID"), ::OpenAPI::toJsonValue(m_yahoo_player_id));
    }
    return obj;
}

QString OAIPlayer::getBirthCity() const {
    return m_birth_city;
}
void OAIPlayer::setBirthCity(const QString &birth_city) {
    m_birth_city = birth_city;
    m_birth_city_isSet = true;
}

bool OAIPlayer::is_birth_city_Set() const{
    return m_birth_city_isSet;
}

bool OAIPlayer::is_birth_city_Valid() const{
    return m_birth_city_isValid;
}

QString OAIPlayer::getBirthCountry() const {
    return m_birth_country;
}
void OAIPlayer::setBirthCountry(const QString &birth_country) {
    m_birth_country = birth_country;
    m_birth_country_isSet = true;
}

bool OAIPlayer::is_birth_country_Set() const{
    return m_birth_country_isSet;
}

bool OAIPlayer::is_birth_country_Valid() const{
    return m_birth_country_isValid;
}

QString OAIPlayer::getBirthDate() const {
    return m_birth_date;
}
void OAIPlayer::setBirthDate(const QString &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIPlayer::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIPlayer::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIPlayer::getBirthState() const {
    return m_birth_state;
}
void OAIPlayer::setBirthState(const QString &birth_state) {
    m_birth_state = birth_state;
    m_birth_state_isSet = true;
}

bool OAIPlayer::is_birth_state_Set() const{
    return m_birth_state_isSet;
}

bool OAIPlayer::is_birth_state_Valid() const{
    return m_birth_state_isValid;
}

QString OAIPlayer::getCollege() const {
    return m_college;
}
void OAIPlayer::setCollege(const QString &college) {
    m_college = college;
    m_college_isSet = true;
}

bool OAIPlayer::is_college_Set() const{
    return m_college_isSet;
}

bool OAIPlayer::is_college_Valid() const{
    return m_college_isValid;
}

qint32 OAIPlayer::getDepthChartOrder() const {
    return m_depth_chart_order;
}
void OAIPlayer::setDepthChartOrder(const qint32 &depth_chart_order) {
    m_depth_chart_order = depth_chart_order;
    m_depth_chart_order_isSet = true;
}

bool OAIPlayer::is_depth_chart_order_Set() const{
    return m_depth_chart_order_isSet;
}

bool OAIPlayer::is_depth_chart_order_Valid() const{
    return m_depth_chart_order_isValid;
}

QString OAIPlayer::getDepthChartPosition() const {
    return m_depth_chart_position;
}
void OAIPlayer::setDepthChartPosition(const QString &depth_chart_position) {
    m_depth_chart_position = depth_chart_position;
    m_depth_chart_position_isSet = true;
}

bool OAIPlayer::is_depth_chart_position_Set() const{
    return m_depth_chart_position_isSet;
}

bool OAIPlayer::is_depth_chart_position_Valid() const{
    return m_depth_chart_position_isValid;
}

QString OAIPlayer::getDraftKingsName() const {
    return m_draft_kings_name;
}
void OAIPlayer::setDraftKingsName(const QString &draft_kings_name) {
    m_draft_kings_name = draft_kings_name;
    m_draft_kings_name_isSet = true;
}

bool OAIPlayer::is_draft_kings_name_Set() const{
    return m_draft_kings_name_isSet;
}

bool OAIPlayer::is_draft_kings_name_Valid() const{
    return m_draft_kings_name_isValid;
}

qint32 OAIPlayer::getDraftKingsPlayerId() const {
    return m_draft_kings_player_id;
}
void OAIPlayer::setDraftKingsPlayerId(const qint32 &draft_kings_player_id) {
    m_draft_kings_player_id = draft_kings_player_id;
    m_draft_kings_player_id_isSet = true;
}

bool OAIPlayer::is_draft_kings_player_id_Set() const{
    return m_draft_kings_player_id_isSet;
}

bool OAIPlayer::is_draft_kings_player_id_Valid() const{
    return m_draft_kings_player_id_isValid;
}

qint32 OAIPlayer::getExperience() const {
    return m_experience;
}
void OAIPlayer::setExperience(const qint32 &experience) {
    m_experience = experience;
    m_experience_isSet = true;
}

bool OAIPlayer::is_experience_Set() const{
    return m_experience_isSet;
}

bool OAIPlayer::is_experience_Valid() const{
    return m_experience_isValid;
}

QString OAIPlayer::getFanDuelName() const {
    return m_fan_duel_name;
}
void OAIPlayer::setFanDuelName(const QString &fan_duel_name) {
    m_fan_duel_name = fan_duel_name;
    m_fan_duel_name_isSet = true;
}

bool OAIPlayer::is_fan_duel_name_Set() const{
    return m_fan_duel_name_isSet;
}

bool OAIPlayer::is_fan_duel_name_Valid() const{
    return m_fan_duel_name_isValid;
}

qint32 OAIPlayer::getFanDuelPlayerId() const {
    return m_fan_duel_player_id;
}
void OAIPlayer::setFanDuelPlayerId(const qint32 &fan_duel_player_id) {
    m_fan_duel_player_id = fan_duel_player_id;
    m_fan_duel_player_id_isSet = true;
}

bool OAIPlayer::is_fan_duel_player_id_Set() const{
    return m_fan_duel_player_id_isSet;
}

bool OAIPlayer::is_fan_duel_player_id_Valid() const{
    return m_fan_duel_player_id_isValid;
}

qint32 OAIPlayer::getFantasyAlarmPlayerId() const {
    return m_fantasy_alarm_player_id;
}
void OAIPlayer::setFantasyAlarmPlayerId(const qint32 &fantasy_alarm_player_id) {
    m_fantasy_alarm_player_id = fantasy_alarm_player_id;
    m_fantasy_alarm_player_id_isSet = true;
}

bool OAIPlayer::is_fantasy_alarm_player_id_Set() const{
    return m_fantasy_alarm_player_id_isSet;
}

bool OAIPlayer::is_fantasy_alarm_player_id_Valid() const{
    return m_fantasy_alarm_player_id_isValid;
}

QString OAIPlayer::getFantasyDraftName() const {
    return m_fantasy_draft_name;
}
void OAIPlayer::setFantasyDraftName(const QString &fantasy_draft_name) {
    m_fantasy_draft_name = fantasy_draft_name;
    m_fantasy_draft_name_isSet = true;
}

bool OAIPlayer::is_fantasy_draft_name_Set() const{
    return m_fantasy_draft_name_isSet;
}

bool OAIPlayer::is_fantasy_draft_name_Valid() const{
    return m_fantasy_draft_name_isValid;
}

qint32 OAIPlayer::getFantasyDraftPlayerId() const {
    return m_fantasy_draft_player_id;
}
void OAIPlayer::setFantasyDraftPlayerId(const qint32 &fantasy_draft_player_id) {
    m_fantasy_draft_player_id = fantasy_draft_player_id;
    m_fantasy_draft_player_id_isSet = true;
}

bool OAIPlayer::is_fantasy_draft_player_id_Set() const{
    return m_fantasy_draft_player_id_isSet;
}

bool OAIPlayer::is_fantasy_draft_player_id_Valid() const{
    return m_fantasy_draft_player_id_isValid;
}

QString OAIPlayer::getFirstName() const {
    return m_first_name;
}
void OAIPlayer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPlayer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPlayer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIPlayer::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIPlayer::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIPlayer::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIPlayer::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

qint32 OAIPlayer::getHeight() const {
    return m_height;
}
void OAIPlayer::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlayer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlayer::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIPlayer::getHighSchool() const {
    return m_high_school;
}
void OAIPlayer::setHighSchool(const QString &high_school) {
    m_high_school = high_school;
    m_high_school_isSet = true;
}

bool OAIPlayer::is_high_school_Set() const{
    return m_high_school_isSet;
}

bool OAIPlayer::is_high_school_Valid() const{
    return m_high_school_isValid;
}

QString OAIPlayer::getInjuryBodyPart() const {
    return m_injury_body_part;
}
void OAIPlayer::setInjuryBodyPart(const QString &injury_body_part) {
    m_injury_body_part = injury_body_part;
    m_injury_body_part_isSet = true;
}

bool OAIPlayer::is_injury_body_part_Set() const{
    return m_injury_body_part_isSet;
}

bool OAIPlayer::is_injury_body_part_Valid() const{
    return m_injury_body_part_isValid;
}

QString OAIPlayer::getInjuryNotes() const {
    return m_injury_notes;
}
void OAIPlayer::setInjuryNotes(const QString &injury_notes) {
    m_injury_notes = injury_notes;
    m_injury_notes_isSet = true;
}

bool OAIPlayer::is_injury_notes_Set() const{
    return m_injury_notes_isSet;
}

bool OAIPlayer::is_injury_notes_Valid() const{
    return m_injury_notes_isValid;
}

QString OAIPlayer::getInjuryStartDate() const {
    return m_injury_start_date;
}
void OAIPlayer::setInjuryStartDate(const QString &injury_start_date) {
    m_injury_start_date = injury_start_date;
    m_injury_start_date_isSet = true;
}

bool OAIPlayer::is_injury_start_date_Set() const{
    return m_injury_start_date_isSet;
}

bool OAIPlayer::is_injury_start_date_Valid() const{
    return m_injury_start_date_isValid;
}

QString OAIPlayer::getInjuryStatus() const {
    return m_injury_status;
}
void OAIPlayer::setInjuryStatus(const QString &injury_status) {
    m_injury_status = injury_status;
    m_injury_status_isSet = true;
}

bool OAIPlayer::is_injury_status_Set() const{
    return m_injury_status_isSet;
}

bool OAIPlayer::is_injury_status_Valid() const{
    return m_injury_status_isValid;
}

qint32 OAIPlayer::getJersey() const {
    return m_jersey;
}
void OAIPlayer::setJersey(const qint32 &jersey) {
    m_jersey = jersey;
    m_jersey_isSet = true;
}

bool OAIPlayer::is_jersey_Set() const{
    return m_jersey_isSet;
}

bool OAIPlayer::is_jersey_Valid() const{
    return m_jersey_isValid;
}

QString OAIPlayer::getLastName() const {
    return m_last_name;
}
void OAIPlayer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPlayer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPlayer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIPlayer::getNbaDotComPlayerId() const {
    return m_nba_dot_com_player_id;
}
void OAIPlayer::setNbaDotComPlayerId(const qint32 &nba_dot_com_player_id) {
    m_nba_dot_com_player_id = nba_dot_com_player_id;
    m_nba_dot_com_player_id_isSet = true;
}

bool OAIPlayer::is_nba_dot_com_player_id_Set() const{
    return m_nba_dot_com_player_id_isSet;
}

bool OAIPlayer::is_nba_dot_com_player_id_Valid() const{
    return m_nba_dot_com_player_id_isValid;
}

QString OAIPlayer::getPhotoUrl() const {
    return m_photo_url;
}
void OAIPlayer::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIPlayer::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIPlayer::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

qint32 OAIPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIPlayer::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayer::getPosition() const {
    return m_position;
}
void OAIPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayer::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayer::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayer::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayer::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayer::is_position_category_Valid() const{
    return m_position_category_isValid;
}

qint32 OAIPlayer::getRotoWirePlayerId() const {
    return m_roto_wire_player_id;
}
void OAIPlayer::setRotoWirePlayerId(const qint32 &roto_wire_player_id) {
    m_roto_wire_player_id = roto_wire_player_id;
    m_roto_wire_player_id_isSet = true;
}

bool OAIPlayer::is_roto_wire_player_id_Set() const{
    return m_roto_wire_player_id_isSet;
}

bool OAIPlayer::is_roto_wire_player_id_Valid() const{
    return m_roto_wire_player_id_isValid;
}

qint32 OAIPlayer::getRotoworldPlayerId() const {
    return m_rotoworld_player_id;
}
void OAIPlayer::setRotoworldPlayerId(const qint32 &rotoworld_player_id) {
    m_rotoworld_player_id = rotoworld_player_id;
    m_rotoworld_player_id_isSet = true;
}

bool OAIPlayer::is_rotoworld_player_id_Set() const{
    return m_rotoworld_player_id_isSet;
}

bool OAIPlayer::is_rotoworld_player_id_Valid() const{
    return m_rotoworld_player_id_isValid;
}

qint32 OAIPlayer::getSalary() const {
    return m_salary;
}
void OAIPlayer::setSalary(const qint32 &salary) {
    m_salary = salary;
    m_salary_isSet = true;
}

bool OAIPlayer::is_salary_Set() const{
    return m_salary_isSet;
}

bool OAIPlayer::is_salary_Valid() const{
    return m_salary_isValid;
}

QString OAIPlayer::getSportRadarPlayerId() const {
    return m_sport_radar_player_id;
}
void OAIPlayer::setSportRadarPlayerId(const QString &sport_radar_player_id) {
    m_sport_radar_player_id = sport_radar_player_id;
    m_sport_radar_player_id_isSet = true;
}

bool OAIPlayer::is_sport_radar_player_id_Set() const{
    return m_sport_radar_player_id_isSet;
}

bool OAIPlayer::is_sport_radar_player_id_Valid() const{
    return m_sport_radar_player_id_isValid;
}

QString OAIPlayer::getSportsDataId() const {
    return m_sports_data_id;
}
void OAIPlayer::setSportsDataId(const QString &sports_data_id) {
    m_sports_data_id = sports_data_id;
    m_sports_data_id_isSet = true;
}

bool OAIPlayer::is_sports_data_id_Set() const{
    return m_sports_data_id_isSet;
}

bool OAIPlayer::is_sports_data_id_Valid() const{
    return m_sports_data_id_isValid;
}

qint32 OAIPlayer::getSportsDirectPlayerId() const {
    return m_sports_direct_player_id;
}
void OAIPlayer::setSportsDirectPlayerId(const qint32 &sports_direct_player_id) {
    m_sports_direct_player_id = sports_direct_player_id;
    m_sports_direct_player_id_isSet = true;
}

bool OAIPlayer::is_sports_direct_player_id_Set() const{
    return m_sports_direct_player_id_isSet;
}

bool OAIPlayer::is_sports_direct_player_id_Valid() const{
    return m_sports_direct_player_id_isValid;
}

qint32 OAIPlayer::getStatsPlayerId() const {
    return m_stats_player_id;
}
void OAIPlayer::setStatsPlayerId(const qint32 &stats_player_id) {
    m_stats_player_id = stats_player_id;
    m_stats_player_id_isSet = true;
}

bool OAIPlayer::is_stats_player_id_Set() const{
    return m_stats_player_id_isSet;
}

bool OAIPlayer::is_stats_player_id_Valid() const{
    return m_stats_player_id_isValid;
}

QString OAIPlayer::getStatus() const {
    return m_status;
}
void OAIPlayer::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlayer::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlayer::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPlayer::getTeam() const {
    return m_team;
}
void OAIPlayer::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayer::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayer::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayer::getTeamId() const {
    return m_team_id;
}
void OAIPlayer::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayer::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayer::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotNoBackgroundUpdated() const {
    return m_usa_today_headshot_no_background_updated;
}
void OAIPlayer::setUsaTodayHeadshotNoBackgroundUpdated(const QString &usa_today_headshot_no_background_updated) {
    m_usa_today_headshot_no_background_updated = usa_today_headshot_no_background_updated;
    m_usa_today_headshot_no_background_updated_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_no_background_updated_Set() const{
    return m_usa_today_headshot_no_background_updated_isSet;
}

bool OAIPlayer::is_usa_today_headshot_no_background_updated_Valid() const{
    return m_usa_today_headshot_no_background_updated_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotNoBackgroundUrl() const {
    return m_usa_today_headshot_no_background_url;
}
void OAIPlayer::setUsaTodayHeadshotNoBackgroundUrl(const QString &usa_today_headshot_no_background_url) {
    m_usa_today_headshot_no_background_url = usa_today_headshot_no_background_url;
    m_usa_today_headshot_no_background_url_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_no_background_url_Set() const{
    return m_usa_today_headshot_no_background_url_isSet;
}

bool OAIPlayer::is_usa_today_headshot_no_background_url_Valid() const{
    return m_usa_today_headshot_no_background_url_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotUpdated() const {
    return m_usa_today_headshot_updated;
}
void OAIPlayer::setUsaTodayHeadshotUpdated(const QString &usa_today_headshot_updated) {
    m_usa_today_headshot_updated = usa_today_headshot_updated;
    m_usa_today_headshot_updated_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_updated_Set() const{
    return m_usa_today_headshot_updated_isSet;
}

bool OAIPlayer::is_usa_today_headshot_updated_Valid() const{
    return m_usa_today_headshot_updated_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotUrl() const {
    return m_usa_today_headshot_url;
}
void OAIPlayer::setUsaTodayHeadshotUrl(const QString &usa_today_headshot_url) {
    m_usa_today_headshot_url = usa_today_headshot_url;
    m_usa_today_headshot_url_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_url_Set() const{
    return m_usa_today_headshot_url_isSet;
}

bool OAIPlayer::is_usa_today_headshot_url_Valid() const{
    return m_usa_today_headshot_url_isValid;
}

qint32 OAIPlayer::getUsaTodayPlayerId() const {
    return m_usa_today_player_id;
}
void OAIPlayer::setUsaTodayPlayerId(const qint32 &usa_today_player_id) {
    m_usa_today_player_id = usa_today_player_id;
    m_usa_today_player_id_isSet = true;
}

bool OAIPlayer::is_usa_today_player_id_Set() const{
    return m_usa_today_player_id_isSet;
}

bool OAIPlayer::is_usa_today_player_id_Valid() const{
    return m_usa_today_player_id_isValid;
}

qint32 OAIPlayer::getWeight() const {
    return m_weight;
}
void OAIPlayer::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPlayer::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPlayer::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAIPlayer::getXmlTeamPlayerId() const {
    return m_xml_team_player_id;
}
void OAIPlayer::setXmlTeamPlayerId(const qint32 &xml_team_player_id) {
    m_xml_team_player_id = xml_team_player_id;
    m_xml_team_player_id_isSet = true;
}

bool OAIPlayer::is_xml_team_player_id_Set() const{
    return m_xml_team_player_id_isSet;
}

bool OAIPlayer::is_xml_team_player_id_Valid() const{
    return m_xml_team_player_id_isValid;
}

QString OAIPlayer::getYahooName() const {
    return m_yahoo_name;
}
void OAIPlayer::setYahooName(const QString &yahoo_name) {
    m_yahoo_name = yahoo_name;
    m_yahoo_name_isSet = true;
}

bool OAIPlayer::is_yahoo_name_Set() const{
    return m_yahoo_name_isSet;
}

bool OAIPlayer::is_yahoo_name_Valid() const{
    return m_yahoo_name_isValid;
}

qint32 OAIPlayer::getYahooPlayerId() const {
    return m_yahoo_player_id;
}
void OAIPlayer::setYahooPlayerId(const qint32 &yahoo_player_id) {
    m_yahoo_player_id = yahoo_player_id;
    m_yahoo_player_id_isSet = true;
}

bool OAIPlayer::is_yahoo_player_id_Set() const{
    return m_yahoo_player_id_isSet;
}

bool OAIPlayer::is_yahoo_player_id_Valid() const{
    return m_yahoo_player_id_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_chart_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_chart_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_alarm_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jersey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nba_dot_com_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roto_wire_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotoworld_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sport_radar_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sports_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sports_direct_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_no_background_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_no_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_team_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
