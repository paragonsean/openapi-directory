/**
 * NBA v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGame.h"
#include "OAINews.h"
#include "OAIPlayer.h"
#include "OAIPlayerBasic.h"
#include "OAIReferee.h"
#include "OAIScheduleBasic.h"
#include "OAIScoreBasic.h"
#include "OAISeason.h"
#include "OAIStadium.h"
#include "OAIStanding.h"
#include "OAITeam.h"
#include "OAITeamDepthChart.h"
#include "OAITeamGame.h"
#include "OAITeamSeason.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    */
    virtual void areGamesInProgress(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void currentSeason(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void depthCharts(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void gamesByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void gamesByDateBasic(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    */
    virtual void news(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void newsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void newsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByActive(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByFreeAgent(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerDetailsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playersByTeam(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playersByTeamBasic(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    */
    virtual void referees(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void schedules(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void schedulesBasic(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void stadiums(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void standings(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  teamid QString [required]
    * @param[in]  numberofgames QString [required]
    */
    virtual void teamGameLogsBySeason(const QString &format, const QString &season, const QString &teamid, const QString &numberofgames);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void teamGameStatsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void teamSeasonStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsActive(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teamsAll(const QString &format);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void areGamesInProgressCallback(OAIHttpRequestWorker *worker);
    void currentSeasonCallback(OAIHttpRequestWorker *worker);
    void depthChartsCallback(OAIHttpRequestWorker *worker);
    void gamesByDateCallback(OAIHttpRequestWorker *worker);
    void gamesByDateBasicCallback(OAIHttpRequestWorker *worker);
    void newsCallback(OAIHttpRequestWorker *worker);
    void newsByDateCallback(OAIHttpRequestWorker *worker);
    void newsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByActiveCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByFreeAgentCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playersByTeamCallback(OAIHttpRequestWorker *worker);
    void playersByTeamBasicCallback(OAIHttpRequestWorker *worker);
    void refereesCallback(OAIHttpRequestWorker *worker);
    void schedulesCallback(OAIHttpRequestWorker *worker);
    void schedulesBasicCallback(OAIHttpRequestWorker *worker);
    void stadiumsCallback(OAIHttpRequestWorker *worker);
    void standingsCallback(OAIHttpRequestWorker *worker);
    void teamGameLogsBySeasonCallback(OAIHttpRequestWorker *worker);
    void teamGameStatsByDateCallback(OAIHttpRequestWorker *worker);
    void teamSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void teamsActiveCallback(OAIHttpRequestWorker *worker);
    void teamsAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void areGamesInProgressSignal(bool summary);
    void currentSeasonSignal(OAISeason summary);
    void depthChartsSignal(QList<OAITeamDepthChart> summary);
    void gamesByDateSignal(QList<OAIGame> summary);
    void gamesByDateBasicSignal(QList<OAIScoreBasic> summary);
    void newsSignal(QList<OAINews> summary);
    void newsByDateSignal(QList<OAINews> summary);
    void newsByPlayerSignal(QList<OAINews> summary);
    void playerDetailsByActiveSignal(QList<OAIPlayer> summary);
    void playerDetailsByFreeAgentSignal(QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignal(OAIPlayer summary);
    void playersByTeamSignal(QList<OAIPlayer> summary);
    void playersByTeamBasicSignal(QList<OAIPlayerBasic> summary);
    void refereesSignal(QList<OAIReferee> summary);
    void schedulesSignal(QList<OAIGame> summary);
    void schedulesBasicSignal(QList<OAIScheduleBasic> summary);
    void stadiumsSignal(QList<OAIStadium> summary);
    void standingsSignal(QList<OAIStanding> summary);
    void teamGameLogsBySeasonSignal(QList<OAITeamGame> summary);
    void teamGameStatsByDateSignal(QList<OAITeamGame> summary);
    void teamSeasonStatsSignal(QList<OAITeamSeason> summary);
    void teamsActiveSignal(QList<OAITeam> summary);
    void teamsAllSignal(QList<OAITeam> summary);


    void areGamesInProgressSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void currentSeasonSignalFull(OAIHttpRequestWorker *worker, OAISeason summary);
    void depthChartsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamDepthChart> summary);
    void gamesByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void gamesByDateBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreBasic> summary);
    void newsSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void newsByPlayerSignalFull(OAIHttpRequestWorker *worker, QList<OAINews> summary);
    void playerDetailsByActiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByFreeAgentSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayer summary);
    void playersByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playersByTeamBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerBasic> summary);
    void refereesSignalFull(OAIHttpRequestWorker *worker, QList<OAIReferee> summary);
    void schedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void schedulesBasicSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduleBasic> summary);
    void stadiumsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStadium> summary);
    void standingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStanding> summary);
    void teamGameLogsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamGameStatsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamSeason> summary);
    void teamsActiveSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teamsAllSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalError() instead")
    void areGamesInProgressSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonSignalError() instead")
    void currentSeasonSignalE(OAISeason summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalError(OAISeason summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depthChartsSignalError() instead")
    void depthChartsSignalE(QList<OAITeamDepthChart> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void depthChartsSignalError(QList<OAITeamDepthChart> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateSignalError() instead")
    void gamesByDateSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateBasicSignalError() instead")
    void gamesByDateBasicSignalE(QList<OAIScoreBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateBasicSignalError(QList<OAIScoreBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalError() instead")
    void newsSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalError() instead")
    void newsByDateSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalError() instead")
    void newsByPlayerSignalE(QList<OAINews> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalError(QList<OAINews> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByActiveSignalError() instead")
    void playerDetailsByActiveSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByActiveSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByFreeAgentSignalError() instead")
    void playerDetailsByFreeAgentSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByFreeAgentSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalError() instead")
    void playerDetailsByPlayerSignalE(OAIPlayer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalError(OAIPlayer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamSignalError() instead")
    void playersByTeamSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamBasicSignalError() instead")
    void playersByTeamBasicSignalE(QList<OAIPlayerBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamBasicSignalError(QList<OAIPlayerBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refereesSignalError() instead")
    void refereesSignalE(QList<OAIReferee> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refereesSignalError(QList<OAIReferee> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesSignalError() instead")
    void schedulesSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesBasicSignalError() instead")
    void schedulesBasicSignalE(QList<OAIScheduleBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesBasicSignalError(QList<OAIScheduleBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalError() instead")
    void stadiumsSignalE(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalError(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use standingsSignalError() instead")
    void standingsSignalE(QList<OAIStanding> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void standingsSignalError(QList<OAIStanding> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalError() instead")
    void teamGameLogsBySeasonSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsByDateSignalError() instead")
    void teamGameStatsByDateSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsByDateSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalError() instead")
    void teamSeasonStatsSignalE(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalError(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsActiveSignalError() instead")
    void teamsActiveSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsActiveSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAllSignalError() instead")
    void teamsAllSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAllSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalErrorFull() instead")
    void areGamesInProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonSignalErrorFull() instead")
    void currentSeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depthChartsSignalErrorFull() instead")
    void depthChartsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void depthChartsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateSignalErrorFull() instead")
    void gamesByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateBasicSignalErrorFull() instead")
    void gamesByDateBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsSignalErrorFull() instead")
    void newsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByDateSignalErrorFull() instead")
    void newsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use newsByPlayerSignalErrorFull() instead")
    void newsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void newsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByActiveSignalErrorFull() instead")
    void playerDetailsByActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByFreeAgentSignalErrorFull() instead")
    void playerDetailsByFreeAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByFreeAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalErrorFull() instead")
    void playerDetailsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamSignalErrorFull() instead")
    void playersByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersByTeamBasicSignalErrorFull() instead")
    void playersByTeamBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playersByTeamBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refereesSignalErrorFull() instead")
    void refereesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refereesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesSignalErrorFull() instead")
    void schedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesBasicSignalErrorFull() instead")
    void schedulesBasicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesBasicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalErrorFull() instead")
    void stadiumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use standingsSignalErrorFull() instead")
    void standingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void standingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalErrorFull() instead")
    void teamGameLogsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsByDateSignalErrorFull() instead")
    void teamGameStatsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalErrorFull() instead")
    void teamSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsActiveSignalErrorFull() instead")
    void teamsActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAllSignalErrorFull() instead")
    void teamsAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
