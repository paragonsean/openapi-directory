/**
 * NBA v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamGame::OAITeamGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamGame::OAITeamGame() {
    this->initializeModel();
}

OAITeamGame::~OAITeamGame() {}

void OAITeamGame::initializeModel() {

    m_assists_isSet = false;
    m_assists_isValid = false;

    m_assists_percentage_isSet = false;
    m_assists_percentage_isValid = false;

    m_blocked_shots_isSet = false;
    m_blocked_shots_isValid = false;

    m_blocks_percentage_isSet = false;
    m_blocks_percentage_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_defensive_rebounds_isSet = false;
    m_defensive_rebounds_isValid = false;

    m_defensive_rebounds_percentage_isSet = false;
    m_defensive_rebounds_percentage_isValid = false;

    m_double_doubles_isSet = false;
    m_double_doubles_isValid = false;

    m_effective_field_goals_percentage_isSet = false;
    m_effective_field_goals_percentage_isValid = false;

    m_fantasy_points_isSet = false;
    m_fantasy_points_isValid = false;

    m_fantasy_points_draft_kings_isSet = false;
    m_fantasy_points_draft_kings_isValid = false;

    m_fantasy_points_fan_duel_isSet = false;
    m_fantasy_points_fan_duel_isValid = false;

    m_fantasy_points_fantasy_draft_isSet = false;
    m_fantasy_points_fantasy_draft_isValid = false;

    m_fantasy_points_yahoo_isSet = false;
    m_fantasy_points_yahoo_isValid = false;

    m_field_goals_attempted_isSet = false;
    m_field_goals_attempted_isValid = false;

    m_field_goals_made_isSet = false;
    m_field_goals_made_isValid = false;

    m_field_goals_percentage_isSet = false;
    m_field_goals_percentage_isValid = false;

    m_free_throws_attempted_isSet = false;
    m_free_throws_attempted_isValid = false;

    m_free_throws_made_isSet = false;
    m_free_throws_made_isValid = false;

    m_free_throws_percentage_isSet = false;
    m_free_throws_percentage_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_opponent_id_isSet = false;
    m_global_opponent_id_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_home_or_away_isSet = false;
    m_home_or_away_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_is_game_over_isSet = false;
    m_is_game_over_isValid = false;

    m_lineup_confirmed_isSet = false;
    m_lineup_confirmed_isValid = false;

    m_lineup_status_isSet = false;
    m_lineup_status_isValid = false;

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offensive_rebounds_isSet = false;
    m_offensive_rebounds_isValid = false;

    m_offensive_rebounds_percentage_isSet = false;
    m_offensive_rebounds_percentage_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_personal_fouls_isSet = false;
    m_personal_fouls_isValid = false;

    m_player_efficiency_rating_isSet = false;
    m_player_efficiency_rating_isValid = false;

    m_plus_minus_isSet = false;
    m_plus_minus_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_possessions_isSet = false;
    m_possessions_isValid = false;

    m_rebounds_isSet = false;
    m_rebounds_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;

    m_stat_id_isSet = false;
    m_stat_id_isValid = false;

    m_steals_isSet = false;
    m_steals_isValid = false;

    m_steals_percentage_isSet = false;
    m_steals_percentage_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_three_pointers_attempted_isSet = false;
    m_three_pointers_attempted_isValid = false;

    m_three_pointers_made_isSet = false;
    m_three_pointers_made_isValid = false;

    m_three_pointers_percentage_isSet = false;
    m_three_pointers_percentage_isValid = false;

    m_total_rebounds_percentage_isSet = false;
    m_total_rebounds_percentage_isValid = false;

    m_triple_doubles_isSet = false;
    m_triple_doubles_isValid = false;

    m_true_shooting_attempts_isSet = false;
    m_true_shooting_attempts_isValid = false;

    m_true_shooting_percentage_isSet = false;
    m_true_shooting_percentage_isValid = false;

    m_turn_overs_percentage_isSet = false;
    m_turn_overs_percentage_isValid = false;

    m_turnovers_isSet = false;
    m_turnovers_isValid = false;

    m_two_pointers_attempted_isSet = false;
    m_two_pointers_attempted_isValid = false;

    m_two_pointers_made_isSet = false;
    m_two_pointers_made_isValid = false;

    m_two_pointers_percentage_isSet = false;
    m_two_pointers_percentage_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_usage_rate_percentage_isSet = false;
    m_usage_rate_percentage_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAITeamGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamGame::fromJsonObject(QJsonObject json) {

    m_assists_isValid = ::OpenAPI::fromJsonValue(m_assists, json[QString("Assists")]);
    m_assists_isSet = !json[QString("Assists")].isNull() && m_assists_isValid;

    m_assists_percentage_isValid = ::OpenAPI::fromJsonValue(m_assists_percentage, json[QString("AssistsPercentage")]);
    m_assists_percentage_isSet = !json[QString("AssistsPercentage")].isNull() && m_assists_percentage_isValid;

    m_blocked_shots_isValid = ::OpenAPI::fromJsonValue(m_blocked_shots, json[QString("BlockedShots")]);
    m_blocked_shots_isSet = !json[QString("BlockedShots")].isNull() && m_blocked_shots_isValid;

    m_blocks_percentage_isValid = ::OpenAPI::fromJsonValue(m_blocks_percentage, json[QString("BlocksPercentage")]);
    m_blocks_percentage_isSet = !json[QString("BlocksPercentage")].isNull() && m_blocks_percentage_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_defensive_rebounds_isValid = ::OpenAPI::fromJsonValue(m_defensive_rebounds, json[QString("DefensiveRebounds")]);
    m_defensive_rebounds_isSet = !json[QString("DefensiveRebounds")].isNull() && m_defensive_rebounds_isValid;

    m_defensive_rebounds_percentage_isValid = ::OpenAPI::fromJsonValue(m_defensive_rebounds_percentage, json[QString("DefensiveReboundsPercentage")]);
    m_defensive_rebounds_percentage_isSet = !json[QString("DefensiveReboundsPercentage")].isNull() && m_defensive_rebounds_percentage_isValid;

    m_double_doubles_isValid = ::OpenAPI::fromJsonValue(m_double_doubles, json[QString("DoubleDoubles")]);
    m_double_doubles_isSet = !json[QString("DoubleDoubles")].isNull() && m_double_doubles_isValid;

    m_effective_field_goals_percentage_isValid = ::OpenAPI::fromJsonValue(m_effective_field_goals_percentage, json[QString("EffectiveFieldGoalsPercentage")]);
    m_effective_field_goals_percentage_isSet = !json[QString("EffectiveFieldGoalsPercentage")].isNull() && m_effective_field_goals_percentage_isValid;

    m_fantasy_points_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points, json[QString("FantasyPoints")]);
    m_fantasy_points_isSet = !json[QString("FantasyPoints")].isNull() && m_fantasy_points_isValid;

    m_fantasy_points_draft_kings_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_draft_kings, json[QString("FantasyPointsDraftKings")]);
    m_fantasy_points_draft_kings_isSet = !json[QString("FantasyPointsDraftKings")].isNull() && m_fantasy_points_draft_kings_isValid;

    m_fantasy_points_fan_duel_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fan_duel, json[QString("FantasyPointsFanDuel")]);
    m_fantasy_points_fan_duel_isSet = !json[QString("FantasyPointsFanDuel")].isNull() && m_fantasy_points_fan_duel_isValid;

    m_fantasy_points_fantasy_draft_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_fantasy_draft, json[QString("FantasyPointsFantasyDraft")]);
    m_fantasy_points_fantasy_draft_isSet = !json[QString("FantasyPointsFantasyDraft")].isNull() && m_fantasy_points_fantasy_draft_isValid;

    m_fantasy_points_yahoo_isValid = ::OpenAPI::fromJsonValue(m_fantasy_points_yahoo, json[QString("FantasyPointsYahoo")]);
    m_fantasy_points_yahoo_isSet = !json[QString("FantasyPointsYahoo")].isNull() && m_fantasy_points_yahoo_isValid;

    m_field_goals_attempted_isValid = ::OpenAPI::fromJsonValue(m_field_goals_attempted, json[QString("FieldGoalsAttempted")]);
    m_field_goals_attempted_isSet = !json[QString("FieldGoalsAttempted")].isNull() && m_field_goals_attempted_isValid;

    m_field_goals_made_isValid = ::OpenAPI::fromJsonValue(m_field_goals_made, json[QString("FieldGoalsMade")]);
    m_field_goals_made_isSet = !json[QString("FieldGoalsMade")].isNull() && m_field_goals_made_isValid;

    m_field_goals_percentage_isValid = ::OpenAPI::fromJsonValue(m_field_goals_percentage, json[QString("FieldGoalsPercentage")]);
    m_field_goals_percentage_isSet = !json[QString("FieldGoalsPercentage")].isNull() && m_field_goals_percentage_isValid;

    m_free_throws_attempted_isValid = ::OpenAPI::fromJsonValue(m_free_throws_attempted, json[QString("FreeThrowsAttempted")]);
    m_free_throws_attempted_isSet = !json[QString("FreeThrowsAttempted")].isNull() && m_free_throws_attempted_isValid;

    m_free_throws_made_isValid = ::OpenAPI::fromJsonValue(m_free_throws_made, json[QString("FreeThrowsMade")]);
    m_free_throws_made_isSet = !json[QString("FreeThrowsMade")].isNull() && m_free_throws_made_isValid;

    m_free_throws_percentage_isValid = ::OpenAPI::fromJsonValue(m_free_throws_percentage, json[QString("FreeThrowsPercentage")]);
    m_free_throws_percentage_isSet = !json[QString("FreeThrowsPercentage")].isNull() && m_free_throws_percentage_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("GameID")]);
    m_game_id_isSet = !json[QString("GameID")].isNull() && m_game_id_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("Games")]);
    m_games_isSet = !json[QString("Games")].isNull() && m_games_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_global_opponent_id, json[QString("GlobalOpponentID")]);
    m_global_opponent_id_isSet = !json[QString("GlobalOpponentID")].isNull() && m_global_opponent_id_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_home_or_away_isValid = ::OpenAPI::fromJsonValue(m_home_or_away, json[QString("HomeOrAway")]);
    m_home_or_away_isSet = !json[QString("HomeOrAway")].isNull() && m_home_or_away_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("IsClosed")]);
    m_is_closed_isSet = !json[QString("IsClosed")].isNull() && m_is_closed_isValid;

    m_is_game_over_isValid = ::OpenAPI::fromJsonValue(m_is_game_over, json[QString("IsGameOver")]);
    m_is_game_over_isSet = !json[QString("IsGameOver")].isNull() && m_is_game_over_isValid;

    m_lineup_confirmed_isValid = ::OpenAPI::fromJsonValue(m_lineup_confirmed, json[QString("LineupConfirmed")]);
    m_lineup_confirmed_isSet = !json[QString("LineupConfirmed")].isNull() && m_lineup_confirmed_isValid;

    m_lineup_status_isValid = ::OpenAPI::fromJsonValue(m_lineup_status, json[QString("LineupStatus")]);
    m_lineup_status_isSet = !json[QString("LineupStatus")].isNull() && m_lineup_status_isValid;

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("Losses")]);
    m_losses_isSet = !json[QString("Losses")].isNull() && m_losses_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("Minutes")]);
    m_minutes_isSet = !json[QString("Minutes")].isNull() && m_minutes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_offensive_rebounds_isValid = ::OpenAPI::fromJsonValue(m_offensive_rebounds, json[QString("OffensiveRebounds")]);
    m_offensive_rebounds_isSet = !json[QString("OffensiveRebounds")].isNull() && m_offensive_rebounds_isValid;

    m_offensive_rebounds_percentage_isValid = ::OpenAPI::fromJsonValue(m_offensive_rebounds_percentage, json[QString("OffensiveReboundsPercentage")]);
    m_offensive_rebounds_percentage_isSet = !json[QString("OffensiveReboundsPercentage")].isNull() && m_offensive_rebounds_percentage_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentID")]);
    m_opponent_id_isSet = !json[QString("OpponentID")].isNull() && m_opponent_id_isValid;

    m_personal_fouls_isValid = ::OpenAPI::fromJsonValue(m_personal_fouls, json[QString("PersonalFouls")]);
    m_personal_fouls_isSet = !json[QString("PersonalFouls")].isNull() && m_personal_fouls_isValid;

    m_player_efficiency_rating_isValid = ::OpenAPI::fromJsonValue(m_player_efficiency_rating, json[QString("PlayerEfficiencyRating")]);
    m_player_efficiency_rating_isSet = !json[QString("PlayerEfficiencyRating")].isNull() && m_player_efficiency_rating_isValid;

    m_plus_minus_isValid = ::OpenAPI::fromJsonValue(m_plus_minus, json[QString("PlusMinus")]);
    m_plus_minus_isSet = !json[QString("PlusMinus")].isNull() && m_plus_minus_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("Points")]);
    m_points_isSet = !json[QString("Points")].isNull() && m_points_isValid;

    m_possessions_isValid = ::OpenAPI::fromJsonValue(m_possessions, json[QString("Possessions")]);
    m_possessions_isSet = !json[QString("Possessions")].isNull() && m_possessions_isValid;

    m_rebounds_isValid = ::OpenAPI::fromJsonValue(m_rebounds, json[QString("Rebounds")]);
    m_rebounds_isSet = !json[QString("Rebounds")].isNull() && m_rebounds_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("Seconds")]);
    m_seconds_isSet = !json[QString("Seconds")].isNull() && m_seconds_isValid;

    m_stat_id_isValid = ::OpenAPI::fromJsonValue(m_stat_id, json[QString("StatID")]);
    m_stat_id_isSet = !json[QString("StatID")].isNull() && m_stat_id_isValid;

    m_steals_isValid = ::OpenAPI::fromJsonValue(m_steals, json[QString("Steals")]);
    m_steals_isSet = !json[QString("Steals")].isNull() && m_steals_isValid;

    m_steals_percentage_isValid = ::OpenAPI::fromJsonValue(m_steals_percentage, json[QString("StealsPercentage")]);
    m_steals_percentage_isSet = !json[QString("StealsPercentage")].isNull() && m_steals_percentage_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_three_pointers_attempted_isValid = ::OpenAPI::fromJsonValue(m_three_pointers_attempted, json[QString("ThreePointersAttempted")]);
    m_three_pointers_attempted_isSet = !json[QString("ThreePointersAttempted")].isNull() && m_three_pointers_attempted_isValid;

    m_three_pointers_made_isValid = ::OpenAPI::fromJsonValue(m_three_pointers_made, json[QString("ThreePointersMade")]);
    m_three_pointers_made_isSet = !json[QString("ThreePointersMade")].isNull() && m_three_pointers_made_isValid;

    m_three_pointers_percentage_isValid = ::OpenAPI::fromJsonValue(m_three_pointers_percentage, json[QString("ThreePointersPercentage")]);
    m_three_pointers_percentage_isSet = !json[QString("ThreePointersPercentage")].isNull() && m_three_pointers_percentage_isValid;

    m_total_rebounds_percentage_isValid = ::OpenAPI::fromJsonValue(m_total_rebounds_percentage, json[QString("TotalReboundsPercentage")]);
    m_total_rebounds_percentage_isSet = !json[QString("TotalReboundsPercentage")].isNull() && m_total_rebounds_percentage_isValid;

    m_triple_doubles_isValid = ::OpenAPI::fromJsonValue(m_triple_doubles, json[QString("TripleDoubles")]);
    m_triple_doubles_isSet = !json[QString("TripleDoubles")].isNull() && m_triple_doubles_isValid;

    m_true_shooting_attempts_isValid = ::OpenAPI::fromJsonValue(m_true_shooting_attempts, json[QString("TrueShootingAttempts")]);
    m_true_shooting_attempts_isSet = !json[QString("TrueShootingAttempts")].isNull() && m_true_shooting_attempts_isValid;

    m_true_shooting_percentage_isValid = ::OpenAPI::fromJsonValue(m_true_shooting_percentage, json[QString("TrueShootingPercentage")]);
    m_true_shooting_percentage_isSet = !json[QString("TrueShootingPercentage")].isNull() && m_true_shooting_percentage_isValid;

    m_turn_overs_percentage_isValid = ::OpenAPI::fromJsonValue(m_turn_overs_percentage, json[QString("TurnOversPercentage")]);
    m_turn_overs_percentage_isSet = !json[QString("TurnOversPercentage")].isNull() && m_turn_overs_percentage_isValid;

    m_turnovers_isValid = ::OpenAPI::fromJsonValue(m_turnovers, json[QString("Turnovers")]);
    m_turnovers_isSet = !json[QString("Turnovers")].isNull() && m_turnovers_isValid;

    m_two_pointers_attempted_isValid = ::OpenAPI::fromJsonValue(m_two_pointers_attempted, json[QString("TwoPointersAttempted")]);
    m_two_pointers_attempted_isSet = !json[QString("TwoPointersAttempted")].isNull() && m_two_pointers_attempted_isValid;

    m_two_pointers_made_isValid = ::OpenAPI::fromJsonValue(m_two_pointers_made, json[QString("TwoPointersMade")]);
    m_two_pointers_made_isSet = !json[QString("TwoPointersMade")].isNull() && m_two_pointers_made_isValid;

    m_two_pointers_percentage_isValid = ::OpenAPI::fromJsonValue(m_two_pointers_percentage, json[QString("TwoPointersPercentage")]);
    m_two_pointers_percentage_isSet = !json[QString("TwoPointersPercentage")].isNull() && m_two_pointers_percentage_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_usage_rate_percentage_isValid = ::OpenAPI::fromJsonValue(m_usage_rate_percentage, json[QString("UsageRatePercentage")]);
    m_usage_rate_percentage_isSet = !json[QString("UsageRatePercentage")].isNull() && m_usage_rate_percentage_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("Wins")]);
    m_wins_isSet = !json[QString("Wins")].isNull() && m_wins_isValid;
}

QString OAITeamGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamGame::asJsonObject() const {
    QJsonObject obj;
    if (m_assists_isSet) {
        obj.insert(QString("Assists"), ::OpenAPI::toJsonValue(m_assists));
    }
    if (m_assists_percentage_isSet) {
        obj.insert(QString("AssistsPercentage"), ::OpenAPI::toJsonValue(m_assists_percentage));
    }
    if (m_blocked_shots_isSet) {
        obj.insert(QString("BlockedShots"), ::OpenAPI::toJsonValue(m_blocked_shots));
    }
    if (m_blocks_percentage_isSet) {
        obj.insert(QString("BlocksPercentage"), ::OpenAPI::toJsonValue(m_blocks_percentage));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_defensive_rebounds_isSet) {
        obj.insert(QString("DefensiveRebounds"), ::OpenAPI::toJsonValue(m_defensive_rebounds));
    }
    if (m_defensive_rebounds_percentage_isSet) {
        obj.insert(QString("DefensiveReboundsPercentage"), ::OpenAPI::toJsonValue(m_defensive_rebounds_percentage));
    }
    if (m_double_doubles_isSet) {
        obj.insert(QString("DoubleDoubles"), ::OpenAPI::toJsonValue(m_double_doubles));
    }
    if (m_effective_field_goals_percentage_isSet) {
        obj.insert(QString("EffectiveFieldGoalsPercentage"), ::OpenAPI::toJsonValue(m_effective_field_goals_percentage));
    }
    if (m_fantasy_points_isSet) {
        obj.insert(QString("FantasyPoints"), ::OpenAPI::toJsonValue(m_fantasy_points));
    }
    if (m_fantasy_points_draft_kings_isSet) {
        obj.insert(QString("FantasyPointsDraftKings"), ::OpenAPI::toJsonValue(m_fantasy_points_draft_kings));
    }
    if (m_fantasy_points_fan_duel_isSet) {
        obj.insert(QString("FantasyPointsFanDuel"), ::OpenAPI::toJsonValue(m_fantasy_points_fan_duel));
    }
    if (m_fantasy_points_fantasy_draft_isSet) {
        obj.insert(QString("FantasyPointsFantasyDraft"), ::OpenAPI::toJsonValue(m_fantasy_points_fantasy_draft));
    }
    if (m_fantasy_points_yahoo_isSet) {
        obj.insert(QString("FantasyPointsYahoo"), ::OpenAPI::toJsonValue(m_fantasy_points_yahoo));
    }
    if (m_field_goals_attempted_isSet) {
        obj.insert(QString("FieldGoalsAttempted"), ::OpenAPI::toJsonValue(m_field_goals_attempted));
    }
    if (m_field_goals_made_isSet) {
        obj.insert(QString("FieldGoalsMade"), ::OpenAPI::toJsonValue(m_field_goals_made));
    }
    if (m_field_goals_percentage_isSet) {
        obj.insert(QString("FieldGoalsPercentage"), ::OpenAPI::toJsonValue(m_field_goals_percentage));
    }
    if (m_free_throws_attempted_isSet) {
        obj.insert(QString("FreeThrowsAttempted"), ::OpenAPI::toJsonValue(m_free_throws_attempted));
    }
    if (m_free_throws_made_isSet) {
        obj.insert(QString("FreeThrowsMade"), ::OpenAPI::toJsonValue(m_free_throws_made));
    }
    if (m_free_throws_percentage_isSet) {
        obj.insert(QString("FreeThrowsPercentage"), ::OpenAPI::toJsonValue(m_free_throws_percentage));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("GameID"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_games_isSet) {
        obj.insert(QString("Games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_opponent_id_isSet) {
        obj.insert(QString("GlobalOpponentID"), ::OpenAPI::toJsonValue(m_global_opponent_id));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_home_or_away_isSet) {
        obj.insert(QString("HomeOrAway"), ::OpenAPI::toJsonValue(m_home_or_away));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("IsClosed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_is_game_over_isSet) {
        obj.insert(QString("IsGameOver"), ::OpenAPI::toJsonValue(m_is_game_over));
    }
    if (m_lineup_confirmed_isSet) {
        obj.insert(QString("LineupConfirmed"), ::OpenAPI::toJsonValue(m_lineup_confirmed));
    }
    if (m_lineup_status_isSet) {
        obj.insert(QString("LineupStatus"), ::OpenAPI::toJsonValue(m_lineup_status));
    }
    if (m_losses_isSet) {
        obj.insert(QString("Losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_minutes_isSet) {
        obj.insert(QString("Minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offensive_rebounds_isSet) {
        obj.insert(QString("OffensiveRebounds"), ::OpenAPI::toJsonValue(m_offensive_rebounds));
    }
    if (m_offensive_rebounds_percentage_isSet) {
        obj.insert(QString("OffensiveReboundsPercentage"), ::OpenAPI::toJsonValue(m_offensive_rebounds_percentage));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentID"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_personal_fouls_isSet) {
        obj.insert(QString("PersonalFouls"), ::OpenAPI::toJsonValue(m_personal_fouls));
    }
    if (m_player_efficiency_rating_isSet) {
        obj.insert(QString("PlayerEfficiencyRating"), ::OpenAPI::toJsonValue(m_player_efficiency_rating));
    }
    if (m_plus_minus_isSet) {
        obj.insert(QString("PlusMinus"), ::OpenAPI::toJsonValue(m_plus_minus));
    }
    if (m_points_isSet) {
        obj.insert(QString("Points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_possessions_isSet) {
        obj.insert(QString("Possessions"), ::OpenAPI::toJsonValue(m_possessions));
    }
    if (m_rebounds_isSet) {
        obj.insert(QString("Rebounds"), ::OpenAPI::toJsonValue(m_rebounds));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("Seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    if (m_stat_id_isSet) {
        obj.insert(QString("StatID"), ::OpenAPI::toJsonValue(m_stat_id));
    }
    if (m_steals_isSet) {
        obj.insert(QString("Steals"), ::OpenAPI::toJsonValue(m_steals));
    }
    if (m_steals_percentage_isSet) {
        obj.insert(QString("StealsPercentage"), ::OpenAPI::toJsonValue(m_steals_percentage));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_three_pointers_attempted_isSet) {
        obj.insert(QString("ThreePointersAttempted"), ::OpenAPI::toJsonValue(m_three_pointers_attempted));
    }
    if (m_three_pointers_made_isSet) {
        obj.insert(QString("ThreePointersMade"), ::OpenAPI::toJsonValue(m_three_pointers_made));
    }
    if (m_three_pointers_percentage_isSet) {
        obj.insert(QString("ThreePointersPercentage"), ::OpenAPI::toJsonValue(m_three_pointers_percentage));
    }
    if (m_total_rebounds_percentage_isSet) {
        obj.insert(QString("TotalReboundsPercentage"), ::OpenAPI::toJsonValue(m_total_rebounds_percentage));
    }
    if (m_triple_doubles_isSet) {
        obj.insert(QString("TripleDoubles"), ::OpenAPI::toJsonValue(m_triple_doubles));
    }
    if (m_true_shooting_attempts_isSet) {
        obj.insert(QString("TrueShootingAttempts"), ::OpenAPI::toJsonValue(m_true_shooting_attempts));
    }
    if (m_true_shooting_percentage_isSet) {
        obj.insert(QString("TrueShootingPercentage"), ::OpenAPI::toJsonValue(m_true_shooting_percentage));
    }
    if (m_turn_overs_percentage_isSet) {
        obj.insert(QString("TurnOversPercentage"), ::OpenAPI::toJsonValue(m_turn_overs_percentage));
    }
    if (m_turnovers_isSet) {
        obj.insert(QString("Turnovers"), ::OpenAPI::toJsonValue(m_turnovers));
    }
    if (m_two_pointers_attempted_isSet) {
        obj.insert(QString("TwoPointersAttempted"), ::OpenAPI::toJsonValue(m_two_pointers_attempted));
    }
    if (m_two_pointers_made_isSet) {
        obj.insert(QString("TwoPointersMade"), ::OpenAPI::toJsonValue(m_two_pointers_made));
    }
    if (m_two_pointers_percentage_isSet) {
        obj.insert(QString("TwoPointersPercentage"), ::OpenAPI::toJsonValue(m_two_pointers_percentage));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_usage_rate_percentage_isSet) {
        obj.insert(QString("UsageRatePercentage"), ::OpenAPI::toJsonValue(m_usage_rate_percentage));
    }
    if (m_wins_isSet) {
        obj.insert(QString("Wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

double OAITeamGame::getAssists() const {
    return m_assists;
}
void OAITeamGame::setAssists(const double &assists) {
    m_assists = assists;
    m_assists_isSet = true;
}

bool OAITeamGame::is_assists_Set() const{
    return m_assists_isSet;
}

bool OAITeamGame::is_assists_Valid() const{
    return m_assists_isValid;
}

double OAITeamGame::getAssistsPercentage() const {
    return m_assists_percentage;
}
void OAITeamGame::setAssistsPercentage(const double &assists_percentage) {
    m_assists_percentage = assists_percentage;
    m_assists_percentage_isSet = true;
}

bool OAITeamGame::is_assists_percentage_Set() const{
    return m_assists_percentage_isSet;
}

bool OAITeamGame::is_assists_percentage_Valid() const{
    return m_assists_percentage_isValid;
}

double OAITeamGame::getBlockedShots() const {
    return m_blocked_shots;
}
void OAITeamGame::setBlockedShots(const double &blocked_shots) {
    m_blocked_shots = blocked_shots;
    m_blocked_shots_isSet = true;
}

bool OAITeamGame::is_blocked_shots_Set() const{
    return m_blocked_shots_isSet;
}

bool OAITeamGame::is_blocked_shots_Valid() const{
    return m_blocked_shots_isValid;
}

double OAITeamGame::getBlocksPercentage() const {
    return m_blocks_percentage;
}
void OAITeamGame::setBlocksPercentage(const double &blocks_percentage) {
    m_blocks_percentage = blocks_percentage;
    m_blocks_percentage_isSet = true;
}

bool OAITeamGame::is_blocks_percentage_Set() const{
    return m_blocks_percentage_isSet;
}

bool OAITeamGame::is_blocks_percentage_Valid() const{
    return m_blocks_percentage_isValid;
}

QString OAITeamGame::getDateTime() const {
    return m_date_time;
}
void OAITeamGame::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAITeamGame::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAITeamGame::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAITeamGame::getDay() const {
    return m_day;
}
void OAITeamGame::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAITeamGame::is_day_Set() const{
    return m_day_isSet;
}

bool OAITeamGame::is_day_Valid() const{
    return m_day_isValid;
}

double OAITeamGame::getDefensiveRebounds() const {
    return m_defensive_rebounds;
}
void OAITeamGame::setDefensiveRebounds(const double &defensive_rebounds) {
    m_defensive_rebounds = defensive_rebounds;
    m_defensive_rebounds_isSet = true;
}

bool OAITeamGame::is_defensive_rebounds_Set() const{
    return m_defensive_rebounds_isSet;
}

bool OAITeamGame::is_defensive_rebounds_Valid() const{
    return m_defensive_rebounds_isValid;
}

double OAITeamGame::getDefensiveReboundsPercentage() const {
    return m_defensive_rebounds_percentage;
}
void OAITeamGame::setDefensiveReboundsPercentage(const double &defensive_rebounds_percentage) {
    m_defensive_rebounds_percentage = defensive_rebounds_percentage;
    m_defensive_rebounds_percentage_isSet = true;
}

bool OAITeamGame::is_defensive_rebounds_percentage_Set() const{
    return m_defensive_rebounds_percentage_isSet;
}

bool OAITeamGame::is_defensive_rebounds_percentage_Valid() const{
    return m_defensive_rebounds_percentage_isValid;
}

double OAITeamGame::getDoubleDoubles() const {
    return m_double_doubles;
}
void OAITeamGame::setDoubleDoubles(const double &double_doubles) {
    m_double_doubles = double_doubles;
    m_double_doubles_isSet = true;
}

bool OAITeamGame::is_double_doubles_Set() const{
    return m_double_doubles_isSet;
}

bool OAITeamGame::is_double_doubles_Valid() const{
    return m_double_doubles_isValid;
}

double OAITeamGame::getEffectiveFieldGoalsPercentage() const {
    return m_effective_field_goals_percentage;
}
void OAITeamGame::setEffectiveFieldGoalsPercentage(const double &effective_field_goals_percentage) {
    m_effective_field_goals_percentage = effective_field_goals_percentage;
    m_effective_field_goals_percentage_isSet = true;
}

bool OAITeamGame::is_effective_field_goals_percentage_Set() const{
    return m_effective_field_goals_percentage_isSet;
}

bool OAITeamGame::is_effective_field_goals_percentage_Valid() const{
    return m_effective_field_goals_percentage_isValid;
}

double OAITeamGame::getFantasyPoints() const {
    return m_fantasy_points;
}
void OAITeamGame::setFantasyPoints(const double &fantasy_points) {
    m_fantasy_points = fantasy_points;
    m_fantasy_points_isSet = true;
}

bool OAITeamGame::is_fantasy_points_Set() const{
    return m_fantasy_points_isSet;
}

bool OAITeamGame::is_fantasy_points_Valid() const{
    return m_fantasy_points_isValid;
}

double OAITeamGame::getFantasyPointsDraftKings() const {
    return m_fantasy_points_draft_kings;
}
void OAITeamGame::setFantasyPointsDraftKings(const double &fantasy_points_draft_kings) {
    m_fantasy_points_draft_kings = fantasy_points_draft_kings;
    m_fantasy_points_draft_kings_isSet = true;
}

bool OAITeamGame::is_fantasy_points_draft_kings_Set() const{
    return m_fantasy_points_draft_kings_isSet;
}

bool OAITeamGame::is_fantasy_points_draft_kings_Valid() const{
    return m_fantasy_points_draft_kings_isValid;
}

double OAITeamGame::getFantasyPointsFanDuel() const {
    return m_fantasy_points_fan_duel;
}
void OAITeamGame::setFantasyPointsFanDuel(const double &fantasy_points_fan_duel) {
    m_fantasy_points_fan_duel = fantasy_points_fan_duel;
    m_fantasy_points_fan_duel_isSet = true;
}

bool OAITeamGame::is_fantasy_points_fan_duel_Set() const{
    return m_fantasy_points_fan_duel_isSet;
}

bool OAITeamGame::is_fantasy_points_fan_duel_Valid() const{
    return m_fantasy_points_fan_duel_isValid;
}

double OAITeamGame::getFantasyPointsFantasyDraft() const {
    return m_fantasy_points_fantasy_draft;
}
void OAITeamGame::setFantasyPointsFantasyDraft(const double &fantasy_points_fantasy_draft) {
    m_fantasy_points_fantasy_draft = fantasy_points_fantasy_draft;
    m_fantasy_points_fantasy_draft_isSet = true;
}

bool OAITeamGame::is_fantasy_points_fantasy_draft_Set() const{
    return m_fantasy_points_fantasy_draft_isSet;
}

bool OAITeamGame::is_fantasy_points_fantasy_draft_Valid() const{
    return m_fantasy_points_fantasy_draft_isValid;
}

double OAITeamGame::getFantasyPointsYahoo() const {
    return m_fantasy_points_yahoo;
}
void OAITeamGame::setFantasyPointsYahoo(const double &fantasy_points_yahoo) {
    m_fantasy_points_yahoo = fantasy_points_yahoo;
    m_fantasy_points_yahoo_isSet = true;
}

bool OAITeamGame::is_fantasy_points_yahoo_Set() const{
    return m_fantasy_points_yahoo_isSet;
}

bool OAITeamGame::is_fantasy_points_yahoo_Valid() const{
    return m_fantasy_points_yahoo_isValid;
}

double OAITeamGame::getFieldGoalsAttempted() const {
    return m_field_goals_attempted;
}
void OAITeamGame::setFieldGoalsAttempted(const double &field_goals_attempted) {
    m_field_goals_attempted = field_goals_attempted;
    m_field_goals_attempted_isSet = true;
}

bool OAITeamGame::is_field_goals_attempted_Set() const{
    return m_field_goals_attempted_isSet;
}

bool OAITeamGame::is_field_goals_attempted_Valid() const{
    return m_field_goals_attempted_isValid;
}

double OAITeamGame::getFieldGoalsMade() const {
    return m_field_goals_made;
}
void OAITeamGame::setFieldGoalsMade(const double &field_goals_made) {
    m_field_goals_made = field_goals_made;
    m_field_goals_made_isSet = true;
}

bool OAITeamGame::is_field_goals_made_Set() const{
    return m_field_goals_made_isSet;
}

bool OAITeamGame::is_field_goals_made_Valid() const{
    return m_field_goals_made_isValid;
}

double OAITeamGame::getFieldGoalsPercentage() const {
    return m_field_goals_percentage;
}
void OAITeamGame::setFieldGoalsPercentage(const double &field_goals_percentage) {
    m_field_goals_percentage = field_goals_percentage;
    m_field_goals_percentage_isSet = true;
}

bool OAITeamGame::is_field_goals_percentage_Set() const{
    return m_field_goals_percentage_isSet;
}

bool OAITeamGame::is_field_goals_percentage_Valid() const{
    return m_field_goals_percentage_isValid;
}

double OAITeamGame::getFreeThrowsAttempted() const {
    return m_free_throws_attempted;
}
void OAITeamGame::setFreeThrowsAttempted(const double &free_throws_attempted) {
    m_free_throws_attempted = free_throws_attempted;
    m_free_throws_attempted_isSet = true;
}

bool OAITeamGame::is_free_throws_attempted_Set() const{
    return m_free_throws_attempted_isSet;
}

bool OAITeamGame::is_free_throws_attempted_Valid() const{
    return m_free_throws_attempted_isValid;
}

double OAITeamGame::getFreeThrowsMade() const {
    return m_free_throws_made;
}
void OAITeamGame::setFreeThrowsMade(const double &free_throws_made) {
    m_free_throws_made = free_throws_made;
    m_free_throws_made_isSet = true;
}

bool OAITeamGame::is_free_throws_made_Set() const{
    return m_free_throws_made_isSet;
}

bool OAITeamGame::is_free_throws_made_Valid() const{
    return m_free_throws_made_isValid;
}

double OAITeamGame::getFreeThrowsPercentage() const {
    return m_free_throws_percentage;
}
void OAITeamGame::setFreeThrowsPercentage(const double &free_throws_percentage) {
    m_free_throws_percentage = free_throws_percentage;
    m_free_throws_percentage_isSet = true;
}

bool OAITeamGame::is_free_throws_percentage_Set() const{
    return m_free_throws_percentage_isSet;
}

bool OAITeamGame::is_free_throws_percentage_Valid() const{
    return m_free_throws_percentage_isValid;
}

qint32 OAITeamGame::getGameId() const {
    return m_game_id;
}
void OAITeamGame::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAITeamGame::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAITeamGame::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAITeamGame::getGames() const {
    return m_games;
}
void OAITeamGame::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITeamGame::is_games_Set() const{
    return m_games_isSet;
}

bool OAITeamGame::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAITeamGame::getGlobalGameId() const {
    return m_global_game_id;
}
void OAITeamGame::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAITeamGame::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAITeamGame::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAITeamGame::getGlobalOpponentId() const {
    return m_global_opponent_id;
}
void OAITeamGame::setGlobalOpponentId(const qint32 &global_opponent_id) {
    m_global_opponent_id = global_opponent_id;
    m_global_opponent_id_isSet = true;
}

bool OAITeamGame::is_global_opponent_id_Set() const{
    return m_global_opponent_id_isSet;
}

bool OAITeamGame::is_global_opponent_id_Valid() const{
    return m_global_opponent_id_isValid;
}

qint32 OAITeamGame::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAITeamGame::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAITeamGame::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAITeamGame::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

QString OAITeamGame::getHomeOrAway() const {
    return m_home_or_away;
}
void OAITeamGame::setHomeOrAway(const QString &home_or_away) {
    m_home_or_away = home_or_away;
    m_home_or_away_isSet = true;
}

bool OAITeamGame::is_home_or_away_Set() const{
    return m_home_or_away_isSet;
}

bool OAITeamGame::is_home_or_away_Valid() const{
    return m_home_or_away_isValid;
}

bool OAITeamGame::isIsClosed() const {
    return m_is_closed;
}
void OAITeamGame::setIsClosed(const bool &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAITeamGame::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAITeamGame::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

bool OAITeamGame::isIsGameOver() const {
    return m_is_game_over;
}
void OAITeamGame::setIsGameOver(const bool &is_game_over) {
    m_is_game_over = is_game_over;
    m_is_game_over_isSet = true;
}

bool OAITeamGame::is_is_game_over_Set() const{
    return m_is_game_over_isSet;
}

bool OAITeamGame::is_is_game_over_Valid() const{
    return m_is_game_over_isValid;
}

bool OAITeamGame::isLineupConfirmed() const {
    return m_lineup_confirmed;
}
void OAITeamGame::setLineupConfirmed(const bool &lineup_confirmed) {
    m_lineup_confirmed = lineup_confirmed;
    m_lineup_confirmed_isSet = true;
}

bool OAITeamGame::is_lineup_confirmed_Set() const{
    return m_lineup_confirmed_isSet;
}

bool OAITeamGame::is_lineup_confirmed_Valid() const{
    return m_lineup_confirmed_isValid;
}

QString OAITeamGame::getLineupStatus() const {
    return m_lineup_status;
}
void OAITeamGame::setLineupStatus(const QString &lineup_status) {
    m_lineup_status = lineup_status;
    m_lineup_status_isSet = true;
}

bool OAITeamGame::is_lineup_status_Set() const{
    return m_lineup_status_isSet;
}

bool OAITeamGame::is_lineup_status_Valid() const{
    return m_lineup_status_isValid;
}

qint32 OAITeamGame::getLosses() const {
    return m_losses;
}
void OAITeamGame::setLosses(const qint32 &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAITeamGame::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAITeamGame::is_losses_Valid() const{
    return m_losses_isValid;
}

qint32 OAITeamGame::getMinutes() const {
    return m_minutes;
}
void OAITeamGame::setMinutes(const qint32 &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAITeamGame::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAITeamGame::is_minutes_Valid() const{
    return m_minutes_isValid;
}

QString OAITeamGame::getName() const {
    return m_name;
}
void OAITeamGame::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamGame::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamGame::is_name_Valid() const{
    return m_name_isValid;
}

double OAITeamGame::getOffensiveRebounds() const {
    return m_offensive_rebounds;
}
void OAITeamGame::setOffensiveRebounds(const double &offensive_rebounds) {
    m_offensive_rebounds = offensive_rebounds;
    m_offensive_rebounds_isSet = true;
}

bool OAITeamGame::is_offensive_rebounds_Set() const{
    return m_offensive_rebounds_isSet;
}

bool OAITeamGame::is_offensive_rebounds_Valid() const{
    return m_offensive_rebounds_isValid;
}

double OAITeamGame::getOffensiveReboundsPercentage() const {
    return m_offensive_rebounds_percentage;
}
void OAITeamGame::setOffensiveReboundsPercentage(const double &offensive_rebounds_percentage) {
    m_offensive_rebounds_percentage = offensive_rebounds_percentage;
    m_offensive_rebounds_percentage_isSet = true;
}

bool OAITeamGame::is_offensive_rebounds_percentage_Set() const{
    return m_offensive_rebounds_percentage_isSet;
}

bool OAITeamGame::is_offensive_rebounds_percentage_Valid() const{
    return m_offensive_rebounds_percentage_isValid;
}

QString OAITeamGame::getOpponent() const {
    return m_opponent;
}
void OAITeamGame::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAITeamGame::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAITeamGame::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAITeamGame::getOpponentId() const {
    return m_opponent_id;
}
void OAITeamGame::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAITeamGame::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAITeamGame::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

double OAITeamGame::getPersonalFouls() const {
    return m_personal_fouls;
}
void OAITeamGame::setPersonalFouls(const double &personal_fouls) {
    m_personal_fouls = personal_fouls;
    m_personal_fouls_isSet = true;
}

bool OAITeamGame::is_personal_fouls_Set() const{
    return m_personal_fouls_isSet;
}

bool OAITeamGame::is_personal_fouls_Valid() const{
    return m_personal_fouls_isValid;
}

double OAITeamGame::getPlayerEfficiencyRating() const {
    return m_player_efficiency_rating;
}
void OAITeamGame::setPlayerEfficiencyRating(const double &player_efficiency_rating) {
    m_player_efficiency_rating = player_efficiency_rating;
    m_player_efficiency_rating_isSet = true;
}

bool OAITeamGame::is_player_efficiency_rating_Set() const{
    return m_player_efficiency_rating_isSet;
}

bool OAITeamGame::is_player_efficiency_rating_Valid() const{
    return m_player_efficiency_rating_isValid;
}

double OAITeamGame::getPlusMinus() const {
    return m_plus_minus;
}
void OAITeamGame::setPlusMinus(const double &plus_minus) {
    m_plus_minus = plus_minus;
    m_plus_minus_isSet = true;
}

bool OAITeamGame::is_plus_minus_Set() const{
    return m_plus_minus_isSet;
}

bool OAITeamGame::is_plus_minus_Valid() const{
    return m_plus_minus_isValid;
}

double OAITeamGame::getPoints() const {
    return m_points;
}
void OAITeamGame::setPoints(const double &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAITeamGame::is_points_Set() const{
    return m_points_isSet;
}

bool OAITeamGame::is_points_Valid() const{
    return m_points_isValid;
}

double OAITeamGame::getPossessions() const {
    return m_possessions;
}
void OAITeamGame::setPossessions(const double &possessions) {
    m_possessions = possessions;
    m_possessions_isSet = true;
}

bool OAITeamGame::is_possessions_Set() const{
    return m_possessions_isSet;
}

bool OAITeamGame::is_possessions_Valid() const{
    return m_possessions_isValid;
}

double OAITeamGame::getRebounds() const {
    return m_rebounds;
}
void OAITeamGame::setRebounds(const double &rebounds) {
    m_rebounds = rebounds;
    m_rebounds_isSet = true;
}

bool OAITeamGame::is_rebounds_Set() const{
    return m_rebounds_isSet;
}

bool OAITeamGame::is_rebounds_Valid() const{
    return m_rebounds_isValid;
}

qint32 OAITeamGame::getSeason() const {
    return m_season;
}
void OAITeamGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAITeamGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAITeamGame::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAITeamGame::getSeasonType() const {
    return m_season_type;
}
void OAITeamGame::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAITeamGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAITeamGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

qint32 OAITeamGame::getSeconds() const {
    return m_seconds;
}
void OAITeamGame::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAITeamGame::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAITeamGame::is_seconds_Valid() const{
    return m_seconds_isValid;
}

qint32 OAITeamGame::getStatId() const {
    return m_stat_id;
}
void OAITeamGame::setStatId(const qint32 &stat_id) {
    m_stat_id = stat_id;
    m_stat_id_isSet = true;
}

bool OAITeamGame::is_stat_id_Set() const{
    return m_stat_id_isSet;
}

bool OAITeamGame::is_stat_id_Valid() const{
    return m_stat_id_isValid;
}

double OAITeamGame::getSteals() const {
    return m_steals;
}
void OAITeamGame::setSteals(const double &steals) {
    m_steals = steals;
    m_steals_isSet = true;
}

bool OAITeamGame::is_steals_Set() const{
    return m_steals_isSet;
}

bool OAITeamGame::is_steals_Valid() const{
    return m_steals_isValid;
}

double OAITeamGame::getStealsPercentage() const {
    return m_steals_percentage;
}
void OAITeamGame::setStealsPercentage(const double &steals_percentage) {
    m_steals_percentage = steals_percentage;
    m_steals_percentage_isSet = true;
}

bool OAITeamGame::is_steals_percentage_Set() const{
    return m_steals_percentage_isSet;
}

bool OAITeamGame::is_steals_percentage_Valid() const{
    return m_steals_percentage_isValid;
}

QString OAITeamGame::getTeam() const {
    return m_team;
}
void OAITeamGame::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamGame::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamGame::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAITeamGame::getTeamId() const {
    return m_team_id;
}
void OAITeamGame::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAITeamGame::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAITeamGame::is_team_id_Valid() const{
    return m_team_id_isValid;
}

double OAITeamGame::getThreePointersAttempted() const {
    return m_three_pointers_attempted;
}
void OAITeamGame::setThreePointersAttempted(const double &three_pointers_attempted) {
    m_three_pointers_attempted = three_pointers_attempted;
    m_three_pointers_attempted_isSet = true;
}

bool OAITeamGame::is_three_pointers_attempted_Set() const{
    return m_three_pointers_attempted_isSet;
}

bool OAITeamGame::is_three_pointers_attempted_Valid() const{
    return m_three_pointers_attempted_isValid;
}

double OAITeamGame::getThreePointersMade() const {
    return m_three_pointers_made;
}
void OAITeamGame::setThreePointersMade(const double &three_pointers_made) {
    m_three_pointers_made = three_pointers_made;
    m_three_pointers_made_isSet = true;
}

bool OAITeamGame::is_three_pointers_made_Set() const{
    return m_three_pointers_made_isSet;
}

bool OAITeamGame::is_three_pointers_made_Valid() const{
    return m_three_pointers_made_isValid;
}

double OAITeamGame::getThreePointersPercentage() const {
    return m_three_pointers_percentage;
}
void OAITeamGame::setThreePointersPercentage(const double &three_pointers_percentage) {
    m_three_pointers_percentage = three_pointers_percentage;
    m_three_pointers_percentage_isSet = true;
}

bool OAITeamGame::is_three_pointers_percentage_Set() const{
    return m_three_pointers_percentage_isSet;
}

bool OAITeamGame::is_three_pointers_percentage_Valid() const{
    return m_three_pointers_percentage_isValid;
}

double OAITeamGame::getTotalReboundsPercentage() const {
    return m_total_rebounds_percentage;
}
void OAITeamGame::setTotalReboundsPercentage(const double &total_rebounds_percentage) {
    m_total_rebounds_percentage = total_rebounds_percentage;
    m_total_rebounds_percentage_isSet = true;
}

bool OAITeamGame::is_total_rebounds_percentage_Set() const{
    return m_total_rebounds_percentage_isSet;
}

bool OAITeamGame::is_total_rebounds_percentage_Valid() const{
    return m_total_rebounds_percentage_isValid;
}

double OAITeamGame::getTripleDoubles() const {
    return m_triple_doubles;
}
void OAITeamGame::setTripleDoubles(const double &triple_doubles) {
    m_triple_doubles = triple_doubles;
    m_triple_doubles_isSet = true;
}

bool OAITeamGame::is_triple_doubles_Set() const{
    return m_triple_doubles_isSet;
}

bool OAITeamGame::is_triple_doubles_Valid() const{
    return m_triple_doubles_isValid;
}

double OAITeamGame::getTrueShootingAttempts() const {
    return m_true_shooting_attempts;
}
void OAITeamGame::setTrueShootingAttempts(const double &true_shooting_attempts) {
    m_true_shooting_attempts = true_shooting_attempts;
    m_true_shooting_attempts_isSet = true;
}

bool OAITeamGame::is_true_shooting_attempts_Set() const{
    return m_true_shooting_attempts_isSet;
}

bool OAITeamGame::is_true_shooting_attempts_Valid() const{
    return m_true_shooting_attempts_isValid;
}

double OAITeamGame::getTrueShootingPercentage() const {
    return m_true_shooting_percentage;
}
void OAITeamGame::setTrueShootingPercentage(const double &true_shooting_percentage) {
    m_true_shooting_percentage = true_shooting_percentage;
    m_true_shooting_percentage_isSet = true;
}

bool OAITeamGame::is_true_shooting_percentage_Set() const{
    return m_true_shooting_percentage_isSet;
}

bool OAITeamGame::is_true_shooting_percentage_Valid() const{
    return m_true_shooting_percentage_isValid;
}

double OAITeamGame::getTurnOversPercentage() const {
    return m_turn_overs_percentage;
}
void OAITeamGame::setTurnOversPercentage(const double &turn_overs_percentage) {
    m_turn_overs_percentage = turn_overs_percentage;
    m_turn_overs_percentage_isSet = true;
}

bool OAITeamGame::is_turn_overs_percentage_Set() const{
    return m_turn_overs_percentage_isSet;
}

bool OAITeamGame::is_turn_overs_percentage_Valid() const{
    return m_turn_overs_percentage_isValid;
}

double OAITeamGame::getTurnovers() const {
    return m_turnovers;
}
void OAITeamGame::setTurnovers(const double &turnovers) {
    m_turnovers = turnovers;
    m_turnovers_isSet = true;
}

bool OAITeamGame::is_turnovers_Set() const{
    return m_turnovers_isSet;
}

bool OAITeamGame::is_turnovers_Valid() const{
    return m_turnovers_isValid;
}

double OAITeamGame::getTwoPointersAttempted() const {
    return m_two_pointers_attempted;
}
void OAITeamGame::setTwoPointersAttempted(const double &two_pointers_attempted) {
    m_two_pointers_attempted = two_pointers_attempted;
    m_two_pointers_attempted_isSet = true;
}

bool OAITeamGame::is_two_pointers_attempted_Set() const{
    return m_two_pointers_attempted_isSet;
}

bool OAITeamGame::is_two_pointers_attempted_Valid() const{
    return m_two_pointers_attempted_isValid;
}

double OAITeamGame::getTwoPointersMade() const {
    return m_two_pointers_made;
}
void OAITeamGame::setTwoPointersMade(const double &two_pointers_made) {
    m_two_pointers_made = two_pointers_made;
    m_two_pointers_made_isSet = true;
}

bool OAITeamGame::is_two_pointers_made_Set() const{
    return m_two_pointers_made_isSet;
}

bool OAITeamGame::is_two_pointers_made_Valid() const{
    return m_two_pointers_made_isValid;
}

double OAITeamGame::getTwoPointersPercentage() const {
    return m_two_pointers_percentage;
}
void OAITeamGame::setTwoPointersPercentage(const double &two_pointers_percentage) {
    m_two_pointers_percentage = two_pointers_percentage;
    m_two_pointers_percentage_isSet = true;
}

bool OAITeamGame::is_two_pointers_percentage_Set() const{
    return m_two_pointers_percentage_isSet;
}

bool OAITeamGame::is_two_pointers_percentage_Valid() const{
    return m_two_pointers_percentage_isValid;
}

QString OAITeamGame::getUpdated() const {
    return m_updated;
}
void OAITeamGame::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITeamGame::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITeamGame::is_updated_Valid() const{
    return m_updated_isValid;
}

double OAITeamGame::getUsageRatePercentage() const {
    return m_usage_rate_percentage;
}
void OAITeamGame::setUsageRatePercentage(const double &usage_rate_percentage) {
    m_usage_rate_percentage = usage_rate_percentage;
    m_usage_rate_percentage_isSet = true;
}

bool OAITeamGame::is_usage_rate_percentage_Set() const{
    return m_usage_rate_percentage_isSet;
}

bool OAITeamGame::is_usage_rate_percentage_Valid() const{
    return m_usage_rate_percentage_isValid;
}

qint32 OAITeamGame::getWins() const {
    return m_wins;
}
void OAITeamGame::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAITeamGame::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAITeamGame::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAITeamGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assists_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_rebounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defensive_rebounds_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_doubles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_field_goals_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_draft_kings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fan_duel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_fantasy_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_points_yahoo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_goals_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_throws_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_throws_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_throws_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_or_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_game_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineup_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lineup_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_rebounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offensive_rebounds_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_fouls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_efficiency_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plus_minus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possessions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steals_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_pointers_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_pointers_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_pointers_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rebounds_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triple_doubles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_shooting_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_shooting_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turn_overs_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turnovers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_pointers_attempted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_pointers_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_pointers_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_rate_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
