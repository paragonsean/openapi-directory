/**
 * NBA v3 Scores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerBasic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerBasic::OAIPlayerBasic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerBasic::OAIPlayerBasic() {
    this->initializeModel();
}

OAIPlayerBasic::~OAIPlayerBasic() {}

void OAIPlayerBasic::initializeModel() {

    m_birth_city_isSet = false;
    m_birth_city_isValid = false;

    m_birth_country_isSet = false;
    m_birth_country_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_birth_state_isSet = false;
    m_birth_state_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_jersey_isSet = false;
    m_jersey_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_sports_data_id_isSet = false;
    m_sports_data_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIPlayerBasic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerBasic::fromJsonObject(QJsonObject json) {

    m_birth_city_isValid = ::OpenAPI::fromJsonValue(m_birth_city, json[QString("BirthCity")]);
    m_birth_city_isSet = !json[QString("BirthCity")].isNull() && m_birth_city_isValid;

    m_birth_country_isValid = ::OpenAPI::fromJsonValue(m_birth_country, json[QString("BirthCountry")]);
    m_birth_country_isSet = !json[QString("BirthCountry")].isNull() && m_birth_country_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("BirthDate")]);
    m_birth_date_isSet = !json[QString("BirthDate")].isNull() && m_birth_date_isValid;

    m_birth_state_isValid = ::OpenAPI::fromJsonValue(m_birth_state, json[QString("BirthState")]);
    m_birth_state_isSet = !json[QString("BirthState")].isNull() && m_birth_state_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_jersey_isValid = ::OpenAPI::fromJsonValue(m_jersey, json[QString("Jersey")]);
    m_jersey_isSet = !json[QString("Jersey")].isNull() && m_jersey_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_sports_data_id_isValid = ::OpenAPI::fromJsonValue(m_sports_data_id, json[QString("SportsDataID")]);
    m_sports_data_id_isSet = !json[QString("SportsDataID")].isNull() && m_sports_data_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAIPlayerBasic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerBasic::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_city_isSet) {
        obj.insert(QString("BirthCity"), ::OpenAPI::toJsonValue(m_birth_city));
    }
    if (m_birth_country_isSet) {
        obj.insert(QString("BirthCountry"), ::OpenAPI::toJsonValue(m_birth_country));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("BirthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_birth_state_isSet) {
        obj.insert(QString("BirthState"), ::OpenAPI::toJsonValue(m_birth_state));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_jersey_isSet) {
        obj.insert(QString("Jersey"), ::OpenAPI::toJsonValue(m_jersey));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_sports_data_id_isSet) {
        obj.insert(QString("SportsDataID"), ::OpenAPI::toJsonValue(m_sports_data_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIPlayerBasic::getBirthCity() const {
    return m_birth_city;
}
void OAIPlayerBasic::setBirthCity(const QString &birth_city) {
    m_birth_city = birth_city;
    m_birth_city_isSet = true;
}

bool OAIPlayerBasic::is_birth_city_Set() const{
    return m_birth_city_isSet;
}

bool OAIPlayerBasic::is_birth_city_Valid() const{
    return m_birth_city_isValid;
}

QString OAIPlayerBasic::getBirthCountry() const {
    return m_birth_country;
}
void OAIPlayerBasic::setBirthCountry(const QString &birth_country) {
    m_birth_country = birth_country;
    m_birth_country_isSet = true;
}

bool OAIPlayerBasic::is_birth_country_Set() const{
    return m_birth_country_isSet;
}

bool OAIPlayerBasic::is_birth_country_Valid() const{
    return m_birth_country_isValid;
}

QString OAIPlayerBasic::getBirthDate() const {
    return m_birth_date;
}
void OAIPlayerBasic::setBirthDate(const QString &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIPlayerBasic::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIPlayerBasic::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIPlayerBasic::getBirthState() const {
    return m_birth_state;
}
void OAIPlayerBasic::setBirthState(const QString &birth_state) {
    m_birth_state = birth_state;
    m_birth_state_isSet = true;
}

bool OAIPlayerBasic::is_birth_state_Set() const{
    return m_birth_state_isSet;
}

bool OAIPlayerBasic::is_birth_state_Valid() const{
    return m_birth_state_isValid;
}

QString OAIPlayerBasic::getFirstName() const {
    return m_first_name;
}
void OAIPlayerBasic::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPlayerBasic::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPlayerBasic::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIPlayerBasic::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIPlayerBasic::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIPlayerBasic::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIPlayerBasic::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

qint32 OAIPlayerBasic::getHeight() const {
    return m_height;
}
void OAIPlayerBasic::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlayerBasic::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlayerBasic::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIPlayerBasic::getJersey() const {
    return m_jersey;
}
void OAIPlayerBasic::setJersey(const qint32 &jersey) {
    m_jersey = jersey;
    m_jersey_isSet = true;
}

bool OAIPlayerBasic::is_jersey_Set() const{
    return m_jersey_isSet;
}

bool OAIPlayerBasic::is_jersey_Valid() const{
    return m_jersey_isValid;
}

QString OAIPlayerBasic::getLastName() const {
    return m_last_name;
}
void OAIPlayerBasic::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPlayerBasic::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPlayerBasic::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIPlayerBasic::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerBasic::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerBasic::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerBasic::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayerBasic::getPosition() const {
    return m_position;
}
void OAIPlayerBasic::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerBasic::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerBasic::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayerBasic::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayerBasic::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayerBasic::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayerBasic::is_position_category_Valid() const{
    return m_position_category_isValid;
}

QString OAIPlayerBasic::getSportsDataId() const {
    return m_sports_data_id;
}
void OAIPlayerBasic::setSportsDataId(const QString &sports_data_id) {
    m_sports_data_id = sports_data_id;
    m_sports_data_id_isSet = true;
}

bool OAIPlayerBasic::is_sports_data_id_Set() const{
    return m_sports_data_id_isSet;
}

bool OAIPlayerBasic::is_sports_data_id_Valid() const{
    return m_sports_data_id_isValid;
}

QString OAIPlayerBasic::getStatus() const {
    return m_status;
}
void OAIPlayerBasic::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlayerBasic::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlayerBasic::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPlayerBasic::getTeam() const {
    return m_team;
}
void OAIPlayerBasic::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerBasic::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerBasic::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayerBasic::getTeamId() const {
    return m_team_id;
}
void OAIPlayerBasic::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayerBasic::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayerBasic::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIPlayerBasic::getWeight() const {
    return m_weight;
}
void OAIPlayerBasic::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPlayerBasic::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPlayerBasic::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIPlayerBasic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jersey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sports_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerBasic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
