/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfsSlateWithOwnershipProjection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfsSlateWithOwnershipProjection::OAIDfsSlateWithOwnershipProjection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfsSlateWithOwnershipProjection::OAIDfsSlateWithOwnershipProjection() {
    this->initializeModel();
}

OAIDfsSlateWithOwnershipProjection::~OAIDfsSlateWithOwnershipProjection() {}

void OAIDfsSlateWithOwnershipProjection::initializeModel() {

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_operator_day_isSet = false;
    m_operator_day_isValid = false;

    m_operator_name_isSet = false;
    m_operator_name_isValid = false;

    m_operator_slate_id_isSet = false;
    m_operator_slate_id_isValid = false;

    m_operator_start_time_isSet = false;
    m_operator_start_time_isValid = false;

    m_slate_id_isSet = false;
    m_slate_id_isValid = false;

    m_slate_ownership_projections_isSet = false;
    m_slate_ownership_projections_isValid = false;
}

void OAIDfsSlateWithOwnershipProjection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfsSlateWithOwnershipProjection::fromJsonObject(QJsonObject json) {

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;

    m_operator_day_isValid = ::OpenAPI::fromJsonValue(m_operator_day, json[QString("OperatorDay")]);
    m_operator_day_isSet = !json[QString("OperatorDay")].isNull() && m_operator_day_isValid;

    m_operator_name_isValid = ::OpenAPI::fromJsonValue(m_operator_name, json[QString("OperatorName")]);
    m_operator_name_isSet = !json[QString("OperatorName")].isNull() && m_operator_name_isValid;

    m_operator_slate_id_isValid = ::OpenAPI::fromJsonValue(m_operator_slate_id, json[QString("OperatorSlateID")]);
    m_operator_slate_id_isSet = !json[QString("OperatorSlateID")].isNull() && m_operator_slate_id_isValid;

    m_operator_start_time_isValid = ::OpenAPI::fromJsonValue(m_operator_start_time, json[QString("OperatorStartTime")]);
    m_operator_start_time_isSet = !json[QString("OperatorStartTime")].isNull() && m_operator_start_time_isValid;

    m_slate_id_isValid = ::OpenAPI::fromJsonValue(m_slate_id, json[QString("SlateID")]);
    m_slate_id_isSet = !json[QString("SlateID")].isNull() && m_slate_id_isValid;

    m_slate_ownership_projections_isValid = ::OpenAPI::fromJsonValue(m_slate_ownership_projections, json[QString("SlateOwnershipProjections")]);
    m_slate_ownership_projections_isSet = !json[QString("SlateOwnershipProjections")].isNull() && m_slate_ownership_projections_isValid;
}

QString OAIDfsSlateWithOwnershipProjection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfsSlateWithOwnershipProjection::asJsonObject() const {
    QJsonObject obj;
    if (m_r_operator_isSet) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_operator_day_isSet) {
        obj.insert(QString("OperatorDay"), ::OpenAPI::toJsonValue(m_operator_day));
    }
    if (m_operator_name_isSet) {
        obj.insert(QString("OperatorName"), ::OpenAPI::toJsonValue(m_operator_name));
    }
    if (m_operator_slate_id_isSet) {
        obj.insert(QString("OperatorSlateID"), ::OpenAPI::toJsonValue(m_operator_slate_id));
    }
    if (m_operator_start_time_isSet) {
        obj.insert(QString("OperatorStartTime"), ::OpenAPI::toJsonValue(m_operator_start_time));
    }
    if (m_slate_id_isSet) {
        obj.insert(QString("SlateID"), ::OpenAPI::toJsonValue(m_slate_id));
    }
    if (m_slate_ownership_projections.size() > 0) {
        obj.insert(QString("SlateOwnershipProjections"), ::OpenAPI::toJsonValue(m_slate_ownership_projections));
    }
    return obj;
}

QString OAIDfsSlateWithOwnershipProjection::getROperator() const {
    return m_r_operator;
}
void OAIDfsSlateWithOwnershipProjection::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIDfsSlateWithOwnershipProjection::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIDfsSlateWithOwnershipProjection::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIDfsSlateWithOwnershipProjection::getOperatorDay() const {
    return m_operator_day;
}
void OAIDfsSlateWithOwnershipProjection::setOperatorDay(const QString &operator_day) {
    m_operator_day = operator_day;
    m_operator_day_isSet = true;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_day_Set() const{
    return m_operator_day_isSet;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_day_Valid() const{
    return m_operator_day_isValid;
}

QString OAIDfsSlateWithOwnershipProjection::getOperatorName() const {
    return m_operator_name;
}
void OAIDfsSlateWithOwnershipProjection::setOperatorName(const QString &operator_name) {
    m_operator_name = operator_name;
    m_operator_name_isSet = true;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_name_Set() const{
    return m_operator_name_isSet;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_name_Valid() const{
    return m_operator_name_isValid;
}

qint32 OAIDfsSlateWithOwnershipProjection::getOperatorSlateId() const {
    return m_operator_slate_id;
}
void OAIDfsSlateWithOwnershipProjection::setOperatorSlateId(const qint32 &operator_slate_id) {
    m_operator_slate_id = operator_slate_id;
    m_operator_slate_id_isSet = true;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_slate_id_Set() const{
    return m_operator_slate_id_isSet;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_slate_id_Valid() const{
    return m_operator_slate_id_isValid;
}

QString OAIDfsSlateWithOwnershipProjection::getOperatorStartTime() const {
    return m_operator_start_time;
}
void OAIDfsSlateWithOwnershipProjection::setOperatorStartTime(const QString &operator_start_time) {
    m_operator_start_time = operator_start_time;
    m_operator_start_time_isSet = true;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_start_time_Set() const{
    return m_operator_start_time_isSet;
}

bool OAIDfsSlateWithOwnershipProjection::is_operator_start_time_Valid() const{
    return m_operator_start_time_isValid;
}

qint32 OAIDfsSlateWithOwnershipProjection::getSlateId() const {
    return m_slate_id;
}
void OAIDfsSlateWithOwnershipProjection::setSlateId(const qint32 &slate_id) {
    m_slate_id = slate_id;
    m_slate_id_isSet = true;
}

bool OAIDfsSlateWithOwnershipProjection::is_slate_id_Set() const{
    return m_slate_id_isSet;
}

bool OAIDfsSlateWithOwnershipProjection::is_slate_id_Valid() const{
    return m_slate_id_isValid;
}

QList<OAIDfsSlatePlayerOwnershipProjection> OAIDfsSlateWithOwnershipProjection::getSlateOwnershipProjections() const {
    return m_slate_ownership_projections;
}
void OAIDfsSlateWithOwnershipProjection::setSlateOwnershipProjections(const QList<OAIDfsSlatePlayerOwnershipProjection> &slate_ownership_projections) {
    m_slate_ownership_projections = slate_ownership_projections;
    m_slate_ownership_projections_isSet = true;
}

bool OAIDfsSlateWithOwnershipProjection::is_slate_ownership_projections_Set() const{
    return m_slate_ownership_projections_isSet;
}

bool OAIDfsSlateWithOwnershipProjection::is_slate_ownership_projections_Valid() const{
    return m_slate_ownership_projections_isValid;
}

bool OAIDfsSlateWithOwnershipProjection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_slate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_ownership_projections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfsSlateWithOwnershipProjection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
