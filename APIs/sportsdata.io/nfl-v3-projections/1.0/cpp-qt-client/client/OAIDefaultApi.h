/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDfsSlate.h"
#include "OAIDfsSlateWithOwnershipProjection.h"
#include "OAIFantasyDefenseGameProjection.h"
#include "OAIFantasyDefenseSeasonProjection.h"
#include "OAIPlayer.h"
#include "OAIPlayerGameProjection.h"
#include "OAIPlayerSeasonProjection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    * @param[in]  slate_id QString [required]
    */
    virtual void dfsSlateOwnershipProjectionsBySlateid(const QString &format, const QString &slate_id);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void dfsSlatesByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void dfsSlatesByWeek(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(const QString &format, const QString &season, const QString &week, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  team QString [required]
    */
    virtual void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(const QString &format, const QString &season, const QString &week, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    */
    virtual void injuredPlayers(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void projectedFantasyDefenseGameStatsWDfsSalaries(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void projectedFantasyDefenseSeasonStatsWAdp(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(const QString &format, const QString &season, const QString &week, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    * @param[in]  team QString [required]
    */
    virtual void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(const QString &format, const QString &season, const QString &week, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  week QString [required]
    */
    virtual void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(const QString &format, const QString &season, const QString &week);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void projectedPlayerSeasonStatsByPlayerWAdp(const QString &format, const QString &season, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  team QString [required]
    */
    virtual void projectedPlayerSeasonStatsByTeamWAdp(const QString &format, const QString &season, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void projectedPlayerSeasonStatsWAdp(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void upcomingDfsSlateOwnershipProjections(const QString &format);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dfsSlateOwnershipProjectionsBySlateidCallback(OAIHttpRequestWorker *worker);
    void dfsSlatesByDateCallback(OAIHttpRequestWorker *worker);
    void dfsSlatesByWeekCallback(OAIHttpRequestWorker *worker);
    void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesCallback(OAIHttpRequestWorker *worker);
    void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesCallback(OAIHttpRequestWorker *worker);
    void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesCallback(OAIHttpRequestWorker *worker);
    void injuredPlayersCallback(OAIHttpRequestWorker *worker);
    void projectedFantasyDefenseGameStatsWDfsSalariesCallback(OAIHttpRequestWorker *worker);
    void projectedFantasyDefenseSeasonStatsWAdpCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerSeasonStatsByPlayerWAdpCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerSeasonStatsByTeamWAdpCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerSeasonStatsWAdpCallback(OAIHttpRequestWorker *worker);
    void upcomingDfsSlateOwnershipProjectionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dfsSlateOwnershipProjectionsBySlateidSignal(OAIDfsSlateWithOwnershipProjection summary);
    void dfsSlatesByDateSignal(QList<OAIDfsSlate> summary);
    void dfsSlatesByWeekSignal(QList<OAIDfsSlate> summary);
    void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignal(OAIPlayerGameProjection summary);
    void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignal(QList<OAIPlayerGameProjection> summary);
    void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignal(QList<OAIPlayerGameProjection> summary);
    void injuredPlayersSignal(QList<OAIPlayer> summary);
    void projectedFantasyDefenseGameStatsWDfsSalariesSignal(QList<OAIFantasyDefenseGameProjection> summary);
    void projectedFantasyDefenseSeasonStatsWAdpSignal(QList<OAIFantasyDefenseSeasonProjection> summary);
    void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignal(OAIPlayerGameProjection summary);
    void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignal(QList<OAIPlayerGameProjection> summary);
    void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignal(QList<OAIPlayerGameProjection> summary);
    void projectedPlayerSeasonStatsByPlayerWAdpSignal(OAIPlayerSeasonProjection summary);
    void projectedPlayerSeasonStatsByTeamWAdpSignal(QList<OAIPlayerSeasonProjection> summary);
    void projectedPlayerSeasonStatsWAdpSignal(QList<OAIPlayerSeasonProjection> summary);
    void upcomingDfsSlateOwnershipProjectionsSignal(QList<OAIDfsSlateWithOwnershipProjection> summary);


    void dfsSlateOwnershipProjectionsBySlateidSignalFull(OAIHttpRequestWorker *worker, OAIDfsSlateWithOwnershipProjection summary);
    void dfsSlatesByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIDfsSlate> summary);
    void dfsSlatesByWeekSignalFull(OAIHttpRequestWorker *worker, QList<OAIDfsSlate> summary);
    void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalFull(OAIHttpRequestWorker *worker, OAIPlayerGameProjection summary);
    void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameProjection> summary);
    void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameProjection> summary);
    void injuredPlayersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void projectedFantasyDefenseGameStatsWDfsSalariesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFantasyDefenseGameProjection> summary);
    void projectedFantasyDefenseSeasonStatsWAdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIFantasyDefenseSeasonProjection> summary);
    void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalFull(OAIHttpRequestWorker *worker, OAIPlayerGameProjection summary);
    void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameProjection> summary);
    void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameProjection> summary);
    void projectedPlayerSeasonStatsByPlayerWAdpSignalFull(OAIHttpRequestWorker *worker, OAIPlayerSeasonProjection summary);
    void projectedPlayerSeasonStatsByTeamWAdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeasonProjection> summary);
    void projectedPlayerSeasonStatsWAdpSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeasonProjection> summary);
    void upcomingDfsSlateOwnershipProjectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDfsSlateWithOwnershipProjection> summary);

    Q_DECL_DEPRECATED_X("Use dfsSlateOwnershipProjectionsBySlateidSignalError() instead")
    void dfsSlateOwnershipProjectionsBySlateidSignalE(OAIDfsSlateWithOwnershipProjection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlateOwnershipProjectionsBySlateidSignalError(OAIDfsSlateWithOwnershipProjection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByDateSignalError() instead")
    void dfsSlatesByDateSignalE(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByDateSignalError(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByWeekSignalError() instead")
    void dfsSlatesByWeekSignalE(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByWeekSignalError(QList<OAIDfsSlate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalError() instead")
    void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalE(OAIPlayerGameProjection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalError(OAIPlayerGameProjection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalError() instead")
    void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalE(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalError(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalError() instead")
    void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalE(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalError(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuredPlayersSignalError() instead")
    void injuredPlayersSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void injuredPlayersSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedFantasyDefenseGameStatsWDfsSalariesSignalError() instead")
    void projectedFantasyDefenseGameStatsWDfsSalariesSignalE(QList<OAIFantasyDefenseGameProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedFantasyDefenseGameStatsWDfsSalariesSignalError(QList<OAIFantasyDefenseGameProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedFantasyDefenseSeasonStatsWAdpSignalError() instead")
    void projectedFantasyDefenseSeasonStatsWAdpSignalE(QList<OAIFantasyDefenseSeasonProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedFantasyDefenseSeasonStatsWAdpSignalError(QList<OAIFantasyDefenseSeasonProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalError() instead")
    void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalE(OAIPlayerGameProjection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalError(OAIPlayerGameProjection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalError() instead")
    void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalE(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalError(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalError() instead")
    void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalE(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalError(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerSeasonStatsByPlayerWAdpSignalError() instead")
    void projectedPlayerSeasonStatsByPlayerWAdpSignalE(OAIPlayerSeasonProjection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerSeasonStatsByPlayerWAdpSignalError(OAIPlayerSeasonProjection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerSeasonStatsByTeamWAdpSignalError() instead")
    void projectedPlayerSeasonStatsByTeamWAdpSignalE(QList<OAIPlayerSeasonProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerSeasonStatsByTeamWAdpSignalError(QList<OAIPlayerSeasonProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerSeasonStatsWAdpSignalError() instead")
    void projectedPlayerSeasonStatsWAdpSignalE(QList<OAIPlayerSeasonProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerSeasonStatsWAdpSignalError(QList<OAIPlayerSeasonProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upcomingDfsSlateOwnershipProjectionsSignalError() instead")
    void upcomingDfsSlateOwnershipProjectionsSignalE(QList<OAIDfsSlateWithOwnershipProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upcomingDfsSlateOwnershipProjectionsSignalError(QList<OAIDfsSlateWithOwnershipProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dfsSlateOwnershipProjectionsBySlateidSignalErrorFull() instead")
    void dfsSlateOwnershipProjectionsBySlateidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlateOwnershipProjectionsBySlateidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByDateSignalErrorFull() instead")
    void dfsSlatesByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dfsSlatesByWeekSignalErrorFull() instead")
    void dfsSlatesByWeekSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dfsSlatesByWeekSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalErrorFull() instead")
    void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalErrorFull() instead")
    void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalErrorFull() instead")
    void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuredPlayersSignalErrorFull() instead")
    void injuredPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void injuredPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedFantasyDefenseGameStatsWDfsSalariesSignalErrorFull() instead")
    void projectedFantasyDefenseGameStatsWDfsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedFantasyDefenseGameStatsWDfsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedFantasyDefenseSeasonStatsWAdpSignalErrorFull() instead")
    void projectedFantasyDefenseSeasonStatsWAdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedFantasyDefenseSeasonStatsWAdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalErrorFull() instead")
    void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalErrorFull() instead")
    void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalErrorFull() instead")
    void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerSeasonStatsByPlayerWAdpSignalErrorFull() instead")
    void projectedPlayerSeasonStatsByPlayerWAdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerSeasonStatsByPlayerWAdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerSeasonStatsByTeamWAdpSignalErrorFull() instead")
    void projectedPlayerSeasonStatsByTeamWAdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerSeasonStatsByTeamWAdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerSeasonStatsWAdpSignalErrorFull() instead")
    void projectedPlayerSeasonStatsWAdpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerSeasonStatsWAdpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upcomingDfsSlateOwnershipProjectionsSignalErrorFull() instead")
    void upcomingDfsSlateOwnershipProjectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upcomingDfsSlateOwnershipProjectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
