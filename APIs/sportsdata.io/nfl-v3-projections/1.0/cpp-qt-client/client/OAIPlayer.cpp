/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_average_draft_position_isSet = false;
    m_average_draft_position_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_birth_date_string_isSet = false;
    m_birth_date_string_isValid = false;

    m_bye_week_isSet = false;
    m_bye_week_isValid = false;

    m_college_isSet = false;
    m_college_isValid = false;

    m_college_draft_pick_isSet = false;
    m_college_draft_pick_isValid = false;

    m_college_draft_round_isSet = false;
    m_college_draft_round_isValid = false;

    m_college_draft_team_isSet = false;
    m_college_draft_team_isValid = false;

    m_college_draft_year_isSet = false;
    m_college_draft_year_isValid = false;

    m_current_status_isSet = false;
    m_current_status_isValid = false;

    m_current_team_isSet = false;
    m_current_team_isValid = false;

    m_declared_inactive_isSet = false;
    m_declared_inactive_isValid = false;

    m_depth_display_order_isSet = false;
    m_depth_display_order_isValid = false;

    m_depth_order_isSet = false;
    m_depth_order_isValid = false;

    m_depth_position_isSet = false;
    m_depth_position_isValid = false;

    m_depth_position_category_isSet = false;
    m_depth_position_category_isValid = false;

    m_draft_kings_name_isSet = false;
    m_draft_kings_name_isValid = false;

    m_draft_kings_player_id_isSet = false;
    m_draft_kings_player_id_isValid = false;

    m_experience_isSet = false;
    m_experience_isValid = false;

    m_experience_string_isSet = false;
    m_experience_string_isValid = false;

    m_fan_duel_name_isSet = false;
    m_fan_duel_name_isValid = false;

    m_fan_duel_player_id_isSet = false;
    m_fan_duel_player_id_isValid = false;

    m_fantasy_alarm_player_id_isSet = false;
    m_fantasy_alarm_player_id_isValid = false;

    m_fantasy_draft_name_isSet = false;
    m_fantasy_draft_name_isValid = false;

    m_fantasy_draft_player_id_isSet = false;
    m_fantasy_draft_player_id_isValid = false;

    m_fantasy_position_isSet = false;
    m_fantasy_position_isValid = false;

    m_fantasy_position_depth_order_isSet = false;
    m_fantasy_position_depth_order_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_global_team_id_isSet = false;
    m_global_team_id_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_height_feet_isSet = false;
    m_height_feet_isValid = false;

    m_height_inches_isSet = false;
    m_height_inches_isValid = false;

    m_injury_body_part_isSet = false;
    m_injury_body_part_isValid = false;

    m_injury_notes_isSet = false;
    m_injury_notes_isValid = false;

    m_injury_practice_isSet = false;
    m_injury_practice_isValid = false;

    m_injury_practice_description_isSet = false;
    m_injury_practice_description_isValid = false;

    m_injury_start_date_isSet = false;
    m_injury_start_date_isValid = false;

    m_injury_status_isSet = false;
    m_injury_status_isValid = false;

    m_is_undrafted_free_agent_isSet = false;
    m_is_undrafted_free_agent_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_category_isSet = false;
    m_position_category_isValid = false;

    m_roto_wire_player_id_isSet = false;
    m_roto_wire_player_id_isValid = false;

    m_rotoworld_player_id_isSet = false;
    m_rotoworld_player_id_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_sport_radar_player_id_isSet = false;
    m_sport_radar_player_id_isValid = false;

    m_sports_direct_player_id_isSet = false;
    m_sports_direct_player_id_isValid = false;

    m_stats_player_id_isSet = false;
    m_stats_player_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_upcoming_draft_kings_salary_isSet = false;
    m_upcoming_draft_kings_salary_isValid = false;

    m_upcoming_fan_duel_salary_isSet = false;
    m_upcoming_fan_duel_salary_isValid = false;

    m_upcoming_game_opponent_isSet = false;
    m_upcoming_game_opponent_isValid = false;

    m_upcoming_game_week_isSet = false;
    m_upcoming_game_week_isValid = false;

    m_upcoming_opponent_position_rank_isSet = false;
    m_upcoming_opponent_position_rank_isValid = false;

    m_upcoming_opponent_rank_isSet = false;
    m_upcoming_opponent_rank_isValid = false;

    m_upcoming_salary_isSet = false;
    m_upcoming_salary_isValid = false;

    m_upcoming_yahoo_salary_isSet = false;
    m_upcoming_yahoo_salary_isValid = false;

    m_usa_today_headshot_no_background_updated_isSet = false;
    m_usa_today_headshot_no_background_updated_isValid = false;

    m_usa_today_headshot_no_background_url_isSet = false;
    m_usa_today_headshot_no_background_url_isValid = false;

    m_usa_today_headshot_updated_isSet = false;
    m_usa_today_headshot_updated_isValid = false;

    m_usa_today_headshot_url_isSet = false;
    m_usa_today_headshot_url_isValid = false;

    m_usa_today_player_id_isSet = false;
    m_usa_today_player_id_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_xml_team_player_id_isSet = false;
    m_xml_team_player_id_isValid = false;

    m_yahoo_name_isSet = false;
    m_yahoo_name_isValid = false;

    m_yahoo_player_id_isSet = false;
    m_yahoo_player_id_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("Age")]);
    m_age_isSet = !json[QString("Age")].isNull() && m_age_isValid;

    m_average_draft_position_isValid = ::OpenAPI::fromJsonValue(m_average_draft_position, json[QString("AverageDraftPosition")]);
    m_average_draft_position_isSet = !json[QString("AverageDraftPosition")].isNull() && m_average_draft_position_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("BirthDate")]);
    m_birth_date_isSet = !json[QString("BirthDate")].isNull() && m_birth_date_isValid;

    m_birth_date_string_isValid = ::OpenAPI::fromJsonValue(m_birth_date_string, json[QString("BirthDateString")]);
    m_birth_date_string_isSet = !json[QString("BirthDateString")].isNull() && m_birth_date_string_isValid;

    m_bye_week_isValid = ::OpenAPI::fromJsonValue(m_bye_week, json[QString("ByeWeek")]);
    m_bye_week_isSet = !json[QString("ByeWeek")].isNull() && m_bye_week_isValid;

    m_college_isValid = ::OpenAPI::fromJsonValue(m_college, json[QString("College")]);
    m_college_isSet = !json[QString("College")].isNull() && m_college_isValid;

    m_college_draft_pick_isValid = ::OpenAPI::fromJsonValue(m_college_draft_pick, json[QString("CollegeDraftPick")]);
    m_college_draft_pick_isSet = !json[QString("CollegeDraftPick")].isNull() && m_college_draft_pick_isValid;

    m_college_draft_round_isValid = ::OpenAPI::fromJsonValue(m_college_draft_round, json[QString("CollegeDraftRound")]);
    m_college_draft_round_isSet = !json[QString("CollegeDraftRound")].isNull() && m_college_draft_round_isValid;

    m_college_draft_team_isValid = ::OpenAPI::fromJsonValue(m_college_draft_team, json[QString("CollegeDraftTeam")]);
    m_college_draft_team_isSet = !json[QString("CollegeDraftTeam")].isNull() && m_college_draft_team_isValid;

    m_college_draft_year_isValid = ::OpenAPI::fromJsonValue(m_college_draft_year, json[QString("CollegeDraftYear")]);
    m_college_draft_year_isSet = !json[QString("CollegeDraftYear")].isNull() && m_college_draft_year_isValid;

    m_current_status_isValid = ::OpenAPI::fromJsonValue(m_current_status, json[QString("CurrentStatus")]);
    m_current_status_isSet = !json[QString("CurrentStatus")].isNull() && m_current_status_isValid;

    m_current_team_isValid = ::OpenAPI::fromJsonValue(m_current_team, json[QString("CurrentTeam")]);
    m_current_team_isSet = !json[QString("CurrentTeam")].isNull() && m_current_team_isValid;

    m_declared_inactive_isValid = ::OpenAPI::fromJsonValue(m_declared_inactive, json[QString("DeclaredInactive")]);
    m_declared_inactive_isSet = !json[QString("DeclaredInactive")].isNull() && m_declared_inactive_isValid;

    m_depth_display_order_isValid = ::OpenAPI::fromJsonValue(m_depth_display_order, json[QString("DepthDisplayOrder")]);
    m_depth_display_order_isSet = !json[QString("DepthDisplayOrder")].isNull() && m_depth_display_order_isValid;

    m_depth_order_isValid = ::OpenAPI::fromJsonValue(m_depth_order, json[QString("DepthOrder")]);
    m_depth_order_isSet = !json[QString("DepthOrder")].isNull() && m_depth_order_isValid;

    m_depth_position_isValid = ::OpenAPI::fromJsonValue(m_depth_position, json[QString("DepthPosition")]);
    m_depth_position_isSet = !json[QString("DepthPosition")].isNull() && m_depth_position_isValid;

    m_depth_position_category_isValid = ::OpenAPI::fromJsonValue(m_depth_position_category, json[QString("DepthPositionCategory")]);
    m_depth_position_category_isSet = !json[QString("DepthPositionCategory")].isNull() && m_depth_position_category_isValid;

    m_draft_kings_name_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_name, json[QString("DraftKingsName")]);
    m_draft_kings_name_isSet = !json[QString("DraftKingsName")].isNull() && m_draft_kings_name_isValid;

    m_draft_kings_player_id_isValid = ::OpenAPI::fromJsonValue(m_draft_kings_player_id, json[QString("DraftKingsPlayerID")]);
    m_draft_kings_player_id_isSet = !json[QString("DraftKingsPlayerID")].isNull() && m_draft_kings_player_id_isValid;

    m_experience_isValid = ::OpenAPI::fromJsonValue(m_experience, json[QString("Experience")]);
    m_experience_isSet = !json[QString("Experience")].isNull() && m_experience_isValid;

    m_experience_string_isValid = ::OpenAPI::fromJsonValue(m_experience_string, json[QString("ExperienceString")]);
    m_experience_string_isSet = !json[QString("ExperienceString")].isNull() && m_experience_string_isValid;

    m_fan_duel_name_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_name, json[QString("FanDuelName")]);
    m_fan_duel_name_isSet = !json[QString("FanDuelName")].isNull() && m_fan_duel_name_isValid;

    m_fan_duel_player_id_isValid = ::OpenAPI::fromJsonValue(m_fan_duel_player_id, json[QString("FanDuelPlayerID")]);
    m_fan_duel_player_id_isSet = !json[QString("FanDuelPlayerID")].isNull() && m_fan_duel_player_id_isValid;

    m_fantasy_alarm_player_id_isValid = ::OpenAPI::fromJsonValue(m_fantasy_alarm_player_id, json[QString("FantasyAlarmPlayerID")]);
    m_fantasy_alarm_player_id_isSet = !json[QString("FantasyAlarmPlayerID")].isNull() && m_fantasy_alarm_player_id_isValid;

    m_fantasy_draft_name_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_name, json[QString("FantasyDraftName")]);
    m_fantasy_draft_name_isSet = !json[QString("FantasyDraftName")].isNull() && m_fantasy_draft_name_isValid;

    m_fantasy_draft_player_id_isValid = ::OpenAPI::fromJsonValue(m_fantasy_draft_player_id, json[QString("FantasyDraftPlayerID")]);
    m_fantasy_draft_player_id_isSet = !json[QString("FantasyDraftPlayerID")].isNull() && m_fantasy_draft_player_id_isValid;

    m_fantasy_position_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position, json[QString("FantasyPosition")]);
    m_fantasy_position_isSet = !json[QString("FantasyPosition")].isNull() && m_fantasy_position_isValid;

    m_fantasy_position_depth_order_isValid = ::OpenAPI::fromJsonValue(m_fantasy_position_depth_order, json[QString("FantasyPositionDepthOrder")]);
    m_fantasy_position_depth_order_isSet = !json[QString("FantasyPositionDepthOrder")].isNull() && m_fantasy_position_depth_order_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_global_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_team_id, json[QString("GlobalTeamID")]);
    m_global_team_id_isSet = !json[QString("GlobalTeamID")].isNull() && m_global_team_id_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_height_feet_isValid = ::OpenAPI::fromJsonValue(m_height_feet, json[QString("HeightFeet")]);
    m_height_feet_isSet = !json[QString("HeightFeet")].isNull() && m_height_feet_isValid;

    m_height_inches_isValid = ::OpenAPI::fromJsonValue(m_height_inches, json[QString("HeightInches")]);
    m_height_inches_isSet = !json[QString("HeightInches")].isNull() && m_height_inches_isValid;

    m_injury_body_part_isValid = ::OpenAPI::fromJsonValue(m_injury_body_part, json[QString("InjuryBodyPart")]);
    m_injury_body_part_isSet = !json[QString("InjuryBodyPart")].isNull() && m_injury_body_part_isValid;

    m_injury_notes_isValid = ::OpenAPI::fromJsonValue(m_injury_notes, json[QString("InjuryNotes")]);
    m_injury_notes_isSet = !json[QString("InjuryNotes")].isNull() && m_injury_notes_isValid;

    m_injury_practice_isValid = ::OpenAPI::fromJsonValue(m_injury_practice, json[QString("InjuryPractice")]);
    m_injury_practice_isSet = !json[QString("InjuryPractice")].isNull() && m_injury_practice_isValid;

    m_injury_practice_description_isValid = ::OpenAPI::fromJsonValue(m_injury_practice_description, json[QString("InjuryPracticeDescription")]);
    m_injury_practice_description_isSet = !json[QString("InjuryPracticeDescription")].isNull() && m_injury_practice_description_isValid;

    m_injury_start_date_isValid = ::OpenAPI::fromJsonValue(m_injury_start_date, json[QString("InjuryStartDate")]);
    m_injury_start_date_isSet = !json[QString("InjuryStartDate")].isNull() && m_injury_start_date_isValid;

    m_injury_status_isValid = ::OpenAPI::fromJsonValue(m_injury_status, json[QString("InjuryStatus")]);
    m_injury_status_isSet = !json[QString("InjuryStatus")].isNull() && m_injury_status_isValid;

    m_is_undrafted_free_agent_isValid = ::OpenAPI::fromJsonValue(m_is_undrafted_free_agent, json[QString("IsUndraftedFreeAgent")]);
    m_is_undrafted_free_agent_isSet = !json[QString("IsUndraftedFreeAgent")].isNull() && m_is_undrafted_free_agent_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("PhotoUrl")]);
    m_photo_url_isSet = !json[QString("PhotoUrl")].isNull() && m_photo_url_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_category_isValid = ::OpenAPI::fromJsonValue(m_position_category, json[QString("PositionCategory")]);
    m_position_category_isSet = !json[QString("PositionCategory")].isNull() && m_position_category_isValid;

    m_roto_wire_player_id_isValid = ::OpenAPI::fromJsonValue(m_roto_wire_player_id, json[QString("RotoWirePlayerID")]);
    m_roto_wire_player_id_isSet = !json[QString("RotoWirePlayerID")].isNull() && m_roto_wire_player_id_isValid;

    m_rotoworld_player_id_isValid = ::OpenAPI::fromJsonValue(m_rotoworld_player_id, json[QString("RotoworldPlayerID")]);
    m_rotoworld_player_id_isSet = !json[QString("RotoworldPlayerID")].isNull() && m_rotoworld_player_id_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("ShortName")]);
    m_short_name_isSet = !json[QString("ShortName")].isNull() && m_short_name_isValid;

    m_sport_radar_player_id_isValid = ::OpenAPI::fromJsonValue(m_sport_radar_player_id, json[QString("SportRadarPlayerID")]);
    m_sport_radar_player_id_isSet = !json[QString("SportRadarPlayerID")].isNull() && m_sport_radar_player_id_isValid;

    m_sports_direct_player_id_isValid = ::OpenAPI::fromJsonValue(m_sports_direct_player_id, json[QString("SportsDirectPlayerID")]);
    m_sports_direct_player_id_isSet = !json[QString("SportsDirectPlayerID")].isNull() && m_sports_direct_player_id_isValid;

    m_stats_player_id_isValid = ::OpenAPI::fromJsonValue(m_stats_player_id, json[QString("StatsPlayerID")]);
    m_stats_player_id_isSet = !json[QString("StatsPlayerID")].isNull() && m_stats_player_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_upcoming_draft_kings_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_draft_kings_salary, json[QString("UpcomingDraftKingsSalary")]);
    m_upcoming_draft_kings_salary_isSet = !json[QString("UpcomingDraftKingsSalary")].isNull() && m_upcoming_draft_kings_salary_isValid;

    m_upcoming_fan_duel_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_fan_duel_salary, json[QString("UpcomingFanDuelSalary")]);
    m_upcoming_fan_duel_salary_isSet = !json[QString("UpcomingFanDuelSalary")].isNull() && m_upcoming_fan_duel_salary_isValid;

    m_upcoming_game_opponent_isValid = ::OpenAPI::fromJsonValue(m_upcoming_game_opponent, json[QString("UpcomingGameOpponent")]);
    m_upcoming_game_opponent_isSet = !json[QString("UpcomingGameOpponent")].isNull() && m_upcoming_game_opponent_isValid;

    m_upcoming_game_week_isValid = ::OpenAPI::fromJsonValue(m_upcoming_game_week, json[QString("UpcomingGameWeek")]);
    m_upcoming_game_week_isSet = !json[QString("UpcomingGameWeek")].isNull() && m_upcoming_game_week_isValid;

    m_upcoming_opponent_position_rank_isValid = ::OpenAPI::fromJsonValue(m_upcoming_opponent_position_rank, json[QString("UpcomingOpponentPositionRank")]);
    m_upcoming_opponent_position_rank_isSet = !json[QString("UpcomingOpponentPositionRank")].isNull() && m_upcoming_opponent_position_rank_isValid;

    m_upcoming_opponent_rank_isValid = ::OpenAPI::fromJsonValue(m_upcoming_opponent_rank, json[QString("UpcomingOpponentRank")]);
    m_upcoming_opponent_rank_isSet = !json[QString("UpcomingOpponentRank")].isNull() && m_upcoming_opponent_rank_isValid;

    m_upcoming_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_salary, json[QString("UpcomingSalary")]);
    m_upcoming_salary_isSet = !json[QString("UpcomingSalary")].isNull() && m_upcoming_salary_isValid;

    m_upcoming_yahoo_salary_isValid = ::OpenAPI::fromJsonValue(m_upcoming_yahoo_salary, json[QString("UpcomingYahooSalary")]);
    m_upcoming_yahoo_salary_isSet = !json[QString("UpcomingYahooSalary")].isNull() && m_upcoming_yahoo_salary_isValid;

    m_usa_today_headshot_no_background_updated_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_no_background_updated, json[QString("UsaTodayHeadshotNoBackgroundUpdated")]);
    m_usa_today_headshot_no_background_updated_isSet = !json[QString("UsaTodayHeadshotNoBackgroundUpdated")].isNull() && m_usa_today_headshot_no_background_updated_isValid;

    m_usa_today_headshot_no_background_url_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_no_background_url, json[QString("UsaTodayHeadshotNoBackgroundUrl")]);
    m_usa_today_headshot_no_background_url_isSet = !json[QString("UsaTodayHeadshotNoBackgroundUrl")].isNull() && m_usa_today_headshot_no_background_url_isValid;

    m_usa_today_headshot_updated_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_updated, json[QString("UsaTodayHeadshotUpdated")]);
    m_usa_today_headshot_updated_isSet = !json[QString("UsaTodayHeadshotUpdated")].isNull() && m_usa_today_headshot_updated_isValid;

    m_usa_today_headshot_url_isValid = ::OpenAPI::fromJsonValue(m_usa_today_headshot_url, json[QString("UsaTodayHeadshotUrl")]);
    m_usa_today_headshot_url_isSet = !json[QString("UsaTodayHeadshotUrl")].isNull() && m_usa_today_headshot_url_isValid;

    m_usa_today_player_id_isValid = ::OpenAPI::fromJsonValue(m_usa_today_player_id, json[QString("UsaTodayPlayerID")]);
    m_usa_today_player_id_isSet = !json[QString("UsaTodayPlayerID")].isNull() && m_usa_today_player_id_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;

    m_xml_team_player_id_isValid = ::OpenAPI::fromJsonValue(m_xml_team_player_id, json[QString("XmlTeamPlayerID")]);
    m_xml_team_player_id_isSet = !json[QString("XmlTeamPlayerID")].isNull() && m_xml_team_player_id_isValid;

    m_yahoo_name_isValid = ::OpenAPI::fromJsonValue(m_yahoo_name, json[QString("YahooName")]);
    m_yahoo_name_isSet = !json[QString("YahooName")].isNull() && m_yahoo_name_isValid;

    m_yahoo_player_id_isValid = ::OpenAPI::fromJsonValue(m_yahoo_player_id, json[QString("YahooPlayerID")]);
    m_yahoo_player_id_isSet = !json[QString("YahooPlayerID")].isNull() && m_yahoo_player_id_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_age_isSet) {
        obj.insert(QString("Age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_average_draft_position_isSet) {
        obj.insert(QString("AverageDraftPosition"), ::OpenAPI::toJsonValue(m_average_draft_position));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("BirthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_birth_date_string_isSet) {
        obj.insert(QString("BirthDateString"), ::OpenAPI::toJsonValue(m_birth_date_string));
    }
    if (m_bye_week_isSet) {
        obj.insert(QString("ByeWeek"), ::OpenAPI::toJsonValue(m_bye_week));
    }
    if (m_college_isSet) {
        obj.insert(QString("College"), ::OpenAPI::toJsonValue(m_college));
    }
    if (m_college_draft_pick_isSet) {
        obj.insert(QString("CollegeDraftPick"), ::OpenAPI::toJsonValue(m_college_draft_pick));
    }
    if (m_college_draft_round_isSet) {
        obj.insert(QString("CollegeDraftRound"), ::OpenAPI::toJsonValue(m_college_draft_round));
    }
    if (m_college_draft_team_isSet) {
        obj.insert(QString("CollegeDraftTeam"), ::OpenAPI::toJsonValue(m_college_draft_team));
    }
    if (m_college_draft_year_isSet) {
        obj.insert(QString("CollegeDraftYear"), ::OpenAPI::toJsonValue(m_college_draft_year));
    }
    if (m_current_status_isSet) {
        obj.insert(QString("CurrentStatus"), ::OpenAPI::toJsonValue(m_current_status));
    }
    if (m_current_team_isSet) {
        obj.insert(QString("CurrentTeam"), ::OpenAPI::toJsonValue(m_current_team));
    }
    if (m_declared_inactive_isSet) {
        obj.insert(QString("DeclaredInactive"), ::OpenAPI::toJsonValue(m_declared_inactive));
    }
    if (m_depth_display_order_isSet) {
        obj.insert(QString("DepthDisplayOrder"), ::OpenAPI::toJsonValue(m_depth_display_order));
    }
    if (m_depth_order_isSet) {
        obj.insert(QString("DepthOrder"), ::OpenAPI::toJsonValue(m_depth_order));
    }
    if (m_depth_position_isSet) {
        obj.insert(QString("DepthPosition"), ::OpenAPI::toJsonValue(m_depth_position));
    }
    if (m_depth_position_category_isSet) {
        obj.insert(QString("DepthPositionCategory"), ::OpenAPI::toJsonValue(m_depth_position_category));
    }
    if (m_draft_kings_name_isSet) {
        obj.insert(QString("DraftKingsName"), ::OpenAPI::toJsonValue(m_draft_kings_name));
    }
    if (m_draft_kings_player_id_isSet) {
        obj.insert(QString("DraftKingsPlayerID"), ::OpenAPI::toJsonValue(m_draft_kings_player_id));
    }
    if (m_experience_isSet) {
        obj.insert(QString("Experience"), ::OpenAPI::toJsonValue(m_experience));
    }
    if (m_experience_string_isSet) {
        obj.insert(QString("ExperienceString"), ::OpenAPI::toJsonValue(m_experience_string));
    }
    if (m_fan_duel_name_isSet) {
        obj.insert(QString("FanDuelName"), ::OpenAPI::toJsonValue(m_fan_duel_name));
    }
    if (m_fan_duel_player_id_isSet) {
        obj.insert(QString("FanDuelPlayerID"), ::OpenAPI::toJsonValue(m_fan_duel_player_id));
    }
    if (m_fantasy_alarm_player_id_isSet) {
        obj.insert(QString("FantasyAlarmPlayerID"), ::OpenAPI::toJsonValue(m_fantasy_alarm_player_id));
    }
    if (m_fantasy_draft_name_isSet) {
        obj.insert(QString("FantasyDraftName"), ::OpenAPI::toJsonValue(m_fantasy_draft_name));
    }
    if (m_fantasy_draft_player_id_isSet) {
        obj.insert(QString("FantasyDraftPlayerID"), ::OpenAPI::toJsonValue(m_fantasy_draft_player_id));
    }
    if (m_fantasy_position_isSet) {
        obj.insert(QString("FantasyPosition"), ::OpenAPI::toJsonValue(m_fantasy_position));
    }
    if (m_fantasy_position_depth_order_isSet) {
        obj.insert(QString("FantasyPositionDepthOrder"), ::OpenAPI::toJsonValue(m_fantasy_position_depth_order));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_global_team_id_isSet) {
        obj.insert(QString("GlobalTeamID"), ::OpenAPI::toJsonValue(m_global_team_id));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_height_feet_isSet) {
        obj.insert(QString("HeightFeet"), ::OpenAPI::toJsonValue(m_height_feet));
    }
    if (m_height_inches_isSet) {
        obj.insert(QString("HeightInches"), ::OpenAPI::toJsonValue(m_height_inches));
    }
    if (m_injury_body_part_isSet) {
        obj.insert(QString("InjuryBodyPart"), ::OpenAPI::toJsonValue(m_injury_body_part));
    }
    if (m_injury_notes_isSet) {
        obj.insert(QString("InjuryNotes"), ::OpenAPI::toJsonValue(m_injury_notes));
    }
    if (m_injury_practice_isSet) {
        obj.insert(QString("InjuryPractice"), ::OpenAPI::toJsonValue(m_injury_practice));
    }
    if (m_injury_practice_description_isSet) {
        obj.insert(QString("InjuryPracticeDescription"), ::OpenAPI::toJsonValue(m_injury_practice_description));
    }
    if (m_injury_start_date_isSet) {
        obj.insert(QString("InjuryStartDate"), ::OpenAPI::toJsonValue(m_injury_start_date));
    }
    if (m_injury_status_isSet) {
        obj.insert(QString("InjuryStatus"), ::OpenAPI::toJsonValue(m_injury_status));
    }
    if (m_is_undrafted_free_agent_isSet) {
        obj.insert(QString("IsUndraftedFreeAgent"), ::OpenAPI::toJsonValue(m_is_undrafted_free_agent));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("PhotoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_category_isSet) {
        obj.insert(QString("PositionCategory"), ::OpenAPI::toJsonValue(m_position_category));
    }
    if (m_roto_wire_player_id_isSet) {
        obj.insert(QString("RotoWirePlayerID"), ::OpenAPI::toJsonValue(m_roto_wire_player_id));
    }
    if (m_rotoworld_player_id_isSet) {
        obj.insert(QString("RotoworldPlayerID"), ::OpenAPI::toJsonValue(m_rotoworld_player_id));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("ShortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_sport_radar_player_id_isSet) {
        obj.insert(QString("SportRadarPlayerID"), ::OpenAPI::toJsonValue(m_sport_radar_player_id));
    }
    if (m_sports_direct_player_id_isSet) {
        obj.insert(QString("SportsDirectPlayerID"), ::OpenAPI::toJsonValue(m_sports_direct_player_id));
    }
    if (m_stats_player_id_isSet) {
        obj.insert(QString("StatsPlayerID"), ::OpenAPI::toJsonValue(m_stats_player_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_upcoming_draft_kings_salary_isSet) {
        obj.insert(QString("UpcomingDraftKingsSalary"), ::OpenAPI::toJsonValue(m_upcoming_draft_kings_salary));
    }
    if (m_upcoming_fan_duel_salary_isSet) {
        obj.insert(QString("UpcomingFanDuelSalary"), ::OpenAPI::toJsonValue(m_upcoming_fan_duel_salary));
    }
    if (m_upcoming_game_opponent_isSet) {
        obj.insert(QString("UpcomingGameOpponent"), ::OpenAPI::toJsonValue(m_upcoming_game_opponent));
    }
    if (m_upcoming_game_week_isSet) {
        obj.insert(QString("UpcomingGameWeek"), ::OpenAPI::toJsonValue(m_upcoming_game_week));
    }
    if (m_upcoming_opponent_position_rank_isSet) {
        obj.insert(QString("UpcomingOpponentPositionRank"), ::OpenAPI::toJsonValue(m_upcoming_opponent_position_rank));
    }
    if (m_upcoming_opponent_rank_isSet) {
        obj.insert(QString("UpcomingOpponentRank"), ::OpenAPI::toJsonValue(m_upcoming_opponent_rank));
    }
    if (m_upcoming_salary_isSet) {
        obj.insert(QString("UpcomingSalary"), ::OpenAPI::toJsonValue(m_upcoming_salary));
    }
    if (m_upcoming_yahoo_salary_isSet) {
        obj.insert(QString("UpcomingYahooSalary"), ::OpenAPI::toJsonValue(m_upcoming_yahoo_salary));
    }
    if (m_usa_today_headshot_no_background_updated_isSet) {
        obj.insert(QString("UsaTodayHeadshotNoBackgroundUpdated"), ::OpenAPI::toJsonValue(m_usa_today_headshot_no_background_updated));
    }
    if (m_usa_today_headshot_no_background_url_isSet) {
        obj.insert(QString("UsaTodayHeadshotNoBackgroundUrl"), ::OpenAPI::toJsonValue(m_usa_today_headshot_no_background_url));
    }
    if (m_usa_today_headshot_updated_isSet) {
        obj.insert(QString("UsaTodayHeadshotUpdated"), ::OpenAPI::toJsonValue(m_usa_today_headshot_updated));
    }
    if (m_usa_today_headshot_url_isSet) {
        obj.insert(QString("UsaTodayHeadshotUrl"), ::OpenAPI::toJsonValue(m_usa_today_headshot_url));
    }
    if (m_usa_today_player_id_isSet) {
        obj.insert(QString("UsaTodayPlayerID"), ::OpenAPI::toJsonValue(m_usa_today_player_id));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_xml_team_player_id_isSet) {
        obj.insert(QString("XmlTeamPlayerID"), ::OpenAPI::toJsonValue(m_xml_team_player_id));
    }
    if (m_yahoo_name_isSet) {
        obj.insert(QString("YahooName"), ::OpenAPI::toJsonValue(m_yahoo_name));
    }
    if (m_yahoo_player_id_isSet) {
        obj.insert(QString("YahooPlayerID"), ::OpenAPI::toJsonValue(m_yahoo_player_id));
    }
    return obj;
}

bool OAIPlayer::isActive() const {
    return m_active;
}
void OAIPlayer::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPlayer::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPlayer::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAIPlayer::getAge() const {
    return m_age;
}
void OAIPlayer::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIPlayer::is_age_Set() const{
    return m_age_isSet;
}

bool OAIPlayer::is_age_Valid() const{
    return m_age_isValid;
}

double OAIPlayer::getAverageDraftPosition() const {
    return m_average_draft_position;
}
void OAIPlayer::setAverageDraftPosition(const double &average_draft_position) {
    m_average_draft_position = average_draft_position;
    m_average_draft_position_isSet = true;
}

bool OAIPlayer::is_average_draft_position_Set() const{
    return m_average_draft_position_isSet;
}

bool OAIPlayer::is_average_draft_position_Valid() const{
    return m_average_draft_position_isValid;
}

QString OAIPlayer::getBirthDate() const {
    return m_birth_date;
}
void OAIPlayer::setBirthDate(const QString &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIPlayer::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIPlayer::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIPlayer::getBirthDateString() const {
    return m_birth_date_string;
}
void OAIPlayer::setBirthDateString(const QString &birth_date_string) {
    m_birth_date_string = birth_date_string;
    m_birth_date_string_isSet = true;
}

bool OAIPlayer::is_birth_date_string_Set() const{
    return m_birth_date_string_isSet;
}

bool OAIPlayer::is_birth_date_string_Valid() const{
    return m_birth_date_string_isValid;
}

qint32 OAIPlayer::getByeWeek() const {
    return m_bye_week;
}
void OAIPlayer::setByeWeek(const qint32 &bye_week) {
    m_bye_week = bye_week;
    m_bye_week_isSet = true;
}

bool OAIPlayer::is_bye_week_Set() const{
    return m_bye_week_isSet;
}

bool OAIPlayer::is_bye_week_Valid() const{
    return m_bye_week_isValid;
}

QString OAIPlayer::getCollege() const {
    return m_college;
}
void OAIPlayer::setCollege(const QString &college) {
    m_college = college;
    m_college_isSet = true;
}

bool OAIPlayer::is_college_Set() const{
    return m_college_isSet;
}

bool OAIPlayer::is_college_Valid() const{
    return m_college_isValid;
}

qint32 OAIPlayer::getCollegeDraftPick() const {
    return m_college_draft_pick;
}
void OAIPlayer::setCollegeDraftPick(const qint32 &college_draft_pick) {
    m_college_draft_pick = college_draft_pick;
    m_college_draft_pick_isSet = true;
}

bool OAIPlayer::is_college_draft_pick_Set() const{
    return m_college_draft_pick_isSet;
}

bool OAIPlayer::is_college_draft_pick_Valid() const{
    return m_college_draft_pick_isValid;
}

qint32 OAIPlayer::getCollegeDraftRound() const {
    return m_college_draft_round;
}
void OAIPlayer::setCollegeDraftRound(const qint32 &college_draft_round) {
    m_college_draft_round = college_draft_round;
    m_college_draft_round_isSet = true;
}

bool OAIPlayer::is_college_draft_round_Set() const{
    return m_college_draft_round_isSet;
}

bool OAIPlayer::is_college_draft_round_Valid() const{
    return m_college_draft_round_isValid;
}

QString OAIPlayer::getCollegeDraftTeam() const {
    return m_college_draft_team;
}
void OAIPlayer::setCollegeDraftTeam(const QString &college_draft_team) {
    m_college_draft_team = college_draft_team;
    m_college_draft_team_isSet = true;
}

bool OAIPlayer::is_college_draft_team_Set() const{
    return m_college_draft_team_isSet;
}

bool OAIPlayer::is_college_draft_team_Valid() const{
    return m_college_draft_team_isValid;
}

qint32 OAIPlayer::getCollegeDraftYear() const {
    return m_college_draft_year;
}
void OAIPlayer::setCollegeDraftYear(const qint32 &college_draft_year) {
    m_college_draft_year = college_draft_year;
    m_college_draft_year_isSet = true;
}

bool OAIPlayer::is_college_draft_year_Set() const{
    return m_college_draft_year_isSet;
}

bool OAIPlayer::is_college_draft_year_Valid() const{
    return m_college_draft_year_isValid;
}

QString OAIPlayer::getCurrentStatus() const {
    return m_current_status;
}
void OAIPlayer::setCurrentStatus(const QString &current_status) {
    m_current_status = current_status;
    m_current_status_isSet = true;
}

bool OAIPlayer::is_current_status_Set() const{
    return m_current_status_isSet;
}

bool OAIPlayer::is_current_status_Valid() const{
    return m_current_status_isValid;
}

QString OAIPlayer::getCurrentTeam() const {
    return m_current_team;
}
void OAIPlayer::setCurrentTeam(const QString &current_team) {
    m_current_team = current_team;
    m_current_team_isSet = true;
}

bool OAIPlayer::is_current_team_Set() const{
    return m_current_team_isSet;
}

bool OAIPlayer::is_current_team_Valid() const{
    return m_current_team_isValid;
}

bool OAIPlayer::isDeclaredInactive() const {
    return m_declared_inactive;
}
void OAIPlayer::setDeclaredInactive(const bool &declared_inactive) {
    m_declared_inactive = declared_inactive;
    m_declared_inactive_isSet = true;
}

bool OAIPlayer::is_declared_inactive_Set() const{
    return m_declared_inactive_isSet;
}

bool OAIPlayer::is_declared_inactive_Valid() const{
    return m_declared_inactive_isValid;
}

qint32 OAIPlayer::getDepthDisplayOrder() const {
    return m_depth_display_order;
}
void OAIPlayer::setDepthDisplayOrder(const qint32 &depth_display_order) {
    m_depth_display_order = depth_display_order;
    m_depth_display_order_isSet = true;
}

bool OAIPlayer::is_depth_display_order_Set() const{
    return m_depth_display_order_isSet;
}

bool OAIPlayer::is_depth_display_order_Valid() const{
    return m_depth_display_order_isValid;
}

qint32 OAIPlayer::getDepthOrder() const {
    return m_depth_order;
}
void OAIPlayer::setDepthOrder(const qint32 &depth_order) {
    m_depth_order = depth_order;
    m_depth_order_isSet = true;
}

bool OAIPlayer::is_depth_order_Set() const{
    return m_depth_order_isSet;
}

bool OAIPlayer::is_depth_order_Valid() const{
    return m_depth_order_isValid;
}

QString OAIPlayer::getDepthPosition() const {
    return m_depth_position;
}
void OAIPlayer::setDepthPosition(const QString &depth_position) {
    m_depth_position = depth_position;
    m_depth_position_isSet = true;
}

bool OAIPlayer::is_depth_position_Set() const{
    return m_depth_position_isSet;
}

bool OAIPlayer::is_depth_position_Valid() const{
    return m_depth_position_isValid;
}

QString OAIPlayer::getDepthPositionCategory() const {
    return m_depth_position_category;
}
void OAIPlayer::setDepthPositionCategory(const QString &depth_position_category) {
    m_depth_position_category = depth_position_category;
    m_depth_position_category_isSet = true;
}

bool OAIPlayer::is_depth_position_category_Set() const{
    return m_depth_position_category_isSet;
}

bool OAIPlayer::is_depth_position_category_Valid() const{
    return m_depth_position_category_isValid;
}

QString OAIPlayer::getDraftKingsName() const {
    return m_draft_kings_name;
}
void OAIPlayer::setDraftKingsName(const QString &draft_kings_name) {
    m_draft_kings_name = draft_kings_name;
    m_draft_kings_name_isSet = true;
}

bool OAIPlayer::is_draft_kings_name_Set() const{
    return m_draft_kings_name_isSet;
}

bool OAIPlayer::is_draft_kings_name_Valid() const{
    return m_draft_kings_name_isValid;
}

qint32 OAIPlayer::getDraftKingsPlayerId() const {
    return m_draft_kings_player_id;
}
void OAIPlayer::setDraftKingsPlayerId(const qint32 &draft_kings_player_id) {
    m_draft_kings_player_id = draft_kings_player_id;
    m_draft_kings_player_id_isSet = true;
}

bool OAIPlayer::is_draft_kings_player_id_Set() const{
    return m_draft_kings_player_id_isSet;
}

bool OAIPlayer::is_draft_kings_player_id_Valid() const{
    return m_draft_kings_player_id_isValid;
}

qint32 OAIPlayer::getExperience() const {
    return m_experience;
}
void OAIPlayer::setExperience(const qint32 &experience) {
    m_experience = experience;
    m_experience_isSet = true;
}

bool OAIPlayer::is_experience_Set() const{
    return m_experience_isSet;
}

bool OAIPlayer::is_experience_Valid() const{
    return m_experience_isValid;
}

QString OAIPlayer::getExperienceString() const {
    return m_experience_string;
}
void OAIPlayer::setExperienceString(const QString &experience_string) {
    m_experience_string = experience_string;
    m_experience_string_isSet = true;
}

bool OAIPlayer::is_experience_string_Set() const{
    return m_experience_string_isSet;
}

bool OAIPlayer::is_experience_string_Valid() const{
    return m_experience_string_isValid;
}

QString OAIPlayer::getFanDuelName() const {
    return m_fan_duel_name;
}
void OAIPlayer::setFanDuelName(const QString &fan_duel_name) {
    m_fan_duel_name = fan_duel_name;
    m_fan_duel_name_isSet = true;
}

bool OAIPlayer::is_fan_duel_name_Set() const{
    return m_fan_duel_name_isSet;
}

bool OAIPlayer::is_fan_duel_name_Valid() const{
    return m_fan_duel_name_isValid;
}

qint32 OAIPlayer::getFanDuelPlayerId() const {
    return m_fan_duel_player_id;
}
void OAIPlayer::setFanDuelPlayerId(const qint32 &fan_duel_player_id) {
    m_fan_duel_player_id = fan_duel_player_id;
    m_fan_duel_player_id_isSet = true;
}

bool OAIPlayer::is_fan_duel_player_id_Set() const{
    return m_fan_duel_player_id_isSet;
}

bool OAIPlayer::is_fan_duel_player_id_Valid() const{
    return m_fan_duel_player_id_isValid;
}

qint32 OAIPlayer::getFantasyAlarmPlayerId() const {
    return m_fantasy_alarm_player_id;
}
void OAIPlayer::setFantasyAlarmPlayerId(const qint32 &fantasy_alarm_player_id) {
    m_fantasy_alarm_player_id = fantasy_alarm_player_id;
    m_fantasy_alarm_player_id_isSet = true;
}

bool OAIPlayer::is_fantasy_alarm_player_id_Set() const{
    return m_fantasy_alarm_player_id_isSet;
}

bool OAIPlayer::is_fantasy_alarm_player_id_Valid() const{
    return m_fantasy_alarm_player_id_isValid;
}

QString OAIPlayer::getFantasyDraftName() const {
    return m_fantasy_draft_name;
}
void OAIPlayer::setFantasyDraftName(const QString &fantasy_draft_name) {
    m_fantasy_draft_name = fantasy_draft_name;
    m_fantasy_draft_name_isSet = true;
}

bool OAIPlayer::is_fantasy_draft_name_Set() const{
    return m_fantasy_draft_name_isSet;
}

bool OAIPlayer::is_fantasy_draft_name_Valid() const{
    return m_fantasy_draft_name_isValid;
}

qint32 OAIPlayer::getFantasyDraftPlayerId() const {
    return m_fantasy_draft_player_id;
}
void OAIPlayer::setFantasyDraftPlayerId(const qint32 &fantasy_draft_player_id) {
    m_fantasy_draft_player_id = fantasy_draft_player_id;
    m_fantasy_draft_player_id_isSet = true;
}

bool OAIPlayer::is_fantasy_draft_player_id_Set() const{
    return m_fantasy_draft_player_id_isSet;
}

bool OAIPlayer::is_fantasy_draft_player_id_Valid() const{
    return m_fantasy_draft_player_id_isValid;
}

QString OAIPlayer::getFantasyPosition() const {
    return m_fantasy_position;
}
void OAIPlayer::setFantasyPosition(const QString &fantasy_position) {
    m_fantasy_position = fantasy_position;
    m_fantasy_position_isSet = true;
}

bool OAIPlayer::is_fantasy_position_Set() const{
    return m_fantasy_position_isSet;
}

bool OAIPlayer::is_fantasy_position_Valid() const{
    return m_fantasy_position_isValid;
}

qint32 OAIPlayer::getFantasyPositionDepthOrder() const {
    return m_fantasy_position_depth_order;
}
void OAIPlayer::setFantasyPositionDepthOrder(const qint32 &fantasy_position_depth_order) {
    m_fantasy_position_depth_order = fantasy_position_depth_order;
    m_fantasy_position_depth_order_isSet = true;
}

bool OAIPlayer::is_fantasy_position_depth_order_Set() const{
    return m_fantasy_position_depth_order_isSet;
}

bool OAIPlayer::is_fantasy_position_depth_order_Valid() const{
    return m_fantasy_position_depth_order_isValid;
}

QString OAIPlayer::getFirstName() const {
    return m_first_name;
}
void OAIPlayer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPlayer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPlayer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIPlayer::getGlobalTeamId() const {
    return m_global_team_id;
}
void OAIPlayer::setGlobalTeamId(const qint32 &global_team_id) {
    m_global_team_id = global_team_id;
    m_global_team_id_isSet = true;
}

bool OAIPlayer::is_global_team_id_Set() const{
    return m_global_team_id_isSet;
}

bool OAIPlayer::is_global_team_id_Valid() const{
    return m_global_team_id_isValid;
}

QString OAIPlayer::getHeight() const {
    return m_height;
}
void OAIPlayer::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlayer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlayer::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIPlayer::getHeightFeet() const {
    return m_height_feet;
}
void OAIPlayer::setHeightFeet(const qint32 &height_feet) {
    m_height_feet = height_feet;
    m_height_feet_isSet = true;
}

bool OAIPlayer::is_height_feet_Set() const{
    return m_height_feet_isSet;
}

bool OAIPlayer::is_height_feet_Valid() const{
    return m_height_feet_isValid;
}

qint32 OAIPlayer::getHeightInches() const {
    return m_height_inches;
}
void OAIPlayer::setHeightInches(const qint32 &height_inches) {
    m_height_inches = height_inches;
    m_height_inches_isSet = true;
}

bool OAIPlayer::is_height_inches_Set() const{
    return m_height_inches_isSet;
}

bool OAIPlayer::is_height_inches_Valid() const{
    return m_height_inches_isValid;
}

QString OAIPlayer::getInjuryBodyPart() const {
    return m_injury_body_part;
}
void OAIPlayer::setInjuryBodyPart(const QString &injury_body_part) {
    m_injury_body_part = injury_body_part;
    m_injury_body_part_isSet = true;
}

bool OAIPlayer::is_injury_body_part_Set() const{
    return m_injury_body_part_isSet;
}

bool OAIPlayer::is_injury_body_part_Valid() const{
    return m_injury_body_part_isValid;
}

QString OAIPlayer::getInjuryNotes() const {
    return m_injury_notes;
}
void OAIPlayer::setInjuryNotes(const QString &injury_notes) {
    m_injury_notes = injury_notes;
    m_injury_notes_isSet = true;
}

bool OAIPlayer::is_injury_notes_Set() const{
    return m_injury_notes_isSet;
}

bool OAIPlayer::is_injury_notes_Valid() const{
    return m_injury_notes_isValid;
}

QString OAIPlayer::getInjuryPractice() const {
    return m_injury_practice;
}
void OAIPlayer::setInjuryPractice(const QString &injury_practice) {
    m_injury_practice = injury_practice;
    m_injury_practice_isSet = true;
}

bool OAIPlayer::is_injury_practice_Set() const{
    return m_injury_practice_isSet;
}

bool OAIPlayer::is_injury_practice_Valid() const{
    return m_injury_practice_isValid;
}

QString OAIPlayer::getInjuryPracticeDescription() const {
    return m_injury_practice_description;
}
void OAIPlayer::setInjuryPracticeDescription(const QString &injury_practice_description) {
    m_injury_practice_description = injury_practice_description;
    m_injury_practice_description_isSet = true;
}

bool OAIPlayer::is_injury_practice_description_Set() const{
    return m_injury_practice_description_isSet;
}

bool OAIPlayer::is_injury_practice_description_Valid() const{
    return m_injury_practice_description_isValid;
}

QString OAIPlayer::getInjuryStartDate() const {
    return m_injury_start_date;
}
void OAIPlayer::setInjuryStartDate(const QString &injury_start_date) {
    m_injury_start_date = injury_start_date;
    m_injury_start_date_isSet = true;
}

bool OAIPlayer::is_injury_start_date_Set() const{
    return m_injury_start_date_isSet;
}

bool OAIPlayer::is_injury_start_date_Valid() const{
    return m_injury_start_date_isValid;
}

QString OAIPlayer::getInjuryStatus() const {
    return m_injury_status;
}
void OAIPlayer::setInjuryStatus(const QString &injury_status) {
    m_injury_status = injury_status;
    m_injury_status_isSet = true;
}

bool OAIPlayer::is_injury_status_Set() const{
    return m_injury_status_isSet;
}

bool OAIPlayer::is_injury_status_Valid() const{
    return m_injury_status_isValid;
}

bool OAIPlayer::isIsUndraftedFreeAgent() const {
    return m_is_undrafted_free_agent;
}
void OAIPlayer::setIsUndraftedFreeAgent(const bool &is_undrafted_free_agent) {
    m_is_undrafted_free_agent = is_undrafted_free_agent;
    m_is_undrafted_free_agent_isSet = true;
}

bool OAIPlayer::is_is_undrafted_free_agent_Set() const{
    return m_is_undrafted_free_agent_isSet;
}

bool OAIPlayer::is_is_undrafted_free_agent_Valid() const{
    return m_is_undrafted_free_agent_isValid;
}

QString OAIPlayer::getLastName() const {
    return m_last_name;
}
void OAIPlayer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPlayer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPlayer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIPlayer::getName() const {
    return m_name;
}
void OAIPlayer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayer::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlayer::getNumber() const {
    return m_number;
}
void OAIPlayer::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPlayer::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPlayer::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPlayer::getPhotoUrl() const {
    return m_photo_url;
}
void OAIPlayer::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIPlayer::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIPlayer::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

qint32 OAIPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIPlayer::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayer::getPosition() const {
    return m_position;
}
void OAIPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayer::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPlayer::getPositionCategory() const {
    return m_position_category;
}
void OAIPlayer::setPositionCategory(const QString &position_category) {
    m_position_category = position_category;
    m_position_category_isSet = true;
}

bool OAIPlayer::is_position_category_Set() const{
    return m_position_category_isSet;
}

bool OAIPlayer::is_position_category_Valid() const{
    return m_position_category_isValid;
}

qint32 OAIPlayer::getRotoWirePlayerId() const {
    return m_roto_wire_player_id;
}
void OAIPlayer::setRotoWirePlayerId(const qint32 &roto_wire_player_id) {
    m_roto_wire_player_id = roto_wire_player_id;
    m_roto_wire_player_id_isSet = true;
}

bool OAIPlayer::is_roto_wire_player_id_Set() const{
    return m_roto_wire_player_id_isSet;
}

bool OAIPlayer::is_roto_wire_player_id_Valid() const{
    return m_roto_wire_player_id_isValid;
}

qint32 OAIPlayer::getRotoworldPlayerId() const {
    return m_rotoworld_player_id;
}
void OAIPlayer::setRotoworldPlayerId(const qint32 &rotoworld_player_id) {
    m_rotoworld_player_id = rotoworld_player_id;
    m_rotoworld_player_id_isSet = true;
}

bool OAIPlayer::is_rotoworld_player_id_Set() const{
    return m_rotoworld_player_id_isSet;
}

bool OAIPlayer::is_rotoworld_player_id_Valid() const{
    return m_rotoworld_player_id_isValid;
}

QString OAIPlayer::getShortName() const {
    return m_short_name;
}
void OAIPlayer::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIPlayer::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIPlayer::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIPlayer::getSportRadarPlayerId() const {
    return m_sport_radar_player_id;
}
void OAIPlayer::setSportRadarPlayerId(const QString &sport_radar_player_id) {
    m_sport_radar_player_id = sport_radar_player_id;
    m_sport_radar_player_id_isSet = true;
}

bool OAIPlayer::is_sport_radar_player_id_Set() const{
    return m_sport_radar_player_id_isSet;
}

bool OAIPlayer::is_sport_radar_player_id_Valid() const{
    return m_sport_radar_player_id_isValid;
}

qint32 OAIPlayer::getSportsDirectPlayerId() const {
    return m_sports_direct_player_id;
}
void OAIPlayer::setSportsDirectPlayerId(const qint32 &sports_direct_player_id) {
    m_sports_direct_player_id = sports_direct_player_id;
    m_sports_direct_player_id_isSet = true;
}

bool OAIPlayer::is_sports_direct_player_id_Set() const{
    return m_sports_direct_player_id_isSet;
}

bool OAIPlayer::is_sports_direct_player_id_Valid() const{
    return m_sports_direct_player_id_isValid;
}

qint32 OAIPlayer::getStatsPlayerId() const {
    return m_stats_player_id;
}
void OAIPlayer::setStatsPlayerId(const qint32 &stats_player_id) {
    m_stats_player_id = stats_player_id;
    m_stats_player_id_isSet = true;
}

bool OAIPlayer::is_stats_player_id_Set() const{
    return m_stats_player_id_isSet;
}

bool OAIPlayer::is_stats_player_id_Valid() const{
    return m_stats_player_id_isValid;
}

QString OAIPlayer::getStatus() const {
    return m_status;
}
void OAIPlayer::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlayer::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlayer::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPlayer::getTeam() const {
    return m_team;
}
void OAIPlayer::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayer::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayer::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayer::getTeamId() const {
    return m_team_id;
}
void OAIPlayer::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlayer::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlayer::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIPlayer::getUpcomingDraftKingsSalary() const {
    return m_upcoming_draft_kings_salary;
}
void OAIPlayer::setUpcomingDraftKingsSalary(const qint32 &upcoming_draft_kings_salary) {
    m_upcoming_draft_kings_salary = upcoming_draft_kings_salary;
    m_upcoming_draft_kings_salary_isSet = true;
}

bool OAIPlayer::is_upcoming_draft_kings_salary_Set() const{
    return m_upcoming_draft_kings_salary_isSet;
}

bool OAIPlayer::is_upcoming_draft_kings_salary_Valid() const{
    return m_upcoming_draft_kings_salary_isValid;
}

qint32 OAIPlayer::getUpcomingFanDuelSalary() const {
    return m_upcoming_fan_duel_salary;
}
void OAIPlayer::setUpcomingFanDuelSalary(const qint32 &upcoming_fan_duel_salary) {
    m_upcoming_fan_duel_salary = upcoming_fan_duel_salary;
    m_upcoming_fan_duel_salary_isSet = true;
}

bool OAIPlayer::is_upcoming_fan_duel_salary_Set() const{
    return m_upcoming_fan_duel_salary_isSet;
}

bool OAIPlayer::is_upcoming_fan_duel_salary_Valid() const{
    return m_upcoming_fan_duel_salary_isValid;
}

QString OAIPlayer::getUpcomingGameOpponent() const {
    return m_upcoming_game_opponent;
}
void OAIPlayer::setUpcomingGameOpponent(const QString &upcoming_game_opponent) {
    m_upcoming_game_opponent = upcoming_game_opponent;
    m_upcoming_game_opponent_isSet = true;
}

bool OAIPlayer::is_upcoming_game_opponent_Set() const{
    return m_upcoming_game_opponent_isSet;
}

bool OAIPlayer::is_upcoming_game_opponent_Valid() const{
    return m_upcoming_game_opponent_isValid;
}

qint32 OAIPlayer::getUpcomingGameWeek() const {
    return m_upcoming_game_week;
}
void OAIPlayer::setUpcomingGameWeek(const qint32 &upcoming_game_week) {
    m_upcoming_game_week = upcoming_game_week;
    m_upcoming_game_week_isSet = true;
}

bool OAIPlayer::is_upcoming_game_week_Set() const{
    return m_upcoming_game_week_isSet;
}

bool OAIPlayer::is_upcoming_game_week_Valid() const{
    return m_upcoming_game_week_isValid;
}

qint32 OAIPlayer::getUpcomingOpponentPositionRank() const {
    return m_upcoming_opponent_position_rank;
}
void OAIPlayer::setUpcomingOpponentPositionRank(const qint32 &upcoming_opponent_position_rank) {
    m_upcoming_opponent_position_rank = upcoming_opponent_position_rank;
    m_upcoming_opponent_position_rank_isSet = true;
}

bool OAIPlayer::is_upcoming_opponent_position_rank_Set() const{
    return m_upcoming_opponent_position_rank_isSet;
}

bool OAIPlayer::is_upcoming_opponent_position_rank_Valid() const{
    return m_upcoming_opponent_position_rank_isValid;
}

qint32 OAIPlayer::getUpcomingOpponentRank() const {
    return m_upcoming_opponent_rank;
}
void OAIPlayer::setUpcomingOpponentRank(const qint32 &upcoming_opponent_rank) {
    m_upcoming_opponent_rank = upcoming_opponent_rank;
    m_upcoming_opponent_rank_isSet = true;
}

bool OAIPlayer::is_upcoming_opponent_rank_Set() const{
    return m_upcoming_opponent_rank_isSet;
}

bool OAIPlayer::is_upcoming_opponent_rank_Valid() const{
    return m_upcoming_opponent_rank_isValid;
}

qint32 OAIPlayer::getUpcomingSalary() const {
    return m_upcoming_salary;
}
void OAIPlayer::setUpcomingSalary(const qint32 &upcoming_salary) {
    m_upcoming_salary = upcoming_salary;
    m_upcoming_salary_isSet = true;
}

bool OAIPlayer::is_upcoming_salary_Set() const{
    return m_upcoming_salary_isSet;
}

bool OAIPlayer::is_upcoming_salary_Valid() const{
    return m_upcoming_salary_isValid;
}

qint32 OAIPlayer::getUpcomingYahooSalary() const {
    return m_upcoming_yahoo_salary;
}
void OAIPlayer::setUpcomingYahooSalary(const qint32 &upcoming_yahoo_salary) {
    m_upcoming_yahoo_salary = upcoming_yahoo_salary;
    m_upcoming_yahoo_salary_isSet = true;
}

bool OAIPlayer::is_upcoming_yahoo_salary_Set() const{
    return m_upcoming_yahoo_salary_isSet;
}

bool OAIPlayer::is_upcoming_yahoo_salary_Valid() const{
    return m_upcoming_yahoo_salary_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotNoBackgroundUpdated() const {
    return m_usa_today_headshot_no_background_updated;
}
void OAIPlayer::setUsaTodayHeadshotNoBackgroundUpdated(const QString &usa_today_headshot_no_background_updated) {
    m_usa_today_headshot_no_background_updated = usa_today_headshot_no_background_updated;
    m_usa_today_headshot_no_background_updated_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_no_background_updated_Set() const{
    return m_usa_today_headshot_no_background_updated_isSet;
}

bool OAIPlayer::is_usa_today_headshot_no_background_updated_Valid() const{
    return m_usa_today_headshot_no_background_updated_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotNoBackgroundUrl() const {
    return m_usa_today_headshot_no_background_url;
}
void OAIPlayer::setUsaTodayHeadshotNoBackgroundUrl(const QString &usa_today_headshot_no_background_url) {
    m_usa_today_headshot_no_background_url = usa_today_headshot_no_background_url;
    m_usa_today_headshot_no_background_url_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_no_background_url_Set() const{
    return m_usa_today_headshot_no_background_url_isSet;
}

bool OAIPlayer::is_usa_today_headshot_no_background_url_Valid() const{
    return m_usa_today_headshot_no_background_url_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotUpdated() const {
    return m_usa_today_headshot_updated;
}
void OAIPlayer::setUsaTodayHeadshotUpdated(const QString &usa_today_headshot_updated) {
    m_usa_today_headshot_updated = usa_today_headshot_updated;
    m_usa_today_headshot_updated_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_updated_Set() const{
    return m_usa_today_headshot_updated_isSet;
}

bool OAIPlayer::is_usa_today_headshot_updated_Valid() const{
    return m_usa_today_headshot_updated_isValid;
}

QString OAIPlayer::getUsaTodayHeadshotUrl() const {
    return m_usa_today_headshot_url;
}
void OAIPlayer::setUsaTodayHeadshotUrl(const QString &usa_today_headshot_url) {
    m_usa_today_headshot_url = usa_today_headshot_url;
    m_usa_today_headshot_url_isSet = true;
}

bool OAIPlayer::is_usa_today_headshot_url_Set() const{
    return m_usa_today_headshot_url_isSet;
}

bool OAIPlayer::is_usa_today_headshot_url_Valid() const{
    return m_usa_today_headshot_url_isValid;
}

qint32 OAIPlayer::getUsaTodayPlayerId() const {
    return m_usa_today_player_id;
}
void OAIPlayer::setUsaTodayPlayerId(const qint32 &usa_today_player_id) {
    m_usa_today_player_id = usa_today_player_id;
    m_usa_today_player_id_isSet = true;
}

bool OAIPlayer::is_usa_today_player_id_Set() const{
    return m_usa_today_player_id_isSet;
}

bool OAIPlayer::is_usa_today_player_id_Valid() const{
    return m_usa_today_player_id_isValid;
}

qint32 OAIPlayer::getWeight() const {
    return m_weight;
}
void OAIPlayer::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPlayer::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPlayer::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAIPlayer::getXmlTeamPlayerId() const {
    return m_xml_team_player_id;
}
void OAIPlayer::setXmlTeamPlayerId(const qint32 &xml_team_player_id) {
    m_xml_team_player_id = xml_team_player_id;
    m_xml_team_player_id_isSet = true;
}

bool OAIPlayer::is_xml_team_player_id_Set() const{
    return m_xml_team_player_id_isSet;
}

bool OAIPlayer::is_xml_team_player_id_Valid() const{
    return m_xml_team_player_id_isValid;
}

QString OAIPlayer::getYahooName() const {
    return m_yahoo_name;
}
void OAIPlayer::setYahooName(const QString &yahoo_name) {
    m_yahoo_name = yahoo_name;
    m_yahoo_name_isSet = true;
}

bool OAIPlayer::is_yahoo_name_Set() const{
    return m_yahoo_name_isSet;
}

bool OAIPlayer::is_yahoo_name_Valid() const{
    return m_yahoo_name_isValid;
}

qint32 OAIPlayer::getYahooPlayerId() const {
    return m_yahoo_player_id;
}
void OAIPlayer::setYahooPlayerId(const qint32 &yahoo_player_id) {
    m_yahoo_player_id = yahoo_player_id;
    m_yahoo_player_id_isSet = true;
}

bool OAIPlayer::is_yahoo_player_id_Set() const{
    return m_yahoo_player_id_isSet;
}

bool OAIPlayer::is_yahoo_player_id_Valid() const{
    return m_yahoo_player_id_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_draft_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bye_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_draft_pick_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_draft_round_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_draft_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_draft_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_kings_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experience_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_duel_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_alarm_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_draft_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fantasy_position_depth_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_feet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_inches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_body_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_practice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_practice_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injury_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_undrafted_free_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roto_wire_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotoworld_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sport_radar_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sports_direct_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_draft_kings_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_fan_duel_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_game_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_game_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_opponent_position_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_opponent_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upcoming_yahoo_salary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_no_background_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_no_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_headshot_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usa_today_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml_team_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yahoo_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
