/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfsSlatePlayerOwnershipProjection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfsSlatePlayerOwnershipProjection::OAIDfsSlatePlayerOwnershipProjection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfsSlatePlayerOwnershipProjection::OAIDfsSlatePlayerOwnershipProjection() {
    this->initializeModel();
}

OAIDfsSlatePlayerOwnershipProjection::~OAIDfsSlatePlayerOwnershipProjection() {}

void OAIDfsSlatePlayerOwnershipProjection::initializeModel() {

    m_fantasy_defense_player_id_isSet = false;
    m_fantasy_defense_player_id_isValid = false;

    m_is_captain_isSet = false;
    m_is_captain_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_projected_ownership_percentage_isSet = false;
    m_projected_ownership_percentage_isValid = false;

    m_slate_id_isSet = false;
    m_slate_id_isValid = false;
}

void OAIDfsSlatePlayerOwnershipProjection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfsSlatePlayerOwnershipProjection::fromJsonObject(QJsonObject json) {

    m_fantasy_defense_player_id_isValid = ::OpenAPI::fromJsonValue(m_fantasy_defense_player_id, json[QString("FantasyDefensePlayerID")]);
    m_fantasy_defense_player_id_isSet = !json[QString("FantasyDefensePlayerID")].isNull() && m_fantasy_defense_player_id_isValid;

    m_is_captain_isValid = ::OpenAPI::fromJsonValue(m_is_captain, json[QString("IsCaptain")]);
    m_is_captain_isSet = !json[QString("IsCaptain")].isNull() && m_is_captain_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_projected_ownership_percentage_isValid = ::OpenAPI::fromJsonValue(m_projected_ownership_percentage, json[QString("ProjectedOwnershipPercentage")]);
    m_projected_ownership_percentage_isSet = !json[QString("ProjectedOwnershipPercentage")].isNull() && m_projected_ownership_percentage_isValid;

    m_slate_id_isValid = ::OpenAPI::fromJsonValue(m_slate_id, json[QString("SlateID")]);
    m_slate_id_isSet = !json[QString("SlateID")].isNull() && m_slate_id_isValid;
}

QString OAIDfsSlatePlayerOwnershipProjection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfsSlatePlayerOwnershipProjection::asJsonObject() const {
    QJsonObject obj;
    if (m_fantasy_defense_player_id_isSet) {
        obj.insert(QString("FantasyDefensePlayerID"), ::OpenAPI::toJsonValue(m_fantasy_defense_player_id));
    }
    if (m_is_captain_isSet) {
        obj.insert(QString("IsCaptain"), ::OpenAPI::toJsonValue(m_is_captain));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_projected_ownership_percentage_isSet) {
        obj.insert(QString("ProjectedOwnershipPercentage"), ::OpenAPI::toJsonValue(m_projected_ownership_percentage));
    }
    if (m_slate_id_isSet) {
        obj.insert(QString("SlateID"), ::OpenAPI::toJsonValue(m_slate_id));
    }
    return obj;
}

qint32 OAIDfsSlatePlayerOwnershipProjection::getFantasyDefensePlayerId() const {
    return m_fantasy_defense_player_id;
}
void OAIDfsSlatePlayerOwnershipProjection::setFantasyDefensePlayerId(const qint32 &fantasy_defense_player_id) {
    m_fantasy_defense_player_id = fantasy_defense_player_id;
    m_fantasy_defense_player_id_isSet = true;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_fantasy_defense_player_id_Set() const{
    return m_fantasy_defense_player_id_isSet;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_fantasy_defense_player_id_Valid() const{
    return m_fantasy_defense_player_id_isValid;
}

bool OAIDfsSlatePlayerOwnershipProjection::isIsCaptain() const {
    return m_is_captain;
}
void OAIDfsSlatePlayerOwnershipProjection::setIsCaptain(const bool &is_captain) {
    m_is_captain = is_captain;
    m_is_captain_isSet = true;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_is_captain_Set() const{
    return m_is_captain_isSet;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_is_captain_Valid() const{
    return m_is_captain_isValid;
}

qint32 OAIDfsSlatePlayerOwnershipProjection::getPlayerId() const {
    return m_player_id;
}
void OAIDfsSlatePlayerOwnershipProjection::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_player_id_Valid() const{
    return m_player_id_isValid;
}

double OAIDfsSlatePlayerOwnershipProjection::getProjectedOwnershipPercentage() const {
    return m_projected_ownership_percentage;
}
void OAIDfsSlatePlayerOwnershipProjection::setProjectedOwnershipPercentage(const double &projected_ownership_percentage) {
    m_projected_ownership_percentage = projected_ownership_percentage;
    m_projected_ownership_percentage_isSet = true;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_projected_ownership_percentage_Set() const{
    return m_projected_ownership_percentage_isSet;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_projected_ownership_percentage_Valid() const{
    return m_projected_ownership_percentage_isValid;
}

qint32 OAIDfsSlatePlayerOwnershipProjection::getSlateId() const {
    return m_slate_id;
}
void OAIDfsSlatePlayerOwnershipProjection::setSlateId(const qint32 &slate_id) {
    m_slate_id = slate_id;
    m_slate_id_isSet = true;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_slate_id_Set() const{
    return m_slate_id_isSet;
}

bool OAIDfsSlatePlayerOwnershipProjection::is_slate_id_Valid() const{
    return m_slate_id_isValid;
}

bool OAIDfsSlatePlayerOwnershipProjection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fantasy_defense_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_captain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projected_ownership_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slate_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfsSlatePlayerOwnershipProjection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
