/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_away_team_money_line_isSet = false;
    m_away_team_money_line_isValid = false;

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_forecast_description_isSet = false;
    m_forecast_description_isValid = false;

    m_forecast_temp_high_isSet = false;
    m_forecast_temp_high_isValid = false;

    m_forecast_temp_low_isSet = false;
    m_forecast_temp_low_isValid = false;

    m_forecast_wind_chill_isSet = false;
    m_forecast_wind_chill_isValid = false;

    m_forecast_wind_speed_isSet = false;
    m_forecast_wind_speed_isValid = false;

    m_game_key_isSet = false;
    m_game_key_isValid = false;

    m_geo_lat_isSet = false;
    m_geo_lat_isValid = false;

    m_geo_long_isSet = false;
    m_geo_long_isValid = false;

    m_global_away_team_id_isSet = false;
    m_global_away_team_id_isValid = false;

    m_global_game_id_isSet = false;
    m_global_game_id_isValid = false;

    m_global_home_team_id_isSet = false;
    m_global_home_team_id_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_home_team_money_line_isSet = false;
    m_home_team_money_line_isValid = false;

    m_over_under_isSet = false;
    m_over_under_isValid = false;

    m_point_spread_isSet = false;
    m_point_spread_isValid = false;

    m_score_id_isSet = false;
    m_score_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_stadium_details_isSet = false;
    m_stadium_details_isValid = false;

    m_stadium_id_isSet = false;
    m_stadium_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("AwayTeam")]);
    m_away_team_isSet = !json[QString("AwayTeam")].isNull() && m_away_team_isValid;

    m_away_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_away_team_money_line, json[QString("AwayTeamMoneyLine")]);
    m_away_team_money_line_isSet = !json[QString("AwayTeamMoneyLine")].isNull() && m_away_team_money_line_isValid;

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("Canceled")]);
    m_canceled_isSet = !json[QString("Canceled")].isNull() && m_canceled_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_forecast_description_isValid = ::OpenAPI::fromJsonValue(m_forecast_description, json[QString("ForecastDescription")]);
    m_forecast_description_isSet = !json[QString("ForecastDescription")].isNull() && m_forecast_description_isValid;

    m_forecast_temp_high_isValid = ::OpenAPI::fromJsonValue(m_forecast_temp_high, json[QString("ForecastTempHigh")]);
    m_forecast_temp_high_isSet = !json[QString("ForecastTempHigh")].isNull() && m_forecast_temp_high_isValid;

    m_forecast_temp_low_isValid = ::OpenAPI::fromJsonValue(m_forecast_temp_low, json[QString("ForecastTempLow")]);
    m_forecast_temp_low_isSet = !json[QString("ForecastTempLow")].isNull() && m_forecast_temp_low_isValid;

    m_forecast_wind_chill_isValid = ::OpenAPI::fromJsonValue(m_forecast_wind_chill, json[QString("ForecastWindChill")]);
    m_forecast_wind_chill_isSet = !json[QString("ForecastWindChill")].isNull() && m_forecast_wind_chill_isValid;

    m_forecast_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_forecast_wind_speed, json[QString("ForecastWindSpeed")]);
    m_forecast_wind_speed_isSet = !json[QString("ForecastWindSpeed")].isNull() && m_forecast_wind_speed_isValid;

    m_game_key_isValid = ::OpenAPI::fromJsonValue(m_game_key, json[QString("GameKey")]);
    m_game_key_isSet = !json[QString("GameKey")].isNull() && m_game_key_isValid;

    m_geo_lat_isValid = ::OpenAPI::fromJsonValue(m_geo_lat, json[QString("GeoLat")]);
    m_geo_lat_isSet = !json[QString("GeoLat")].isNull() && m_geo_lat_isValid;

    m_geo_long_isValid = ::OpenAPI::fromJsonValue(m_geo_long, json[QString("GeoLong")]);
    m_geo_long_isSet = !json[QString("GeoLong")].isNull() && m_geo_long_isValid;

    m_global_away_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_away_team_id, json[QString("GlobalAwayTeamID")]);
    m_global_away_team_id_isSet = !json[QString("GlobalAwayTeamID")].isNull() && m_global_away_team_id_isValid;

    m_global_game_id_isValid = ::OpenAPI::fromJsonValue(m_global_game_id, json[QString("GlobalGameID")]);
    m_global_game_id_isSet = !json[QString("GlobalGameID")].isNull() && m_global_game_id_isValid;

    m_global_home_team_id_isValid = ::OpenAPI::fromJsonValue(m_global_home_team_id, json[QString("GlobalHomeTeamID")]);
    m_global_home_team_id_isSet = !json[QString("GlobalHomeTeamID")].isNull() && m_global_home_team_id_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("HomeTeam")]);
    m_home_team_isSet = !json[QString("HomeTeam")].isNull() && m_home_team_isValid;

    m_home_team_money_line_isValid = ::OpenAPI::fromJsonValue(m_home_team_money_line, json[QString("HomeTeamMoneyLine")]);
    m_home_team_money_line_isSet = !json[QString("HomeTeamMoneyLine")].isNull() && m_home_team_money_line_isValid;

    m_over_under_isValid = ::OpenAPI::fromJsonValue(m_over_under, json[QString("OverUnder")]);
    m_over_under_isSet = !json[QString("OverUnder")].isNull() && m_over_under_isValid;

    m_point_spread_isValid = ::OpenAPI::fromJsonValue(m_point_spread, json[QString("PointSpread")]);
    m_point_spread_isSet = !json[QString("PointSpread")].isNull() && m_point_spread_isValid;

    m_score_id_isValid = ::OpenAPI::fromJsonValue(m_score_id, json[QString("ScoreID")]);
    m_score_id_isSet = !json[QString("ScoreID")].isNull() && m_score_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("SeasonType")]);
    m_season_type_isSet = !json[QString("SeasonType")].isNull() && m_season_type_isValid;

    m_stadium_details_isValid = ::OpenAPI::fromJsonValue(m_stadium_details, json[QString("StadiumDetails")]);
    m_stadium_details_isSet = !json[QString("StadiumDetails")].isNull() && m_stadium_details_isValid;

    m_stadium_id_isValid = ::OpenAPI::fromJsonValue(m_stadium_id, json[QString("StadiumID")]);
    m_stadium_id_isSet = !json[QString("StadiumID")].isNull() && m_stadium_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("Week")]);
    m_week_isSet = !json[QString("Week")].isNull() && m_week_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_away_team_isSet) {
        obj.insert(QString("AwayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_away_team_money_line_isSet) {
        obj.insert(QString("AwayTeamMoneyLine"), ::OpenAPI::toJsonValue(m_away_team_money_line));
    }
    if (m_canceled_isSet) {
        obj.insert(QString("Canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_channel_isSet) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_forecast_description_isSet) {
        obj.insert(QString("ForecastDescription"), ::OpenAPI::toJsonValue(m_forecast_description));
    }
    if (m_forecast_temp_high_isSet) {
        obj.insert(QString("ForecastTempHigh"), ::OpenAPI::toJsonValue(m_forecast_temp_high));
    }
    if (m_forecast_temp_low_isSet) {
        obj.insert(QString("ForecastTempLow"), ::OpenAPI::toJsonValue(m_forecast_temp_low));
    }
    if (m_forecast_wind_chill_isSet) {
        obj.insert(QString("ForecastWindChill"), ::OpenAPI::toJsonValue(m_forecast_wind_chill));
    }
    if (m_forecast_wind_speed_isSet) {
        obj.insert(QString("ForecastWindSpeed"), ::OpenAPI::toJsonValue(m_forecast_wind_speed));
    }
    if (m_game_key_isSet) {
        obj.insert(QString("GameKey"), ::OpenAPI::toJsonValue(m_game_key));
    }
    if (m_geo_lat_isSet) {
        obj.insert(QString("GeoLat"), ::OpenAPI::toJsonValue(m_geo_lat));
    }
    if (m_geo_long_isSet) {
        obj.insert(QString("GeoLong"), ::OpenAPI::toJsonValue(m_geo_long));
    }
    if (m_global_away_team_id_isSet) {
        obj.insert(QString("GlobalAwayTeamID"), ::OpenAPI::toJsonValue(m_global_away_team_id));
    }
    if (m_global_game_id_isSet) {
        obj.insert(QString("GlobalGameID"), ::OpenAPI::toJsonValue(m_global_game_id));
    }
    if (m_global_home_team_id_isSet) {
        obj.insert(QString("GlobalHomeTeamID"), ::OpenAPI::toJsonValue(m_global_home_team_id));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("HomeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_home_team_money_line_isSet) {
        obj.insert(QString("HomeTeamMoneyLine"), ::OpenAPI::toJsonValue(m_home_team_money_line));
    }
    if (m_over_under_isSet) {
        obj.insert(QString("OverUnder"), ::OpenAPI::toJsonValue(m_over_under));
    }
    if (m_point_spread_isSet) {
        obj.insert(QString("PointSpread"), ::OpenAPI::toJsonValue(m_point_spread));
    }
    if (m_score_id_isSet) {
        obj.insert(QString("ScoreID"), ::OpenAPI::toJsonValue(m_score_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("SeasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_stadium_details.isSet()) {
        obj.insert(QString("StadiumDetails"), ::OpenAPI::toJsonValue(m_stadium_details));
    }
    if (m_stadium_id_isSet) {
        obj.insert(QString("StadiumID"), ::OpenAPI::toJsonValue(m_stadium_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_week_isSet) {
        obj.insert(QString("Week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAISchedule::getAwayTeam() const {
    return m_away_team;
}
void OAISchedule::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAISchedule::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAISchedule::is_away_team_Valid() const{
    return m_away_team_isValid;
}

qint32 OAISchedule::getAwayTeamMoneyLine() const {
    return m_away_team_money_line;
}
void OAISchedule::setAwayTeamMoneyLine(const qint32 &away_team_money_line) {
    m_away_team_money_line = away_team_money_line;
    m_away_team_money_line_isSet = true;
}

bool OAISchedule::is_away_team_money_line_Set() const{
    return m_away_team_money_line_isSet;
}

bool OAISchedule::is_away_team_money_line_Valid() const{
    return m_away_team_money_line_isValid;
}

bool OAISchedule::isCanceled() const {
    return m_canceled;
}
void OAISchedule::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAISchedule::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAISchedule::is_canceled_Valid() const{
    return m_canceled_isValid;
}

QString OAISchedule::getChannel() const {
    return m_channel;
}
void OAISchedule::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAISchedule::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAISchedule::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAISchedule::getDate() const {
    return m_date;
}
void OAISchedule::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISchedule::is_date_Set() const{
    return m_date_isSet;
}

bool OAISchedule::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISchedule::getDateTime() const {
    return m_date_time;
}
void OAISchedule::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAISchedule::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAISchedule::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAISchedule::getDay() const {
    return m_day;
}
void OAISchedule::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAISchedule::is_day_Set() const{
    return m_day_isSet;
}

bool OAISchedule::is_day_Valid() const{
    return m_day_isValid;
}

QString OAISchedule::getForecastDescription() const {
    return m_forecast_description;
}
void OAISchedule::setForecastDescription(const QString &forecast_description) {
    m_forecast_description = forecast_description;
    m_forecast_description_isSet = true;
}

bool OAISchedule::is_forecast_description_Set() const{
    return m_forecast_description_isSet;
}

bool OAISchedule::is_forecast_description_Valid() const{
    return m_forecast_description_isValid;
}

qint32 OAISchedule::getForecastTempHigh() const {
    return m_forecast_temp_high;
}
void OAISchedule::setForecastTempHigh(const qint32 &forecast_temp_high) {
    m_forecast_temp_high = forecast_temp_high;
    m_forecast_temp_high_isSet = true;
}

bool OAISchedule::is_forecast_temp_high_Set() const{
    return m_forecast_temp_high_isSet;
}

bool OAISchedule::is_forecast_temp_high_Valid() const{
    return m_forecast_temp_high_isValid;
}

qint32 OAISchedule::getForecastTempLow() const {
    return m_forecast_temp_low;
}
void OAISchedule::setForecastTempLow(const qint32 &forecast_temp_low) {
    m_forecast_temp_low = forecast_temp_low;
    m_forecast_temp_low_isSet = true;
}

bool OAISchedule::is_forecast_temp_low_Set() const{
    return m_forecast_temp_low_isSet;
}

bool OAISchedule::is_forecast_temp_low_Valid() const{
    return m_forecast_temp_low_isValid;
}

qint32 OAISchedule::getForecastWindChill() const {
    return m_forecast_wind_chill;
}
void OAISchedule::setForecastWindChill(const qint32 &forecast_wind_chill) {
    m_forecast_wind_chill = forecast_wind_chill;
    m_forecast_wind_chill_isSet = true;
}

bool OAISchedule::is_forecast_wind_chill_Set() const{
    return m_forecast_wind_chill_isSet;
}

bool OAISchedule::is_forecast_wind_chill_Valid() const{
    return m_forecast_wind_chill_isValid;
}

qint32 OAISchedule::getForecastWindSpeed() const {
    return m_forecast_wind_speed;
}
void OAISchedule::setForecastWindSpeed(const qint32 &forecast_wind_speed) {
    m_forecast_wind_speed = forecast_wind_speed;
    m_forecast_wind_speed_isSet = true;
}

bool OAISchedule::is_forecast_wind_speed_Set() const{
    return m_forecast_wind_speed_isSet;
}

bool OAISchedule::is_forecast_wind_speed_Valid() const{
    return m_forecast_wind_speed_isValid;
}

QString OAISchedule::getGameKey() const {
    return m_game_key;
}
void OAISchedule::setGameKey(const QString &game_key) {
    m_game_key = game_key;
    m_game_key_isSet = true;
}

bool OAISchedule::is_game_key_Set() const{
    return m_game_key_isSet;
}

bool OAISchedule::is_game_key_Valid() const{
    return m_game_key_isValid;
}

double OAISchedule::getGeoLat() const {
    return m_geo_lat;
}
void OAISchedule::setGeoLat(const double &geo_lat) {
    m_geo_lat = geo_lat;
    m_geo_lat_isSet = true;
}

bool OAISchedule::is_geo_lat_Set() const{
    return m_geo_lat_isSet;
}

bool OAISchedule::is_geo_lat_Valid() const{
    return m_geo_lat_isValid;
}

double OAISchedule::getGeoLong() const {
    return m_geo_long;
}
void OAISchedule::setGeoLong(const double &geo_long) {
    m_geo_long = geo_long;
    m_geo_long_isSet = true;
}

bool OAISchedule::is_geo_long_Set() const{
    return m_geo_long_isSet;
}

bool OAISchedule::is_geo_long_Valid() const{
    return m_geo_long_isValid;
}

qint32 OAISchedule::getGlobalAwayTeamId() const {
    return m_global_away_team_id;
}
void OAISchedule::setGlobalAwayTeamId(const qint32 &global_away_team_id) {
    m_global_away_team_id = global_away_team_id;
    m_global_away_team_id_isSet = true;
}

bool OAISchedule::is_global_away_team_id_Set() const{
    return m_global_away_team_id_isSet;
}

bool OAISchedule::is_global_away_team_id_Valid() const{
    return m_global_away_team_id_isValid;
}

qint32 OAISchedule::getGlobalGameId() const {
    return m_global_game_id;
}
void OAISchedule::setGlobalGameId(const qint32 &global_game_id) {
    m_global_game_id = global_game_id;
    m_global_game_id_isSet = true;
}

bool OAISchedule::is_global_game_id_Set() const{
    return m_global_game_id_isSet;
}

bool OAISchedule::is_global_game_id_Valid() const{
    return m_global_game_id_isValid;
}

qint32 OAISchedule::getGlobalHomeTeamId() const {
    return m_global_home_team_id;
}
void OAISchedule::setGlobalHomeTeamId(const qint32 &global_home_team_id) {
    m_global_home_team_id = global_home_team_id;
    m_global_home_team_id_isSet = true;
}

bool OAISchedule::is_global_home_team_id_Set() const{
    return m_global_home_team_id_isSet;
}

bool OAISchedule::is_global_home_team_id_Valid() const{
    return m_global_home_team_id_isValid;
}

QString OAISchedule::getHomeTeam() const {
    return m_home_team;
}
void OAISchedule::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAISchedule::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAISchedule::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAISchedule::getHomeTeamMoneyLine() const {
    return m_home_team_money_line;
}
void OAISchedule::setHomeTeamMoneyLine(const qint32 &home_team_money_line) {
    m_home_team_money_line = home_team_money_line;
    m_home_team_money_line_isSet = true;
}

bool OAISchedule::is_home_team_money_line_Set() const{
    return m_home_team_money_line_isSet;
}

bool OAISchedule::is_home_team_money_line_Valid() const{
    return m_home_team_money_line_isValid;
}

double OAISchedule::getOverUnder() const {
    return m_over_under;
}
void OAISchedule::setOverUnder(const double &over_under) {
    m_over_under = over_under;
    m_over_under_isSet = true;
}

bool OAISchedule::is_over_under_Set() const{
    return m_over_under_isSet;
}

bool OAISchedule::is_over_under_Valid() const{
    return m_over_under_isValid;
}

double OAISchedule::getPointSpread() const {
    return m_point_spread;
}
void OAISchedule::setPointSpread(const double &point_spread) {
    m_point_spread = point_spread;
    m_point_spread_isSet = true;
}

bool OAISchedule::is_point_spread_Set() const{
    return m_point_spread_isSet;
}

bool OAISchedule::is_point_spread_Valid() const{
    return m_point_spread_isValid;
}

qint32 OAISchedule::getScoreId() const {
    return m_score_id;
}
void OAISchedule::setScoreId(const qint32 &score_id) {
    m_score_id = score_id;
    m_score_id_isSet = true;
}

bool OAISchedule::is_score_id_Set() const{
    return m_score_id_isSet;
}

bool OAISchedule::is_score_id_Valid() const{
    return m_score_id_isValid;
}

qint32 OAISchedule::getSeason() const {
    return m_season;
}
void OAISchedule::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAISchedule::is_season_Set() const{
    return m_season_isSet;
}

bool OAISchedule::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAISchedule::getSeasonType() const {
    return m_season_type;
}
void OAISchedule::setSeasonType(const qint32 &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAISchedule::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAISchedule::is_season_type_Valid() const{
    return m_season_type_isValid;
}

OAIStadium OAISchedule::getStadiumDetails() const {
    return m_stadium_details;
}
void OAISchedule::setStadiumDetails(const OAIStadium &stadium_details) {
    m_stadium_details = stadium_details;
    m_stadium_details_isSet = true;
}

bool OAISchedule::is_stadium_details_Set() const{
    return m_stadium_details_isSet;
}

bool OAISchedule::is_stadium_details_Valid() const{
    return m_stadium_details_isValid;
}

qint32 OAISchedule::getStadiumId() const {
    return m_stadium_id;
}
void OAISchedule::setStadiumId(const qint32 &stadium_id) {
    m_stadium_id = stadium_id;
    m_stadium_id_isSet = true;
}

bool OAISchedule::is_stadium_id_Set() const{
    return m_stadium_id_isSet;
}

bool OAISchedule::is_stadium_id_Valid() const{
    return m_stadium_id_isValid;
}

QString OAISchedule::getStatus() const {
    return m_status;
}
void OAISchedule::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISchedule::is_status_Set() const{
    return m_status_isSet;
}

bool OAISchedule::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAISchedule::getWeek() const {
    return m_week;
}
void OAISchedule::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAISchedule::is_week_Set() const{
    return m_week_isSet;
}

bool OAISchedule::is_week_Valid() const{
    return m_week_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_temp_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_temp_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_wind_chill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_away_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_home_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_money_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stadium_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
