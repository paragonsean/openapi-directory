/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DfsSlate from '../model/DfsSlate';
import DfsSlateWithOwnershipProjection from '../model/DfsSlateWithOwnershipProjection';
import FantasyDefenseGameProjection from '../model/FantasyDefenseGameProjection';
import FantasyDefenseSeasonProjection from '../model/FantasyDefenseSeasonProjection';
import Player from '../model/Player';
import PlayerGameProjection from '../model/PlayerGameProjection';
import PlayerSeasonProjection from '../model/PlayerSeasonProjection';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dfsSlateOwnershipProjectionsBySlateid operation.
     * @callback module:api/DefaultApi~dfsSlateOwnershipProjectionsBySlateidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DfsSlateWithOwnershipProjection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slate Ownership Projections by SlateID
     * Slate Ownership Projections for a specific slate. Projections are for GPP format ownership. Will return an empty list if the slate is not yet projected or not a slate we have projections for.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} slateId SlateID of the DFS Slate you wish to get ownership projections for. Will have an empty SlateOwnershipProjections if this slate was not projected
     * @param {module:api/DefaultApi~dfsSlateOwnershipProjectionsBySlateidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DfsSlateWithOwnershipProjection}
     */
    dfsSlateOwnershipProjectionsBySlateid(format, slateId, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlateOwnershipProjectionsBySlateid");
      }
      // verify the required parameter 'slateId' is set
      if (slateId === undefined || slateId === null) {
        throw new Error("Missing the required parameter 'slateId' when calling dfsSlateOwnershipProjectionsBySlateid");
      }

      let pathParams = {
        'format': format,
        'slateId': slateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DfsSlateWithOwnershipProjection;
      return this.apiClient.callApi(
        '/{format}/DfsSlateOwnershipProjectionsBySlateID/{slateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlatesByDate operation.
     * @callback module:api/DefaultApi~dfsSlatesByDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slates by Date
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} date The date of the slates. <br>Examples: <code>2017-SEP-25</code>, <code>2017-10-31</code>.
     * @param {module:api/DefaultApi~dfsSlatesByDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByDate(format, date, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling dfsSlatesByDate");
      }

      let pathParams = {
        'format': format,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByDate/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfsSlatesByWeek operation.
     * @callback module:api/DefaultApi~dfsSlatesByWeekCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DFS Slates by Week
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>
     * @param {module:api/DefaultApi~dfsSlatesByWeekCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlate>}
     */
    dfsSlatesByWeek(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling dfsSlatesByWeek");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling dfsSlatesByWeek");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling dfsSlatesByWeek");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlate];
      return this.apiClient.callApi(
        '/{format}/DfsSlatesByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries operation.
     * @callback module:api/DefaultApi~idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerGameProjection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IDP Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>14257</code>.
     * @param {module:api/DefaultApi~idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerGameProjection}
     */
    idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(format, season, week, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerGameProjection;
      return this.apiClient.callApi(
        '/{format}/IdpPlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries operation.
     * @callback module:api/DefaultApi~idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IDP Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(format, season, week, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/IdpPlayerGameProjectionStatsByTeam/{season}/{week}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries operation.
     * @callback module:api/DefaultApi~idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IDP Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/IdpPlayerGameProjectionStatsByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the injuredPlayers operation.
     * @callback module:api/DefaultApi~injuredPlayersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Injured Players
     * This endpoint provides all currently injured NFL players, along with injury details.
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~injuredPlayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    injuredPlayers(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling injuredPlayers");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/{format}/InjuredPlayers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedFantasyDefenseGameStatsWDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedFantasyDefenseGameStatsWDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FantasyDefenseGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Fantasy Defense Game Stats (w/ DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~projectedFantasyDefenseGameStatsWDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FantasyDefenseGameProjection>}
     */
    projectedFantasyDefenseGameStatsWDfsSalaries(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedFantasyDefenseGameStatsWDfsSalaries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedFantasyDefenseGameStatsWDfsSalaries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling projectedFantasyDefenseGameStatsWDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FantasyDefenseGameProjection];
      return this.apiClient.callApi(
        '/{format}/FantasyDefenseProjectionsByGame/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedFantasyDefenseSeasonStatsWAdp operation.
     * @callback module:api/DefaultApi~projectedFantasyDefenseSeasonStatsWAdpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FantasyDefenseSeasonProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Fantasy Defense Season Stats (w/ ADP)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~projectedFantasyDefenseSeasonStatsWAdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FantasyDefenseSeasonProjection>}
     */
    projectedFantasyDefenseSeasonStatsWAdp(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedFantasyDefenseSeasonStatsWAdp");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedFantasyDefenseSeasonStatsWAdp");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FantasyDefenseSeasonProjection];
      return this.apiClient.callApi(
        '/{format}/FantasyDefenseProjectionsBySeason/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerGameProjection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>14257</code>.
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerGameProjection}
     */
    projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(format, season, week, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerGameProjection;
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(format, season, week, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByTeam/{season}/{week}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries operation.
     * @callback module:api/DefaultApi~projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGameProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} week            Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.           Example: <code>1</code>         
     * @param {module:api/DefaultApi~projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGameProjection>}
     */
    projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(format, season, week, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'week': week
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGameProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerGameProjectionStatsByWeek/{season}/{week}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerSeasonStatsByPlayerWAdp operation.
     * @callback module:api/DefaultApi~projectedPlayerSeasonStatsByPlayerWAdpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayerSeasonProjection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Season Stats by Player (w/ ADP)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} playerid Each NFL player has a unique ID assigned by FantasyData. Player IDs can be determined by pulling player related data. Example:<code>14257</code>.
     * @param {module:api/DefaultApi~projectedPlayerSeasonStatsByPlayerWAdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayerSeasonProjection}
     */
    projectedPlayerSeasonStatsByPlayerWAdp(format, season, playerid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerSeasonStatsByPlayerWAdp");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerSeasonStatsByPlayerWAdp");
      }
      // verify the required parameter 'playerid' is set
      if (playerid === undefined || playerid === null) {
        throw new Error("Missing the required parameter 'playerid' when calling projectedPlayerSeasonStatsByPlayerWAdp");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'playerid': playerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerSeasonProjection;
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonProjectionStatsByPlayerID/{season}/{playerid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerSeasonStatsByTeamWAdp operation.
     * @callback module:api/DefaultApi~projectedPlayerSeasonStatsByTeamWAdpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Season Stats by Team (w/ ADP)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {String} team Abbreviation of the team. Example: <code>WAS</code>.
     * @param {module:api/DefaultApi~projectedPlayerSeasonStatsByTeamWAdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonProjection>}
     */
    projectedPlayerSeasonStatsByTeamWAdp(format, season, team, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerSeasonStatsByTeamWAdp");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerSeasonStatsByTeamWAdp");
      }
      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling projectedPlayerSeasonStatsByTeamWAdp");
      }

      let pathParams = {
        'format': format,
        'season': season,
        'team': team
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectedPlayerSeasonStatsWAdp operation.
     * @callback module:api/DefaultApi~projectedPlayerSeasonStatsWAdpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projected Player Season Stats (w/ ADP)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season and the season type. If no season type is provided, then the default is regular season.           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.         
     * @param {module:api/DefaultApi~projectedPlayerSeasonStatsWAdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonProjection>}
     */
    projectedPlayerSeasonStatsWAdp(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling projectedPlayerSeasonStatsWAdp");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling projectedPlayerSeasonStatsWAdp");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonProjection];
      return this.apiClient.callApi(
        '/{format}/PlayerSeasonProjectionStats/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upcomingDfsSlateOwnershipProjections operation.
     * @callback module:api/DefaultApi~upcomingDfsSlateOwnershipProjectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DfsSlateWithOwnershipProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upcoming DFS Slate Ownership Projections
     * Grabs DFS Slates which have not yet started for which we have DFS Ownership projections. 
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~upcomingDfsSlateOwnershipProjectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DfsSlateWithOwnershipProjection>}
     */
    upcomingDfsSlateOwnershipProjections(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling upcomingDfsSlateOwnershipProjections");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DfsSlateWithOwnershipProjection];
      return this.apiClient.callApi(
        '/{format}/UpcomingDfsSlateOwnershipProjections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
