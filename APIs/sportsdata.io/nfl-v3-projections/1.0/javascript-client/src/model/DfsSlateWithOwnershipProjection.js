/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DfsSlatePlayerOwnershipProjection from './DfsSlatePlayerOwnershipProjection';

/**
 * The DfsSlateWithOwnershipProjection model module.
 * @module model/DfsSlateWithOwnershipProjection
 * @version 1.0
 */
class DfsSlateWithOwnershipProjection {
    /**
     * Constructs a new <code>DfsSlateWithOwnershipProjection</code>.
     * @alias module:model/DfsSlateWithOwnershipProjection
     */
    constructor() { 
        
        DfsSlateWithOwnershipProjection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DfsSlateWithOwnershipProjection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DfsSlateWithOwnershipProjection} obj Optional instance to populate.
     * @return {module:model/DfsSlateWithOwnershipProjection} The populated <code>DfsSlateWithOwnershipProjection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DfsSlateWithOwnershipProjection();

            if (data.hasOwnProperty('Operator')) {
                obj['Operator'] = ApiClient.convertToType(data['Operator'], 'String');
            }
            if (data.hasOwnProperty('OperatorDay')) {
                obj['OperatorDay'] = ApiClient.convertToType(data['OperatorDay'], 'String');
            }
            if (data.hasOwnProperty('OperatorName')) {
                obj['OperatorName'] = ApiClient.convertToType(data['OperatorName'], 'String');
            }
            if (data.hasOwnProperty('OperatorSlateID')) {
                obj['OperatorSlateID'] = ApiClient.convertToType(data['OperatorSlateID'], 'Number');
            }
            if (data.hasOwnProperty('OperatorStartTime')) {
                obj['OperatorStartTime'] = ApiClient.convertToType(data['OperatorStartTime'], 'String');
            }
            if (data.hasOwnProperty('SlateID')) {
                obj['SlateID'] = ApiClient.convertToType(data['SlateID'], 'Number');
            }
            if (data.hasOwnProperty('SlateOwnershipProjections')) {
                obj['SlateOwnershipProjections'] = ApiClient.convertToType(data['SlateOwnershipProjections'], [DfsSlatePlayerOwnershipProjection]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DfsSlateWithOwnershipProjection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DfsSlateWithOwnershipProjection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Operator'] && !(typeof data['Operator'] === 'string' || data['Operator'] instanceof String)) {
            throw new Error("Expected the field `Operator` to be a primitive type in the JSON string but got " + data['Operator']);
        }
        // ensure the json data is a string
        if (data['OperatorDay'] && !(typeof data['OperatorDay'] === 'string' || data['OperatorDay'] instanceof String)) {
            throw new Error("Expected the field `OperatorDay` to be a primitive type in the JSON string but got " + data['OperatorDay']);
        }
        // ensure the json data is a string
        if (data['OperatorName'] && !(typeof data['OperatorName'] === 'string' || data['OperatorName'] instanceof String)) {
            throw new Error("Expected the field `OperatorName` to be a primitive type in the JSON string but got " + data['OperatorName']);
        }
        // ensure the json data is a string
        if (data['OperatorStartTime'] && !(typeof data['OperatorStartTime'] === 'string' || data['OperatorStartTime'] instanceof String)) {
            throw new Error("Expected the field `OperatorStartTime` to be a primitive type in the JSON string but got " + data['OperatorStartTime']);
        }
        if (data['SlateOwnershipProjections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SlateOwnershipProjections'])) {
                throw new Error("Expected the field `SlateOwnershipProjections` to be an array in the JSON data but got " + data['SlateOwnershipProjections']);
            }
            // validate the optional field `SlateOwnershipProjections` (array)
            for (const item of data['SlateOwnershipProjections']) {
                DfsSlatePlayerOwnershipProjection.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} Operator
 */
DfsSlateWithOwnershipProjection.prototype['Operator'] = undefined;

/**
 * @member {String} OperatorDay
 */
DfsSlateWithOwnershipProjection.prototype['OperatorDay'] = undefined;

/**
 * @member {String} OperatorName
 */
DfsSlateWithOwnershipProjection.prototype['OperatorName'] = undefined;

/**
 * @member {Number} OperatorSlateID
 */
DfsSlateWithOwnershipProjection.prototype['OperatorSlateID'] = undefined;

/**
 * @member {String} OperatorStartTime
 */
DfsSlateWithOwnershipProjection.prototype['OperatorStartTime'] = undefined;

/**
 * @member {Number} SlateID
 */
DfsSlateWithOwnershipProjection.prototype['SlateID'] = undefined;

/**
 * @member {Array.<module:model/DfsSlatePlayerOwnershipProjection>} SlateOwnershipProjections
 */
DfsSlateWithOwnershipProjection.prototype['SlateOwnershipProjections'] = undefined;






export default DfsSlateWithOwnershipProjection;

