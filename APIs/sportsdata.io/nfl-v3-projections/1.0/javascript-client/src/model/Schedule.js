/**
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Stadium from './Stadium';

/**
 * The Schedule model module.
 * @module model/Schedule
 * @version 1.0
 */
class Schedule {
    /**
     * Constructs a new <code>Schedule</code>.
     * @alias module:model/Schedule
     */
    constructor() { 
        
        Schedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Schedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schedule} obj Optional instance to populate.
     * @return {module:model/Schedule} The populated <code>Schedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schedule();

            if (data.hasOwnProperty('AwayTeam')) {
                obj['AwayTeam'] = ApiClient.convertToType(data['AwayTeam'], 'String');
            }
            if (data.hasOwnProperty('AwayTeamMoneyLine')) {
                obj['AwayTeamMoneyLine'] = ApiClient.convertToType(data['AwayTeamMoneyLine'], 'Number');
            }
            if (data.hasOwnProperty('Canceled')) {
                obj['Canceled'] = ApiClient.convertToType(data['Canceled'], 'Boolean');
            }
            if (data.hasOwnProperty('Channel')) {
                obj['Channel'] = ApiClient.convertToType(data['Channel'], 'String');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('DateTime')) {
                obj['DateTime'] = ApiClient.convertToType(data['DateTime'], 'String');
            }
            if (data.hasOwnProperty('Day')) {
                obj['Day'] = ApiClient.convertToType(data['Day'], 'String');
            }
            if (data.hasOwnProperty('ForecastDescription')) {
                obj['ForecastDescription'] = ApiClient.convertToType(data['ForecastDescription'], 'String');
            }
            if (data.hasOwnProperty('ForecastTempHigh')) {
                obj['ForecastTempHigh'] = ApiClient.convertToType(data['ForecastTempHigh'], 'Number');
            }
            if (data.hasOwnProperty('ForecastTempLow')) {
                obj['ForecastTempLow'] = ApiClient.convertToType(data['ForecastTempLow'], 'Number');
            }
            if (data.hasOwnProperty('ForecastWindChill')) {
                obj['ForecastWindChill'] = ApiClient.convertToType(data['ForecastWindChill'], 'Number');
            }
            if (data.hasOwnProperty('ForecastWindSpeed')) {
                obj['ForecastWindSpeed'] = ApiClient.convertToType(data['ForecastWindSpeed'], 'Number');
            }
            if (data.hasOwnProperty('GameKey')) {
                obj['GameKey'] = ApiClient.convertToType(data['GameKey'], 'String');
            }
            if (data.hasOwnProperty('GeoLat')) {
                obj['GeoLat'] = ApiClient.convertToType(data['GeoLat'], 'Number');
            }
            if (data.hasOwnProperty('GeoLong')) {
                obj['GeoLong'] = ApiClient.convertToType(data['GeoLong'], 'Number');
            }
            if (data.hasOwnProperty('GlobalAwayTeamID')) {
                obj['GlobalAwayTeamID'] = ApiClient.convertToType(data['GlobalAwayTeamID'], 'Number');
            }
            if (data.hasOwnProperty('GlobalGameID')) {
                obj['GlobalGameID'] = ApiClient.convertToType(data['GlobalGameID'], 'Number');
            }
            if (data.hasOwnProperty('GlobalHomeTeamID')) {
                obj['GlobalHomeTeamID'] = ApiClient.convertToType(data['GlobalHomeTeamID'], 'Number');
            }
            if (data.hasOwnProperty('HomeTeam')) {
                obj['HomeTeam'] = ApiClient.convertToType(data['HomeTeam'], 'String');
            }
            if (data.hasOwnProperty('HomeTeamMoneyLine')) {
                obj['HomeTeamMoneyLine'] = ApiClient.convertToType(data['HomeTeamMoneyLine'], 'Number');
            }
            if (data.hasOwnProperty('OverUnder')) {
                obj['OverUnder'] = ApiClient.convertToType(data['OverUnder'], 'Number');
            }
            if (data.hasOwnProperty('PointSpread')) {
                obj['PointSpread'] = ApiClient.convertToType(data['PointSpread'], 'Number');
            }
            if (data.hasOwnProperty('ScoreID')) {
                obj['ScoreID'] = ApiClient.convertToType(data['ScoreID'], 'Number');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('SeasonType')) {
                obj['SeasonType'] = ApiClient.convertToType(data['SeasonType'], 'Number');
            }
            if (data.hasOwnProperty('StadiumDetails')) {
                obj['StadiumDetails'] = Stadium.constructFromObject(data['StadiumDetails']);
            }
            if (data.hasOwnProperty('StadiumID')) {
                obj['StadiumID'] = ApiClient.convertToType(data['StadiumID'], 'Number');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Week')) {
                obj['Week'] = ApiClient.convertToType(data['Week'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AwayTeam'] && !(typeof data['AwayTeam'] === 'string' || data['AwayTeam'] instanceof String)) {
            throw new Error("Expected the field `AwayTeam` to be a primitive type in the JSON string but got " + data['AwayTeam']);
        }
        // ensure the json data is a string
        if (data['Channel'] && !(typeof data['Channel'] === 'string' || data['Channel'] instanceof String)) {
            throw new Error("Expected the field `Channel` to be a primitive type in the JSON string but got " + data['Channel']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['DateTime'] && !(typeof data['DateTime'] === 'string' || data['DateTime'] instanceof String)) {
            throw new Error("Expected the field `DateTime` to be a primitive type in the JSON string but got " + data['DateTime']);
        }
        // ensure the json data is a string
        if (data['Day'] && !(typeof data['Day'] === 'string' || data['Day'] instanceof String)) {
            throw new Error("Expected the field `Day` to be a primitive type in the JSON string but got " + data['Day']);
        }
        // ensure the json data is a string
        if (data['ForecastDescription'] && !(typeof data['ForecastDescription'] === 'string' || data['ForecastDescription'] instanceof String)) {
            throw new Error("Expected the field `ForecastDescription` to be a primitive type in the JSON string but got " + data['ForecastDescription']);
        }
        // ensure the json data is a string
        if (data['GameKey'] && !(typeof data['GameKey'] === 'string' || data['GameKey'] instanceof String)) {
            throw new Error("Expected the field `GameKey` to be a primitive type in the JSON string but got " + data['GameKey']);
        }
        // ensure the json data is a string
        if (data['HomeTeam'] && !(typeof data['HomeTeam'] === 'string' || data['HomeTeam'] instanceof String)) {
            throw new Error("Expected the field `HomeTeam` to be a primitive type in the JSON string but got " + data['HomeTeam']);
        }
        // validate the optional field `StadiumDetails`
        if (data['StadiumDetails']) { // data not null
          Stadium.validateJSON(data['StadiumDetails']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }

        return true;
    }


}



/**
 * @member {String} AwayTeam
 */
Schedule.prototype['AwayTeam'] = undefined;

/**
 * @member {Number} AwayTeamMoneyLine
 */
Schedule.prototype['AwayTeamMoneyLine'] = undefined;

/**
 * @member {Boolean} Canceled
 */
Schedule.prototype['Canceled'] = undefined;

/**
 * @member {String} Channel
 */
Schedule.prototype['Channel'] = undefined;

/**
 * @member {String} Date
 */
Schedule.prototype['Date'] = undefined;

/**
 * @member {String} DateTime
 */
Schedule.prototype['DateTime'] = undefined;

/**
 * @member {String} Day
 */
Schedule.prototype['Day'] = undefined;

/**
 * @member {String} ForecastDescription
 */
Schedule.prototype['ForecastDescription'] = undefined;

/**
 * @member {Number} ForecastTempHigh
 */
Schedule.prototype['ForecastTempHigh'] = undefined;

/**
 * @member {Number} ForecastTempLow
 */
Schedule.prototype['ForecastTempLow'] = undefined;

/**
 * @member {Number} ForecastWindChill
 */
Schedule.prototype['ForecastWindChill'] = undefined;

/**
 * @member {Number} ForecastWindSpeed
 */
Schedule.prototype['ForecastWindSpeed'] = undefined;

/**
 * @member {String} GameKey
 */
Schedule.prototype['GameKey'] = undefined;

/**
 * @member {Number} GeoLat
 */
Schedule.prototype['GeoLat'] = undefined;

/**
 * @member {Number} GeoLong
 */
Schedule.prototype['GeoLong'] = undefined;

/**
 * @member {Number} GlobalAwayTeamID
 */
Schedule.prototype['GlobalAwayTeamID'] = undefined;

/**
 * @member {Number} GlobalGameID
 */
Schedule.prototype['GlobalGameID'] = undefined;

/**
 * @member {Number} GlobalHomeTeamID
 */
Schedule.prototype['GlobalHomeTeamID'] = undefined;

/**
 * @member {String} HomeTeam
 */
Schedule.prototype['HomeTeam'] = undefined;

/**
 * @member {Number} HomeTeamMoneyLine
 */
Schedule.prototype['HomeTeamMoneyLine'] = undefined;

/**
 * @member {Number} OverUnder
 */
Schedule.prototype['OverUnder'] = undefined;

/**
 * @member {Number} PointSpread
 */
Schedule.prototype['PointSpread'] = undefined;

/**
 * @member {Number} ScoreID
 */
Schedule.prototype['ScoreID'] = undefined;

/**
 * @member {Number} Season
 */
Schedule.prototype['Season'] = undefined;

/**
 * @member {Number} SeasonType
 */
Schedule.prototype['SeasonType'] = undefined;

/**
 * @member {module:model/Stadium} StadiumDetails
 */
Schedule.prototype['StadiumDetails'] = undefined;

/**
 * @member {Number} StadiumID
 */
Schedule.prototype['StadiumID'] = undefined;

/**
 * @member {String} Status
 */
Schedule.prototype['Status'] = undefined;

/**
 * @member {Number} Week
 */
Schedule.prototype['Week'] = undefined;






export default Schedule;

