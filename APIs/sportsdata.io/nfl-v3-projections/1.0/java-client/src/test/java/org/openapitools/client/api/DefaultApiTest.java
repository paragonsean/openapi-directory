/*
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DfsSlate;
import org.openapitools.client.model.DfsSlateWithOwnershipProjection;
import org.openapitools.client.model.FantasyDefenseGameProjection;
import org.openapitools.client.model.FantasyDefenseSeasonProjection;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.PlayerGameProjection;
import org.openapitools.client.model.PlayerSeasonProjection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * DFS Slate Ownership Projections by SlateID
     *
     * Slate Ownership Projections for a specific slate. Projections are for GPP format ownership. Will return an empty list if the slate is not yet projected or not a slate we have projections for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfsSlateOwnershipProjectionsBySlateidTest() throws ApiException {
        String format = null;
        String slateId = null;
        DfsSlateWithOwnershipProjection response = api.dfsSlateOwnershipProjectionsBySlateid(format, slateId);
        // TODO: test validations
    }

    /**
     * DFS Slates by Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfsSlatesByDateTest() throws ApiException {
        String format = null;
        String date = null;
        List<DfsSlate> response = api.dfsSlatesByDate(format, date);
        // TODO: test validations
    }

    /**
     * DFS Slates by Week
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfsSlatesByWeekTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<DfsSlate> response = api.dfsSlatesByWeek(format, season, week);
        // TODO: test validations
    }

    /**
     * IDP Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String playerid = null;
        PlayerGameProjection response = api.idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(format, season, week, playerid);
        // TODO: test validations
    }

    /**
     * IDP Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String team = null;
        List<PlayerGameProjection> response = api.idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(format, season, week, team);
        // TODO: test validations
    }

    /**
     * IDP Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<PlayerGameProjection> response = api.idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(format, season, week);
        // TODO: test validations
    }

    /**
     * Injured Players
     *
     * This endpoint provides all currently injured NFL players, along with injury details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void injuredPlayersTest() throws ApiException {
        String format = null;
        List<Player> response = api.injuredPlayers(format);
        // TODO: test validations
    }

    /**
     * Projected Fantasy Defense Game Stats (w/ DFS Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedFantasyDefenseGameStatsWDfsSalariesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<FantasyDefenseGameProjection> response = api.projectedFantasyDefenseGameStatsWDfsSalaries(format, season, week);
        // TODO: test validations
    }

    /**
     * Projected Fantasy Defense Season Stats (w/ ADP)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedFantasyDefenseSeasonStatsWAdpTest() throws ApiException {
        String format = null;
        String season = null;
        List<FantasyDefenseSeasonProjection> response = api.projectedFantasyDefenseSeasonStatsWAdp(format, season);
        // TODO: test validations
    }

    /**
     * Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String playerid = null;
        PlayerGameProjection response = api.projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(format, season, week, playerid);
        // TODO: test validations
    }

    /**
     * Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        String team = null;
        List<PlayerGameProjection> response = api.projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(format, season, week, team);
        // TODO: test validations
    }

    /**
     * Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesTest() throws ApiException {
        String format = null;
        String season = null;
        String week = null;
        List<PlayerGameProjection> response = api.projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(format, season, week);
        // TODO: test validations
    }

    /**
     * Projected Player Season Stats by Player (w/ ADP)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedPlayerSeasonStatsByPlayerWAdpTest() throws ApiException {
        String format = null;
        String season = null;
        String playerid = null;
        PlayerSeasonProjection response = api.projectedPlayerSeasonStatsByPlayerWAdp(format, season, playerid);
        // TODO: test validations
    }

    /**
     * Projected Player Season Stats by Team (w/ ADP)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedPlayerSeasonStatsByTeamWAdpTest() throws ApiException {
        String format = null;
        String season = null;
        String team = null;
        List<PlayerSeasonProjection> response = api.projectedPlayerSeasonStatsByTeamWAdp(format, season, team);
        // TODO: test validations
    }

    /**
     * Projected Player Season Stats (w/ ADP)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectedPlayerSeasonStatsWAdpTest() throws ApiException {
        String format = null;
        String season = null;
        List<PlayerSeasonProjection> response = api.projectedPlayerSeasonStatsWAdp(format, season);
        // TODO: test validations
    }

    /**
     * Upcoming DFS Slate Ownership Projections
     *
     * Grabs DFS Slates which have not yet started for which we have DFS Ownership projections. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upcomingDfsSlateOwnershipProjectionsTest() throws ApiException {
        String format = null;
        List<DfsSlateWithOwnershipProjection> response = api.upcomingDfsSlateOwnershipProjections(format);
        // TODO: test validations
    }

}
