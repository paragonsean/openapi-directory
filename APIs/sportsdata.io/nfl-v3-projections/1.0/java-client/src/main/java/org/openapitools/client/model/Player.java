/*
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:29.432938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_AGE = "Age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_AVERAGE_DRAFT_POSITION = "AverageDraftPosition";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DRAFT_POSITION)
  private BigDecimal averageDraftPosition;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "BirthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_BIRTH_DATE_STRING = "BirthDateString";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE_STRING)
  private String birthDateString;

  public static final String SERIALIZED_NAME_BYE_WEEK = "ByeWeek";
  @SerializedName(SERIALIZED_NAME_BYE_WEEK)
  private Integer byeWeek;

  public static final String SERIALIZED_NAME_COLLEGE = "College";
  @SerializedName(SERIALIZED_NAME_COLLEGE)
  private String college;

  public static final String SERIALIZED_NAME_COLLEGE_DRAFT_PICK = "CollegeDraftPick";
  @SerializedName(SERIALIZED_NAME_COLLEGE_DRAFT_PICK)
  private Integer collegeDraftPick;

  public static final String SERIALIZED_NAME_COLLEGE_DRAFT_ROUND = "CollegeDraftRound";
  @SerializedName(SERIALIZED_NAME_COLLEGE_DRAFT_ROUND)
  private Integer collegeDraftRound;

  public static final String SERIALIZED_NAME_COLLEGE_DRAFT_TEAM = "CollegeDraftTeam";
  @SerializedName(SERIALIZED_NAME_COLLEGE_DRAFT_TEAM)
  private String collegeDraftTeam;

  public static final String SERIALIZED_NAME_COLLEGE_DRAFT_YEAR = "CollegeDraftYear";
  @SerializedName(SERIALIZED_NAME_COLLEGE_DRAFT_YEAR)
  private Integer collegeDraftYear;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "CurrentStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private String currentStatus;

  public static final String SERIALIZED_NAME_CURRENT_TEAM = "CurrentTeam";
  @SerializedName(SERIALIZED_NAME_CURRENT_TEAM)
  private String currentTeam;

  public static final String SERIALIZED_NAME_DECLARED_INACTIVE = "DeclaredInactive";
  @SerializedName(SERIALIZED_NAME_DECLARED_INACTIVE)
  private Boolean declaredInactive;

  public static final String SERIALIZED_NAME_DEPTH_DISPLAY_ORDER = "DepthDisplayOrder";
  @SerializedName(SERIALIZED_NAME_DEPTH_DISPLAY_ORDER)
  private Integer depthDisplayOrder;

  public static final String SERIALIZED_NAME_DEPTH_ORDER = "DepthOrder";
  @SerializedName(SERIALIZED_NAME_DEPTH_ORDER)
  private Integer depthOrder;

  public static final String SERIALIZED_NAME_DEPTH_POSITION = "DepthPosition";
  @SerializedName(SERIALIZED_NAME_DEPTH_POSITION)
  private String depthPosition;

  public static final String SERIALIZED_NAME_DEPTH_POSITION_CATEGORY = "DepthPositionCategory";
  @SerializedName(SERIALIZED_NAME_DEPTH_POSITION_CATEGORY)
  private String depthPositionCategory;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_NAME = "DraftKingsName";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_NAME)
  private String draftKingsName;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D = "DraftKingsPlayerID";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D)
  private Integer draftKingsPlayerID;

  public static final String SERIALIZED_NAME_EXPERIENCE = "Experience";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE)
  private Integer experience;

  public static final String SERIALIZED_NAME_EXPERIENCE_STRING = "ExperienceString";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE_STRING)
  private String experienceString;

  public static final String SERIALIZED_NAME_FAN_DUEL_NAME = "FanDuelName";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_NAME)
  private String fanDuelName;

  public static final String SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D = "FanDuelPlayerID";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D)
  private Integer fanDuelPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D = "FantasyAlarmPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D)
  private Integer fantasyAlarmPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_NAME = "FantasyDraftName";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_NAME)
  private String fantasyDraftName;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D = "FantasyDraftPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D)
  private Integer fantasyDraftPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_POSITION = "FantasyPosition";
  @SerializedName(SERIALIZED_NAME_FANTASY_POSITION)
  private String fantasyPosition;

  public static final String SERIALIZED_NAME_FANTASY_POSITION_DEPTH_ORDER = "FantasyPositionDepthOrder";
  @SerializedName(SERIALIZED_NAME_FANTASY_POSITION_DEPTH_ORDER)
  private Integer fantasyPositionDepthOrder;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private String height;

  public static final String SERIALIZED_NAME_HEIGHT_FEET = "HeightFeet";
  @SerializedName(SERIALIZED_NAME_HEIGHT_FEET)
  private Integer heightFeet;

  public static final String SERIALIZED_NAME_HEIGHT_INCHES = "HeightInches";
  @SerializedName(SERIALIZED_NAME_HEIGHT_INCHES)
  private Integer heightInches;

  public static final String SERIALIZED_NAME_INJURY_BODY_PART = "InjuryBodyPart";
  @SerializedName(SERIALIZED_NAME_INJURY_BODY_PART)
  private String injuryBodyPart;

  public static final String SERIALIZED_NAME_INJURY_NOTES = "InjuryNotes";
  @SerializedName(SERIALIZED_NAME_INJURY_NOTES)
  private String injuryNotes;

  public static final String SERIALIZED_NAME_INJURY_PRACTICE = "InjuryPractice";
  @SerializedName(SERIALIZED_NAME_INJURY_PRACTICE)
  private String injuryPractice;

  public static final String SERIALIZED_NAME_INJURY_PRACTICE_DESCRIPTION = "InjuryPracticeDescription";
  @SerializedName(SERIALIZED_NAME_INJURY_PRACTICE_DESCRIPTION)
  private String injuryPracticeDescription;

  public static final String SERIALIZED_NAME_INJURY_START_DATE = "InjuryStartDate";
  @SerializedName(SERIALIZED_NAME_INJURY_START_DATE)
  private String injuryStartDate;

  public static final String SERIALIZED_NAME_INJURY_STATUS = "InjuryStatus";
  @SerializedName(SERIALIZED_NAME_INJURY_STATUS)
  private String injuryStatus;

  public static final String SERIALIZED_NAME_IS_UNDRAFTED_FREE_AGENT = "IsUndraftedFreeAgent";
  @SerializedName(SERIALIZED_NAME_IS_UNDRAFTED_FREE_AGENT)
  private Boolean isUndraftedFreeAgent;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PHOTO_URL = "PhotoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POSITION_CATEGORY = "PositionCategory";
  @SerializedName(SERIALIZED_NAME_POSITION_CATEGORY)
  private String positionCategory;

  public static final String SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D = "RotoWirePlayerID";
  @SerializedName(SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D)
  private Integer rotoWirePlayerID;

  public static final String SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D = "RotoworldPlayerID";
  @SerializedName(SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D)
  private Integer rotoworldPlayerID;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D = "SportRadarPlayerID";
  @SerializedName(SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D)
  private String sportRadarPlayerID;

  public static final String SERIALIZED_NAME_SPORTS_DIRECT_PLAYER_I_D = "SportsDirectPlayerID";
  @SerializedName(SERIALIZED_NAME_SPORTS_DIRECT_PLAYER_I_D)
  private Integer sportsDirectPlayerID;

  public static final String SERIALIZED_NAME_STATS_PLAYER_I_D = "StatsPlayerID";
  @SerializedName(SERIALIZED_NAME_STATS_PLAYER_I_D)
  private Integer statsPlayerID;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_UPCOMING_DRAFT_KINGS_SALARY = "UpcomingDraftKingsSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_DRAFT_KINGS_SALARY)
  private Integer upcomingDraftKingsSalary;

  public static final String SERIALIZED_NAME_UPCOMING_FAN_DUEL_SALARY = "UpcomingFanDuelSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_FAN_DUEL_SALARY)
  private Integer upcomingFanDuelSalary;

  public static final String SERIALIZED_NAME_UPCOMING_GAME_OPPONENT = "UpcomingGameOpponent";
  @SerializedName(SERIALIZED_NAME_UPCOMING_GAME_OPPONENT)
  private String upcomingGameOpponent;

  public static final String SERIALIZED_NAME_UPCOMING_GAME_WEEK = "UpcomingGameWeek";
  @SerializedName(SERIALIZED_NAME_UPCOMING_GAME_WEEK)
  private Integer upcomingGameWeek;

  public static final String SERIALIZED_NAME_UPCOMING_OPPONENT_POSITION_RANK = "UpcomingOpponentPositionRank";
  @SerializedName(SERIALIZED_NAME_UPCOMING_OPPONENT_POSITION_RANK)
  private Integer upcomingOpponentPositionRank;

  public static final String SERIALIZED_NAME_UPCOMING_OPPONENT_RANK = "UpcomingOpponentRank";
  @SerializedName(SERIALIZED_NAME_UPCOMING_OPPONENT_RANK)
  private Integer upcomingOpponentRank;

  public static final String SERIALIZED_NAME_UPCOMING_SALARY = "UpcomingSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_SALARY)
  private Integer upcomingSalary;

  public static final String SERIALIZED_NAME_UPCOMING_YAHOO_SALARY = "UpcomingYahooSalary";
  @SerializedName(SERIALIZED_NAME_UPCOMING_YAHOO_SALARY)
  private Integer upcomingYahooSalary;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_UPDATED = "UsaTodayHeadshotNoBackgroundUpdated";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_UPDATED)
  private String usaTodayHeadshotNoBackgroundUpdated;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_URL = "UsaTodayHeadshotNoBackgroundUrl";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_URL)
  private String usaTodayHeadshotNoBackgroundUrl;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_UPDATED = "UsaTodayHeadshotUpdated";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_UPDATED)
  private String usaTodayHeadshotUpdated;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_URL = "UsaTodayHeadshotUrl";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_URL)
  private String usaTodayHeadshotUrl;

  public static final String SERIALIZED_NAME_USA_TODAY_PLAYER_I_D = "UsaTodayPlayerID";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_PLAYER_I_D)
  private Integer usaTodayPlayerID;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_XML_TEAM_PLAYER_I_D = "XmlTeamPlayerID";
  @SerializedName(SERIALIZED_NAME_XML_TEAM_PLAYER_I_D)
  private Integer xmlTeamPlayerID;

  public static final String SERIALIZED_NAME_YAHOO_NAME = "YahooName";
  @SerializedName(SERIALIZED_NAME_YAHOO_NAME)
  private String yahooName;

  public static final String SERIALIZED_NAME_YAHOO_PLAYER_I_D = "YahooPlayerID";
  @SerializedName(SERIALIZED_NAME_YAHOO_PLAYER_I_D)
  private Integer yahooPlayerID;

  public Player() {
  }

  public Player active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Player age(Integer age) {
    this.age = age;
    return this;
  }

  /**
   * Get age
   * @return age
   */
  @javax.annotation.Nullable
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }


  public Player averageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
    return this;
  }

  /**
   * Get averageDraftPosition
   * @return averageDraftPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageDraftPosition() {
    return averageDraftPosition;
  }

  public void setAverageDraftPosition(BigDecimal averageDraftPosition) {
    this.averageDraftPosition = averageDraftPosition;
  }


  public Player birthDate(String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  public Player birthDateString(String birthDateString) {
    this.birthDateString = birthDateString;
    return this;
  }

  /**
   * Get birthDateString
   * @return birthDateString
   */
  @javax.annotation.Nullable
  public String getBirthDateString() {
    return birthDateString;
  }

  public void setBirthDateString(String birthDateString) {
    this.birthDateString = birthDateString;
  }


  public Player byeWeek(Integer byeWeek) {
    this.byeWeek = byeWeek;
    return this;
  }

  /**
   * Get byeWeek
   * @return byeWeek
   */
  @javax.annotation.Nullable
  public Integer getByeWeek() {
    return byeWeek;
  }

  public void setByeWeek(Integer byeWeek) {
    this.byeWeek = byeWeek;
  }


  public Player college(String college) {
    this.college = college;
    return this;
  }

  /**
   * Get college
   * @return college
   */
  @javax.annotation.Nullable
  public String getCollege() {
    return college;
  }

  public void setCollege(String college) {
    this.college = college;
  }


  public Player collegeDraftPick(Integer collegeDraftPick) {
    this.collegeDraftPick = collegeDraftPick;
    return this;
  }

  /**
   * Get collegeDraftPick
   * @return collegeDraftPick
   */
  @javax.annotation.Nullable
  public Integer getCollegeDraftPick() {
    return collegeDraftPick;
  }

  public void setCollegeDraftPick(Integer collegeDraftPick) {
    this.collegeDraftPick = collegeDraftPick;
  }


  public Player collegeDraftRound(Integer collegeDraftRound) {
    this.collegeDraftRound = collegeDraftRound;
    return this;
  }

  /**
   * Get collegeDraftRound
   * @return collegeDraftRound
   */
  @javax.annotation.Nullable
  public Integer getCollegeDraftRound() {
    return collegeDraftRound;
  }

  public void setCollegeDraftRound(Integer collegeDraftRound) {
    this.collegeDraftRound = collegeDraftRound;
  }


  public Player collegeDraftTeam(String collegeDraftTeam) {
    this.collegeDraftTeam = collegeDraftTeam;
    return this;
  }

  /**
   * Get collegeDraftTeam
   * @return collegeDraftTeam
   */
  @javax.annotation.Nullable
  public String getCollegeDraftTeam() {
    return collegeDraftTeam;
  }

  public void setCollegeDraftTeam(String collegeDraftTeam) {
    this.collegeDraftTeam = collegeDraftTeam;
  }


  public Player collegeDraftYear(Integer collegeDraftYear) {
    this.collegeDraftYear = collegeDraftYear;
    return this;
  }

  /**
   * Get collegeDraftYear
   * @return collegeDraftYear
   */
  @javax.annotation.Nullable
  public Integer getCollegeDraftYear() {
    return collegeDraftYear;
  }

  public void setCollegeDraftYear(Integer collegeDraftYear) {
    this.collegeDraftYear = collegeDraftYear;
  }


  public Player currentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  /**
   * Get currentStatus
   * @return currentStatus
   */
  @javax.annotation.Nullable
  public String getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
  }


  public Player currentTeam(String currentTeam) {
    this.currentTeam = currentTeam;
    return this;
  }

  /**
   * Get currentTeam
   * @return currentTeam
   */
  @javax.annotation.Nullable
  public String getCurrentTeam() {
    return currentTeam;
  }

  public void setCurrentTeam(String currentTeam) {
    this.currentTeam = currentTeam;
  }


  public Player declaredInactive(Boolean declaredInactive) {
    this.declaredInactive = declaredInactive;
    return this;
  }

  /**
   * Get declaredInactive
   * @return declaredInactive
   */
  @javax.annotation.Nullable
  public Boolean getDeclaredInactive() {
    return declaredInactive;
  }

  public void setDeclaredInactive(Boolean declaredInactive) {
    this.declaredInactive = declaredInactive;
  }


  public Player depthDisplayOrder(Integer depthDisplayOrder) {
    this.depthDisplayOrder = depthDisplayOrder;
    return this;
  }

  /**
   * Get depthDisplayOrder
   * @return depthDisplayOrder
   */
  @javax.annotation.Nullable
  public Integer getDepthDisplayOrder() {
    return depthDisplayOrder;
  }

  public void setDepthDisplayOrder(Integer depthDisplayOrder) {
    this.depthDisplayOrder = depthDisplayOrder;
  }


  public Player depthOrder(Integer depthOrder) {
    this.depthOrder = depthOrder;
    return this;
  }

  /**
   * Get depthOrder
   * @return depthOrder
   */
  @javax.annotation.Nullable
  public Integer getDepthOrder() {
    return depthOrder;
  }

  public void setDepthOrder(Integer depthOrder) {
    this.depthOrder = depthOrder;
  }


  public Player depthPosition(String depthPosition) {
    this.depthPosition = depthPosition;
    return this;
  }

  /**
   * Get depthPosition
   * @return depthPosition
   */
  @javax.annotation.Nullable
  public String getDepthPosition() {
    return depthPosition;
  }

  public void setDepthPosition(String depthPosition) {
    this.depthPosition = depthPosition;
  }


  public Player depthPositionCategory(String depthPositionCategory) {
    this.depthPositionCategory = depthPositionCategory;
    return this;
  }

  /**
   * Get depthPositionCategory
   * @return depthPositionCategory
   */
  @javax.annotation.Nullable
  public String getDepthPositionCategory() {
    return depthPositionCategory;
  }

  public void setDepthPositionCategory(String depthPositionCategory) {
    this.depthPositionCategory = depthPositionCategory;
  }


  public Player draftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
    return this;
  }

  /**
   * Get draftKingsName
   * @return draftKingsName
   */
  @javax.annotation.Nullable
  public String getDraftKingsName() {
    return draftKingsName;
  }

  public void setDraftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
  }


  public Player draftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
    return this;
  }

  /**
   * Get draftKingsPlayerID
   * @return draftKingsPlayerID
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsPlayerID() {
    return draftKingsPlayerID;
  }

  public void setDraftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
  }


  public Player experience(Integer experience) {
    this.experience = experience;
    return this;
  }

  /**
   * Get experience
   * @return experience
   */
  @javax.annotation.Nullable
  public Integer getExperience() {
    return experience;
  }

  public void setExperience(Integer experience) {
    this.experience = experience;
  }


  public Player experienceString(String experienceString) {
    this.experienceString = experienceString;
    return this;
  }

  /**
   * Get experienceString
   * @return experienceString
   */
  @javax.annotation.Nullable
  public String getExperienceString() {
    return experienceString;
  }

  public void setExperienceString(String experienceString) {
    this.experienceString = experienceString;
  }


  public Player fanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
    return this;
  }

  /**
   * Get fanDuelName
   * @return fanDuelName
   */
  @javax.annotation.Nullable
  public String getFanDuelName() {
    return fanDuelName;
  }

  public void setFanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
  }


  public Player fanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
    return this;
  }

  /**
   * Get fanDuelPlayerID
   * @return fanDuelPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFanDuelPlayerID() {
    return fanDuelPlayerID;
  }

  public void setFanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
  }


  public Player fantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
    return this;
  }

  /**
   * Get fantasyAlarmPlayerID
   * @return fantasyAlarmPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyAlarmPlayerID() {
    return fantasyAlarmPlayerID;
  }

  public void setFantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
  }


  public Player fantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
    return this;
  }

  /**
   * Get fantasyDraftName
   * @return fantasyDraftName
   */
  @javax.annotation.Nullable
  public String getFantasyDraftName() {
    return fantasyDraftName;
  }

  public void setFantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
  }


  public Player fantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
    return this;
  }

  /**
   * Get fantasyDraftPlayerID
   * @return fantasyDraftPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyDraftPlayerID() {
    return fantasyDraftPlayerID;
  }

  public void setFantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
  }


  public Player fantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
    return this;
  }

  /**
   * Get fantasyPosition
   * @return fantasyPosition
   */
  @javax.annotation.Nullable
  public String getFantasyPosition() {
    return fantasyPosition;
  }

  public void setFantasyPosition(String fantasyPosition) {
    this.fantasyPosition = fantasyPosition;
  }


  public Player fantasyPositionDepthOrder(Integer fantasyPositionDepthOrder) {
    this.fantasyPositionDepthOrder = fantasyPositionDepthOrder;
    return this;
  }

  /**
   * Get fantasyPositionDepthOrder
   * @return fantasyPositionDepthOrder
   */
  @javax.annotation.Nullable
  public Integer getFantasyPositionDepthOrder() {
    return fantasyPositionDepthOrder;
  }

  public void setFantasyPositionDepthOrder(Integer fantasyPositionDepthOrder) {
    this.fantasyPositionDepthOrder = fantasyPositionDepthOrder;
  }


  public Player firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Player globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public Player height(String height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }


  public Player heightFeet(Integer heightFeet) {
    this.heightFeet = heightFeet;
    return this;
  }

  /**
   * Get heightFeet
   * @return heightFeet
   */
  @javax.annotation.Nullable
  public Integer getHeightFeet() {
    return heightFeet;
  }

  public void setHeightFeet(Integer heightFeet) {
    this.heightFeet = heightFeet;
  }


  public Player heightInches(Integer heightInches) {
    this.heightInches = heightInches;
    return this;
  }

  /**
   * Get heightInches
   * @return heightInches
   */
  @javax.annotation.Nullable
  public Integer getHeightInches() {
    return heightInches;
  }

  public void setHeightInches(Integer heightInches) {
    this.heightInches = heightInches;
  }


  public Player injuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
    return this;
  }

  /**
   * Get injuryBodyPart
   * @return injuryBodyPart
   */
  @javax.annotation.Nullable
  public String getInjuryBodyPart() {
    return injuryBodyPart;
  }

  public void setInjuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
  }


  public Player injuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
    return this;
  }

  /**
   * Get injuryNotes
   * @return injuryNotes
   */
  @javax.annotation.Nullable
  public String getInjuryNotes() {
    return injuryNotes;
  }

  public void setInjuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
  }


  public Player injuryPractice(String injuryPractice) {
    this.injuryPractice = injuryPractice;
    return this;
  }

  /**
   * Get injuryPractice
   * @return injuryPractice
   */
  @javax.annotation.Nullable
  public String getInjuryPractice() {
    return injuryPractice;
  }

  public void setInjuryPractice(String injuryPractice) {
    this.injuryPractice = injuryPractice;
  }


  public Player injuryPracticeDescription(String injuryPracticeDescription) {
    this.injuryPracticeDescription = injuryPracticeDescription;
    return this;
  }

  /**
   * Get injuryPracticeDescription
   * @return injuryPracticeDescription
   */
  @javax.annotation.Nullable
  public String getInjuryPracticeDescription() {
    return injuryPracticeDescription;
  }

  public void setInjuryPracticeDescription(String injuryPracticeDescription) {
    this.injuryPracticeDescription = injuryPracticeDescription;
  }


  public Player injuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
    return this;
  }

  /**
   * Get injuryStartDate
   * @return injuryStartDate
   */
  @javax.annotation.Nullable
  public String getInjuryStartDate() {
    return injuryStartDate;
  }

  public void setInjuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
  }


  public Player injuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
    return this;
  }

  /**
   * Get injuryStatus
   * @return injuryStatus
   */
  @javax.annotation.Nullable
  public String getInjuryStatus() {
    return injuryStatus;
  }

  public void setInjuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
  }


  public Player isUndraftedFreeAgent(Boolean isUndraftedFreeAgent) {
    this.isUndraftedFreeAgent = isUndraftedFreeAgent;
    return this;
  }

  /**
   * Get isUndraftedFreeAgent
   * @return isUndraftedFreeAgent
   */
  @javax.annotation.Nullable
  public Boolean getIsUndraftedFreeAgent() {
    return isUndraftedFreeAgent;
  }

  public void setIsUndraftedFreeAgent(Boolean isUndraftedFreeAgent) {
    this.isUndraftedFreeAgent = isUndraftedFreeAgent;
  }


  public Player lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Player name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Player number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public Player photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public Player playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Player position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public Player positionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
    return this;
  }

  /**
   * Get positionCategory
   * @return positionCategory
   */
  @javax.annotation.Nullable
  public String getPositionCategory() {
    return positionCategory;
  }

  public void setPositionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
  }


  public Player rotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
    return this;
  }

  /**
   * Get rotoWirePlayerID
   * @return rotoWirePlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoWirePlayerID() {
    return rotoWirePlayerID;
  }

  public void setRotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
  }


  public Player rotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
    return this;
  }

  /**
   * Get rotoworldPlayerID
   * @return rotoworldPlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoworldPlayerID() {
    return rotoworldPlayerID;
  }

  public void setRotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
  }


  public Player shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public Player sportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
    return this;
  }

  /**
   * Get sportRadarPlayerID
   * @return sportRadarPlayerID
   */
  @javax.annotation.Nullable
  public String getSportRadarPlayerID() {
    return sportRadarPlayerID;
  }

  public void setSportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
  }


  public Player sportsDirectPlayerID(Integer sportsDirectPlayerID) {
    this.sportsDirectPlayerID = sportsDirectPlayerID;
    return this;
  }

  /**
   * Get sportsDirectPlayerID
   * @return sportsDirectPlayerID
   */
  @javax.annotation.Nullable
  public Integer getSportsDirectPlayerID() {
    return sportsDirectPlayerID;
  }

  public void setSportsDirectPlayerID(Integer sportsDirectPlayerID) {
    this.sportsDirectPlayerID = sportsDirectPlayerID;
  }


  public Player statsPlayerID(Integer statsPlayerID) {
    this.statsPlayerID = statsPlayerID;
    return this;
  }

  /**
   * Get statsPlayerID
   * @return statsPlayerID
   */
  @javax.annotation.Nullable
  public Integer getStatsPlayerID() {
    return statsPlayerID;
  }

  public void setStatsPlayerID(Integer statsPlayerID) {
    this.statsPlayerID = statsPlayerID;
  }


  public Player status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Player team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Player teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Player upcomingDraftKingsSalary(Integer upcomingDraftKingsSalary) {
    this.upcomingDraftKingsSalary = upcomingDraftKingsSalary;
    return this;
  }

  /**
   * Get upcomingDraftKingsSalary
   * @return upcomingDraftKingsSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingDraftKingsSalary() {
    return upcomingDraftKingsSalary;
  }

  public void setUpcomingDraftKingsSalary(Integer upcomingDraftKingsSalary) {
    this.upcomingDraftKingsSalary = upcomingDraftKingsSalary;
  }


  public Player upcomingFanDuelSalary(Integer upcomingFanDuelSalary) {
    this.upcomingFanDuelSalary = upcomingFanDuelSalary;
    return this;
  }

  /**
   * Get upcomingFanDuelSalary
   * @return upcomingFanDuelSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingFanDuelSalary() {
    return upcomingFanDuelSalary;
  }

  public void setUpcomingFanDuelSalary(Integer upcomingFanDuelSalary) {
    this.upcomingFanDuelSalary = upcomingFanDuelSalary;
  }


  public Player upcomingGameOpponent(String upcomingGameOpponent) {
    this.upcomingGameOpponent = upcomingGameOpponent;
    return this;
  }

  /**
   * Get upcomingGameOpponent
   * @return upcomingGameOpponent
   */
  @javax.annotation.Nullable
  public String getUpcomingGameOpponent() {
    return upcomingGameOpponent;
  }

  public void setUpcomingGameOpponent(String upcomingGameOpponent) {
    this.upcomingGameOpponent = upcomingGameOpponent;
  }


  public Player upcomingGameWeek(Integer upcomingGameWeek) {
    this.upcomingGameWeek = upcomingGameWeek;
    return this;
  }

  /**
   * Get upcomingGameWeek
   * @return upcomingGameWeek
   */
  @javax.annotation.Nullable
  public Integer getUpcomingGameWeek() {
    return upcomingGameWeek;
  }

  public void setUpcomingGameWeek(Integer upcomingGameWeek) {
    this.upcomingGameWeek = upcomingGameWeek;
  }


  public Player upcomingOpponentPositionRank(Integer upcomingOpponentPositionRank) {
    this.upcomingOpponentPositionRank = upcomingOpponentPositionRank;
    return this;
  }

  /**
   * Get upcomingOpponentPositionRank
   * @return upcomingOpponentPositionRank
   */
  @javax.annotation.Nullable
  public Integer getUpcomingOpponentPositionRank() {
    return upcomingOpponentPositionRank;
  }

  public void setUpcomingOpponentPositionRank(Integer upcomingOpponentPositionRank) {
    this.upcomingOpponentPositionRank = upcomingOpponentPositionRank;
  }


  public Player upcomingOpponentRank(Integer upcomingOpponentRank) {
    this.upcomingOpponentRank = upcomingOpponentRank;
    return this;
  }

  /**
   * Get upcomingOpponentRank
   * @return upcomingOpponentRank
   */
  @javax.annotation.Nullable
  public Integer getUpcomingOpponentRank() {
    return upcomingOpponentRank;
  }

  public void setUpcomingOpponentRank(Integer upcomingOpponentRank) {
    this.upcomingOpponentRank = upcomingOpponentRank;
  }


  public Player upcomingSalary(Integer upcomingSalary) {
    this.upcomingSalary = upcomingSalary;
    return this;
  }

  /**
   * Get upcomingSalary
   * @return upcomingSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingSalary() {
    return upcomingSalary;
  }

  public void setUpcomingSalary(Integer upcomingSalary) {
    this.upcomingSalary = upcomingSalary;
  }


  public Player upcomingYahooSalary(Integer upcomingYahooSalary) {
    this.upcomingYahooSalary = upcomingYahooSalary;
    return this;
  }

  /**
   * Get upcomingYahooSalary
   * @return upcomingYahooSalary
   */
  @javax.annotation.Nullable
  public Integer getUpcomingYahooSalary() {
    return upcomingYahooSalary;
  }

  public void setUpcomingYahooSalary(Integer upcomingYahooSalary) {
    this.upcomingYahooSalary = upcomingYahooSalary;
  }


  public Player usaTodayHeadshotNoBackgroundUpdated(String usaTodayHeadshotNoBackgroundUpdated) {
    this.usaTodayHeadshotNoBackgroundUpdated = usaTodayHeadshotNoBackgroundUpdated;
    return this;
  }

  /**
   * Get usaTodayHeadshotNoBackgroundUpdated
   * @return usaTodayHeadshotNoBackgroundUpdated
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotNoBackgroundUpdated() {
    return usaTodayHeadshotNoBackgroundUpdated;
  }

  public void setUsaTodayHeadshotNoBackgroundUpdated(String usaTodayHeadshotNoBackgroundUpdated) {
    this.usaTodayHeadshotNoBackgroundUpdated = usaTodayHeadshotNoBackgroundUpdated;
  }


  public Player usaTodayHeadshotNoBackgroundUrl(String usaTodayHeadshotNoBackgroundUrl) {
    this.usaTodayHeadshotNoBackgroundUrl = usaTodayHeadshotNoBackgroundUrl;
    return this;
  }

  /**
   * Get usaTodayHeadshotNoBackgroundUrl
   * @return usaTodayHeadshotNoBackgroundUrl
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotNoBackgroundUrl() {
    return usaTodayHeadshotNoBackgroundUrl;
  }

  public void setUsaTodayHeadshotNoBackgroundUrl(String usaTodayHeadshotNoBackgroundUrl) {
    this.usaTodayHeadshotNoBackgroundUrl = usaTodayHeadshotNoBackgroundUrl;
  }


  public Player usaTodayHeadshotUpdated(String usaTodayHeadshotUpdated) {
    this.usaTodayHeadshotUpdated = usaTodayHeadshotUpdated;
    return this;
  }

  /**
   * Get usaTodayHeadshotUpdated
   * @return usaTodayHeadshotUpdated
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotUpdated() {
    return usaTodayHeadshotUpdated;
  }

  public void setUsaTodayHeadshotUpdated(String usaTodayHeadshotUpdated) {
    this.usaTodayHeadshotUpdated = usaTodayHeadshotUpdated;
  }


  public Player usaTodayHeadshotUrl(String usaTodayHeadshotUrl) {
    this.usaTodayHeadshotUrl = usaTodayHeadshotUrl;
    return this;
  }

  /**
   * Get usaTodayHeadshotUrl
   * @return usaTodayHeadshotUrl
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotUrl() {
    return usaTodayHeadshotUrl;
  }

  public void setUsaTodayHeadshotUrl(String usaTodayHeadshotUrl) {
    this.usaTodayHeadshotUrl = usaTodayHeadshotUrl;
  }


  public Player usaTodayPlayerID(Integer usaTodayPlayerID) {
    this.usaTodayPlayerID = usaTodayPlayerID;
    return this;
  }

  /**
   * Get usaTodayPlayerID
   * @return usaTodayPlayerID
   */
  @javax.annotation.Nullable
  public Integer getUsaTodayPlayerID() {
    return usaTodayPlayerID;
  }

  public void setUsaTodayPlayerID(Integer usaTodayPlayerID) {
    this.usaTodayPlayerID = usaTodayPlayerID;
  }


  public Player weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Player xmlTeamPlayerID(Integer xmlTeamPlayerID) {
    this.xmlTeamPlayerID = xmlTeamPlayerID;
    return this;
  }

  /**
   * Get xmlTeamPlayerID
   * @return xmlTeamPlayerID
   */
  @javax.annotation.Nullable
  public Integer getXmlTeamPlayerID() {
    return xmlTeamPlayerID;
  }

  public void setXmlTeamPlayerID(Integer xmlTeamPlayerID) {
    this.xmlTeamPlayerID = xmlTeamPlayerID;
  }


  public Player yahooName(String yahooName) {
    this.yahooName = yahooName;
    return this;
  }

  /**
   * Get yahooName
   * @return yahooName
   */
  @javax.annotation.Nullable
  public String getYahooName() {
    return yahooName;
  }

  public void setYahooName(String yahooName) {
    this.yahooName = yahooName;
  }


  public Player yahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
    return this;
  }

  /**
   * Get yahooPlayerID
   * @return yahooPlayerID
   */
  @javax.annotation.Nullable
  public Integer getYahooPlayerID() {
    return yahooPlayerID;
  }

  public void setYahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.active, player.active) &&
        Objects.equals(this.age, player.age) &&
        Objects.equals(this.averageDraftPosition, player.averageDraftPosition) &&
        Objects.equals(this.birthDate, player.birthDate) &&
        Objects.equals(this.birthDateString, player.birthDateString) &&
        Objects.equals(this.byeWeek, player.byeWeek) &&
        Objects.equals(this.college, player.college) &&
        Objects.equals(this.collegeDraftPick, player.collegeDraftPick) &&
        Objects.equals(this.collegeDraftRound, player.collegeDraftRound) &&
        Objects.equals(this.collegeDraftTeam, player.collegeDraftTeam) &&
        Objects.equals(this.collegeDraftYear, player.collegeDraftYear) &&
        Objects.equals(this.currentStatus, player.currentStatus) &&
        Objects.equals(this.currentTeam, player.currentTeam) &&
        Objects.equals(this.declaredInactive, player.declaredInactive) &&
        Objects.equals(this.depthDisplayOrder, player.depthDisplayOrder) &&
        Objects.equals(this.depthOrder, player.depthOrder) &&
        Objects.equals(this.depthPosition, player.depthPosition) &&
        Objects.equals(this.depthPositionCategory, player.depthPositionCategory) &&
        Objects.equals(this.draftKingsName, player.draftKingsName) &&
        Objects.equals(this.draftKingsPlayerID, player.draftKingsPlayerID) &&
        Objects.equals(this.experience, player.experience) &&
        Objects.equals(this.experienceString, player.experienceString) &&
        Objects.equals(this.fanDuelName, player.fanDuelName) &&
        Objects.equals(this.fanDuelPlayerID, player.fanDuelPlayerID) &&
        Objects.equals(this.fantasyAlarmPlayerID, player.fantasyAlarmPlayerID) &&
        Objects.equals(this.fantasyDraftName, player.fantasyDraftName) &&
        Objects.equals(this.fantasyDraftPlayerID, player.fantasyDraftPlayerID) &&
        Objects.equals(this.fantasyPosition, player.fantasyPosition) &&
        Objects.equals(this.fantasyPositionDepthOrder, player.fantasyPositionDepthOrder) &&
        Objects.equals(this.firstName, player.firstName) &&
        Objects.equals(this.globalTeamID, player.globalTeamID) &&
        Objects.equals(this.height, player.height) &&
        Objects.equals(this.heightFeet, player.heightFeet) &&
        Objects.equals(this.heightInches, player.heightInches) &&
        Objects.equals(this.injuryBodyPart, player.injuryBodyPart) &&
        Objects.equals(this.injuryNotes, player.injuryNotes) &&
        Objects.equals(this.injuryPractice, player.injuryPractice) &&
        Objects.equals(this.injuryPracticeDescription, player.injuryPracticeDescription) &&
        Objects.equals(this.injuryStartDate, player.injuryStartDate) &&
        Objects.equals(this.injuryStatus, player.injuryStatus) &&
        Objects.equals(this.isUndraftedFreeAgent, player.isUndraftedFreeAgent) &&
        Objects.equals(this.lastName, player.lastName) &&
        Objects.equals(this.name, player.name) &&
        Objects.equals(this.number, player.number) &&
        Objects.equals(this.photoUrl, player.photoUrl) &&
        Objects.equals(this.playerID, player.playerID) &&
        Objects.equals(this.position, player.position) &&
        Objects.equals(this.positionCategory, player.positionCategory) &&
        Objects.equals(this.rotoWirePlayerID, player.rotoWirePlayerID) &&
        Objects.equals(this.rotoworldPlayerID, player.rotoworldPlayerID) &&
        Objects.equals(this.shortName, player.shortName) &&
        Objects.equals(this.sportRadarPlayerID, player.sportRadarPlayerID) &&
        Objects.equals(this.sportsDirectPlayerID, player.sportsDirectPlayerID) &&
        Objects.equals(this.statsPlayerID, player.statsPlayerID) &&
        Objects.equals(this.status, player.status) &&
        Objects.equals(this.team, player.team) &&
        Objects.equals(this.teamID, player.teamID) &&
        Objects.equals(this.upcomingDraftKingsSalary, player.upcomingDraftKingsSalary) &&
        Objects.equals(this.upcomingFanDuelSalary, player.upcomingFanDuelSalary) &&
        Objects.equals(this.upcomingGameOpponent, player.upcomingGameOpponent) &&
        Objects.equals(this.upcomingGameWeek, player.upcomingGameWeek) &&
        Objects.equals(this.upcomingOpponentPositionRank, player.upcomingOpponentPositionRank) &&
        Objects.equals(this.upcomingOpponentRank, player.upcomingOpponentRank) &&
        Objects.equals(this.upcomingSalary, player.upcomingSalary) &&
        Objects.equals(this.upcomingYahooSalary, player.upcomingYahooSalary) &&
        Objects.equals(this.usaTodayHeadshotNoBackgroundUpdated, player.usaTodayHeadshotNoBackgroundUpdated) &&
        Objects.equals(this.usaTodayHeadshotNoBackgroundUrl, player.usaTodayHeadshotNoBackgroundUrl) &&
        Objects.equals(this.usaTodayHeadshotUpdated, player.usaTodayHeadshotUpdated) &&
        Objects.equals(this.usaTodayHeadshotUrl, player.usaTodayHeadshotUrl) &&
        Objects.equals(this.usaTodayPlayerID, player.usaTodayPlayerID) &&
        Objects.equals(this.weight, player.weight) &&
        Objects.equals(this.xmlTeamPlayerID, player.xmlTeamPlayerID) &&
        Objects.equals(this.yahooName, player.yahooName) &&
        Objects.equals(this.yahooPlayerID, player.yahooPlayerID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, age, averageDraftPosition, birthDate, birthDateString, byeWeek, college, collegeDraftPick, collegeDraftRound, collegeDraftTeam, collegeDraftYear, currentStatus, currentTeam, declaredInactive, depthDisplayOrder, depthOrder, depthPosition, depthPositionCategory, draftKingsName, draftKingsPlayerID, experience, experienceString, fanDuelName, fanDuelPlayerID, fantasyAlarmPlayerID, fantasyDraftName, fantasyDraftPlayerID, fantasyPosition, fantasyPositionDepthOrder, firstName, globalTeamID, height, heightFeet, heightInches, injuryBodyPart, injuryNotes, injuryPractice, injuryPracticeDescription, injuryStartDate, injuryStatus, isUndraftedFreeAgent, lastName, name, number, photoUrl, playerID, position, positionCategory, rotoWirePlayerID, rotoworldPlayerID, shortName, sportRadarPlayerID, sportsDirectPlayerID, statsPlayerID, status, team, teamID, upcomingDraftKingsSalary, upcomingFanDuelSalary, upcomingGameOpponent, upcomingGameWeek, upcomingOpponentPositionRank, upcomingOpponentRank, upcomingSalary, upcomingYahooSalary, usaTodayHeadshotNoBackgroundUpdated, usaTodayHeadshotNoBackgroundUrl, usaTodayHeadshotUpdated, usaTodayHeadshotUrl, usaTodayPlayerID, weight, xmlTeamPlayerID, yahooName, yahooPlayerID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    averageDraftPosition: ").append(toIndentedString(averageDraftPosition)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    birthDateString: ").append(toIndentedString(birthDateString)).append("\n");
    sb.append("    byeWeek: ").append(toIndentedString(byeWeek)).append("\n");
    sb.append("    college: ").append(toIndentedString(college)).append("\n");
    sb.append("    collegeDraftPick: ").append(toIndentedString(collegeDraftPick)).append("\n");
    sb.append("    collegeDraftRound: ").append(toIndentedString(collegeDraftRound)).append("\n");
    sb.append("    collegeDraftTeam: ").append(toIndentedString(collegeDraftTeam)).append("\n");
    sb.append("    collegeDraftYear: ").append(toIndentedString(collegeDraftYear)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    currentTeam: ").append(toIndentedString(currentTeam)).append("\n");
    sb.append("    declaredInactive: ").append(toIndentedString(declaredInactive)).append("\n");
    sb.append("    depthDisplayOrder: ").append(toIndentedString(depthDisplayOrder)).append("\n");
    sb.append("    depthOrder: ").append(toIndentedString(depthOrder)).append("\n");
    sb.append("    depthPosition: ").append(toIndentedString(depthPosition)).append("\n");
    sb.append("    depthPositionCategory: ").append(toIndentedString(depthPositionCategory)).append("\n");
    sb.append("    draftKingsName: ").append(toIndentedString(draftKingsName)).append("\n");
    sb.append("    draftKingsPlayerID: ").append(toIndentedString(draftKingsPlayerID)).append("\n");
    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    experienceString: ").append(toIndentedString(experienceString)).append("\n");
    sb.append("    fanDuelName: ").append(toIndentedString(fanDuelName)).append("\n");
    sb.append("    fanDuelPlayerID: ").append(toIndentedString(fanDuelPlayerID)).append("\n");
    sb.append("    fantasyAlarmPlayerID: ").append(toIndentedString(fantasyAlarmPlayerID)).append("\n");
    sb.append("    fantasyDraftName: ").append(toIndentedString(fantasyDraftName)).append("\n");
    sb.append("    fantasyDraftPlayerID: ").append(toIndentedString(fantasyDraftPlayerID)).append("\n");
    sb.append("    fantasyPosition: ").append(toIndentedString(fantasyPosition)).append("\n");
    sb.append("    fantasyPositionDepthOrder: ").append(toIndentedString(fantasyPositionDepthOrder)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    heightFeet: ").append(toIndentedString(heightFeet)).append("\n");
    sb.append("    heightInches: ").append(toIndentedString(heightInches)).append("\n");
    sb.append("    injuryBodyPart: ").append(toIndentedString(injuryBodyPart)).append("\n");
    sb.append("    injuryNotes: ").append(toIndentedString(injuryNotes)).append("\n");
    sb.append("    injuryPractice: ").append(toIndentedString(injuryPractice)).append("\n");
    sb.append("    injuryPracticeDescription: ").append(toIndentedString(injuryPracticeDescription)).append("\n");
    sb.append("    injuryStartDate: ").append(toIndentedString(injuryStartDate)).append("\n");
    sb.append("    injuryStatus: ").append(toIndentedString(injuryStatus)).append("\n");
    sb.append("    isUndraftedFreeAgent: ").append(toIndentedString(isUndraftedFreeAgent)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionCategory: ").append(toIndentedString(positionCategory)).append("\n");
    sb.append("    rotoWirePlayerID: ").append(toIndentedString(rotoWirePlayerID)).append("\n");
    sb.append("    rotoworldPlayerID: ").append(toIndentedString(rotoworldPlayerID)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    sportRadarPlayerID: ").append(toIndentedString(sportRadarPlayerID)).append("\n");
    sb.append("    sportsDirectPlayerID: ").append(toIndentedString(sportsDirectPlayerID)).append("\n");
    sb.append("    statsPlayerID: ").append(toIndentedString(statsPlayerID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    upcomingDraftKingsSalary: ").append(toIndentedString(upcomingDraftKingsSalary)).append("\n");
    sb.append("    upcomingFanDuelSalary: ").append(toIndentedString(upcomingFanDuelSalary)).append("\n");
    sb.append("    upcomingGameOpponent: ").append(toIndentedString(upcomingGameOpponent)).append("\n");
    sb.append("    upcomingGameWeek: ").append(toIndentedString(upcomingGameWeek)).append("\n");
    sb.append("    upcomingOpponentPositionRank: ").append(toIndentedString(upcomingOpponentPositionRank)).append("\n");
    sb.append("    upcomingOpponentRank: ").append(toIndentedString(upcomingOpponentRank)).append("\n");
    sb.append("    upcomingSalary: ").append(toIndentedString(upcomingSalary)).append("\n");
    sb.append("    upcomingYahooSalary: ").append(toIndentedString(upcomingYahooSalary)).append("\n");
    sb.append("    usaTodayHeadshotNoBackgroundUpdated: ").append(toIndentedString(usaTodayHeadshotNoBackgroundUpdated)).append("\n");
    sb.append("    usaTodayHeadshotNoBackgroundUrl: ").append(toIndentedString(usaTodayHeadshotNoBackgroundUrl)).append("\n");
    sb.append("    usaTodayHeadshotUpdated: ").append(toIndentedString(usaTodayHeadshotUpdated)).append("\n");
    sb.append("    usaTodayHeadshotUrl: ").append(toIndentedString(usaTodayHeadshotUrl)).append("\n");
    sb.append("    usaTodayPlayerID: ").append(toIndentedString(usaTodayPlayerID)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    xmlTeamPlayerID: ").append(toIndentedString(xmlTeamPlayerID)).append("\n");
    sb.append("    yahooName: ").append(toIndentedString(yahooName)).append("\n");
    sb.append("    yahooPlayerID: ").append(toIndentedString(yahooPlayerID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Active");
    openapiFields.add("Age");
    openapiFields.add("AverageDraftPosition");
    openapiFields.add("BirthDate");
    openapiFields.add("BirthDateString");
    openapiFields.add("ByeWeek");
    openapiFields.add("College");
    openapiFields.add("CollegeDraftPick");
    openapiFields.add("CollegeDraftRound");
    openapiFields.add("CollegeDraftTeam");
    openapiFields.add("CollegeDraftYear");
    openapiFields.add("CurrentStatus");
    openapiFields.add("CurrentTeam");
    openapiFields.add("DeclaredInactive");
    openapiFields.add("DepthDisplayOrder");
    openapiFields.add("DepthOrder");
    openapiFields.add("DepthPosition");
    openapiFields.add("DepthPositionCategory");
    openapiFields.add("DraftKingsName");
    openapiFields.add("DraftKingsPlayerID");
    openapiFields.add("Experience");
    openapiFields.add("ExperienceString");
    openapiFields.add("FanDuelName");
    openapiFields.add("FanDuelPlayerID");
    openapiFields.add("FantasyAlarmPlayerID");
    openapiFields.add("FantasyDraftName");
    openapiFields.add("FantasyDraftPlayerID");
    openapiFields.add("FantasyPosition");
    openapiFields.add("FantasyPositionDepthOrder");
    openapiFields.add("FirstName");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("Height");
    openapiFields.add("HeightFeet");
    openapiFields.add("HeightInches");
    openapiFields.add("InjuryBodyPart");
    openapiFields.add("InjuryNotes");
    openapiFields.add("InjuryPractice");
    openapiFields.add("InjuryPracticeDescription");
    openapiFields.add("InjuryStartDate");
    openapiFields.add("InjuryStatus");
    openapiFields.add("IsUndraftedFreeAgent");
    openapiFields.add("LastName");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("PhotoUrl");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("PositionCategory");
    openapiFields.add("RotoWirePlayerID");
    openapiFields.add("RotoworldPlayerID");
    openapiFields.add("ShortName");
    openapiFields.add("SportRadarPlayerID");
    openapiFields.add("SportsDirectPlayerID");
    openapiFields.add("StatsPlayerID");
    openapiFields.add("Status");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("UpcomingDraftKingsSalary");
    openapiFields.add("UpcomingFanDuelSalary");
    openapiFields.add("UpcomingGameOpponent");
    openapiFields.add("UpcomingGameWeek");
    openapiFields.add("UpcomingOpponentPositionRank");
    openapiFields.add("UpcomingOpponentRank");
    openapiFields.add("UpcomingSalary");
    openapiFields.add("UpcomingYahooSalary");
    openapiFields.add("UsaTodayHeadshotNoBackgroundUpdated");
    openapiFields.add("UsaTodayHeadshotNoBackgroundUrl");
    openapiFields.add("UsaTodayHeadshotUpdated");
    openapiFields.add("UsaTodayHeadshotUrl");
    openapiFields.add("UsaTodayPlayerID");
    openapiFields.add("Weight");
    openapiFields.add("XmlTeamPlayerID");
    openapiFields.add("YahooName");
    openapiFields.add("YahooPlayerID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BirthDate") != null && !jsonObj.get("BirthDate").isJsonNull()) && !jsonObj.get("BirthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthDate").toString()));
      }
      if ((jsonObj.get("BirthDateString") != null && !jsonObj.get("BirthDateString").isJsonNull()) && !jsonObj.get("BirthDateString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthDateString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthDateString").toString()));
      }
      if ((jsonObj.get("College") != null && !jsonObj.get("College").isJsonNull()) && !jsonObj.get("College").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `College` to be a primitive type in the JSON string but got `%s`", jsonObj.get("College").toString()));
      }
      if ((jsonObj.get("CollegeDraftTeam") != null && !jsonObj.get("CollegeDraftTeam").isJsonNull()) && !jsonObj.get("CollegeDraftTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CollegeDraftTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CollegeDraftTeam").toString()));
      }
      if ((jsonObj.get("CurrentStatus") != null && !jsonObj.get("CurrentStatus").isJsonNull()) && !jsonObj.get("CurrentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentStatus").toString()));
      }
      if ((jsonObj.get("CurrentTeam") != null && !jsonObj.get("CurrentTeam").isJsonNull()) && !jsonObj.get("CurrentTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentTeam").toString()));
      }
      if ((jsonObj.get("DepthPosition") != null && !jsonObj.get("DepthPosition").isJsonNull()) && !jsonObj.get("DepthPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepthPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepthPosition").toString()));
      }
      if ((jsonObj.get("DepthPositionCategory") != null && !jsonObj.get("DepthPositionCategory").isJsonNull()) && !jsonObj.get("DepthPositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepthPositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepthPositionCategory").toString()));
      }
      if ((jsonObj.get("DraftKingsName") != null && !jsonObj.get("DraftKingsName").isJsonNull()) && !jsonObj.get("DraftKingsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DraftKingsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DraftKingsName").toString()));
      }
      if ((jsonObj.get("ExperienceString") != null && !jsonObj.get("ExperienceString").isJsonNull()) && !jsonObj.get("ExperienceString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExperienceString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExperienceString").toString()));
      }
      if ((jsonObj.get("FanDuelName") != null && !jsonObj.get("FanDuelName").isJsonNull()) && !jsonObj.get("FanDuelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FanDuelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FanDuelName").toString()));
      }
      if ((jsonObj.get("FantasyDraftName") != null && !jsonObj.get("FantasyDraftName").isJsonNull()) && !jsonObj.get("FantasyDraftName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyDraftName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyDraftName").toString()));
      }
      if ((jsonObj.get("FantasyPosition") != null && !jsonObj.get("FantasyPosition").isJsonNull()) && !jsonObj.get("FantasyPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyPosition").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("Height") != null && !jsonObj.get("Height").isJsonNull()) && !jsonObj.get("Height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Height").toString()));
      }
      if ((jsonObj.get("InjuryBodyPart") != null && !jsonObj.get("InjuryBodyPart").isJsonNull()) && !jsonObj.get("InjuryBodyPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryBodyPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryBodyPart").toString()));
      }
      if ((jsonObj.get("InjuryNotes") != null && !jsonObj.get("InjuryNotes").isJsonNull()) && !jsonObj.get("InjuryNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryNotes").toString()));
      }
      if ((jsonObj.get("InjuryPractice") != null && !jsonObj.get("InjuryPractice").isJsonNull()) && !jsonObj.get("InjuryPractice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryPractice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryPractice").toString()));
      }
      if ((jsonObj.get("InjuryPracticeDescription") != null && !jsonObj.get("InjuryPracticeDescription").isJsonNull()) && !jsonObj.get("InjuryPracticeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryPracticeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryPracticeDescription").toString()));
      }
      if ((jsonObj.get("InjuryStartDate") != null && !jsonObj.get("InjuryStartDate").isJsonNull()) && !jsonObj.get("InjuryStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStartDate").toString()));
      }
      if ((jsonObj.get("InjuryStatus") != null && !jsonObj.get("InjuryStatus").isJsonNull()) && !jsonObj.get("InjuryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStatus").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PhotoUrl") != null && !jsonObj.get("PhotoUrl").isJsonNull()) && !jsonObj.get("PhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoUrl").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("PositionCategory") != null && !jsonObj.get("PositionCategory").isJsonNull()) && !jsonObj.get("PositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionCategory").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
      if ((jsonObj.get("SportRadarPlayerID") != null && !jsonObj.get("SportRadarPlayerID").isJsonNull()) && !jsonObj.get("SportRadarPlayerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportRadarPlayerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportRadarPlayerID").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("UpcomingGameOpponent") != null && !jsonObj.get("UpcomingGameOpponent").isJsonNull()) && !jsonObj.get("UpcomingGameOpponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpcomingGameOpponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpcomingGameOpponent").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated") != null && !jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotNoBackgroundUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotNoBackgroundUrl") != null && !jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotNoBackgroundUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotUpdated") != null && !jsonObj.get("UsaTodayHeadshotUpdated").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotUpdated").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotUrl") != null && !jsonObj.get("UsaTodayHeadshotUrl").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotUrl").toString()));
      }
      if ((jsonObj.get("YahooName") != null && !jsonObj.get("YahooName").isJsonNull()) && !jsonObj.get("YahooName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YahooName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YahooName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

