/*
 * NFL v3 Projections
 * NFL projected stats API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DfsSlatePlayerOwnershipProjection;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DfsSlateWithOwnershipProjection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:29.432938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DfsSlateWithOwnershipProjection {
  public static final String SERIALIZED_NAME_OPERATOR = "Operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_OPERATOR_DAY = "OperatorDay";
  @SerializedName(SERIALIZED_NAME_OPERATOR_DAY)
  private String operatorDay;

  public static final String SERIALIZED_NAME_OPERATOR_NAME = "OperatorName";
  @SerializedName(SERIALIZED_NAME_OPERATOR_NAME)
  private String operatorName;

  public static final String SERIALIZED_NAME_OPERATOR_SLATE_I_D = "OperatorSlateID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_SLATE_I_D)
  private Integer operatorSlateID;

  public static final String SERIALIZED_NAME_OPERATOR_START_TIME = "OperatorStartTime";
  @SerializedName(SERIALIZED_NAME_OPERATOR_START_TIME)
  private String operatorStartTime;

  public static final String SERIALIZED_NAME_SLATE_I_D = "SlateID";
  @SerializedName(SERIALIZED_NAME_SLATE_I_D)
  private Integer slateID;

  public static final String SERIALIZED_NAME_SLATE_OWNERSHIP_PROJECTIONS = "SlateOwnershipProjections";
  @SerializedName(SERIALIZED_NAME_SLATE_OWNERSHIP_PROJECTIONS)
  private List<DfsSlatePlayerOwnershipProjection> slateOwnershipProjections = new ArrayList<>();

  public DfsSlateWithOwnershipProjection() {
  }

  public DfsSlateWithOwnershipProjection operator(String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }


  public DfsSlateWithOwnershipProjection operatorDay(String operatorDay) {
    this.operatorDay = operatorDay;
    return this;
  }

  /**
   * Get operatorDay
   * @return operatorDay
   */
  @javax.annotation.Nullable
  public String getOperatorDay() {
    return operatorDay;
  }

  public void setOperatorDay(String operatorDay) {
    this.operatorDay = operatorDay;
  }


  public DfsSlateWithOwnershipProjection operatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  /**
   * Get operatorName
   * @return operatorName
   */
  @javax.annotation.Nullable
  public String getOperatorName() {
    return operatorName;
  }

  public void setOperatorName(String operatorName) {
    this.operatorName = operatorName;
  }


  public DfsSlateWithOwnershipProjection operatorSlateID(Integer operatorSlateID) {
    this.operatorSlateID = operatorSlateID;
    return this;
  }

  /**
   * Get operatorSlateID
   * @return operatorSlateID
   */
  @javax.annotation.Nullable
  public Integer getOperatorSlateID() {
    return operatorSlateID;
  }

  public void setOperatorSlateID(Integer operatorSlateID) {
    this.operatorSlateID = operatorSlateID;
  }


  public DfsSlateWithOwnershipProjection operatorStartTime(String operatorStartTime) {
    this.operatorStartTime = operatorStartTime;
    return this;
  }

  /**
   * Get operatorStartTime
   * @return operatorStartTime
   */
  @javax.annotation.Nullable
  public String getOperatorStartTime() {
    return operatorStartTime;
  }

  public void setOperatorStartTime(String operatorStartTime) {
    this.operatorStartTime = operatorStartTime;
  }


  public DfsSlateWithOwnershipProjection slateID(Integer slateID) {
    this.slateID = slateID;
    return this;
  }

  /**
   * Get slateID
   * @return slateID
   */
  @javax.annotation.Nullable
  public Integer getSlateID() {
    return slateID;
  }

  public void setSlateID(Integer slateID) {
    this.slateID = slateID;
  }


  public DfsSlateWithOwnershipProjection slateOwnershipProjections(List<DfsSlatePlayerOwnershipProjection> slateOwnershipProjections) {
    this.slateOwnershipProjections = slateOwnershipProjections;
    return this;
  }

  public DfsSlateWithOwnershipProjection addSlateOwnershipProjectionsItem(DfsSlatePlayerOwnershipProjection slateOwnershipProjectionsItem) {
    if (this.slateOwnershipProjections == null) {
      this.slateOwnershipProjections = new ArrayList<>();
    }
    this.slateOwnershipProjections.add(slateOwnershipProjectionsItem);
    return this;
  }

  /**
   * Get slateOwnershipProjections
   * @return slateOwnershipProjections
   */
  @javax.annotation.Nullable
  public List<DfsSlatePlayerOwnershipProjection> getSlateOwnershipProjections() {
    return slateOwnershipProjections;
  }

  public void setSlateOwnershipProjections(List<DfsSlatePlayerOwnershipProjection> slateOwnershipProjections) {
    this.slateOwnershipProjections = slateOwnershipProjections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DfsSlateWithOwnershipProjection dfsSlateWithOwnershipProjection = (DfsSlateWithOwnershipProjection) o;
    return Objects.equals(this.operator, dfsSlateWithOwnershipProjection.operator) &&
        Objects.equals(this.operatorDay, dfsSlateWithOwnershipProjection.operatorDay) &&
        Objects.equals(this.operatorName, dfsSlateWithOwnershipProjection.operatorName) &&
        Objects.equals(this.operatorSlateID, dfsSlateWithOwnershipProjection.operatorSlateID) &&
        Objects.equals(this.operatorStartTime, dfsSlateWithOwnershipProjection.operatorStartTime) &&
        Objects.equals(this.slateID, dfsSlateWithOwnershipProjection.slateID) &&
        Objects.equals(this.slateOwnershipProjections, dfsSlateWithOwnershipProjection.slateOwnershipProjections);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(operator, operatorDay, operatorName, operatorSlateID, operatorStartTime, slateID, slateOwnershipProjections);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DfsSlateWithOwnershipProjection {\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    operatorDay: ").append(toIndentedString(operatorDay)).append("\n");
    sb.append("    operatorName: ").append(toIndentedString(operatorName)).append("\n");
    sb.append("    operatorSlateID: ").append(toIndentedString(operatorSlateID)).append("\n");
    sb.append("    operatorStartTime: ").append(toIndentedString(operatorStartTime)).append("\n");
    sb.append("    slateID: ").append(toIndentedString(slateID)).append("\n");
    sb.append("    slateOwnershipProjections: ").append(toIndentedString(slateOwnershipProjections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Operator");
    openapiFields.add("OperatorDay");
    openapiFields.add("OperatorName");
    openapiFields.add("OperatorSlateID");
    openapiFields.add("OperatorStartTime");
    openapiFields.add("SlateID");
    openapiFields.add("SlateOwnershipProjections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DfsSlateWithOwnershipProjection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DfsSlateWithOwnershipProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DfsSlateWithOwnershipProjection is not found in the empty JSON string", DfsSlateWithOwnershipProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DfsSlateWithOwnershipProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DfsSlateWithOwnershipProjection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Operator") != null && !jsonObj.get("Operator").isJsonNull()) && !jsonObj.get("Operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Operator").toString()));
      }
      if ((jsonObj.get("OperatorDay") != null && !jsonObj.get("OperatorDay").isJsonNull()) && !jsonObj.get("OperatorDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorDay").toString()));
      }
      if ((jsonObj.get("OperatorName") != null && !jsonObj.get("OperatorName").isJsonNull()) && !jsonObj.get("OperatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorName").toString()));
      }
      if ((jsonObj.get("OperatorStartTime") != null && !jsonObj.get("OperatorStartTime").isJsonNull()) && !jsonObj.get("OperatorStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorStartTime").toString()));
      }
      if (jsonObj.get("SlateOwnershipProjections") != null && !jsonObj.get("SlateOwnershipProjections").isJsonNull()) {
        JsonArray jsonArrayslateOwnershipProjections = jsonObj.getAsJsonArray("SlateOwnershipProjections");
        if (jsonArrayslateOwnershipProjections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SlateOwnershipProjections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SlateOwnershipProjections` to be an array in the JSON string but got `%s`", jsonObj.get("SlateOwnershipProjections").toString()));
          }

          // validate the optional field `SlateOwnershipProjections` (array)
          for (int i = 0; i < jsonArrayslateOwnershipProjections.size(); i++) {
            DfsSlatePlayerOwnershipProjection.validateJsonElement(jsonArrayslateOwnershipProjections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DfsSlateWithOwnershipProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DfsSlateWithOwnershipProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DfsSlateWithOwnershipProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DfsSlateWithOwnershipProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<DfsSlateWithOwnershipProjection>() {
           @Override
           public void write(JsonWriter out, DfsSlateWithOwnershipProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DfsSlateWithOwnershipProjection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DfsSlateWithOwnershipProjection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DfsSlateWithOwnershipProjection
   * @throws IOException if the JSON string is invalid with respect to DfsSlateWithOwnershipProjection
   */
  public static DfsSlateWithOwnershipProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DfsSlateWithOwnershipProjection.class);
  }

  /**
   * Convert an instance of DfsSlateWithOwnershipProjection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

