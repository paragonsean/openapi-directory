/**
 * CBB v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBoxScore.h"
#include "OAIConference.h"
#include "OAIGame.h"
#include "OAIPlayer.h"
#include "OAIPlayerGame.h"
#include "OAIPlayerGameProjection.h"
#include "OAIPlayerSeason.h"
#include "OAISeason.h"
#include "OAIStadium.h"
#include "OAITeam.h"
#include "OAITeamGame.h"
#include "OAITeamSeason.h"
#include "OAITournament.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    */
    virtual void areGamesInProgress(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  gameid QString [required]
    */
    virtual void boxScore(const QString &format, const QString &gameid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void boxScoresByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    * @param[in]  minutes QString [required]
    */
    virtual void boxScoresByDateDelta(const QString &format, const QString &date, const QString &minutes);

    /**
    * @param[in]  format QString [required]
    */
    virtual void currentSeason(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void gamesByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    */
    virtual void injuredPlayers(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void leagueHierarchy(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void playerDetailsByActive(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerDetailsByPlayer(const QString &format, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playerDetailsByTeam(const QString &format, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  playerid QString [required]
    * @param[in]  numberofgames QString [required]
    */
    virtual void playerGameLogsBySeason(const QString &format, const QString &season, const QString &playerid, const QString &numberofgames);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void playerGameStatsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerGameStatsByPlayer(const QString &format, const QString &date, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void playerSeasonStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void playerSeasonStatsByPlayer(const QString &format, const QString &season, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  team QString [required]
    */
    virtual void playerSeasonStatsByTeam(const QString &format, const QString &season, const QString &team);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void projectedPlayerGameStatsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    * @param[in]  playerid QString [required]
    */
    virtual void projectedPlayerGameStatsByPlayer(const QString &format, const QString &date, const QString &playerid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void schedules(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void stadiums(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    * @param[in]  teamid QString [required]
    * @param[in]  numberofgames QString [required]
    */
    virtual void teamGameLogsBySeason(const QString &format, const QString &season, const QString &teamid, const QString &numberofgames);

    /**
    * @param[in]  format QString [required]
    * @param[in]  date QString [required]
    */
    virtual void teamGameStatsByDate(const QString &format, const QString &date);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void teamSeasonStats(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void teams(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void tournamentHierarchy(const QString &format, const QString &season);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void areGamesInProgressCallback(OAIHttpRequestWorker *worker);
    void boxScoreCallback(OAIHttpRequestWorker *worker);
    void boxScoresByDateCallback(OAIHttpRequestWorker *worker);
    void boxScoresByDateDeltaCallback(OAIHttpRequestWorker *worker);
    void currentSeasonCallback(OAIHttpRequestWorker *worker);
    void gamesByDateCallback(OAIHttpRequestWorker *worker);
    void injuredPlayersCallback(OAIHttpRequestWorker *worker);
    void leagueHierarchyCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByActiveCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerDetailsByTeamCallback(OAIHttpRequestWorker *worker);
    void playerGameLogsBySeasonCallback(OAIHttpRequestWorker *worker);
    void playerGameStatsByDateCallback(OAIHttpRequestWorker *worker);
    void playerGameStatsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void playerSeasonStatsByPlayerCallback(OAIHttpRequestWorker *worker);
    void playerSeasonStatsByTeamCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerGameStatsByDateCallback(OAIHttpRequestWorker *worker);
    void projectedPlayerGameStatsByPlayerCallback(OAIHttpRequestWorker *worker);
    void schedulesCallback(OAIHttpRequestWorker *worker);
    void stadiumsCallback(OAIHttpRequestWorker *worker);
    void teamGameLogsBySeasonCallback(OAIHttpRequestWorker *worker);
    void teamGameStatsByDateCallback(OAIHttpRequestWorker *worker);
    void teamSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void teamsCallback(OAIHttpRequestWorker *worker);
    void tournamentHierarchyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void areGamesInProgressSignal(bool summary);
    void boxScoreSignal(OAIBoxScore summary);
    void boxScoresByDateSignal(QList<OAIBoxScore> summary);
    void boxScoresByDateDeltaSignal(QList<OAIBoxScore> summary);
    void currentSeasonSignal(OAISeason summary);
    void gamesByDateSignal(QList<OAIGame> summary);
    void injuredPlayersSignal(QList<OAIPlayer> summary);
    void leagueHierarchySignal(QList<OAIConference> summary);
    void playerDetailsByActiveSignal(QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignal(OAIPlayer summary);
    void playerDetailsByTeamSignal(QList<OAIPlayer> summary);
    void playerGameLogsBySeasonSignal(QList<OAIPlayerGame> summary);
    void playerGameStatsByDateSignal(QList<OAIPlayerGame> summary);
    void playerGameStatsByPlayerSignal(OAIPlayerGame summary);
    void playerSeasonStatsSignal(QList<OAIPlayerSeason> summary);
    void playerSeasonStatsByPlayerSignal(OAIPlayerSeason summary);
    void playerSeasonStatsByTeamSignal(QList<OAIPlayerSeason> summary);
    void projectedPlayerGameStatsByDateSignal(QList<OAIPlayerGameProjection> summary);
    void projectedPlayerGameStatsByPlayerSignal(OAIPlayerGameProjection summary);
    void schedulesSignal(QList<OAIGame> summary);
    void stadiumsSignal(QList<OAIStadium> summary);
    void teamGameLogsBySeasonSignal(QList<OAITeamGame> summary);
    void teamGameStatsByDateSignal(QList<OAITeamGame> summary);
    void teamSeasonStatsSignal(QList<OAITeamSeason> summary);
    void teamsSignal(QList<OAITeam> summary);
    void tournamentHierarchySignal(OAITournament summary);


    void areGamesInProgressSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void boxScoreSignalFull(OAIHttpRequestWorker *worker, OAIBoxScore summary);
    void boxScoresByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void boxScoresByDateDeltaSignalFull(OAIHttpRequestWorker *worker, QList<OAIBoxScore> summary);
    void currentSeasonSignalFull(OAIHttpRequestWorker *worker, OAISeason summary);
    void gamesByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void injuredPlayersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void leagueHierarchySignalFull(OAIHttpRequestWorker *worker, QList<OAIConference> summary);
    void playerDetailsByActiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerDetailsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayer summary);
    void playerDetailsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void playerGameLogsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void playerGameStatsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void playerGameStatsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayerGame summary);
    void playerSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeason> summary);
    void playerSeasonStatsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayerSeason summary);
    void playerSeasonStatsByTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeason> summary);
    void projectedPlayerGameStatsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGameProjection> summary);
    void projectedPlayerGameStatsByPlayerSignalFull(OAIHttpRequestWorker *worker, OAIPlayerGameProjection summary);
    void schedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void stadiumsSignalFull(OAIHttpRequestWorker *worker, QList<OAIStadium> summary);
    void teamGameLogsBySeasonSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamGameStatsByDateSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void teamSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamSeason> summary);
    void teamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void tournamentHierarchySignalFull(OAIHttpRequestWorker *worker, OAITournament summary);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalError() instead")
    void areGamesInProgressSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoreSignalError() instead")
    void boxScoreSignalE(OAIBoxScore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoreSignalError(OAIBoxScore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresByDateSignalError() instead")
    void boxScoresByDateSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresByDateSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresByDateDeltaSignalError() instead")
    void boxScoresByDateDeltaSignalE(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresByDateDeltaSignalError(QList<OAIBoxScore> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonSignalError() instead")
    void currentSeasonSignalE(OAISeason summary, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalError(OAISeason summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateSignalError() instead")
    void gamesByDateSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuredPlayersSignalError() instead")
    void injuredPlayersSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void injuredPlayersSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueHierarchySignalError() instead")
    void leagueHierarchySignalE(QList<OAIConference> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void leagueHierarchySignalError(QList<OAIConference> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByActiveSignalError() instead")
    void playerDetailsByActiveSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByActiveSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalError() instead")
    void playerDetailsByPlayerSignalE(OAIPlayer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalError(OAIPlayer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalError() instead")
    void playerDetailsByTeamSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameLogsBySeasonSignalError() instead")
    void playerGameLogsBySeasonSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameLogsBySeasonSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByDateSignalError() instead")
    void playerGameStatsByDateSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByDateSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByPlayerSignalError() instead")
    void playerGameStatsByPlayerSignalE(OAIPlayerGame summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByPlayerSignalError(OAIPlayerGame summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsSignalError() instead")
    void playerSeasonStatsSignalE(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsSignalError(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByPlayerSignalError() instead")
    void playerSeasonStatsByPlayerSignalE(OAIPlayerSeason summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByPlayerSignalError(OAIPlayerSeason summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByTeamSignalError() instead")
    void playerSeasonStatsByTeamSignalE(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByTeamSignalError(QList<OAIPlayerSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByDateSignalError() instead")
    void projectedPlayerGameStatsByDateSignalE(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByDateSignalError(QList<OAIPlayerGameProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByPlayerSignalError() instead")
    void projectedPlayerGameStatsByPlayerSignalE(OAIPlayerGameProjection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByPlayerSignalError(OAIPlayerGameProjection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesSignalError() instead")
    void schedulesSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalError() instead")
    void stadiumsSignalE(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalError(QList<OAIStadium> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalError() instead")
    void teamGameLogsBySeasonSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsByDateSignalError() instead")
    void teamGameStatsByDateSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsByDateSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalError() instead")
    void teamSeasonStatsSignalE(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalError(QList<OAITeamSeason> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsSignalError() instead")
    void teamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tournamentHierarchySignalError() instead")
    void tournamentHierarchySignalE(OAITournament summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tournamentHierarchySignalError(OAITournament summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use areGamesInProgressSignalErrorFull() instead")
    void areGamesInProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void areGamesInProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoreSignalErrorFull() instead")
    void boxScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresByDateSignalErrorFull() instead")
    void boxScoresByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxScoresByDateDeltaSignalErrorFull() instead")
    void boxScoresByDateDeltaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxScoresByDateDeltaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use currentSeasonSignalErrorFull() instead")
    void currentSeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void currentSeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesByDateSignalErrorFull() instead")
    void gamesByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use injuredPlayersSignalErrorFull() instead")
    void injuredPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void injuredPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueHierarchySignalErrorFull() instead")
    void leagueHierarchySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leagueHierarchySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByActiveSignalErrorFull() instead")
    void playerDetailsByActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByPlayerSignalErrorFull() instead")
    void playerDetailsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerDetailsByTeamSignalErrorFull() instead")
    void playerDetailsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerDetailsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameLogsBySeasonSignalErrorFull() instead")
    void playerGameLogsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameLogsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByDateSignalErrorFull() instead")
    void playerGameStatsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerGameStatsByPlayerSignalErrorFull() instead")
    void playerGameStatsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGameStatsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsSignalErrorFull() instead")
    void playerSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByPlayerSignalErrorFull() instead")
    void playerSeasonStatsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerSeasonStatsByTeamSignalErrorFull() instead")
    void playerSeasonStatsByTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerSeasonStatsByTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByDateSignalErrorFull() instead")
    void projectedPlayerGameStatsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectedPlayerGameStatsByPlayerSignalErrorFull() instead")
    void projectedPlayerGameStatsByPlayerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectedPlayerGameStatsByPlayerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesSignalErrorFull() instead")
    void schedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stadiumsSignalErrorFull() instead")
    void stadiumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stadiumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameLogsBySeasonSignalErrorFull() instead")
    void teamGameLogsBySeasonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameLogsBySeasonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamGameStatsByDateSignalErrorFull() instead")
    void teamGameStatsByDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamGameStatsByDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamSeasonStatsSignalErrorFull() instead")
    void teamSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsSignalErrorFull() instead")
    void teamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tournamentHierarchySignalErrorFull() instead")
    void tournamentHierarchySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tournamentHierarchySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
