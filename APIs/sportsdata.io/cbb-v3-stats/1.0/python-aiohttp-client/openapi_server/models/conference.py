# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.team import Team
from openapi_server import util


class Conference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference_id: int=None, name: str=None, teams: List[Team]=None):
        """Conference - a model defined in OpenAPI

        :param conference_id: The conference_id of this Conference.
        :param name: The name of this Conference.
        :param teams: The teams of this Conference.
        """
        self.openapi_types = {
            'conference_id': int,
            'name': str,
            'teams': List[Team]
        }

        self.attribute_map = {
            'conference_id': 'ConferenceID',
            'name': 'Name',
            'teams': 'Teams'
        }

        self._conference_id = conference_id
        self._name = name
        self._teams = teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conference of this Conference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference_id(self):
        """Gets the conference_id of this Conference.


        :return: The conference_id of this Conference.
        :rtype: int
        """
        return self._conference_id

    @conference_id.setter
    def conference_id(self, conference_id):
        """Sets the conference_id of this Conference.


        :param conference_id: The conference_id of this Conference.
        :type conference_id: int
        """

        self._conference_id = conference_id

    @property
    def name(self):
        """Gets the name of this Conference.


        :return: The name of this Conference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Conference.


        :param name: The name of this Conference.
        :type name: str
        """

        self._name = name

    @property
    def teams(self):
        """Gets the teams of this Conference.


        :return: The teams of this Conference.
        :rtype: List[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this Conference.


        :param teams: The teams of this Conference.
        :type teams: List[Team]
        """

        self._teams = teams
