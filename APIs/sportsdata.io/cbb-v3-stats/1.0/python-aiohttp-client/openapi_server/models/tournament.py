# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.game import Game
from openapi_server import util


class Tournament(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, games: List[Game]=None, left_bottom_bracket_conference: str=None, left_top_bracket_conference: str=None, location: str=None, name: str=None, right_bottom_bracket_conference: str=None, right_top_bracket_conference: str=None, season: int=None, tournament_id: int=None):
        """Tournament - a model defined in OpenAPI

        :param games: The games of this Tournament.
        :param left_bottom_bracket_conference: The left_bottom_bracket_conference of this Tournament.
        :param left_top_bracket_conference: The left_top_bracket_conference of this Tournament.
        :param location: The location of this Tournament.
        :param name: The name of this Tournament.
        :param right_bottom_bracket_conference: The right_bottom_bracket_conference of this Tournament.
        :param right_top_bracket_conference: The right_top_bracket_conference of this Tournament.
        :param season: The season of this Tournament.
        :param tournament_id: The tournament_id of this Tournament.
        """
        self.openapi_types = {
            'games': List[Game],
            'left_bottom_bracket_conference': str,
            'left_top_bracket_conference': str,
            'location': str,
            'name': str,
            'right_bottom_bracket_conference': str,
            'right_top_bracket_conference': str,
            'season': int,
            'tournament_id': int
        }

        self.attribute_map = {
            'games': 'Games',
            'left_bottom_bracket_conference': 'LeftBottomBracketConference',
            'left_top_bracket_conference': 'LeftTopBracketConference',
            'location': 'Location',
            'name': 'Name',
            'right_bottom_bracket_conference': 'RightBottomBracketConference',
            'right_top_bracket_conference': 'RightTopBracketConference',
            'season': 'Season',
            'tournament_id': 'TournamentID'
        }

        self._games = games
        self._left_bottom_bracket_conference = left_bottom_bracket_conference
        self._left_top_bracket_conference = left_top_bracket_conference
        self._location = location
        self._name = name
        self._right_bottom_bracket_conference = right_bottom_bracket_conference
        self._right_top_bracket_conference = right_top_bracket_conference
        self._season = season
        self._tournament_id = tournament_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tournament':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tournament of this Tournament.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def games(self):
        """Gets the games of this Tournament.


        :return: The games of this Tournament.
        :rtype: List[Game]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this Tournament.


        :param games: The games of this Tournament.
        :type games: List[Game]
        """

        self._games = games

    @property
    def left_bottom_bracket_conference(self):
        """Gets the left_bottom_bracket_conference of this Tournament.


        :return: The left_bottom_bracket_conference of this Tournament.
        :rtype: str
        """
        return self._left_bottom_bracket_conference

    @left_bottom_bracket_conference.setter
    def left_bottom_bracket_conference(self, left_bottom_bracket_conference):
        """Sets the left_bottom_bracket_conference of this Tournament.


        :param left_bottom_bracket_conference: The left_bottom_bracket_conference of this Tournament.
        :type left_bottom_bracket_conference: str
        """

        self._left_bottom_bracket_conference = left_bottom_bracket_conference

    @property
    def left_top_bracket_conference(self):
        """Gets the left_top_bracket_conference of this Tournament.


        :return: The left_top_bracket_conference of this Tournament.
        :rtype: str
        """
        return self._left_top_bracket_conference

    @left_top_bracket_conference.setter
    def left_top_bracket_conference(self, left_top_bracket_conference):
        """Sets the left_top_bracket_conference of this Tournament.


        :param left_top_bracket_conference: The left_top_bracket_conference of this Tournament.
        :type left_top_bracket_conference: str
        """

        self._left_top_bracket_conference = left_top_bracket_conference

    @property
    def location(self):
        """Gets the location of this Tournament.


        :return: The location of this Tournament.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Tournament.


        :param location: The location of this Tournament.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Tournament.


        :return: The name of this Tournament.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tournament.


        :param name: The name of this Tournament.
        :type name: str
        """

        self._name = name

    @property
    def right_bottom_bracket_conference(self):
        """Gets the right_bottom_bracket_conference of this Tournament.


        :return: The right_bottom_bracket_conference of this Tournament.
        :rtype: str
        """
        return self._right_bottom_bracket_conference

    @right_bottom_bracket_conference.setter
    def right_bottom_bracket_conference(self, right_bottom_bracket_conference):
        """Sets the right_bottom_bracket_conference of this Tournament.


        :param right_bottom_bracket_conference: The right_bottom_bracket_conference of this Tournament.
        :type right_bottom_bracket_conference: str
        """

        self._right_bottom_bracket_conference = right_bottom_bracket_conference

    @property
    def right_top_bracket_conference(self):
        """Gets the right_top_bracket_conference of this Tournament.


        :return: The right_top_bracket_conference of this Tournament.
        :rtype: str
        """
        return self._right_top_bracket_conference

    @right_top_bracket_conference.setter
    def right_top_bracket_conference(self, right_top_bracket_conference):
        """Sets the right_top_bracket_conference of this Tournament.


        :param right_top_bracket_conference: The right_top_bracket_conference of this Tournament.
        :type right_top_bracket_conference: str
        """

        self._right_top_bracket_conference = right_top_bracket_conference

    @property
    def season(self):
        """Gets the season of this Tournament.


        :return: The season of this Tournament.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Tournament.


        :param season: The season of this Tournament.
        :type season: int
        """

        self._season = season

    @property
    def tournament_id(self):
        """Gets the tournament_id of this Tournament.


        :return: The tournament_id of this Tournament.
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this Tournament.


        :param tournament_id: The tournament_id of this Tournament.
        :type tournament_id: int
        """

        self._tournament_id = tournament_id
