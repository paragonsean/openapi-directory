/**
 * CBB v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CbbV3Stats);
  }
}(this, function(expect, CbbV3Stats) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CbbV3Stats.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('areGamesInProgress', function() {
      it('should call areGamesInProgress successfully', function(done) {
        //uncomment below and update the code to test areGamesInProgress
        //instance.areGamesInProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boxScore', function() {
      it('should call boxScore successfully', function(done) {
        //uncomment below and update the code to test boxScore
        //instance.boxScore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boxScoresByDate', function() {
      it('should call boxScoresByDate successfully', function(done) {
        //uncomment below and update the code to test boxScoresByDate
        //instance.boxScoresByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('boxScoresByDateDelta', function() {
      it('should call boxScoresByDateDelta successfully', function(done) {
        //uncomment below and update the code to test boxScoresByDateDelta
        //instance.boxScoresByDateDelta(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('currentSeason', function() {
      it('should call currentSeason successfully', function(done) {
        //uncomment below and update the code to test currentSeason
        //instance.currentSeason(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gamesByDate', function() {
      it('should call gamesByDate successfully', function(done) {
        //uncomment below and update the code to test gamesByDate
        //instance.gamesByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('injuredPlayers', function() {
      it('should call injuredPlayers successfully', function(done) {
        //uncomment below and update the code to test injuredPlayers
        //instance.injuredPlayers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('leagueHierarchy', function() {
      it('should call leagueHierarchy successfully', function(done) {
        //uncomment below and update the code to test leagueHierarchy
        //instance.leagueHierarchy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerDetailsByActive', function() {
      it('should call playerDetailsByActive successfully', function(done) {
        //uncomment below and update the code to test playerDetailsByActive
        //instance.playerDetailsByActive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerDetailsByPlayer', function() {
      it('should call playerDetailsByPlayer successfully', function(done) {
        //uncomment below and update the code to test playerDetailsByPlayer
        //instance.playerDetailsByPlayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerDetailsByTeam', function() {
      it('should call playerDetailsByTeam successfully', function(done) {
        //uncomment below and update the code to test playerDetailsByTeam
        //instance.playerDetailsByTeam(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerGameLogsBySeason', function() {
      it('should call playerGameLogsBySeason successfully', function(done) {
        //uncomment below and update the code to test playerGameLogsBySeason
        //instance.playerGameLogsBySeason(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerGameStatsByDate', function() {
      it('should call playerGameStatsByDate successfully', function(done) {
        //uncomment below and update the code to test playerGameStatsByDate
        //instance.playerGameStatsByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerGameStatsByPlayer', function() {
      it('should call playerGameStatsByPlayer successfully', function(done) {
        //uncomment below and update the code to test playerGameStatsByPlayer
        //instance.playerGameStatsByPlayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerSeasonStats', function() {
      it('should call playerSeasonStats successfully', function(done) {
        //uncomment below and update the code to test playerSeasonStats
        //instance.playerSeasonStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerSeasonStatsByPlayer', function() {
      it('should call playerSeasonStatsByPlayer successfully', function(done) {
        //uncomment below and update the code to test playerSeasonStatsByPlayer
        //instance.playerSeasonStatsByPlayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('playerSeasonStatsByTeam', function() {
      it('should call playerSeasonStatsByTeam successfully', function(done) {
        //uncomment below and update the code to test playerSeasonStatsByTeam
        //instance.playerSeasonStatsByTeam(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectedPlayerGameStatsByDate', function() {
      it('should call projectedPlayerGameStatsByDate successfully', function(done) {
        //uncomment below and update the code to test projectedPlayerGameStatsByDate
        //instance.projectedPlayerGameStatsByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectedPlayerGameStatsByPlayer', function() {
      it('should call projectedPlayerGameStatsByPlayer successfully', function(done) {
        //uncomment below and update the code to test projectedPlayerGameStatsByPlayer
        //instance.projectedPlayerGameStatsByPlayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('schedules', function() {
      it('should call schedules successfully', function(done) {
        //uncomment below and update the code to test schedules
        //instance.schedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stadiums', function() {
      it('should call stadiums successfully', function(done) {
        //uncomment below and update the code to test stadiums
        //instance.stadiums(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamGameLogsBySeason', function() {
      it('should call teamGameLogsBySeason successfully', function(done) {
        //uncomment below and update the code to test teamGameLogsBySeason
        //instance.teamGameLogsBySeason(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamGameStatsByDate', function() {
      it('should call teamGameStatsByDate successfully', function(done) {
        //uncomment below and update the code to test teamGameStatsByDate
        //instance.teamGameStatsByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamSeasonStats', function() {
      it('should call teamSeasonStats successfully', function(done) {
        //uncomment below and update the code to test teamSeasonStats
        //instance.teamSeasonStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teams', function() {
      it('should call teams successfully', function(done) {
        //uncomment below and update the code to test teams
        //instance.teams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tournamentHierarchy', function() {
      it('should call tournamentHierarchy successfully', function(done) {
        //uncomment below and update the code to test tournamentHierarchy
        //instance.tournamentHierarchy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
