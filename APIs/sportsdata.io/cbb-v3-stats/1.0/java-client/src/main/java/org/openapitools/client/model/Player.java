/*
 * CBB v3 Stats
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:53.082739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_BIRTH_CITY = "BirthCity";
  @SerializedName(SERIALIZED_NAME_BIRTH_CITY)
  private String birthCity;

  public static final String SERIALIZED_NAME_BIRTH_STATE = "BirthState";
  @SerializedName(SERIALIZED_NAME_BIRTH_STATE)
  private String birthState;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "Class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  public static final String SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D = "FantasyAlarmPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D)
  private Integer fantasyAlarmPlayerID;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HIGH_SCHOOL = "HighSchool";
  @SerializedName(SERIALIZED_NAME_HIGH_SCHOOL)
  private String highSchool;

  public static final String SERIALIZED_NAME_INJURY_BODY_PART = "InjuryBodyPart";
  @SerializedName(SERIALIZED_NAME_INJURY_BODY_PART)
  private String injuryBodyPart;

  public static final String SERIALIZED_NAME_INJURY_NOTES = "InjuryNotes";
  @SerializedName(SERIALIZED_NAME_INJURY_NOTES)
  private String injuryNotes;

  public static final String SERIALIZED_NAME_INJURY_START_DATE = "InjuryStartDate";
  @SerializedName(SERIALIZED_NAME_INJURY_START_DATE)
  private String injuryStartDate;

  public static final String SERIALIZED_NAME_INJURY_STATUS = "InjuryStatus";
  @SerializedName(SERIALIZED_NAME_INJURY_STATUS)
  private String injuryStatus;

  public static final String SERIALIZED_NAME_JERSEY = "Jersey";
  @SerializedName(SERIALIZED_NAME_JERSEY)
  private Integer jersey;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D = "RotoWirePlayerID";
  @SerializedName(SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D)
  private Integer rotoWirePlayerID;

  public static final String SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D = "RotoworldPlayerID";
  @SerializedName(SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D)
  private Integer rotoworldPlayerID;

  public static final String SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D = "SportRadarPlayerID";
  @SerializedName(SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D)
  private String sportRadarPlayerID;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public Player() {
  }

  public Player birthCity(String birthCity) {
    this.birthCity = birthCity;
    return this;
  }

  /**
   * Get birthCity
   * @return birthCity
   */
  @javax.annotation.Nullable
  public String getBirthCity() {
    return birthCity;
  }

  public void setBirthCity(String birthCity) {
    this.birthCity = birthCity;
  }


  public Player birthState(String birthState) {
    this.birthState = birthState;
    return this;
  }

  /**
   * Get birthState
   * @return birthState
   */
  @javax.annotation.Nullable
  public String getBirthState() {
    return birthState;
  }

  public void setBirthState(String birthState) {
    this.birthState = birthState;
  }


  public Player propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public Player fantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
    return this;
  }

  /**
   * Get fantasyAlarmPlayerID
   * @return fantasyAlarmPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyAlarmPlayerID() {
    return fantasyAlarmPlayerID;
  }

  public void setFantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
  }


  public Player firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Player globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public Player height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Player highSchool(String highSchool) {
    this.highSchool = highSchool;
    return this;
  }

  /**
   * Get highSchool
   * @return highSchool
   */
  @javax.annotation.Nullable
  public String getHighSchool() {
    return highSchool;
  }

  public void setHighSchool(String highSchool) {
    this.highSchool = highSchool;
  }


  public Player injuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
    return this;
  }

  /**
   * Get injuryBodyPart
   * @return injuryBodyPart
   */
  @javax.annotation.Nullable
  public String getInjuryBodyPart() {
    return injuryBodyPart;
  }

  public void setInjuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
  }


  public Player injuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
    return this;
  }

  /**
   * Get injuryNotes
   * @return injuryNotes
   */
  @javax.annotation.Nullable
  public String getInjuryNotes() {
    return injuryNotes;
  }

  public void setInjuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
  }


  public Player injuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
    return this;
  }

  /**
   * Get injuryStartDate
   * @return injuryStartDate
   */
  @javax.annotation.Nullable
  public String getInjuryStartDate() {
    return injuryStartDate;
  }

  public void setInjuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
  }


  public Player injuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
    return this;
  }

  /**
   * Get injuryStatus
   * @return injuryStatus
   */
  @javax.annotation.Nullable
  public String getInjuryStatus() {
    return injuryStatus;
  }

  public void setInjuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
  }


  public Player jersey(Integer jersey) {
    this.jersey = jersey;
    return this;
  }

  /**
   * Get jersey
   * @return jersey
   */
  @javax.annotation.Nullable
  public Integer getJersey() {
    return jersey;
  }

  public void setJersey(Integer jersey) {
    this.jersey = jersey;
  }


  public Player lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Player playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Player position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public Player rotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
    return this;
  }

  /**
   * Get rotoWirePlayerID
   * @return rotoWirePlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoWirePlayerID() {
    return rotoWirePlayerID;
  }

  public void setRotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
  }


  public Player rotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
    return this;
  }

  /**
   * Get rotoworldPlayerID
   * @return rotoworldPlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoworldPlayerID() {
    return rotoworldPlayerID;
  }

  public void setRotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
  }


  public Player sportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
    return this;
  }

  /**
   * Get sportRadarPlayerID
   * @return sportRadarPlayerID
   */
  @javax.annotation.Nullable
  public String getSportRadarPlayerID() {
    return sportRadarPlayerID;
  }

  public void setSportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
  }


  public Player team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Player teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Player weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.birthCity, player.birthCity) &&
        Objects.equals(this.birthState, player.birthState) &&
        Objects.equals(this.propertyClass, player.propertyClass) &&
        Objects.equals(this.fantasyAlarmPlayerID, player.fantasyAlarmPlayerID) &&
        Objects.equals(this.firstName, player.firstName) &&
        Objects.equals(this.globalTeamID, player.globalTeamID) &&
        Objects.equals(this.height, player.height) &&
        Objects.equals(this.highSchool, player.highSchool) &&
        Objects.equals(this.injuryBodyPart, player.injuryBodyPart) &&
        Objects.equals(this.injuryNotes, player.injuryNotes) &&
        Objects.equals(this.injuryStartDate, player.injuryStartDate) &&
        Objects.equals(this.injuryStatus, player.injuryStatus) &&
        Objects.equals(this.jersey, player.jersey) &&
        Objects.equals(this.lastName, player.lastName) &&
        Objects.equals(this.playerID, player.playerID) &&
        Objects.equals(this.position, player.position) &&
        Objects.equals(this.rotoWirePlayerID, player.rotoWirePlayerID) &&
        Objects.equals(this.rotoworldPlayerID, player.rotoworldPlayerID) &&
        Objects.equals(this.sportRadarPlayerID, player.sportRadarPlayerID) &&
        Objects.equals(this.team, player.team) &&
        Objects.equals(this.teamID, player.teamID) &&
        Objects.equals(this.weight, player.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthCity, birthState, propertyClass, fantasyAlarmPlayerID, firstName, globalTeamID, height, highSchool, injuryBodyPart, injuryNotes, injuryStartDate, injuryStatus, jersey, lastName, playerID, position, rotoWirePlayerID, rotoworldPlayerID, sportRadarPlayerID, team, teamID, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    birthCity: ").append(toIndentedString(birthCity)).append("\n");
    sb.append("    birthState: ").append(toIndentedString(birthState)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    fantasyAlarmPlayerID: ").append(toIndentedString(fantasyAlarmPlayerID)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    highSchool: ").append(toIndentedString(highSchool)).append("\n");
    sb.append("    injuryBodyPart: ").append(toIndentedString(injuryBodyPart)).append("\n");
    sb.append("    injuryNotes: ").append(toIndentedString(injuryNotes)).append("\n");
    sb.append("    injuryStartDate: ").append(toIndentedString(injuryStartDate)).append("\n");
    sb.append("    injuryStatus: ").append(toIndentedString(injuryStatus)).append("\n");
    sb.append("    jersey: ").append(toIndentedString(jersey)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    rotoWirePlayerID: ").append(toIndentedString(rotoWirePlayerID)).append("\n");
    sb.append("    rotoworldPlayerID: ").append(toIndentedString(rotoworldPlayerID)).append("\n");
    sb.append("    sportRadarPlayerID: ").append(toIndentedString(sportRadarPlayerID)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BirthCity");
    openapiFields.add("BirthState");
    openapiFields.add("Class");
    openapiFields.add("FantasyAlarmPlayerID");
    openapiFields.add("FirstName");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("Height");
    openapiFields.add("HighSchool");
    openapiFields.add("InjuryBodyPart");
    openapiFields.add("InjuryNotes");
    openapiFields.add("InjuryStartDate");
    openapiFields.add("InjuryStatus");
    openapiFields.add("Jersey");
    openapiFields.add("LastName");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("RotoWirePlayerID");
    openapiFields.add("RotoworldPlayerID");
    openapiFields.add("SportRadarPlayerID");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("Weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BirthCity") != null && !jsonObj.get("BirthCity").isJsonNull()) && !jsonObj.get("BirthCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthCity").toString()));
      }
      if ((jsonObj.get("BirthState") != null && !jsonObj.get("BirthState").isJsonNull()) && !jsonObj.get("BirthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthState").toString()));
      }
      if ((jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) && !jsonObj.get("Class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Class").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("HighSchool") != null && !jsonObj.get("HighSchool").isJsonNull()) && !jsonObj.get("HighSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HighSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HighSchool").toString()));
      }
      if ((jsonObj.get("InjuryBodyPart") != null && !jsonObj.get("InjuryBodyPart").isJsonNull()) && !jsonObj.get("InjuryBodyPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryBodyPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryBodyPart").toString()));
      }
      if ((jsonObj.get("InjuryNotes") != null && !jsonObj.get("InjuryNotes").isJsonNull()) && !jsonObj.get("InjuryNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryNotes").toString()));
      }
      if ((jsonObj.get("InjuryStartDate") != null && !jsonObj.get("InjuryStartDate").isJsonNull()) && !jsonObj.get("InjuryStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStartDate").toString()));
      }
      if ((jsonObj.get("InjuryStatus") != null && !jsonObj.get("InjuryStatus").isJsonNull()) && !jsonObj.get("InjuryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStatus").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("SportRadarPlayerID") != null && !jsonObj.get("SportRadarPlayerID").isJsonNull()) && !jsonObj.get("SportRadarPlayerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportRadarPlayerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportRadarPlayerID").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

