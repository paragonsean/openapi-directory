# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Play(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assisted_by_player_id: int=None, away_player_id: int=None, away_team_score: int=None, baseline_offset_percentage: float=None, blocked_by_player_id: int=None, category: str=None, coordinates: str=None, created: str=None, description: str=None, fast_break: bool=None, home_player_id: int=None, home_team_score: int=None, opponent: str=None, opponent_id: int=None, play_id: int=None, player_id: int=None, points: int=None, potential_points: int=None, quarter_id: int=None, quarter_name: str=None, receiving_player_id: int=None, receiving_team: str=None, receiving_team_id: int=None, sequence: int=None, shot_made: bool=None, side_of_basket: str=None, sideline_offset_percentage: float=None, stolen_by_player_id: int=None, substitute_in_player_id: int=None, substitute_out_player_id: int=None, team: str=None, team_id: int=None, time_remaining_minutes: int=None, time_remaining_seconds: int=None, type: str=None, updated: str=None):
        """Play - a model defined in OpenAPI

        :param assisted_by_player_id: The assisted_by_player_id of this Play.
        :param away_player_id: The away_player_id of this Play.
        :param away_team_score: The away_team_score of this Play.
        :param baseline_offset_percentage: The baseline_offset_percentage of this Play.
        :param blocked_by_player_id: The blocked_by_player_id of this Play.
        :param category: The category of this Play.
        :param coordinates: The coordinates of this Play.
        :param created: The created of this Play.
        :param description: The description of this Play.
        :param fast_break: The fast_break of this Play.
        :param home_player_id: The home_player_id of this Play.
        :param home_team_score: The home_team_score of this Play.
        :param opponent: The opponent of this Play.
        :param opponent_id: The opponent_id of this Play.
        :param play_id: The play_id of this Play.
        :param player_id: The player_id of this Play.
        :param points: The points of this Play.
        :param potential_points: The potential_points of this Play.
        :param quarter_id: The quarter_id of this Play.
        :param quarter_name: The quarter_name of this Play.
        :param receiving_player_id: The receiving_player_id of this Play.
        :param receiving_team: The receiving_team of this Play.
        :param receiving_team_id: The receiving_team_id of this Play.
        :param sequence: The sequence of this Play.
        :param shot_made: The shot_made of this Play.
        :param side_of_basket: The side_of_basket of this Play.
        :param sideline_offset_percentage: The sideline_offset_percentage of this Play.
        :param stolen_by_player_id: The stolen_by_player_id of this Play.
        :param substitute_in_player_id: The substitute_in_player_id of this Play.
        :param substitute_out_player_id: The substitute_out_player_id of this Play.
        :param team: The team of this Play.
        :param team_id: The team_id of this Play.
        :param time_remaining_minutes: The time_remaining_minutes of this Play.
        :param time_remaining_seconds: The time_remaining_seconds of this Play.
        :param type: The type of this Play.
        :param updated: The updated of this Play.
        """
        self.openapi_types = {
            'assisted_by_player_id': int,
            'away_player_id': int,
            'away_team_score': int,
            'baseline_offset_percentage': float,
            'blocked_by_player_id': int,
            'category': str,
            'coordinates': str,
            'created': str,
            'description': str,
            'fast_break': bool,
            'home_player_id': int,
            'home_team_score': int,
            'opponent': str,
            'opponent_id': int,
            'play_id': int,
            'player_id': int,
            'points': int,
            'potential_points': int,
            'quarter_id': int,
            'quarter_name': str,
            'receiving_player_id': int,
            'receiving_team': str,
            'receiving_team_id': int,
            'sequence': int,
            'shot_made': bool,
            'side_of_basket': str,
            'sideline_offset_percentage': float,
            'stolen_by_player_id': int,
            'substitute_in_player_id': int,
            'substitute_out_player_id': int,
            'team': str,
            'team_id': int,
            'time_remaining_minutes': int,
            'time_remaining_seconds': int,
            'type': str,
            'updated': str
        }

        self.attribute_map = {
            'assisted_by_player_id': 'AssistedByPlayerID',
            'away_player_id': 'AwayPlayerID',
            'away_team_score': 'AwayTeamScore',
            'baseline_offset_percentage': 'BaselineOffsetPercentage',
            'blocked_by_player_id': 'BlockedByPlayerID',
            'category': 'Category',
            'coordinates': 'Coordinates',
            'created': 'Created',
            'description': 'Description',
            'fast_break': 'FastBreak',
            'home_player_id': 'HomePlayerID',
            'home_team_score': 'HomeTeamScore',
            'opponent': 'Opponent',
            'opponent_id': 'OpponentID',
            'play_id': 'PlayID',
            'player_id': 'PlayerID',
            'points': 'Points',
            'potential_points': 'PotentialPoints',
            'quarter_id': 'QuarterID',
            'quarter_name': 'QuarterName',
            'receiving_player_id': 'ReceivingPlayerID',
            'receiving_team': 'ReceivingTeam',
            'receiving_team_id': 'ReceivingTeamID',
            'sequence': 'Sequence',
            'shot_made': 'ShotMade',
            'side_of_basket': 'SideOfBasket',
            'sideline_offset_percentage': 'SidelineOffsetPercentage',
            'stolen_by_player_id': 'StolenByPlayerID',
            'substitute_in_player_id': 'SubstituteInPlayerID',
            'substitute_out_player_id': 'SubstituteOutPlayerID',
            'team': 'Team',
            'team_id': 'TeamID',
            'time_remaining_minutes': 'TimeRemainingMinutes',
            'time_remaining_seconds': 'TimeRemainingSeconds',
            'type': 'Type',
            'updated': 'Updated'
        }

        self._assisted_by_player_id = assisted_by_player_id
        self._away_player_id = away_player_id
        self._away_team_score = away_team_score
        self._baseline_offset_percentage = baseline_offset_percentage
        self._blocked_by_player_id = blocked_by_player_id
        self._category = category
        self._coordinates = coordinates
        self._created = created
        self._description = description
        self._fast_break = fast_break
        self._home_player_id = home_player_id
        self._home_team_score = home_team_score
        self._opponent = opponent
        self._opponent_id = opponent_id
        self._play_id = play_id
        self._player_id = player_id
        self._points = points
        self._potential_points = potential_points
        self._quarter_id = quarter_id
        self._quarter_name = quarter_name
        self._receiving_player_id = receiving_player_id
        self._receiving_team = receiving_team
        self._receiving_team_id = receiving_team_id
        self._sequence = sequence
        self._shot_made = shot_made
        self._side_of_basket = side_of_basket
        self._sideline_offset_percentage = sideline_offset_percentage
        self._stolen_by_player_id = stolen_by_player_id
        self._substitute_in_player_id = substitute_in_player_id
        self._substitute_out_player_id = substitute_out_player_id
        self._team = team
        self._team_id = team_id
        self._time_remaining_minutes = time_remaining_minutes
        self._time_remaining_seconds = time_remaining_seconds
        self._type = type
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Play':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Play of this Play.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assisted_by_player_id(self):
        """Gets the assisted_by_player_id of this Play.


        :return: The assisted_by_player_id of this Play.
        :rtype: int
        """
        return self._assisted_by_player_id

    @assisted_by_player_id.setter
    def assisted_by_player_id(self, assisted_by_player_id):
        """Sets the assisted_by_player_id of this Play.


        :param assisted_by_player_id: The assisted_by_player_id of this Play.
        :type assisted_by_player_id: int
        """

        self._assisted_by_player_id = assisted_by_player_id

    @property
    def away_player_id(self):
        """Gets the away_player_id of this Play.


        :return: The away_player_id of this Play.
        :rtype: int
        """
        return self._away_player_id

    @away_player_id.setter
    def away_player_id(self, away_player_id):
        """Sets the away_player_id of this Play.


        :param away_player_id: The away_player_id of this Play.
        :type away_player_id: int
        """

        self._away_player_id = away_player_id

    @property
    def away_team_score(self):
        """Gets the away_team_score of this Play.


        :return: The away_team_score of this Play.
        :rtype: int
        """
        return self._away_team_score

    @away_team_score.setter
    def away_team_score(self, away_team_score):
        """Sets the away_team_score of this Play.


        :param away_team_score: The away_team_score of this Play.
        :type away_team_score: int
        """

        self._away_team_score = away_team_score

    @property
    def baseline_offset_percentage(self):
        """Gets the baseline_offset_percentage of this Play.


        :return: The baseline_offset_percentage of this Play.
        :rtype: float
        """
        return self._baseline_offset_percentage

    @baseline_offset_percentage.setter
    def baseline_offset_percentage(self, baseline_offset_percentage):
        """Sets the baseline_offset_percentage of this Play.


        :param baseline_offset_percentage: The baseline_offset_percentage of this Play.
        :type baseline_offset_percentage: float
        """

        self._baseline_offset_percentage = baseline_offset_percentage

    @property
    def blocked_by_player_id(self):
        """Gets the blocked_by_player_id of this Play.


        :return: The blocked_by_player_id of this Play.
        :rtype: int
        """
        return self._blocked_by_player_id

    @blocked_by_player_id.setter
    def blocked_by_player_id(self, blocked_by_player_id):
        """Sets the blocked_by_player_id of this Play.


        :param blocked_by_player_id: The blocked_by_player_id of this Play.
        :type blocked_by_player_id: int
        """

        self._blocked_by_player_id = blocked_by_player_id

    @property
    def category(self):
        """Gets the category of this Play.


        :return: The category of this Play.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Play.


        :param category: The category of this Play.
        :type category: str
        """

        self._category = category

    @property
    def coordinates(self):
        """Gets the coordinates of this Play.


        :return: The coordinates of this Play.
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Play.


        :param coordinates: The coordinates of this Play.
        :type coordinates: str
        """

        self._coordinates = coordinates

    @property
    def created(self):
        """Gets the created of this Play.


        :return: The created of this Play.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Play.


        :param created: The created of this Play.
        :type created: str
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Play.


        :return: The description of this Play.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Play.


        :param description: The description of this Play.
        :type description: str
        """

        self._description = description

    @property
    def fast_break(self):
        """Gets the fast_break of this Play.


        :return: The fast_break of this Play.
        :rtype: bool
        """
        return self._fast_break

    @fast_break.setter
    def fast_break(self, fast_break):
        """Sets the fast_break of this Play.


        :param fast_break: The fast_break of this Play.
        :type fast_break: bool
        """

        self._fast_break = fast_break

    @property
    def home_player_id(self):
        """Gets the home_player_id of this Play.


        :return: The home_player_id of this Play.
        :rtype: int
        """
        return self._home_player_id

    @home_player_id.setter
    def home_player_id(self, home_player_id):
        """Sets the home_player_id of this Play.


        :param home_player_id: The home_player_id of this Play.
        :type home_player_id: int
        """

        self._home_player_id = home_player_id

    @property
    def home_team_score(self):
        """Gets the home_team_score of this Play.


        :return: The home_team_score of this Play.
        :rtype: int
        """
        return self._home_team_score

    @home_team_score.setter
    def home_team_score(self, home_team_score):
        """Sets the home_team_score of this Play.


        :param home_team_score: The home_team_score of this Play.
        :type home_team_score: int
        """

        self._home_team_score = home_team_score

    @property
    def opponent(self):
        """Gets the opponent of this Play.


        :return: The opponent of this Play.
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this Play.


        :param opponent: The opponent of this Play.
        :type opponent: str
        """

        self._opponent = opponent

    @property
    def opponent_id(self):
        """Gets the opponent_id of this Play.


        :return: The opponent_id of this Play.
        :rtype: int
        """
        return self._opponent_id

    @opponent_id.setter
    def opponent_id(self, opponent_id):
        """Sets the opponent_id of this Play.


        :param opponent_id: The opponent_id of this Play.
        :type opponent_id: int
        """

        self._opponent_id = opponent_id

    @property
    def play_id(self):
        """Gets the play_id of this Play.


        :return: The play_id of this Play.
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this Play.


        :param play_id: The play_id of this Play.
        :type play_id: int
        """

        self._play_id = play_id

    @property
    def player_id(self):
        """Gets the player_id of this Play.


        :return: The player_id of this Play.
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Play.


        :param player_id: The player_id of this Play.
        :type player_id: int
        """

        self._player_id = player_id

    @property
    def points(self):
        """Gets the points of this Play.


        :return: The points of this Play.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Play.


        :param points: The points of this Play.
        :type points: int
        """

        self._points = points

    @property
    def potential_points(self):
        """Gets the potential_points of this Play.


        :return: The potential_points of this Play.
        :rtype: int
        """
        return self._potential_points

    @potential_points.setter
    def potential_points(self, potential_points):
        """Sets the potential_points of this Play.


        :param potential_points: The potential_points of this Play.
        :type potential_points: int
        """

        self._potential_points = potential_points

    @property
    def quarter_id(self):
        """Gets the quarter_id of this Play.


        :return: The quarter_id of this Play.
        :rtype: int
        """
        return self._quarter_id

    @quarter_id.setter
    def quarter_id(self, quarter_id):
        """Sets the quarter_id of this Play.


        :param quarter_id: The quarter_id of this Play.
        :type quarter_id: int
        """

        self._quarter_id = quarter_id

    @property
    def quarter_name(self):
        """Gets the quarter_name of this Play.


        :return: The quarter_name of this Play.
        :rtype: str
        """
        return self._quarter_name

    @quarter_name.setter
    def quarter_name(self, quarter_name):
        """Sets the quarter_name of this Play.


        :param quarter_name: The quarter_name of this Play.
        :type quarter_name: str
        """

        self._quarter_name = quarter_name

    @property
    def receiving_player_id(self):
        """Gets the receiving_player_id of this Play.


        :return: The receiving_player_id of this Play.
        :rtype: int
        """
        return self._receiving_player_id

    @receiving_player_id.setter
    def receiving_player_id(self, receiving_player_id):
        """Sets the receiving_player_id of this Play.


        :param receiving_player_id: The receiving_player_id of this Play.
        :type receiving_player_id: int
        """

        self._receiving_player_id = receiving_player_id

    @property
    def receiving_team(self):
        """Gets the receiving_team of this Play.


        :return: The receiving_team of this Play.
        :rtype: str
        """
        return self._receiving_team

    @receiving_team.setter
    def receiving_team(self, receiving_team):
        """Sets the receiving_team of this Play.


        :param receiving_team: The receiving_team of this Play.
        :type receiving_team: str
        """

        self._receiving_team = receiving_team

    @property
    def receiving_team_id(self):
        """Gets the receiving_team_id of this Play.


        :return: The receiving_team_id of this Play.
        :rtype: int
        """
        return self._receiving_team_id

    @receiving_team_id.setter
    def receiving_team_id(self, receiving_team_id):
        """Sets the receiving_team_id of this Play.


        :param receiving_team_id: The receiving_team_id of this Play.
        :type receiving_team_id: int
        """

        self._receiving_team_id = receiving_team_id

    @property
    def sequence(self):
        """Gets the sequence of this Play.


        :return: The sequence of this Play.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Play.


        :param sequence: The sequence of this Play.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def shot_made(self):
        """Gets the shot_made of this Play.


        :return: The shot_made of this Play.
        :rtype: bool
        """
        return self._shot_made

    @shot_made.setter
    def shot_made(self, shot_made):
        """Sets the shot_made of this Play.


        :param shot_made: The shot_made of this Play.
        :type shot_made: bool
        """

        self._shot_made = shot_made

    @property
    def side_of_basket(self):
        """Gets the side_of_basket of this Play.


        :return: The side_of_basket of this Play.
        :rtype: str
        """
        return self._side_of_basket

    @side_of_basket.setter
    def side_of_basket(self, side_of_basket):
        """Sets the side_of_basket of this Play.


        :param side_of_basket: The side_of_basket of this Play.
        :type side_of_basket: str
        """

        self._side_of_basket = side_of_basket

    @property
    def sideline_offset_percentage(self):
        """Gets the sideline_offset_percentage of this Play.


        :return: The sideline_offset_percentage of this Play.
        :rtype: float
        """
        return self._sideline_offset_percentage

    @sideline_offset_percentage.setter
    def sideline_offset_percentage(self, sideline_offset_percentage):
        """Sets the sideline_offset_percentage of this Play.


        :param sideline_offset_percentage: The sideline_offset_percentage of this Play.
        :type sideline_offset_percentage: float
        """

        self._sideline_offset_percentage = sideline_offset_percentage

    @property
    def stolen_by_player_id(self):
        """Gets the stolen_by_player_id of this Play.


        :return: The stolen_by_player_id of this Play.
        :rtype: int
        """
        return self._stolen_by_player_id

    @stolen_by_player_id.setter
    def stolen_by_player_id(self, stolen_by_player_id):
        """Sets the stolen_by_player_id of this Play.


        :param stolen_by_player_id: The stolen_by_player_id of this Play.
        :type stolen_by_player_id: int
        """

        self._stolen_by_player_id = stolen_by_player_id

    @property
    def substitute_in_player_id(self):
        """Gets the substitute_in_player_id of this Play.


        :return: The substitute_in_player_id of this Play.
        :rtype: int
        """
        return self._substitute_in_player_id

    @substitute_in_player_id.setter
    def substitute_in_player_id(self, substitute_in_player_id):
        """Sets the substitute_in_player_id of this Play.


        :param substitute_in_player_id: The substitute_in_player_id of this Play.
        :type substitute_in_player_id: int
        """

        self._substitute_in_player_id = substitute_in_player_id

    @property
    def substitute_out_player_id(self):
        """Gets the substitute_out_player_id of this Play.


        :return: The substitute_out_player_id of this Play.
        :rtype: int
        """
        return self._substitute_out_player_id

    @substitute_out_player_id.setter
    def substitute_out_player_id(self, substitute_out_player_id):
        """Sets the substitute_out_player_id of this Play.


        :param substitute_out_player_id: The substitute_out_player_id of this Play.
        :type substitute_out_player_id: int
        """

        self._substitute_out_player_id = substitute_out_player_id

    @property
    def team(self):
        """Gets the team of this Play.


        :return: The team of this Play.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Play.


        :param team: The team of this Play.
        :type team: str
        """

        self._team = team

    @property
    def team_id(self):
        """Gets the team_id of this Play.


        :return: The team_id of this Play.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Play.


        :param team_id: The team_id of this Play.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def time_remaining_minutes(self):
        """Gets the time_remaining_minutes of this Play.


        :return: The time_remaining_minutes of this Play.
        :rtype: int
        """
        return self._time_remaining_minutes

    @time_remaining_minutes.setter
    def time_remaining_minutes(self, time_remaining_minutes):
        """Sets the time_remaining_minutes of this Play.


        :param time_remaining_minutes: The time_remaining_minutes of this Play.
        :type time_remaining_minutes: int
        """

        self._time_remaining_minutes = time_remaining_minutes

    @property
    def time_remaining_seconds(self):
        """Gets the time_remaining_seconds of this Play.


        :return: The time_remaining_seconds of this Play.
        :rtype: int
        """
        return self._time_remaining_seconds

    @time_remaining_seconds.setter
    def time_remaining_seconds(self, time_remaining_seconds):
        """Sets the time_remaining_seconds of this Play.


        :param time_remaining_seconds: The time_remaining_seconds of this Play.
        :type time_remaining_seconds: int
        """

        self._time_remaining_seconds = time_remaining_seconds

    @property
    def type(self):
        """Gets the type of this Play.


        :return: The type of this Play.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Play.


        :param type: The type of this Play.
        :type type: str
        """

        self._type = type

    @property
    def updated(self):
        """Gets the updated of this Play.


        :return: The updated of this Play.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Play.


        :param updated: The updated of this Play.
        :type updated: str
        """

        self._updated = updated
