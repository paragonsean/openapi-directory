/**
 * NBA v3 Play-by-Play
 * NBA play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlay::OAIPlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlay::OAIPlay() {
    this->initializeModel();
}

OAIPlay::~OAIPlay() {}

void OAIPlay::initializeModel() {

    m_assisted_by_player_id_isSet = false;
    m_assisted_by_player_id_isValid = false;

    m_away_player_id_isSet = false;
    m_away_player_id_isValid = false;

    m_away_team_score_isSet = false;
    m_away_team_score_isValid = false;

    m_baseline_offset_percentage_isSet = false;
    m_baseline_offset_percentage_isValid = false;

    m_blocked_by_player_id_isSet = false;
    m_blocked_by_player_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fast_break_isSet = false;
    m_fast_break_isValid = false;

    m_home_player_id_isSet = false;
    m_home_player_id_isValid = false;

    m_home_team_score_isSet = false;
    m_home_team_score_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_id_isSet = false;
    m_opponent_id_isValid = false;

    m_play_id_isSet = false;
    m_play_id_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_potential_points_isSet = false;
    m_potential_points_isValid = false;

    m_quarter_id_isSet = false;
    m_quarter_id_isValid = false;

    m_quarter_name_isSet = false;
    m_quarter_name_isValid = false;

    m_receiving_player_id_isSet = false;
    m_receiving_player_id_isValid = false;

    m_receiving_team_isSet = false;
    m_receiving_team_isValid = false;

    m_receiving_team_id_isSet = false;
    m_receiving_team_id_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_shot_made_isSet = false;
    m_shot_made_isValid = false;

    m_side_of_basket_isSet = false;
    m_side_of_basket_isValid = false;

    m_sideline_offset_percentage_isSet = false;
    m_sideline_offset_percentage_isValid = false;

    m_stolen_by_player_id_isSet = false;
    m_stolen_by_player_id_isValid = false;

    m_substitute_in_player_id_isSet = false;
    m_substitute_in_player_id_isValid = false;

    m_substitute_out_player_id_isSet = false;
    m_substitute_out_player_id_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_time_remaining_minutes_isSet = false;
    m_time_remaining_minutes_isValid = false;

    m_time_remaining_seconds_isSet = false;
    m_time_remaining_seconds_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIPlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlay::fromJsonObject(QJsonObject json) {

    m_assisted_by_player_id_isValid = ::OpenAPI::fromJsonValue(m_assisted_by_player_id, json[QString("AssistedByPlayerID")]);
    m_assisted_by_player_id_isSet = !json[QString("AssistedByPlayerID")].isNull() && m_assisted_by_player_id_isValid;

    m_away_player_id_isValid = ::OpenAPI::fromJsonValue(m_away_player_id, json[QString("AwayPlayerID")]);
    m_away_player_id_isSet = !json[QString("AwayPlayerID")].isNull() && m_away_player_id_isValid;

    m_away_team_score_isValid = ::OpenAPI::fromJsonValue(m_away_team_score, json[QString("AwayTeamScore")]);
    m_away_team_score_isSet = !json[QString("AwayTeamScore")].isNull() && m_away_team_score_isValid;

    m_baseline_offset_percentage_isValid = ::OpenAPI::fromJsonValue(m_baseline_offset_percentage, json[QString("BaselineOffsetPercentage")]);
    m_baseline_offset_percentage_isSet = !json[QString("BaselineOffsetPercentage")].isNull() && m_baseline_offset_percentage_isValid;

    m_blocked_by_player_id_isValid = ::OpenAPI::fromJsonValue(m_blocked_by_player_id, json[QString("BlockedByPlayerID")]);
    m_blocked_by_player_id_isSet = !json[QString("BlockedByPlayerID")].isNull() && m_blocked_by_player_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("Coordinates")]);
    m_coordinates_isSet = !json[QString("Coordinates")].isNull() && m_coordinates_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_fast_break_isValid = ::OpenAPI::fromJsonValue(m_fast_break, json[QString("FastBreak")]);
    m_fast_break_isSet = !json[QString("FastBreak")].isNull() && m_fast_break_isValid;

    m_home_player_id_isValid = ::OpenAPI::fromJsonValue(m_home_player_id, json[QString("HomePlayerID")]);
    m_home_player_id_isSet = !json[QString("HomePlayerID")].isNull() && m_home_player_id_isValid;

    m_home_team_score_isValid = ::OpenAPI::fromJsonValue(m_home_team_score, json[QString("HomeTeamScore")]);
    m_home_team_score_isSet = !json[QString("HomeTeamScore")].isNull() && m_home_team_score_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("Opponent")]);
    m_opponent_isSet = !json[QString("Opponent")].isNull() && m_opponent_isValid;

    m_opponent_id_isValid = ::OpenAPI::fromJsonValue(m_opponent_id, json[QString("OpponentID")]);
    m_opponent_id_isSet = !json[QString("OpponentID")].isNull() && m_opponent_id_isValid;

    m_play_id_isValid = ::OpenAPI::fromJsonValue(m_play_id, json[QString("PlayID")]);
    m_play_id_isSet = !json[QString("PlayID")].isNull() && m_play_id_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("Points")]);
    m_points_isSet = !json[QString("Points")].isNull() && m_points_isValid;

    m_potential_points_isValid = ::OpenAPI::fromJsonValue(m_potential_points, json[QString("PotentialPoints")]);
    m_potential_points_isSet = !json[QString("PotentialPoints")].isNull() && m_potential_points_isValid;

    m_quarter_id_isValid = ::OpenAPI::fromJsonValue(m_quarter_id, json[QString("QuarterID")]);
    m_quarter_id_isSet = !json[QString("QuarterID")].isNull() && m_quarter_id_isValid;

    m_quarter_name_isValid = ::OpenAPI::fromJsonValue(m_quarter_name, json[QString("QuarterName")]);
    m_quarter_name_isSet = !json[QString("QuarterName")].isNull() && m_quarter_name_isValid;

    m_receiving_player_id_isValid = ::OpenAPI::fromJsonValue(m_receiving_player_id, json[QString("ReceivingPlayerID")]);
    m_receiving_player_id_isSet = !json[QString("ReceivingPlayerID")].isNull() && m_receiving_player_id_isValid;

    m_receiving_team_isValid = ::OpenAPI::fromJsonValue(m_receiving_team, json[QString("ReceivingTeam")]);
    m_receiving_team_isSet = !json[QString("ReceivingTeam")].isNull() && m_receiving_team_isValid;

    m_receiving_team_id_isValid = ::OpenAPI::fromJsonValue(m_receiving_team_id, json[QString("ReceivingTeamID")]);
    m_receiving_team_id_isSet = !json[QString("ReceivingTeamID")].isNull() && m_receiving_team_id_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("Sequence")]);
    m_sequence_isSet = !json[QString("Sequence")].isNull() && m_sequence_isValid;

    m_shot_made_isValid = ::OpenAPI::fromJsonValue(m_shot_made, json[QString("ShotMade")]);
    m_shot_made_isSet = !json[QString("ShotMade")].isNull() && m_shot_made_isValid;

    m_side_of_basket_isValid = ::OpenAPI::fromJsonValue(m_side_of_basket, json[QString("SideOfBasket")]);
    m_side_of_basket_isSet = !json[QString("SideOfBasket")].isNull() && m_side_of_basket_isValid;

    m_sideline_offset_percentage_isValid = ::OpenAPI::fromJsonValue(m_sideline_offset_percentage, json[QString("SidelineOffsetPercentage")]);
    m_sideline_offset_percentage_isSet = !json[QString("SidelineOffsetPercentage")].isNull() && m_sideline_offset_percentage_isValid;

    m_stolen_by_player_id_isValid = ::OpenAPI::fromJsonValue(m_stolen_by_player_id, json[QString("StolenByPlayerID")]);
    m_stolen_by_player_id_isSet = !json[QString("StolenByPlayerID")].isNull() && m_stolen_by_player_id_isValid;

    m_substitute_in_player_id_isValid = ::OpenAPI::fromJsonValue(m_substitute_in_player_id, json[QString("SubstituteInPlayerID")]);
    m_substitute_in_player_id_isSet = !json[QString("SubstituteInPlayerID")].isNull() && m_substitute_in_player_id_isValid;

    m_substitute_out_player_id_isValid = ::OpenAPI::fromJsonValue(m_substitute_out_player_id, json[QString("SubstituteOutPlayerID")]);
    m_substitute_out_player_id_isSet = !json[QString("SubstituteOutPlayerID")].isNull() && m_substitute_out_player_id_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;

    m_time_remaining_minutes_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_minutes, json[QString("TimeRemainingMinutes")]);
    m_time_remaining_minutes_isSet = !json[QString("TimeRemainingMinutes")].isNull() && m_time_remaining_minutes_isValid;

    m_time_remaining_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_remaining_seconds, json[QString("TimeRemainingSeconds")]);
    m_time_remaining_seconds_isSet = !json[QString("TimeRemainingSeconds")].isNull() && m_time_remaining_seconds_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;
}

QString OAIPlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlay::asJsonObject() const {
    QJsonObject obj;
    if (m_assisted_by_player_id_isSet) {
        obj.insert(QString("AssistedByPlayerID"), ::OpenAPI::toJsonValue(m_assisted_by_player_id));
    }
    if (m_away_player_id_isSet) {
        obj.insert(QString("AwayPlayerID"), ::OpenAPI::toJsonValue(m_away_player_id));
    }
    if (m_away_team_score_isSet) {
        obj.insert(QString("AwayTeamScore"), ::OpenAPI::toJsonValue(m_away_team_score));
    }
    if (m_baseline_offset_percentage_isSet) {
        obj.insert(QString("BaselineOffsetPercentage"), ::OpenAPI::toJsonValue(m_baseline_offset_percentage));
    }
    if (m_blocked_by_player_id_isSet) {
        obj.insert(QString("BlockedByPlayerID"), ::OpenAPI::toJsonValue(m_blocked_by_player_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_coordinates_isSet) {
        obj.insert(QString("Coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fast_break_isSet) {
        obj.insert(QString("FastBreak"), ::OpenAPI::toJsonValue(m_fast_break));
    }
    if (m_home_player_id_isSet) {
        obj.insert(QString("HomePlayerID"), ::OpenAPI::toJsonValue(m_home_player_id));
    }
    if (m_home_team_score_isSet) {
        obj.insert(QString("HomeTeamScore"), ::OpenAPI::toJsonValue(m_home_team_score));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("Opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_id_isSet) {
        obj.insert(QString("OpponentID"), ::OpenAPI::toJsonValue(m_opponent_id));
    }
    if (m_play_id_isSet) {
        obj.insert(QString("PlayID"), ::OpenAPI::toJsonValue(m_play_id));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_points_isSet) {
        obj.insert(QString("Points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_potential_points_isSet) {
        obj.insert(QString("PotentialPoints"), ::OpenAPI::toJsonValue(m_potential_points));
    }
    if (m_quarter_id_isSet) {
        obj.insert(QString("QuarterID"), ::OpenAPI::toJsonValue(m_quarter_id));
    }
    if (m_quarter_name_isSet) {
        obj.insert(QString("QuarterName"), ::OpenAPI::toJsonValue(m_quarter_name));
    }
    if (m_receiving_player_id_isSet) {
        obj.insert(QString("ReceivingPlayerID"), ::OpenAPI::toJsonValue(m_receiving_player_id));
    }
    if (m_receiving_team_isSet) {
        obj.insert(QString("ReceivingTeam"), ::OpenAPI::toJsonValue(m_receiving_team));
    }
    if (m_receiving_team_id_isSet) {
        obj.insert(QString("ReceivingTeamID"), ::OpenAPI::toJsonValue(m_receiving_team_id));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("Sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_shot_made_isSet) {
        obj.insert(QString("ShotMade"), ::OpenAPI::toJsonValue(m_shot_made));
    }
    if (m_side_of_basket_isSet) {
        obj.insert(QString("SideOfBasket"), ::OpenAPI::toJsonValue(m_side_of_basket));
    }
    if (m_sideline_offset_percentage_isSet) {
        obj.insert(QString("SidelineOffsetPercentage"), ::OpenAPI::toJsonValue(m_sideline_offset_percentage));
    }
    if (m_stolen_by_player_id_isSet) {
        obj.insert(QString("StolenByPlayerID"), ::OpenAPI::toJsonValue(m_stolen_by_player_id));
    }
    if (m_substitute_in_player_id_isSet) {
        obj.insert(QString("SubstituteInPlayerID"), ::OpenAPI::toJsonValue(m_substitute_in_player_id));
    }
    if (m_substitute_out_player_id_isSet) {
        obj.insert(QString("SubstituteOutPlayerID"), ::OpenAPI::toJsonValue(m_substitute_out_player_id));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_time_remaining_minutes_isSet) {
        obj.insert(QString("TimeRemainingMinutes"), ::OpenAPI::toJsonValue(m_time_remaining_minutes));
    }
    if (m_time_remaining_seconds_isSet) {
        obj.insert(QString("TimeRemainingSeconds"), ::OpenAPI::toJsonValue(m_time_remaining_seconds));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIPlay::getAssistedByPlayerId() const {
    return m_assisted_by_player_id;
}
void OAIPlay::setAssistedByPlayerId(const qint32 &assisted_by_player_id) {
    m_assisted_by_player_id = assisted_by_player_id;
    m_assisted_by_player_id_isSet = true;
}

bool OAIPlay::is_assisted_by_player_id_Set() const{
    return m_assisted_by_player_id_isSet;
}

bool OAIPlay::is_assisted_by_player_id_Valid() const{
    return m_assisted_by_player_id_isValid;
}

qint32 OAIPlay::getAwayPlayerId() const {
    return m_away_player_id;
}
void OAIPlay::setAwayPlayerId(const qint32 &away_player_id) {
    m_away_player_id = away_player_id;
    m_away_player_id_isSet = true;
}

bool OAIPlay::is_away_player_id_Set() const{
    return m_away_player_id_isSet;
}

bool OAIPlay::is_away_player_id_Valid() const{
    return m_away_player_id_isValid;
}

qint32 OAIPlay::getAwayTeamScore() const {
    return m_away_team_score;
}
void OAIPlay::setAwayTeamScore(const qint32 &away_team_score) {
    m_away_team_score = away_team_score;
    m_away_team_score_isSet = true;
}

bool OAIPlay::is_away_team_score_Set() const{
    return m_away_team_score_isSet;
}

bool OAIPlay::is_away_team_score_Valid() const{
    return m_away_team_score_isValid;
}

double OAIPlay::getBaselineOffsetPercentage() const {
    return m_baseline_offset_percentage;
}
void OAIPlay::setBaselineOffsetPercentage(const double &baseline_offset_percentage) {
    m_baseline_offset_percentage = baseline_offset_percentage;
    m_baseline_offset_percentage_isSet = true;
}

bool OAIPlay::is_baseline_offset_percentage_Set() const{
    return m_baseline_offset_percentage_isSet;
}

bool OAIPlay::is_baseline_offset_percentage_Valid() const{
    return m_baseline_offset_percentage_isValid;
}

qint32 OAIPlay::getBlockedByPlayerId() const {
    return m_blocked_by_player_id;
}
void OAIPlay::setBlockedByPlayerId(const qint32 &blocked_by_player_id) {
    m_blocked_by_player_id = blocked_by_player_id;
    m_blocked_by_player_id_isSet = true;
}

bool OAIPlay::is_blocked_by_player_id_Set() const{
    return m_blocked_by_player_id_isSet;
}

bool OAIPlay::is_blocked_by_player_id_Valid() const{
    return m_blocked_by_player_id_isValid;
}

QString OAIPlay::getCategory() const {
    return m_category;
}
void OAIPlay::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPlay::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPlay::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIPlay::getCoordinates() const {
    return m_coordinates;
}
void OAIPlay::setCoordinates(const QString &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIPlay::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIPlay::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QString OAIPlay::getCreated() const {
    return m_created;
}
void OAIPlay::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPlay::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPlay::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPlay::getDescription() const {
    return m_description;
}
void OAIPlay::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlay::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlay::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPlay::isFastBreak() const {
    return m_fast_break;
}
void OAIPlay::setFastBreak(const bool &fast_break) {
    m_fast_break = fast_break;
    m_fast_break_isSet = true;
}

bool OAIPlay::is_fast_break_Set() const{
    return m_fast_break_isSet;
}

bool OAIPlay::is_fast_break_Valid() const{
    return m_fast_break_isValid;
}

qint32 OAIPlay::getHomePlayerId() const {
    return m_home_player_id;
}
void OAIPlay::setHomePlayerId(const qint32 &home_player_id) {
    m_home_player_id = home_player_id;
    m_home_player_id_isSet = true;
}

bool OAIPlay::is_home_player_id_Set() const{
    return m_home_player_id_isSet;
}

bool OAIPlay::is_home_player_id_Valid() const{
    return m_home_player_id_isValid;
}

qint32 OAIPlay::getHomeTeamScore() const {
    return m_home_team_score;
}
void OAIPlay::setHomeTeamScore(const qint32 &home_team_score) {
    m_home_team_score = home_team_score;
    m_home_team_score_isSet = true;
}

bool OAIPlay::is_home_team_score_Set() const{
    return m_home_team_score_isSet;
}

bool OAIPlay::is_home_team_score_Valid() const{
    return m_home_team_score_isValid;
}

QString OAIPlay::getOpponent() const {
    return m_opponent;
}
void OAIPlay::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIPlay::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIPlay::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIPlay::getOpponentId() const {
    return m_opponent_id;
}
void OAIPlay::setOpponentId(const qint32 &opponent_id) {
    m_opponent_id = opponent_id;
    m_opponent_id_isSet = true;
}

bool OAIPlay::is_opponent_id_Set() const{
    return m_opponent_id_isSet;
}

bool OAIPlay::is_opponent_id_Valid() const{
    return m_opponent_id_isValid;
}

qint32 OAIPlay::getPlayId() const {
    return m_play_id;
}
void OAIPlay::setPlayId(const qint32 &play_id) {
    m_play_id = play_id;
    m_play_id_isSet = true;
}

bool OAIPlay::is_play_id_Set() const{
    return m_play_id_isSet;
}

bool OAIPlay::is_play_id_Valid() const{
    return m_play_id_isValid;
}

qint32 OAIPlay::getPlayerId() const {
    return m_player_id;
}
void OAIPlay::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlay::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlay::is_player_id_Valid() const{
    return m_player_id_isValid;
}

qint32 OAIPlay::getPoints() const {
    return m_points;
}
void OAIPlay::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIPlay::is_points_Set() const{
    return m_points_isSet;
}

bool OAIPlay::is_points_Valid() const{
    return m_points_isValid;
}

qint32 OAIPlay::getPotentialPoints() const {
    return m_potential_points;
}
void OAIPlay::setPotentialPoints(const qint32 &potential_points) {
    m_potential_points = potential_points;
    m_potential_points_isSet = true;
}

bool OAIPlay::is_potential_points_Set() const{
    return m_potential_points_isSet;
}

bool OAIPlay::is_potential_points_Valid() const{
    return m_potential_points_isValid;
}

qint32 OAIPlay::getQuarterId() const {
    return m_quarter_id;
}
void OAIPlay::setQuarterId(const qint32 &quarter_id) {
    m_quarter_id = quarter_id;
    m_quarter_id_isSet = true;
}

bool OAIPlay::is_quarter_id_Set() const{
    return m_quarter_id_isSet;
}

bool OAIPlay::is_quarter_id_Valid() const{
    return m_quarter_id_isValid;
}

QString OAIPlay::getQuarterName() const {
    return m_quarter_name;
}
void OAIPlay::setQuarterName(const QString &quarter_name) {
    m_quarter_name = quarter_name;
    m_quarter_name_isSet = true;
}

bool OAIPlay::is_quarter_name_Set() const{
    return m_quarter_name_isSet;
}

bool OAIPlay::is_quarter_name_Valid() const{
    return m_quarter_name_isValid;
}

qint32 OAIPlay::getReceivingPlayerId() const {
    return m_receiving_player_id;
}
void OAIPlay::setReceivingPlayerId(const qint32 &receiving_player_id) {
    m_receiving_player_id = receiving_player_id;
    m_receiving_player_id_isSet = true;
}

bool OAIPlay::is_receiving_player_id_Set() const{
    return m_receiving_player_id_isSet;
}

bool OAIPlay::is_receiving_player_id_Valid() const{
    return m_receiving_player_id_isValid;
}

QString OAIPlay::getReceivingTeam() const {
    return m_receiving_team;
}
void OAIPlay::setReceivingTeam(const QString &receiving_team) {
    m_receiving_team = receiving_team;
    m_receiving_team_isSet = true;
}

bool OAIPlay::is_receiving_team_Set() const{
    return m_receiving_team_isSet;
}

bool OAIPlay::is_receiving_team_Valid() const{
    return m_receiving_team_isValid;
}

qint32 OAIPlay::getReceivingTeamId() const {
    return m_receiving_team_id;
}
void OAIPlay::setReceivingTeamId(const qint32 &receiving_team_id) {
    m_receiving_team_id = receiving_team_id;
    m_receiving_team_id_isSet = true;
}

bool OAIPlay::is_receiving_team_id_Set() const{
    return m_receiving_team_id_isSet;
}

bool OAIPlay::is_receiving_team_id_Valid() const{
    return m_receiving_team_id_isValid;
}

qint32 OAIPlay::getSequence() const {
    return m_sequence;
}
void OAIPlay::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIPlay::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIPlay::is_sequence_Valid() const{
    return m_sequence_isValid;
}

bool OAIPlay::isShotMade() const {
    return m_shot_made;
}
void OAIPlay::setShotMade(const bool &shot_made) {
    m_shot_made = shot_made;
    m_shot_made_isSet = true;
}

bool OAIPlay::is_shot_made_Set() const{
    return m_shot_made_isSet;
}

bool OAIPlay::is_shot_made_Valid() const{
    return m_shot_made_isValid;
}

QString OAIPlay::getSideOfBasket() const {
    return m_side_of_basket;
}
void OAIPlay::setSideOfBasket(const QString &side_of_basket) {
    m_side_of_basket = side_of_basket;
    m_side_of_basket_isSet = true;
}

bool OAIPlay::is_side_of_basket_Set() const{
    return m_side_of_basket_isSet;
}

bool OAIPlay::is_side_of_basket_Valid() const{
    return m_side_of_basket_isValid;
}

double OAIPlay::getSidelineOffsetPercentage() const {
    return m_sideline_offset_percentage;
}
void OAIPlay::setSidelineOffsetPercentage(const double &sideline_offset_percentage) {
    m_sideline_offset_percentage = sideline_offset_percentage;
    m_sideline_offset_percentage_isSet = true;
}

bool OAIPlay::is_sideline_offset_percentage_Set() const{
    return m_sideline_offset_percentage_isSet;
}

bool OAIPlay::is_sideline_offset_percentage_Valid() const{
    return m_sideline_offset_percentage_isValid;
}

qint32 OAIPlay::getStolenByPlayerId() const {
    return m_stolen_by_player_id;
}
void OAIPlay::setStolenByPlayerId(const qint32 &stolen_by_player_id) {
    m_stolen_by_player_id = stolen_by_player_id;
    m_stolen_by_player_id_isSet = true;
}

bool OAIPlay::is_stolen_by_player_id_Set() const{
    return m_stolen_by_player_id_isSet;
}

bool OAIPlay::is_stolen_by_player_id_Valid() const{
    return m_stolen_by_player_id_isValid;
}

qint32 OAIPlay::getSubstituteInPlayerId() const {
    return m_substitute_in_player_id;
}
void OAIPlay::setSubstituteInPlayerId(const qint32 &substitute_in_player_id) {
    m_substitute_in_player_id = substitute_in_player_id;
    m_substitute_in_player_id_isSet = true;
}

bool OAIPlay::is_substitute_in_player_id_Set() const{
    return m_substitute_in_player_id_isSet;
}

bool OAIPlay::is_substitute_in_player_id_Valid() const{
    return m_substitute_in_player_id_isValid;
}

qint32 OAIPlay::getSubstituteOutPlayerId() const {
    return m_substitute_out_player_id;
}
void OAIPlay::setSubstituteOutPlayerId(const qint32 &substitute_out_player_id) {
    m_substitute_out_player_id = substitute_out_player_id;
    m_substitute_out_player_id_isSet = true;
}

bool OAIPlay::is_substitute_out_player_id_Set() const{
    return m_substitute_out_player_id_isSet;
}

bool OAIPlay::is_substitute_out_player_id_Valid() const{
    return m_substitute_out_player_id_isValid;
}

QString OAIPlay::getTeam() const {
    return m_team;
}
void OAIPlay::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlay::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlay::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlay::getTeamId() const {
    return m_team_id;
}
void OAIPlay::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIPlay::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIPlay::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIPlay::getTimeRemainingMinutes() const {
    return m_time_remaining_minutes;
}
void OAIPlay::setTimeRemainingMinutes(const qint32 &time_remaining_minutes) {
    m_time_remaining_minutes = time_remaining_minutes;
    m_time_remaining_minutes_isSet = true;
}

bool OAIPlay::is_time_remaining_minutes_Set() const{
    return m_time_remaining_minutes_isSet;
}

bool OAIPlay::is_time_remaining_minutes_Valid() const{
    return m_time_remaining_minutes_isValid;
}

qint32 OAIPlay::getTimeRemainingSeconds() const {
    return m_time_remaining_seconds;
}
void OAIPlay::setTimeRemainingSeconds(const qint32 &time_remaining_seconds) {
    m_time_remaining_seconds = time_remaining_seconds;
    m_time_remaining_seconds_isSet = true;
}

bool OAIPlay::is_time_remaining_seconds_Set() const{
    return m_time_remaining_seconds_isSet;
}

bool OAIPlay::is_time_remaining_seconds_Valid() const{
    return m_time_remaining_seconds_isValid;
}

QString OAIPlay::getType() const {
    return m_type;
}
void OAIPlay::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlay::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlay::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPlay::getUpdated() const {
    return m_updated;
}
void OAIPlay::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPlay::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPlay::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIPlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assisted_by_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_offset_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_by_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fast_break_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shot_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_of_basket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sideline_offset_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stolen_by_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitute_in_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitute_out_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
