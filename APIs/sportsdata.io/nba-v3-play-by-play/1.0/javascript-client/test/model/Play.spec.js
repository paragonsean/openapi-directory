/**
 * NBA v3 Play-by-Play
 * NBA play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NbaV3PlayByPlay);
  }
}(this, function(expect, NbaV3PlayByPlay) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NbaV3PlayByPlay.Play();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Play', function() {
    it('should create an instance of Play', function() {
      // uncomment below and update the code to test Play
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be.a(NbaV3PlayByPlay.Play);
    });

    it('should have the property assistedByPlayerID (base name: "AssistedByPlayerID")', function() {
      // uncomment below and update the code to test the property assistedByPlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property awayPlayerID (base name: "AwayPlayerID")', function() {
      // uncomment below and update the code to test the property awayPlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property awayTeamScore (base name: "AwayTeamScore")', function() {
      // uncomment below and update the code to test the property awayTeamScore
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property baselineOffsetPercentage (base name: "BaselineOffsetPercentage")', function() {
      // uncomment below and update the code to test the property baselineOffsetPercentage
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property blockedByPlayerID (base name: "BlockedByPlayerID")', function() {
      // uncomment below and update the code to test the property blockedByPlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "Category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property coordinates (base name: "Coordinates")', function() {
      // uncomment below and update the code to test the property coordinates
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "Created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property fastBreak (base name: "FastBreak")', function() {
      // uncomment below and update the code to test the property fastBreak
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property homePlayerID (base name: "HomePlayerID")', function() {
      // uncomment below and update the code to test the property homePlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property homeTeamScore (base name: "HomeTeamScore")', function() {
      // uncomment below and update the code to test the property homeTeamScore
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property opponent (base name: "Opponent")', function() {
      // uncomment below and update the code to test the property opponent
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property opponentID (base name: "OpponentID")', function() {
      // uncomment below and update the code to test the property opponentID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property playID (base name: "PlayID")', function() {
      // uncomment below and update the code to test the property playID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property playerID (base name: "PlayerID")', function() {
      // uncomment below and update the code to test the property playerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "Points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property potentialPoints (base name: "PotentialPoints")', function() {
      // uncomment below and update the code to test the property potentialPoints
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property quarterID (base name: "QuarterID")', function() {
      // uncomment below and update the code to test the property quarterID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property quarterName (base name: "QuarterName")', function() {
      // uncomment below and update the code to test the property quarterName
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property receivingPlayerID (base name: "ReceivingPlayerID")', function() {
      // uncomment below and update the code to test the property receivingPlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property receivingTeam (base name: "ReceivingTeam")', function() {
      // uncomment below and update the code to test the property receivingTeam
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property receivingTeamID (base name: "ReceivingTeamID")', function() {
      // uncomment below and update the code to test the property receivingTeamID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property sequence (base name: "Sequence")', function() {
      // uncomment below and update the code to test the property sequence
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property shotMade (base name: "ShotMade")', function() {
      // uncomment below and update the code to test the property shotMade
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property sideOfBasket (base name: "SideOfBasket")', function() {
      // uncomment below and update the code to test the property sideOfBasket
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property sidelineOffsetPercentage (base name: "SidelineOffsetPercentage")', function() {
      // uncomment below and update the code to test the property sidelineOffsetPercentage
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property stolenByPlayerID (base name: "StolenByPlayerID")', function() {
      // uncomment below and update the code to test the property stolenByPlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property substituteInPlayerID (base name: "SubstituteInPlayerID")', function() {
      // uncomment below and update the code to test the property substituteInPlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property substituteOutPlayerID (base name: "SubstituteOutPlayerID")', function() {
      // uncomment below and update the code to test the property substituteOutPlayerID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property team (base name: "Team")', function() {
      // uncomment below and update the code to test the property team
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property teamID (base name: "TeamID")', function() {
      // uncomment below and update the code to test the property teamID
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property timeRemainingMinutes (base name: "TimeRemainingMinutes")', function() {
      // uncomment below and update the code to test the property timeRemainingMinutes
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property timeRemainingSeconds (base name: "TimeRemainingSeconds")', function() {
      // uncomment below and update the code to test the property timeRemainingSeconds
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "Updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new NbaV3PlayByPlay.Play();
      //expect(instance).to.be();
    });

  });

}));
