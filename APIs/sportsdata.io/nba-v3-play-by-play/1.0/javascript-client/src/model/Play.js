/**
 * NBA v3 Play-by-Play
 * NBA play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Play model module.
 * @module model/Play
 * @version 1.0
 */
class Play {
    /**
     * Constructs a new <code>Play</code>.
     * @alias module:model/Play
     */
    constructor() { 
        
        Play.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Play</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Play} obj Optional instance to populate.
     * @return {module:model/Play} The populated <code>Play</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Play();

            if (data.hasOwnProperty('AssistedByPlayerID')) {
                obj['AssistedByPlayerID'] = ApiClient.convertToType(data['AssistedByPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('AwayPlayerID')) {
                obj['AwayPlayerID'] = ApiClient.convertToType(data['AwayPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('AwayTeamScore')) {
                obj['AwayTeamScore'] = ApiClient.convertToType(data['AwayTeamScore'], 'Number');
            }
            if (data.hasOwnProperty('BaselineOffsetPercentage')) {
                obj['BaselineOffsetPercentage'] = ApiClient.convertToType(data['BaselineOffsetPercentage'], 'Number');
            }
            if (data.hasOwnProperty('BlockedByPlayerID')) {
                obj['BlockedByPlayerID'] = ApiClient.convertToType(data['BlockedByPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('Category')) {
                obj['Category'] = ApiClient.convertToType(data['Category'], 'String');
            }
            if (data.hasOwnProperty('Coordinates')) {
                obj['Coordinates'] = ApiClient.convertToType(data['Coordinates'], 'String');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('FastBreak')) {
                obj['FastBreak'] = ApiClient.convertToType(data['FastBreak'], 'Boolean');
            }
            if (data.hasOwnProperty('HomePlayerID')) {
                obj['HomePlayerID'] = ApiClient.convertToType(data['HomePlayerID'], 'Number');
            }
            if (data.hasOwnProperty('HomeTeamScore')) {
                obj['HomeTeamScore'] = ApiClient.convertToType(data['HomeTeamScore'], 'Number');
            }
            if (data.hasOwnProperty('Opponent')) {
                obj['Opponent'] = ApiClient.convertToType(data['Opponent'], 'String');
            }
            if (data.hasOwnProperty('OpponentID')) {
                obj['OpponentID'] = ApiClient.convertToType(data['OpponentID'], 'Number');
            }
            if (data.hasOwnProperty('PlayID')) {
                obj['PlayID'] = ApiClient.convertToType(data['PlayID'], 'Number');
            }
            if (data.hasOwnProperty('PlayerID')) {
                obj['PlayerID'] = ApiClient.convertToType(data['PlayerID'], 'Number');
            }
            if (data.hasOwnProperty('Points')) {
                obj['Points'] = ApiClient.convertToType(data['Points'], 'Number');
            }
            if (data.hasOwnProperty('PotentialPoints')) {
                obj['PotentialPoints'] = ApiClient.convertToType(data['PotentialPoints'], 'Number');
            }
            if (data.hasOwnProperty('QuarterID')) {
                obj['QuarterID'] = ApiClient.convertToType(data['QuarterID'], 'Number');
            }
            if (data.hasOwnProperty('QuarterName')) {
                obj['QuarterName'] = ApiClient.convertToType(data['QuarterName'], 'String');
            }
            if (data.hasOwnProperty('ReceivingPlayerID')) {
                obj['ReceivingPlayerID'] = ApiClient.convertToType(data['ReceivingPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('ReceivingTeam')) {
                obj['ReceivingTeam'] = ApiClient.convertToType(data['ReceivingTeam'], 'String');
            }
            if (data.hasOwnProperty('ReceivingTeamID')) {
                obj['ReceivingTeamID'] = ApiClient.convertToType(data['ReceivingTeamID'], 'Number');
            }
            if (data.hasOwnProperty('Sequence')) {
                obj['Sequence'] = ApiClient.convertToType(data['Sequence'], 'Number');
            }
            if (data.hasOwnProperty('ShotMade')) {
                obj['ShotMade'] = ApiClient.convertToType(data['ShotMade'], 'Boolean');
            }
            if (data.hasOwnProperty('SideOfBasket')) {
                obj['SideOfBasket'] = ApiClient.convertToType(data['SideOfBasket'], 'String');
            }
            if (data.hasOwnProperty('SidelineOffsetPercentage')) {
                obj['SidelineOffsetPercentage'] = ApiClient.convertToType(data['SidelineOffsetPercentage'], 'Number');
            }
            if (data.hasOwnProperty('StolenByPlayerID')) {
                obj['StolenByPlayerID'] = ApiClient.convertToType(data['StolenByPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('SubstituteInPlayerID')) {
                obj['SubstituteInPlayerID'] = ApiClient.convertToType(data['SubstituteInPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('SubstituteOutPlayerID')) {
                obj['SubstituteOutPlayerID'] = ApiClient.convertToType(data['SubstituteOutPlayerID'], 'Number');
            }
            if (data.hasOwnProperty('Team')) {
                obj['Team'] = ApiClient.convertToType(data['Team'], 'String');
            }
            if (data.hasOwnProperty('TeamID')) {
                obj['TeamID'] = ApiClient.convertToType(data['TeamID'], 'Number');
            }
            if (data.hasOwnProperty('TimeRemainingMinutes')) {
                obj['TimeRemainingMinutes'] = ApiClient.convertToType(data['TimeRemainingMinutes'], 'Number');
            }
            if (data.hasOwnProperty('TimeRemainingSeconds')) {
                obj['TimeRemainingSeconds'] = ApiClient.convertToType(data['TimeRemainingSeconds'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Play</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Play</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Category'] && !(typeof data['Category'] === 'string' || data['Category'] instanceof String)) {
            throw new Error("Expected the field `Category` to be a primitive type in the JSON string but got " + data['Category']);
        }
        // ensure the json data is a string
        if (data['Coordinates'] && !(typeof data['Coordinates'] === 'string' || data['Coordinates'] instanceof String)) {
            throw new Error("Expected the field `Coordinates` to be a primitive type in the JSON string but got " + data['Coordinates']);
        }
        // ensure the json data is a string
        if (data['Created'] && !(typeof data['Created'] === 'string' || data['Created'] instanceof String)) {
            throw new Error("Expected the field `Created` to be a primitive type in the JSON string but got " + data['Created']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Opponent'] && !(typeof data['Opponent'] === 'string' || data['Opponent'] instanceof String)) {
            throw new Error("Expected the field `Opponent` to be a primitive type in the JSON string but got " + data['Opponent']);
        }
        // ensure the json data is a string
        if (data['QuarterName'] && !(typeof data['QuarterName'] === 'string' || data['QuarterName'] instanceof String)) {
            throw new Error("Expected the field `QuarterName` to be a primitive type in the JSON string but got " + data['QuarterName']);
        }
        // ensure the json data is a string
        if (data['ReceivingTeam'] && !(typeof data['ReceivingTeam'] === 'string' || data['ReceivingTeam'] instanceof String)) {
            throw new Error("Expected the field `ReceivingTeam` to be a primitive type in the JSON string but got " + data['ReceivingTeam']);
        }
        // ensure the json data is a string
        if (data['SideOfBasket'] && !(typeof data['SideOfBasket'] === 'string' || data['SideOfBasket'] instanceof String)) {
            throw new Error("Expected the field `SideOfBasket` to be a primitive type in the JSON string but got " + data['SideOfBasket']);
        }
        // ensure the json data is a string
        if (data['Team'] && !(typeof data['Team'] === 'string' || data['Team'] instanceof String)) {
            throw new Error("Expected the field `Team` to be a primitive type in the JSON string but got " + data['Team']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }

        return true;
    }


}



/**
 * @member {Number} AssistedByPlayerID
 */
Play.prototype['AssistedByPlayerID'] = undefined;

/**
 * @member {Number} AwayPlayerID
 */
Play.prototype['AwayPlayerID'] = undefined;

/**
 * @member {Number} AwayTeamScore
 */
Play.prototype['AwayTeamScore'] = undefined;

/**
 * @member {Number} BaselineOffsetPercentage
 */
Play.prototype['BaselineOffsetPercentage'] = undefined;

/**
 * @member {Number} BlockedByPlayerID
 */
Play.prototype['BlockedByPlayerID'] = undefined;

/**
 * @member {String} Category
 */
Play.prototype['Category'] = undefined;

/**
 * @member {String} Coordinates
 */
Play.prototype['Coordinates'] = undefined;

/**
 * @member {String} Created
 */
Play.prototype['Created'] = undefined;

/**
 * @member {String} Description
 */
Play.prototype['Description'] = undefined;

/**
 * @member {Boolean} FastBreak
 */
Play.prototype['FastBreak'] = undefined;

/**
 * @member {Number} HomePlayerID
 */
Play.prototype['HomePlayerID'] = undefined;

/**
 * @member {Number} HomeTeamScore
 */
Play.prototype['HomeTeamScore'] = undefined;

/**
 * @member {String} Opponent
 */
Play.prototype['Opponent'] = undefined;

/**
 * @member {Number} OpponentID
 */
Play.prototype['OpponentID'] = undefined;

/**
 * @member {Number} PlayID
 */
Play.prototype['PlayID'] = undefined;

/**
 * @member {Number} PlayerID
 */
Play.prototype['PlayerID'] = undefined;

/**
 * @member {Number} Points
 */
Play.prototype['Points'] = undefined;

/**
 * @member {Number} PotentialPoints
 */
Play.prototype['PotentialPoints'] = undefined;

/**
 * @member {Number} QuarterID
 */
Play.prototype['QuarterID'] = undefined;

/**
 * @member {String} QuarterName
 */
Play.prototype['QuarterName'] = undefined;

/**
 * @member {Number} ReceivingPlayerID
 */
Play.prototype['ReceivingPlayerID'] = undefined;

/**
 * @member {String} ReceivingTeam
 */
Play.prototype['ReceivingTeam'] = undefined;

/**
 * @member {Number} ReceivingTeamID
 */
Play.prototype['ReceivingTeamID'] = undefined;

/**
 * @member {Number} Sequence
 */
Play.prototype['Sequence'] = undefined;

/**
 * @member {Boolean} ShotMade
 */
Play.prototype['ShotMade'] = undefined;

/**
 * @member {String} SideOfBasket
 */
Play.prototype['SideOfBasket'] = undefined;

/**
 * @member {Number} SidelineOffsetPercentage
 */
Play.prototype['SidelineOffsetPercentage'] = undefined;

/**
 * @member {Number} StolenByPlayerID
 */
Play.prototype['StolenByPlayerID'] = undefined;

/**
 * @member {Number} SubstituteInPlayerID
 */
Play.prototype['SubstituteInPlayerID'] = undefined;

/**
 * @member {Number} SubstituteOutPlayerID
 */
Play.prototype['SubstituteOutPlayerID'] = undefined;

/**
 * @member {String} Team
 */
Play.prototype['Team'] = undefined;

/**
 * @member {Number} TeamID
 */
Play.prototype['TeamID'] = undefined;

/**
 * @member {Number} TimeRemainingMinutes
 */
Play.prototype['TimeRemainingMinutes'] = undefined;

/**
 * @member {Number} TimeRemainingSeconds
 */
Play.prototype['TimeRemainingSeconds'] = undefined;

/**
 * @member {String} Type
 */
Play.prototype['Type'] = undefined;

/**
 * @member {String} Updated
 */
Play.prototype['Updated'] = undefined;






export default Play;

