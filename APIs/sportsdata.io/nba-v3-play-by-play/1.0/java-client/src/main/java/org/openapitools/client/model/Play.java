/*
 * NBA v3 Play-by-Play
 * NBA play-by-play API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Play
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:58.704935-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Play {
  public static final String SERIALIZED_NAME_ASSISTED_BY_PLAYER_I_D = "AssistedByPlayerID";
  @SerializedName(SERIALIZED_NAME_ASSISTED_BY_PLAYER_I_D)
  private Integer assistedByPlayerID;

  public static final String SERIALIZED_NAME_AWAY_PLAYER_I_D = "AwayPlayerID";
  @SerializedName(SERIALIZED_NAME_AWAY_PLAYER_I_D)
  private Integer awayPlayerID;

  public static final String SERIALIZED_NAME_AWAY_TEAM_SCORE = "AwayTeamScore";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_SCORE)
  private Integer awayTeamScore;

  public static final String SERIALIZED_NAME_BASELINE_OFFSET_PERCENTAGE = "BaselineOffsetPercentage";
  @SerializedName(SERIALIZED_NAME_BASELINE_OFFSET_PERCENTAGE)
  private BigDecimal baselineOffsetPercentage;

  public static final String SERIALIZED_NAME_BLOCKED_BY_PLAYER_I_D = "BlockedByPlayerID";
  @SerializedName(SERIALIZED_NAME_BLOCKED_BY_PLAYER_I_D)
  private Integer blockedByPlayerID;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_COORDINATES = "Coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private String coordinates;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FAST_BREAK = "FastBreak";
  @SerializedName(SERIALIZED_NAME_FAST_BREAK)
  private Boolean fastBreak;

  public static final String SERIALIZED_NAME_HOME_PLAYER_I_D = "HomePlayerID";
  @SerializedName(SERIALIZED_NAME_HOME_PLAYER_I_D)
  private Integer homePlayerID;

  public static final String SERIALIZED_NAME_HOME_TEAM_SCORE = "HomeTeamScore";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_SCORE)
  private Integer homeTeamScore;

  public static final String SERIALIZED_NAME_OPPONENT = "Opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_OPPONENT_I_D = "OpponentID";
  @SerializedName(SERIALIZED_NAME_OPPONENT_I_D)
  private Integer opponentID;

  public static final String SERIALIZED_NAME_PLAY_I_D = "PlayID";
  @SerializedName(SERIALIZED_NAME_PLAY_I_D)
  private Integer playID;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POINTS = "Points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private Integer points;

  public static final String SERIALIZED_NAME_POTENTIAL_POINTS = "PotentialPoints";
  @SerializedName(SERIALIZED_NAME_POTENTIAL_POINTS)
  private Integer potentialPoints;

  public static final String SERIALIZED_NAME_QUARTER_I_D = "QuarterID";
  @SerializedName(SERIALIZED_NAME_QUARTER_I_D)
  private Integer quarterID;

  public static final String SERIALIZED_NAME_QUARTER_NAME = "QuarterName";
  @SerializedName(SERIALIZED_NAME_QUARTER_NAME)
  private String quarterName;

  public static final String SERIALIZED_NAME_RECEIVING_PLAYER_I_D = "ReceivingPlayerID";
  @SerializedName(SERIALIZED_NAME_RECEIVING_PLAYER_I_D)
  private Integer receivingPlayerID;

  public static final String SERIALIZED_NAME_RECEIVING_TEAM = "ReceivingTeam";
  @SerializedName(SERIALIZED_NAME_RECEIVING_TEAM)
  private String receivingTeam;

  public static final String SERIALIZED_NAME_RECEIVING_TEAM_I_D = "ReceivingTeamID";
  @SerializedName(SERIALIZED_NAME_RECEIVING_TEAM_I_D)
  private Integer receivingTeamID;

  public static final String SERIALIZED_NAME_SEQUENCE = "Sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_SHOT_MADE = "ShotMade";
  @SerializedName(SERIALIZED_NAME_SHOT_MADE)
  private Boolean shotMade;

  public static final String SERIALIZED_NAME_SIDE_OF_BASKET = "SideOfBasket";
  @SerializedName(SERIALIZED_NAME_SIDE_OF_BASKET)
  private String sideOfBasket;

  public static final String SERIALIZED_NAME_SIDELINE_OFFSET_PERCENTAGE = "SidelineOffsetPercentage";
  @SerializedName(SERIALIZED_NAME_SIDELINE_OFFSET_PERCENTAGE)
  private BigDecimal sidelineOffsetPercentage;

  public static final String SERIALIZED_NAME_STOLEN_BY_PLAYER_I_D = "StolenByPlayerID";
  @SerializedName(SERIALIZED_NAME_STOLEN_BY_PLAYER_I_D)
  private Integer stolenByPlayerID;

  public static final String SERIALIZED_NAME_SUBSTITUTE_IN_PLAYER_I_D = "SubstituteInPlayerID";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_IN_PLAYER_I_D)
  private Integer substituteInPlayerID;

  public static final String SERIALIZED_NAME_SUBSTITUTE_OUT_PLAYER_I_D = "SubstituteOutPlayerID";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_OUT_PLAYER_I_D)
  private Integer substituteOutPlayerID;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_TIME_REMAINING_MINUTES = "TimeRemainingMinutes";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING_MINUTES)
  private Integer timeRemainingMinutes;

  public static final String SERIALIZED_NAME_TIME_REMAINING_SECONDS = "TimeRemainingSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING_SECONDS)
  private Integer timeRemainingSeconds;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public Play() {
  }

  public Play assistedByPlayerID(Integer assistedByPlayerID) {
    this.assistedByPlayerID = assistedByPlayerID;
    return this;
  }

  /**
   * Get assistedByPlayerID
   * @return assistedByPlayerID
   */
  @javax.annotation.Nullable
  public Integer getAssistedByPlayerID() {
    return assistedByPlayerID;
  }

  public void setAssistedByPlayerID(Integer assistedByPlayerID) {
    this.assistedByPlayerID = assistedByPlayerID;
  }


  public Play awayPlayerID(Integer awayPlayerID) {
    this.awayPlayerID = awayPlayerID;
    return this;
  }

  /**
   * Get awayPlayerID
   * @return awayPlayerID
   */
  @javax.annotation.Nullable
  public Integer getAwayPlayerID() {
    return awayPlayerID;
  }

  public void setAwayPlayerID(Integer awayPlayerID) {
    this.awayPlayerID = awayPlayerID;
  }


  public Play awayTeamScore(Integer awayTeamScore) {
    this.awayTeamScore = awayTeamScore;
    return this;
  }

  /**
   * Get awayTeamScore
   * @return awayTeamScore
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamScore() {
    return awayTeamScore;
  }

  public void setAwayTeamScore(Integer awayTeamScore) {
    this.awayTeamScore = awayTeamScore;
  }


  public Play baselineOffsetPercentage(BigDecimal baselineOffsetPercentage) {
    this.baselineOffsetPercentage = baselineOffsetPercentage;
    return this;
  }

  /**
   * Get baselineOffsetPercentage
   * @return baselineOffsetPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getBaselineOffsetPercentage() {
    return baselineOffsetPercentage;
  }

  public void setBaselineOffsetPercentage(BigDecimal baselineOffsetPercentage) {
    this.baselineOffsetPercentage = baselineOffsetPercentage;
  }


  public Play blockedByPlayerID(Integer blockedByPlayerID) {
    this.blockedByPlayerID = blockedByPlayerID;
    return this;
  }

  /**
   * Get blockedByPlayerID
   * @return blockedByPlayerID
   */
  @javax.annotation.Nullable
  public Integer getBlockedByPlayerID() {
    return blockedByPlayerID;
  }

  public void setBlockedByPlayerID(Integer blockedByPlayerID) {
    this.blockedByPlayerID = blockedByPlayerID;
  }


  public Play category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Play coordinates(String coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nullable
  public String getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(String coordinates) {
    this.coordinates = coordinates;
  }


  public Play created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Play description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Play fastBreak(Boolean fastBreak) {
    this.fastBreak = fastBreak;
    return this;
  }

  /**
   * Get fastBreak
   * @return fastBreak
   */
  @javax.annotation.Nullable
  public Boolean getFastBreak() {
    return fastBreak;
  }

  public void setFastBreak(Boolean fastBreak) {
    this.fastBreak = fastBreak;
  }


  public Play homePlayerID(Integer homePlayerID) {
    this.homePlayerID = homePlayerID;
    return this;
  }

  /**
   * Get homePlayerID
   * @return homePlayerID
   */
  @javax.annotation.Nullable
  public Integer getHomePlayerID() {
    return homePlayerID;
  }

  public void setHomePlayerID(Integer homePlayerID) {
    this.homePlayerID = homePlayerID;
  }


  public Play homeTeamScore(Integer homeTeamScore) {
    this.homeTeamScore = homeTeamScore;
    return this;
  }

  /**
   * Get homeTeamScore
   * @return homeTeamScore
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamScore() {
    return homeTeamScore;
  }

  public void setHomeTeamScore(Integer homeTeamScore) {
    this.homeTeamScore = homeTeamScore;
  }


  public Play opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public Play opponentID(Integer opponentID) {
    this.opponentID = opponentID;
    return this;
  }

  /**
   * Get opponentID
   * @return opponentID
   */
  @javax.annotation.Nullable
  public Integer getOpponentID() {
    return opponentID;
  }

  public void setOpponentID(Integer opponentID) {
    this.opponentID = opponentID;
  }


  public Play playID(Integer playID) {
    this.playID = playID;
    return this;
  }

  /**
   * Get playID
   * @return playID
   */
  @javax.annotation.Nullable
  public Integer getPlayID() {
    return playID;
  }

  public void setPlayID(Integer playID) {
    this.playID = playID;
  }


  public Play playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Play points(Integer points) {
    this.points = points;
    return this;
  }

  /**
   * Get points
   * @return points
   */
  @javax.annotation.Nullable
  public Integer getPoints() {
    return points;
  }

  public void setPoints(Integer points) {
    this.points = points;
  }


  public Play potentialPoints(Integer potentialPoints) {
    this.potentialPoints = potentialPoints;
    return this;
  }

  /**
   * Get potentialPoints
   * @return potentialPoints
   */
  @javax.annotation.Nullable
  public Integer getPotentialPoints() {
    return potentialPoints;
  }

  public void setPotentialPoints(Integer potentialPoints) {
    this.potentialPoints = potentialPoints;
  }


  public Play quarterID(Integer quarterID) {
    this.quarterID = quarterID;
    return this;
  }

  /**
   * Get quarterID
   * @return quarterID
   */
  @javax.annotation.Nullable
  public Integer getQuarterID() {
    return quarterID;
  }

  public void setQuarterID(Integer quarterID) {
    this.quarterID = quarterID;
  }


  public Play quarterName(String quarterName) {
    this.quarterName = quarterName;
    return this;
  }

  /**
   * Get quarterName
   * @return quarterName
   */
  @javax.annotation.Nullable
  public String getQuarterName() {
    return quarterName;
  }

  public void setQuarterName(String quarterName) {
    this.quarterName = quarterName;
  }


  public Play receivingPlayerID(Integer receivingPlayerID) {
    this.receivingPlayerID = receivingPlayerID;
    return this;
  }

  /**
   * Get receivingPlayerID
   * @return receivingPlayerID
   */
  @javax.annotation.Nullable
  public Integer getReceivingPlayerID() {
    return receivingPlayerID;
  }

  public void setReceivingPlayerID(Integer receivingPlayerID) {
    this.receivingPlayerID = receivingPlayerID;
  }


  public Play receivingTeam(String receivingTeam) {
    this.receivingTeam = receivingTeam;
    return this;
  }

  /**
   * Get receivingTeam
   * @return receivingTeam
   */
  @javax.annotation.Nullable
  public String getReceivingTeam() {
    return receivingTeam;
  }

  public void setReceivingTeam(String receivingTeam) {
    this.receivingTeam = receivingTeam;
  }


  public Play receivingTeamID(Integer receivingTeamID) {
    this.receivingTeamID = receivingTeamID;
    return this;
  }

  /**
   * Get receivingTeamID
   * @return receivingTeamID
   */
  @javax.annotation.Nullable
  public Integer getReceivingTeamID() {
    return receivingTeamID;
  }

  public void setReceivingTeamID(Integer receivingTeamID) {
    this.receivingTeamID = receivingTeamID;
  }


  public Play sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public Play shotMade(Boolean shotMade) {
    this.shotMade = shotMade;
    return this;
  }

  /**
   * Get shotMade
   * @return shotMade
   */
  @javax.annotation.Nullable
  public Boolean getShotMade() {
    return shotMade;
  }

  public void setShotMade(Boolean shotMade) {
    this.shotMade = shotMade;
  }


  public Play sideOfBasket(String sideOfBasket) {
    this.sideOfBasket = sideOfBasket;
    return this;
  }

  /**
   * Get sideOfBasket
   * @return sideOfBasket
   */
  @javax.annotation.Nullable
  public String getSideOfBasket() {
    return sideOfBasket;
  }

  public void setSideOfBasket(String sideOfBasket) {
    this.sideOfBasket = sideOfBasket;
  }


  public Play sidelineOffsetPercentage(BigDecimal sidelineOffsetPercentage) {
    this.sidelineOffsetPercentage = sidelineOffsetPercentage;
    return this;
  }

  /**
   * Get sidelineOffsetPercentage
   * @return sidelineOffsetPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getSidelineOffsetPercentage() {
    return sidelineOffsetPercentage;
  }

  public void setSidelineOffsetPercentage(BigDecimal sidelineOffsetPercentage) {
    this.sidelineOffsetPercentage = sidelineOffsetPercentage;
  }


  public Play stolenByPlayerID(Integer stolenByPlayerID) {
    this.stolenByPlayerID = stolenByPlayerID;
    return this;
  }

  /**
   * Get stolenByPlayerID
   * @return stolenByPlayerID
   */
  @javax.annotation.Nullable
  public Integer getStolenByPlayerID() {
    return stolenByPlayerID;
  }

  public void setStolenByPlayerID(Integer stolenByPlayerID) {
    this.stolenByPlayerID = stolenByPlayerID;
  }


  public Play substituteInPlayerID(Integer substituteInPlayerID) {
    this.substituteInPlayerID = substituteInPlayerID;
    return this;
  }

  /**
   * Get substituteInPlayerID
   * @return substituteInPlayerID
   */
  @javax.annotation.Nullable
  public Integer getSubstituteInPlayerID() {
    return substituteInPlayerID;
  }

  public void setSubstituteInPlayerID(Integer substituteInPlayerID) {
    this.substituteInPlayerID = substituteInPlayerID;
  }


  public Play substituteOutPlayerID(Integer substituteOutPlayerID) {
    this.substituteOutPlayerID = substituteOutPlayerID;
    return this;
  }

  /**
   * Get substituteOutPlayerID
   * @return substituteOutPlayerID
   */
  @javax.annotation.Nullable
  public Integer getSubstituteOutPlayerID() {
    return substituteOutPlayerID;
  }

  public void setSubstituteOutPlayerID(Integer substituteOutPlayerID) {
    this.substituteOutPlayerID = substituteOutPlayerID;
  }


  public Play team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Play teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Play timeRemainingMinutes(Integer timeRemainingMinutes) {
    this.timeRemainingMinutes = timeRemainingMinutes;
    return this;
  }

  /**
   * Get timeRemainingMinutes
   * @return timeRemainingMinutes
   */
  @javax.annotation.Nullable
  public Integer getTimeRemainingMinutes() {
    return timeRemainingMinutes;
  }

  public void setTimeRemainingMinutes(Integer timeRemainingMinutes) {
    this.timeRemainingMinutes = timeRemainingMinutes;
  }


  public Play timeRemainingSeconds(Integer timeRemainingSeconds) {
    this.timeRemainingSeconds = timeRemainingSeconds;
    return this;
  }

  /**
   * Get timeRemainingSeconds
   * @return timeRemainingSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeRemainingSeconds() {
    return timeRemainingSeconds;
  }

  public void setTimeRemainingSeconds(Integer timeRemainingSeconds) {
    this.timeRemainingSeconds = timeRemainingSeconds;
  }


  public Play type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Play updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Play play = (Play) o;
    return Objects.equals(this.assistedByPlayerID, play.assistedByPlayerID) &&
        Objects.equals(this.awayPlayerID, play.awayPlayerID) &&
        Objects.equals(this.awayTeamScore, play.awayTeamScore) &&
        Objects.equals(this.baselineOffsetPercentage, play.baselineOffsetPercentage) &&
        Objects.equals(this.blockedByPlayerID, play.blockedByPlayerID) &&
        Objects.equals(this.category, play.category) &&
        Objects.equals(this.coordinates, play.coordinates) &&
        Objects.equals(this.created, play.created) &&
        Objects.equals(this.description, play.description) &&
        Objects.equals(this.fastBreak, play.fastBreak) &&
        Objects.equals(this.homePlayerID, play.homePlayerID) &&
        Objects.equals(this.homeTeamScore, play.homeTeamScore) &&
        Objects.equals(this.opponent, play.opponent) &&
        Objects.equals(this.opponentID, play.opponentID) &&
        Objects.equals(this.playID, play.playID) &&
        Objects.equals(this.playerID, play.playerID) &&
        Objects.equals(this.points, play.points) &&
        Objects.equals(this.potentialPoints, play.potentialPoints) &&
        Objects.equals(this.quarterID, play.quarterID) &&
        Objects.equals(this.quarterName, play.quarterName) &&
        Objects.equals(this.receivingPlayerID, play.receivingPlayerID) &&
        Objects.equals(this.receivingTeam, play.receivingTeam) &&
        Objects.equals(this.receivingTeamID, play.receivingTeamID) &&
        Objects.equals(this.sequence, play.sequence) &&
        Objects.equals(this.shotMade, play.shotMade) &&
        Objects.equals(this.sideOfBasket, play.sideOfBasket) &&
        Objects.equals(this.sidelineOffsetPercentage, play.sidelineOffsetPercentage) &&
        Objects.equals(this.stolenByPlayerID, play.stolenByPlayerID) &&
        Objects.equals(this.substituteInPlayerID, play.substituteInPlayerID) &&
        Objects.equals(this.substituteOutPlayerID, play.substituteOutPlayerID) &&
        Objects.equals(this.team, play.team) &&
        Objects.equals(this.teamID, play.teamID) &&
        Objects.equals(this.timeRemainingMinutes, play.timeRemainingMinutes) &&
        Objects.equals(this.timeRemainingSeconds, play.timeRemainingSeconds) &&
        Objects.equals(this.type, play.type) &&
        Objects.equals(this.updated, play.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistedByPlayerID, awayPlayerID, awayTeamScore, baselineOffsetPercentage, blockedByPlayerID, category, coordinates, created, description, fastBreak, homePlayerID, homeTeamScore, opponent, opponentID, playID, playerID, points, potentialPoints, quarterID, quarterName, receivingPlayerID, receivingTeam, receivingTeamID, sequence, shotMade, sideOfBasket, sidelineOffsetPercentage, stolenByPlayerID, substituteInPlayerID, substituteOutPlayerID, team, teamID, timeRemainingMinutes, timeRemainingSeconds, type, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Play {\n");
    sb.append("    assistedByPlayerID: ").append(toIndentedString(assistedByPlayerID)).append("\n");
    sb.append("    awayPlayerID: ").append(toIndentedString(awayPlayerID)).append("\n");
    sb.append("    awayTeamScore: ").append(toIndentedString(awayTeamScore)).append("\n");
    sb.append("    baselineOffsetPercentage: ").append(toIndentedString(baselineOffsetPercentage)).append("\n");
    sb.append("    blockedByPlayerID: ").append(toIndentedString(blockedByPlayerID)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fastBreak: ").append(toIndentedString(fastBreak)).append("\n");
    sb.append("    homePlayerID: ").append(toIndentedString(homePlayerID)).append("\n");
    sb.append("    homeTeamScore: ").append(toIndentedString(homeTeamScore)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    opponentID: ").append(toIndentedString(opponentID)).append("\n");
    sb.append("    playID: ").append(toIndentedString(playID)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    potentialPoints: ").append(toIndentedString(potentialPoints)).append("\n");
    sb.append("    quarterID: ").append(toIndentedString(quarterID)).append("\n");
    sb.append("    quarterName: ").append(toIndentedString(quarterName)).append("\n");
    sb.append("    receivingPlayerID: ").append(toIndentedString(receivingPlayerID)).append("\n");
    sb.append("    receivingTeam: ").append(toIndentedString(receivingTeam)).append("\n");
    sb.append("    receivingTeamID: ").append(toIndentedString(receivingTeamID)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    shotMade: ").append(toIndentedString(shotMade)).append("\n");
    sb.append("    sideOfBasket: ").append(toIndentedString(sideOfBasket)).append("\n");
    sb.append("    sidelineOffsetPercentage: ").append(toIndentedString(sidelineOffsetPercentage)).append("\n");
    sb.append("    stolenByPlayerID: ").append(toIndentedString(stolenByPlayerID)).append("\n");
    sb.append("    substituteInPlayerID: ").append(toIndentedString(substituteInPlayerID)).append("\n");
    sb.append("    substituteOutPlayerID: ").append(toIndentedString(substituteOutPlayerID)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    timeRemainingMinutes: ").append(toIndentedString(timeRemainingMinutes)).append("\n");
    sb.append("    timeRemainingSeconds: ").append(toIndentedString(timeRemainingSeconds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssistedByPlayerID");
    openapiFields.add("AwayPlayerID");
    openapiFields.add("AwayTeamScore");
    openapiFields.add("BaselineOffsetPercentage");
    openapiFields.add("BlockedByPlayerID");
    openapiFields.add("Category");
    openapiFields.add("Coordinates");
    openapiFields.add("Created");
    openapiFields.add("Description");
    openapiFields.add("FastBreak");
    openapiFields.add("HomePlayerID");
    openapiFields.add("HomeTeamScore");
    openapiFields.add("Opponent");
    openapiFields.add("OpponentID");
    openapiFields.add("PlayID");
    openapiFields.add("PlayerID");
    openapiFields.add("Points");
    openapiFields.add("PotentialPoints");
    openapiFields.add("QuarterID");
    openapiFields.add("QuarterName");
    openapiFields.add("ReceivingPlayerID");
    openapiFields.add("ReceivingTeam");
    openapiFields.add("ReceivingTeamID");
    openapiFields.add("Sequence");
    openapiFields.add("ShotMade");
    openapiFields.add("SideOfBasket");
    openapiFields.add("SidelineOffsetPercentage");
    openapiFields.add("StolenByPlayerID");
    openapiFields.add("SubstituteInPlayerID");
    openapiFields.add("SubstituteOutPlayerID");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("TimeRemainingMinutes");
    openapiFields.add("TimeRemainingSeconds");
    openapiFields.add("Type");
    openapiFields.add("Updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Play
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Play.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Play is not found in the empty JSON string", Play.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Play.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Play` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if ((jsonObj.get("Coordinates") != null && !jsonObj.get("Coordinates").isJsonNull()) && !jsonObj.get("Coordinates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Coordinates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Coordinates").toString()));
      }
      if ((jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) && !jsonObj.get("Created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Created").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Opponent") != null && !jsonObj.get("Opponent").isJsonNull()) && !jsonObj.get("Opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Opponent").toString()));
      }
      if ((jsonObj.get("QuarterName") != null && !jsonObj.get("QuarterName").isJsonNull()) && !jsonObj.get("QuarterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QuarterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QuarterName").toString()));
      }
      if ((jsonObj.get("ReceivingTeam") != null && !jsonObj.get("ReceivingTeam").isJsonNull()) && !jsonObj.get("ReceivingTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReceivingTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReceivingTeam").toString()));
      }
      if ((jsonObj.get("SideOfBasket") != null && !jsonObj.get("SideOfBasket").isJsonNull()) && !jsonObj.get("SideOfBasket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SideOfBasket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SideOfBasket").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Play.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Play' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Play> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Play.class));

       return (TypeAdapter<T>) new TypeAdapter<Play>() {
           @Override
           public void write(JsonWriter out, Play value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Play read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Play given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Play
   * @throws IOException if the JSON string is invalid with respect to Play
   */
  public static Play fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Play.class);
  }

  /**
   * Convert an instance of Play to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

