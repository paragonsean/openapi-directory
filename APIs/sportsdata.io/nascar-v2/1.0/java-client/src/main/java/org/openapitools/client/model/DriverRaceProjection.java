/*
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DriverRaceProjection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:57.642335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriverRaceProjection {
  public static final String SERIALIZED_NAME_BONUS = "Bonus";
  @SerializedName(SERIALIZED_NAME_BONUS)
  private BigDecimal bonus;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CURRENT_POSITION = "CurrentPosition";
  @SerializedName(SERIALIZED_NAME_CURRENT_POSITION)
  private BigDecimal currentPosition;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_SALARY = "DraftKingsSalary";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_SALARY)
  private Integer draftKingsSalary;

  public static final String SERIALIZED_NAME_DRIVER_I_D = "DriverID";
  @SerializedName(SERIALIZED_NAME_DRIVER_I_D)
  private Integer driverID;

  public static final String SERIALIZED_NAME_FANTASY_POINTS = "FantasyPoints";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS)
  private BigDecimal fantasyPoints;

  public static final String SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS = "FantasyPointsDraftKings";
  @SerializedName(SERIALIZED_NAME_FANTASY_POINTS_DRAFT_KINGS)
  private BigDecimal fantasyPointsDraftKings;

  public static final String SERIALIZED_NAME_FASTEST_LAPS = "FastestLaps";
  @SerializedName(SERIALIZED_NAME_FASTEST_LAPS)
  private BigDecimal fastestLaps;

  public static final String SERIALIZED_NAME_FINAL_POSITION = "FinalPosition";
  @SerializedName(SERIALIZED_NAME_FINAL_POSITION)
  private BigDecimal finalPosition;

  public static final String SERIALIZED_NAME_LAPS = "Laps";
  @SerializedName(SERIALIZED_NAME_LAPS)
  private BigDecimal laps;

  public static final String SERIALIZED_NAME_LAPS_LED = "LapsLed";
  @SerializedName(SERIALIZED_NAME_LAPS_LED)
  private BigDecimal lapsLed;

  public static final String SERIALIZED_NAME_MANUFACTURER = "Manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_NUMBER_DISPLAY = "NumberDisplay";
  @SerializedName(SERIALIZED_NAME_NUMBER_DISPLAY)
  private String numberDisplay;

  public static final String SERIALIZED_NAME_PENALTY = "Penalty";
  @SerializedName(SERIALIZED_NAME_PENALTY)
  private BigDecimal penalty;

  public static final String SERIALIZED_NAME_POINTS = "Points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private BigDecimal points;

  public static final String SERIALIZED_NAME_POLE_FINAL_POSITION = "PoleFinalPosition";
  @SerializedName(SERIALIZED_NAME_POLE_FINAL_POSITION)
  private BigDecimal poleFinalPosition;

  public static final String SERIALIZED_NAME_POLES = "Poles";
  @SerializedName(SERIALIZED_NAME_POLES)
  private BigDecimal poles;

  public static final String SERIALIZED_NAME_POSITION_DIFFERENTIAL = "PositionDifferential";
  @SerializedName(SERIALIZED_NAME_POSITION_DIFFERENTIAL)
  private BigDecimal positionDifferential;

  public static final String SERIALIZED_NAME_QUALIFYING_SPEED = "QualifyingSpeed";
  @SerializedName(SERIALIZED_NAME_QUALIFYING_SPEED)
  private BigDecimal qualifyingSpeed;

  public static final String SERIALIZED_NAME_RACE_I_D = "RaceID";
  @SerializedName(SERIALIZED_NAME_RACE_I_D)
  private Integer raceID;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_START_POSITION = "StartPosition";
  @SerializedName(SERIALIZED_NAME_START_POSITION)
  private BigDecimal startPosition;

  public static final String SERIALIZED_NAME_STAT_I_D = "StatID";
  @SerializedName(SERIALIZED_NAME_STAT_I_D)
  private Integer statID;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_WINS = "Wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private BigDecimal wins;

  public DriverRaceProjection() {
  }

  public DriverRaceProjection bonus(BigDecimal bonus) {
    this.bonus = bonus;
    return this;
  }

  /**
   * Get bonus
   * @return bonus
   */
  @javax.annotation.Nullable
  public BigDecimal getBonus() {
    return bonus;
  }

  public void setBonus(BigDecimal bonus) {
    this.bonus = bonus;
  }


  public DriverRaceProjection created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public DriverRaceProjection currentPosition(BigDecimal currentPosition) {
    this.currentPosition = currentPosition;
    return this;
  }

  /**
   * Get currentPosition
   * @return currentPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentPosition() {
    return currentPosition;
  }

  public void setCurrentPosition(BigDecimal currentPosition) {
    this.currentPosition = currentPosition;
  }


  public DriverRaceProjection dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public DriverRaceProjection day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public DriverRaceProjection draftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
    return this;
  }

  /**
   * Get draftKingsSalary
   * @return draftKingsSalary
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsSalary() {
    return draftKingsSalary;
  }

  public void setDraftKingsSalary(Integer draftKingsSalary) {
    this.draftKingsSalary = draftKingsSalary;
  }


  public DriverRaceProjection driverID(Integer driverID) {
    this.driverID = driverID;
    return this;
  }

  /**
   * Get driverID
   * @return driverID
   */
  @javax.annotation.Nullable
  public Integer getDriverID() {
    return driverID;
  }

  public void setDriverID(Integer driverID) {
    this.driverID = driverID;
  }


  public DriverRaceProjection fantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
    return this;
  }

  /**
   * Get fantasyPoints
   * @return fantasyPoints
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPoints() {
    return fantasyPoints;
  }

  public void setFantasyPoints(BigDecimal fantasyPoints) {
    this.fantasyPoints = fantasyPoints;
  }


  public DriverRaceProjection fantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
    return this;
  }

  /**
   * Get fantasyPointsDraftKings
   * @return fantasyPointsDraftKings
   */
  @javax.annotation.Nullable
  public BigDecimal getFantasyPointsDraftKings() {
    return fantasyPointsDraftKings;
  }

  public void setFantasyPointsDraftKings(BigDecimal fantasyPointsDraftKings) {
    this.fantasyPointsDraftKings = fantasyPointsDraftKings;
  }


  public DriverRaceProjection fastestLaps(BigDecimal fastestLaps) {
    this.fastestLaps = fastestLaps;
    return this;
  }

  /**
   * Get fastestLaps
   * @return fastestLaps
   */
  @javax.annotation.Nullable
  public BigDecimal getFastestLaps() {
    return fastestLaps;
  }

  public void setFastestLaps(BigDecimal fastestLaps) {
    this.fastestLaps = fastestLaps;
  }


  public DriverRaceProjection finalPosition(BigDecimal finalPosition) {
    this.finalPosition = finalPosition;
    return this;
  }

  /**
   * Get finalPosition
   * @return finalPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getFinalPosition() {
    return finalPosition;
  }

  public void setFinalPosition(BigDecimal finalPosition) {
    this.finalPosition = finalPosition;
  }


  public DriverRaceProjection laps(BigDecimal laps) {
    this.laps = laps;
    return this;
  }

  /**
   * Get laps
   * @return laps
   */
  @javax.annotation.Nullable
  public BigDecimal getLaps() {
    return laps;
  }

  public void setLaps(BigDecimal laps) {
    this.laps = laps;
  }


  public DriverRaceProjection lapsLed(BigDecimal lapsLed) {
    this.lapsLed = lapsLed;
    return this;
  }

  /**
   * Get lapsLed
   * @return lapsLed
   */
  @javax.annotation.Nullable
  public BigDecimal getLapsLed() {
    return lapsLed;
  }

  public void setLapsLed(BigDecimal lapsLed) {
    this.lapsLed = lapsLed;
  }


  public DriverRaceProjection manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Get manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DriverRaceProjection name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DriverRaceProjection number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public DriverRaceProjection numberDisplay(String numberDisplay) {
    this.numberDisplay = numberDisplay;
    return this;
  }

  /**
   * Get numberDisplay
   * @return numberDisplay
   */
  @javax.annotation.Nullable
  public String getNumberDisplay() {
    return numberDisplay;
  }

  public void setNumberDisplay(String numberDisplay) {
    this.numberDisplay = numberDisplay;
  }


  public DriverRaceProjection penalty(BigDecimal penalty) {
    this.penalty = penalty;
    return this;
  }

  /**
   * Get penalty
   * @return penalty
   */
  @javax.annotation.Nullable
  public BigDecimal getPenalty() {
    return penalty;
  }

  public void setPenalty(BigDecimal penalty) {
    this.penalty = penalty;
  }


  public DriverRaceProjection points(BigDecimal points) {
    this.points = points;
    return this;
  }

  /**
   * Get points
   * @return points
   */
  @javax.annotation.Nullable
  public BigDecimal getPoints() {
    return points;
  }

  public void setPoints(BigDecimal points) {
    this.points = points;
  }


  public DriverRaceProjection poleFinalPosition(BigDecimal poleFinalPosition) {
    this.poleFinalPosition = poleFinalPosition;
    return this;
  }

  /**
   * Get poleFinalPosition
   * @return poleFinalPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getPoleFinalPosition() {
    return poleFinalPosition;
  }

  public void setPoleFinalPosition(BigDecimal poleFinalPosition) {
    this.poleFinalPosition = poleFinalPosition;
  }


  public DriverRaceProjection poles(BigDecimal poles) {
    this.poles = poles;
    return this;
  }

  /**
   * Get poles
   * @return poles
   */
  @javax.annotation.Nullable
  public BigDecimal getPoles() {
    return poles;
  }

  public void setPoles(BigDecimal poles) {
    this.poles = poles;
  }


  public DriverRaceProjection positionDifferential(BigDecimal positionDifferential) {
    this.positionDifferential = positionDifferential;
    return this;
  }

  /**
   * Get positionDifferential
   * @return positionDifferential
   */
  @javax.annotation.Nullable
  public BigDecimal getPositionDifferential() {
    return positionDifferential;
  }

  public void setPositionDifferential(BigDecimal positionDifferential) {
    this.positionDifferential = positionDifferential;
  }


  public DriverRaceProjection qualifyingSpeed(BigDecimal qualifyingSpeed) {
    this.qualifyingSpeed = qualifyingSpeed;
    return this;
  }

  /**
   * Get qualifyingSpeed
   * @return qualifyingSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getQualifyingSpeed() {
    return qualifyingSpeed;
  }

  public void setQualifyingSpeed(BigDecimal qualifyingSpeed) {
    this.qualifyingSpeed = qualifyingSpeed;
  }


  public DriverRaceProjection raceID(Integer raceID) {
    this.raceID = raceID;
    return this;
  }

  /**
   * Get raceID
   * @return raceID
   */
  @javax.annotation.Nullable
  public Integer getRaceID() {
    return raceID;
  }

  public void setRaceID(Integer raceID) {
    this.raceID = raceID;
  }


  public DriverRaceProjection season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public DriverRaceProjection startPosition(BigDecimal startPosition) {
    this.startPosition = startPosition;
    return this;
  }

  /**
   * Get startPosition
   * @return startPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getStartPosition() {
    return startPosition;
  }

  public void setStartPosition(BigDecimal startPosition) {
    this.startPosition = startPosition;
  }


  public DriverRaceProjection statID(Integer statID) {
    this.statID = statID;
    return this;
  }

  /**
   * Get statID
   * @return statID
   */
  @javax.annotation.Nullable
  public Integer getStatID() {
    return statID;
  }

  public void setStatID(Integer statID) {
    this.statID = statID;
  }


  public DriverRaceProjection updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public DriverRaceProjection wins(BigDecimal wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public BigDecimal getWins() {
    return wins;
  }

  public void setWins(BigDecimal wins) {
    this.wins = wins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriverRaceProjection driverRaceProjection = (DriverRaceProjection) o;
    return Objects.equals(this.bonus, driverRaceProjection.bonus) &&
        Objects.equals(this.created, driverRaceProjection.created) &&
        Objects.equals(this.currentPosition, driverRaceProjection.currentPosition) &&
        Objects.equals(this.dateTime, driverRaceProjection.dateTime) &&
        Objects.equals(this.day, driverRaceProjection.day) &&
        Objects.equals(this.draftKingsSalary, driverRaceProjection.draftKingsSalary) &&
        Objects.equals(this.driverID, driverRaceProjection.driverID) &&
        Objects.equals(this.fantasyPoints, driverRaceProjection.fantasyPoints) &&
        Objects.equals(this.fantasyPointsDraftKings, driverRaceProjection.fantasyPointsDraftKings) &&
        Objects.equals(this.fastestLaps, driverRaceProjection.fastestLaps) &&
        Objects.equals(this.finalPosition, driverRaceProjection.finalPosition) &&
        Objects.equals(this.laps, driverRaceProjection.laps) &&
        Objects.equals(this.lapsLed, driverRaceProjection.lapsLed) &&
        Objects.equals(this.manufacturer, driverRaceProjection.manufacturer) &&
        Objects.equals(this.name, driverRaceProjection.name) &&
        Objects.equals(this.number, driverRaceProjection.number) &&
        Objects.equals(this.numberDisplay, driverRaceProjection.numberDisplay) &&
        Objects.equals(this.penalty, driverRaceProjection.penalty) &&
        Objects.equals(this.points, driverRaceProjection.points) &&
        Objects.equals(this.poleFinalPosition, driverRaceProjection.poleFinalPosition) &&
        Objects.equals(this.poles, driverRaceProjection.poles) &&
        Objects.equals(this.positionDifferential, driverRaceProjection.positionDifferential) &&
        Objects.equals(this.qualifyingSpeed, driverRaceProjection.qualifyingSpeed) &&
        Objects.equals(this.raceID, driverRaceProjection.raceID) &&
        Objects.equals(this.season, driverRaceProjection.season) &&
        Objects.equals(this.startPosition, driverRaceProjection.startPosition) &&
        Objects.equals(this.statID, driverRaceProjection.statID) &&
        Objects.equals(this.updated, driverRaceProjection.updated) &&
        Objects.equals(this.wins, driverRaceProjection.wins);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bonus, created, currentPosition, dateTime, day, draftKingsSalary, driverID, fantasyPoints, fantasyPointsDraftKings, fastestLaps, finalPosition, laps, lapsLed, manufacturer, name, number, numberDisplay, penalty, points, poleFinalPosition, poles, positionDifferential, qualifyingSpeed, raceID, season, startPosition, statID, updated, wins);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriverRaceProjection {\n");
    sb.append("    bonus: ").append(toIndentedString(bonus)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currentPosition: ").append(toIndentedString(currentPosition)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    draftKingsSalary: ").append(toIndentedString(draftKingsSalary)).append("\n");
    sb.append("    driverID: ").append(toIndentedString(driverID)).append("\n");
    sb.append("    fantasyPoints: ").append(toIndentedString(fantasyPoints)).append("\n");
    sb.append("    fantasyPointsDraftKings: ").append(toIndentedString(fantasyPointsDraftKings)).append("\n");
    sb.append("    fastestLaps: ").append(toIndentedString(fastestLaps)).append("\n");
    sb.append("    finalPosition: ").append(toIndentedString(finalPosition)).append("\n");
    sb.append("    laps: ").append(toIndentedString(laps)).append("\n");
    sb.append("    lapsLed: ").append(toIndentedString(lapsLed)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    numberDisplay: ").append(toIndentedString(numberDisplay)).append("\n");
    sb.append("    penalty: ").append(toIndentedString(penalty)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    poleFinalPosition: ").append(toIndentedString(poleFinalPosition)).append("\n");
    sb.append("    poles: ").append(toIndentedString(poles)).append("\n");
    sb.append("    positionDifferential: ").append(toIndentedString(positionDifferential)).append("\n");
    sb.append("    qualifyingSpeed: ").append(toIndentedString(qualifyingSpeed)).append("\n");
    sb.append("    raceID: ").append(toIndentedString(raceID)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    startPosition: ").append(toIndentedString(startPosition)).append("\n");
    sb.append("    statID: ").append(toIndentedString(statID)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bonus");
    openapiFields.add("Created");
    openapiFields.add("CurrentPosition");
    openapiFields.add("DateTime");
    openapiFields.add("Day");
    openapiFields.add("DraftKingsSalary");
    openapiFields.add("DriverID");
    openapiFields.add("FantasyPoints");
    openapiFields.add("FantasyPointsDraftKings");
    openapiFields.add("FastestLaps");
    openapiFields.add("FinalPosition");
    openapiFields.add("Laps");
    openapiFields.add("LapsLed");
    openapiFields.add("Manufacturer");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("NumberDisplay");
    openapiFields.add("Penalty");
    openapiFields.add("Points");
    openapiFields.add("PoleFinalPosition");
    openapiFields.add("Poles");
    openapiFields.add("PositionDifferential");
    openapiFields.add("QualifyingSpeed");
    openapiFields.add("RaceID");
    openapiFields.add("Season");
    openapiFields.add("StartPosition");
    openapiFields.add("StatID");
    openapiFields.add("Updated");
    openapiFields.add("Wins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriverRaceProjection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriverRaceProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriverRaceProjection is not found in the empty JSON string", DriverRaceProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriverRaceProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriverRaceProjection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) && !jsonObj.get("Created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Created").toString()));
      }
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("Manufacturer") != null && !jsonObj.get("Manufacturer").isJsonNull()) && !jsonObj.get("Manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Manufacturer").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NumberDisplay") != null && !jsonObj.get("NumberDisplay").isJsonNull()) && !jsonObj.get("NumberDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NumberDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NumberDisplay").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriverRaceProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriverRaceProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriverRaceProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriverRaceProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<DriverRaceProjection>() {
           @Override
           public void write(JsonWriter out, DriverRaceProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriverRaceProjection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriverRaceProjection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriverRaceProjection
   * @throws IOException if the JSON string is invalid with respect to DriverRaceProjection
   */
  public static DriverRaceProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriverRaceProjection.class);
  }

  /**
   * Convert an instance of DriverRaceProjection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

