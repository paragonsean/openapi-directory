/*
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Race
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:57.642335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Race {
  public static final String SERIALIZED_NAME_ACTUAL_LAPS = "ActualLaps";
  @SerializedName(SERIALIZED_NAME_ACTUAL_LAPS)
  private Integer actualLaps;

  public static final String SERIALIZED_NAME_BROADCAST = "Broadcast";
  @SerializedName(SERIALIZED_NAME_BROADCAST)
  private String broadcast;

  public static final String SERIALIZED_NAME_CANCELED = "Canceled";
  @SerializedName(SERIALIZED_NAME_CANCELED)
  private Boolean canceled;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_IS_IN_PROGRESS = "IsInProgress";
  @SerializedName(SERIALIZED_NAME_IS_IN_PROGRESS)
  private Boolean isInProgress;

  public static final String SERIALIZED_NAME_IS_OVER = "IsOver";
  @SerializedName(SERIALIZED_NAME_IS_OVER)
  private Boolean isOver;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLE_WINNER_I_D = "PoleWinnerID";
  @SerializedName(SERIALIZED_NAME_POLE_WINNER_I_D)
  private Integer poleWinnerID;

  public static final String SERIALIZED_NAME_RACE_I_D = "RaceID";
  @SerializedName(SERIALIZED_NAME_RACE_I_D)
  private Integer raceID;

  public static final String SERIALIZED_NAME_RESCHEDULED_DATE_TIME = "RescheduledDateTime";
  @SerializedName(SERIALIZED_NAME_RESCHEDULED_DATE_TIME)
  private String rescheduledDateTime;

  public static final String SERIALIZED_NAME_RESCHEDULED_DAY = "RescheduledDay";
  @SerializedName(SERIALIZED_NAME_RESCHEDULED_DAY)
  private String rescheduledDay;

  public static final String SERIALIZED_NAME_SCHEDULED_LAPS = "ScheduledLaps";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_LAPS)
  private Integer scheduledLaps;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SERIES_I_D = "SeriesID";
  @SerializedName(SERIALIZED_NAME_SERIES_I_D)
  private Integer seriesID;

  public static final String SERIALIZED_NAME_SERIES_NAME = "SeriesName";
  @SerializedName(SERIALIZED_NAME_SERIES_NAME)
  private String seriesName;

  public static final String SERIALIZED_NAME_TRACK = "Track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private String track;

  public static final String SERIALIZED_NAME_UPDATED = "Updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_WINNER_I_D = "WinnerID";
  @SerializedName(SERIALIZED_NAME_WINNER_I_D)
  private Integer winnerID;

  public Race() {
  }

  public Race actualLaps(Integer actualLaps) {
    this.actualLaps = actualLaps;
    return this;
  }

  /**
   * Get actualLaps
   * @return actualLaps
   */
  @javax.annotation.Nullable
  public Integer getActualLaps() {
    return actualLaps;
  }

  public void setActualLaps(Integer actualLaps) {
    this.actualLaps = actualLaps;
  }


  public Race broadcast(String broadcast) {
    this.broadcast = broadcast;
    return this;
  }

  /**
   * Get broadcast
   * @return broadcast
   */
  @javax.annotation.Nullable
  public String getBroadcast() {
    return broadcast;
  }

  public void setBroadcast(String broadcast) {
    this.broadcast = broadcast;
  }


  public Race canceled(Boolean canceled) {
    this.canceled = canceled;
    return this;
  }

  /**
   * Get canceled
   * @return canceled
   */
  @javax.annotation.Nullable
  public Boolean getCanceled() {
    return canceled;
  }

  public void setCanceled(Boolean canceled) {
    this.canceled = canceled;
  }


  public Race created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Race dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public Race day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Race isInProgress(Boolean isInProgress) {
    this.isInProgress = isInProgress;
    return this;
  }

  /**
   * Get isInProgress
   * @return isInProgress
   */
  @javax.annotation.Nullable
  public Boolean getIsInProgress() {
    return isInProgress;
  }

  public void setIsInProgress(Boolean isInProgress) {
    this.isInProgress = isInProgress;
  }


  public Race isOver(Boolean isOver) {
    this.isOver = isOver;
    return this;
  }

  /**
   * Get isOver
   * @return isOver
   */
  @javax.annotation.Nullable
  public Boolean getIsOver() {
    return isOver;
  }

  public void setIsOver(Boolean isOver) {
    this.isOver = isOver;
  }


  public Race name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Race poleWinnerID(Integer poleWinnerID) {
    this.poleWinnerID = poleWinnerID;
    return this;
  }

  /**
   * Get poleWinnerID
   * @return poleWinnerID
   */
  @javax.annotation.Nullable
  public Integer getPoleWinnerID() {
    return poleWinnerID;
  }

  public void setPoleWinnerID(Integer poleWinnerID) {
    this.poleWinnerID = poleWinnerID;
  }


  public Race raceID(Integer raceID) {
    this.raceID = raceID;
    return this;
  }

  /**
   * Get raceID
   * @return raceID
   */
  @javax.annotation.Nullable
  public Integer getRaceID() {
    return raceID;
  }

  public void setRaceID(Integer raceID) {
    this.raceID = raceID;
  }


  public Race rescheduledDateTime(String rescheduledDateTime) {
    this.rescheduledDateTime = rescheduledDateTime;
    return this;
  }

  /**
   * Get rescheduledDateTime
   * @return rescheduledDateTime
   */
  @javax.annotation.Nullable
  public String getRescheduledDateTime() {
    return rescheduledDateTime;
  }

  public void setRescheduledDateTime(String rescheduledDateTime) {
    this.rescheduledDateTime = rescheduledDateTime;
  }


  public Race rescheduledDay(String rescheduledDay) {
    this.rescheduledDay = rescheduledDay;
    return this;
  }

  /**
   * Get rescheduledDay
   * @return rescheduledDay
   */
  @javax.annotation.Nullable
  public String getRescheduledDay() {
    return rescheduledDay;
  }

  public void setRescheduledDay(String rescheduledDay) {
    this.rescheduledDay = rescheduledDay;
  }


  public Race scheduledLaps(Integer scheduledLaps) {
    this.scheduledLaps = scheduledLaps;
    return this;
  }

  /**
   * Get scheduledLaps
   * @return scheduledLaps
   */
  @javax.annotation.Nullable
  public Integer getScheduledLaps() {
    return scheduledLaps;
  }

  public void setScheduledLaps(Integer scheduledLaps) {
    this.scheduledLaps = scheduledLaps;
  }


  public Race season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Race seriesID(Integer seriesID) {
    this.seriesID = seriesID;
    return this;
  }

  /**
   * Get seriesID
   * @return seriesID
   */
  @javax.annotation.Nullable
  public Integer getSeriesID() {
    return seriesID;
  }

  public void setSeriesID(Integer seriesID) {
    this.seriesID = seriesID;
  }


  public Race seriesName(String seriesName) {
    this.seriesName = seriesName;
    return this;
  }

  /**
   * Get seriesName
   * @return seriesName
   */
  @javax.annotation.Nullable
  public String getSeriesName() {
    return seriesName;
  }

  public void setSeriesName(String seriesName) {
    this.seriesName = seriesName;
  }


  public Race track(String track) {
    this.track = track;
    return this;
  }

  /**
   * Get track
   * @return track
   */
  @javax.annotation.Nullable
  public String getTrack() {
    return track;
  }

  public void setTrack(String track) {
    this.track = track;
  }


  public Race updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Race winnerID(Integer winnerID) {
    this.winnerID = winnerID;
    return this;
  }

  /**
   * Get winnerID
   * @return winnerID
   */
  @javax.annotation.Nullable
  public Integer getWinnerID() {
    return winnerID;
  }

  public void setWinnerID(Integer winnerID) {
    this.winnerID = winnerID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Race race = (Race) o;
    return Objects.equals(this.actualLaps, race.actualLaps) &&
        Objects.equals(this.broadcast, race.broadcast) &&
        Objects.equals(this.canceled, race.canceled) &&
        Objects.equals(this.created, race.created) &&
        Objects.equals(this.dateTime, race.dateTime) &&
        Objects.equals(this.day, race.day) &&
        Objects.equals(this.isInProgress, race.isInProgress) &&
        Objects.equals(this.isOver, race.isOver) &&
        Objects.equals(this.name, race.name) &&
        Objects.equals(this.poleWinnerID, race.poleWinnerID) &&
        Objects.equals(this.raceID, race.raceID) &&
        Objects.equals(this.rescheduledDateTime, race.rescheduledDateTime) &&
        Objects.equals(this.rescheduledDay, race.rescheduledDay) &&
        Objects.equals(this.scheduledLaps, race.scheduledLaps) &&
        Objects.equals(this.season, race.season) &&
        Objects.equals(this.seriesID, race.seriesID) &&
        Objects.equals(this.seriesName, race.seriesName) &&
        Objects.equals(this.track, race.track) &&
        Objects.equals(this.updated, race.updated) &&
        Objects.equals(this.winnerID, race.winnerID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualLaps, broadcast, canceled, created, dateTime, day, isInProgress, isOver, name, poleWinnerID, raceID, rescheduledDateTime, rescheduledDay, scheduledLaps, season, seriesID, seriesName, track, updated, winnerID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Race {\n");
    sb.append("    actualLaps: ").append(toIndentedString(actualLaps)).append("\n");
    sb.append("    broadcast: ").append(toIndentedString(broadcast)).append("\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    isInProgress: ").append(toIndentedString(isInProgress)).append("\n");
    sb.append("    isOver: ").append(toIndentedString(isOver)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    poleWinnerID: ").append(toIndentedString(poleWinnerID)).append("\n");
    sb.append("    raceID: ").append(toIndentedString(raceID)).append("\n");
    sb.append("    rescheduledDateTime: ").append(toIndentedString(rescheduledDateTime)).append("\n");
    sb.append("    rescheduledDay: ").append(toIndentedString(rescheduledDay)).append("\n");
    sb.append("    scheduledLaps: ").append(toIndentedString(scheduledLaps)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seriesID: ").append(toIndentedString(seriesID)).append("\n");
    sb.append("    seriesName: ").append(toIndentedString(seriesName)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    winnerID: ").append(toIndentedString(winnerID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActualLaps");
    openapiFields.add("Broadcast");
    openapiFields.add("Canceled");
    openapiFields.add("Created");
    openapiFields.add("DateTime");
    openapiFields.add("Day");
    openapiFields.add("IsInProgress");
    openapiFields.add("IsOver");
    openapiFields.add("Name");
    openapiFields.add("PoleWinnerID");
    openapiFields.add("RaceID");
    openapiFields.add("RescheduledDateTime");
    openapiFields.add("RescheduledDay");
    openapiFields.add("ScheduledLaps");
    openapiFields.add("Season");
    openapiFields.add("SeriesID");
    openapiFields.add("SeriesName");
    openapiFields.add("Track");
    openapiFields.add("Updated");
    openapiFields.add("WinnerID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Race
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Race.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Race is not found in the empty JSON string", Race.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Race.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Race` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Broadcast") != null && !jsonObj.get("Broadcast").isJsonNull()) && !jsonObj.get("Broadcast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Broadcast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Broadcast").toString()));
      }
      if ((jsonObj.get("Created") != null && !jsonObj.get("Created").isJsonNull()) && !jsonObj.get("Created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Created").toString()));
      }
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RescheduledDateTime") != null && !jsonObj.get("RescheduledDateTime").isJsonNull()) && !jsonObj.get("RescheduledDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RescheduledDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RescheduledDateTime").toString()));
      }
      if ((jsonObj.get("RescheduledDay") != null && !jsonObj.get("RescheduledDay").isJsonNull()) && !jsonObj.get("RescheduledDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RescheduledDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RescheduledDay").toString()));
      }
      if ((jsonObj.get("SeriesName") != null && !jsonObj.get("SeriesName").isJsonNull()) && !jsonObj.get("SeriesName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SeriesName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SeriesName").toString()));
      }
      if ((jsonObj.get("Track") != null && !jsonObj.get("Track").isJsonNull()) && !jsonObj.get("Track").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Track` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Track").toString()));
      }
      if ((jsonObj.get("Updated") != null && !jsonObj.get("Updated").isJsonNull()) && !jsonObj.get("Updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Race.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Race' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Race> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Race.class));

       return (TypeAdapter<T>) new TypeAdapter<Race>() {
           @Override
           public void write(JsonWriter out, Race value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Race read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Race given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Race
   * @throws IOException if the JSON string is invalid with respect to Race
   */
  public static Race fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Race.class);
  }

  /**
   * Convert an instance of Race to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

